/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47182 = 0 * ae;
    const double C47181 = ae * be;
    const double C47180 = 0 * be;
    const double C47179 = 0 * be;
    const double C47178 = ae + be;
    const double C47177 = 0 * be;
    const double C47176 = xA - xB;
    const double C47237 = 0 * be;
    const double C47264 = 0 * be;
    const double C47263 = zA - zB;
    const double C47319 = 0 * ae;
    const double C47314 = 0 * be;
    const double C47313 = 0 * be;
    const double C47364 = 0 * be;
    const double C47424 = xP - xQ;
    const double C47423 = zP - zQ;
    const double C47422 = p + q;
    const double C47421 = p * q;
    const double C47429 = bs[3];
    const double C47439 = bs[4];
    const double C47448 = bs[5];
    const double C47462 = bs[6];
    const double C47484 = bs[7];
    const double C47554 = yP - yQ;
    const double C47799 = bs[2];
    const double C119 = bs[0];
    const double C48244 = ce + de;
    const double C48243 = ce * de;
    const double C48242 = xC - xD;
    const double C48257 = yC - yD;
    const double C48266 = zC - zD;
    const double C48313 = yA - yB;
    const double C47189 = C47182 / C47178;
    const double C47186 = C47180 / C47178;
    const double C47184 = 2 * C47178;
    const double C47183 = std::pow(C47178, 2);
    const double C47188 = C47181 * C47176;
    const double C47187 = C47176 * C47180;
    const double C47185 = C47176 * C47179;
    const double C48208 = C47176 * be;
    const double C48207 = C47176 * ae;
    const double C48206 = std::pow(C47176, 2);
    const double C47238 = C47237 / C47178;
    const double C47315 = C47264 / C47178;
    const double C47265 = C47181 * C47263;
    const double C47316 = C47263 * C47264;
    const double C48325 = std::pow(C47263, 2);
    const double C48408 = C47263 * be;
    const double C48406 = C47263 * ae;
    const double C47326 = C47319 / C47178;
    const double C47321 = C47263 * C47314;
    const double C47365 = C47364 / C47178;
    const double C47449 = std::pow(C47424, 2);
    const double C47515 = C47424 * be;
    const double C47431 = C47423 * ae;
    const double C47430 = C47423 * C47424;
    const double C47647 = std::pow(C47423, 2);
    const double C47425 = 2 * C47421;
    const double C47603 = std::pow(C47554, 2);
    const double C48254 = 2 * C48244;
    const double C48563 = std::pow(C48244, 2);
    const double C48245 = std::pow(C48242, 2);
    const double C48562 = C48242 * de;
    const double C48561 = C48242 * ce;
    const double C48279 = std::pow(C48257, 2);
    const double C48567 = C48257 * de;
    const double C48565 = C48257 * ce;
    const double C48296 = std::pow(C48266, 2);
    const double C48568 = C48266 * de;
    const double C48566 = C48266 * ce;
    const double C48314 = std::pow(C48313, 2);
    const double C48368 = C48313 * be;
    const double C48366 = C48313 * ae;
    const double C48220 = std::pow(C47184, -1);
    const double C48556 = std::pow(C47184, -2);
    const double C47190 = 2 * C47183;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (xP - xQ) * ae * be) /
                        C47183;
    const double C48560 = C47183 * C47184;
    const double C48559 = 4 * C47183;
    const double C47192 = C47187 / C47178;
    const double C47191 = C47185 / C47178;
    const double C48549 = std::pow(C48207, 2);
    const double C48209 = C48206 * C47181;
    const double C47324 = C47316 / C47178;
    const double C48326 = C48325 * C47181;
    const double C48571 = std::pow(C48406, 2);
    const double C47327 = C47321 / C47178;
    const double C47518 = C47439 * C47515;
    const double C47522 = C47448 * C47515;
    const double C47532 = C47462 * C47515;
    const double C47560 = C47429 * C47515;
    const double C47580 = C47484 * C47515;
    const double C47434 = C47429 * C47431;
    const double C47441 = C47439 * C47431;
    const double C47451 = C47448 * C47431;
    const double C47466 = C47462 * C47431;
    const double C47490 = C47484 * C47431;
    const double C47433 = C47430 * ae;
    const double C47426 = C47425 / C47422;
    const double C126 = (-(bs[1] * C47515 * C47425) / C47422) / C47178;
    const double C131 = (-(bs[1] * C47431 * C47425) / C47422) / C47178;
    const double C120 = -(C47424 * bs[1] * C47425) / C47422;
    const double C233 = -(C47554 * bs[1] * C47425) / C47422;
    const double C341 = -(C47423 * bs[1] * C47425) / C47422;
    const double C48564 = std::pow(C48254, -1);
    const double C48598 = 2 * C48563;
    const double C48246 = C48245 * C48243;
    const double C48280 = C48279 * C48243;
    const double C48297 = C48296 * C48243;
    const double C48315 = C48314 * C47181;
    const double C48569 = std::pow(C48366, 2);
    const double C47199 = C47180 / C47190;
    const double C47196 = C47179 / C47190;
    const double C47195 = C47177 / C47190;
    const double C47318 = C47264 / C47190;
    const double C47323 = C47314 / C47190;
    const double C47322 = C47313 / C47190;
    const double C48596 = 4 * C48560;
    const double C48595 = C47178 * C48559;
    const double C47197 = 0 - C47192;
    const double C47194 = 0 - C47191;
    const double C48210 = C48209 / C47178;
    const double C47328 = 0 - C47324;
    const double C48327 = C48326 / C47178;
    const double C47331 = 0 - C47327;
    const double C47435 = C47433 * be;
    const double C47428 = -C47426;
    const double C47438 = std::pow(C47426, 4);
    const double C47461 = std::pow(C47426, 6);
    const double C141 =
        (be * std::pow(C47426, 2) * bs[2] * C47423 * ae +
         C47424 * std::pow(-C47426, 3) * bs[3] * C47423 * C47424 * ae * be) /
        C47183;
    const double C47798 = std::pow(C47426, 2);
    const double C127 =
        (C47424 * std::pow(C47426, 2) * bs[2] * C47515) / C47178 -
        (be * bs[1] * C47425) / (C47422 * C47178);
    const double C48247 = C48246 / C48244;
    const double C48281 = C48280 / C48244;
    const double C48298 = C48297 / C48244;
    const double C48316 = C48315 / C47178;
    const double C47202 = C47197 * ae;
    const double C47201 = C47194 * ae;
    const double C48211 = -C48210;
    const double C47332 = C47328 * ae;
    const double C48328 = -C48327;
    const double C47335 = C47331 * ae;
    const double C47440 = C47439 * C47435;
    const double C47450 = C47448 * C47435;
    const double C47464 = C47462 * C47435;
    const double C47488 = C47484 * C47435;
    const double C47432 = std::pow(C47428, 3);
    const double C47447 = std::pow(C47428, 5);
    const double C47483 = std::pow(C47428, 7);
    const double C47443 = C47438 * C47441;
    const double C47519 = C47439 * C47438;
    const double C47520 = C47438 * C47518;
    const double C47469 = C47461 * C47466;
    const double C47535 = C47462 * C47461;
    const double C47536 = C47461 * C47532;
    const double C47800 = C47799 * C47798;
    const double C132 = (C47424 * C47798 * C47799 * C47431) / C47178;
    const double C239 = (C47554 * C47798 * C47799 * C47515) / C47178;
    const double C244 = (C47554 * C47798 * C47799 * C47431) / C47178;
    const double C347 = (C47423 * C47798 * C47799 * C47515) / C47178;
    const double C352 = (C47423 * C47798 * C47799 * C47431) / C47178 -
                        (ae * bs[1] * C47425) / (C47422 * C47178);
    const double C48248 = -C48247;
    const double C48282 = -C48281;
    const double C48299 = -C48298;
    const double C48317 = -C48316;
    const double C47206 = C47202 / C47178;
    const double C47205 = C47201 / C47178;
    const double C48212 = std::exp(C48211);
    const double C47336 = C47332 / C47178;
    const double C48329 = std::exp(C48328);
    const double C47339 = C47335 / C47178;
    const double C47442 = C47438 * C47440;
    const double C47468 = C47461 * C47464;
    const double C47436 = C47432 * C47434;
    const double C47516 = C47429 * C47432;
    const double C47561 = C47432 * C47560;
    const double C251 = ((yP - yQ) * C47432 * C47429 * C47435) / C47183;
    const double C359 = (ae * std::pow(C47426, 2) * bs[2] * C47424 * be +
                         C47423 * C47432 * C47429 * C47435) /
                        C47183;
    const double C47453 = C47447 * C47451;
    const double C47452 = C47447 * C47450;
    const double C47525 = C47448 * C47447;
    const double C47526 = C47447 * C47522;
    const double C47493 = C47483 * C47490;
    const double C47492 = C47483 * C47488;
    const double C47585 = C47483 * C47580;
    const double C47446 = be * C47443;
    const double C47445 = C47424 * C47443;
    const double C47939 = C47554 * C47443;
    const double C47951 = C47423 * C47443;
    const double C47524 = C47424 * C47519;
    const double C47523 = C47519 * be;
    const double C47804 = C47519 * C47449;
    const double C47916 = C47519 * C47603;
    const double C47940 = C47554 * C47519;
    const double C47954 = C47519 * C47647;
    const double C48054 = C47423 * C47519;
    const double C48053 = C47519 * ae;
    const double C47563 = C47424 * C47520;
    const double C47614 = C47554 * C47520;
    const double C47645 = ae * C47520;
    const double C47644 = C47423 * C47520;
    const double C47471 = C47469 * C47449;
    const double C47482 = be * C47469;
    const double C47481 = C47424 * C47469;
    const double C47986 = C47469 * C47603;
    const double C48082 = C47554 * C47469;
    const double C48100 = C47423 * C47469;
    const double C47538 = C47535 * C47449;
    const double C47582 = C47424 * C47535;
    const double C47581 = C47535 * be;
    const double C48004 = C47535 * C47603;
    const double C48085 = C47554 * C47535;
    const double C48104 = C47535 * C47647;
    const double C47540 = C47424 * C47536;
    const double C47681 = C47536 * C47603;
    const double C47689 = C47554 * C47536;
    const double C47733 = C47536 * C47647;
    const double C47777 = ae * C47536;
    const double C47776 = C47423 * C47536;
    const double C121 = C47800 * C47449 - (bs[1] * C47425) / C47422;
    const double C234 = C47554 * C47424 * C47800;
    const double C342 = C47423 * C47424 * C47800;
    const double C517 = C47800 * C47603 - (bs[1] * C47425) / C47422;
    const double C619 = C47423 * C47554 * C47800;
    const double C870 = C47800 * C47647 - (bs[1] * C47425) / C47422;
    const double C48249 = std::exp(C48248);
    const double C48283 = std::exp(C48282);
    const double C48300 = std::exp(C48299);
    const double C48318 = std::exp(C48317);
    const double C47210 = C47206 - C47196;
    const double C47209 = C47205 - C47195;
    const double C9000 = C48212 * C239;
    const double C10063 = C48212 * C347;
    const double C47193 = C47188 * C48212;
    const double C48214 = C48212 * C48207;
    const double C48213 = C48212 / C47184;
    const double C48222 = C48220 * C48212;
    const double C48552 = C48212 * C48208;
    const double C48593 = C48556 * C48212;
    const double C48587 = C48212 * C48549;
    const double C47340 = C47336 - C47323;
    const double C47266 = C47265 * C48329;
    const double C118 = -(2 * C47181 * (zA - zB) * C48329) / C47178;
    const double C48407 = C48329 / C47184;
    const double C48409 = C48329 * C48406;
    const double C48416 = C48220 * C48329;
    const double C48581 = C48329 * C48408;
    const double C48609 = C48556 * C48329;
    const double C48607 = C48329 * C48571;
    const double C47343 = C47339 - C47322;
    const double C532 =
        (C47432 * C47429 * C47435 + C47442 * std::pow(yP - yQ, 2)) / C47183;
    const double C634 =
        (ae * C47554 * C47432 * C47429 * C47515 + C47423 * C47554 * C47442) /
        C47183;
    const double C47470 = C47424 * C47468;
    const double C47666 = C47468 * C47603;
    const double C47674 = C47554 * C47468;
    const double C47732 = C47423 * C47468;
    const double C142 = (C47432 * C47429 * C47435 + be * C47424 * C47436 +
                         C47424 * (be * C47436 + C47424 * std::pow(C47426, 4) *
                                                     bs[4] * C47435)) /
                        C47183;
    const double C143 =
        (2 * (be * C47436 + C47424 * C47442) +
         be * (C47436 + C47443 * std::pow(C47424, 2)) +
         C47424 * (C47442 + be * C47424 * C47443 +
                   C47424 * (be * C47443 +
                             C47424 * std::pow(C47428, 5) * bs[5] * C47435))) /
        C47183;
    const double C252 = ((yP - yQ) * (be * C47436 + C47424 * C47442)) / C47183;
    const double C360 = (ae * (C47424 * C47432 * C47429 * C47424 * be +
                               bs[2] * std::pow(C47426, 2) * be) +
                         C47423 * (be * C47436 + C47424 * C47442)) /
                        C47183;
    const double C133 = (C47798 * C47799 * C47431 + C47436 * C47449) / C47178;
    const double C134 =
        (2 * C47424 * C47436 + C47424 * (C47436 + C47443 * C47449)) / C47178;
    const double C245 = (C47554 * C47424 * C47436) / C47178;
    const double C246 = (C47554 * (C47436 + C47443 * C47449)) / C47178;
    const double C353 =
        (C47423 * C47424 * C47436 + C47424 * C47800 * ae) / C47178;
    const double C527 = (C47798 * C47799 * C47431 + C47436 * C47603) / C47178;
    const double C629 =
        (C47423 * C47554 * C47436 + C47554 * C47800 * ae) / C47178;
    const double C880 =
        (C47798 * C47799 * C47431 + C47423 * (C47423 * C47436 + C47800 * ae) +
         C47423 * C47800 * ae) /
        C47178;
    const double C1162 =
        (2 * C47554 * C47436 + C47554 * (C47436 + C47443 * C47603)) / C47178;
    const double C47564 = C47516 * be;
    const double C47803 = C47424 * C47516;
    const double C47907 = C47554 * C47516;
    const double C47953 = C47423 * C47516;
    const double C47952 = C47516 * ae;
    const double C354 = (C47423 * (C47436 + C47443 * C47449) +
                         (C47800 + C47516 * C47449) * ae) /
                        C47178;
    const double C1372 = (C47423 * (C47436 + C47443 * C47603) +
                          (C47800 + C47516 * C47603) * ae) /
                         C47178;
    const double C2701 =
        (2 * (C47423 * C47436 + C47800 * ae) +
         C47423 * (C47436 + C47423 * (C47423 * C47443 + C47516 * ae) +
                   C47423 * C47516 * ae) +
         (C47800 + C47516 * C47647) * ae) /
        C47178;
    const double C122 =
        2 * C47424 * C47800 + C47424 * (C47800 + C47516 * C47449);
    const double C235 = C47554 * (C47800 + C47516 * C47449);
    const double C343 = C47423 * (C47800 + C47516 * C47449);
    const double C1155 =
        2 * C47554 * C47800 + C47554 * (C47800 + C47516 * C47603);
    const double C1365 = C47423 * (C47800 + C47516 * C47603);
    const double C2694 =
        2 * C47423 * C47800 + C47423 * (C47800 + C47516 * C47647);
    const double C885 = (C47432 * C47429 * C47435 + ae * C47423 * C47561 +
                         C47423 * (ae * C47561 + C47423 * C47442)) /
                        C47183;
    const double C128 =
        (C47798 * C47799 * C47515 + C47424 * (C47424 * C47561 + C47800 * be) +
         C47424 * C47800 * be) /
        C47178;
    const double C240 = (C47554 * (C47424 * C47561 + C47800 * be)) / C47178;
    const double C348 = (C47423 * (C47424 * C47561 + C47800 * be)) / C47178;
    const double C522 = (C47798 * C47799 * C47515 + C47561 * C47603) / C47178;
    const double C624 = (C47423 * C47554 * C47561) / C47178;
    const double C875 = (C47798 * C47799 * C47515 + C47561 * C47647) / C47178;
    const double C1159 =
        (2 * C47554 * C47561 + C47554 * (C47561 + C47520 * C47603)) / C47178;
    const double C1369 = (C47423 * (C47561 + C47520 * C47603)) / C47178;
    const double C2698 =
        (2 * C47423 * C47561 + C47423 * (C47561 + C47520 * C47647)) / C47178;
    const double C9002 = C48212 * C251;
    const double C10065 = C48212 * C359;
    const double C47455 = C47453 * C47449;
    const double C47460 = be * C47453;
    const double C47459 = C47424 * C47453;
    const double C47973 = C47453 * C47603;
    const double C47985 = C47554 * C47453;
    const double C48052 = C47423 * C47453;
    const double C1643 =
        (3 * (C47436 + C47443 * C47603) +
         C47554 * (2 * C47554 * C47443 + C47554 * (C47443 + C47453 * C47603))) /
        C47178;
    const double C1826 =
        (C47423 * (2 * C47554 * C47443 + C47554 * (C47443 + C47453 * C47603)) +
         (2 * C47554 * C47516 + C47554 * (C47516 + C47519 * C47603)) * ae) /
        C47178;
    const double C47454 = C47424 * C47452;
    const double C47635 = C47554 * C47452;
    const double C47646 = C47423 * C47452;
    const double C1167 = (2 * C47554 * C47442 +
                          C47554 * (C47442 + C47452 * std::pow(C47554, 2))) /
                         C47183;
    const double C1377 = (ae * (C47561 + C47520 * C47603) +
                          C47423 * (C47442 + C47452 * C47603)) /
                         C47183;
    const double C1646 =
        (3 * (C47442 + C47452 * C47603) +
         C47554 * (2 * C47554 * C47452 + C47554 * (C47452 + C47468 * C47603))) /
        C47183;
    const double C2706 = (2 * (ae * C47561 + C47423 * C47442) +
                          ae * (C47561 + C47520 * std::pow(C47423, 2)) +
                          C47423 * (C47442 + ae * C47423 * C47520 +
                                    C47423 * (ae * C47520 + C47423 * C47452))) /
                         C47183;
    const double C47527 = C47525 * C47449;
    const double C47534 = C47424 * C47525;
    const double C47533 = C47525 * be;
    const double C47993 = C47525 * C47603;
    const double C48003 = C47554 * C47525;
    const double C48055 = C47525 * C47647;
    const double C48102 = C47423 * C47525;
    const double C48101 = C47525 * ae;
    const double C47528 = C47424 * C47526;
    const double C47620 = C47526 * C47603;
    const double C47636 = C47554 * C47526;
    const double C47649 = C47526 * C47647;
    const double C47731 = ae * C47526;
    const double C47730 = C47423 * C47526;
    const double C1829 =
        (ae * (2 * C47554 * C47520 + C47554 * (C47520 + C47526 * C47603)) +
         C47423 * (2 * C47554 * C47452 + C47554 * (C47452 + C47468 * C47603))) /
        C47183;
    const double C47495 = C47493 * C47449;
    const double C47494 = C47424 * C47492;
    const double C47675 = C47492 * C47603;
    const double C47760 = C47554 * C47492;
    const double C47778 = C47423 * C47492;
    const double C47587 = C47424 * C47585;
    const double C47690 = C47585 * C47603;
    const double C47761 = C47554 * C47585;
    const double C47780 = C47585 * C47647;
    const double C528 = (C47424 * C47436 + C47445 * C47603) / C47178;
    const double C47568 = C47524 * be;
    const double C47812 = 2 * C47524;
    const double C47909 = C47554 * C47524;
    const double C47960 = C47423 * C47524;
    const double C47959 = C47524 * ae;
    const double C47805 = C47516 + C47804;
    const double C47917 = C47516 + C47916;
    const double C47997 = 2 * C47940;
    const double C48028 = C47423 * C47940;
    const double C48027 = C47940 * ae;
    const double C47956 = C47516 + C47954;
    const double C48059 = 2 * C48054;
    const double C48057 = C48054 * ae;
    const double C2276 = (C47554 * C47442 + ae * C47423 * C47614 +
                          C47423 * (ae * C47614 + C47423 * C47554 * C47452)) /
                         C47183;
    const double C2264 = (C47554 * C47561 + C47614 * C47647) / C47178;
    const double C47473 = C47453 + C47471;
    const double C47489 = 2 * C47481;
    const double C47487 = be * C47481;
    const double C47977 = C47481 * C47603;
    const double C48042 = C47554 * C47481;
    const double C48067 = C47423 * C47481;
    const double C47988 = C47453 + C47986;
    const double C48086 = C47423 * C48082;
    const double C47541 = C47525 + C47538;
    const double C47586 = C47582 * be;
    const double C48014 = C47582 * C47603;
    const double C48045 = C47554 * C47582;
    const double C48070 = C47582 * C47647;
    const double C48006 = C47525 + C48004;
    const double C48088 = C48085 * C47647;
    const double C48108 = C47525 + C48104;
    const double C47682 = C47526 + C47681;
    const double C47691 = 2 * C47689;
    const double C47710 = C47689 * C47647;
    const double C47759 = ae * C47689;
    const double C47758 = C47423 * C47689;
    const double C47737 = C47526 + C47733;
    const double C47784 = 2 * C47776;
    const double C47782 = ae * C47776;
    const double C48599 = C48564 * C48249;
    const double C48597 = C48249 * C48561;
    const double C231 = -(C48249 * C48562) / C48244;
    const double C48601 = C48564 * C48283;
    const double C48600 = C48283 * C48565;
    const double C447 = -(C48283 * C48567) / C48244;
    const double C48603 = C48564 * C48300;
    const double C48602 = C48300 * C48566;
    const double C721 = -(C48300 * C48568) / C48244;
    const double C48367 = C48318 / C47184;
    const double C48369 = C48318 * C48366;
    const double C48376 = C48220 * C48318;
    const double C48575 = C48318 * C48368;
    const double C48606 = C48556 * C48318;
    const double C48604 = C48318 * C48569;
    const double C47215 = C47210 / C47184;
    const double C47214 = C47176 * C47210;
    const double C47213 = C47209 + C47186;
    const double C47200 = C47193 / C47183;
    const double C47198 = 2 * C47193;
    const double C48215 = C48214 * C48208;
    const double C48221 = C48214 / C47190;
    const double C48553 = C48220 * C48214;
    const double C48551 = C48214 / C47178;
    const double C1000 = (C48212 * std::pow(C48208, 2)) / C47183 + C48213;
    const double C48223 = C48222 * C48208;
    const double C48557 = C48207 * C48222;
    const double C48555 = 2 * C48222;
    const double C48610 = C48222 / C48559;
    const double C105 = C48222 / C48596;
    const double C26137 = C48222 / C47184;
    const double C48589 = C48552 / C47178;
    const double C1001 = (-2 * C48220 * C48552) / C47178;
    const double C48623 = C48587 / C47183;
    const double C47345 = C47340 / C47184;
    const double C47344 = C47263 * C47340;
    const double C47298 = 2 * C47266;
    const double C47320 = C47266 / C47183;
    const double C2397 =
        ((0 * ae) / C47178 - C47266 / C47183) / C47184 + (0 * ae) / C47178;
    const double C4868 =
        ((C48329 - (C47263 * 2 * C47266) / C47178) * ae) / C47178 -
        C47264 / C47190;
    const double C4869 = (0 * ae) / C47178 - C47266 / C47183;
    const double C15014 = (C48329 * std::pow(C48408, 2)) / C47183 + C48407;
    const double C48410 = C48409 * C48408;
    const double C48415 = C48409 / C47190;
    const double C48574 = C48409 / C47178;
    const double C48572 = C48220 * C48409;
    const double C2396 =
        (((C48329 - (C47263 * 2 * C47266) / C47178) * ae) / C47178 -
         C47264 / C47190) /
            C47184 +
        ((C47263 * ((0 * ae) / C47178 - C47266 / C47183) + C48416) * ae) /
            C47178;
    const double C48417 = C48416 * C48408;
    const double C48585 = C48406 * C48416;
    const double C48584 = 2 * C48416;
    const double C48622 = C48416 / C48559;
    const double C17481 = C48416 / C48596;
    const double C36201 = C48416 / C47184;
    const double C48618 = C48581 / C47178;
    const double C15015 = (-2 * C48220 * C48581) / C47178;
    const double C48630 = C48607 / C47183;
    const double C47349 = C47343 + C47315;
    const double C9006 = C48212 * C532;
    const double C9378 = C48212 * C634;
    const double C47667 = C47452 + C47666;
    const double C47676 = 2 * C47674;
    const double C47709 = C47423 * C47674;
    const double C9019 = C48212 * C252;
    const double C11182 = C48222 * C252;
    const double C23376 = C48222 * C252;
    const double C10074 = C48212 * C360;
    const double C12676 = C48222 * C360;
    const double C24878 = C48222 * C360;
    const double C47565 = C47563 + C47564;
    const double C630 =
        (C47423 * C47554 * C47445 + C47554 * C47803 * ae) / C47178;
    const double C881 =
        (C47424 * C47436 + C47423 * (C47423 * C47445 + C47803 * ae) +
         C47423 * C47803 * ae) /
        C47178;
    const double C518 = C47424 * C47800 + C47803 * C47603;
    const double C620 = C47423 * C47554 * C47803;
    const double C871 = C47424 * C47800 + C47803 * C47647;
    const double C1156 =
        2 * C47554 * C47803 + C47554 * (C47803 + C47524 * C47603);
    const double C1366 = C47423 * (C47803 + C47524 * C47603);
    const double C2695 =
        2 * C47423 * C47803 + C47423 * (C47803 + C47524 * C47647);
    const double C2267 =
        (C47554 * C47436 + C47423 * (C47423 * C47554 * C47443 + C47907 * ae) +
         C47423 * C47907 * ae) /
        C47178;
    const double C3166 =
        (2 * (C47423 * C47939 + C47907 * ae) +
         C47423 * (C47939 + C47423 * (C47423 * C47554 * C47453 + C47940 * ae) +
                   C47423 * C47940 * ae) +
         (C47907 + C47940 * C47647) * ae) /
        C47178;
    const double C2258 = C47554 * C47800 + C47907 * C47647;
    const double C3160 =
        2 * C47423 * C47907 + C47423 * (C47907 + C47940 * C47647);
    const double C47955 = C47951 + C47952;
    const double C10069 = C48212 * C885;
    const double C9017 = C48212 * C240;
    const double C11178 = C48222 * C240;
    const double C23372 = C48222 * C240;
    const double C10072 = C48212 * C348;
    const double C12672 = C48222 * C348;
    const double C24874 = C48222 * C348;
    const double C9004 = C48212 * C522;
    const double C9376 = C48212 * C624;
    const double C10067 = C48212 * C875;
    const double C9008 = C48212 * C1159;
    const double C9380 = C48212 * C1369;
    const double C10937 = C48212 * C2698;
    const double C47457 = C47443 + C47455;
    const double C47472 = C47460 + C47470;
    const double C47465 = 2 * C47459;
    const double C47463 = be * C47459;
    const double C47942 = C47554 * C47459;
    const double C47958 = C47423 * C47459;
    const double C1163 =
        (2 * C47554 * C47445 + C47554 * (C47445 + C47459 * C47603)) / C47178;
    const double C1373 = (C47423 * (C47445 + C47459 * C47603) +
                          (C47803 + C47524 * C47603) * ae) /
                         C47178;
    const double C1644 =
        (3 * (C47445 + C47459 * C47603) +
         C47554 * (2 * C47554 * C47459 + C47554 * (C47459 + C47481 * C47603))) /
        C47178;
    const double C2702 =
        (2 * (C47423 * C47445 + C47803 * ae) +
         C47423 * (C47445 + C47423 * (C47423 * C47459 + C47524 * ae) +
                   C47423 * C47524 * ae) +
         (C47803 + C47524 * C47647) * ae) /
        C47178;
    const double C47974 = C47443 + C47973;
    const double C47987 = 2 * C47985;
    const double C48026 = C47423 * C47985;
    const double C48056 = C48052 + C48053;
    const double C47456 = C47446 + C47454;
    const double C47648 = C47645 + C47646;
    const double C9010 = C48212 * C1167;
    const double C9382 = C48212 * C1377;
    const double C9014 = C48212 * C1646;
    const double C10939 = C48212 * C2706;
    const double C47529 = C47519 + C47527;
    const double C47539 = 2 * C47534;
    const double C47537 = C47534 * be;
    const double C47919 = C47534 * C47603;
    const double C47943 = C47554 * C47534;
    const double C47961 = C47534 * C47647;
    const double C48069 = C47423 * C47534;
    const double C48068 = C47534 * ae;
    const double C1827 =
        (C47423 * (2 * C47554 * C47459 + C47554 * (C47459 + C47481 * C47603)) +
         (2 * C47554 * C47524 + C47554 * (C47524 + C47534 * C47603)) * ae) /
        C47178;
    const double C47542 = C47540 + C47533;
    const double C47994 = C47519 + C47993;
    const double C48005 = 2 * C48003;
    const double C48029 = C48003 * C47647;
    const double C48084 = C47423 * C48003;
    const double C48083 = C48003 * ae;
    const double C48058 = C47519 + C48055;
    const double C48109 = 2 * C48102;
    const double C48107 = C48102 * ae;
    const double C48106 = C48100 + C48101;
    const double C47530 = C47528 + C47523;
    const double C47621 = C47520 + C47620;
    const double C47684 = 2 * C47636;
    const double C47708 = ae * C47636;
    const double C47707 = C47423 * C47636;
    const double C3169 =
        (2 * (ae * C47614 + C47423 * C47635) +
         ae * (C47614 + C47636 * std::pow(C47423, 2)) +
         C47423 * (C47635 + ae * C47423 * C47636 +
                   C47423 * (ae * C47636 + C47423 * C47554 * C47468))) /
        C47183;
    const double C3163 =
        (2 * C47423 * C47614 + C47423 * (C47614 + C47636 * C47647)) / C47178;
    const double C47650 = C47520 + C47649;
    const double C47735 = C47731 + C47732;
    const double C47736 = 2 * C47730;
    const double C47734 = ae * C47730;
    const double C9386 = C48212 * C1829;
    const double C47497 = C47469 + C47495;
    const double C47496 = C47482 + C47494;
    const double C47677 = C47468 + C47675;
    const double C47763 = C47423 * C47760;
    const double C47783 = C47777 + C47778;
    const double C47588 = C47587 + C47581;
    const double C47692 = C47536 + C47690;
    const double C47765 = C47761 * C47647;
    const double C47785 = C47536 + C47780;
    const double C2268 =
        (C47554 * C47445 + C47423 * (C47423 * C47554 * C47459 + C47909 * ae) +
         C47423 * C47909 * ae) /
        C47178;
    const double C2259 = C47554 * C47803 + C47909 * C47647;
    const double C123 = 3 * (C47800 + C47516 * C47449) +
                        C47424 * (2 * C47803 + C47424 * C47805);
    const double C236 = C47554 * (2 * C47803 + C47424 * C47805);
    const double C344 = C47423 * (2 * C47803 + C47424 * C47805);
    const double C519 = C47800 + C47516 * C47449 + C47805 * C47603;
    const double C621 = C47423 * C47554 * C47805;
    const double C872 = C47800 + C47516 * C47449 + C47805 * C47647;
    const double C2273 =
        (C47436 + C47443 * C47603 +
         C47423 * (C47423 * (C47443 + C47453 * C47603) + C47917 * ae) +
         C47423 * C47917 * ae) /
        C47178;
    const double C1637 = 3 * (C47800 + C47516 * C47603) +
                         C47554 * (2 * C47907 + C47554 * C47917);
    const double C1820 = C47423 * (2 * C47907 + C47554 * C47917);
    const double C2261 = C47800 + C47516 * C47603 + C47917 * C47647;
    const double C3586 = 3 * (C47800 + C47516 * C47647) +
                         C47423 * (2 * C47953 + C47423 * C47956);
    const double C9887 = C48212 * C2276;
    const double C9885 = C48212 * C2264;
    const double C47475 = C47424 * C47473;
    const double C47485 = 3 * C47473;
    const double C47480 = be * C47473;
    const double C47945 = C47554 * C47473;
    const double C47965 = C47423 * C47473;
    const double C47491 = C47468 + C47487;
    const double C47978 = C47459 + C47977;
    const double C48046 = C47423 * C48042;
    const double C47989 = C47554 * C47988;
    const double C48034 = C47423 * C47988;
    const double C47543 = C47424 * C47541;
    const double C47583 = C47541 * be;
    const double C47922 = C47541 * C47603;
    const double C47946 = C47554 * C47541;
    const double C47968 = C47541 * C47647;
    const double C48015 = C47534 + C48014;
    const double C48047 = C48045 * C47647;
    const double C48073 = C47534 + C48070;
    const double C48007 = C47554 * C48006;
    const double C48037 = C48006 * C47647;
    const double C48091 = C48003 + C48088;
    const double C48111 = C47423 * C48108;
    const double C47685 = C47554 * C47682;
    const double C47688 = 3 * C47682;
    const double C47715 = ae * C47682;
    const double C47714 = C47423 * C47682;
    const double C47712 = C47636 + C47710;
    const double C47764 = 2 * C47758;
    const double C47762 = ae * C47758;
    const double C47740 = C47423 * C47737;
    const double C47779 = 3 * C47737;
    const double C47775 = ae * C47737;
    const double C47786 = C47468 + C47782;
    const double C112 = C48599 / C48254;
    const double C110 = C48249 / C48254 - (C48597 * C48562) / C48563;
    const double C111 = C48597 / C48598 - (C48599 * C48562) / C48244;
    const double C449 = C48597 / C48244;
    const double C515 = C48601 / C48254;
    const double C229 = C48600 / C48244;
    const double C513 = C48283 / C48254 - (C48600 * C48567) / C48563;
    const double C514 = C48600 / C48598 - (C48601 * C48567) / C48244;
    const double C869 = C48603 / C48254;
    const double C339 = C48602 / C48244;
    const double C867 = C48300 / C48254 - (C48602 * C48568) / C48563;
    const double C868 = C48602 / C48598 - (C48603 * C48568) / C48244;
    const double C7641 = (C48318 * std::pow(C48368, 2)) / C47183 + C48367;
    const double C48370 = C48369 * C48368;
    const double C48375 = C48369 / C47190;
    const double C48573 = C48369 / C47178;
    const double C48570 = C48220 * C48369;
    const double C48377 = C48376 * C48368;
    const double C48579 = C48366 * C48376;
    const double C48578 = 2 * C48376;
    const double C48616 = C48376 / C48559;
    const double C8907 = C48376 / C48596;
    const double C26140 = C48376 / C47184;
    const double C48612 = C48575 / C47178;
    const double C7642 = (-2 * C48220 * C48575) / C47178;
    const double C48628 = C48604 / C47183;
    const double C47219 = C47214 + 0;
    const double C47218 = C47213 / C47184;
    const double C47204 = C47189 - C47200;
    const double C47203 = C47176 * C47198;
    const double C1008 =
        ((-C47198 / C47178) / C47184 - (0 * be) / C47178) / C47184 -
        (0 * be) / C47178;
    const double C8908 = -C47198 / C47178;
    const double C23238 = (-C47198 / C47178) / C47184 - (0 * be) / C47178;
    const double C48216 = C48215 / C47183;
    const double C48590 = 2 * C48553;
    const double C11205 = C48551 * C252;
    const double C11201 = C48551 * C240;
    const double C11196 = C48551 * C1167;
    const double C11192 = C48551 * C1159;
    const double C11188 = C48551 * C532;
    const double C11184 = C48551 * C522;
    const double C11180 = C48551 * C251;
    const double C11176 = C48551 * C239;
    const double C11595 = C48551 * C1646;
    const double C11759 = C48551 * C1829;
    const double C11751 = C48551 * C1377;
    const double C11747 = C48551 * C1369;
    const double C11743 = C48551 * C634;
    const double C11739 = C48551 * C624;
    const double C12683 = C48551 * C360;
    const double C12679 = C48551 * C348;
    const double C12674 = C48551 * C359;
    const double C12670 = C48551 * C347;
    const double C13246 = C48551 * C2276;
    const double C13242 = C48551 * C2264;
    const double C13806 = C48551 * C885;
    const double C13802 = C48551 * C875;
    const double C19795 = C48551 * C2706;
    const double C19791 = C48551 * C2698;
    const double C1203 = C1000 * C252;
    const double C1197 = C1000 * C240;
    const double C1190 = C1000 * C532;
    const double C1184 = C1000 * C522;
    const double C1178 = C1000 * C251;
    const double C1172 = C1000 * C239;
    const double C1663 = C1000 * C1167;
    const double C1657 = C1000 * C1159;
    const double C1852 = C1000 * C1377;
    const double C1846 = C1000 * C1369;
    const double C1840 = C1000 * C634;
    const double C1834 = C1000 * C624;
    const double C2742 = C1000 * C360;
    const double C2736 = C1000 * C348;
    const double C2729 = C1000 * C885;
    const double C2723 = C1000 * C875;
    const double C2717 = C1000 * C359;
    const double C2711 = C1000 * C347;
    const double C3180 = C1000 * C2276;
    const double C3174 = C1000 * C2264;
    const double C3612 = C1000 * C2706;
    const double C3606 = C1000 * C2698;
    const double C48224 = C48223 / C47178;
    const double C48594 = C48557 / C47190;
    const double C48624 = C48551 - C48589;
    const double C23231 = -C48589;
    const double C1180 = C1001 * C252;
    const double C1174 = C1001 * C240;
    const double C2719 = C1001 * C360;
    const double C2713 = C1001 * C348;
    const double C48638 = C48623 + C48213;
    const double C47350 = C47344 + 0;
    const double C47317 = C47263 * C47298;
    const double C15018 =
        ((-C47264 / C47178) / C47184 -
         ((C48329 - (C47263 * C47298) / C47178) * be) / C47178) /
            C47184 -
        ((C47263 * ((-C47298 / C47178) / C47184 - (0 * be) / C47178) + C48416) *
         be) /
            C47178;
    const double C15019 =
        ((-C47298 / C47178) / C47184 - (0 * be) / C47178) / C47184 -
        (0 * be) / C47178;
    const double C30749 = (-C47298 / C47178) / C47184 - (0 * be) / C47178;
    const double C47330 = C47326 - C47320;
    const double C48411 = C48410 / C47183;
    const double C2395 =
        (((0 - (C47263 * C47264) / C47178) * ae) / C47178 - (0 * be) / C47190) /
            C47184 +
        ((C47263 * (((C48329 - (C47263 * 2 * C47266) / C47178) * ae) / C47178 -
                    C47264 / C47190) +
          C48574) *
         ae) /
            C47178 +
        (0 * ae) / C47178 - C47266 / C47183;
    const double C48608 = 2 * C48572;
    const double C48418 = C48417 / C47178;
    const double C48621 = C48585 / C47190;
    const double C48635 = C48574 - C48618;
    const double C30746 = -C48618;
    const double C48642 = C48630 + C48407;
    const double C47353 = C47349 / C47184;
    const double C8997 =
        (4 * (2 * C47635 + C47554 * C47667) +
         C47554 *
             (3 * C47667 + C47554 * (2 * C47554 * C47468 +
                                     C47554 * (C47468 + C47492 * C47603)))) /
        C47183;
    const double C129 =
        (2 * (C47424 * C47561 + C47800 * be) +
         C47424 * (C47561 + C47424 * C47565 + C47424 * C47516 * be) +
         (C47800 + C47516 * C47449) * be) /
        C47178;
    const double C241 =
        (C47554 * (C47561 + C47424 * C47565 + C47803 * be)) / C47178;
    const double C349 =
        (C47423 * (C47561 + C47424 * C47565 + C47803 * be)) / C47178;
    const double C523 =
        (C47424 * C47561 + C47800 * be + C47565 * C47603) / C47178;
    const double C625 = (C47423 * C47554 * C47565) / C47178;
    const double C876 =
        (C47424 * C47561 + C47800 * be + C47565 * C47647) / C47178;
    const double C3592 =
        (3 * (C47436 + C47423 * C47955 + C47953 * ae) +
         C47423 * (2 * C47955 +
                   C47423 * (C47443 + C47423 * (C47423 * C47453 + C47519 * ae) +
                             C47423 * C47519 * ae) +
                   C47956 * ae) +
         (2 * C47953 + C47423 * C47956) * ae) /
        C47178;
    const double C135 = (3 * (C47436 + C47443 * C47449) +
                         C47424 * (2 * C47445 + C47424 * C47457)) /
                        C47178;
    const double C247 = (C47554 * (2 * C47445 + C47424 * C47457)) / C47178;
    const double C355 = (C47423 * (2 * C47445 + C47424 * C47457) +
                         (2 * C47803 + C47424 * C47805) * ae) /
                        C47178;
    const double C529 = (C47436 + C47443 * C47449 + C47457 * C47603) / C47178;
    const double C631 =
        (C47423 * C47554 * C47457 + C47554 * C47805 * ae) / C47178;
    const double C882 =
        (C47436 + C47443 * C47449 + C47423 * (C47423 * C47457 + C47805 * ae) +
         C47423 * C47805 * ae) /
        C47178;
    const double C1164 =
        (2 * C47554 * C47457 + C47554 * (C47457 + C47473 * C47603)) / C47178;
    const double C47474 = C47424 * C47472;
    const double C47479 = 2 * C47472;
    const double C47638 = C47554 * C47472;
    const double C47654 = C47423 * C47472;
    const double C47467 = C47452 + C47463;
    const double C47962 = C47958 + C47959;
    const double C8994 =
        (4 * (2 * C47939 + C47554 * C47974) +
         C47554 *
             (3 * C47974 + C47554 * (2 * C47554 * C47453 +
                                     C47554 * (C47453 + C47469 * C47603)))) /
        C47178;
    const double C9116 =
        (C47423 *
             (3 * C47974 + C47554 * (2 * C47554 * C47453 +
                                     C47554 * (C47453 + C47469 * C47603))) +
         (3 * C47917 +
          C47554 * (2 * C47940 + C47554 * (C47519 + C47525 * C47603))) *
             ae) /
        C47178;
    const double C48030 = C48026 + C48027;
    const double C48060 = C47423 * C48056;
    const double C48099 = 2 * C48056;
    const double C144 =
        (3 * (C47442 + be * C47445 + C47424 * C47456) +
         be * (2 * C47445 + C47424 * C47457) +
         C47424 *
             (2 * C47456 + be * C47457 +
              C47424 * (C47452 + be * C47424 * C47453 +
                        C47424 * (be * C47453 + C47424 * std::pow(C47426, 6) *
                                                    bs[6] * C47435)))) /
        C47183;
    const double C253 =
        ((yP - yQ) * (C47442 + be * C47445 + C47424 * C47456)) / C47183;
    const double C361 =
        (ae * (C47432 * C47429 * C47515 +
               C47424 * (C47424 * C47438 * C47439 * C47515 + C47516 * be) +
               C47424 * C47516 * be) +
         C47423 * (C47442 + be * C47445 + C47424 * C47456)) /
        C47183;
    const double C533 =
        (be * C47436 + C47424 * C47442 + C47456 * std::pow(yP - yQ, 2)) /
        C47183;
    const double C635 = (ae * C47554 * (C47424 * C47520 + C47516 * be) +
                         C47423 * C47554 * C47456) /
                        C47183;
    const double C886 = (be * C47436 + C47424 * C47442 + ae * C47423 * C47565 +
                         C47423 * (ae * C47565 + C47423 * C47456)) /
                        C47183;
    const double C1168 = (2 * C47554 * C47456 +
                          C47554 * (C47456 + C47472 * std::pow(C47554, 2))) /
                         C47183;
    const double C47574 = C47529 * be;
    const double C47813 = C47424 * C47529;
    const double C47817 = 3 * C47529;
    const double C47911 = C47554 * C47529;
    const double C47967 = C47423 * C47529;
    const double C47966 = C47529 * ae;
    const double C1374 = (C47423 * (C47457 + C47473 * C47603) +
                          (C47805 + C47529 * C47603) * ae) /
                         C47178;
    const double C2703 =
        (2 * (C47423 * C47457 + C47805 * ae) +
         C47423 * (C47457 + C47423 * (C47423 * C47473 + C47529 * ae) +
                   C47423 * C47529 * ae) +
         (C47805 + C47529 * C47647) * ae) /
        C47178;
    const double C1157 =
        2 * C47554 * C47805 + C47554 * (C47805 + C47529 * C47603);
    const double C1367 = C47423 * (C47805 + C47529 * C47603);
    const double C2696 =
        2 * C47423 * C47805 + C47423 * (C47805 + C47529 * C47647);
    const double C47920 = C47524 + C47919;
    const double C48013 = 2 * C47943;
    const double C48044 = C47423 * C47943;
    const double C48043 = C47943 * ae;
    const double C3167 =
        (2 * (C47423 * C47942 + C47909 * ae) +
         C47423 * (C47942 + C47423 * (C47423 * C47554 * C47481 + C47943 * ae) +
                   C47423 * C47943 * ae) +
         (C47909 + C47943 * C47647) * ae) /
        C47178;
    const double C3161 =
        2 * C47423 * C47909 + C47423 * (C47909 + C47943 * C47647);
    const double C47963 = C47524 + C47961;
    const double C48074 = 2 * C48069;
    const double C48072 = C48069 * ae;
    const double C48071 = C48067 + C48068;
    const double C47544 = C47424 * C47542;
    const double C47579 = 2 * C47542;
    const double C47623 = C47542 * C47603;
    const double C47639 = C47554 * C47542;
    const double C47655 = C47542 * C47647;
    const double C47745 = ae * C47542;
    const double C47744 = C47423 * C47542;
    const double C47998 = C47554 * C47994;
    const double C48002 = 3 * C47994;
    const double C48036 = C47423 * C47994;
    const double C48035 = C47994 * ae;
    const double C10057 =
        (2 * (C47423 * C47974 + C47917 * ae) +
         C47423 * (C47974 + C47423 * (C47423 * C47988 + C47994 * ae) +
                   C47423 * C47994 * ae) +
         (C47917 + C47994 * C47647) * ae) /
        C47178;
    const double C10054 =
        2 * C47423 * C47917 + C47423 * (C47917 + C47994 * C47647);
    const double C48031 = C47940 + C48029;
    const double C48089 = 2 * C48084;
    const double C48087 = C48084 * ae;
    const double C48090 = C48086 + C48083;
    const double C48061 = C47423 * C48058;
    const double C48105 = 3 * C48058;
    const double C48103 = C48058 * ae;
    const double C48110 = C47423 * C48106;
    const double C47567 = C47424 * C47530;
    const double C47572 = 2 * C47530;
    const double C47616 = C47554 * C47530;
    const double C47653 = ae * C47530;
    const double C47652 = C47423 * C47530;
    const double C1378 = (ae * (C47565 + C47530 * C47603) +
                          C47423 * (C47456 + C47472 * C47603)) /
                         C47183;
    const double C2707 = (2 * (ae * C47565 + C47423 * C47456) +
                          ae * (C47565 + C47530 * std::pow(C47423, 2)) +
                          C47423 * (C47456 + ae * C47423 * C47530 +
                                    C47423 * (ae * C47530 + C47423 * C47472))) /
                         C47183;
    const double C1160 =
        (2 * C47554 * C47565 + C47554 * (C47565 + C47530 * C47603)) / C47178;
    const double C1370 = (C47423 * (C47565 + C47530 * C47603)) / C47178;
    const double C2699 =
        (2 * C47423 * C47565 + C47423 * (C47565 + C47530 * C47647)) / C47178;
    const double C2279 =
        (C47442 + C47452 * C47603 + ae * C47423 * C47621 +
         C47423 * (ae * C47621 + C47423 * (C47452 + C47468 * C47603))) /
        C47183;
    const double C9119 =
        (ae * (3 * C47621 +
               C47554 * (2 * C47636 + C47554 * (C47526 + C47536 * C47603))) +
         C47423 *
             (3 * C47667 + C47554 * (2 * C47554 * C47468 +
                                     C47554 * (C47468 + C47492 * C47603)))) /
        C47183;
    const double C1640 = (3 * (C47561 + C47520 * C47603) +
                          C47554 * (2 * C47614 + C47554 * C47621)) /
                         C47178;
    const double C1823 = (C47423 * (2 * C47614 + C47554 * C47621)) / C47178;
    const double C2270 = (C47561 + C47520 * C47603 + C47621 * C47647) / C47178;
    const double C10056 =
        (2 * C47423 * C47621 + C47423 * (C47621 + C47682 * C47647)) / C47178;
    const double C47711 = C47708 + C47709;
    const double C10515 = C48212 * C3169;
    const double C19245 = C48551 * C3169;
    const double C10513 = C48212 * C3163;
    const double C19241 = C48551 * C3163;
    const double C3595 =
        (3 * (C47442 + ae * C47644 + C47423 * C47648) +
         ae * (2 * C47644 + C47423 * C47650) +
         C47423 * (2 * C47648 + ae * C47650 +
                   C47423 * (C47452 + ae * C47423 * C47526 +
                             C47423 * (ae * C47526 + C47423 * C47468)))) /
        C47183;
    const double C3589 = (3 * (C47561 + C47520 * C47647) +
                          C47423 * (2 * C47644 + C47423 * C47650)) /
                         C47178;
    const double C47739 = C47423 * C47735;
    const double C47774 = 2 * C47735;
    const double C47738 = C47452 + C47734;
    const double C47499 = C47424 * C47497;
    const double C1645 =
        (3 * (C47457 + C47473 * C47603) +
         C47554 * (2 * C47554 * C47473 + C47554 * (C47473 + C47497 * C47603))) /
        C47178;
    const double C1828 =
        (C47423 * (2 * C47554 * C47473 + C47554 * (C47473 + C47497 * C47603)) +
         (2 * C47554 * C47529 + C47554 * (C47529 + C47541 * C47603)) * ae) /
        C47178;
    const double C47498 = C47424 * C47496;
    const double C47669 = C47496 * C47603;
    const double C47723 = C47554 * C47496;
    const double C47746 = C47423 * C47496;
    const double C1647 =
        (3 * (C47456 + C47472 * C47603) +
         C47554 * (2 * C47554 * C47472 + C47554 * (C47472 + C47496 * C47603))) /
        C47183;
    const double C1830 =
        (ae * (2 * C47554 * C47530 + C47554 * (C47530 + C47542 * C47603)) +
         C47423 * (2 * C47554 * C47472 + C47554 * (C47472 + C47496 * C47603))) /
        C47183;
    const double C47678 = C47554 * C47677;
    const double C47716 = C47423 * C47677;
    const double C10060 =
        (2 * (ae * C47621 + C47423 * C47667) + ae * (C47621 + C47682 * C47647) +
         C47423 * (C47667 + ae * C47423 * C47682 +
                   C47423 * (ae * C47682 + C47423 * C47677))) /
        C47183;
    const double C47767 = C47759 + C47763;
    const double C47787 = C47423 * C47783;
    const double C47589 = C47424 * C47588;
    const double C47699 = C47588 * C47603;
    const double C47724 = C47554 * C47588;
    const double C47747 = C47588 * C47647;
    const double C47693 = C47554 * C47692;
    const double C47717 = C47692 * C47647;
    const double C47768 = C47689 + C47765;
    const double C47788 = C47423 * C47785;
    const double C47477 = C47465 + C47475;
    const double C8996 =
        (4 * (2 * C47942 + C47554 * C47978) +
         C47554 * (3 * C47978 +
                   C47554 * (2 * C47554 * C47481 +
                             C47554 * (C47481 + C47424 * C47493 * C47603)))) /
        C47178;
    const double C47990 = C47987 + C47989;
    const double C47545 = C47539 + C47543;
    const double C47923 = C47529 + C47922;
    const double C47970 = C47529 + C47968;
    const double C48016 = C47554 * C48015;
    const double C48049 = C47943 + C48047;
    const double C48076 = C47423 * C48073;
    const double C48008 = C48005 + C48007;
    const double C48039 = C47994 + C48037;
    const double C48093 = C47423 * C48091;
    const double C48113 = C48109 + C48111;
    const double C47686 = C47684 + C47685;
    const double C10927 = (3 * (C47614 + C47636 * C47647) +
                           C47423 * (2 * C47707 + C47423 * C47712)) /
                          C47178;
    const double C47766 = C47674 + C47762;
    const double C47742 = C47736 + C47740;
    const double C48371 = C48370 / C47183;
    const double C48605 = 2 * C48570;
    const double C48378 = C48377 / C47178;
    const double C48615 = C48579 / C47190;
    const double C48632 = C48573 - C48612;
    const double C22087 = -C48612;
    const double C48641 = C48628 + C48367;
    const double C47222 = C47219 * be;
    const double C11210 = C47204 * C519;
    const double C11206 = C47204 * C246;
    const double C11202 = C47204 * C235;
    const double C11199 = C47204 * C1163;
    const double C11195 = C47204 * C1156;
    const double C11191 = C47204 * C528;
    const double C11187 = C47204 * C518;
    const double C11183 = C47204 * C245;
    const double C11179 = C47204 * C234;
    const double C11596 = C47204 * C1644;
    const double C11760 = C47204 * C1827;
    const double C11752 = C47204 * C1373;
    const double C11748 = C47204 * C1366;
    const double C11744 = C47204 * C630;
    const double C11740 = C47204 * C620;
    const double C12462 = C47204 * C621;
    const double C12684 = C47204 * C354;
    const double C12680 = C47204 * C343;
    const double C12677 = C47204 * C353;
    const double C12673 = C47204 * C342;
    const double C13247 = C47204 * C2268;
    const double C13243 = C47204 * C2259;
    const double C13807 = C47204 * C881;
    const double C13803 = C47204 * C871;
    const double C18692 = C47204 * C872;
    const double C19796 = C47204 * C2702;
    const double C19792 = C47204 * C2695;
    const double C47208 = C47176 * C47204;
    const double C47236 = C47204 / C47184;
    const double C47207 = C47203 / C47178;
    const double C1200 = C1008 * C236;
    const double C1189 = C1008 * C519;
    const double C1183 = C1008 * C246;
    const double C1177 = C1008 * C235;
    const double C1837 = C1008 * C621;
    const double C2739 = C1008 * C344;
    const double C2728 = C1008 * C872;
    const double C2722 = C1008 * C354;
    const double C2716 = C1008 * C343;
    const double C9030 = C8908 * C1644;
    const double C9026 = C8908 * C1163;
    const double C9024 = C8908 * C1156;
    const double C9022 = C8908 * C528;
    const double C9020 = C8908 * C518;
    const double C9018 = C8908 * C245;
    const double C9016 = C8908 * C234;
    const double C9015 = C8908 * C1643;
    const double C9013 = C8908 * C1637;
    const double C9011 = C8908 * C1162;
    const double C9009 = C8908 * C1155;
    const double C9007 = C8908 * C527;
    const double C9005 = C8908 * C517;
    const double C9003 = C8908 * C244;
    const double C9001 = C8908 * C233;
    const double C9385 = C8908 * C1826;
    const double C9383 = C8908 * C1820;
    const double C9381 = C8908 * C1372;
    const double C9379 = C8908 * C1365;
    const double C9377 = C8908 * C629;
    const double C9375 = C8908 * C619;
    const double C9903 = C8908 * C1373;
    const double C9901 = C8908 * C1366;
    const double C9899 = C8908 * C2268;
    const double C9897 = C8908 * C2259;
    const double C9895 = C8908 * C630;
    const double C9893 = C8908 * C620;
    const double C9892 = C8908 * C2273;
    const double C9890 = C8908 * C2261;
    const double C9888 = C8908 * C2267;
    const double C9886 = C8908 * C2258;
    const double C10077 = C8908 * C881;
    const double C10075 = C8908 * C871;
    const double C10073 = C8908 * C353;
    const double C10071 = C8908 * C342;
    const double C10070 = C8908 * C880;
    const double C10068 = C8908 * C870;
    const double C10066 = C8908 * C352;
    const double C10064 = C8908 * C341;
    const double C10514 = C8908 * C3166;
    const double C10512 = C8908 * C3160;
    const double C10938 = C8908 * C2701;
    const double C10936 = C8908 * C2694;
    const double C14039 = C8908 * C1827;
    const double C17670 = C8908 * C2702;
    const double C17668 = C8908 * C2695;
    const double C17665 = C8908 * C3586;
    const double C23404 = C23238 * C519;
    const double C23400 = C23238 * C246;
    const double C23396 = C23238 * C235;
    const double C23393 = C23238 * C1163;
    const double C23389 = C23238 * C1156;
    const double C23385 = C23238 * C528;
    const double C23381 = C23238 * C518;
    const double C23377 = C23238 * C245;
    const double C23373 = C23238 * C234;
    const double C23790 = C23238 * C1644;
    const double C23954 = C23238 * C1827;
    const double C23946 = C23238 * C1373;
    const double C23942 = C23238 * C1366;
    const double C23938 = C23238 * C630;
    const double C23934 = C23238 * C620;
    const double C24664 = C23238 * C621;
    const double C24661 = C23238 * C2268;
    const double C24657 = C23238 * C2259;
    const double C24898 = C23238 * C872;
    const double C24894 = C23238 * C354;
    const double C24890 = C23238 * C343;
    const double C24887 = C23238 * C881;
    const double C24883 = C23238 * C871;
    const double C24879 = C23238 * C353;
    const double C24875 = C23238 * C342;
    const double C26022 = C23238 * C2702;
    const double C26018 = C23238 * C2695;
    const double C48217 = C48213 - C48216;
    const double C48625 = C48590 / C47178;
    const double C48225 = C48221 - C48224;
    const double C48639 = C48624 / C47184;
    const double C23399 = C23231 * C252;
    const double C23395 = C23231 * C240;
    const double C23390 = C23231 * C1167;
    const double C23386 = C23231 * C1159;
    const double C23382 = C23231 * C532;
    const double C23378 = C23231 * C522;
    const double C23374 = C23231 * C251;
    const double C23370 = C23231 * C239;
    const double C23789 = C23231 * C1646;
    const double C23953 = C23231 * C1829;
    const double C23945 = C23231 * C1377;
    const double C23941 = C23231 * C1369;
    const double C23937 = C23231 * C634;
    const double C23933 = C23231 * C624;
    const double C24658 = C23231 * C2276;
    const double C24654 = C23231 * C2264;
    const double C24893 = C23231 * C360;
    const double C24889 = C23231 * C348;
    const double C24884 = C23231 * C885;
    const double C24880 = C23231 * C875;
    const double C24876 = C23231 * C359;
    const double C24872 = C23231 * C347;
    const double C25467 = C23231 * C3169;
    const double C25463 = C23231 * C3163;
    const double C26021 = C23231 * C2706;
    const double C26017 = C23231 * C2698;
    const double C7825 = C48638 * C252;
    const double C7819 = C48638 * C240;
    const double C7812 = C48638 * C532;
    const double C7806 = C48638 * C522;
    const double C7800 = C48638 * C251;
    const double C7794 = C48638 * C239;
    const double C8257 = C48638 * C1167;
    const double C8251 = C48638 * C1159;
    const double C8434 = C48638 * C1377;
    const double C8428 = C48638 * C1369;
    const double C8422 = C48638 * C634;
    const double C8416 = C48638 * C624;
    const double C15344 = C48638 * C360;
    const double C15338 = C48638 * C348;
    const double C15331 = C48638 * C885;
    const double C15325 = C48638 * C875;
    const double C15319 = C48638 * C359;
    const double C15313 = C48638 * C347;
    const double C15770 = C48638 * C2276;
    const double C15764 = C48638 * C2264;
    const double C16190 = C48638 * C2706;
    const double C16184 = C48638 * C2698;
    const double C47354 = C47350 * be;
    const double C47325 = C47317 / C47178;
    const double C47334 = C47263 * C47330;
    const double C47363 = C47330 / C47184;
    const double C48412 = C48407 - C48411;
    const double C48631 = C48608 / C47178;
    const double C48419 = C48415 - C48418;
    const double C48645 = C48635 / C47184;
    const double C15017 =
        ((-(0 * be) / C47178) / C47184 -
         ((0 - (C47263 * C47264) / C47178) * be) / C47178) /
            C47184 -
        ((C47263 * ((-C47264 / C47178) / C47184 -
                    ((C48329 - (C47263 * C47298) / C47178) * be) / C47178) +
          C30746) *
         be) /
            C47178 +
        (-C47298 / C47178) / C47184 - (0 * be) / C47178;
    const double C9279 = C48212 * C8997;
    const double C1199 = C1001 * C241;
    const double C1176 = C48593 * C241;
    const double C7798 = C48593 * C241;
    const double C11203 = C48222 * C241;
    const double C23397 = C48222 * C241;
    const double C26295 = C26137 * C241;
    const double C2738 = C1001 * C349;
    const double C2715 = C48593 * C349;
    const double C12681 = C48222 * C349;
    const double C15317 = C48593 * C349;
    const double C24891 = C48222 * C349;
    const double C27888 = C26137 * C349;
    const double C1209 = C1000 * C523;
    const double C1186 = C1001 * C523;
    const double C7831 = C48638 * C523;
    const double C9021 = C48212 * C523;
    const double C11209 = C48551 * C523;
    const double C11186 = C48222 * C523;
    const double C23403 = C23231 * C523;
    const double C23380 = C48222 * C523;
    const double C1836 = C1001 * C625;
    const double C6236 = C1000 * C625;
    const double C9894 = C48212 * C625;
    const double C11741 = C48222 * C625;
    const double C12461 = C48551 * C625;
    const double C23935 = C48222 * C625;
    const double C24663 = C23231 * C625;
    const double C39279 = C48638 * C625;
    const double C2748 = C1000 * C876;
    const double C2725 = C1001 * C876;
    const double C10076 = C48212 * C876;
    const double C13804 = C48222 * C876;
    const double C15350 = C48638 * C876;
    const double C18691 = C48551 * C876;
    const double C24897 = C23231 * C876;
    const double C24882 = C48222 * C876;
    const double C17667 = C8908 * C3592;
    const double C1206 = C1008 * C247;
    const double C2745 = C1008 * C355;
    const double C1195 = C1008 * C529;
    const double C11214 = C47204 * C529;
    const double C23408 = C23238 * C529;
    const double C1843 = C1008 * C631;
    const double C12466 = C47204 * C631;
    const double C24668 = C23238 * C631;
    const double C2734 = C1008 * C882;
    const double C18696 = C47204 * C882;
    const double C24902 = C23238 * C882;
    const double C1666 = C1008 * C1164;
    const double C11222 = C47204 * C1164;
    const double C23416 = C23238 * C1164;
    const double C47486 = C47479 + C47480;
    const double C47476 = C47467 + C47474;
    const double C9278 = C8908 * C8994;
    const double C9389 = C8908 * C9116;
    const double C48062 = C47443 + C48060;
    const double C1205 = C1001 * C253;
    const double C1182 = C48593 * C253;
    const double C7804 = C48593 * C253;
    const double C11207 = C48222 * C253;
    const double C23401 = C48222 * C253;
    const double C26301 = C26137 * C253;
    const double C2744 = C1001 * C361;
    const double C2721 = C48593 * C361;
    const double C12685 = C48222 * C361;
    const double C15323 = C48593 * C361;
    const double C24895 = C48222 * C361;
    const double C27894 = C26137 * C361;
    const double C1215 = C1000 * C533;
    const double C1192 = C1001 * C533;
    const double C7837 = C48638 * C533;
    const double C9023 = C48212 * C533;
    const double C11213 = C48551 * C533;
    const double C11190 = C48222 * C533;
    const double C23407 = C23231 * C533;
    const double C23384 = C48222 * C533;
    const double C1842 = C1001 * C635;
    const double C6242 = C1000 * C635;
    const double C9896 = C48212 * C635;
    const double C11745 = C48222 * C635;
    const double C12465 = C48551 * C635;
    const double C23939 = C48222 * C635;
    const double C24667 = C23231 * C635;
    const double C39285 = C48638 * C635;
    const double C2754 = C1000 * C886;
    const double C2731 = C1001 * C886;
    const double C10078 = C48212 * C886;
    const double C13808 = C48222 * C886;
    const double C15356 = C48638 * C886;
    const double C18695 = C48551 * C886;
    const double C24901 = C23231 * C886;
    const double C24886 = C48222 * C886;
    const double C1665 = C1001 * C1168;
    const double C9027 = C48212 * C1168;
    const double C11221 = C48551 * C1168;
    const double C11198 = C48222 * C1168;
    const double C23415 = C23231 * C1168;
    const double C23392 = C48222 * C1168;
    const double C47814 = C47812 + C47813;
    const double C2269 =
        (C47554 * C47457 + C47423 * (C47423 * C47554 * C47473 + C47911 * ae) +
         C47423 * C47911 * ae) /
        C47178;
    const double C3168 =
        (2 * (C47423 * C47945 + C47911 * ae) +
         C47423 * (C47945 + C47423 * (C47423 * C47554 * C47497 + C47946 * ae) +
                   C47423 * C47946 * ae) +
         (C47911 + C47946 * C47647) * ae) /
        C47178;
    const double C2260 = C47554 * C47805 + C47911 * C47647;
    const double C3162 =
        2 * C47423 * C47911 + C47423 * (C47911 + C47946 * C47647);
    const double C47969 = C47965 + C47966;
    const double C1855 = C1008 * C1374;
    const double C12474 = C47204 * C1374;
    const double C29366 = C23238 * C1374;
    const double C3615 = C1008 * C2703;
    const double C20172 = C47204 * C2703;
    const double C33756 = C23238 * C2703;
    const double C1660 = C1008 * C1157;
    const double C11218 = C47204 * C1157;
    const double C23412 = C23238 * C1157;
    const double C1849 = C1008 * C1367;
    const double C12470 = C47204 * C1367;
    const double C29362 = C23238 * C1367;
    const double C3609 = C1008 * C2696;
    const double C20168 = C47204 * C2696;
    const double C33752 = C23238 * C2696;
    const double C2274 =
        (C47445 + C47459 * C47603 +
         C47423 * (C47423 * (C47459 + C47481 * C47603) + C47920 * ae) +
         C47423 * C47920 * ae) /
        C47178;
    const double C9118 =
        (C47423 * (3 * C47978 +
                   C47554 * (2 * C47554 * C47481 +
                             C47554 * (C47481 + C47424 * C47493 * C47603))) +
         (3 * C47920 +
          C47554 * (2 * C47943 + C47554 * (C47534 + C47582 * C47603))) *
             ae) /
        C47178;
    const double C10059 =
        (2 * (C47423 * C47978 + C47920 * ae) +
         C47423 * (C47978 +
                   C47423 * (C47423 * (C47481 + C47424 * C47493 * C47603) +
                             C48015 * ae) +
                   C47423 * C48015 * ae) +
         (C47920 + C48015 * C47647) * ae) /
        C47178;
    const double C1638 = 3 * (C47803 + C47524 * C47603) +
                         C47554 * (2 * C47909 + C47554 * C47920);
    const double C1821 = C47423 * (2 * C47909 + C47554 * C47920);
    const double C2262 = C47803 + C47524 * C47603 + C47920 * C47647;
    const double C10055 =
        2 * C47423 * C47920 + C47423 * (C47920 + C48015 * C47647);
    const double C48048 = C48046 + C48043;
    const double C19246 = C47204 * C3167;
    const double C21134 = C8908 * C3167;
    const double C25468 = C23238 * C3167;
    const double C19242 = C47204 * C3161;
    const double C21132 = C8908 * C3161;
    const double C25464 = C23238 * C3161;
    const double C3593 =
        (3 * (C47445 + C47423 * C47962 + C47960 * ae) +
         C47423 * (2 * C47962 +
                   C47423 * (C47459 + C47423 * (C47423 * C47481 + C47534 * ae) +
                             C47423 * C47534 * ae) +
                   C47963 * ae) +
         (2 * C47960 + C47423 * C47963) * ae) /
        C47178;
    const double C3587 = 3 * (C47803 + C47524 * C47647) +
                         C47423 * (2 * C47960 + C47423 * C47963);
    const double C48075 = C47423 * C48071;
    const double C47546 = C47526 + C47544;
    const double C47624 = C47530 + C47623;
    const double C47698 = 2 * C47639;
    const double C47722 = ae * C47639;
    const double C47721 = C47423 * C47639;
    const double C47657 = C47530 + C47655;
    const double C47750 = 2 * C47744;
    const double C47748 = ae * C47744;
    const double C47999 = C47997 + C47998;
    const double C48038 = C48034 + C48035;
    const double C10522 = C8908 * C10057;
    const double C10520 = C8908 * C10054;
    const double C10928 =
        (3 * (C47939 + C47423 * C48030 + C48028 * ae) +
         C47423 * (2 * C48030 +
                   C47423 * (C47985 +
                             C47423 * (C47423 * C47554 * C47469 + C48003 * ae) +
                             C47423 * C48003 * ae) +
                   C48031 * ae) +
         (2 * C48028 + C47423 * C48031) * ae) /
        C47178;
    const double C10925 = 3 * (C47907 + C47940 * C47647) +
                          C47423 * (2 * C48028 + C47423 * C48031);
    const double C48092 = C47423 * C48090;
    const double C48063 = C48059 + C48061;
    const double C48112 = C47453 + C48110;
    const double C47569 = C47520 + C47567;
    const double C2277 = (C47554 * C47456 + ae * C47423 * C47616 +
                          C47423 * (ae * C47616 + C47423 * C47554 * C47472)) /
                         C47183;
    const double C3170 =
        (2 * (ae * C47616 + C47423 * C47638) +
         ae * (C47616 + C47639 * std::pow(C47423, 2)) +
         C47423 * (C47638 + ae * C47423 * C47639 +
                   C47423 * (ae * C47639 + C47423 * C47554 * C47496))) /
        C47183;
    const double C2265 = (C47554 * C47565 + C47616 * C47647) / C47178;
    const double C3164 =
        (2 * C47423 * C47616 + C47423 * (C47616 + C47639 * C47647)) / C47178;
    const double C47656 = C47653 + C47654;
    const double C1854 = C1001 * C1378;
    const double C9904 = C48212 * C1378;
    const double C11753 = C48222 * C1378;
    const double C12473 = C48551 * C1378;
    const double C23947 = C48222 * C1378;
    const double C29365 = C23231 * C1378;
    const double C3614 = C1001 * C2707;
    const double C17671 = C48212 * C2707;
    const double C19797 = C48222 * C2707;
    const double C20171 = C48551 * C2707;
    const double C26023 = C48222 * C2707;
    const double C33755 = C23231 * C2707;
    const double C1659 = C1001 * C1160;
    const double C9025 = C48212 * C1160;
    const double C11217 = C48551 * C1160;
    const double C11194 = C48222 * C1160;
    const double C23411 = C23231 * C1160;
    const double C23388 = C48222 * C1160;
    const double C1848 = C1001 * C1370;
    const double C9902 = C48212 * C1370;
    const double C11749 = C48222 * C1370;
    const double C12469 = C48551 * C1370;
    const double C23943 = C48222 * C1370;
    const double C29361 = C23231 * C1370;
    const double C3608 = C1001 * C2699;
    const double C17669 = C48212 * C2699;
    const double C19793 = C48222 * C2699;
    const double C20167 = C48551 * C2699;
    const double C26019 = C48222 * C2699;
    const double C33751 = C23231 * C2699;
    const double C9891 = C48212 * C2279;
    const double C13258 = C48551 * C2279;
    const double C25249 = C23231 * C2279;
    const double C9390 = C48212 * C9119;
    const double C9012 = C48212 * C1640;
    const double C11591 = C48551 * C1640;
    const double C23785 = C23231 * C1640;
    const double C9384 = C48212 * C1823;
    const double C11755 = C48551 * C1823;
    const double C23949 = C23231 * C1823;
    const double C9889 = C48212 * C2270;
    const double C13254 = C48551 * C2270;
    const double C25245 = C23231 * C2270;
    const double C10521 = C48212 * C10056;
    const double C10931 =
        (3 * (C47635 + ae * C47707 + C47423 * C47711) +
         ae * (2 * C47707 + C47423 * C47712) +
         C47423 *
             (2 * C47711 + ae * C47712 +
              C47423 * (C47674 + ae * C47423 * C47689 +
                        C47423 * (ae * C47689 + C47423 * C47554 * C47492)))) /
        C47183;
    const double C17666 = C48212 * C3595;
    const double C20899 = C48551 * C3595;
    const double C34483 = C23231 * C3595;
    const double C17664 = C48212 * C3589;
    const double C20895 = C48551 * C3589;
    const double C34479 = C23231 * C3589;
    const double C47781 = C47774 + C47775;
    const double C47741 = C47738 + C47739;
    const double C47501 = C47489 + C47499;
    const double C47500 = C47491 + C47498;
    const double C47670 = C47472 + C47669;
    const double C47725 = C47423 * C47723;
    const double C47749 = C47745 + C47746;
    const double C9031 = C48212 * C1647;
    const double C11597 = C48222 * C1647;
    const double C23791 = C48222 * C1647;
    const double C11761 = C48222 * C1830;
    const double C14040 = C48212 * C1830;
    const double C23955 = C48222 * C1830;
    const double C47679 = C47676 + C47678;
    const double C47718 = C47715 + C47716;
    const double C10523 = C48212 * C10060;
    const double C47769 = C47423 * C47767;
    const double C47789 = C47786 + C47787;
    const double C47590 = C47536 + C47589;
    const double C47700 = C47542 + C47699;
    const double C47726 = C47724 * C47647;
    const double C47751 = C47542 + C47747;
    const double C47694 = C47691 + C47693;
    const double C47719 = C47682 + C47717;
    const double C47770 = C47423 * C47768;
    const double C47790 = C47784 + C47788;
    const double C137 = (4 * (2 * C47445 + C47424 * C47457) +
                         C47424 * (3 * C47457 + C47424 * C47477)) /
                        C47178;
    const double C248 = (C47554 * (3 * C47457 + C47424 * C47477)) / C47178;
    const double C530 =
        (2 * C47445 + C47424 * C47457 + C47477 * C47603) / C47178;
    const double C9267 =
        (5 * (3 * C47974 + C47554 * C47990) +
         C47554 * (4 * C47990 +
                   C47554 * (3 * C47988 +
                             C47554 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603))))) /
        C47178;
    const double C9372 =
        (C47423 * (4 * C47990 +
                   C47554 * (3 * C47988 +
                             C47554 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603)))) +
         (4 * (2 * C47940 + C47554 * C47994) +
          C47554 *
              (3 * C47994 + C47554 * (2 * C47554 * C47525 +
                                      C47554 * (C47525 + C47535 * C47603)))) *
             ae) /
        C47178;
    const double C47584 = C47545 * be;
    const double C47818 = C47424 * C47545;
    const double C47926 = C47554 * C47545;
    const double C2275 =
        (C47457 + C47473 * C47603 +
         C47423 * (C47423 * (C47473 + C47497 * C47603) + C47923 * ae) +
         C47423 * C47923 * ae) /
        C47178;
    const double C1639 = 3 * (C47805 + C47529 * C47603) +
                         C47554 * (2 * C47911 + C47554 * C47923);
    const double C1822 = C47423 * (2 * C47911 + C47554 * C47923);
    const double C2263 = C47805 + C47529 * C47603 + C47923 * C47647;
    const double C3588 = 3 * (C47805 + C47529 * C47647) +
                         C47423 * (2 * C47967 + C47423 * C47970);
    const double C48017 = C48013 + C48016;
    const double C17569 = 3 * (C47909 + C47943 * C47647) +
                          C47423 * (2 * C48044 + C47423 * C48049);
    const double C48078 = C48074 + C48076;
    const double C48009 = C47554 * C48008;
    const double C10926 = 3 * (C47917 + C47994 * C47647) +
                          C47423 * (2 * C48036 + C47423 * C48039);
    const double C48095 = C48089 + C48093;
    const double C48115 = C47423 * C48113;
    const double C8993 = (4 * (2 * C47614 + C47554 * C47621) +
                          C47554 * (3 * C47621 + C47554 * C47686)) /
                         C47178;
    const double C9115 = (C47423 * (3 * C47621 + C47554 * C47686)) / C47178;
    const double C9618 =
        (2 * C47614 + C47554 * C47621 + C47686 * C47647) / C47178;
    const double C17907 = C48212 * C10927;
    const double C17657 = (4 * (2 * C47644 + C47423 * C47650) +
                           C47423 * (3 * C47650 + C47423 * C47742)) /
                          C47178;
    const double C48372 = C48367 - C48371;
    const double C48629 = C48605 / C47178;
    const double C48379 = C48375 - C48378;
    const double C48643 = C48632 / C47184;
    const double C47224 = C47222 / C47178;
    const double C47212 = C47208 + C48222;
    const double C47239 = C47236 - C47238;
    const double C7646 = C47236 + (0 * ae) / C47178;
    const double C47211 = C48212 - C47207;
    const double C9275 = C9014 - C9015;
    const double C9273 = C9010 - C9011;
    const double C9272 = C9008 - C9009;
    const double C9271 = C9006 - C9007;
    const double C9270 = C9004 - C9005;
    const double C14406 = C9386 - C9385;
    const double C14546 = C9385 - C9386;
    const double C10338 = C9382 - C9381;
    const double C10517 = C9381 - C9382;
    const double C10337 = C9380 - C9379;
    const double C10516 = C9379 - C9380;
    const double C10509 = C9377 - C9378;
    const double C10505 = C9378 - C9377;
    const double C10508 = C9375 - C9376;
    const double C10504 = C9376 - C9375;
    const double C10511 = C9888 - C9887;
    const double C10507 = C9887 - C9888;
    const double C10510 = C9886 - C9885;
    const double C10506 = C9885 - C9886;
    const double C10935 = C10069 - C10070;
    const double C10934 = C10067 - C10068;
    const double C21627 = C10514 - C10515;
    const double C21625 = C10515 - C10514;
    const double C21626 = C10512 - C10513;
    const double C21624 = C10513 - C10512;
    const double C18141 = C10939 - C10938;
    const double C18140 = C10937 - C10936;
    const double C26334 = C48217 * C533;
    const double C26328 = C48217 * C523;
    const double C26322 = C48217 * C252;
    const double C26316 = C48217 * C240;
    const double C26309 = C48217 * C532;
    const double C26303 = C48217 * C522;
    const double C26297 = C48217 * C251;
    const double C26291 = C48217 * C239;
    const double C26754 = C48217 * C1167;
    const double C26748 = C48217 * C1159;
    const double C26931 = C48217 * C1377;
    const double C26925 = C48217 * C1369;
    const double C26919 = C48217 * C634;
    const double C26913 = C48217 * C624;
    const double C27685 = C48217 * C635;
    const double C27679 = C48217 * C625;
    const double C27903 = C48217 * C360;
    const double C27897 = C48217 * C348;
    const double C27890 = C48217 * C359;
    const double C27884 = C48217 * C347;
    const double C28461 = C48217 * C2276;
    const double C28455 = C48217 * C2264;
    const double C29015 = C48217 * C885;
    const double C29009 = C48217 * C875;
    const double C36505 = C48217 * C886;
    const double C36499 = C48217 * C876;
    const double C37327 = C48217 * C2706;
    const double C37321 = C48217 * C2698;
    const double C48550 = C48217 * C48207;
    const double C48592 = C48555 + C48217;
    const double C7827 = C48625 * C253;
    const double C7821 = C48625 * C241;
    const double C7814 = C48625 * C533;
    const double C7808 = C48625 * C523;
    const double C7802 = C48625 * C252;
    const double C7796 = C48625 * C240;
    const double C8259 = C48625 * C1168;
    const double C8253 = C48625 * C1160;
    const double C8436 = C48625 * C1378;
    const double C8430 = C48625 * C1370;
    const double C8424 = C48625 * C635;
    const double C8418 = C48625 * C625;
    const double C15346 = C48625 * C361;
    const double C15340 = C48625 * C349;
    const double C15333 = C48625 * C886;
    const double C15327 = C48625 * C876;
    const double C15321 = C48625 * C360;
    const double C15315 = C48625 * C348;
    const double C16192 = C48625 * C2707;
    const double C16186 = C48625 * C2699;
    const double C26324 = C48225 * C253;
    const double C26318 = C48225 * C241;
    const double C26311 = C48225 * C533;
    const double C26305 = C48225 * C523;
    const double C26299 = C48225 * C252;
    const double C26293 = C48225 * C240;
    const double C26756 = C48225 * C1168;
    const double C26750 = C48225 * C1160;
    const double C26933 = C48225 * C1378;
    const double C26927 = C48225 * C1370;
    const double C26921 = C48225 * C635;
    const double C26915 = C48225 * C625;
    const double C27905 = C48225 * C361;
    const double C27899 = C48225 * C349;
    const double C27892 = C48225 * C360;
    const double C27886 = C48225 * C348;
    const double C29017 = C48225 * C886;
    const double C29011 = C48225 * C876;
    const double C37329 = C48225 * C2707;
    const double C37323 = C48225 * C2699;
    const double C48558 = C48225 / C47184;
    const double C48554 = C48225 * C48207;
    const double C3718 = C48639 - (C48217 * C48208) / C47178;
    const double C47356 = C47354 / C47178;
    const double C47329 = C48329 - C47325;
    const double C47338 = C47334 + C48416;
    const double C47366 = C47363 - C47365;
    const double C48582 = C48412 * C48406;
    const double C48620 = C48584 + C48412;
    const double C48586 = C48419 / C47184;
    const double C48583 = C48419 * C48406;
    const double C19897 = C48645 - (C48412 * C48408) / C47178;
    const double C11583 = C11186 - C11187;
    const double C23777 = C23380 - C23381;
    const double C13238 = C11740 - C11741;
    const double C13234 = C11741 - C11740;
    const double C25455 = C23934 - C23935;
    const double C25447 = C23935 - C23934;
    const double C19787 = C13804 - C13803;
    const double C26013 = C24882 - C24883;
    const double C145 =
        (4 * (2 * C47456 + be * C47457 + C47424 * C47476) +
         be * (3 * C47457 + C47424 * C47477) +
         C47424 * (3 * C47476 + be * C47477 +
                   C47424 * (2 * C47472 + be * C47473 +
                             C47424 * (C47468 + be * C47424 * C47469 +
                                       C47424 * (be * C47469 +
                                                 C47424 * std::pow(C47428, 7) *
                                                     bs[7] * C47435))))) /
        C47183;
    const double C254 =
        ((yP - yQ) * (2 * C47456 + be * C47457 + C47424 * C47476)) / C47183;
    const double C362 =
        (ae * (2 * (C47424 * C47520 + C47516 * be) +
               C47424 *
                   (C47520 +
                    C47424 * (C47424 * C47447 * C47448 * C47515 + C47519 * be) +
                    C47424 * C47519 * be) +
               (C47516 + C47519 * C47449) * be) +
         C47423 * (2 * C47456 + be * C47457 + C47424 * C47476)) /
        C47183;
    const double C534 = (C47442 + be * C47445 + C47424 * C47456 +
                         C47476 * std::pow(yP - yQ, 2)) /
                        C47183;
    const double C636 =
        (ae * C47554 * (C47520 + C47424 * C47530 + C47524 * be) +
         C47423 * C47554 * C47476) /
        C47183;
    const double C48064 = C48062 + C48057;
    const double C11585 = C11190 - C11191;
    const double C23779 = C23384 - C23385;
    const double C13240 = C11744 - C11745;
    const double C13236 = C11745 - C11744;
    const double C25457 = C23938 - C23939;
    const double C25449 = C23939 - C23938;
    const double C19789 = C13808 - C13807;
    const double C26015 = C24886 - C24887;
    const double C11589 = C11198 - C11199;
    const double C23783 = C23392 - C23393;
    const double C356 = (C47423 * (3 * C47457 + C47424 * C47477) +
                         (3 * C47805 + C47424 * C47814) * ae) /
                        C47178;
    const double C632 =
        (C47423 * C47554 * C47477 + C47554 * C47814 * ae) / C47178;
    const double C883 =
        (2 * C47445 + C47424 * C47457 +
         C47423 * (C47423 * C47477 + C47814 * ae) + C47423 * C47814 * ae) /
        C47178;
    const double C124 = 4 * (2 * C47803 + C47424 * C47805) +
                        C47424 * (3 * C47805 + C47424 * C47814);
    const double C237 = C47554 * (3 * C47805 + C47424 * C47814);
    const double C345 = C47423 * (3 * C47805 + C47424 * C47814);
    const double C520 = 2 * C47803 + C47424 * C47805 + C47814 * C47603;
    const double C622 = C47423 * C47554 * C47814;
    const double C873 = 2 * C47803 + C47424 * C47805 + C47814 * C47647;
    const double C1158 =
        2 * C47554 * C47814 + C47554 * (C47814 + C47545 * C47603);
    const double C1368 = C47423 * (C47814 + C47545 * C47603);
    const double C2697 =
        2 * C47423 * C47814 + C47423 * (C47814 + C47545 * C47647);
    const double C3183 = C1008 * C2269;
    const double C18494 = C47204 * C2269;
    const double C24676 = C23238 * C2269;
    const double C3177 = C1008 * C2260;
    const double C18490 = C47204 * C2260;
    const double C24672 = C23238 * C2260;
    const double C3594 =
        (3 * (C47457 + C47423 * C47969 + C47967 * ae) +
         C47423 * (2 * C47969 +
                   C47423 * (C47473 + C47423 * (C47423 * C47497 + C47541 * ae) +
                             C47423 * C47541 * ae) +
                   C47970 * ae) +
         (2 * C47967 + C47423 * C47970) * ae) /
        C47178;
    const double C9907 = C8908 * C2274;
    const double C13259 = C47204 * C2274;
    const double C25250 = C23238 * C2274;
    const double C9028 = C8908 * C1638;
    const double C11592 = C47204 * C1638;
    const double C23786 = C23238 * C1638;
    const double C11756 = C47204 * C1821;
    const double C14037 = C8908 * C1821;
    const double C23950 = C23238 * C1821;
    const double C9905 = C8908 * C2262;
    const double C13255 = C47204 * C2262;
    const double C25246 = C23238 * C2262;
    const double C17571 =
        (3 * (C47942 + C47423 * C48048 + C48044 * ae) +
         C47423 * (2 * C48048 +
                   C47423 * (C48042 +
                             C47423 * (C47423 * C47554 * C47424 * C47493 +
                                       C48045 * ae) +
                             C47423 * C48045 * ae) +
                   C48049 * ae) +
         (2 * C48044 + C47423 * C48049) * ae) /
        C47178;
    const double C17674 = C8908 * C3593;
    const double C20900 = C47204 * C3593;
    const double C34484 = C23238 * C3593;
    const double C17672 = C8908 * C3587;
    const double C20896 = C47204 * C3587;
    const double C34480 = C23238 * C3587;
    const double C48077 = C47459 + C48075;
    const double C47547 = C47546 + C47537;
    const double C2280 =
        (C47456 + C47472 * C47603 + ae * C47423 * C47624 +
         C47423 * (ae * C47624 + C47423 * (C47472 + C47496 * C47603))) /
        C47183;
    const double C1641 = (3 * (C47565 + C47530 * C47603) +
                          C47554 * (2 * C47616 + C47554 * C47624)) /
                         C47178;
    const double C1824 = (C47423 * (2 * C47616 + C47554 * C47624)) / C47178;
    const double C2271 = (C47565 + C47530 * C47603 + C47624 * C47647) / C47178;
    const double C3590 = (3 * (C47565 + C47530 * C47647) +
                          C47423 * (2 * C47652 + C47423 * C47657)) /
                         C47178;
    const double C47752 = C47472 + C47748;
    const double C9619 =
        (2 * C47939 + C47554 * C47974 +
         C47423 * (C47423 * C47990 + C47999 * ae) + C47423 * C47999 * ae) /
        C47178;
    const double C10501 =
        (2 * (C47423 * C47990 + C47999 * ae) +
         C47423 * (C47990 +
                   C47423 * (C47423 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603)) +
                             C48008 * ae) +
                   C47423 * C48008 * ae) +
         (C47999 + C48008 * C47647) * ae) /
        C47178;
    const double C8991 = 4 * (2 * C47907 + C47554 * C47917) +
                         C47554 * (3 * C47917 + C47554 * C47999);
    const double C9113 = C47423 * (3 * C47917 + C47554 * C47999);
    const double C9616 = 2 * C47907 + C47554 * C47917 + C47999 * C47647;
    const double C10499 =
        2 * C47423 * C47999 + C47423 * (C47999 + C48008 * C47647);
    const double C10930 =
        (3 * (C47974 + C47423 * C48038 + C48036 * ae) +
         C47423 * (2 * C48038 +
                   C47423 * (C47988 +
                             C47423 * (C47423 * (C47469 + C47493 * C47603) +
                                       C48006 * ae) +
                             C47423 * C48006 * ae) +
                   C48039 * ae) +
         (2 * C48036 + C47423 * C48039) * ae) /
        C47178;
    const double C17908 = C8908 * C10928;
    const double C17906 = C8908 * C10925;
    const double C48094 = C47985 + C48092;
    const double C17655 = 4 * (2 * C47953 + C47423 * C47956) +
                          C47423 * (3 * C47956 + C47423 * C48063);
    const double C48114 = C48112 + C48107;
    const double C47570 = C47569 + C47568;
    const double C3182 = C1001 * C2277;
    const double C9900 = C48212 * C2277;
    const double C13248 = C48222 * C2277;
    const double C15772 = C48625 * C2277;
    const double C18493 = C48551 * C2277;
    const double C24675 = C23231 * C2277;
    const double C24660 = C48222 * C2277;
    const double C28463 = C48225 * C2277;
    const double C19247 = C48222 * C3170;
    const double C21135 = C48212 * C3170;
    const double C25469 = C48222 * C3170;
    const double C3176 = C1001 * C2265;
    const double C9898 = C48212 * C2265;
    const double C13244 = C48222 * C2265;
    const double C15766 = C48625 * C2265;
    const double C18489 = C48551 * C2265;
    const double C24671 = C23231 * C2265;
    const double C24656 = C48222 * C2265;
    const double C28457 = C48225 * C2265;
    const double C19243 = C48222 * C3164;
    const double C21133 = C48212 * C3164;
    const double C25465 = C48222 * C3164;
    const double C3596 =
        (3 * (C47456 + ae * C47652 + C47423 * C47656) +
         ae * (2 * C47652 + C47423 * C47657) +
         C47423 * (2 * C47656 + ae * C47657 +
                   C47423 * (C47472 + ae * C47423 * C47542 +
                             C47423 * (ae * C47542 + C47423 * C47496)))) /
        C47183;
    const double C13031 = C11753 - C11752;
    const double C13252 = C11752 - C11753;
    const double C29907 = C23947 - C23946;
    const double C30112 = C23946 - C23947;
    const double C20893 = C19797 - C19796;
    const double C34477 = C26023 - C26022;
    const double C11587 = C11194 - C11195;
    const double C23781 = C23388 - C23389;
    const double C13029 = C11749 - C11748;
    const double C13250 = C11748 - C11749;
    const double C29905 = C23943 - C23942;
    const double C30110 = C23942 - C23943;
    const double C20891 = C19793 - C19792;
    const double C34475 = C26019 - C26018;
    const double C10340 = C9891 - C9892;
    const double C10519 = C9892 - C9891;
    const double C9274 = C9012 - C9013;
    const double C14405 = C9384 - C9383;
    const double C14545 = C9383 - C9384;
    const double C10339 = C9889 - C9890;
    const double C10518 = C9890 - C9889;
    const double C17909 = C48212 * C10931;
    const double C18143 = C17666 - C17667;
    const double C18142 = C17664 - C17665;
    const double C17661 =
        (4 * (2 * C47648 + ae * C47650 + C47423 * C47741) +
         ae * (3 * C47650 + C47423 * C47742) +
         C47423 *
             (3 * C47741 + ae * C47742 +
              C47423 * (2 * C47735 + ae * C47737 +
                        C47423 * (C47468 + ae * C47423 * C47536 +
                                  C47423 * (ae * C47536 + C47423 * C47492))))) /
        C47183;
    const double C47503 = C47424 * C47501;
    const double C1166 =
        (2 * C47554 * C47477 + C47554 * (C47477 + C47501 * C47603)) / C47178;
    const double C1376 = (C47423 * (C47477 + C47501 * C47603) +
                          (C47814 + C47545 * C47603) * ae) /
                         C47178;
    const double C2705 =
        (2 * (C47423 * C47477 + C47814 * ae) +
         C47423 * (C47477 + C47423 * (C47423 * C47501 + C47545 * ae) +
                   C47423 * C47545 * ae) +
         (C47814 + C47545 * C47647) * ae) /
        C47178;
    const double C47502 = C47424 * C47500;
    const double C47641 = C47554 * C47500;
    const double C47661 = C47423 * C47500;
    const double C1169 = (2 * C47554 * C47476 +
                          C47554 * (C47476 + C47500 * std::pow(C47554, 2))) /
                         C47183;
    const double C1648 =
        (3 * (C47476 + C47500 * C47603) +
         C47554 * (2 * C47554 * C47500 +
                   C47554 * (C47500 + (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47603))) /
        C47183;
    const double C8998 =
        (4 * (2 * C47638 + C47554 * C47670) +
         C47554 * (3 * C47670 +
                   C47554 * (2 * C47554 * C47496 +
                             C47554 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47183;
    const double C9120 =
        (ae * (3 * C47624 +
               C47554 * (2 * C47639 + C47554 * (C47542 + C47588 * C47603))) +
         C47423 * (3 * C47670 +
                   C47554 * (2 * C47554 * C47496 +
                             C47554 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47183;
    const double C47727 = C47722 + C47725;
    const double C47753 = C47423 * C47749;
    const double C9268 =
        (5 * (3 * C47667 + C47554 * C47679) +
         C47554 * (4 * C47679 +
                   C47554 * (3 * C47677 +
                             C47554 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47183;
    const double C9373 =
        (ae * (4 * (2 * C47636 + C47554 * C47682) +
               C47554 * (3 * C47682 +
                         C47554 * (2 * C47554 * C47536 +
                                   C47554 * (C47536 + C47585 * C47603)))) +
         C47423 * (4 * C47679 +
                   C47554 * (3 * C47677 +
                             C47554 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47183;
    const double C9622 = (2 * C47635 + C47554 * C47667 + ae * C47423 * C47686 +
                          C47423 * (ae * C47686 + C47423 * C47679)) /
                         C47183;
    const double C47771 = C47766 + C47769;
    const double C47791 = C47423 * C47789;
    const double C47591 = C47590 + C47586;
    const double C47701 = C47554 * C47700;
    const double C10061 =
        (2 * (ae * C47624 + C47423 * C47670) + ae * (C47624 + C47700 * C47647) +
         C47423 * (C47670 + ae * C47423 * C47700 +
                   C47423 * (ae * C47700 +
                             C47423 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47183;
    const double C10058 =
        (2 * C47423 * C47624 + C47423 * (C47624 + C47700 * C47647)) / C47178;
    const double C47728 = C47639 + C47726;
    const double C47754 = C47423 * C47751;
    const double C47695 = C47554 * C47694;
    const double C10502 =
        (2 * (ae * C47686 + C47423 * C47679) + ae * (C47686 + C47694 * C47647) +
         C47423 * (C47679 + ae * C47423 * C47694 +
                   C47423 * (ae * C47694 +
                             C47423 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47183;
    const double C10500 =
        (2 * C47423 * C47686 + C47423 * (C47686 + C47694 * C47647)) / C47178;
    const double C10932 =
        (3 * (C47667 + ae * C47714 + C47423 * C47718) +
         ae * (2 * C47714 + C47423 * C47719) +
         C47423 * (2 * C47718 + ae * C47719 +
                   C47423 * (C47677 + ae * C47423 * C47692 +
                             C47423 * (ae * C47692 +
                                       C47423 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47183;
    const double C10929 = (3 * (C47621 + C47682 * C47647) +
                           C47423 * (2 * C47714 + C47423 * C47719)) /
                          C47178;
    const double C47772 = C47764 + C47770;
    const double C47792 = C47423 * C47790;
    const double C1218 = C1008 * C530;
    const double C47819 = C47817 + C47818;
    const double C2546 =
        (C47554 * C47477 + C47423 * (C47423 * C47554 * C47501 + C47926 * ae) +
         C47423 * C47926 * ae) /
        C47178;
    const double C2544 = C47554 * C47814 + C47926 * C47647;
    const double C9882 =
        (2 * C47942 + C47554 * C47978 +
         C47423 * (C47423 * (2 * C47554 * C47481 +
                             C47554 * (C47481 + C47424 * C47493 * C47603)) +
                   C48017 * ae) +
         C47423 * C48017 * ae) /
        C47178;
    const double C8992 = 4 * (2 * C47909 + C47554 * C47920) +
                         C47554 * (3 * C47920 + C47554 * C48017);
    const double C9114 = C47423 * (3 * C47920 + C47554 * C48017);
    const double C9880 = 2 * C47909 + C47554 * C47920 + C48017 * C47647;
    const double C17656 = 4 * (2 * C47960 + C47423 * C47963) +
                          C47423 * (3 * C47963 + C47423 * C48078);
    const double C48010 = C48002 + C48009;
    const double C17901 = 4 * (2 * C48028 + C47423 * C48031) +
                          C47423 * (3 * C48031 + C47423 * C48095);
    const double C48117 = C48105 + C48115;
    const double C9277 = C48212 * C8993;
    const double C9388 = C48212 * C9115;
    const double C10342 = C48212 * C9618;
    const double C18145 = C48212 * C17657;
    const double C48576 = C48372 * C48366;
    const double C48614 = C48578 + C48372;
    const double C48580 = C48379 / C47184;
    const double C48577 = C48379 * C48366;
    const double C11039 = C48643 - (C48372 * C48368) / C47178;
    const double C47227 = C47218 - C47224;
    const double C47217 = C47212 * be;
    const double C26337 = C47239 * C530;
    const double C26325 = C47239 * C247;
    const double C26319 = C47239 * C236;
    const double C26314 = C47239 * C529;
    const double C26308 = C47239 * C519;
    const double C26302 = C47239 * C246;
    const double C26296 = C47239 * C235;
    const double C26757 = C47239 * C1164;
    const double C26751 = C47239 * C1157;
    const double C26934 = C47239 * C1374;
    const double C26928 = C47239 * C1367;
    const double C26922 = C47239 * C631;
    const double C26916 = C47239 * C621;
    const double C27906 = C47239 * C355;
    const double C27900 = C47239 * C344;
    const double C27895 = C47239 * C354;
    const double C27889 = C47239 * C343;
    const double C28464 = C47239 * C2269;
    const double C28458 = C47239 * C2260;
    const double C29018 = C47239 * C882;
    const double C29012 = C47239 * C872;
    const double C37330 = C47239 * C2703;
    const double C37324 = C47239 * C2696;
    const double C117 =
        (C47239 / C47184 + (0 * ae) / C47178) / C47184 - (0 * be) / C47178;
    const double C3727 = C47239 / C47184 - (0 * be) / C47178;
    const double C22092 = C47239 / C47184 + (0 * ae) / C47178;
    const double C7840 = C7646 * C530;
    const double C7828 = C7646 * C247;
    const double C7822 = C7646 * C236;
    const double C7817 = C7646 * C529;
    const double C7811 = C7646 * C519;
    const double C7805 = C7646 * C246;
    const double C7799 = C7646 * C235;
    const double C8260 = C7646 * C1164;
    const double C8254 = C7646 * C1157;
    const double C8437 = C7646 * C1374;
    const double C8431 = C7646 * C1367;
    const double C8425 = C7646 * C631;
    const double C8419 = C7646 * C621;
    const double C15347 = C7646 * C355;
    const double C15341 = C7646 * C344;
    const double C15336 = C7646 * C882;
    const double C15330 = C7646 * C872;
    const double C15324 = C7646 * C354;
    const double C15318 = C7646 * C343;
    const double C15773 = C7646 * C2269;
    const double C15767 = C7646 * C2260;
    const double C16193 = C7646 * C2703;
    const double C16187 = C7646 * C2696;
    const double C47216 = C47211 * ae;
    const double C1006 =
        ((-C47179 / C47178) / C47184 - (C47197 * be) / C47178) / C47184 -
        ((C47176 * ((-C47186) / C47184 - (C47211 * be) / C47178) + C23231) *
         be) /
            C47178 +
        (-C47198 / C47178) / C47184 - (0 * be) / C47178;
    const double C1007 =
        ((-C47186) / C47184 - (C47211 * be) / C47178) / C47184 -
        ((C47176 * ((-C47198 / C47178) / C47184 - (0 * be) / C47178) + C48222) *
         be) /
            C47178;
    const double C23237 = (-C47186) / C47184 - (C47211 * be) / C47178;
    const double C9285 = C9275 * C48329;
    const double C9283 = C9273 * C48329;
    const double C14404 = C9273 * C48574;
    const double C41163 = C9273 * C30746;
    const double C9282 = C9272 * C118;
    const double C14403 = C9272 * C4868;
    const double C9281 = C9271 * C48329;
    const double C10336 = C9271 * C48642;
    const double C14400 = C9271 * C48574;
    const double C16858 = C9271 * C15014;
    const double C41159 = C9271 * C30746;
    const double C46604 = C9271 * C48412;
    const double C9280 = C9270 * C118;
    const double C10335 = C9270 * C2395;
    const double C14399 = C9270 * C4868;
    const double C16857 = C9270 * C15017;
    const double C14410 = C14406 * C48416;
    const double C41165 = C14406 * C48416;
    const double C10347 = C10338 * C48631;
    const double C14402 = C10338 * C48416;
    const double C16860 = C10338 * C15015;
    const double C41161 = C10338 * C48416;
    const double C46606 = C10338 * C48419;
    const double C10346 = C10337 * C2396;
    const double C14401 = C10337 * C4869;
    const double C16859 = C10337 * C15018;
    const double C41160 = C10337 * C30749;
    const double C48588 = C48550 / C47178;
    const double C48626 = C48592 / C47184;
    const double C48627 = C48594 + C48558;
    const double C3720 = C48558 - C48223 / C47190;
    const double C48591 = C48554 / C47178;
    const double C3884 = C3718 * C252;
    const double C3876 = C3718 * C240;
    const double C3867 = C3718 * C251;
    const double C3859 = C3718 * C239;
    const double C4258 = C3718 * C532;
    const double C4250 = C3718 * C522;
    const double C4404 = C3718 * C634;
    const double C4396 = C3718 * C624;
    const double C5156 = C3718 * C360;
    const double C5148 = C3718 * C348;
    const double C5139 = C3718 * C359;
    const double C5131 = C3718 * C347;
    const double C5888 = C3718 * C885;
    const double C5880 = C3718 * C875;
    const double C47358 = C47353 - C47356;
    const double C47333 = C47329 * ae;
    const double C30748 = (-C47315) / C47184 - (C47329 * be) / C47178;
    const double C47342 = C47338 * be;
    const double C17486 =
        (C47366 / C47184 + (0 * ae) / C47178) / C47184 - (0 * be) / C47178;
    const double C19904 = C47366 / C47184 - (0 * be) / C47178;
    const double C33488 = C47366 / C47184 + (0 * ae) / C47178;
    const double C48617 = C48582 / C47178;
    const double C48636 = C48620 / C47184;
    const double C48637 = C48621 + C48586;
    const double C19899 = C48586 - C48417 / C47190;
    const double C48619 = C48583 / C47178;
    const double C1207 = C48593 * C254;
    const double C3873 = C48610 * C254;
    const double C7829 = C48593 * C254;
    const double C22238 = C48610 * C254;
    const double C26326 = C26137 * C254;
    const double C2746 = C48593 * C362;
    const double C5145 = C48610 * C362;
    const double C15348 = C48593 * C362;
    const double C27907 = C26137 * C362;
    const double C31025 = C48610 * C362;
    const double C1217 = C1001 * C534;
    const double C1194 = C48593 * C534;
    const double C7839 = C48625 * C534;
    const double C7816 = C48593 * C534;
    const double C11215 = C48222 * C534;
    const double C23409 = C48222 * C534;
    const double C26336 = C48225 * C534;
    const double C26313 = C26137 * C534;
    const double C1844 = C48593 * C636;
    const double C6244 = C1001 * C636;
    const double C8426 = C48593 * C636;
    const double C12467 = C48222 * C636;
    const double C24669 = C48222 * C636;
    const double C26923 = C26137 * C636;
    const double C27687 = C48225 * C636;
    const double C39287 = C48625 * C636;
    const double C17658 =
        (4 * (2 * C47955 + C47423 * C48064 + C47956 * ae) +
         C47423 *
             (3 * C48064 +
              C47423 *
                  (2 * C48056 +
                   C47423 * (C47453 + C47423 * (C47423 * C47469 + C47525 * ae) +
                             C47423 * C47525 * ae) +
                   C48058 * ae) +
              C48063 * ae) +
         (3 * C47956 + C47423 * C48063) * ae) /
        C47178;
    const double C6245 = C1008 * C632;
    const double C27688 = C47239 * C632;
    const double C39288 = C7646 * C632;
    const double C2757 = C1008 * C883;
    const double C15359 = C7646 * C883;
    const double C36508 = C47239 * C883;
    const double C1212 = C1008 * C520;
    const double C7834 = C7646 * C520;
    const double C26331 = C47239 * C520;
    const double C6239 = C1008 * C622;
    const double C27682 = C47239 * C622;
    const double C39282 = C7646 * C622;
    const double C2751 = C1008 * C873;
    const double C15353 = C7646 * C873;
    const double C36502 = C47239 * C873;
    const double C48079 = C48077 + C48072;
    const double C47573 = C47424 * C47547;
    const double C47578 = 3 * C47547;
    const double C47618 = C47554 * C47547;
    const double C47660 = ae * C47547;
    const double C47659 = C47423 * C47547;
    const double C638 =
        (ae * C47554 *
             (3 * C47547 +
              C47424 * (2 * C47542 +
                        C47424 * (C47536 +
                                  C47424 * (C47424 * C47483 * C47484 * C47515 +
                                            C47535 * be) +
                                  C47424 * C47535 * be) +
                        C47541 * be) +
              C47545 * be) +
         C47423 * C47554 *
             (3 * C47500 + be * C47501 +
              C47424 * (2 * C47496 + be * C47497 +
                        C47424 * (C47492 + be * C47424 * C47493 +
                                  C47424 * (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C9908 = C48212 * C2280;
    const double C13260 = C48222 * C2280;
    const double C25251 = C48222 * C2280;
    const double C9029 = C48212 * C1641;
    const double C11593 = C48222 * C1641;
    const double C23787 = C48222 * C1641;
    const double C11757 = C48222 * C1824;
    const double C14038 = C48212 * C1824;
    const double C23951 = C48222 * C1824;
    const double C9906 = C48212 * C2271;
    const double C13256 = C48222 * C2271;
    const double C25247 = C48222 * C2271;
    const double C17673 = C48212 * C3590;
    const double C20897 = C48222 * C3590;
    const double C34481 = C48222 * C3590;
    const double C10343 = C8908 * C9619;
    const double C9276 = C8908 * C8991;
    const double C9387 = C8908 * C9113;
    const double C10341 = C8908 * C9616;
    const double C48096 = C48094 + C48087;
    const double C18144 = C8908 * C17655;
    const double C48116 = C47423 * C48114;
    const double C887 =
        (C47442 + be * C47445 + C47424 * C47456 + ae * C47423 * C47570 +
         C47423 * (ae * C47570 + C47423 * C47476)) /
        C47183;
    const double C1379 = (ae * (C47570 + C47547 * C47603) +
                          C47423 * (C47476 + C47500 * C47603)) /
                         C47183;
    const double C2708 = (2 * (ae * C47570 + C47423 * C47476) +
                          ae * (C47570 + C47547 * std::pow(C47423, 2)) +
                          C47423 * (C47476 + ae * C47423 * C47547 +
                                    C47423 * (ae * C47547 + C47423 * C47500))) /
                         C47183;
    const double C130 = (3 * (C47561 + C47424 * C47565 + C47803 * be) +
                         C47424 * (2 * C47565 + C47424 * C47570 + C47805 * be) +
                         (2 * C47803 + C47424 * C47805) * be) /
                        C47178;
    const double C242 =
        (C47554 * (2 * C47565 + C47424 * C47570 + C47805 * be)) / C47178;
    const double C350 =
        (C47423 * (2 * C47565 + C47424 * C47570 + C47805 * be)) / C47178;
    const double C524 =
        (C47561 + C47424 * C47565 + C47803 * be + C47570 * C47603) / C47178;
    const double C626 = (C47423 * C47554 * C47570) / C47178;
    const double C877 =
        (C47561 + C47424 * C47565 + C47803 * be + C47570 * C47647) / C47178;
    const double C1161 =
        (2 * C47554 * C47570 + C47554 * (C47570 + C47547 * C47603)) / C47178;
    const double C1371 = (C47423 * (C47570 + C47547 * C47603)) / C47178;
    const double C2700 =
        (2 * C47423 * C47570 + C47423 * (C47570 + C47547 * C47647)) / C47178;
    const double C19239 = C13247 - C13248;
    const double C19235 = C13248 - C13247;
    const double C25461 = C24661 - C24660;
    const double C25453 = C24660 - C24661;
    const double C19237 = C13243 - C13244;
    const double C19233 = C13244 - C13243;
    const double C25459 = C24657 - C24656;
    const double C25451 = C24656 - C24657;
    const double C17675 = C48212 * C3596;
    const double C20901 = C48222 * C3596;
    const double C34485 = C48222 * C3596;
    const double C10349 = C10340 * C48609;
    const double C16862 = C10340 * C48609;
    const double C46608 = C10340 * C36201;
    const double C9284 = C9274 * C118;
    const double C14409 = C14405 * C4869;
    const double C41164 = C14405 * C30749;
    const double C10348 = C10339 * C2397;
    const double C16861 = C10339 * C15019;
    const double C46607 = C10339 * C47366;
    const double C18147 = C48212 * C17661;
    const double C47505 = C47485 + C47503;
    const double C47504 = C47486 + C47502;
    const double C1667 = C48593 * C1169;
    const double C8261 = C48593 * C1169;
    const double C11223 = C48222 * C1169;
    const double C23417 = C48222 * C1169;
    const double C26758 = C26137 * C1169;
    const double C47755 = C47752 + C47753;
    const double C10344 = C48212 * C9622;
    const double C47793 = C47781 + C47791;
    const double C47592 = C47424 * C47591;
    const double C47626 = C47591 * C47603;
    const double C47642 = C47554 * C47591;
    const double C47662 = C47591 * C47647;
    const double C1831 =
        (ae * (2 * C47554 * C47547 + C47554 * (C47547 + C47591 * C47603)) +
         C47423 * (2 * C47554 * C47500 +
                   C47554 * (C47500 + (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47603))) /
        C47183;
    const double C47702 = C47698 + C47701;
    const double C17572 =
        (3 * (C47638 + ae * C47721 + C47423 * C47727) +
         ae * (2 * C47721 + C47423 * C47728) +
         C47423 * (2 * C47727 + ae * C47728 +
                   C47423 * (C47723 + ae * C47423 * C47724 +
                             C47423 * (ae * C47724 +
                                       C47423 * C47554 *
                                           (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C17570 = (3 * (C47616 + C47639 * C47647) +
                           C47423 * (2 * C47721 + C47423 * C47728)) /
                          C47178;
    const double C47756 = C47750 + C47754;
    const double C47696 = C47688 + C47695;
    const double C17904 =
        (4 * (2 * C47711 + ae * C47712 + C47423 * C47771) +
         ae * (3 * C47712 + C47423 * C47772) +
         C47423 * (3 * C47771 + ae * C47772 +
                   C47423 * (2 * C47767 + ae * C47768 +
                             C47423 * (C47760 + ae * C47423 * C47761 +
                                       C47423 * (ae * C47761 +
                                                 C47423 * C47554 *
                                                     std::pow(C47426, 8) *
                                                     bs[8] * C47435))))) /
        C47183;
    const double C17902 = (4 * (2 * C47707 + C47423 * C47712) +
                           C47423 * (3 * C47712 + C47423 * C47772)) /
                          C47178;
    const double C47794 = C47779 + C47792;
    const double C125 = 5 * (3 * C47805 + C47424 * C47814) +
                        C47424 * (4 * C47814 + C47424 * C47819);
    const double C238 = C47554 * (4 * C47814 + C47424 * C47819);
    const double C346 = C47423 * (4 * C47814 + C47424 * C47819);
    const double C521 = 3 * C47805 + C47424 * C47814 + C47819 * C47603;
    const double C623 = C47423 * C47554 * C47819;
    const double C874 = 3 * C47805 + C47424 * C47814 + C47819 * C47647;
    const double C9621 =
        (3 * C47974 + C47554 * C47990 +
         C47423 * (C47423 * (3 * C47988 +
                             C47554 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603))) +
                   C48010 * ae) +
         C47423 * C48010 * ae) /
        C47178;
    const double C9265 = 5 * (3 * C47917 + C47554 * C47999) +
                         C47554 * (4 * C47999 + C47554 * C48010);
    const double C9370 = C47423 * (4 * C47999 + C47554 * C48010);
    const double C9617 = 3 * C47917 + C47554 * C47999 + C48010 * C47647;
    const double C18135 = 5 * (3 * C47956 + C47423 * C48063) +
                          C47423 * (4 * C48063 + C47423 * C48117);
    const double C48611 = C48576 / C47178;
    const double C48633 = C48614 / C47184;
    const double C48634 = C48615 + C48580;
    const double C11041 = C48580 - C48377 / C47190;
    const double C48613 = C48577 / C47178;
    const double C47221 = C47217 / C47178;
    const double C3889 = C3727 * C248;
    const double C3881 = C3727 * C237;
    const double C3874 = C3727 * C247;
    const double C3866 = C3727 * C236;
    const double C4263 = C3727 * C530;
    const double C4255 = C3727 * C520;
    const double C4409 = C3727 * C632;
    const double C4401 = C3727 * C622;
    const double C5161 = C3727 * C356;
    const double C5153 = C3727 * C345;
    const double C5146 = C3727 * C355;
    const double C5138 = C3727 * C344;
    const double C5893 = C3727 * C883;
    const double C5885 = C3727 * C873;
    const double C22254 = C22092 * C248;
    const double C22246 = C22092 * C237;
    const double C22239 = C22092 * C247;
    const double C22231 = C22092 * C236;
    const double C22628 = C22092 * C530;
    const double C22620 = C22092 * C520;
    const double C22774 = C22092 * C632;
    const double C22766 = C22092 * C622;
    const double C31041 = C22092 * C356;
    const double C31033 = C22092 * C345;
    const double C31026 = C22092 * C355;
    const double C31018 = C22092 * C344;
    const double C31773 = C22092 * C883;
    const double C31765 = C22092 * C873;
    const double C47220 = C47216 / C47178;
    const double C1214 = C1006 * C528;
    const double C1208 = C1006 * C518;
    const double C1202 = C1006 * C245;
    const double C1196 = C1006 * C234;
    const double C1191 = C1006 * C527;
    const double C1185 = C1006 * C517;
    const double C1179 = C1006 * C244;
    const double C1173 = C1006 * C233;
    const double C1662 = C1006 * C1162;
    const double C1656 = C1006 * C1155;
    const double C1851 = C1006 * C1372;
    const double C1845 = C1006 * C1365;
    const double C1839 = C1006 * C629;
    const double C1833 = C1006 * C619;
    const double C2753 = C1006 * C881;
    const double C2747 = C1006 * C871;
    const double C2741 = C1006 * C353;
    const double C2735 = C1006 * C342;
    const double C2730 = C1006 * C880;
    const double C2724 = C1006 * C870;
    const double C2718 = C1006 * C352;
    const double C2712 = C1006 * C341;
    const double C3179 = C1006 * C2267;
    const double C3173 = C1006 * C2258;
    const double C3611 = C1006 * C2701;
    const double C3605 = C1006 * C2694;
    const double C6241 = C1006 * C630;
    const double C6235 = C1006 * C620;
    const double C1216 = C1007 * C529;
    const double C1210 = C1007 * C519;
    const double C1204 = C1007 * C246;
    const double C1198 = C1007 * C235;
    const double C1193 = C1007 * C528;
    const double C1187 = C1007 * C518;
    const double C1181 = C1007 * C245;
    const double C1175 = C1007 * C234;
    const double C1664 = C1007 * C1163;
    const double C1658 = C1007 * C1156;
    const double C1853 = C1007 * C1373;
    const double C1847 = C1007 * C1366;
    const double C1841 = C1007 * C630;
    const double C1835 = C1007 * C620;
    const double C2755 = C1007 * C882;
    const double C2749 = C1007 * C872;
    const double C2743 = C1007 * C354;
    const double C2737 = C1007 * C343;
    const double C2732 = C1007 * C881;
    const double C2726 = C1007 * C871;
    const double C2720 = C1007 * C353;
    const double C2714 = C1007 * C342;
    const double C3181 = C1007 * C2268;
    const double C3175 = C1007 * C2259;
    const double C3613 = C1007 * C2702;
    const double C3607 = C1007 * C2695;
    const double C6243 = C1007 * C631;
    const double C6237 = C1007 * C621;
    const double C23414 = C23237 * C1163;
    const double C23410 = C23237 * C1156;
    const double C23406 = C23237 * C528;
    const double C23402 = C23237 * C518;
    const double C23398 = C23237 * C245;
    const double C23394 = C23237 * C234;
    const double C23391 = C23237 * C1162;
    const double C23387 = C23237 * C1155;
    const double C23383 = C23237 * C527;
    const double C23379 = C23237 * C517;
    const double C23375 = C23237 * C244;
    const double C23371 = C23237 * C233;
    const double C23788 = C23237 * C1643;
    const double C23784 = C23237 * C1637;
    const double C23952 = C23237 * C1826;
    const double C23948 = C23237 * C1820;
    const double C23944 = C23237 * C1372;
    const double C23940 = C23237 * C1365;
    const double C23936 = C23237 * C629;
    const double C23932 = C23237 * C619;
    const double C24674 = C23237 * C2268;
    const double C24670 = C23237 * C2259;
    const double C24666 = C23237 * C630;
    const double C24662 = C23237 * C620;
    const double C24659 = C23237 * C2267;
    const double C24655 = C23237 * C2258;
    const double C24900 = C23237 * C881;
    const double C24896 = C23237 * C871;
    const double C24892 = C23237 * C353;
    const double C24888 = C23237 * C342;
    const double C24885 = C23237 * C880;
    const double C24881 = C23237 * C870;
    const double C24877 = C23237 * C352;
    const double C24873 = C23237 * C341;
    const double C25248 = C23237 * C2273;
    const double C25244 = C23237 * C2261;
    const double C25466 = C23237 * C3166;
    const double C25462 = C23237 * C3160;
    const double C26020 = C23237 * C2701;
    const double C26016 = C23237 * C2694;
    const double C29364 = C23237 * C1373;
    const double C29360 = C23237 * C1366;
    const double C33754 = C23237 * C2702;
    const double C33750 = C23237 * C2695;
    const double C34482 = C23237 * C3592;
    const double C34478 = C23237 * C3586;
    const double C9287 = C9282 + C9283;
    const double C14408 = C14403 + C14404;
    const double C9286 = C9280 + C9281;
    const double C10345 = C10335 + C10336;
    const double C14407 = C14399 + C14400;
    const double C16863 = C16857 + C16858;
    const double C48647 = C48588 + C48639;
    const double C3719 = C48626 - (C48225 * C48208) / C47178;
    const double C22253 = C48627 * C254;
    const double C22236 = C48627 * C253;
    const double C22228 = C48627 * C241;
    const double C22627 = C48627 * C534;
    const double C22773 = C48627 * C636;
    const double C31040 = C48627 * C362;
    const double C31023 = C48627 * C361;
    const double C31015 = C48627 * C349;
    const double C104 = C48627 / C47184 - C48223 / C48595;
    const double C3888 = C3720 * C254;
    const double C3871 = C3720 * C253;
    const double C3863 = C3720 * C241;
    const double C4262 = C3720 * C534;
    const double C4408 = C3720 * C636;
    const double C5160 = C3720 * C362;
    const double C5143 = C3720 * C361;
    const double C5135 = C3720 * C349;
    const double C48640 = C48591 + C48626;
    const double C47337 = C47333 / C47178;
    const double C41162 = C9272 * C30748;
    const double C41158 = C9270 * C30748;
    const double C47348 = C47342 / C47178;
    const double C48649 = C48617 + C48645;
    const double C19898 = C48636 - (C48419 * C48408) / C47178;
    const double C17480 = C48637 / C47184 - C48417 / C48595;
    const double C48646 = C48619 + C48636;
    const double C1655 = C1194 - C1195;
    const double C8249 = C7816 - C7817;
    const double C26746 = C26313 - C26314;
    const double C6986 = C1843 - C1844;
    const double C6980 = C1844 - C1843;
    const double C40029 = C8425 - C8426;
    const double C40023 = C8426 - C8425;
    const double C28453 = C26922 - C26923;
    const double C28447 = C26923 - C26922;
    const double C18146 = C8908 * C17658;
    const double C17660 =
        (4 * (2 * C47962 + C47423 * C48079 + C47963 * ae) +
         C47423 * (3 * C48079 +
                   C47423 * (2 * C48071 +
                             C47423 * (C47481 +
                                       C47423 * (C47423 * C47424 * C47493 +
                                                 C47582 * ae) +
                                       C47423 * C47582 * ae) +
                             C48073 * ae) +
                   C48078 * ae) +
         (3 * C47963 + C47423 * C48078) * ae) /
        C47178;
    const double C47575 = C47572 + C47573;
    const double C2278 = (C47554 * C47476 + ae * C47423 * C47618 +
                          C47423 * (ae * C47618 + C47423 * C47554 * C47500)) /
                         C47183;
    const double C2266 = (C47554 * C47570 + C47618 * C47647) / C47178;
    const double C47663 = C47660 + C47661;
    const double C17903 =
        (4 * (2 * C48030 + C47423 * C48096 + C48031 * ae) +
         C47423 * (3 * C48096 +
                   C47423 * (2 * C48090 +
                             C47423 * (C48082 +
                                       C47423 * (C47423 * C47554 * C47493 +
                                                 C48085 * ae) +
                                       C47423 * C48085 * ae) +
                             C48091 * ae) +
                   C48095 * ae) +
         (3 * C48031 + C47423 * C48095) * ae) /
        C47178;
    const double C48118 = C48099 + C48116;
    const double C2756 = C1001 * C887;
    const double C2733 = C48593 * C887;
    const double C5892 = C3720 * C887;
    const double C15358 = C48625 * C887;
    const double C15335 = C48593 * C887;
    const double C18697 = C48222 * C887;
    const double C24903 = C48222 * C887;
    const double C29019 = C26137 * C887;
    const double C31772 = C48627 * C887;
    const double C36507 = C48225 * C887;
    const double C1856 = C48593 * C1379;
    const double C8438 = C48593 * C1379;
    const double C12475 = C48222 * C1379;
    const double C26935 = C26137 * C1379;
    const double C29367 = C48222 * C1379;
    const double C3616 = C48593 * C2708;
    const double C16194 = C48593 * C2708;
    const double C20173 = C48222 * C2708;
    const double C33757 = C48222 * C2708;
    const double C37331 = C26137 * C2708;
    const double C1201 = C48593 * C242;
    const double C3880 = C3720 * C242;
    const double C3865 = C48610 * C242;
    const double C7823 = C48593 * C242;
    const double C22245 = C48627 * C242;
    const double C22230 = C48610 * C242;
    const double C26320 = C26137 * C242;
    const double C2740 = C48593 * C350;
    const double C5152 = C3720 * C350;
    const double C5137 = C48610 * C350;
    const double C15342 = C48593 * C350;
    const double C27901 = C26137 * C350;
    const double C31032 = C48627 * C350;
    const double C31017 = C48610 * C350;
    const double C1211 = C1001 * C524;
    const double C1188 = C48593 * C524;
    const double C4254 = C3720 * C524;
    const double C7833 = C48625 * C524;
    const double C7810 = C48593 * C524;
    const double C11211 = C48222 * C524;
    const double C22619 = C48627 * C524;
    const double C23405 = C48222 * C524;
    const double C26330 = C48225 * C524;
    const double C26307 = C26137 * C524;
    const double C1838 = C48593 * C626;
    const double C4400 = C3720 * C626;
    const double C6238 = C1001 * C626;
    const double C8420 = C48593 * C626;
    const double C12463 = C48222 * C626;
    const double C22765 = C48627 * C626;
    const double C24665 = C48222 * C626;
    const double C26917 = C26137 * C626;
    const double C27681 = C48225 * C626;
    const double C39281 = C48625 * C626;
    const double C2750 = C1001 * C877;
    const double C2727 = C48593 * C877;
    const double C5884 = C3720 * C877;
    const double C15352 = C48625 * C877;
    const double C15329 = C48593 * C877;
    const double C18693 = C48222 * C877;
    const double C24899 = C48222 * C877;
    const double C29013 = C26137 * C877;
    const double C31764 = C48627 * C877;
    const double C36501 = C48225 * C877;
    const double C1661 = C48593 * C1161;
    const double C8255 = C48593 * C1161;
    const double C11219 = C48222 * C1161;
    const double C23413 = C48222 * C1161;
    const double C26752 = C26137 * C1161;
    const double C1850 = C48593 * C1371;
    const double C8432 = C48593 * C1371;
    const double C12471 = C48222 * C1371;
    const double C26929 = C26137 * C1371;
    const double C29363 = C48222 * C1371;
    const double C3610 = C48593 * C2700;
    const double C16188 = C48593 * C2700;
    const double C20169 = C48222 * C2700;
    const double C33753 = C48222 * C2700;
    const double C37325 = C26137 * C2700;
    const double C9288 = C9284 + C9285;
    const double C139 = (5 * (3 * C47457 + C47424 * C47477) +
                         C47424 * (4 * C47477 + C47424 * C47505)) /
                        C47178;
    const double C250 = (C47554 * (4 * C47477 + C47424 * C47505)) / C47178;
    const double C358 = (C47423 * (4 * C47477 + C47424 * C47505) +
                         (4 * C47814 + C47424 * C47819) * ae) /
                        C47178;
    const double C531 =
        (3 * C47457 + C47424 * C47477 + C47505 * C47603) / C47178;
    const double C633 =
        (C47423 * C47554 * C47505 + C47554 * C47819 * ae) / C47178;
    const double C884 =
        (3 * C47457 + C47424 * C47477 +
         C47423 * (C47423 * C47505 + C47819 * ae) + C47423 * C47819 * ae) /
        C47178;
    const double C146 =
        (5 * (3 * C47476 + be * C47477 + C47424 * C47504) +
         be * (4 * C47477 + C47424 * C47505) +
         C47424 *
             (4 * C47504 + be * C47505 +
              C47424 *
                  (3 * C47500 + be * C47501 +
                   C47424 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C255 =
        ((yP - yQ) * (3 * C47476 + be * C47477 + C47424 * C47504)) / C47183;
    const double C256 =
        ((yP - yQ) *
         (4 * C47504 + be * C47505 +
          C47424 * (3 * C47500 + be * C47501 +
                    C47424 * (2 * C47496 + be * C47497 +
                              C47424 * (C47492 + be * C47424 * C47493 +
                                        C47424 * (be * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47183;
    const double C363 =
        (ae * (3 * (C47520 + C47424 * C47530 + C47524 * be) +
               C47424 * (2 * C47530 +
                         C47424 * (C47526 +
                                   C47424 * (C47424 * C47461 * C47462 * C47515 +
                                             C47525 * be) +
                                   C47424 * C47525 * be) +
                         C47529 * be) +
               (2 * C47524 + C47424 * C47529) * be) +
         C47423 * (3 * C47476 + be * C47477 + C47424 * C47504)) /
        C47183;
    const double C364 =
        (ae * (4 * (2 * C47530 + C47424 * C47547 + C47529 * be) +
               C47424 * (3 * C47547 +
                         C47424 * (2 * C47542 +
                                   C47424 * (C47536 +
                                             C47424 * (C47424 * C47483 *
                                                           C47484 * C47515 +
                                                       C47535 * be) +
                                             C47424 * C47535 * be) +
                                   C47541 * be) +
                         C47545 * be) +
               (3 * C47529 + C47424 * C47545) * be) +
         C47423 *
             (4 * C47504 + be * C47505 +
              C47424 *
                  (3 * C47500 + be * C47501 +
                   C47424 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C535 = (2 * C47456 + be * C47457 + C47424 * C47476 +
                         C47504 * std::pow(yP - yQ, 2)) /
                        C47183;
    const double C536 =
        (3 * C47476 + be * C47477 + C47424 * C47504 +
         (3 * C47500 + be * C47501 +
          C47424 *
              (2 * C47496 + be * C47497 +
               C47424 * (C47492 + be * C47424 * C47493 +
                         C47424 * (be * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             std::pow(yP - yQ, 2)) /
        C47183;
    const double C637 =
        (ae * C47554 * (2 * C47530 + C47424 * C47547 + C47529 * be) +
         C47423 * C47554 * C47504) /
        C47183;
    const double C1170 =
        (2 * C47554 * C47504 +
         C47554 * (C47504 + (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                std::pow(C47554, 2))) /
        C47183;
    const double C47593 = C47579 + C47592;
    const double C47627 = C47547 + C47626;
    const double C3171 =
        (2 * (ae * C47618 + C47423 * C47641) +
         ae * (C47618 + C47642 * std::pow(C47423, 2)) +
         C47423 * (C47641 + ae * C47423 * C47642 +
                   C47423 * (ae * C47642 +
                             C47423 * C47554 *
                                 (C47492 + be * C47424 * C47493 +
                                  C47424 * (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C3165 =
        (2 * C47423 * C47618 + C47423 * (C47618 + C47642 * C47647)) / C47178;
    const double C47664 = C47547 + C47662;
    const double C9883 =
        (2 * C47638 + C47554 * C47670 + ae * C47423 * C47702 +
         C47423 * (ae * C47702 +
                   C47423 * (2 * C47554 * C47496 +
                             C47554 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47183;
    const double C8995 = (4 * (2 * C47616 + C47554 * C47624) +
                          C47554 * (3 * C47624 + C47554 * C47702)) /
                         C47178;
    const double C9117 = (C47423 * (3 * C47624 + C47554 * C47702)) / C47178;
    const double C9881 =
        (2 * C47616 + C47554 * C47624 + C47702 * C47647) / C47178;
    const double C17662 =
        (4 * (2 * C47656 + ae * C47657 + C47423 * C47755) +
         ae * (3 * C47657 + C47423 * C47756) +
         C47423 *
             (3 * C47755 + ae * C47756 +
              C47423 *
                  (2 * C47749 + ae * C47751 +
                   C47423 * (C47496 + ae * C47423 * C47588 +
                             C47423 * (ae * C47588 +
                                       C47423 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C17659 = (4 * (2 * C47652 + C47423 * C47657) +
                           C47423 * (3 * C47657 + C47423 * C47756)) /
                          C47178;
    const double C9623 =
        (3 * C47667 + C47554 * C47679 + ae * C47423 * C47696 +
         C47423 * (ae * C47696 +
                   C47423 * (3 * C47677 +
                             C47554 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47183;
    const double C9266 = (5 * (3 * C47621 + C47554 * C47686) +
                          C47554 * (4 * C47686 + C47554 * C47696)) /
                         C47178;
    const double C9371 = (C47423 * (4 * C47686 + C47554 * C47696)) / C47178;
    const double C9620 =
        (3 * C47621 + C47554 * C47686 + C47696 * C47647) / C47178;
    const double C18138 =
        (5 * (3 * C47741 + ae * C47742 + C47423 * C47793) +
         ae * (4 * C47742 + C47423 * C47794) +
         C47423 *
             (4 * C47793 + ae * C47794 +
              C47423 *
                  (3 * C47789 + ae * C47790 +
                   C47423 * (2 * C47783 + ae * C47785 +
                             C47423 * (C47492 + ae * C47423 * C47585 +
                                       C47423 * (ae * C47585 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C18136 = (5 * (3 * C47650 + C47423 * C47742) +
                           C47423 * (4 * C47742 + C47423 * C47794)) /
                          C47178;
    const double C48648 = C48611 + C48643;
    const double C11040 = C48633 - (C48379 * C48368) / C47178;
    const double C8906 = C48634 / C47184 - C48377 / C48595;
    const double C48644 = C48613 + C48633;
    const double C47223 = C47220 - C47199;
    const double C1653 = C1190 - C1191;
    const double C1650 = C1184 - C1185;
    const double C6984 = C1839 - C1840;
    const double C6978 = C1840 - C1839;
    const double C6981 = C1833 - C1834;
    const double C6975 = C1834 - C1833;
    const double C3602 = C2729 - C2730;
    const double C3599 = C2723 - C2724;
    const double C1654 = C1192 - C1193;
    const double C1651 = C1186 - C1187;
    const double C6985 = C1841 - C1842;
    const double C6979 = C1842 - C1841;
    const double C6982 = C1835 - C1836;
    const double C6976 = C1836 - C1835;
    const double C3603 = C2731 - C2732;
    const double C3600 = C2725 - C2726;
    const double C23782 = C23390 - C23391;
    const double C23780 = C23386 - C23387;
    const double C23778 = C23382 - C23383;
    const double C23776 = C23378 - C23379;
    const double C29906 = C23945 - C23944;
    const double C30111 = C23944 - C23945;
    const double C29904 = C23941 - C23940;
    const double C30109 = C23940 - C23941;
    const double C25456 = C23936 - C23937;
    const double C25448 = C23937 - C23936;
    const double C25454 = C23932 - C23933;
    const double C25446 = C23933 - C23932;
    const double C25460 = C24659 - C24658;
    const double C25452 = C24658 - C24659;
    const double C25458 = C24655 - C24654;
    const double C25450 = C24654 - C24655;
    const double C26014 = C24884 - C24885;
    const double C26012 = C24880 - C24881;
    const double C34476 = C26021 - C26020;
    const double C34474 = C26017 - C26016;
    const double C14412 = C14408 + C14409;
    const double C10350 = C10345 + C10346;
    const double C14411 = C14407 + C14401;
    const double C16864 = C16863 + C16859;
    const double C22249 = C48647 * C252;
    const double C22241 = C48647 * C240;
    const double C22232 = C48647 * C251;
    const double C22224 = C48647 * C239;
    const double C22623 = C48647 * C532;
    const double C22615 = C48647 * C522;
    const double C22769 = C48647 * C634;
    const double C22761 = C48647 * C624;
    const double C31036 = C48647 * C360;
    const double C31028 = C48647 * C348;
    const double C31019 = C48647 * C359;
    const double C31011 = C48647 * C347;
    const double C31768 = C48647 * C885;
    const double C31760 = C48647 * C875;
    const double C101 =
        (C48638 + 2 * C48217) / C47184 - (C48647 * C48208) / C47178;
    const double C3886 = C3719 * C253;
    const double C3878 = C3719 * C241;
    const double C3869 = C3719 * C252;
    const double C3861 = C3719 * C240;
    const double C4260 = C3719 * C533;
    const double C4252 = C3719 * C523;
    const double C4406 = C3719 * C635;
    const double C4398 = C3719 * C625;
    const double C5158 = C3719 * C361;
    const double C5150 = C3719 * C349;
    const double C5141 = C3719 * C360;
    const double C5133 = C3719 * C348;
    const double C5890 = C3719 * C886;
    const double C5882 = C3719 * C876;
    const double C22251 = C48640 * C253;
    const double C22243 = C48640 * C241;
    const double C22234 = C48640 * C252;
    const double C22226 = C48640 * C240;
    const double C22625 = C48640 * C533;
    const double C22617 = C48640 * C523;
    const double C22771 = C48640 * C635;
    const double C22763 = C48640 * C625;
    const double C31038 = C48640 * C361;
    const double C31030 = C48640 * C349;
    const double C31021 = C48640 * C360;
    const double C31013 = C48640 * C348;
    const double C31770 = C48640 * C886;
    const double C31762 = C48640 * C876;
    const double C102 =
        (C48625 + 2 * C48225 + C48647) / C47184 - (C48640 * C48208) / C47178;
    const double C103 = (C48593 + C48222 / C47178 + C48640) / C47184 -
                        (C48627 * C48208) / C47178;
    const double C47341 = C47337 - C47318;
    const double C41167 = C41162 + C41163;
    const double C41166 = C41158 + C41159;
    const double C17477 =
        (C48642 + 2 * C48412) / C47184 - (C48649 * C48408) / C47178;
    const double C17478 =
        (C48631 + 2 * C48419 + C48649) / C47184 - (C48646 * C48408) / C47178;
    const double C17479 = (C48609 + C48416 / C47178 + C48646) / C47184 -
                          (C48637 * C48408) / C47178;
    const double C47576 = C47575 + C47574;
    const double C3184 = C48593 * C2278;
    const double C15774 = C48593 * C2278;
    const double C18495 = C48222 * C2278;
    const double C24677 = C48222 * C2278;
    const double C28465 = C26137 * C2278;
    const double C3178 = C48593 * C2266;
    const double C15768 = C48593 * C2266;
    const double C18491 = C48222 * C2266;
    const double C24673 = C48222 * C2266;
    const double C28459 = C26137 * C2266;
    const double C48119 = C48118 + C48103;
    const double C3604 = C2733 - C2734;
    const double C16182 = C15335 - C15336;
    const double C37319 = C29019 - C29018;
    const double C1652 = C1188 - C1189;
    const double C8246 = C7810 - C7811;
    const double C26743 = C26307 - C26308;
    const double C6983 = C1837 - C1838;
    const double C6977 = C1838 - C1837;
    const double C40026 = C8419 - C8420;
    const double C40020 = C8420 - C8419;
    const double C28450 = C26916 - C26917;
    const double C28444 = C26917 - C26916;
    const double C3601 = C2727 - C2728;
    const double C16179 = C15329 - C15330;
    const double C37316 = C29013 - C29012;
    const double C3890 = C48610 * C255;
    const double C22255 = C48610 * C255;
    const double C5162 = C48610 * C363;
    const double C31042 = C48610 * C363;
    const double C1219 = C48593 * C535;
    const double C4264 = C48610 * C535;
    const double C7841 = C48593 * C535;
    const double C22629 = C48610 * C535;
    const double C26338 = C26137 * C535;
    const double C4410 = C48610 * C637;
    const double C6246 = C48593 * C637;
    const double C22775 = C48610 * C637;
    const double C27689 = C26137 * C637;
    const double C39289 = C48593 * C637;
    const double C47594 = C47593 + C47583;
    const double C2281 =
        (C47476 + C47500 * C47603 + ae * C47423 * C47627 +
         C47423 * (ae * C47627 +
                   C47423 * (C47500 + (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47603))) /
        C47183;
    const double C1642 = (3 * (C47570 + C47547 * C47603) +
                          C47554 * (2 * C47618 + C47554 * C47627)) /
                         C47178;
    const double C1825 = (C47423 * (2 * C47618 + C47554 * C47627)) / C47178;
    const double C2272 = (C47570 + C47547 * C47603 + C47627 * C47647) / C47178;
    const double C3597 =
        (3 * (C47476 + ae * C47659 + C47423 * C47663) +
         ae * (2 * C47659 + C47423 * C47664) +
         C47423 *
             (2 * C47663 + ae * C47664 +
              C47423 *
                  (C47500 + ae * C47423 * C47591 +
                   C47423 * (ae * C47591 +
                             C47423 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C3591 = (3 * (C47570 + C47547 * C47647) +
                          C47423 * (2 * C47659 + C47423 * C47664)) /
                         C47178;
    const double C8903 =
        (C48641 + 2 * C48372) / C47184 - (C48648 * C48368) / C47178;
    const double C8904 =
        (C48629 + 2 * C48379 + C48648) / C47184 - (C48644 * C48368) / C47178;
    const double C8905 = (C48606 + C48376 / C47178 + C48644) / C47184 -
                         (C48634 * C48368) / C47178;
    const double C11220 = C47223 * C1163;
    const double C11216 = C47223 * C1156;
    const double C11212 = C47223 * C528;
    const double C11208 = C47223 * C518;
    const double C11204 = C47223 * C245;
    const double C11200 = C47223 * C234;
    const double C11197 = C47223 * C1162;
    const double C11193 = C47223 * C1155;
    const double C11189 = C47223 * C527;
    const double C11185 = C47223 * C517;
    const double C11181 = C47223 * C244;
    const double C11177 = C47223 * C233;
    const double C11594 = C47223 * C1643;
    const double C11590 = C47223 * C1637;
    const double C11758 = C47223 * C1826;
    const double C11754 = C47223 * C1820;
    const double C11750 = C47223 * C1372;
    const double C11746 = C47223 * C1365;
    const double C11742 = C47223 * C629;
    const double C11738 = C47223 * C619;
    const double C12472 = C47223 * C1373;
    const double C12468 = C47223 * C1366;
    const double C12464 = C47223 * C630;
    const double C12460 = C47223 * C620;
    const double C12682 = C47223 * C353;
    const double C12678 = C47223 * C342;
    const double C12675 = C47223 * C352;
    const double C12671 = C47223 * C341;
    const double C13257 = C47223 * C2273;
    const double C13253 = C47223 * C2261;
    const double C13245 = C47223 * C2267;
    const double C13241 = C47223 * C2258;
    const double C13805 = C47223 * C880;
    const double C13801 = C47223 * C870;
    const double C18492 = C47223 * C2268;
    const double C18488 = C47223 * C2259;
    const double C18694 = C47223 * C881;
    const double C18690 = C47223 * C871;
    const double C19244 = C47223 * C3166;
    const double C19240 = C47223 * C3160;
    const double C19794 = C47223 * C2701;
    const double C19790 = C47223 * C2694;
    const double C20170 = C47223 * C2702;
    const double C20166 = C47223 * C2695;
    const double C20898 = C47223 * C3592;
    const double C20894 = C47223 * C3586;
    const double C47226 = C47223 / C47184;
    const double C47225 = C47176 * C47223;
    const double C1669 = C1653 + C1654;
    const double C1668 = C1650 + C1651;
    const double C6990 = C6984 + C6985;
    const double C6988 = C6978 + C6979;
    const double C6989 = C6981 + C6982;
    const double C6987 = C6975 + C6976;
    const double C3618 = C3602 + C3603;
    const double C3617 = C3599 + C3600;
    const double C23795 = C23782 + C23783;
    const double C23794 = C23780 + C23781;
    const double C23793 = C23778 + C23779;
    const double C23792 = C23776 + C23777;
    const double C29910 = C29906 + C29907;
    const double C30114 = C30111 + C30112;
    const double C29909 = C29904 + C29905;
    const double C30113 = C30109 + C30110;
    const double C25475 = C25456 + C25457;
    const double C25471 = C25448 + C25449;
    const double C25474 = C25454 + C25455;
    const double C25470 = C25446 + C25447;
    const double C25477 = C25460 + C25461;
    const double C25473 = C25452 + C25453;
    const double C25476 = C25458 + C25459;
    const double C25472 = C25450 + C25451;
    const double C26025 = C26014 + C26015;
    const double C26024 = C26012 + C26013;
    const double C34487 = C34476 + C34477;
    const double C34486 = C34474 + C34475;
    const double C14414 = C14412 + C14410;
    const double C10351 = C10350 + C10347;
    const double C14413 = C14411 + C14402;
    const double C16865 = C16864 + C16860;
    const double C47347 = C47341 / C47184;
    const double C47346 = C47263 * C47341;
    const double C41169 = C41167 + C41164;
    const double C41168 = C41166 + C41160;
    const double C888 =
        (2 * C47456 + be * C47457 + C47424 * C47476 + ae * C47423 * C47576 +
         C47423 * (ae * C47576 + C47423 * C47504)) /
        C47183;
    const double C136 = (4 * (2 * C47565 + C47424 * C47570 + C47805 * be) +
                         C47424 * (3 * C47570 + C47424 * C47576 + C47814 * be) +
                         (3 * C47805 + C47424 * C47814) * be) /
                        C47178;
    const double C243 =
        (C47554 * (3 * C47570 + C47424 * C47576 + C47814 * be)) / C47178;
    const double C351 =
        (C47423 * (3 * C47570 + C47424 * C47576 + C47814 * be)) / C47178;
    const double C525 =
        (2 * C47565 + C47424 * C47570 + C47805 * be + C47576 * C47603) / C47178;
    const double C627 = (C47423 * C47554 * C47576) / C47178;
    const double C878 =
        (2 * C47565 + C47424 * C47570 + C47805 * be + C47576 * C47647) / C47178;
    const double C18137 =
        (5 * (3 * C48064 + C47423 * C48119 + C48063 * ae) +
         C47423 * (4 * C48119 +
                   C47423 * (3 * C48114 +
                             C47423 * (2 * C48106 +
                                       C47423 * (C47469 +
                                                 C47423 * (C47423 * C47493 +
                                                           C47535 * ae) +
                                                 C47423 * C47535 * ae) +
                                       C48108 * ae) +
                             C48113 * ae) +
                   C48117 * ae) +
         (4 * C48063 + C47423 * C48117) * ae) /
        C47178;
    const double C47595 = C47424 * C47594;
    const double C47629 = C47554 * C47594;
    const double C1380 =
        (ae * (C47576 + C47594 * C47603) +
         C47423 * (C47504 + (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                C47603)) /
        C47183;
    const double C2709 =
        (2 * (ae * C47576 + C47423 * C47504) +
         ae * (C47576 + C47594 * std::pow(C47423, 2)) +
         C47423 *
             (C47504 + ae * C47423 * C47594 +
              C47423 *
                  (ae * C47594 +
                   C47423 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C1165 =
        (2 * C47554 * C47576 + C47554 * (C47576 + C47594 * C47603)) / C47178;
    const double C1375 = (C47423 * (C47576 + C47594 * C47603)) / C47178;
    const double C2704 =
        (2 * C47423 * C47576 + C47423 * (C47576 + C47594 * C47647)) / C47178;
    const double C11588 = C11196 - C11197;
    const double C11586 = C11192 - C11193;
    const double C11584 = C11188 - C11189;
    const double C11582 = C11184 - C11185;
    const double C13030 = C11751 - C11750;
    const double C13251 = C11750 - C11751;
    const double C13028 = C11747 - C11746;
    const double C13249 = C11746 - C11747;
    const double C13239 = C11742 - C11743;
    const double C13235 = C11743 - C11742;
    const double C13237 = C11738 - C11739;
    const double C13233 = C11739 - C11738;
    const double C19238 = C13245 - C13246;
    const double C19234 = C13246 - C13245;
    const double C19236 = C13241 - C13242;
    const double C19232 = C13242 - C13241;
    const double C19788 = C13806 - C13805;
    const double C19786 = C13802 - C13801;
    const double C20892 = C19795 - C19794;
    const double C20890 = C19791 - C19790;
    const double C47229 = C47226 - C47221;
    const double C7645 = C47226 + (C47212 * ae) / C47178;
    const double C47228 = C47225 + C48551;
    const double C1671 = C1669 + C1655;
    const double C1670 = C1668 + C1652;
    const double C6994 = C6990 + C6986;
    const double C6992 = C6988 + C6980;
    const double C6993 = C6989 + C6983;
    const double C6991 = C6987 + C6977;
    const double C3620 = C3618 + C3604;
    const double C3619 = C3617 + C3601;
    const double C23799 = C23795 * C48329;
    const double C23798 = C23794 * C118;
    const double C23797 = C23793 * C48329;
    const double C29903 = C23793 * C48574;
    const double C32650 = C23793 * C30746;
    const double C23796 = C23792 * C118;
    const double C29902 = C23792 * C4868;
    const double C32649 = C23792 * C30748;
    const double C29912 = C29910 * C48416;
    const double C32652 = C29910 * C48416;
    const double C29911 = C29909 * C4869;
    const double C32651 = C29909 * C30749;
    const double C10352 = C10351 + C10348;
    const double C16866 = C16865 + C16861;
    const double C47352 = C47347 - C47348;
    const double C47351 = C47346 + C48574;
    const double C41171 = C41169 + C41165;
    const double C41170 = C41168 + C41161;
    const double C2758 = C48593 * C888;
    const double C5894 = C48610 * C888;
    const double C15360 = C48593 * C888;
    const double C31774 = C48610 * C888;
    const double C36509 = C26137 * C888;
    const double C3882 = C48610 * C243;
    const double C22247 = C48610 * C243;
    const double C5154 = C48610 * C351;
    const double C31034 = C48610 * C351;
    const double C1213 = C48593 * C525;
    const double C4256 = C48610 * C525;
    const double C7835 = C48593 * C525;
    const double C22621 = C48610 * C525;
    const double C26332 = C26137 * C525;
    const double C4402 = C48610 * C627;
    const double C6240 = C48593 * C627;
    const double C22767 = C48610 * C627;
    const double C27683 = C26137 * C627;
    const double C39283 = C48593 * C627;
    const double C2752 = C48593 * C878;
    const double C5886 = C48610 * C878;
    const double C15354 = C48593 * C878;
    const double C31766 = C48610 * C878;
    const double C36503 = C26137 * C878;
    const double C47596 = C47578 + C47595;
    const double C2547 =
        (C47554 * C47504 + ae * C47423 * C47629 +
         C47423 * (ae * C47629 +
                   C47423 * C47554 *
                       (2 * C47496 + be * C47497 +
                        C47424 * (C47492 + be * C47424 * C47493 +
                                  C47424 * (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C2545 = (C47554 * C47576 + C47629 * C47647) / C47178;
    const double C11601 = C11588 + C11589;
    const double C11600 = C11586 + C11587;
    const double C11599 = C11584 + C11585;
    const double C11598 = C11582 + C11583;
    const double C13034 = C13030 + C13031;
    const double C13266 = C13251 + C13252;
    const double C13033 = C13028 + C13029;
    const double C13265 = C13249 + C13250;
    const double C13264 = C13239 + C13240;
    const double C13262 = C13235 + C13236;
    const double C13263 = C13237 + C13238;
    const double C13261 = C13233 + C13234;
    const double C19251 = C19238 + C19239;
    const double C19249 = C19234 + C19235;
    const double C19250 = C19236 + C19237;
    const double C19248 = C19232 + C19233;
    const double C19799 = C19788 + C19789;
    const double C19798 = C19786 + C19787;
    const double C20903 = C20892 + C20893;
    const double C20902 = C20890 + C20891;
    const double C26335 = C47229 * C529;
    const double C26329 = C47229 * C519;
    const double C26323 = C47229 * C246;
    const double C26317 = C47229 * C235;
    const double C26312 = C47229 * C528;
    const double C26306 = C47229 * C518;
    const double C26300 = C47229 * C245;
    const double C26294 = C47229 * C234;
    const double C26755 = C47229 * C1163;
    const double C26749 = C47229 * C1156;
    const double C26932 = C47229 * C1373;
    const double C26926 = C47229 * C1366;
    const double C26920 = C47229 * C630;
    const double C26914 = C47229 * C620;
    const double C27686 = C47229 * C631;
    const double C27680 = C47229 * C621;
    const double C27904 = C47229 * C354;
    const double C27898 = C47229 * C343;
    const double C27893 = C47229 * C353;
    const double C27887 = C47229 * C342;
    const double C28462 = C47229 * C2268;
    const double C28456 = C47229 * C2259;
    const double C29016 = C47229 * C881;
    const double C29010 = C47229 * C871;
    const double C36506 = C47229 * C882;
    const double C36500 = C47229 * C872;
    const double C37328 = C47229 * C2702;
    const double C37322 = C47229 * C2695;
    const double C116 =
        (C47229 / C47184 + ((C47176 * C47239 + C26137) * ae) / C47178) /
            C47184 -
        ((C47176 * (C47239 / C47184 + (0 * ae) / C47178) + C48610) * be) /
            C47178;
    const double C3726 =
        C47229 / C47184 - ((C47176 * C47239 + C26137) * be) / C47178;
    const double C22091 =
        C47229 / C47184 + ((C47176 * C47239 + C26137) * ae) / C47178;
    const double C7838 = C7645 * C529;
    const double C7832 = C7645 * C519;
    const double C7826 = C7645 * C246;
    const double C7820 = C7645 * C235;
    const double C7815 = C7645 * C528;
    const double C7809 = C7645 * C518;
    const double C7803 = C7645 * C245;
    const double C7797 = C7645 * C234;
    const double C8258 = C7645 * C1163;
    const double C8252 = C7645 * C1156;
    const double C8435 = C7645 * C1373;
    const double C8429 = C7645 * C1366;
    const double C8423 = C7645 * C630;
    const double C8417 = C7645 * C620;
    const double C15357 = C7645 * C882;
    const double C15351 = C7645 * C872;
    const double C15345 = C7645 * C354;
    const double C15339 = C7645 * C343;
    const double C15334 = C7645 * C881;
    const double C15328 = C7645 * C871;
    const double C15322 = C7645 * C353;
    const double C15316 = C7645 * C342;
    const double C15771 = C7645 * C2268;
    const double C15765 = C7645 * C2259;
    const double C16191 = C7645 * C2702;
    const double C16185 = C7645 * C2695;
    const double C39286 = C7645 * C631;
    const double C39280 = C7645 * C621;
    const double C47230 = C47228 * be;
    const double C7644 = C47215 + (C47228 * ae) / C47178 + C47204;
    const double C1673 = C1671 * C48329;
    const double C1672 = C1670 * C118;
    const double C23801 = C23798 + C23799;
    const double C23800 = C23796 + C23797;
    const double C29908 = C29902 + C29903;
    const double C32653 = C32649 + C32650;
    const double C10353 = C10352 + C10349;
    const double C16867 = C16866 + C16862;
    const double C46605 = C10337 * C47352;
    const double C17485 =
        (C47352 / C47184 + ((C47263 * C47366 + C36201) * ae) / C47178) /
            C47184 -
        ((C47263 * (C47366 / C47184 + (0 * ae) / C47178) + C48622) * be) /
            C47178;
    const double C19903 =
        C47352 / C47184 - ((C47263 * C47366 + C36201) * be) / C47178;
    const double C33487 =
        C47352 / C47184 + ((C47263 * C47366 + C36201) * ae) / C47178;
    const double C47355 = C47351 * be;
    const double C47597 = C47596 + C47584;
    const double C11605 = C11601 * C48329;
    const double C11604 = C11600 * C118;
    const double C11603 = C11599 * C48329;
    const double C13027 = C11599 * C48574;
    const double C43609 = C11599 * C30746;
    const double C11602 = C11598 * C118;
    const double C13026 = C11598 * C4868;
    const double C43608 = C11598 * C30748;
    const double C13036 = C13034 * C48416;
    const double C43611 = C13034 * C48416;
    const double C13035 = C13033 * C4869;
    const double C43610 = C13033 * C30749;
    const double C26745 = C26311 - C26312;
    const double C26742 = C26305 - C26306;
    const double C28452 = C26920 - C26921;
    const double C28446 = C26921 - C26920;
    const double C28449 = C26914 - C26915;
    const double C28443 = C26915 - C26914;
    const double C37318 = C29017 - C29016;
    const double C37315 = C29011 - C29010;
    const double C3887 = C3726 * C247;
    const double C3879 = C3726 * C236;
    const double C3872 = C3726 * C246;
    const double C3864 = C3726 * C235;
    const double C4261 = C3726 * C529;
    const double C4253 = C3726 * C519;
    const double C4407 = C3726 * C631;
    const double C4399 = C3726 * C621;
    const double C5159 = C3726 * C355;
    const double C5151 = C3726 * C344;
    const double C5144 = C3726 * C354;
    const double C5136 = C3726 * C343;
    const double C5891 = C3726 * C882;
    const double C5883 = C3726 * C872;
    const double C22252 = C22091 * C247;
    const double C22244 = C22091 * C236;
    const double C22237 = C22091 * C246;
    const double C22229 = C22091 * C235;
    const double C22626 = C22091 * C529;
    const double C22618 = C22091 * C519;
    const double C22772 = C22091 * C631;
    const double C22764 = C22091 * C621;
    const double C31039 = C22091 * C355;
    const double C31031 = C22091 * C344;
    const double C31024 = C22091 * C354;
    const double C31016 = C22091 * C343;
    const double C31771 = C22091 * C882;
    const double C31763 = C22091 * C872;
    const double C8248 = C7814 - C7815;
    const double C8245 = C7808 - C7809;
    const double C40028 = C8423 - C8424;
    const double C40022 = C8424 - C8423;
    const double C40025 = C8417 - C8418;
    const double C40019 = C8418 - C8417;
    const double C16181 = C15333 - C15334;
    const double C16178 = C15327 - C15328;
    const double C47231 = C47230 / C47178;
    const double C7836 = C7644 * C528;
    const double C7830 = C7644 * C518;
    const double C7824 = C7644 * C245;
    const double C7818 = C7644 * C234;
    const double C7813 = C7644 * C527;
    const double C7807 = C7644 * C517;
    const double C7801 = C7644 * C244;
    const double C7795 = C7644 * C233;
    const double C8256 = C7644 * C1162;
    const double C8250 = C7644 * C1155;
    const double C8433 = C7644 * C1372;
    const double C8427 = C7644 * C1365;
    const double C8421 = C7644 * C629;
    const double C8415 = C7644 * C619;
    const double C15355 = C7644 * C881;
    const double C15349 = C7644 * C871;
    const double C15343 = C7644 * C353;
    const double C15337 = C7644 * C342;
    const double C15332 = C7644 * C880;
    const double C15326 = C7644 * C870;
    const double C15320 = C7644 * C352;
    const double C15314 = C7644 * C341;
    const double C15769 = C7644 * C2267;
    const double C15763 = C7644 * C2258;
    const double C16189 = C7644 * C2701;
    const double C16183 = C7644 * C2694;
    const double C39284 = C7644 * C630;
    const double C39278 = C7644 * C620;
    const double C1674 = C1672 + C1673;
    const double C29913 = C29908 + C29911;
    const double C32654 = C32653 + C32651;
    const double C47357 = C47355 / C47178;
    const double C889 =
        (3 * C47476 + be * C47477 + C47424 * C47504 + ae * C47423 * C47597 +
         C47423 *
             (ae * C47597 +
              C47423 *
                  (3 * C47500 + be * C47501 +
                   C47424 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C138 = (5 * (3 * C47570 + C47424 * C47576 + C47814 * be) +
                         C47424 * (4 * C47576 + C47424 * C47597 + C47819 * be) +
                         (4 * C47814 + C47424 * C47819) * be) /
                        C47178;
    const double C249 =
        (C47554 * (4 * C47576 + C47424 * C47597 + C47819 * be)) / C47178;
    const double C357 =
        (C47423 * (4 * C47576 + C47424 * C47597 + C47819 * be)) / C47178;
    const double C526 =
        (3 * C47570 + C47424 * C47576 + C47814 * be + C47597 * C47603) / C47178;
    const double C628 = (C47423 * C47554 * C47597) / C47178;
    const double C879 =
        (3 * C47570 + C47424 * C47576 + C47814 * be + C47597 * C47647) / C47178;
    const double C11607 = C11604 + C11605;
    const double C11606 = C11602 + C11603;
    const double C13032 = C13026 + C13027;
    const double C43612 = C43608 + C43609;
    const double C47232 = C47215 - C47231;
    const double C8247 = C7812 - C7813;
    const double C8244 = C7806 - C7807;
    const double C40027 = C8421 - C8422;
    const double C40021 = C8422 - C8421;
    const double C40024 = C8415 - C8416;
    const double C40018 = C8416 - C8415;
    const double C16180 = C15331 - C15332;
    const double C16177 = C15325 - C15326;
    const double C29914 = C29913 + C29912;
    const double C32655 = C32654 + C32652;
    const double C47359 = C47345 - C47357;
    const double C13037 = C13032 + C13035;
    const double C43613 = C43612 + C43610;
    const double C47233 = C47232 + C47204;
    const double C8263 = C8247 + C8248;
    const double C8262 = C8244 + C8245;
    const double C40033 = C40027 + C40028;
    const double C40031 = C40021 + C40022;
    const double C40032 = C40024 + C40025;
    const double C40030 = C40018 + C40019;
    const double C16196 = C16180 + C16181;
    const double C16195 = C16177 + C16178;
    const double C47360 = C47359 + C47330;
    const double C13038 = C13037 + C13036;
    const double C43614 = C43613 + C43611;
    const double C26333 = C47233 * C528;
    const double C26327 = C47233 * C518;
    const double C26321 = C47233 * C245;
    const double C26315 = C47233 * C234;
    const double C26310 = C47233 * C527;
    const double C26304 = C47233 * C517;
    const double C26298 = C47233 * C244;
    const double C26292 = C47233 * C233;
    const double C26753 = C47233 * C1162;
    const double C26747 = C47233 * C1155;
    const double C26930 = C47233 * C1372;
    const double C26924 = C47233 * C1365;
    const double C26918 = C47233 * C629;
    const double C26912 = C47233 * C619;
    const double C27684 = C47233 * C630;
    const double C27678 = C47233 * C620;
    const double C27902 = C47233 * C353;
    const double C27896 = C47233 * C342;
    const double C27891 = C47233 * C352;
    const double C27885 = C47233 * C341;
    const double C28460 = C47233 * C2267;
    const double C28454 = C47233 * C2258;
    const double C29014 = C47233 * C880;
    const double C29008 = C47233 * C870;
    const double C36504 = C47233 * C881;
    const double C36498 = C47233 * C871;
    const double C37326 = C47233 * C2701;
    const double C37320 = C47233 * C2694;
    const double C113 =
        (((((0 - (C47176 * C47177) / C47178) * ae) / C47178 -
           (0 * be) / C47190 + (2 * C47179) / C47178) /
              C47184 -
          ((C47176 * C47213 + 0) * be) / C47178 + C47196 - C47206) /
             C47184 +
         ((C47176 * C47227 + 0) * ae) / C47178) /
            C47184 -
        ((C47176 * (C47227 / C47184 +
                    ((C47176 * C47233 + C48217) * ae) / C47178 + C47229) +
          C48647) *
         be) /
            C47178 +
        C47233 / C47184 + ((C47176 * C47229 + C48225) * ae) / C47178 +
        2 * (C47204 / C47184 - (0 * be) / C47178);
    const double C114 =
        (C47227 / C47184 + ((C47176 * C47233 + C48217) * ae) / C47178 +
         C47229) /
            C47184 -
        ((C47176 * (C47233 / C47184 +
                    ((C47176 * C47229 + C48225) * ae) / C47178 + 2 * C47239) +
          C48640) *
         be) /
            C47178 +
        2 * (C47229 / C47184 + ((C47176 * C47239 + C26137) * ae) / C47178);
    const double C115 =
        (C47233 / C47184 + ((C47176 * C47229 + C48225) * ae) / C47178 +
         2 * C47239) /
            C47184 -
        ((C47176 *
              (C47229 / C47184 + ((C47176 * C47239 + C26137) * ae) / C47178) +
          C48627) *
         be) /
            C47178 +
        3 * (C47239 / C47184 + (0 * ae) / C47178);
    const double C3724 =
        C47227 / C47184 - ((C47176 * C47233 + C48217) * be) / C47178 + C47229;
    const double C3725 = C47233 / C47184 -
                         ((C47176 * C47229 + C48225) * be) / C47178 +
                         2 * C47239;
    const double C22089 =
        C47227 / C47184 + ((C47176 * C47233 + C48217) * ae) / C47178 + C47229;
    const double C22090 = C47233 / C47184 +
                          ((C47176 * C47229 + C48225) * ae) / C47178 +
                          2 * C47239;
    const double C8265 = C8263 + C8249;
    const double C8264 = C8262 + C8246;
    const double C40037 = C40033 + C40029;
    const double C40035 = C40031 + C40023;
    const double C40036 = C40032 + C40026;
    const double C40034 = C40030 + C40020;
    const double C16198 = C16196 + C16182;
    const double C16197 = C16195 + C16179;
    const double C46603 = C9270 * C47360;
    const double C17482 =
        (((((0 - (C47263 * C47313) / C47178) * ae) / C47178 -
           (0 * be) / C47190 + (2 * C47314) / C47178) /
              C47184 -
          ((C47263 * C47349 + 0) * be) / C47178 + C47323 - C47336) /
             C47184 +
         ((C47263 * C47358 + 0) * ae) / C47178) /
            C47184 -
        ((C47263 * (C47358 / C47184 +
                    ((C47263 * C47360 + C48412) * ae) / C47178 + C47352) +
          C48649) *
         be) /
            C47178 +
        C47360 / C47184 + ((C47263 * C47352 + C48419) * ae) / C47178 +
        2 * (C47330 / C47184 - (0 * be) / C47178);
    const double C17483 =
        (C47358 / C47184 + ((C47263 * C47360 + C48412) * ae) / C47178 +
         C47352) /
            C47184 -
        ((C47263 * (C47360 / C47184 +
                    ((C47263 * C47352 + C48419) * ae) / C47178 + 2 * C47366) +
          C48646) *
         be) /
            C47178 +
        2 * (C47352 / C47184 + ((C47263 * C47366 + C36201) * ae) / C47178);
    const double C17484 =
        (C47360 / C47184 + ((C47263 * C47352 + C48419) * ae) / C47178 +
         2 * C47366) /
            C47184 -
        ((C47263 *
              (C47352 / C47184 + ((C47263 * C47366 + C36201) * ae) / C47178) +
          C48637) *
         be) /
            C47178 +
        3 * (C47366 / C47184 + (0 * ae) / C47178);
    const double C19901 =
        C47358 / C47184 - ((C47263 * C47360 + C48412) * be) / C47178 + C47352;
    const double C19902 = C47360 / C47184 -
                          ((C47263 * C47352 + C48419) * be) / C47178 +
                          2 * C47366;
    const double C33485 =
        C47358 / C47184 + ((C47263 * C47360 + C48412) * ae) / C47178 + C47352;
    const double C33486 = C47360 / C47184 +
                          ((C47263 * C47352 + C48419) * ae) / C47178 +
                          2 * C47366;
    const double C26744 = C26309 - C26310;
    const double C26741 = C26303 - C26304;
    const double C28451 = C26918 - C26919;
    const double C28445 = C26919 - C26918;
    const double C28448 = C26912 - C26913;
    const double C28442 = C26913 - C26912;
    const double C37317 = C29015 - C29014;
    const double C37314 = C29009 - C29008;
    const double C3883 = C3724 * C245;
    const double C3875 = C3724 * C234;
    const double C3868 = C3724 * C244;
    const double C3860 = C3724 * C233;
    const double C4257 = C3724 * C527;
    const double C4249 = C3724 * C517;
    const double C4403 = C3724 * C629;
    const double C4395 = C3724 * C619;
    const double C5155 = C3724 * C353;
    const double C5147 = C3724 * C342;
    const double C5140 = C3724 * C352;
    const double C5132 = C3724 * C341;
    const double C5887 = C3724 * C880;
    const double C5879 = C3724 * C870;
    const double C3885 = C3725 * C246;
    const double C3877 = C3725 * C235;
    const double C3870 = C3725 * C245;
    const double C3862 = C3725 * C234;
    const double C4259 = C3725 * C528;
    const double C4251 = C3725 * C518;
    const double C4405 = C3725 * C630;
    const double C4397 = C3725 * C620;
    const double C5157 = C3725 * C354;
    const double C5149 = C3725 * C343;
    const double C5142 = C3725 * C353;
    const double C5134 = C3725 * C342;
    const double C5889 = C3725 * C881;
    const double C5881 = C3725 * C871;
    const double C22248 = C22089 * C245;
    const double C22240 = C22089 * C234;
    const double C22233 = C22089 * C244;
    const double C22225 = C22089 * C233;
    const double C22622 = C22089 * C527;
    const double C22614 = C22089 * C517;
    const double C22768 = C22089 * C629;
    const double C22760 = C22089 * C619;
    const double C31035 = C22089 * C353;
    const double C31027 = C22089 * C342;
    const double C31020 = C22089 * C352;
    const double C31012 = C22089 * C341;
    const double C31767 = C22089 * C880;
    const double C31759 = C22089 * C870;
    const double C22250 = C22090 * C246;
    const double C22242 = C22090 * C235;
    const double C22235 = C22090 * C245;
    const double C22227 = C22090 * C234;
    const double C22624 = C22090 * C528;
    const double C22616 = C22090 * C518;
    const double C22770 = C22090 * C630;
    const double C22762 = C22090 * C620;
    const double C31037 = C22090 * C354;
    const double C31029 = C22090 * C343;
    const double C31022 = C22090 * C353;
    const double C31014 = C22090 * C342;
    const double C31769 = C22090 * C881;
    const double C31761 = C22090 * C871;
    const double C8267 = C8265 * C48329;
    const double C8266 = C8264 * C118;
    const double C46609 = C46603 + C46604;
    const double C26760 = C26744 + C26745;
    const double C26759 = C26741 + C26742;
    const double C28469 = C28451 + C28452;
    const double C28467 = C28445 + C28446;
    const double C28468 = C28448 + C28449;
    const double C28466 = C28442 + C28443;
    const double C37333 = C37317 + C37318;
    const double C37332 = C37314 + C37315;
    const double C8268 = C8266 + C8267;
    const double C46610 = C46609 + C46605;
    const double C26762 = C26760 + C26746;
    const double C26761 = C26759 + C26743;
    const double C28473 = C28469 + C28453;
    const double C28471 = C28467 + C28447;
    const double C28472 = C28468 + C28450;
    const double C28470 = C28466 + C28444;
    const double C37335 = C37333 + C37319;
    const double C37334 = C37332 + C37316;
    const double C46611 = C46610 + C46606;
    const double C26764 = C26762 * C48329;
    const double C26763 = C26761 * C118;
    const double C46612 = C46611 + C46607;
    const double C26765 = C26763 + C26764;
    const double C46613 = C46612 + C46608;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C48217 * C126 - C47233 * C119 + C48225 * C127 -
                    C47229 * C120 + C26137 * C128 - C47239 * C121) *
                       C118 +
                   (C48217 * C140 - C47233 * C131 + C48225 * C141 -
                    C47229 * C132 + C26137 * C142 - C47239 * C133) *
                       C48329) *
                      C48372 +
                  ((C48217 * C239 - C47233 * C233 + C48225 * C240 -
                    C47229 * C234 + C26137 * C241 - C47239 * C235) *
                       C118 +
                   (C48217 * C251 - C47233 * C244 + C48225 * C252 -
                    C47229 * C245 + C26137 * C253 - C47239 * C246) *
                       C48329) *
                      C48379 +
                  ((C48217 * C522 - C47233 * C517 + C48225 * C523 -
                    C47229 * C518 + C26137 * C524 - C47239 * C519) *
                       C118 +
                   (C48217 * C532 - C47233 * C527 + C48225 * C533 -
                    C47229 * C528 + C26137 * C534 - C47239 * C529) *
                       C48329) *
                      C26140) *
                     C48300 * C48283 * C110 +
                 (((C47233 * C120 - C48217 * C127 + C47229 * C121 -
                    C48225 * C128 + C47239 * C122 - C26137 * C129) *
                       C118 +
                   (C47233 * C132 - C48217 * C141 + C47229 * C133 -
                    C48225 * C142 + C47239 * C134 - C26137 * C143) *
                       C48329) *
                      C48372 +
                  ((C47233 * C234 - C48217 * C240 + C47229 * C235 -
                    C48225 * C241 + C47239 * C236 - C26137 * C242) *
                       C118 +
                   (C47233 * C245 - C48217 * C252 + C47229 * C246 -
                    C48225 * C253 + C47239 * C247 - C26137 * C254) *
                       C48329) *
                      C48379 +
                  ((C47233 * C518 - C48217 * C523 + C47229 * C519 -
                    C48225 * C524 + C47239 * C520 - C26137 * C525) *
                       C118 +
                   (C47233 * C528 - C48217 * C533 + C47229 * C529 -
                    C48225 * C534 + C47239 * C530 - C26137 * C535) *
                       C48329) *
                      C26140) *
                     C48300 * C48283 * C111 +
                 (((C48217 * C128 - C47233 * C121 + C48225 * C129 -
                    C47229 * C122 + C26137 * C130 - C47239 * C123) *
                       C118 +
                   (C48217 * C142 - C47233 * C133 + C48225 * C143 -
                    C47229 * C134 + C26137 * C144 - C47239 * C135) *
                       C48329) *
                      C48372 +
                  ((C48217 * C241 - C47233 * C235 + C48225 * C242 -
                    C47229 * C236 + C26137 * C243 - C47239 * C237) *
                       C118 +
                   (C48217 * C253 - C47233 * C246 + C48225 * C254 -
                    C47229 * C247 + C26137 * C255 - C47239 * C248) *
                       C48329) *
                      C48379 +
                  ((C48217 * C524 - C47233 * C519 + C48225 * C525 -
                    C47229 * C520 + C26137 * C526 - C47239 * C521) *
                       C118 +
                   (C48217 * C534 - C47233 * C529 + C48225 * C535 -
                    C47229 * C530 + C26137 * C536 - C47239 * C531) *
                       C48329) *
                      C26140) *
                     C48300 * C48283 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C118 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48329) *
                C48372 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
                C48379 +
            ((C26303 - C26304 + C26305 - C26306 + C26307 - C26308) * C118 +
             (C26309 - C26310 + C26311 - C26312 + C26313 - C26314) * C48329) *
                C26140) *
               C48300 * C229 +
           (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C118 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48329) *
                C48372 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C118 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48329) *
                C48379 +
            ((C47233 * C1155 - C48217 * C1159 + C47229 * C1156 -
              C48225 * C1160 + C47239 * C1157 - C26137 * C1161) *
                 C118 +
             (C47233 * C1162 - C48217 * C1167 + C47229 * C1163 -
              C48225 * C1168 + C47239 * C1164 - C26137 * C1169) *
                 C48329) *
                C26140) *
               C48300 * C48601) *
              C231 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C118 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48329) *
                C48372 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C118 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48329) *
                C48379 +
            ((C26327 - C26328 + C26329 - C26330 + C26331 - C26332) * C118 +
             (C26333 - C26334 + C26335 - C26336 + C26337 - C26338) * C48329) *
                C26140) *
               C48300 * C229 +
           (((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C118 +
             (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C48329) *
                C48372 +
            ((C26328 - C26327 + C26330 - C26329 + C26332 - C26331) * C118 +
             (C26334 - C26333 + C26336 - C26335 + C26338 - C26337) * C48329) *
                C48379 +
            ((C48217 * C1160 - C47233 * C1156 + C48225 * C1161 -
              C47229 * C1157 + C26137 * C1165 - C47239 * C1158) *
                 C118 +
             (C48217 * C1168 - C47233 * C1163 + C48225 * C1169 -
              C47229 * C1164 + C26137 * C1170 - C47239 * C1166) *
                 C48329) *
                C26140) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C118 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48329) *
                C48372 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
                C48379 +
            ((C26303 - C26304 + C26305 - C26306 + C26307 - C26308) * C118 +
             (C26309 - C26310 + C26311 - C26312 + C26313 - C26314) * C48329) *
                C26140) *
               C339 +
           (((C47233 * C341 - C48217 * C347 + C47229 * C342 - C48225 * C348 +
              C47239 * C343 - C26137 * C349) *
                 C118 +
             (C47233 * C352 - C48217 * C359 + C47229 * C353 - C48225 * C360 +
              C47239 * C354 - C26137 * C361) *
                 C48329) *
                C48372 +
            ((C47233 * C619 - C48217 * C624 + C47229 * C620 - C48225 * C625 +
              C47239 * C621 - C26137 * C626) *
                 C118 +
             (C47233 * C629 - C48217 * C634 + C47229 * C630 - C48225 * C635 +
              C47239 * C631 - C26137 * C636) *
                 C48329) *
                C48379 +
            ((C47233 * C1365 - C48217 * C1369 + C47229 * C1366 -
              C48225 * C1370 + C47239 * C1367 - C26137 * C1371) *
                 C118 +
             (C47233 * C1372 - C48217 * C1377 + C47229 * C1373 -
              C48225 * C1378 + C47239 * C1374 - C26137 * C1379) *
                 C48329) *
                C26140) *
               C48603) *
              C48283 * C231 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C118 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48329) *
                C48372 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C118 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48329) *
                C48379 +
            ((C26327 - C26328 + C26329 - C26330 + C26331 - C26332) * C118 +
             (C26333 - C26334 + C26335 - C26336 + C26337 - C26338) * C48329) *
                C26140) *
               C339 +
           (((C48217 * C348 - C47233 * C342 + C48225 * C349 - C47229 * C343 +
              C26137 * C350 - C47239 * C344) *
                 C118 +
             (C48217 * C360 - C47233 * C353 + C48225 * C361 - C47229 * C354 +
              C26137 * C362 - C47239 * C355) *
                 C48329) *
                C48372 +
            ((C48217 * C625 - C47233 * C620 + C48225 * C626 - C47229 * C621 +
              C26137 * C627 - C47239 * C622) *
                 C118 +
             (C48217 * C635 - C47233 * C630 + C48225 * C636 - C47229 * C631 +
              C26137 * C637 - C47239 * C632) *
                 C48329) *
                C48379 +
            ((C48217 * C1370 - C47233 * C1366 + C48225 * C1371 -
              C47229 * C1367 + C26137 * C1375 - C47239 * C1368) *
                 C118 +
             (C48217 * C1378 - C47233 * C1373 + C48225 * C1379 -
              C47229 * C1374 + C26137 * C1380 - C47239 * C1376) *
                 C48329) *
                C26140) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C118 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48329) *
                C48372 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
                C48379 +
            ((C26303 - C26304 + C26305 - C26306 + C26307 - C26308) * C118 +
             (C26309 - C26310 + C26311 - C26312 + C26313 - C26314) * C48329) *
                C26140) *
               C48300 * C447 +
           (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C118 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48329) *
                C48372 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C118 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48329) *
                C48379 +
            ((C47233 * C1155 - C48217 * C1159 + C47229 * C1156 -
              C48225 * C1160 + C47239 * C1157 - C26137 * C1161) *
                 C118 +
             (C47233 * C1162 - C48217 * C1167 + C47229 * C1163 -
              C48225 * C1168 + C47239 * C1164 - C26137 * C1169) *
                 C48329) *
                C26140) *
               C48300 * C48601) *
              C449 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C118 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48329) *
                C48372 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C118 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48329) *
                C48379 +
            ((C26327 - C26328 + C26329 - C26330 + C26331 - C26332) * C118 +
             (C26333 - C26334 + C26335 - C26336 + C26337 - C26338) * C48329) *
                C26140) *
               C48300 * C447 +
           (((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C118 +
             (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C48329) *
                C48372 +
            ((C26328 - C26327 + C26330 - C26329 + C26332 - C26331) * C118 +
             (C26334 - C26333 + C26336 - C26335 + C26338 - C26337) * C48329) *
                C48379 +
            ((C48217 * C1160 - C47233 * C1156 + C48225 * C1161 -
              C47229 * C1157 + C26137 * C1165 - C47239 * C1158) *
                 C118 +
             (C48217 * C1168 - C47233 * C1163 + C48225 * C1169 -
              C47229 * C1164 + C26137 * C1170 - C47239 * C1166) *
                 C48329) *
                C26140) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C118 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48329) *
               C48372 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
               C48379 +
           C26765 * C26140) *
              C48300 * C513 +
          (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C118 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48329) *
               C48372 +
           ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C118 +
            (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48329) *
               C48379 +
           ((C26747 - C26748 + C26749 - C26750 + C26751 - C26752) * C118 +
            (C26753 - C26754 + C26755 - C26756 + C26757 - C26758) * C48329) *
               C26140) *
              C48300 * C514 +
          (C26765 * C48372 +
           ((C26748 - C26747 + C26750 - C26749 + C26752 - C26751) * C118 +
            (C26754 - C26753 + C26756 - C26755 + C26758 - C26757) * C48329) *
               C48379 +
           ((C48217 * C1640 - C47233 * C1637 + C48225 * C1641 - C47229 * C1638 +
             C26137 * C1642 - C47239 * C1639) *
                C118 +
            (C48217 * C1646 - C47233 * C1643 + C48225 * C1647 - C47229 * C1644 +
             C26137 * C1648 - C47239 * C1645) *
                C48329) *
               C26140) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C118 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48329) *
                C48372 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
                C48379 +
            C26765 * C26140) *
               C339 +
           (((C47233 * C341 - C48217 * C347 + C47229 * C342 - C48225 * C348 +
              C47239 * C343 - C26137 * C349) *
                 C118 +
             (C47233 * C352 - C48217 * C359 + C47229 * C353 - C48225 * C360 +
              C47239 * C354 - C26137 * C361) *
                 C48329) *
                C48372 +
            ((C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C118 +
             (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48329) *
                C48379 +
            ((C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C118 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48329) *
                C26140) *
               C48603) *
              C447 +
          ((((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C118 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48329) *
                C48372 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C118 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48329) *
                C48379 +
            ((C26747 - C26748 + C26749 - C26750 + C26751 - C26752) * C118 +
             (C26753 - C26754 + C26755 - C26756 + C26757 - C26758) * C48329) *
                C26140) *
               C339 +
           (((C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C118 +
             (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48329) *
                C48372 +
            ((C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C118 +
             (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48329) *
                C48379 +
            ((C48217 * C1823 - C47233 * C1820 + C48225 * C1824 -
              C47229 * C1821 + C26137 * C1825 - C47239 * C1822) *
                 C118 +
             (C48217 * C1829 - C47233 * C1826 + C48225 * C1830 -
              C47229 * C1827 + C26137 * C1831 - C47239 * C1828) *
                 C48329) *
                C26140) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C118 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48329) *
                C48372 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
                C48379 +
            C26765 * C26140) *
               C721 +
           (((C47233 * C341 - C48217 * C347 + C47229 * C342 - C48225 * C348 +
              C47239 * C343 - C26137 * C349) *
                 C118 +
             (C47233 * C352 - C48217 * C359 + C47229 * C353 - C48225 * C360 +
              C47239 * C354 - C26137 * C361) *
                 C48329) *
                C48372 +
            ((C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C118 +
             (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48329) *
                C48379 +
            ((C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C118 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48329) *
                C26140) *
               C48603) *
              C48283 * C449 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C118 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48329) *
                C48372 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C118 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48329) *
                C48379 +
            ((C26327 - C26328 + C26329 - C26330 + C26331 - C26332) * C118 +
             (C26333 - C26334 + C26335 - C26336 + C26337 - C26338) * C48329) *
                C26140) *
               C721 +
           (((C48217 * C348 - C47233 * C342 + C48225 * C349 - C47229 * C343 +
              C26137 * C350 - C47239 * C344) *
                 C118 +
             (C48217 * C360 - C47233 * C353 + C48225 * C361 - C47229 * C354 +
              C26137 * C362 - C47239 * C355) *
                 C48329) *
                C48372 +
            ((C48217 * C625 - C47233 * C620 + C48225 * C626 - C47229 * C621 +
              C26137 * C627 - C47239 * C622) *
                 C118 +
             (C48217 * C635 - C47233 * C630 + C48225 * C636 - C47229 * C631 +
              C26137 * C637 - C47239 * C632) *
                 C48329) *
                C48379 +
            ((C48217 * C1370 - C47233 * C1366 + C48225 * C1371 -
              C47229 * C1367 + C26137 * C1375 - C47239 * C1368) *
                 C118 +
             (C48217 * C1378 - C47233 * C1373 + C48225 * C1379 -
              C47229 * C1374 + C26137 * C1380 - C47239 * C1376) *
                 C48329) *
                C26140) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C118 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48329) *
                C48372 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
                C48379 +
            C26765 * C26140) *
               C721 +
           (((C47233 * C341 - C48217 * C347 + C47229 * C342 - C48225 * C348 +
              C47239 * C343 - C26137 * C349) *
                 C118 +
             (C47233 * C352 - C48217 * C359 + C47229 * C353 - C48225 * C360 +
              C47239 * C354 - C26137 * C361) *
                 C48329) *
                C48372 +
            ((C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C118 +
             (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48329) *
                C48379 +
            ((C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C118 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48329) *
                C26140) *
               C48603) *
              C229 +
          ((((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C118 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48329) *
                C48372 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C118 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48329) *
                C48379 +
            ((C26747 - C26748 + C26749 - C26750 + C26751 - C26752) * C118 +
             (C26753 - C26754 + C26755 - C26756 + C26757 - C26758) * C48329) *
                C26140) *
               C721 +
           (((C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C118 +
             (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48329) *
                C48372 +
            ((C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C118 +
             (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48329) *
                C48379 +
            ((C48217 * C1823 - C47233 * C1820 + C48225 * C1824 -
              C47229 * C1821 + C26137 * C1825 - C47239 * C1822) *
                 C118 +
             (C48217 * C1829 - C47233 * C1826 + C48225 * C1830 -
              C47229 * C1827 + C26137 * C1831 - C47239 * C1828) *
                 C48329) *
                C26140) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C118 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48329) *
               C48372 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C118 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48329) *
               C48379 +
           C26765 * C26140) *
              C867 +
          (((C47233 * C341 - C48217 * C347 + C47229 * C342 - C48225 * C348 +
             C47239 * C343 - C26137 * C349) *
                C118 +
            (C47233 * C352 - C48217 * C359 + C47229 * C353 - C48225 * C360 +
             C47239 * C354 - C26137 * C361) *
                C48329) *
               C48372 +
           ((C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C118 +
            (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48329) *
               C48379 +
           ((C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C118 +
            (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48329) *
               C26140) *
              C868 +
          (((C48217 * C875 - C47233 * C870 + C48225 * C876 - C47229 * C871 +
             C26137 * C877 - C47239 * C872) *
                C118 +
            (C48217 * C885 - C47233 * C880 + C48225 * C886 - C47229 * C881 +
             C26137 * C887 - C47239 * C882) *
                C48329) *
               C48372 +
           ((C48217 * C2264 - C47233 * C2258 + C48225 * C2265 - C47229 * C2259 +
             C26137 * C2266 - C47239 * C2260) *
                C118 +
            (C48217 * C2276 - C47233 * C2267 + C48225 * C2277 - C47229 * C2268 +
             C26137 * C2278 - C47239 * C2269) *
                C48329) *
               C48379 +
           ((C48217 * C2270 - C47233 * C2261 + C48225 * C2271 - C47229 * C2262 +
             C26137 * C2272 - C47239 * C2263) *
                C118 +
            (C48217 * C2279 - C47233 * C2273 + C48225 * C2280 - C47229 * C2274 +
             C26137 * C2281 - C47239 * C2275) *
                C48329) *
               C26140) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C4868 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48574 +
            (C24872 - C24873 + C24874 - C24875) * C4869 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48372 +
           ((C23370 - C23371 + C23372 - C23373) * C4868 +
            (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
            C25471 * C48416) *
               C48379 +
           (C23792 * C4868 + C23793 * C48574 +
            (C23941 - C23940 + C23943 - C23942) * C4869 +
            (C23945 - C23944 + C23947 - C23946) * C48416) *
               C26140) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C4868 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48574 +
            (C24888 - C24889 + C24890 - C24891) * C4869 +
            (C24892 - C24893 + C24894 - C24895) * C48416) *
               C48372 +
           ((C23394 - C23395 + C23396 - C23397) * C4868 +
            (C23398 - C23399 + C23400 - C23401) * C48574 +
            (C24662 - C24663 + C24664 - C24665) * C4869 +
            (C24666 - C24667 + C24668 - C24669) * C48416) *
               C48379 +
           ((C23402 - C23403 + C23404 - C23405) * C4868 +
            (C23406 - C23407 + C23408 - C23409) * C48574 +
            (C23237 * C1366 - C23231 * C1370 + C23238 * C1367 -
             C48222 * C1371) *
                C4869 +
            (C23237 * C1373 - C23231 * C1378 + C23238 * C1374 -
             C48222 * C1379) *
                C48416) *
               C26140) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C4868 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C48574 +
            (C23231 * C349 - C23237 * C343 + C48222 * C350 - C23238 * C344) *
                C4869 +
            (C23231 * C361 - C23237 * C354 + C48222 * C362 - C23238 * C355) *
                C48416) *
               C48372 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C4868 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C48574 +
            (C23231 * C626 - C23237 * C621 + C48222 * C627 - C23238 * C622) *
                C4869 +
            (C23231 * C636 - C23237 * C631 + C48222 * C637 - C23238 * C632) *
                C48416) *
               C48379 +
           ((C23231 * C524 - C23237 * C519 + C48222 * C525 - C23238 * C520) *
                C4868 +
            (C23231 * C534 - C23237 * C529 + C48222 * C535 - C23238 * C530) *
                C48574 +
            (C23231 * C1371 - C23237 * C1367 + C48222 * C1375 -
             C23238 * C1368) *
                C4869 +
            (C23231 * C1379 - C23237 * C1374 + C48222 * C1380 -
             C23238 * C1376) *
                C48416) *
               C26140) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C4868 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48574 +
             (C24872 - C24873 + C24874 - C24875) * C4869 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48372 +
            ((C23370 - C23371 + C23372 - C23373) * C4868 +
             (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
             C25471 * C48416) *
                C48379 +
            (C23792 * C4868 + C23793 * C48574 +
             (C23941 - C23940 + C23943 - C23942) * C4869 +
             (C23945 - C23944 + C23947 - C23946) * C48416) *
                C26140) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C4868 +
             (C23375 - C23374 + C23377 - C23376) * C48574 + C25474 * C4869 +
             C25475 * C48416) *
                C48372 +
            ((C23379 - C23378 + C23381 - C23380) * C4868 +
             (C23383 - C23382 + C23385 - C23384) * C48574 +
             (C23940 - C23941 + C23942 - C23943) * C4869 +
             (C23944 - C23945 + C23946 - C23947) * C48416) *
                C48379 +
            ((C23387 - C23386 + C23389 - C23388) * C4868 +
             (C23391 - C23390 + C23393 - C23392) * C48574 +
             (C23948 - C23949 + C23950 - C23951) * C4869 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C26140) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C4868 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48574 +
             (C24888 - C24889 + C24890 - C24891) * C4869 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48372 +
            ((C23394 - C23395 + C23396 - C23397) * C4868 +
             (C23398 - C23399 + C23400 - C23401) * C48574 +
             (C24662 - C24663 + C24664 - C24665) * C4869 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48379 +
            ((C23402 - C23403 + C23404 - C23405) * C4868 +
             (C23406 - C23407 + C23408 - C23409) * C48574 +
             (C29360 - C29361 + C29362 - C29363) * C4869 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C26140) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C4868 +
             (C23399 - C23398 + C23401 - C23400) * C48574 +
             (C24663 - C24662 + C24665 - C24664) * C4869 +
             (C24667 - C24666 + C24669 - C24668) * C48416) *
                C48372 +
            ((C23403 - C23402 + C23405 - C23404) * C4868 +
             (C23407 - C23406 + C23409 - C23408) * C48574 +
             (C29361 - C29360 + C29363 - C29362) * C4869 +
             (C29365 - C29364 + C29367 - C29366) * C48416) *
                C48379 +
            ((C23411 - C23410 + C23413 - C23412) * C4868 +
             (C23415 - C23414 + C23417 - C23416) * C48574 +
             (C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C4869 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48416) *
                C26140) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C4868 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48574 +
             (C24872 - C24873 + C24874 - C24875) * C4869 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48372 +
            ((C23370 - C23371 + C23372 - C23373) * C4868 +
             (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
             C25471 * C48416) *
                C48379 +
            (C23792 * C4868 + C23793 * C48574 +
             (C23941 - C23940 + C23943 - C23942) * C4869 +
             (C23945 - C23944 + C23947 - C23946) * C48416) *
                C26140) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C4868 +
             (C24877 - C24876 + C24879 - C24878) * C48574 +
             (C24881 - C24880 + C24883 - C24882) * C4869 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48372 +
            (C25474 * C4868 + C25475 * C48574 + C25476 * C4869 +
             C25477 * C48416) *
                C48379 +
            ((C23940 - C23941 + C23942 - C23943) * C4868 +
             (C23944 - C23945 + C23946 - C23947) * C48574 +
             (C25244 - C25245 + C25246 - C25247) * C4869 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C26140) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C4868 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48574 +
             (C24888 - C24889 + C24890 - C24891) * C4869 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48372 +
            ((C23394 - C23395 + C23396 - C23397) * C4868 +
             (C23398 - C23399 + C23400 - C23401) * C48574 +
             (C24662 - C24663 + C24664 - C24665) * C4869 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48379 +
            ((C23402 - C23403 + C23404 - C23405) * C4868 +
             (C23406 - C23407 + C23408 - C23409) * C48574 +
             (C29360 - C29361 + C29362 - C29363) * C4869 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C26140) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C4868 +
             (C24893 - C24892 + C24895 - C24894) * C48574 +
             (C24897 - C24896 + C24899 - C24898) * C4869 +
             (C24901 - C24900 + C24903 - C24902) * C48416) *
                C48372 +
            ((C24663 - C24662 + C24665 - C24664) * C4868 +
             (C24667 - C24666 + C24669 - C24668) * C48574 +
             (C24671 - C24670 + C24673 - C24672) * C4869 +
             (C24675 - C24674 + C24677 - C24676) * C48416) *
                C48379 +
            ((C29361 - C29360 + C29363 - C29362) * C4868 +
             (C29365 - C29364 + C29367 - C29366) * C48574 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C4869 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48416) *
                C26140) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C4868 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48574 +
             (C24872 - C24873 + C24874 - C24875) * C4869 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48372 +
            ((C23370 - C23371 + C23372 - C23373) * C4868 +
             (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
             C25471 * C48416) *
                C48379 +
            (C23792 * C4868 + C23793 * C48574 +
             (C23941 - C23940 + C23943 - C23942) * C4869 +
             (C23945 - C23944 + C23947 - C23946) * C48416) *
                C26140) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C4868 +
             (C23375 - C23374 + C23377 - C23376) * C48574 + C25474 * C4869 +
             C25475 * C48416) *
                C48372 +
            ((C23379 - C23378 + C23381 - C23380) * C4868 +
             (C23383 - C23382 + C23385 - C23384) * C48574 +
             (C23940 - C23941 + C23942 - C23943) * C4869 +
             (C23944 - C23945 + C23946 - C23947) * C48416) *
                C48379 +
            ((C23387 - C23386 + C23389 - C23388) * C4868 +
             (C23391 - C23390 + C23393 - C23392) * C48574 +
             (C23948 - C23949 + C23950 - C23951) * C4869 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C26140) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C4868 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48574 +
             (C24888 - C24889 + C24890 - C24891) * C4869 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48372 +
            ((C23394 - C23395 + C23396 - C23397) * C4868 +
             (C23398 - C23399 + C23400 - C23401) * C48574 +
             (C24662 - C24663 + C24664 - C24665) * C4869 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48379 +
            ((C23402 - C23403 + C23404 - C23405) * C4868 +
             (C23406 - C23407 + C23408 - C23409) * C48574 +
             (C29360 - C29361 + C29362 - C29363) * C4869 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C26140) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C4868 +
             (C23399 - C23398 + C23401 - C23400) * C48574 +
             (C24663 - C24662 + C24665 - C24664) * C4869 +
             (C24667 - C24666 + C24669 - C24668) * C48416) *
                C48372 +
            ((C23403 - C23402 + C23405 - C23404) * C4868 +
             (C23407 - C23406 + C23409 - C23408) * C48574 +
             (C29361 - C29360 + C29363 - C29362) * C4869 +
             (C29365 - C29364 + C29367 - C29366) * C48416) *
                C48379 +
            ((C23411 - C23410 + C23413 - C23412) * C4868 +
             (C23415 - C23414 + C23417 - C23416) * C48574 +
             (C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C4869 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48416) *
                C26140) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C4868 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48574 +
            (C24872 - C24873 + C24874 - C24875) * C4869 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48372 +
           ((C23370 - C23371 + C23372 - C23373) * C4868 +
            (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
            C25471 * C48416) *
               C48379 +
           C29914 * C26140) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C4868 +
            (C23375 - C23374 + C23377 - C23376) * C48574 + C25474 * C4869 +
            C25475 * C48416) *
               C48372 +
           ((C23379 - C23378 + C23381 - C23380) * C4868 +
            (C23383 - C23382 + C23385 - C23384) * C48574 +
            (C23940 - C23941 + C23942 - C23943) * C4869 +
            (C23944 - C23945 + C23946 - C23947) * C48416) *
               C48379 +
           ((C23387 - C23386 + C23389 - C23388) * C4868 +
            (C23391 - C23390 + C23393 - C23392) * C48574 +
            (C23948 - C23949 + C23950 - C23951) * C4869 +
            (C23952 - C23953 + C23954 - C23955) * C48416) *
               C26140) *
              C48300 * C514 +
          (C29914 * C48372 +
           (C23794 * C4868 + C23795 * C48574 +
            (C23949 - C23948 + C23951 - C23950) * C4869 +
            (C23953 - C23952 + C23955 - C23954) * C48416) *
               C48379 +
           ((C23785 - C23784 + C23787 - C23786) * C4868 +
            (C23789 - C23788 + C23791 - C23790) * C48574 +
            (C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
             C23238 * C9114) *
                C4869 +
            (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
             C23238 * C9118) *
                C48416) *
               C26140) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C4868 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48574 +
             (C24872 - C24873 + C24874 - C24875) * C4869 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48372 +
            ((C23370 - C23371 + C23372 - C23373) * C4868 +
             (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
             C25471 * C48416) *
                C48379 +
            C29914 * C26140) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C4868 +
             (C24877 - C24876 + C24879 - C24878) * C48574 +
             (C24881 - C24880 + C24883 - C24882) * C4869 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48372 +
            (C25474 * C4868 + C25475 * C48574 + C25476 * C4869 +
             C25477 * C48416) *
                C48379 +
            (C30113 * C4868 + C30114 * C48574 +
             (C25244 - C25245 + C25246 - C25247) * C4869 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C26140) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C4868 +
             (C23375 - C23374 + C23377 - C23376) * C48574 + C25474 * C4869 +
             C25475 * C48416) *
                C48372 +
            ((C23379 - C23378 + C23381 - C23380) * C4868 +
             (C23383 - C23382 + C23385 - C23384) * C48574 + C30113 * C4869 +
             C30114 * C48416) *
                C48379 +
            ((C23387 - C23386 + C23389 - C23388) * C4868 +
             (C23391 - C23390 + C23393 - C23392) * C48574 +
             (C23948 - C23949 + C23950 - C23951) * C4869 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C26140) *
               C339 +
           ((C25470 * C4868 + C25471 * C48574 + C25472 * C4869 +
             C25473 * C48416) *
                C48372 +
            (C29909 * C4868 + C29910 * C48574 +
             (C25245 - C25244 + C25247 - C25246) * C4869 +
             (C25249 - C25248 + C25251 - C25250) * C48416) *
                C48379 +
            ((C23949 - C23948 + C23951 - C23950) * C4868 +
             (C23953 - C23952 + C23955 - C23954) * C48574 +
             (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
              C23238 * C9880) *
                 C4869 +
             (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
              C23238 * C9882) *
                 C48416) *
                C26140) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C4868 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48574 +
             (C24872 - C24873 + C24874 - C24875) * C4869 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48372 +
            ((C23370 - C23371 + C23372 - C23373) * C4868 +
             (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
             C25471 * C48416) *
                C48379 +
            C29914 * C26140) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C4868 +
             (C24877 - C24876 + C24879 - C24878) * C48574 +
             (C24881 - C24880 + C24883 - C24882) * C4869 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48372 +
            (C25474 * C4868 + C25475 * C48574 + C25476 * C4869 +
             C25477 * C48416) *
                C48379 +
            (C30113 * C4868 + C30114 * C48574 +
             (C25244 - C25245 + C25246 - C25247) * C4869 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C26140) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C4868 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48574 +
             (C24888 - C24889 + C24890 - C24891) * C4869 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48372 +
            ((C23394 - C23395 + C23396 - C23397) * C4868 +
             (C23398 - C23399 + C23400 - C23401) * C48574 +
             (C24662 - C24663 + C24664 - C24665) * C4869 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48379 +
            ((C23402 - C23403 + C23404 - C23405) * C4868 +
             (C23406 - C23407 + C23408 - C23409) * C48574 +
             (C29360 - C29361 + C29362 - C29363) * C4869 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C26140) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C4868 +
             (C24893 - C24892 + C24895 - C24894) * C48574 +
             (C24897 - C24896 + C24899 - C24898) * C4869 +
             (C24901 - C24900 + C24903 - C24902) * C48416) *
                C48372 +
            ((C24663 - C24662 + C24665 - C24664) * C4868 +
             (C24667 - C24666 + C24669 - C24668) * C48574 +
             (C24671 - C24670 + C24673 - C24672) * C4869 +
             (C24675 - C24674 + C24677 - C24676) * C48416) *
                C48379 +
            ((C29361 - C29360 + C29363 - C29362) * C4868 +
             (C29365 - C29364 + C29367 - C29366) * C48574 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C4869 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48416) *
                C26140) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C4868 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48574 +
             (C24872 - C24873 + C24874 - C24875) * C4869 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48372 +
            ((C23370 - C23371 + C23372 - C23373) * C4868 +
             (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
             C25471 * C48416) *
                C48379 +
            C29914 * C26140) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C4868 +
             (C24877 - C24876 + C24879 - C24878) * C48574 +
             (C24881 - C24880 + C24883 - C24882) * C4869 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48372 +
            (C25474 * C4868 + C25475 * C48574 + C25476 * C4869 +
             C25477 * C48416) *
                C48379 +
            (C30113 * C4868 + C30114 * C48574 +
             (C25244 - C25245 + C25246 - C25247) * C4869 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C26140) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C4868 +
             (C23375 - C23374 + C23377 - C23376) * C48574 + C25474 * C4869 +
             C25475 * C48416) *
                C48372 +
            ((C23379 - C23378 + C23381 - C23380) * C4868 +
             (C23383 - C23382 + C23385 - C23384) * C48574 + C30113 * C4869 +
             C30114 * C48416) *
                C48379 +
            ((C23387 - C23386 + C23389 - C23388) * C4868 +
             (C23391 - C23390 + C23393 - C23392) * C48574 +
             (C23948 - C23949 + C23950 - C23951) * C4869 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C26140) *
               C721 +
           ((C25470 * C4868 + C25471 * C48574 + C25472 * C4869 +
             C25473 * C48416) *
                C48372 +
            (C29909 * C4868 + C29910 * C48574 +
             (C25245 - C25244 + C25247 - C25246) * C4869 +
             (C25249 - C25248 + C25251 - C25250) * C48416) *
                C48379 +
            ((C23949 - C23948 + C23951 - C23950) * C4868 +
             (C23953 - C23952 + C23955 - C23954) * C48574 +
             (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
              C23238 * C9880) *
                 C4869 +
             (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
              C23238 * C9882) *
                 C48416) *
                C26140) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C4868 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48574 +
            (C24872 - C24873 + C24874 - C24875) * C4869 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48372 +
           ((C23370 - C23371 + C23372 - C23373) * C4868 +
            (C23374 - C23375 + C23376 - C23377) * C48574 + C25470 * C4869 +
            C25471 * C48416) *
               C48379 +
           C29914 * C26140) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C4868 +
            (C24877 - C24876 + C24879 - C24878) * C48574 +
            (C24881 - C24880 + C24883 - C24882) * C4869 +
            (C24885 - C24884 + C24887 - C24886) * C48416) *
               C48372 +
           (C25474 * C4868 + C25475 * C48574 + C25476 * C4869 +
            C25477 * C48416) *
               C48379 +
           (C30113 * C4868 + C30114 * C48574 +
            (C25244 - C25245 + C25246 - C25247) * C4869 +
            (C25248 - C25249 + C25250 - C25251) * C48416) *
               C26140) *
              C868 +
          ((C26024 * C4868 + C26025 * C48574 +
            (C26017 - C26016 + C26019 - C26018) * C4869 +
            (C26021 - C26020 + C26023 - C26022) * C48416) *
               C48372 +
           (C25472 * C4868 + C25473 * C48574 +
            (C25463 - C25462 + C25465 - C25464) * C4869 +
            (C25467 - C25466 + C25469 - C25468) * C48416) *
               C48379 +
           ((C25245 - C25244 + C25247 - C25246) * C4868 +
            (C25249 - C25248 + C25251 - C25250) * C48574 +
            (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
             C23238 * C10055) *
                C4869 +
            (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
             C23238 * C10059) *
                C48416) *
               C26140) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C118 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48329) *
               C48648 +
           ((C23231 * C239 - C23237 * C233 + C48222 * C240 - C23238 * C234) *
                C118 +
            (C23231 * C251 - C23237 * C244 + C48222 * C252 - C23238 * C245) *
                C48329) *
               C48644 +
           ((C23231 * C522 - C23237 * C517 + C48222 * C523 - C23238 * C518) *
                C118 +
            (C23231 * C532 - C23237 * C527 + C48222 * C533 - C23238 * C528) *
                C48329) *
               C48634 +
           ((C23231 * C1159 - C23237 * C1155 + C48222 * C1160 -
             C23238 * C1156) *
                C118 +
            (C23231 * C1167 - C23237 * C1162 + C48222 * C1168 -
             C23238 * C1163) *
                C48329) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C118 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48329) *
               C48648 +
           ((C23237 * C234 - C23231 * C240 + C23238 * C235 - C48222 * C241) *
                C118 +
            (C23237 * C245 - C23231 * C252 + C23238 * C246 - C48222 * C253) *
                C48329) *
               C48644 +
           ((C23237 * C518 - C23231 * C523 + C23238 * C519 - C48222 * C524) *
                C118 +
            (C23237 * C528 - C23231 * C533 + C23238 * C529 - C48222 * C534) *
                C48329) *
               C48634 +
           ((C23237 * C1156 - C23231 * C1160 + C23238 * C1157 -
             C48222 * C1161) *
                C118 +
            (C23237 * C1163 - C23231 * C1168 + C23238 * C1164 -
             C48222 * C1169) *
                C48329) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C118 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C48329) *
               C48648 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C118 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C48329) *
               C48644 +
           ((C23231 * C524 - C23237 * C519 + C48222 * C525 - C23238 * C520) *
                C118 +
            (C23231 * C534 - C23237 * C529 + C48222 * C535 - C23238 * C530) *
                C48329) *
               C48634 +
           ((C23231 * C1161 - C23237 * C1157 + C48222 * C1165 -
             C23238 * C1158) *
                C118 +
            (C23231 * C1169 - C23237 * C1164 + C48222 * C1170 -
             C23238 * C1166) *
                C48329) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C118 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C48329) *
               C22087 +
           ((C48647 * C239 - C22089 * C233 + C48640 * C240 - C22090 * C234 +
             C48627 * C241 - C22091 * C235 + C48610 * C242 - C22092 * C236) *
                C118 +
            (C48647 * C251 - C22089 * C244 + C48640 * C252 - C22090 * C245 +
             C48627 * C253 - C22091 * C246 + C48610 * C254 - C22092 * C247) *
                C48329) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C118 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C48329) *
               C22087 +
           ((C22089 * C234 - C48647 * C240 + C22090 * C235 - C48640 * C241 +
             C22091 * C236 - C48627 * C242 + C22092 * C237 - C48610 * C243) *
                C118 +
            (C22089 * C245 - C48647 * C252 + C22090 * C246 - C48640 * C253 +
             C22091 * C247 - C48627 * C254 + C22092 * C248 - C48610 * C255) *
                C48329) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48647 * C128 - C22089 * C121 + C48640 * C129 - C22090 * C122 +
             C48627 * C130 - C22091 * C123 + C48610 * C136 - C22092 * C124) *
                C118 +
            (C48647 * C142 - C22089 * C133 + C48640 * C143 - C22090 * C134 +
             C48627 * C144 - C22091 * C135 + C48610 * C145 - C22092 * C137) *
                C48329) *
               C22087 +
           ((C48647 * C241 - C22089 * C235 + C48640 * C242 - C22090 * C236 +
             C48627 * C243 - C22091 * C237 + C48610 * C249 - C22092 * C238) *
                C118 +
            (C48647 * C253 - C22089 * C246 + C48640 * C254 - C22090 * C247 +
             C48627 * C255 - C22091 * C248 + C48610 * C256 - C22092 * C250) *
                C48329) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C2395 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48642 +
            (C23231 * C347 - C23237 * C341 + C48222 * C348 - C23238 * C342) *
                C2396 +
            (C23231 * C359 - C23237 * C352 + C48222 * C360 - C23238 * C353) *
                C48631 +
            (C23231 * C875 - C23237 * C870 + C48222 * C876 - C23238 * C871) *
                C2397 +
            (C23231 * C885 - C23237 * C880 + C48222 * C886 - C23238 * C881) *
                C48609) *
               C22087 +
           ((C23370 - C23371 + C23372 - C23373) * C2395 +
            (C23374 - C23375 + C23376 - C23377) * C48642 +
            (C23933 - C23932 + C23935 - C23934) * C2396 +
            (C23937 - C23936 + C23939 - C23938) * C48631 +
            (C23231 * C2264 - C23237 * C2258 + C48222 * C2265 -
             C23238 * C2259) *
                C2397 +
            (C23231 * C2276 - C23237 * C2267 + C48222 * C2277 -
             C23238 * C2268) *
                C48609) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C2395 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48642 +
            (C23237 * C342 - C23231 * C348 + C23238 * C343 - C48222 * C349) *
                C2396 +
            (C23237 * C353 - C23231 * C360 + C23238 * C354 - C48222 * C361) *
                C48631 +
            (C23237 * C871 - C23231 * C876 + C23238 * C872 - C48222 * C877) *
                C2397 +
            (C23237 * C881 - C23231 * C886 + C23238 * C882 - C48222 * C887) *
                C48609) *
               C22087 +
           ((C23394 - C23395 + C23396 - C23397) * C2395 +
            (C23398 - C23399 + C23400 - C23401) * C48642 +
            (C23237 * C620 - C23231 * C625 + C23238 * C621 - C48222 * C626) *
                C2396 +
            (C23237 * C630 - C23231 * C635 + C23238 * C631 - C48222 * C636) *
                C48631 +
            (C23237 * C2259 - C23231 * C2265 + C23238 * C2260 -
             C48222 * C2266) *
                C2397 +
            (C23237 * C2268 - C23231 * C2277 + C23238 * C2269 -
             C48222 * C2278) *
                C48609) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C2395 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C48642 +
            (C23231 * C349 - C23237 * C343 + C48222 * C350 - C23238 * C344) *
                C2396 +
            (C23231 * C361 - C23237 * C354 + C48222 * C362 - C23238 * C355) *
                C48631 +
            (C23231 * C877 - C23237 * C872 + C48222 * C878 - C23238 * C873) *
                C2397 +
            (C23231 * C887 - C23237 * C882 + C48222 * C888 - C23238 * C883) *
                C48609) *
               C22087 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C2395 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C48642 +
            (C23231 * C626 - C23237 * C621 + C48222 * C627 - C23238 * C622) *
                C2396 +
            (C23231 * C636 - C23237 * C631 + C48222 * C637 - C23238 * C632) *
                C48631 +
            (C23231 * C2266 - C23237 * C2260 + C48222 * C2545 -
             C23238 * C2544) *
                C2397 +
            (C23231 * C2278 - C23237 * C2269 + C48222 * C2547 -
             C23238 * C2546) *
                C48609) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            ((C23378 - C23379 + C23380 - C23381) * C118 +
             (C23382 - C23383 + C23384 - C23385) * C48329) *
                C48634 +
            ((C23386 - C23387 + C23388 - C23389) * C118 +
             (C23390 - C23391 + C23392 - C23393) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23237 * C1637 - C23231 * C1640 + C23238 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C23237 * C1643 - C23231 * C1646 + C23238 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C118 +
             (C23399 - C23398 + C23401 - C23400) * C48329) *
                C48648 +
            ((C23403 - C23402 + C23405 - C23404) * C118 +
             (C23407 - C23406 + C23409 - C23408) * C48329) *
                C48644 +
            ((C23411 - C23410 + C23413 - C23412) * C118 +
             (C23415 - C23414 + C23417 - C23416) * C48329) *
                C48634 +
            ((C23231 * C1641 - C23237 * C1638 + C48222 * C1642 -
              C23238 * C1639) *
                 C118 +
             (C23231 * C1647 - C23237 * C1644 + C48222 * C1648 -
              C23238 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22089 * C517 - C48647 * C522 + C22090 * C518 - C48640 * C523 +
              C22091 * C519 - C48627 * C524 + C22092 * C520 - C48610 * C525) *
                 C118 +
             (C22089 * C527 - C48647 * C532 + C22090 * C528 - C48640 * C533 +
              C22091 * C529 - C48627 * C534 + C22092 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
              C22246) *
                 C118 +
             (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
              C22254) *
                 C48329) *
                C22087 +
            ((C48647 * C523 - C22089 * C518 + C48640 * C524 - C22090 * C519 +
              C48627 * C525 - C22091 * C520 + C48610 * C526 - C22092 * C521) *
                 C118 +
             (C48647 * C533 - C22089 * C528 + C48640 * C534 - C22090 * C529 +
              C48627 * C535 - C22091 * C530 + C48610 * C536 - C22092 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C2395 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48642 +
             (C23231 * C347 - C23237 * C341 + C48222 * C348 - C23238 * C342) *
                 C2396 +
             (C23231 * C359 - C23237 * C352 + C48222 * C360 - C23238 * C353) *
                 C48631 +
             (C23231 * C875 - C23237 * C870 + C48222 * C876 - C23238 * C871) *
                 C2397 +
             (C23231 * C885 - C23237 * C880 + C48222 * C886 - C23238 * C881) *
                 C48609) *
                C22087 +
            ((C23370 - C23371 + C23372 - C23373) * C2395 +
             (C23374 - C23375 + C23376 - C23377) * C48642 +
             (C23933 - C23932 + C23935 - C23934) * C2396 +
             (C23937 - C23936 + C23939 - C23938) * C48631 +
             (C24654 - C24655 + C24656 - C24657) * C2397 +
             (C24658 - C24659 + C24660 - C24661) * C48609) *
                C48376) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C2395 +
             (C23375 - C23374 + C23377 - C23376) * C48642 +
             (C23932 - C23933 + C23934 - C23935) * C2396 +
             (C23936 - C23937 + C23938 - C23939) * C48631 +
             (C24655 - C24654 + C24657 - C24656) * C2397 +
             (C24659 - C24658 + C24661 - C24660) * C48609) *
                C22087 +
            ((C23379 - C23378 + C23381 - C23380) * C2395 +
             (C23383 - C23382 + C23385 - C23384) * C48642 +
             (C23940 - C23941 + C23942 - C23943) * C2396 +
             (C23944 - C23945 + C23946 - C23947) * C48631 +
             (C23237 * C2261 - C23231 * C2270 + C23238 * C2262 -
              C48222 * C2271) *
                 C2397 +
             (C23237 * C2273 - C23231 * C2279 + C23238 * C2274 -
              C48222 * C2280) *
                 C48609) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C2395 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48642 +
             (C23237 * C342 - C23231 * C348 + C23238 * C343 - C48222 * C349) *
                 C2396 +
             (C23237 * C353 - C23231 * C360 + C23238 * C354 - C48222 * C361) *
                 C48631 +
             (C23237 * C871 - C23231 * C876 + C23238 * C872 - C48222 * C877) *
                 C2397 +
             (C23237 * C881 - C23231 * C886 + C23238 * C882 - C48222 * C887) *
                 C48609) *
                C22087 +
            ((C23394 - C23395 + C23396 - C23397) * C2395 +
             (C23398 - C23399 + C23400 - C23401) * C48642 +
             (C24662 - C24663 + C24664 - C24665) * C2396 +
             (C24666 - C24667 + C24668 - C24669) * C48631 +
             (C24670 - C24671 + C24672 - C24673) * C2397 +
             (C24674 - C24675 + C24676 - C24677) * C48609) *
                C48376) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C2395 +
             (C23399 - C23398 + C23401 - C23400) * C48642 +
             (C24663 - C24662 + C24665 - C24664) * C2396 +
             (C24667 - C24666 + C24669 - C24668) * C48631 +
             (C24671 - C24670 + C24673 - C24672) * C2397 +
             (C24675 - C24674 + C24677 - C24676) * C48609) *
                C22087 +
            ((C23403 - C23402 + C23405 - C23404) * C2395 +
             (C23407 - C23406 + C23409 - C23408) * C48642 +
             (C23231 * C1370 - C23237 * C1366 + C48222 * C1371 -
              C23238 * C1367) *
                 C2396 +
             (C23231 * C1378 - C23237 * C1373 + C48222 * C1379 -
              C23238 * C1374) *
                 C48631 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C2397 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48609) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            ((C23378 - C23379 + C23380 - C23381) * C118 +
             (C23382 - C23383 + C23384 - C23385) * C48329) *
                C48634 +
            ((C23386 - C23387 + C23388 - C23389) * C118 +
             (C23390 - C23391 + C23392 - C23393) * C48329) *
                C48616) *
               C339 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23237 * C619 - C23231 * C624 + C23238 * C620 - C48222 * C625) *
                 C118 +
             (C23237 * C629 - C23231 * C634 + C23238 * C630 - C48222 * C635) *
                 C48329) *
                C48644 +
            ((C23237 * C1365 - C23231 * C1369 + C23238 * C1366 -
              C48222 * C1370) *
                 C118 +
             (C23237 * C1372 - C23231 * C1377 + C23238 * C1373 -
              C48222 * C1378) *
                 C48329) *
                C48634 +
            ((C23237 * C1820 - C23231 * C1823 + C23238 * C1821 -
              C48222 * C1824) *
                 C118 +
             (C23237 * C1826 - C23231 * C1829 + C23238 * C1827 -
              C48222 * C1830) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C339 +
           (((C23231 * C348 - C23237 * C342 + C48222 * C349 - C23238 * C343) *
                 C118 +
             (C23231 * C360 - C23237 * C353 + C48222 * C361 - C23238 * C354) *
                 C48329) *
                C48648 +
            ((C23231 * C625 - C23237 * C620 + C48222 * C626 - C23238 * C621) *
                 C118 +
             (C23231 * C635 - C23237 * C630 + C48222 * C636 - C23238 * C631) *
                 C48329) *
                C48644 +
            ((C23231 * C1370 - C23237 * C1366 + C48222 * C1371 -
              C23238 * C1367) *
                 C118 +
             (C23231 * C1378 - C23237 * C1373 + C48222 * C1379 -
              C23238 * C1374) *
                 C48329) *
                C48634 +
            ((C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C118 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C339 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22089 * C619 - C48647 * C624 + C22090 * C620 - C48640 * C625 +
              C22091 * C621 - C48627 * C626 + C22092 * C622 - C48610 * C627) *
                 C118 +
             (C22089 * C629 - C48647 * C634 + C22090 * C630 - C48640 * C635 +
              C22091 * C631 - C48627 * C636 + C22092 * C632 - C48610 * C637) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C339 +
           (((C48647 * C348 - C22089 * C342 + C48640 * C349 - C22090 * C343 +
              C48627 * C350 - C22091 * C344 + C48610 * C351 - C22092 * C345) *
                 C118 +
             (C48647 * C360 - C22089 * C353 + C48640 * C361 - C22090 * C354 +
              C48627 * C362 - C22091 * C355 + C48610 * C363 - C22092 * C356) *
                 C48329) *
                C22087 +
            ((C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
              C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                 C118 +
             (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
              C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C2395 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48642 +
             (C24872 - C24873 + C24874 - C24875) * C2396 +
             (C24876 - C24877 + C24878 - C24879) * C48631 +
             (C24880 - C24881 + C24882 - C24883) * C2397 +
             (C24884 - C24885 + C24886 - C24887) * C48609) *
                C22087 +
            ((C23370 - C23371 + C23372 - C23373) * C2395 +
             (C23374 - C23375 + C23376 - C23377) * C48642 +
             (C23933 - C23932 + C23935 - C23934) * C2396 +
             (C23937 - C23936 + C23939 - C23938) * C48631 +
             (C24654 - C24655 + C24656 - C24657) * C2397 +
             (C24658 - C24659 + C24660 - C24661) * C48609) *
                C48376) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C2395 +
             (C24877 - C24876 + C24879 - C24878) * C48642 +
             (C24881 - C24880 + C24883 - C24882) * C2396 +
             (C24885 - C24884 + C24887 - C24886) * C48631 +
             (C23237 * C2694 - C23231 * C2698 + C23238 * C2695 -
              C48222 * C2699) *
                 C2397 +
             (C23237 * C2701 - C23231 * C2706 + C23238 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C22087 +
            ((C23932 - C23933 + C23934 - C23935) * C2395 +
             (C23936 - C23937 + C23938 - C23939) * C48642 +
             (C24655 - C24654 + C24657 - C24656) * C2396 +
             (C24659 - C24658 + C24661 - C24660) * C48631 +
             (C23237 * C3160 - C23231 * C3163 + C23238 * C3161 -
              C48222 * C3164) *
                 C2397 +
             (C23237 * C3166 - C23231 * C3169 + C23238 * C3167 -
              C48222 * C3170) *
                 C48609) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C2395 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48642 +
             (C24888 - C24889 + C24890 - C24891) * C2396 +
             (C24892 - C24893 + C24894 - C24895) * C48631 +
             (C24896 - C24897 + C24898 - C24899) * C2397 +
             (C24900 - C24901 + C24902 - C24903) * C48609) *
                C22087 +
            ((C23394 - C23395 + C23396 - C23397) * C2395 +
             (C23398 - C23399 + C23400 - C23401) * C48642 +
             (C24662 - C24663 + C24664 - C24665) * C2396 +
             (C24666 - C24667 + C24668 - C24669) * C48631 +
             (C24670 - C24671 + C24672 - C24673) * C2397 +
             (C24674 - C24675 + C24676 - C24677) * C48609) *
                C48376) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C2395 +
             (C24893 - C24892 + C24895 - C24894) * C48642 +
             (C24897 - C24896 + C24899 - C24898) * C2396 +
             (C24901 - C24900 + C24903 - C24902) * C48631 +
             (C23231 * C2699 - C23237 * C2695 + C48222 * C2700 -
              C23238 * C2696) *
                 C2397 +
             (C23231 * C2707 - C23237 * C2702 + C48222 * C2708 -
              C23238 * C2703) *
                 C48609) *
                C22087 +
            ((C24663 - C24662 + C24665 - C24664) * C2395 +
             (C24667 - C24666 + C24669 - C24668) * C48642 +
             (C24671 - C24670 + C24673 - C24672) * C2396 +
             (C24675 - C24674 + C24677 - C24676) * C48631 +
             (C23231 * C3164 - C23237 * C3161 + C48222 * C3165 -
              C23238 * C3162) *
                 C2397 +
             (C23231 * C3170 - C23237 * C3167 + C48222 * C3171 -
              C23238 * C3168) *
                 C48609) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            ((C23378 - C23379 + C23380 - C23381) * C118 +
             (C23382 - C23383 + C23384 - C23385) * C48329) *
                C48634 +
            ((C23386 - C23387 + C23388 - C23389) * C118 +
             (C23390 - C23391 + C23392 - C23393) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23237 * C1637 - C23231 * C1640 + C23238 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C23237 * C1643 - C23231 * C1646 + C23238 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C118 +
             (C23399 - C23398 + C23401 - C23400) * C48329) *
                C48648 +
            ((C23403 - C23402 + C23405 - C23404) * C118 +
             (C23407 - C23406 + C23409 - C23408) * C48329) *
                C48644 +
            ((C23411 - C23410 + C23413 - C23412) * C118 +
             (C23415 - C23414 + C23417 - C23416) * C48329) *
                C48634 +
            ((C23231 * C1641 - C23237 * C1638 + C48222 * C1642 -
              C23238 * C1639) *
                 C118 +
             (C23231 * C1647 - C23237 * C1644 + C48222 * C1648 -
              C23238 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22089 * C517 - C48647 * C522 + C22090 * C518 - C48640 * C523 +
              C22091 * C519 - C48627 * C524 + C22092 * C520 - C48610 * C525) *
                 C118 +
             (C22089 * C527 - C48647 * C532 + C22090 * C528 - C48640 * C533 +
              C22091 * C529 - C48627 * C534 + C22092 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
              C22246) *
                 C118 +
             (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
              C22254) *
                 C48329) *
                C22087 +
            ((C48647 * C523 - C22089 * C518 + C48640 * C524 - C22090 * C519 +
              C48627 * C525 - C22091 * C520 + C48610 * C526 - C22092 * C521) *
                 C118 +
             (C48647 * C533 - C22089 * C528 + C48640 * C534 - C22090 * C529 +
              C48627 * C535 - C22091 * C530 + C48610 * C536 - C22092 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C2395 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48642 +
             (C24872 - C24873 + C24874 - C24875) * C2396 +
             (C24876 - C24877 + C24878 - C24879) * C48631 +
             (C24880 - C24881 + C24882 - C24883) * C2397 +
             (C24884 - C24885 + C24886 - C24887) * C48609) *
                C22087 +
            ((C23370 - C23371 + C23372 - C23373) * C2395 +
             (C23374 - C23375 + C23376 - C23377) * C48642 +
             (C23933 - C23932 + C23935 - C23934) * C2396 +
             (C23937 - C23936 + C23939 - C23938) * C48631 +
             (C24654 - C24655 + C24656 - C24657) * C2397 +
             (C24658 - C24659 + C24660 - C24661) * C48609) *
                C48376) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C2395 +
             (C23375 - C23374 + C23377 - C23376) * C48642 +
             (C23932 - C23933 + C23934 - C23935) * C2396 +
             (C23936 - C23937 + C23938 - C23939) * C48631 +
             (C24655 - C24654 + C24657 - C24656) * C2397 +
             (C24659 - C24658 + C24661 - C24660) * C48609) *
                C22087 +
            ((C23379 - C23378 + C23381 - C23380) * C2395 +
             (C23383 - C23382 + C23385 - C23384) * C48642 +
             (C23940 - C23941 + C23942 - C23943) * C2396 +
             (C23944 - C23945 + C23946 - C23947) * C48631 +
             (C23237 * C2261 - C23231 * C2270 + C23238 * C2262 -
              C48222 * C2271) *
                 C2397 +
             (C23237 * C2273 - C23231 * C2279 + C23238 * C2274 -
              C48222 * C2280) *
                 C48609) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C2395 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48642 +
             (C24888 - C24889 + C24890 - C24891) * C2396 +
             (C24892 - C24893 + C24894 - C24895) * C48631 +
             (C24896 - C24897 + C24898 - C24899) * C2397 +
             (C24900 - C24901 + C24902 - C24903) * C48609) *
                C22087 +
            ((C23394 - C23395 + C23396 - C23397) * C2395 +
             (C23398 - C23399 + C23400 - C23401) * C48642 +
             (C24662 - C24663 + C24664 - C24665) * C2396 +
             (C24666 - C24667 + C24668 - C24669) * C48631 +
             (C24670 - C24671 + C24672 - C24673) * C2397 +
             (C24674 - C24675 + C24676 - C24677) * C48609) *
                C48376) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C2395 +
             (C23399 - C23398 + C23401 - C23400) * C48642 +
             (C24663 - C24662 + C24665 - C24664) * C2396 +
             (C24667 - C24666 + C24669 - C24668) * C48631 +
             (C24671 - C24670 + C24673 - C24672) * C2397 +
             (C24675 - C24674 + C24677 - C24676) * C48609) *
                C22087 +
            ((C23403 - C23402 + C23405 - C23404) * C2395 +
             (C23407 - C23406 + C23409 - C23408) * C48642 +
             (C23231 * C1370 - C23237 * C1366 + C48222 * C1371 -
              C23238 * C1367) *
                 C2396 +
             (C23231 * C1378 - C23237 * C1373 + C48222 * C1379 -
              C23238 * C1374) *
                 C48631 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C2397 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48609) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C118 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48329) *
               C48648 +
           ((C23370 - C23371 + C23372 - C23373) * C118 +
            (C23374 - C23375 + C23376 - C23377) * C48329) *
               C48644 +
           C23800 * C48634 + C23801 * C48616) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C118 +
            (C23375 - C23374 + C23377 - C23376) * C48329) *
               C48648 +
           ((C23379 - C23378 + C23381 - C23380) * C118 +
            (C23383 - C23382 + C23385 - C23384) * C48329) *
               C48644 +
           ((C23387 - C23386 + C23389 - C23388) * C118 +
            (C23391 - C23390 + C23393 - C23392) * C48329) *
               C48634 +
           ((C23784 - C23785 + C23786 - C23787) * C118 +
            (C23788 - C23789 + C23790 - C23791) * C48329) *
               C48616) *
              C48300 * C514 +
          (C23800 * C48648 + C23801 * C48644 +
           ((C23785 - C23784 + C23787 - C23786) * C118 +
            (C23789 - C23788 + C23791 - C23790) * C48329) *
               C48634 +
           ((C23231 * C8993 - C23237 * C8991 + C48222 * C8995 -
             C23238 * C8992) *
                C118 +
            (C23231 * C8997 - C23237 * C8994 + C48222 * C8998 -
             C23238 * C8996) *
                C48329) *
               C48616) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C118 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C48329) *
               C22087 +
           ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
             C22231) *
                C118 +
            (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
             C22239) *
                C48329) *
               C48376) *
              C48300 * C513 +
          (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C118 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C48329) *
               C22087 +
           ((C22614 - C22615 + C22616 - C22617 + C22618 - C22619 + C22620 -
             C22621) *
                C118 +
            (C22622 - C22623 + C22624 - C22625 + C22626 - C22627 + C22628 -
             C22629) *
                C48329) *
               C48376) *
              C48300 * C514 +
          (((C22615 - C22614 + C22617 - C22616 + C22619 - C22618 + C22621 -
             C22620) *
                C118 +
            (C22623 - C22622 + C22625 - C22624 + C22627 - C22626 + C22629 -
             C22628) *
                C48329) *
               C22087 +
           ((C48647 * C1159 - C22089 * C1155 + C48640 * C1160 - C22090 * C1156 +
             C48627 * C1161 - C22091 * C1157 + C48610 * C1165 -
             C22092 * C1158) *
                C118 +
            (C48647 * C1167 - C22089 * C1162 + C48640 * C1168 - C22090 * C1163 +
             C48627 * C1169 - C22091 * C1164 + C48610 * C1170 -
             C22092 * C1166) *
                C48329) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C2395 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48642 +
            (C24872 - C24873 + C24874 - C24875) * C2396 +
            (C24876 - C24877 + C24878 - C24879) * C48631 +
            (C24880 - C24881 + C24882 - C24883) * C2397 +
            (C24884 - C24885 + C24886 - C24887) * C48609) *
               C22087 +
           ((C23370 - C23371 + C23372 - C23373) * C2395 +
            (C23374 - C23375 + C23376 - C23377) * C48642 +
            (C23933 - C23932 + C23935 - C23934) * C2396 +
            (C23937 - C23936 + C23939 - C23938) * C48631 +
            (C24654 - C24655 + C24656 - C24657) * C2397 +
            (C24658 - C24659 + C24660 - C24661) * C48609) *
               C48376) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C2395 +
            (C23375 - C23374 + C23377 - C23376) * C48642 +
            (C23932 - C23933 + C23934 - C23935) * C2396 +
            (C23936 - C23937 + C23938 - C23939) * C48631 +
            (C24655 - C24654 + C24657 - C24656) * C2397 +
            (C24659 - C24658 + C24661 - C24660) * C48609) *
               C22087 +
           ((C23379 - C23378 + C23381 - C23380) * C2395 +
            (C23383 - C23382 + C23385 - C23384) * C48642 +
            (C23940 - C23941 + C23942 - C23943) * C2396 +
            (C23944 - C23945 + C23946 - C23947) * C48631 +
            (C25244 - C25245 + C25246 - C25247) * C2397 +
            (C25248 - C25249 + C25250 - C25251) * C48609) *
               C48376) *
              C48300 * C514 +
          ((C23792 * C2395 + C23793 * C48642 +
            (C23941 - C23940 + C23943 - C23942) * C2396 +
            (C23945 - C23944 + C23947 - C23946) * C48631 +
            (C25245 - C25244 + C25247 - C25246) * C2397 +
            (C25249 - C25248 + C25251 - C25250) * C48609) *
               C22087 +
           (C23794 * C2395 + C23795 * C48642 +
            (C23949 - C23948 + C23951 - C23950) * C2396 +
            (C23953 - C23952 + C23955 - C23954) * C48631 +
            (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
             C23238 * C9880) *
                C2397 +
            (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
             C23238 * C9882) *
                C48609) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            C23800 * C48634 + C23801 * C48616) *
               C339 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23932 - C23933 + C23934 - C23935) * C118 +
             (C23936 - C23937 + C23938 - C23939) * C48329) *
                C48644 +
            ((C23940 - C23941 + C23942 - C23943) * C118 +
             (C23944 - C23945 + C23946 - C23947) * C48329) *
                C48634 +
            ((C23948 - C23949 + C23950 - C23951) * C118 +
             (C23952 - C23953 + C23954 - C23955) * C48329) *
                C48616) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23784 - C23785 + C23786 - C23787) * C118 +
             (C23788 - C23789 + C23790 - C23791) * C48329) *
                C48616) *
               C339 +
           (((C23933 - C23932 + C23935 - C23934) * C118 +
             (C23937 - C23936 + C23939 - C23938) * C48329) *
                C48648 +
            ((C23941 - C23940 + C23943 - C23942) * C118 +
             (C23945 - C23944 + C23947 - C23946) * C48329) *
                C48644 +
            ((C23949 - C23948 + C23951 - C23950) * C118 +
             (C23953 - C23952 + C23955 - C23954) * C48329) *
                C48634 +
            ((C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
              C23238 * C9114) *
                 C118 +
             (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
              C23238 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C339 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
              C22767) *
                 C118 +
             (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
              C22775) *
                 C48329) *
                C48376) *
               C48603) *
              C447 +
          ((((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22614 - C22615 + C22616 - C22617 + C22618 - C22619 + C22620 -
              C22621) *
                 C118 +
             (C22622 - C22623 + C22624 - C22625 + C22626 - C22627 + C22628 -
              C22629) *
                 C48329) *
                C48376) *
               C339 +
           (((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
              C22766) *
                 C118 +
             (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
              C22774) *
                 C48329) *
                C22087 +
            ((C48647 * C1369 - C22089 * C1365 + C48640 * C1370 -
              C22090 * C1366 + C48627 * C1371 - C22091 * C1367 +
              C48610 * C1375 - C22092 * C1368) *
                 C118 +
             (C48647 * C1377 - C22089 * C1372 + C48640 * C1378 -
              C22090 * C1373 + C48627 * C1379 - C22091 * C1374 +
              C48610 * C1380 - C22092 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C2395 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48642 +
             (C24872 - C24873 + C24874 - C24875) * C2396 +
             (C24876 - C24877 + C24878 - C24879) * C48631 +
             (C24880 - C24881 + C24882 - C24883) * C2397 +
             (C24884 - C24885 + C24886 - C24887) * C48609) *
                C22087 +
            ((C23370 - C23371 + C23372 - C23373) * C2395 +
             (C23374 - C23375 + C23376 - C23377) * C48642 + C25470 * C2396 +
             C25471 * C48631 + C25472 * C2397 + C25473 * C48609) *
                C48376) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C2395 +
             (C24877 - C24876 + C24879 - C24878) * C48642 +
             (C24881 - C24880 + C24883 - C24882) * C2396 +
             (C24885 - C24884 + C24887 - C24886) * C48631 +
             (C23237 * C2694 - C23231 * C2698 + C23238 * C2695 -
              C48222 * C2699) *
                 C2397 +
             (C23237 * C2701 - C23231 * C2706 + C23238 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C22087 +
            (C25474 * C2395 + C25475 * C48642 + C25476 * C2396 +
             C25477 * C48631 + (C25462 - C25463 + C25464 - C25465) * C2397 +
             (C25466 - C25467 + C25468 - C25469) * C48609) *
                C48376) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C2395 +
             (C23375 - C23374 + C23377 - C23376) * C48642 + C25474 * C2396 +
             C25475 * C48631 + C25476 * C2397 + C25477 * C48609) *
                C22087 +
            ((C23379 - C23378 + C23381 - C23380) * C2395 +
             (C23383 - C23382 + C23385 - C23384) * C48642 +
             (C23940 - C23941 + C23942 - C23943) * C2396 +
             (C23944 - C23945 + C23946 - C23947) * C48631 +
             (C25244 - C25245 + C25246 - C25247) * C2397 +
             (C25248 - C25249 + C25250 - C25251) * C48609) *
                C48376) *
               C339 +
           ((C25470 * C2395 + C25471 * C48642 + C25472 * C2396 +
             C25473 * C48631 + (C25463 - C25462 + C25465 - C25464) * C2397 +
             (C25467 - C25466 + C25469 - C25468) * C48609) *
                C22087 +
            ((C23941 - C23940 + C23943 - C23942) * C2395 +
             (C23945 - C23944 + C23947 - C23946) * C48642 +
             (C25245 - C25244 + C25247 - C25246) * C2396 +
             (C25249 - C25248 + C25251 - C25250) * C48631 +
             (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
              C23238 * C10055) *
                 C2397 +
             (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
              C23238 * C10059) *
                 C48609) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            C23800 * C48634 + C23801 * C48616) *
               C721 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23932 - C23933 + C23934 - C23935) * C118 +
             (C23936 - C23937 + C23938 - C23939) * C48329) *
                C48644 +
            ((C23940 - C23941 + C23942 - C23943) * C118 +
             (C23944 - C23945 + C23946 - C23947) * C48329) *
                C48634 +
            ((C23948 - C23949 + C23950 - C23951) * C118 +
             (C23952 - C23953 + C23954 - C23955) * C48329) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C721 +
           (((C23231 * C348 - C23237 * C342 + C48222 * C349 - C23238 * C343) *
                 C118 +
             (C23231 * C360 - C23237 * C353 + C48222 * C361 - C23238 * C354) *
                 C48329) *
                C48648 +
            ((C23231 * C625 - C23237 * C620 + C48222 * C626 - C23238 * C621) *
                 C118 +
             (C23231 * C635 - C23237 * C630 + C48222 * C636 - C23238 * C631) *
                 C48329) *
                C48644 +
            ((C23231 * C1370 - C23237 * C1366 + C48222 * C1371 -
              C23238 * C1367) *
                 C118 +
             (C23231 * C1378 - C23237 * C1373 + C48222 * C1379 -
              C23238 * C1374) *
                 C48329) *
                C48634 +
            ((C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C118 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C721 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
              C22767) *
                 C118 +
             (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
              C22775) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C721 +
           (((C48647 * C348 - C22089 * C342 + C48640 * C349 - C22090 * C343 +
              C48627 * C350 - C22091 * C344 + C48610 * C351 - C22092 * C345) *
                 C118 +
             (C48647 * C360 - C22089 * C353 + C48640 * C361 - C22090 * C354 +
              C48627 * C362 - C22091 * C355 + C48610 * C363 - C22092 * C356) *
                 C48329) *
                C22087 +
            ((C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
              C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                 C118 +
             (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
              C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C2395 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48642 +
             (C24872 - C24873 + C24874 - C24875) * C2396 +
             (C24876 - C24877 + C24878 - C24879) * C48631 +
             (C24880 - C24881 + C24882 - C24883) * C2397 +
             (C24884 - C24885 + C24886 - C24887) * C48609) *
                C22087 +
            ((C23370 - C23371 + C23372 - C23373) * C2395 +
             (C23374 - C23375 + C23376 - C23377) * C48642 + C25470 * C2396 +
             C25471 * C48631 + C25472 * C2397 + C25473 * C48609) *
                C48376) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C2395 +
             (C24877 - C24876 + C24879 - C24878) * C48642 +
             (C24881 - C24880 + C24883 - C24882) * C2396 +
             (C24885 - C24884 + C24887 - C24886) * C48631 +
             (C23237 * C2694 - C23231 * C2698 + C23238 * C2695 -
              C48222 * C2699) *
                 C2397 +
             (C23237 * C2701 - C23231 * C2706 + C23238 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C22087 +
            (C25474 * C2395 + C25475 * C48642 + C25476 * C2396 +
             C25477 * C48631 + (C25462 - C25463 + C25464 - C25465) * C2397 +
             (C25466 - C25467 + C25468 - C25469) * C48609) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C2395 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48642 +
             (C24888 - C24889 + C24890 - C24891) * C2396 +
             (C24892 - C24893 + C24894 - C24895) * C48631 +
             (C24896 - C24897 + C24898 - C24899) * C2397 +
             (C24900 - C24901 + C24902 - C24903) * C48609) *
                C22087 +
            ((C23394 - C23395 + C23396 - C23397) * C2395 +
             (C23398 - C23399 + C23400 - C23401) * C48642 +
             (C24662 - C24663 + C24664 - C24665) * C2396 +
             (C24666 - C24667 + C24668 - C24669) * C48631 +
             (C24670 - C24671 + C24672 - C24673) * C2397 +
             (C24674 - C24675 + C24676 - C24677) * C48609) *
                C48376) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C2395 +
             (C24893 - C24892 + C24895 - C24894) * C48642 +
             (C24897 - C24896 + C24899 - C24898) * C2396 +
             (C24901 - C24900 + C24903 - C24902) * C48631 +
             (C23231 * C2699 - C23237 * C2695 + C48222 * C2700 -
              C23238 * C2696) *
                 C2397 +
             (C23231 * C2707 - C23237 * C2702 + C48222 * C2708 -
              C23238 * C2703) *
                 C48609) *
                C22087 +
            ((C24663 - C24662 + C24665 - C24664) * C2395 +
             (C24667 - C24666 + C24669 - C24668) * C48642 +
             (C24671 - C24670 + C24673 - C24672) * C2396 +
             (C24675 - C24674 + C24677 - C24676) * C48631 +
             (C23231 * C3164 - C23237 * C3161 + C48222 * C3165 -
              C23238 * C3162) *
                 C2397 +
             (C23231 * C3170 - C23237 * C3167 + C48222 * C3171 -
              C23238 * C3168) *
                 C48609) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            C23800 * C48634 + C23801 * C48616) *
               C721 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23932 - C23933 + C23934 - C23935) * C118 +
             (C23936 - C23937 + C23938 - C23939) * C48329) *
                C48644 +
            ((C23940 - C23941 + C23942 - C23943) * C118 +
             (C23944 - C23945 + C23946 - C23947) * C48329) *
                C48634 +
            ((C23948 - C23949 + C23950 - C23951) * C118 +
             (C23952 - C23953 + C23954 - C23955) * C48329) *
                C48616) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23784 - C23785 + C23786 - C23787) * C118 +
             (C23788 - C23789 + C23790 - C23791) * C48329) *
                C48616) *
               C721 +
           (((C23933 - C23932 + C23935 - C23934) * C118 +
             (C23937 - C23936 + C23939 - C23938) * C48329) *
                C48648 +
            ((C23941 - C23940 + C23943 - C23942) * C118 +
             (C23945 - C23944 + C23947 - C23946) * C48329) *
                C48644 +
            ((C23949 - C23948 + C23951 - C23950) * C118 +
             (C23953 - C23952 + C23955 - C23954) * C48329) *
                C48634 +
            ((C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
              C23238 * C9114) *
                 C118 +
             (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
              C23238 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C721 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
              C22767) *
                 C118 +
             (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
              C22775) *
                 C48329) *
                C48376) *
               C48603) *
              C229 +
          ((((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22614 - C22615 + C22616 - C22617 + C22618 - C22619 + C22620 -
              C22621) *
                 C118 +
             (C22622 - C22623 + C22624 - C22625 + C22626 - C22627 + C22628 -
              C22629) *
                 C48329) *
                C48376) *
               C721 +
           (((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
              C22766) *
                 C118 +
             (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
              C22774) *
                 C48329) *
                C22087 +
            ((C48647 * C1369 - C22089 * C1365 + C48640 * C1370 -
              C22090 * C1366 + C48627 * C1371 - C22091 * C1367 +
              C48610 * C1375 - C22092 * C1368) *
                 C118 +
             (C48647 * C1377 - C22089 * C1372 + C48640 * C1378 -
              C22090 * C1373 + C48627 * C1379 - C22091 * C1374 +
              C48610 * C1380 - C22092 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C2395 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48642 +
             (C24872 - C24873 + C24874 - C24875) * C2396 +
             (C24876 - C24877 + C24878 - C24879) * C48631 +
             (C24880 - C24881 + C24882 - C24883) * C2397 +
             (C24884 - C24885 + C24886 - C24887) * C48609) *
                C22087 +
            ((C23370 - C23371 + C23372 - C23373) * C2395 +
             (C23374 - C23375 + C23376 - C23377) * C48642 + C25470 * C2396 +
             C25471 * C48631 + C25472 * C2397 + C25473 * C48609) *
                C48376) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C2395 +
             (C24877 - C24876 + C24879 - C24878) * C48642 +
             (C24881 - C24880 + C24883 - C24882) * C2396 +
             (C24885 - C24884 + C24887 - C24886) * C48631 +
             (C23237 * C2694 - C23231 * C2698 + C23238 * C2695 -
              C48222 * C2699) *
                 C2397 +
             (C23237 * C2701 - C23231 * C2706 + C23238 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C22087 +
            (C25474 * C2395 + C25475 * C48642 + C25476 * C2396 +
             C25477 * C48631 + (C25462 - C25463 + C25464 - C25465) * C2397 +
             (C25466 - C25467 + C25468 - C25469) * C48609) *
                C48376) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C2395 +
             (C23375 - C23374 + C23377 - C23376) * C48642 + C25474 * C2396 +
             C25475 * C48631 + C25476 * C2397 + C25477 * C48609) *
                C22087 +
            ((C23379 - C23378 + C23381 - C23380) * C2395 +
             (C23383 - C23382 + C23385 - C23384) * C48642 +
             (C23940 - C23941 + C23942 - C23943) * C2396 +
             (C23944 - C23945 + C23946 - C23947) * C48631 +
             (C25244 - C25245 + C25246 - C25247) * C2397 +
             (C25248 - C25249 + C25250 - C25251) * C48609) *
                C48376) *
               C721 +
           ((C25470 * C2395 + C25471 * C48642 + C25472 * C2396 +
             C25473 * C48631 + (C25463 - C25462 + C25465 - C25464) * C2397 +
             (C25467 - C25466 + C25469 - C25468) * C48609) *
                C22087 +
            ((C23941 - C23940 + C23943 - C23942) * C2395 +
             (C23945 - C23944 + C23947 - C23946) * C48642 +
             (C25245 - C25244 + C25247 - C25246) * C2396 +
             (C25249 - C25248 + C25251 - C25250) * C48631 +
             (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
              C23238 * C10055) *
                 C2397 +
             (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
              C23238 * C10059) *
                 C48609) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C118 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48329) *
               C48648 +
           ((C23370 - C23371 + C23372 - C23373) * C118 +
            (C23374 - C23375 + C23376 - C23377) * C48329) *
               C48644 +
           C23800 * C48634 + C23801 * C48616) *
              C867 +
          (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                C118 +
            (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                C48329) *
               C48648 +
           ((C23932 - C23933 + C23934 - C23935) * C118 +
            (C23936 - C23937 + C23938 - C23939) * C48329) *
               C48644 +
           ((C23940 - C23941 + C23942 - C23943) * C118 +
            (C23944 - C23945 + C23946 - C23947) * C48329) *
               C48634 +
           ((C23948 - C23949 + C23950 - C23951) * C118 +
            (C23952 - C23953 + C23954 - C23955) * C48329) *
               C48616) *
              C868 +
          (((C23231 * C875 - C23237 * C870 + C48222 * C876 - C23238 * C871) *
                C118 +
            (C23231 * C885 - C23237 * C880 + C48222 * C886 - C23238 * C881) *
                C48329) *
               C48648 +
           ((C23231 * C2264 - C23237 * C2258 + C48222 * C2265 -
             C23238 * C2259) *
                C118 +
            (C23231 * C2276 - C23237 * C2267 + C48222 * C2277 -
             C23238 * C2268) *
                C48329) *
               C48644 +
           ((C23231 * C2270 - C23237 * C2261 + C48222 * C2271 -
             C23238 * C2262) *
                C118 +
            (C23231 * C2279 - C23237 * C2273 + C48222 * C2280 -
             C23238 * C2274) *
                C48329) *
               C48634 +
           ((C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
             C23238 * C9880) *
                C118 +
            (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
             C23238 * C9882) *
                C48329) *
               C48616) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C118 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C48329) *
               C22087 +
           ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
             C22231) *
                C118 +
            (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
             C22239) *
                C48329) *
               C48376) *
              C867 +
          (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
             C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                C118 +
            (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
             C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                C48329) *
               C22087 +
           ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C118 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48329) *
               C48376) *
              C868 +
          (((C48647 * C875 - C22089 * C870 + C48640 * C876 - C22090 * C871 +
             C48627 * C877 - C22091 * C872 + C48610 * C878 - C22092 * C873) *
                C118 +
            (C48647 * C885 - C22089 * C880 + C48640 * C886 - C22090 * C881 +
             C48627 * C887 - C22091 * C882 + C48610 * C888 - C22092 * C883) *
                C48329) *
               C22087 +
           ((C48647 * C2264 - C22089 * C2258 + C48640 * C2265 - C22090 * C2259 +
             C48627 * C2266 - C22091 * C2260 + C48610 * C2545 -
             C22092 * C2544) *
                C118 +
            (C48647 * C2276 - C22089 * C2267 + C48640 * C2277 - C22090 * C2268 +
             C48627 * C2278 - C22091 * C2269 + C48610 * C2547 -
             C22092 * C2546) *
                C48329) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C2395 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48642 +
            (C24872 - C24873 + C24874 - C24875) * C2396 +
            (C24876 - C24877 + C24878 - C24879) * C48631 + C26024 * C2397 +
            C26025 * C48609) *
               C22087 +
           ((C23370 - C23371 + C23372 - C23373) * C2395 +
            (C23374 - C23375 + C23376 - C23377) * C48642 + C25470 * C2396 +
            C25471 * C48631 + C25472 * C2397 + C25473 * C48609) *
               C48376) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C2395 +
            (C24877 - C24876 + C24879 - C24878) * C48642 +
            (C24881 - C24880 + C24883 - C24882) * C2396 +
            (C24885 - C24884 + C24887 - C24886) * C48631 +
            (C26016 - C26017 + C26018 - C26019) * C2397 +
            (C26020 - C26021 + C26022 - C26023) * C48609) *
               C22087 +
           (C25474 * C2395 + C25475 * C48642 + C25476 * C2396 +
            C25477 * C48631 + (C25462 - C25463 + C25464 - C25465) * C2397 +
            (C25466 - C25467 + C25468 - C25469) * C48609) *
               C48376) *
              C868 +
          ((C26024 * C2395 + C26025 * C48642 +
            (C26017 - C26016 + C26019 - C26018) * C2396 +
            (C26021 - C26020 + C26023 - C26022) * C48631 +
            (C23231 * C3589 - C23237 * C3586 + C48222 * C3590 -
             C23238 * C3587) *
                C2397 +
            (C23231 * C3595 - C23237 * C3592 + C48222 * C3596 -
             C23238 * C3593) *
                C48609) *
               C22087 +
           (C25472 * C2395 + C25473 * C48642 +
            (C25463 - C25462 + C25465 - C25464) * C2396 +
            (C25467 - C25466 + C25469 - C25468) * C48631 +
            (C23231 * C10927 - C23237 * C10925 + C48222 * C17570 -
             C23238 * C17569) *
                C2397 +
            (C23231 * C10931 - C23237 * C10928 + C48222 * C17572 -
             C23238 * C17571) *
                C48609) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C4868 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48574 +
            (C48217 * C347 - C47233 * C341 + C48225 * C348 - C47229 * C342 +
             C26137 * C349 - C47239 * C343) *
                C4869 +
            (C48217 * C359 - C47233 * C352 + C48225 * C360 - C47229 * C353 +
             C26137 * C361 - C47239 * C354) *
                C48416) *
               C22087 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
            (C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C4869 +
            (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48416) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
             C47239 * C122 - C26137 * C129) *
                C4868 +
            (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
             C47239 * C134 - C26137 * C143) *
                C48574 +
            (C47233 * C342 - C48217 * C348 + C47229 * C343 - C48225 * C349 +
             C47239 * C344 - C26137 * C350) *
                C4869 +
            (C47233 * C353 - C48217 * C360 + C47229 * C354 - C48225 * C361 +
             C47239 * C355 - C26137 * C362) *
                C48416) *
               C22087 +
           ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C4868 +
            (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48574 +
            (C47233 * C620 - C48217 * C625 + C47229 * C621 - C48225 * C626 +
             C47239 * C622 - C26137 * C627) *
                C4869 +
            (C47233 * C630 - C48217 * C635 + C47229 * C631 - C48225 * C636 +
             C47239 * C632 - C26137 * C637) *
                C48416) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48217 * C128 - C47233 * C121 + C48225 * C129 - C47229 * C122 +
             C26137 * C130 - C47239 * C123) *
                C4868 +
            (C48217 * C142 - C47233 * C133 + C48225 * C143 - C47229 * C134 +
             C26137 * C144 - C47239 * C135) *
                C48574 +
            (C48217 * C349 - C47233 * C343 + C48225 * C350 - C47229 * C344 +
             C26137 * C351 - C47239 * C345) *
                C4869 +
            (C48217 * C361 - C47233 * C354 + C48225 * C362 - C47229 * C355 +
             C26137 * C363 - C47239 * C356) *
                C48416) *
               C22087 +
           ((C48217 * C241 - C47233 * C235 + C48225 * C242 - C47229 * C236 +
             C26137 * C243 - C47239 * C237) *
                C4868 +
            (C48217 * C253 - C47233 * C246 + C48225 * C254 - C47229 * C247 +
             C26137 * C255 - C47239 * C248) *
                C48574 +
            (C48217 * C626 - C47233 * C621 + C48225 * C627 - C47229 * C622 +
             C26137 * C628 - C47239 * C623) *
                C4869 +
            (C48217 * C636 - C47233 * C631 + C48225 * C637 - C47229 * C632 +
             C26137 * C638 - C47239 * C633) *
                C48416) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C4868 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48574 +
             (C48217 * C347 - C47233 * C341 + C48225 * C348 - C47229 * C342 +
              C26137 * C349 - C47239 * C343) *
                 C4869 +
             (C48217 * C359 - C47233 * C352 + C48225 * C360 - C47229 * C353 +
              C26137 * C361 - C47239 * C354) *
                 C48416) *
                C22087 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
             (C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C4869 +
             (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C4868 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48574 +
             (C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C4869 +
             (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48416) *
                C22087 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C4868 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48574 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C4869 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C4868 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48574 +
             (C47233 * C342 - C48217 * C348 + C47229 * C343 - C48225 * C349 +
              C47239 * C344 - C26137 * C350) *
                 C4869 +
             (C47233 * C353 - C48217 * C360 + C47229 * C354 - C48225 * C361 +
              C47239 * C355 - C26137 * C362) *
                 C48416) *
                C22087 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C4868 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48574 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C4869 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C4868 +
             (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C48574 +
             (C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C4869 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48416) *
                C22087 +
            ((C26328 - C26327 + C26330 - C26329 + C26332 - C26331) * C4868 +
             (C26334 - C26333 + C26336 - C26335 + C26338 - C26337) * C48574 +
             (C48217 * C1370 - C47233 * C1366 + C48225 * C1371 -
              C47229 * C1367 + C26137 * C1375 - C47239 * C1368) *
                 C4869 +
             (C48217 * C1378 - C47233 * C1373 + C48225 * C1379 -
              C47229 * C1374 + C26137 * C1380 - C47239 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C4868 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48574 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C22087 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
             (C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C4869 +
             (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48416) *
                C48376) *
               C339 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C4868 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48574 +
             (C47233 * C870 - C48217 * C875 + C47229 * C871 - C48225 * C876 +
              C47239 * C872 - C26137 * C877) *
                 C4869 +
             (C47233 * C880 - C48217 * C885 + C47229 * C881 - C48225 * C886 +
              C47239 * C882 - C26137 * C887) *
                 C48416) *
                C22087 +
            ((C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C4868 +
             (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48574 +
             (C47233 * C2258 - C48217 * C2264 + C47229 * C2259 -
              C48225 * C2265 + C47239 * C2260 - C26137 * C2266) *
                 C4869 +
             (C47233 * C2267 - C48217 * C2276 + C47229 * C2268 -
              C48225 * C2277 + C47239 * C2269 - C26137 * C2278) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C4868 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48574 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C4869 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C22087 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C4868 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48574 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C4869 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C339 +
           (((C27897 - C27896 + C27899 - C27898 + C27901 - C27900) * C4868 +
             (C27903 - C27902 + C27905 - C27904 + C27907 - C27906) * C48574 +
             (C48217 * C876 - C47233 * C871 + C48225 * C877 - C47229 * C872 +
              C26137 * C878 - C47239 * C873) *
                 C4869 +
             (C48217 * C886 - C47233 * C881 + C48225 * C887 - C47229 * C882 +
              C26137 * C888 - C47239 * C883) *
                 C48416) *
                C22087 +
            ((C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C4868 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48574 +
             (C48217 * C2265 - C47233 * C2259 + C48225 * C2266 -
              C47229 * C2260 + C26137 * C2545 - C47239 * C2544) *
                 C4869 +
             (C48217 * C2277 - C47233 * C2268 + C48225 * C2278 -
              C47229 * C2269 + C26137 * C2547 - C47239 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C4868 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48574 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C22087 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
             (C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C4869 +
             (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C4868 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48574 +
             (C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C4869 +
             (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48416) *
                C22087 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C4868 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48574 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C4869 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C4868 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48574 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C4869 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C22087 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C4868 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48574 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C4869 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C4868 +
             (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C48574 +
             (C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C4869 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48416) *
                C22087 +
            ((C26328 - C26327 + C26330 - C26329 + C26332 - C26331) * C4868 +
             (C26334 - C26333 + C26336 - C26335 + C26338 - C26337) * C48574 +
             (C48217 * C1370 - C47233 * C1366 + C48225 * C1371 -
              C47229 * C1367 + C26137 * C1375 - C47239 * C1368) *
                 C4869 +
             (C48217 * C1378 - C47233 * C1373 + C48225 * C1379 -
              C47229 * C1374 + C26137 * C1380 - C47239 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C4868 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48574 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
               C22087 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
            (C26913 - C26912 + C26915 - C26914 + C26917 - C26916) * C4869 +
            (C26919 - C26918 + C26921 - C26920 + C26923 - C26922) * C48416) *
               C48376) *
              C48300 * C513 +
          (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C4868 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48574 +
            (C26912 - C26913 + C26914 - C26915 + C26916 - C26917) * C4869 +
            (C26918 - C26919 + C26920 - C26921 + C26922 - C26923) * C48416) *
               C22087 +
           ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C4868 +
            (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48574 +
            (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C4869 +
            (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
               C48376) *
              C48300 * C514 +
          ((C26761 * C4868 + C26762 * C48574 +
            (C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C4869 +
            (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48416) *
               C22087 +
           ((C26748 - C26747 + C26750 - C26749 + C26752 - C26751) * C4868 +
            (C26754 - C26753 + C26756 - C26755 + C26758 - C26757) * C48574 +
            (C48217 * C1823 - C47233 * C1820 + C48225 * C1824 - C47229 * C1821 +
             C26137 * C1825 - C47239 * C1822) *
                C4869 +
            (C48217 * C1829 - C47233 * C1826 + C48225 * C1830 - C47229 * C1827 +
             C26137 * C1831 - C47239 * C1828) *
                C48416) *
               C48376) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C4868 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48574 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C22087 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
             C28470 * C4869 + C28471 * C48416) *
                C48376) *
               C339 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C4868 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48574 +
             (C47233 * C870 - C48217 * C875 + C47229 * C871 - C48225 * C876 +
              C47239 * C872 - C26137 * C877) *
                 C4869 +
             (C47233 * C880 - C48217 * C885 + C47229 * C881 - C48225 * C886 +
              C47239 * C882 - C26137 * C887) *
                 C48416) *
                C22087 +
            (C28472 * C4868 + C28473 * C48574 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C4869 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C447 +
          ((((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C4868 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48574 +
             C28472 * C4869 + C28473 * C48416) *
                C22087 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C4868 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48574 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C4869 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C339 +
           ((C28470 * C4868 + C28471 * C48574 +
             (C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C4869 +
             (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48416) *
                C22087 +
            ((C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C4868 +
             (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48574 +
             (C48217 * C2270 - C47233 * C2261 + C48225 * C2271 -
              C47229 * C2262 + C26137 * C2272 - C47239 * C2263) *
                 C4869 +
             (C48217 * C2279 - C47233 * C2273 + C48225 * C2280 -
              C47229 * C2274 + C26137 * C2281 - C47239 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C4868 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48574 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C22087 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
             C28470 * C4869 + C28471 * C48416) *
                C48376) *
               C721 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C4868 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48574 +
             (C47233 * C870 - C48217 * C875 + C47229 * C871 - C48225 * C876 +
              C47239 * C872 - C26137 * C877) *
                 C4869 +
             (C47233 * C880 - C48217 * C885 + C47229 * C881 - C48225 * C886 +
              C47239 * C882 - C26137 * C887) *
                 C48416) *
                C22087 +
            (C28472 * C4868 + C28473 * C48574 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C4869 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C4868 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C48574 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C4869 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C22087 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C4868 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C48574 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C4869 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C721 +
           (((C27897 - C27896 + C27899 - C27898 + C27901 - C27900) * C4868 +
             (C27903 - C27902 + C27905 - C27904 + C27907 - C27906) * C48574 +
             (C48217 * C876 - C47233 * C871 + C48225 * C877 - C47229 * C872 +
              C26137 * C878 - C47239 * C873) *
                 C4869 +
             (C48217 * C886 - C47233 * C881 + C48225 * C887 - C47229 * C882 +
              C26137 * C888 - C47239 * C883) *
                 C48416) *
                C22087 +
            ((C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C4868 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48574 +
             (C48217 * C2265 - C47233 * C2259 + C48225 * C2266 -
              C47229 * C2260 + C26137 * C2545 - C47239 * C2544) *
                 C4869 +
             (C48217 * C2277 - C47233 * C2268 + C48225 * C2278 -
              C47229 * C2269 + C26137 * C2547 - C47239 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C4868 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C48574 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C22087 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
             C28470 * C4869 + C28471 * C48416) *
                C48376) *
               C721 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C4868 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48574 +
             (C47233 * C870 - C48217 * C875 + C47229 * C871 - C48225 * C876 +
              C47239 * C872 - C26137 * C877) *
                 C4869 +
             (C47233 * C880 - C48217 * C885 + C47229 * C881 - C48225 * C886 +
              C47239 * C882 - C26137 * C887) *
                 C48416) *
                C22087 +
            (C28472 * C4868 + C28473 * C48574 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C4869 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C229 +
          ((((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C4868 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48574 +
             C28472 * C4869 + C28473 * C48416) *
                C22087 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C4868 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C48574 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C4869 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C721 +
           ((C28470 * C4868 + C28471 * C48574 +
             (C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C4869 +
             (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48416) *
                C22087 +
            ((C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C4868 +
             (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48574 +
             (C48217 * C2270 - C47233 * C2261 + C48225 * C2271 -
              C47229 * C2262 + C26137 * C2272 - C47239 * C2263) *
                 C4869 +
             (C48217 * C2279 - C47233 * C2273 + C48225 * C2280 -
              C47229 * C2274 + C26137 * C2281 - C47239 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C4868 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48574 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C4869 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
               C22087 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C4868 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C48574 +
            C28470 * C4869 + C28471 * C48416) *
               C48376) *
              C867 +
          (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C4868 +
            (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48574 +
            (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C4869 +
            (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48416) *
               C22087 +
           (C28472 * C4868 + C28473 * C48574 +
            (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C4869 +
            (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
               C48376) *
              C868 +
          (((C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C4868 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C48574 +
            (C48217 * C2698 - C47233 * C2694 + C48225 * C2699 - C47229 * C2695 +
             C26137 * C2700 - C47239 * C2696) *
                C4869 +
            (C48217 * C2706 - C47233 * C2701 + C48225 * C2707 - C47229 * C2702 +
             C26137 * C2708 - C47239 * C2703) *
                C48416) *
               C22087 +
           ((C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C4868 +
            (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48574 +
            (C48217 * C3163 - C47233 * C3160 + C48225 * C3164 - C47229 * C3161 +
             C26137 * C3165 - C47239 * C3162) *
                C4869 +
            (C48217 * C3169 - C47233 * C3166 + C48225 * C3170 - C47229 * C3167 +
             C26137 * C3171 - C47239 * C3168) *
                C48416) *
               C48376) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C118 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C48329) *
               C22087 +
           ((C48647 * C239 - C22089 * C233 + C48640 * C240 - C22090 * C234 +
             C48627 * C241 - C22091 * C235 + C48610 * C242 - C22092 * C236) *
                C118 +
            (C48647 * C251 - C22089 * C244 + C48640 * C252 - C22090 * C245 +
             C48627 * C253 - C22091 * C246 + C48610 * C254 - C22092 * C247) *
                C48329) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C118 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C48329) *
               C22087 +
           ((C22089 * C234 - C48647 * C240 + C22090 * C235 - C48640 * C241 +
             C22091 * C236 - C48627 * C242 + C22092 * C237 - C48610 * C243) *
                C118 +
            (C22089 * C245 - C48647 * C252 + C22090 * C246 - C48640 * C253 +
             C22091 * C247 - C48627 * C254 + C22092 * C248 - C48610 * C255) *
                C48329) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48647 * C128 - C22089 * C121 + C48640 * C129 - C22090 * C122 +
             C48627 * C130 - C22091 * C123 + C48610 * C136 - C22092 * C124) *
                C118 +
            (C48647 * C142 - C22089 * C133 + C48640 * C143 - C22090 * C134 +
             C48627 * C144 - C22091 * C135 + C48610 * C145 - C22092 * C137) *
                C48329) *
               C22087 +
           ((C48647 * C241 - C22089 * C235 + C48640 * C242 - C22090 * C236 +
             C48627 * C243 - C22091 * C237 + C48610 * C249 - C22092 * C238) *
                C118 +
            (C48647 * C253 - C22089 * C246 + C48640 * C254 - C22090 * C247 +
             C48627 * C255 - C22091 * C248 + C48610 * C256 - C22092 * C250) *
                C48329) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C118 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48329) *
               C48648 +
           ((C23231 * C239 - C23237 * C233 + C48222 * C240 - C23238 * C234) *
                C118 +
            (C23231 * C251 - C23237 * C244 + C48222 * C252 - C23238 * C245) *
                C48329) *
               C48644 +
           ((C23231 * C522 - C23237 * C517 + C48222 * C523 - C23238 * C518) *
                C118 +
            (C23231 * C532 - C23237 * C527 + C48222 * C533 - C23238 * C528) *
                C48329) *
               C48634 +
           ((C23231 * C1159 - C23237 * C1155 + C48222 * C1160 -
             C23238 * C1156) *
                C118 +
            (C23231 * C1167 - C23237 * C1162 + C48222 * C1168 -
             C23238 * C1163) *
                C48329) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C118 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48329) *
               C48648 +
           ((C23237 * C234 - C23231 * C240 + C23238 * C235 - C48222 * C241) *
                C118 +
            (C23237 * C245 - C23231 * C252 + C23238 * C246 - C48222 * C253) *
                C48329) *
               C48644 +
           ((C23237 * C518 - C23231 * C523 + C23238 * C519 - C48222 * C524) *
                C118 +
            (C23237 * C528 - C23231 * C533 + C23238 * C529 - C48222 * C534) *
                C48329) *
               C48634 +
           ((C23237 * C1156 - C23231 * C1160 + C23238 * C1157 -
             C48222 * C1161) *
                C118 +
            (C23237 * C1163 - C23231 * C1168 + C23238 * C1164 -
             C48222 * C1169) *
                C48329) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C118 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C48329) *
               C48648 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C118 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C48329) *
               C48644 +
           ((C23231 * C524 - C23237 * C519 + C48222 * C525 - C23238 * C520) *
                C118 +
            (C23231 * C534 - C23237 * C529 + C48222 * C535 - C23238 * C530) *
                C48329) *
               C48634 +
           ((C23231 * C1161 - C23237 * C1157 + C48222 * C1165 -
             C23238 * C1158) *
                C118 +
            (C23231 * C1169 - C23237 * C1164 + C48222 * C1170 -
             C23238 * C1166) *
                C48329) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22089 * C517 - C48647 * C522 + C22090 * C518 - C48640 * C523 +
              C22091 * C519 - C48627 * C524 + C22092 * C520 - C48610 * C525) *
                 C118 +
             (C22089 * C527 - C48647 * C532 + C22090 * C528 - C48640 * C533 +
              C22091 * C529 - C48627 * C534 + C22092 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
              C22246) *
                 C118 +
             (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
              C22254) *
                 C48329) *
                C22087 +
            ((C48647 * C523 - C22089 * C518 + C48640 * C524 - C22090 * C519 +
              C48627 * C525 - C22091 * C520 + C48610 * C526 - C22092 * C521) *
                 C118 +
             (C48647 * C533 - C22089 * C528 + C48640 * C534 - C22090 * C529 +
              C48627 * C535 - C22091 * C530 + C48610 * C536 - C22092 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            ((C23378 - C23379 + C23380 - C23381) * C118 +
             (C23382 - C23383 + C23384 - C23385) * C48329) *
                C48634 +
            ((C23386 - C23387 + C23388 - C23389) * C118 +
             (C23390 - C23391 + C23392 - C23393) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23237 * C1637 - C23231 * C1640 + C23238 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C23237 * C1643 - C23231 * C1646 + C23238 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C118 +
             (C23399 - C23398 + C23401 - C23400) * C48329) *
                C48648 +
            ((C23403 - C23402 + C23405 - C23404) * C118 +
             (C23407 - C23406 + C23409 - C23408) * C48329) *
                C48644 +
            ((C23411 - C23410 + C23413 - C23412) * C118 +
             (C23415 - C23414 + C23417 - C23416) * C48329) *
                C48634 +
            ((C23231 * C1641 - C23237 * C1638 + C48222 * C1642 -
              C23238 * C1639) *
                 C118 +
             (C23231 * C1647 - C23237 * C1644 + C48222 * C1648 -
              C23238 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C339 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22089 * C619 - C48647 * C624 + C22090 * C620 - C48640 * C625 +
              C22091 * C621 - C48627 * C626 + C22092 * C622 - C48610 * C627) *
                 C118 +
             (C22089 * C629 - C48647 * C634 + C22090 * C630 - C48640 * C635 +
              C22091 * C631 - C48627 * C636 + C22092 * C632 - C48610 * C637) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C339 +
           (((C48647 * C348 - C22089 * C342 + C48640 * C349 - C22090 * C343 +
              C48627 * C350 - C22091 * C344 + C48610 * C351 - C22092 * C345) *
                 C118 +
             (C48647 * C360 - C22089 * C353 + C48640 * C361 - C22090 * C354 +
              C48627 * C362 - C22091 * C355 + C48610 * C363 - C22092 * C356) *
                 C48329) *
                C22087 +
            ((C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
              C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                 C118 +
             (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
              C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            ((C23378 - C23379 + C23380 - C23381) * C118 +
             (C23382 - C23383 + C23384 - C23385) * C48329) *
                C48634 +
            ((C23386 - C23387 + C23388 - C23389) * C118 +
             (C23390 - C23391 + C23392 - C23393) * C48329) *
                C48616) *
               C339 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23237 * C619 - C23231 * C624 + C23238 * C620 - C48222 * C625) *
                 C118 +
             (C23237 * C629 - C23231 * C634 + C23238 * C630 - C48222 * C635) *
                 C48329) *
                C48644 +
            ((C23237 * C1365 - C23231 * C1369 + C23238 * C1366 -
              C48222 * C1370) *
                 C118 +
             (C23237 * C1372 - C23231 * C1377 + C23238 * C1373 -
              C48222 * C1378) *
                 C48329) *
                C48634 +
            ((C23237 * C1820 - C23231 * C1823 + C23238 * C1821 -
              C48222 * C1824) *
                 C118 +
             (C23237 * C1826 - C23231 * C1829 + C23238 * C1827 -
              C48222 * C1830) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C339 +
           (((C23231 * C348 - C23237 * C342 + C48222 * C349 - C23238 * C343) *
                 C118 +
             (C23231 * C360 - C23237 * C353 + C48222 * C361 - C23238 * C354) *
                 C48329) *
                C48648 +
            ((C23231 * C625 - C23237 * C620 + C48222 * C626 - C23238 * C621) *
                 C118 +
             (C23231 * C635 - C23237 * C630 + C48222 * C636 - C23238 * C631) *
                 C48329) *
                C48644 +
            ((C23231 * C1370 - C23237 * C1366 + C48222 * C1371 -
              C23238 * C1367) *
                 C118 +
             (C23231 * C1378 - C23237 * C1373 + C48222 * C1379 -
              C23238 * C1374) *
                 C48329) *
                C48634 +
            ((C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C118 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22089 * C517 - C48647 * C522 + C22090 * C518 - C48640 * C523 +
              C22091 * C519 - C48627 * C524 + C22092 * C520 - C48610 * C525) *
                 C118 +
             (C22089 * C527 - C48647 * C532 + C22090 * C528 - C48640 * C533 +
              C22091 * C529 - C48627 * C534 + C22092 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
              C22246) *
                 C118 +
             (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
              C22254) *
                 C48329) *
                C22087 +
            ((C48647 * C523 - C22089 * C518 + C48640 * C524 - C22090 * C519 +
              C48627 * C525 - C22091 * C520 + C48610 * C526 - C22092 * C521) *
                 C118 +
             (C48647 * C533 - C22089 * C528 + C48640 * C534 - C22090 * C529 +
              C48627 * C535 - C22091 * C530 + C48610 * C536 - C22092 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            ((C23378 - C23379 + C23380 - C23381) * C118 +
             (C23382 - C23383 + C23384 - C23385) * C48329) *
                C48634 +
            ((C23386 - C23387 + C23388 - C23389) * C118 +
             (C23390 - C23391 + C23392 - C23393) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23237 * C1637 - C23231 * C1640 + C23238 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C23237 * C1643 - C23231 * C1646 + C23238 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C118 +
             (C23399 - C23398 + C23401 - C23400) * C48329) *
                C48648 +
            ((C23403 - C23402 + C23405 - C23404) * C118 +
             (C23407 - C23406 + C23409 - C23408) * C48329) *
                C48644 +
            ((C23411 - C23410 + C23413 - C23412) * C118 +
             (C23415 - C23414 + C23417 - C23416) * C48329) *
                C48634 +
            ((C23231 * C1641 - C23237 * C1638 + C48222 * C1642 -
              C23238 * C1639) *
                 C118 +
             (C23231 * C1647 - C23237 * C1644 + C48222 * C1648 -
              C23238 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C118 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C48329) *
               C22087 +
           ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
             C22231) *
                C118 +
            (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
             C22239) *
                C48329) *
               C48376) *
              C48300 * C513 +
          (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C118 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C48329) *
               C22087 +
           ((C22614 - C22615 + C22616 - C22617 + C22618 - C22619 + C22620 -
             C22621) *
                C118 +
            (C22622 - C22623 + C22624 - C22625 + C22626 - C22627 + C22628 -
             C22629) *
                C48329) *
               C48376) *
              C48300 * C514 +
          (((C22615 - C22614 + C22617 - C22616 + C22619 - C22618 + C22621 -
             C22620) *
                C118 +
            (C22623 - C22622 + C22625 - C22624 + C22627 - C22626 + C22629 -
             C22628) *
                C48329) *
               C22087 +
           ((C48647 * C1159 - C22089 * C1155 + C48640 * C1160 - C22090 * C1156 +
             C48627 * C1161 - C22091 * C1157 + C48610 * C1165 -
             C22092 * C1158) *
                C118 +
            (C48647 * C1167 - C22089 * C1162 + C48640 * C1168 - C22090 * C1163 +
             C48627 * C1169 - C22091 * C1164 + C48610 * C1170 -
             C22092 * C1166) *
                C48329) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C118 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48329) *
               C48648 +
           ((C23370 - C23371 + C23372 - C23373) * C118 +
            (C23374 - C23375 + C23376 - C23377) * C48329) *
               C48644 +
           C23800 * C48634 + C23801 * C48616) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C118 +
            (C23375 - C23374 + C23377 - C23376) * C48329) *
               C48648 +
           ((C23379 - C23378 + C23381 - C23380) * C118 +
            (C23383 - C23382 + C23385 - C23384) * C48329) *
               C48644 +
           ((C23387 - C23386 + C23389 - C23388) * C118 +
            (C23391 - C23390 + C23393 - C23392) * C48329) *
               C48634 +
           ((C23784 - C23785 + C23786 - C23787) * C118 +
            (C23788 - C23789 + C23790 - C23791) * C48329) *
               C48616) *
              C48300 * C514 +
          (C23800 * C48648 + C23801 * C48644 +
           ((C23785 - C23784 + C23787 - C23786) * C118 +
            (C23789 - C23788 + C23791 - C23790) * C48329) *
               C48634 +
           ((C23231 * C8993 - C23237 * C8991 + C48222 * C8995 -
             C23238 * C8992) *
                C118 +
            (C23231 * C8997 - C23237 * C8994 + C48222 * C8998 -
             C23238 * C8996) *
                C48329) *
               C48616) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C339 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
              C22767) *
                 C118 +
             (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
              C22775) *
                 C48329) *
                C48376) *
               C48603) *
              C447 +
          ((((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22614 - C22615 + C22616 - C22617 + C22618 - C22619 + C22620 -
              C22621) *
                 C118 +
             (C22622 - C22623 + C22624 - C22625 + C22626 - C22627 + C22628 -
              C22629) *
                 C48329) *
                C48376) *
               C339 +
           (((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
              C22766) *
                 C118 +
             (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
              C22774) *
                 C48329) *
                C22087 +
            ((C48647 * C1369 - C22089 * C1365 + C48640 * C1370 -
              C22090 * C1366 + C48627 * C1371 - C22091 * C1367 +
              C48610 * C1375 - C22092 * C1368) *
                 C118 +
             (C48647 * C1377 - C22089 * C1372 + C48640 * C1378 -
              C22090 * C1373 + C48627 * C1379 - C22091 * C1374 +
              C48610 * C1380 - C22092 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            C23800 * C48634 + C23801 * C48616) *
               C339 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23932 - C23933 + C23934 - C23935) * C118 +
             (C23936 - C23937 + C23938 - C23939) * C48329) *
                C48644 +
            ((C23940 - C23941 + C23942 - C23943) * C118 +
             (C23944 - C23945 + C23946 - C23947) * C48329) *
                C48634 +
            ((C23948 - C23949 + C23950 - C23951) * C118 +
             (C23952 - C23953 + C23954 - C23955) * C48329) *
                C48616) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23784 - C23785 + C23786 - C23787) * C118 +
             (C23788 - C23789 + C23790 - C23791) * C48329) *
                C48616) *
               C339 +
           (((C23933 - C23932 + C23935 - C23934) * C118 +
             (C23937 - C23936 + C23939 - C23938) * C48329) *
                C48648 +
            ((C23941 - C23940 + C23943 - C23942) * C118 +
             (C23945 - C23944 + C23947 - C23946) * C48329) *
                C48644 +
            ((C23949 - C23948 + C23951 - C23950) * C118 +
             (C23953 - C23952 + C23955 - C23954) * C48329) *
                C48634 +
            ((C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
              C23238 * C9114) *
                 C118 +
             (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
              C23238 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C721 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
              C22767) *
                 C118 +
             (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
              C22775) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
              C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                 C118 +
             (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
              C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                 C48329) *
                C22087 +
            ((C22240 - C22241 + C22242 - C22243 + C22244 - C22245 + C22246 -
              C22247) *
                 C118 +
             (C22248 - C22249 + C22250 - C22251 + C22252 - C22253 + C22254 -
              C22255) *
                 C48329) *
                C48376) *
               C721 +
           (((C48647 * C348 - C22089 * C342 + C48640 * C349 - C22090 * C343 +
              C48627 * C350 - C22091 * C344 + C48610 * C351 - C22092 * C345) *
                 C118 +
             (C48647 * C360 - C22089 * C353 + C48640 * C361 - C22090 * C354 +
              C48627 * C362 - C22091 * C355 + C48610 * C363 - C22092 * C356) *
                 C48329) *
                C22087 +
            ((C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
              C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                 C118 +
             (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
              C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            C23800 * C48634 + C23801 * C48616) *
               C721 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23932 - C23933 + C23934 - C23935) * C118 +
             (C23936 - C23937 + C23938 - C23939) * C48329) *
                C48644 +
            ((C23940 - C23941 + C23942 - C23943) * C118 +
             (C23944 - C23945 + C23946 - C23947) * C48329) *
                C48634 +
            ((C23948 - C23949 + C23950 - C23951) * C118 +
             (C23952 - C23953 + C23954 - C23955) * C48329) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C118 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48329) *
                C48648 +
            ((C23394 - C23395 + C23396 - C23397) * C118 +
             (C23398 - C23399 + C23400 - C23401) * C48329) *
                C48644 +
            ((C23402 - C23403 + C23404 - C23405) * C118 +
             (C23406 - C23407 + C23408 - C23409) * C48329) *
                C48634 +
            ((C23410 - C23411 + C23412 - C23413) * C118 +
             (C23414 - C23415 + C23416 - C23417) * C48329) *
                C48616) *
               C721 +
           (((C23231 * C348 - C23237 * C342 + C48222 * C349 - C23238 * C343) *
                 C118 +
             (C23231 * C360 - C23237 * C353 + C48222 * C361 - C23238 * C354) *
                 C48329) *
                C48648 +
            ((C23231 * C625 - C23237 * C620 + C48222 * C626 - C23238 * C621) *
                 C118 +
             (C23231 * C635 - C23237 * C630 + C48222 * C636 - C23238 * C631) *
                 C48329) *
                C48644 +
            ((C23231 * C1370 - C23237 * C1366 + C48222 * C1371 -
              C23238 * C1367) *
                 C118 +
             (C23231 * C1378 - C23237 * C1373 + C48222 * C1379 -
              C23238 * C1374) *
                 C48329) *
                C48634 +
            ((C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C118 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
              C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                 C118 +
             (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
              C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                 C48329) *
                C22087 +
            ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
              C22231) *
                 C118 +
             (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
              C22239) *
                 C48329) *
                C48376) *
               C721 +
           (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
              C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                 C118 +
             (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
              C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                 C48329) *
                C22087 +
            ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
              C22767) *
                 C118 +
             (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
              C22775) *
                 C48329) *
                C48376) *
               C48603) *
              C229 +
          ((((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
              C22230) *
                 C118 +
             (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
              C22238) *
                 C48329) *
                C22087 +
            ((C22614 - C22615 + C22616 - C22617 + C22618 - C22619 + C22620 -
              C22621) *
                 C118 +
             (C22622 - C22623 + C22624 - C22625 + C22626 - C22627 + C22628 -
              C22629) *
                 C48329) *
                C48376) *
               C721 +
           (((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
              C22766) *
                 C118 +
             (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
              C22774) *
                 C48329) *
                C22087 +
            ((C48647 * C1369 - C22089 * C1365 + C48640 * C1370 -
              C22090 * C1366 + C48627 * C1371 - C22091 * C1367 +
              C48610 * C1375 - C22092 * C1368) *
                 C118 +
             (C48647 * C1377 - C22089 * C1372 + C48640 * C1378 -
              C22090 * C1373 + C48627 * C1379 - C22091 * C1374 +
              C48610 * C1380 - C22092 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C118 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48329) *
                C48648 +
            ((C23370 - C23371 + C23372 - C23373) * C118 +
             (C23374 - C23375 + C23376 - C23377) * C48329) *
                C48644 +
            C23800 * C48634 + C23801 * C48616) *
               C721 +
           (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                 C118 +
             (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                 C48329) *
                C48648 +
            ((C23932 - C23933 + C23934 - C23935) * C118 +
             (C23936 - C23937 + C23938 - C23939) * C48329) *
                C48644 +
            ((C23940 - C23941 + C23942 - C23943) * C118 +
             (C23944 - C23945 + C23946 - C23947) * C48329) *
                C48634 +
            ((C23948 - C23949 + C23950 - C23951) * C118 +
             (C23952 - C23953 + C23954 - C23955) * C48329) *
                C48616) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C118 +
             (C23375 - C23374 + C23377 - C23376) * C48329) *
                C48648 +
            ((C23379 - C23378 + C23381 - C23380) * C118 +
             (C23383 - C23382 + C23385 - C23384) * C48329) *
                C48644 +
            ((C23387 - C23386 + C23389 - C23388) * C118 +
             (C23391 - C23390 + C23393 - C23392) * C48329) *
                C48634 +
            ((C23784 - C23785 + C23786 - C23787) * C118 +
             (C23788 - C23789 + C23790 - C23791) * C48329) *
                C48616) *
               C721 +
           (((C23933 - C23932 + C23935 - C23934) * C118 +
             (C23937 - C23936 + C23939 - C23938) * C48329) *
                C48648 +
            ((C23941 - C23940 + C23943 - C23942) * C118 +
             (C23945 - C23944 + C23947 - C23946) * C48329) *
                C48644 +
            ((C23949 - C23948 + C23951 - C23950) * C118 +
             (C23953 - C23952 + C23955 - C23954) * C48329) *
                C48634 +
            ((C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
              C23238 * C9114) *
                 C118 +
             (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
              C23238 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C118 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C48329) *
               C22087 +
           ((C22224 - C22225 + C22226 - C22227 + C22228 - C22229 + C22230 -
             C22231) *
                C118 +
            (C22232 - C22233 + C22234 - C22235 + C22236 - C22237 + C22238 -
             C22239) *
                C48329) *
               C48376) *
              C867 +
          (((C22089 * C341 - C48647 * C347 + C22090 * C342 - C48640 * C348 +
             C22091 * C343 - C48627 * C349 + C22092 * C344 - C48610 * C350) *
                C118 +
            (C22089 * C352 - C48647 * C359 + C22090 * C353 - C48640 * C360 +
             C22091 * C354 - C48627 * C361 + C22092 * C355 - C48610 * C362) *
                C48329) *
               C22087 +
           ((C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C118 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48329) *
               C48376) *
              C868 +
          (((C48647 * C875 - C22089 * C870 + C48640 * C876 - C22090 * C871 +
             C48627 * C877 - C22091 * C872 + C48610 * C878 - C22092 * C873) *
                C118 +
            (C48647 * C885 - C22089 * C880 + C48640 * C886 - C22090 * C881 +
             C48627 * C887 - C22091 * C882 + C48610 * C888 - C22092 * C883) *
                C48329) *
               C22087 +
           ((C48647 * C2264 - C22089 * C2258 + C48640 * C2265 - C22090 * C2259 +
             C48627 * C2266 - C22091 * C2260 + C48610 * C2545 -
             C22092 * C2544) *
                C118 +
            (C48647 * C2276 - C22089 * C2267 + C48640 * C2277 - C22090 * C2268 +
             C48627 * C2278 - C22091 * C2269 + C48610 * C2547 -
             C22092 * C2546) *
                C48329) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C118 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48329) *
               C48648 +
           ((C23370 - C23371 + C23372 - C23373) * C118 +
            (C23374 - C23375 + C23376 - C23377) * C48329) *
               C48644 +
           C23800 * C48634 + C23801 * C48616) *
              C867 +
          (((C23237 * C341 - C23231 * C347 + C23238 * C342 - C48222 * C348) *
                C118 +
            (C23237 * C352 - C23231 * C359 + C23238 * C353 - C48222 * C360) *
                C48329) *
               C48648 +
           ((C23932 - C23933 + C23934 - C23935) * C118 +
            (C23936 - C23937 + C23938 - C23939) * C48329) *
               C48644 +
           ((C23940 - C23941 + C23942 - C23943) * C118 +
            (C23944 - C23945 + C23946 - C23947) * C48329) *
               C48634 +
           ((C23948 - C23949 + C23950 - C23951) * C118 +
            (C23952 - C23953 + C23954 - C23955) * C48329) *
               C48616) *
              C868 +
          (((C23231 * C875 - C23237 * C870 + C48222 * C876 - C23238 * C871) *
                C118 +
            (C23231 * C885 - C23237 * C880 + C48222 * C886 - C23238 * C881) *
                C48329) *
               C48648 +
           ((C23231 * C2264 - C23237 * C2258 + C48222 * C2265 -
             C23238 * C2259) *
                C118 +
            (C23231 * C2276 - C23237 * C2267 + C48222 * C2277 -
             C23238 * C2268) *
                C48329) *
               C48644 +
           ((C23231 * C2270 - C23237 * C2261 + C48222 * C2271 -
             C23238 * C2262) *
                C118 +
            (C23231 * C2279 - C23237 * C2273 + C48222 * C2280 -
             C23238 * C2274) *
                C48329) *
               C48634 +
           ((C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
             C23238 * C9880) *
                C118 +
            (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
             C23238 * C9882) *
                C48329) *
               C48616) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C30748 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C30746 +
            (C12670 - C12671 + C12672 - C12673) * C30749 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C48372 +
           ((C11176 - C11177 + C11178 - C11179) * C30748 +
            (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
            C13262 * C48416) *
               C48379 +
           (C11598 * C30748 + C11599 * C30746 + C13033 * C30749 +
            C13034 * C48416) *
               C26140) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C30748 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C30746 +
            (C12678 - C12679 + C12680 - C12681) * C30749 +
            (C12682 - C12683 + C12684 - C12685) * C48416) *
               C48372 +
           ((C11200 - C11201 + C11202 - C11203) * C30748 +
            (C11204 - C11205 + C11206 - C11207) * C30746 +
            (C12460 - C12461 + C12462 - C12463) * C30749 +
            (C12464 - C12465 + C12466 - C12467) * C48416) *
               C48379 +
           ((C11208 - C11209 + C11210 - C11211) * C30748 +
            (C11212 - C11213 + C11214 - C11215) * C30746 +
            (C12468 - C12469 + C12470 - C12471) * C30749 +
            (C12472 - C12473 + C12474 - C12475) * C48416) *
               C26140) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C30748 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C30746 +
            (C48551 * C349 - C47223 * C343 + C48222 * C350 - C47204 * C344) *
                C30749 +
            (C48551 * C361 - C47223 * C354 + C48222 * C362 - C47204 * C355) *
                C48416) *
               C48372 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C30748 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C30746 +
            (C48551 * C626 - C47223 * C621 + C48222 * C627 - C47204 * C622) *
                C30749 +
            (C48551 * C636 - C47223 * C631 + C48222 * C637 - C47204 * C632) *
                C48416) *
               C48379 +
           ((C48551 * C524 - C47223 * C519 + C48222 * C525 - C47204 * C520) *
                C30748 +
            (C48551 * C534 - C47223 * C529 + C48222 * C535 - C47204 * C530) *
                C30746 +
            (C48551 * C1371 - C47223 * C1367 + C48222 * C1375 -
             C47204 * C1368) *
                C30749 +
            (C48551 * C1379 - C47223 * C1374 + C48222 * C1380 -
             C47204 * C1376) *
                C48416) *
               C26140) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C30748 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C30746 +
             (C12670 - C12671 + C12672 - C12673) * C30749 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C48372 +
            ((C11176 - C11177 + C11178 - C11179) * C30748 +
             (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
             C13262 * C48416) *
                C48379 +
            (C11598 * C30748 + C11599 * C30746 + C13033 * C30749 +
             C13034 * C48416) *
                C26140) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C30748 +
             (C11181 - C11180 + C11183 - C11182) * C30746 + C13263 * C30749 +
             C13264 * C48416) *
                C48372 +
            ((C11185 - C11184 + C11187 - C11186) * C30748 +
             (C11189 - C11188 + C11191 - C11190) * C30746 + C13265 * C30749 +
             C13266 * C48416) *
                C48379 +
            ((C11193 - C11192 + C11195 - C11194) * C30748 +
             (C11197 - C11196 + C11199 - C11198) * C30746 +
             (C11754 - C11755 + C11756 - C11757) * C30749 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C26140) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C30748 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C30746 +
             (C12678 - C12679 + C12680 - C12681) * C30749 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C48372 +
            ((C11200 - C11201 + C11202 - C11203) * C30748 +
             (C11204 - C11205 + C11206 - C11207) * C30746 +
             (C12460 - C12461 + C12462 - C12463) * C30749 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C48379 +
            ((C11208 - C11209 + C11210 - C11211) * C30748 +
             (C11212 - C11213 + C11214 - C11215) * C30746 +
             (C12468 - C12469 + C12470 - C12471) * C30749 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C26140) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C30748 +
             (C11205 - C11204 + C11207 - C11206) * C30746 +
             (C12461 - C12460 + C12463 - C12462) * C30749 +
             (C12465 - C12464 + C12467 - C12466) * C48416) *
                C48372 +
            ((C11209 - C11208 + C11211 - C11210) * C30748 +
             (C11213 - C11212 + C11215 - C11214) * C30746 +
             (C12469 - C12468 + C12471 - C12470) * C30749 +
             (C12473 - C12472 + C12475 - C12474) * C48416) *
                C48379 +
            ((C11217 - C11216 + C11219 - C11218) * C30748 +
             (C11221 - C11220 + C11223 - C11222) * C30746 +
             (C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C30749 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48416) *
                C26140) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C30748 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C30746 +
             (C12670 - C12671 + C12672 - C12673) * C30749 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C48372 +
            ((C11176 - C11177 + C11178 - C11179) * C30748 +
             (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
             C13262 * C48416) *
                C48379 +
            (C11598 * C30748 + C11599 * C30746 + C13033 * C30749 +
             C13034 * C48416) *
                C26140) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C30748 +
             (C12675 - C12674 + C12677 - C12676) * C30746 +
             (C13801 - C13802 + C13803 - C13804) * C30749 +
             (C13805 - C13806 + C13807 - C13808) * C48416) *
                C48372 +
            (C13263 * C30748 + C13264 * C30746 + C19250 * C30749 +
             C19251 * C48416) *
                C48379 +
            (C13265 * C30748 + C13266 * C30746 +
             (C13253 - C13254 + C13255 - C13256) * C30749 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C26140) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C30748 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C30746 +
             (C12678 - C12679 + C12680 - C12681) * C30749 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C48372 +
            ((C11200 - C11201 + C11202 - C11203) * C30748 +
             (C11204 - C11205 + C11206 - C11207) * C30746 +
             (C12460 - C12461 + C12462 - C12463) * C30749 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C48379 +
            ((C11208 - C11209 + C11210 - C11211) * C30748 +
             (C11212 - C11213 + C11214 - C11215) * C30746 +
             (C12468 - C12469 + C12470 - C12471) * C30749 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C26140) *
               C339 +
           (((C12679 - C12678 + C12681 - C12680) * C30748 +
             (C12683 - C12682 + C12685 - C12684) * C30746 +
             (C18691 - C18690 + C18693 - C18692) * C30749 +
             (C18695 - C18694 + C18697 - C18696) * C48416) *
                C48372 +
            ((C12461 - C12460 + C12463 - C12462) * C30748 +
             (C12465 - C12464 + C12467 - C12466) * C30746 +
             (C18489 - C18488 + C18491 - C18490) * C30749 +
             (C18493 - C18492 + C18495 - C18494) * C48416) *
                C48379 +
            ((C12469 - C12468 + C12471 - C12470) * C30748 +
             (C12473 - C12472 + C12475 - C12474) * C30746 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C30749 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48416) *
                C26140) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C30748 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C30746 +
             (C12670 - C12671 + C12672 - C12673) * C30749 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C48372 +
            ((C11176 - C11177 + C11178 - C11179) * C30748 +
             (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
             C13262 * C48416) *
                C48379 +
            (C11598 * C30748 + C11599 * C30746 + C13033 * C30749 +
             C13034 * C48416) *
                C26140) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C30748 +
             (C11181 - C11180 + C11183 - C11182) * C30746 + C13263 * C30749 +
             C13264 * C48416) *
                C48372 +
            ((C11185 - C11184 + C11187 - C11186) * C30748 +
             (C11189 - C11188 + C11191 - C11190) * C30746 + C13265 * C30749 +
             C13266 * C48416) *
                C48379 +
            ((C11193 - C11192 + C11195 - C11194) * C30748 +
             (C11197 - C11196 + C11199 - C11198) * C30746 +
             (C11754 - C11755 + C11756 - C11757) * C30749 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C26140) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C30748 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C30746 +
             (C12678 - C12679 + C12680 - C12681) * C30749 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C48372 +
            ((C11200 - C11201 + C11202 - C11203) * C30748 +
             (C11204 - C11205 + C11206 - C11207) * C30746 +
             (C12460 - C12461 + C12462 - C12463) * C30749 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C48379 +
            ((C11208 - C11209 + C11210 - C11211) * C30748 +
             (C11212 - C11213 + C11214 - C11215) * C30746 +
             (C12468 - C12469 + C12470 - C12471) * C30749 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C26140) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C30748 +
             (C11205 - C11204 + C11207 - C11206) * C30746 +
             (C12461 - C12460 + C12463 - C12462) * C30749 +
             (C12465 - C12464 + C12467 - C12466) * C48416) *
                C48372 +
            ((C11209 - C11208 + C11211 - C11210) * C30748 +
             (C11213 - C11212 + C11215 - C11214) * C30746 +
             (C12469 - C12468 + C12471 - C12470) * C30749 +
             (C12473 - C12472 + C12475 - C12474) * C48416) *
                C48379 +
            ((C11217 - C11216 + C11219 - C11218) * C30748 +
             (C11221 - C11220 + C11223 - C11222) * C30746 +
             (C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C30749 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48416) *
                C26140) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C30748 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C30746 +
            (C12670 - C12671 + C12672 - C12673) * C30749 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C48372 +
           ((C11176 - C11177 + C11178 - C11179) * C30748 +
            (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
            C13262 * C48416) *
               C48379 +
           C43614 * C26140) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C30748 +
            (C11181 - C11180 + C11183 - C11182) * C30746 + C13263 * C30749 +
            C13264 * C48416) *
               C48372 +
           ((C11185 - C11184 + C11187 - C11186) * C30748 +
            (C11189 - C11188 + C11191 - C11190) * C30746 + C13265 * C30749 +
            C13266 * C48416) *
               C48379 +
           ((C11193 - C11192 + C11195 - C11194) * C30748 +
            (C11197 - C11196 + C11199 - C11198) * C30746 +
            (C11754 - C11755 + C11756 - C11757) * C30749 +
            (C11758 - C11759 + C11760 - C11761) * C48416) *
               C26140) *
              C48300 * C514 +
          (C43614 * C48372 +
           (C11600 * C30748 + C11601 * C30746 +
            (C11755 - C11754 + C11757 - C11756) * C30749 +
            (C11759 - C11758 + C11761 - C11760) * C48416) *
               C48379 +
           ((C11591 - C11590 + C11593 - C11592) * C30748 +
            (C11595 - C11594 + C11597 - C11596) * C30746 +
            (C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
             C47204 * C9114) *
                C30749 +
            (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
             C47204 * C9118) *
                C48416) *
               C26140) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C30748 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C30746 +
             (C12670 - C12671 + C12672 - C12673) * C30749 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C48372 +
            ((C11176 - C11177 + C11178 - C11179) * C30748 +
             (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
             C13262 * C48416) *
                C48379 +
            C43614 * C26140) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C30748 +
             (C12675 - C12674 + C12677 - C12676) * C30746 +
             (C13801 - C13802 + C13803 - C13804) * C30749 +
             (C13805 - C13806 + C13807 - C13808) * C48416) *
                C48372 +
            (C13263 * C30748 + C13264 * C30746 + C19250 * C30749 +
             C19251 * C48416) *
                C48379 +
            (C13265 * C30748 + C13266 * C30746 +
             (C13253 - C13254 + C13255 - C13256) * C30749 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C26140) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C30748 +
             (C11181 - C11180 + C11183 - C11182) * C30746 + C13263 * C30749 +
             C13264 * C48416) *
                C48372 +
            ((C11185 - C11184 + C11187 - C11186) * C30748 +
             (C11189 - C11188 + C11191 - C11190) * C30746 + C13265 * C30749 +
             C13266 * C48416) *
                C48379 +
            ((C11193 - C11192 + C11195 - C11194) * C30748 +
             (C11197 - C11196 + C11199 - C11198) * C30746 +
             (C11754 - C11755 + C11756 - C11757) * C30749 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C26140) *
               C339 +
           ((C13261 * C30748 + C13262 * C30746 + C19248 * C30749 +
             C19249 * C48416) *
                C48372 +
            (C13033 * C30748 + C13034 * C30746 +
             (C13254 - C13253 + C13256 - C13255) * C30749 +
             (C13258 - C13257 + C13260 - C13259) * C48416) *
                C48379 +
            ((C11755 - C11754 + C11757 - C11756) * C30748 +
             (C11759 - C11758 + C11761 - C11760) * C30746 +
             (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
              C47204 * C9880) *
                 C30749 +
             (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
              C47204 * C9882) *
                 C48416) *
                C26140) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C30748 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C30746 +
             (C12670 - C12671 + C12672 - C12673) * C30749 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C48372 +
            ((C11176 - C11177 + C11178 - C11179) * C30748 +
             (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
             C13262 * C48416) *
                C48379 +
            C43614 * C26140) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C30748 +
             (C12675 - C12674 + C12677 - C12676) * C30746 +
             (C13801 - C13802 + C13803 - C13804) * C30749 +
             (C13805 - C13806 + C13807 - C13808) * C48416) *
                C48372 +
            (C13263 * C30748 + C13264 * C30746 + C19250 * C30749 +
             C19251 * C48416) *
                C48379 +
            (C13265 * C30748 + C13266 * C30746 +
             (C13253 - C13254 + C13255 - C13256) * C30749 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C26140) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C30748 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C30746 +
             (C12678 - C12679 + C12680 - C12681) * C30749 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C48372 +
            ((C11200 - C11201 + C11202 - C11203) * C30748 +
             (C11204 - C11205 + C11206 - C11207) * C30746 +
             (C12460 - C12461 + C12462 - C12463) * C30749 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C48379 +
            ((C11208 - C11209 + C11210 - C11211) * C30748 +
             (C11212 - C11213 + C11214 - C11215) * C30746 +
             (C12468 - C12469 + C12470 - C12471) * C30749 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C26140) *
               C721 +
           (((C12679 - C12678 + C12681 - C12680) * C30748 +
             (C12683 - C12682 + C12685 - C12684) * C30746 +
             (C18691 - C18690 + C18693 - C18692) * C30749 +
             (C18695 - C18694 + C18697 - C18696) * C48416) *
                C48372 +
            ((C12461 - C12460 + C12463 - C12462) * C30748 +
             (C12465 - C12464 + C12467 - C12466) * C30746 +
             (C18489 - C18488 + C18491 - C18490) * C30749 +
             (C18493 - C18492 + C18495 - C18494) * C48416) *
                C48379 +
            ((C12469 - C12468 + C12471 - C12470) * C30748 +
             (C12473 - C12472 + C12475 - C12474) * C30746 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C30749 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48416) *
                C26140) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C30748 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C30746 +
             (C12670 - C12671 + C12672 - C12673) * C30749 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C48372 +
            ((C11176 - C11177 + C11178 - C11179) * C30748 +
             (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
             C13262 * C48416) *
                C48379 +
            C43614 * C26140) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C30748 +
             (C12675 - C12674 + C12677 - C12676) * C30746 +
             (C13801 - C13802 + C13803 - C13804) * C30749 +
             (C13805 - C13806 + C13807 - C13808) * C48416) *
                C48372 +
            (C13263 * C30748 + C13264 * C30746 + C19250 * C30749 +
             C19251 * C48416) *
                C48379 +
            (C13265 * C30748 + C13266 * C30746 +
             (C13253 - C13254 + C13255 - C13256) * C30749 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C26140) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C30748 +
             (C11181 - C11180 + C11183 - C11182) * C30746 + C13263 * C30749 +
             C13264 * C48416) *
                C48372 +
            ((C11185 - C11184 + C11187 - C11186) * C30748 +
             (C11189 - C11188 + C11191 - C11190) * C30746 + C13265 * C30749 +
             C13266 * C48416) *
                C48379 +
            ((C11193 - C11192 + C11195 - C11194) * C30748 +
             (C11197 - C11196 + C11199 - C11198) * C30746 +
             (C11754 - C11755 + C11756 - C11757) * C30749 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C26140) *
               C721 +
           ((C13261 * C30748 + C13262 * C30746 + C19248 * C30749 +
             C19249 * C48416) *
                C48372 +
            (C13033 * C30748 + C13034 * C30746 +
             (C13254 - C13253 + C13256 - C13255) * C30749 +
             (C13258 - C13257 + C13260 - C13259) * C48416) *
                C48379 +
            ((C11755 - C11754 + C11757 - C11756) * C30748 +
             (C11759 - C11758 + C11761 - C11760) * C30746 +
             (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
              C47204 * C9880) *
                 C30749 +
             (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
              C47204 * C9882) *
                 C48416) *
                C26140) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C30748 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C30746 +
            (C12670 - C12671 + C12672 - C12673) * C30749 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C48372 +
           ((C11176 - C11177 + C11178 - C11179) * C30748 +
            (C11180 - C11181 + C11182 - C11183) * C30746 + C13261 * C30749 +
            C13262 * C48416) *
               C48379 +
           C43614 * C26140) *
              C867 +
          (((C12671 - C12670 + C12673 - C12672) * C30748 +
            (C12675 - C12674 + C12677 - C12676) * C30746 +
            (C13801 - C13802 + C13803 - C13804) * C30749 +
            (C13805 - C13806 + C13807 - C13808) * C48416) *
               C48372 +
           (C13263 * C30748 + C13264 * C30746 + C19250 * C30749 +
            C19251 * C48416) *
               C48379 +
           (C13265 * C30748 + C13266 * C30746 +
            (C13253 - C13254 + C13255 - C13256) * C30749 +
            (C13257 - C13258 + C13259 - C13260) * C48416) *
               C26140) *
              C868 +
          ((C19798 * C30748 + C19799 * C30746 + C20902 * C30749 +
            C20903 * C48416) *
               C48372 +
           (C19248 * C30748 + C19249 * C30746 +
            (C19241 - C19240 + C19243 - C19242) * C30749 +
            (C19245 - C19244 + C19247 - C19246) * C48416) *
               C48379 +
           ((C13254 - C13253 + C13256 - C13255) * C30748 +
            (C13258 - C13257 + C13260 - C13259) * C30746 +
            (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
             C47204 * C10055) *
                C30749 +
            (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
             C47204 * C10059) *
                C48416) *
               C26140) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48212 * C126 - C8908 * C119) * C47360 +
                    (C48212 * C140 - C8908 * C131) * C48412 +
                    (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                    C10934 * C47366 + C10935 * C36201) *
                       C48372 +
                   ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                    C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                    C10507 * C36201) *
                       C48379 +
                   (C9270 * C47360 + C9271 * C48412 + C10337 * C47352 +
                    C10338 * C48419 + C10339 * C47366 + C10340 * C36201) *
                       C26140) *
                      C48300 * C48283 * C110 +
                  (((C8908 * C120 - C48212 * C127) * C47360 +
                    (C8908 * C132 - C48212 * C141) * C48412 +
                    (C10071 - C10072) * C47352 + (C10073 - C10074) * C48419 +
                    (C10075 - C10076) * C47366 + (C10077 - C10078) * C36201) *
                       C48372 +
                   ((C9016 - C9017) * C47360 + (C9018 - C9019) * C48412 +
                    (C9893 - C9894) * C47352 + (C9895 - C9896) * C48419 +
                    (C9897 - C9898) * C47366 + (C9899 - C9900) * C36201) *
                       C48379 +
                   ((C9020 - C9021) * C47360 + (C9022 - C9023) * C48412 +
                    (C9901 - C9902) * C47352 + (C9903 - C9904) * C48419 +
                    (C9905 - C9906) * C47366 + (C9907 - C9908) * C36201) *
                       C26140) *
                      C48300 * C48283 * C111 +
                  (((C48212 * C128 - C8908 * C121) * C47360 +
                    (C48212 * C142 - C8908 * C133) * C48412 +
                    (C48212 * C349 - C8908 * C343) * C47352 +
                    (C48212 * C361 - C8908 * C354) * C48419 +
                    (C48212 * C877 - C8908 * C872) * C47366 +
                    (C48212 * C887 - C8908 * C882) * C36201) *
                       C48372 +
                   ((C48212 * C241 - C8908 * C235) * C47360 +
                    (C48212 * C253 - C8908 * C246) * C48412 +
                    (C48212 * C626 - C8908 * C621) * C47352 +
                    (C48212 * C636 - C8908 * C631) * C48419 +
                    (C48212 * C2266 - C8908 * C2260) * C47366 +
                    (C48212 * C2278 - C8908 * C2269) * C36201) *
                       C48379 +
                   ((C48212 * C524 - C8908 * C519) * C47360 +
                    (C48212 * C534 - C8908 * C529) * C48412 +
                    (C48212 * C1371 - C8908 * C1367) * C47352 +
                    (C48212 * C1379 - C8908 * C1374) * C48419 +
                    (C48212 * C2272 - C8908 * C2263) * C47366 +
                    (C48212 * C2281 - C8908 * C2275) * C36201) *
                       C26140) *
                      C48300 * C48283 * C112)) /
                (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48212 * C126 - C8908 * C119) * C47360 +
                     (C48212 * C140 - C8908 * C131) * C48412 +
                     (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                     C10934 * C47366 + C10935 * C36201) *
                        C48372 +
                    ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                     C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                     C10507 * C36201) *
                        C48379 +
                    (C9270 * C47360 + C9271 * C48412 + C10337 * C47352 +
                     C10338 * C48419 + C10339 * C47366 + C10340 * C36201) *
                        C26140) *
                       C48300 * C229 +
                   (((C9001 - C9000) * C47360 + (C9003 - C9002) * C48412 +
                     C10508 * C47352 + C10509 * C48419 + C10510 * C47366 +
                     C10511 * C36201) *
                        C48372 +
                    ((C9005 - C9004) * C47360 + (C9007 - C9006) * C48412 +
                     C10516 * C47352 + C10517 * C48419 + C10518 * C47366 +
                     C10519 * C36201) *
                        C48379 +
                    ((C9009 - C9008) * C47360 + (C9011 - C9010) * C48412 +
                     C14545 * C47352 + C14546 * C48419 +
                     (C10341 - C10342) * C47366 + (C10343 - C10344) * C36201) *
                        C26140) *
                       C48300 * C48601) *
                      C231 +
                  ((((C8908 * C120 - C48212 * C127) * C47360 +
                     (C8908 * C132 - C48212 * C141) * C48412 +
                     (C10071 - C10072) * C47352 + (C10073 - C10074) * C48419 +
                     (C10075 - C10076) * C47366 + (C10077 - C10078) * C36201) *
                        C48372 +
                    ((C9016 - C9017) * C47360 + (C9018 - C9019) * C48412 +
                     (C9893 - C9894) * C47352 + (C9895 - C9896) * C48419 +
                     (C9897 - C9898) * C47366 + (C9899 - C9900) * C36201) *
                        C48379 +
                    ((C9020 - C9021) * C47360 + (C9022 - C9023) * C48412 +
                     (C9901 - C9902) * C47352 + (C9903 - C9904) * C48419 +
                     (C9905 - C9906) * C47366 + (C9907 - C9908) * C36201) *
                        C26140) *
                       C48300 * C229 +
                   (((C9017 - C9016) * C47360 + (C9019 - C9018) * C48412 +
                     (C9894 - C9893) * C47352 + (C9896 - C9895) * C48419 +
                     (C9898 - C9897) * C47366 + (C9900 - C9899) * C36201) *
                        C48372 +
                    ((C9021 - C9020) * C47360 + (C9023 - C9022) * C48412 +
                     (C9902 - C9901) * C47352 + (C9904 - C9903) * C48419 +
                     (C9906 - C9905) * C47366 + (C9908 - C9907) * C36201) *
                        C48379 +
                    ((C9025 - C9024) * C47360 + (C9027 - C9026) * C48412 +
                     (C14038 - C14037) * C47352 + (C14040 - C14039) * C48419 +
                     (C48212 * C9881 - C8908 * C9880) * C47366 +
                     (C48212 * C9883 - C8908 * C9882) * C36201) *
                        C26140) *
                       C48300 * C48601) *
                      C48599)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48212 * C126 - C8908 * C119) * C47360 +
                     (C48212 * C140 - C8908 * C131) * C48412 +
                     (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                     C10934 * C47366 + C10935 * C36201) *
                        C48372 +
                    ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                     C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                     C10507 * C36201) *
                        C48379 +
                    (C9270 * C47360 + C9271 * C48412 + C10337 * C47352 +
                     C10338 * C48419 + C10339 * C47366 + C10340 * C36201) *
                        C26140) *
                       C339 +
                   (((C10064 - C10063) * C47360 + (C10066 - C10065) * C48412 +
                     (C10068 - C10067) * C47352 + (C10070 - C10069) * C48419 +
                     (C10936 - C10937) * C47366 + (C10938 - C10939) * C36201) *
                        C48372 +
                    (C10508 * C47360 + C10509 * C48412 + C10510 * C47352 +
                     C10511 * C48419 + C21626 * C47366 + C21627 * C36201) *
                        C48379 +
                    (C10516 * C47360 + C10517 * C48412 + C10518 * C47352 +
                     C10519 * C48419 + (C10520 - C10521) * C47366 +
                     (C10522 - C10523) * C36201) *
                        C26140) *
                       C48603) *
                      C48283 * C231 +
                  ((((C8908 * C120 - C48212 * C127) * C47360 +
                     (C8908 * C132 - C48212 * C141) * C48412 +
                     (C10071 - C10072) * C47352 + (C10073 - C10074) * C48419 +
                     (C10075 - C10076) * C47366 + (C10077 - C10078) * C36201) *
                        C48372 +
                    ((C9016 - C9017) * C47360 + (C9018 - C9019) * C48412 +
                     (C9893 - C9894) * C47352 + (C9895 - C9896) * C48419 +
                     (C9897 - C9898) * C47366 + (C9899 - C9900) * C36201) *
                        C48379 +
                    ((C9020 - C9021) * C47360 + (C9022 - C9023) * C48412 +
                     (C9901 - C9902) * C47352 + (C9903 - C9904) * C48419 +
                     (C9905 - C9906) * C47366 + (C9907 - C9908) * C36201) *
                        C26140) *
                       C339 +
                   (((C10072 - C10071) * C47360 + (C10074 - C10073) * C48412 +
                     (C10076 - C10075) * C47352 + (C10078 - C10077) * C48419 +
                     (C17669 - C17668) * C47366 + (C17671 - C17670) * C36201) *
                        C48372 +
                    ((C9894 - C9893) * C47360 + (C9896 - C9895) * C48412 +
                     (C9898 - C9897) * C47352 + (C9900 - C9899) * C48419 +
                     (C21133 - C21132) * C47366 + (C21135 - C21134) * C36201) *
                        C48379 +
                    ((C9902 - C9901) * C47360 + (C9904 - C9903) * C48412 +
                     (C9906 - C9905) * C47352 + (C9908 - C9907) * C48419 +
                     (C48212 * C10058 - C8908 * C10055) * C47366 +
                     (C48212 * C10061 - C8908 * C10059) * C36201) *
                        C26140) *
                       C48603) *
                      C48283 * C48599)) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48212 * C126 - C8908 * C119) * C47360 +
                     (C48212 * C140 - C8908 * C131) * C48412 +
                     (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                     C10934 * C47366 + C10935 * C36201) *
                        C48372 +
                    ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                     C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                     C10507 * C36201) *
                        C48379 +
                    (C9270 * C47360 + C9271 * C48412 + C10337 * C47352 +
                     C10338 * C48419 + C10339 * C47366 + C10340 * C36201) *
                        C26140) *
                       C48300 * C447 +
                   (((C9001 - C9000) * C47360 + (C9003 - C9002) * C48412 +
                     C10508 * C47352 + C10509 * C48419 + C10510 * C47366 +
                     C10511 * C36201) *
                        C48372 +
                    ((C9005 - C9004) * C47360 + (C9007 - C9006) * C48412 +
                     C10516 * C47352 + C10517 * C48419 + C10518 * C47366 +
                     C10519 * C36201) *
                        C48379 +
                    ((C9009 - C9008) * C47360 + (C9011 - C9010) * C48412 +
                     C14545 * C47352 + C14546 * C48419 +
                     (C10341 - C10342) * C47366 + (C10343 - C10344) * C36201) *
                        C26140) *
                       C48300 * C48601) *
                      C449 +
                  ((((C8908 * C120 - C48212 * C127) * C47360 +
                     (C8908 * C132 - C48212 * C141) * C48412 +
                     (C10071 - C10072) * C47352 + (C10073 - C10074) * C48419 +
                     (C10075 - C10076) * C47366 + (C10077 - C10078) * C36201) *
                        C48372 +
                    ((C9016 - C9017) * C47360 + (C9018 - C9019) * C48412 +
                     (C9893 - C9894) * C47352 + (C9895 - C9896) * C48419 +
                     (C9897 - C9898) * C47366 + (C9899 - C9900) * C36201) *
                        C48379 +
                    ((C9020 - C9021) * C47360 + (C9022 - C9023) * C48412 +
                     (C9901 - C9902) * C47352 + (C9903 - C9904) * C48419 +
                     (C9905 - C9906) * C47366 + (C9907 - C9908) * C36201) *
                        C26140) *
                       C48300 * C447 +
                   (((C9017 - C9016) * C47360 + (C9019 - C9018) * C48412 +
                     (C9894 - C9893) * C47352 + (C9896 - C9895) * C48419 +
                     (C9898 - C9897) * C47366 + (C9900 - C9899) * C36201) *
                        C48372 +
                    ((C9021 - C9020) * C47360 + (C9023 - C9022) * C48412 +
                     (C9902 - C9901) * C47352 + (C9904 - C9903) * C48419 +
                     (C9906 - C9905) * C47366 + (C9908 - C9907) * C36201) *
                        C48379 +
                    ((C9025 - C9024) * C47360 + (C9027 - C9026) * C48412 +
                     (C14038 - C14037) * C47352 + (C14040 - C14039) * C48419 +
                     (C48212 * C9881 - C8908 * C9880) * C47366 +
                     (C48212 * C9883 - C8908 * C9882) * C36201) *
                        C26140) *
                       C48300 * C48601) *
                      C48599)) /
                (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48212 * C126 - C8908 * C119) * C47360 +
                    (C48212 * C140 - C8908 * C131) * C48412 +
                    (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                    C10934 * C47366 + C10935 * C36201) *
                       C48372 +
                   ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                    C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                    C10507 * C36201) *
                       C48379 +
                   C46613 * C26140) *
                      C48300 * C513 +
                  (((C9001 - C9000) * C47360 + (C9003 - C9002) * C48412 +
                    C10508 * C47352 + C10509 * C48419 + C10510 * C47366 +
                    C10511 * C36201) *
                       C48372 +
                   ((C9005 - C9004) * C47360 + (C9007 - C9006) * C48412 +
                    C10516 * C47352 + C10517 * C48419 + C10518 * C47366 +
                    C10519 * C36201) *
                       C48379 +
                   ((C9009 - C9008) * C47360 + (C9011 - C9010) * C48412 +
                    C14545 * C47352 + C14546 * C48419 +
                    (C10341 - C10342) * C47366 + (C10343 - C10344) * C36201) *
                       C26140) *
                      C48300 * C514 +
                  (C46613 * C48372 +
                   (C9272 * C47360 + C9273 * C48412 + C14405 * C47352 +
                    C14406 * C48419 + (C10342 - C10341) * C47366 +
                    (C10344 - C10343) * C36201) *
                       C48379 +
                   (C9274 * C47360 + C9275 * C48412 + (C9388 - C9387) * C47352 +
                    (C9390 - C9389) * C48419 +
                    (C48212 * C9620 - C8908 * C9617) * C47366 +
                    (C48212 * C9623 - C8908 * C9621) * C36201) *
                       C26140) *
                      C48300 * C515) *
                 C48249) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48212 * C126 - C8908 * C119) * C47360 +
                     (C48212 * C140 - C8908 * C131) * C48412 +
                     (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                     C10934 * C47366 + C10935 * C36201) *
                        C48372 +
                    ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                     C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                     C10507 * C36201) *
                        C48379 +
                    C46613 * C26140) *
                       C339 +
                   (((C10064 - C10063) * C47360 + (C10066 - C10065) * C48412 +
                     (C10068 - C10067) * C47352 + (C10070 - C10069) * C48419 +
                     (C10936 - C10937) * C47366 + (C10938 - C10939) * C36201) *
                        C48372 +
                    (C10508 * C47360 + C10509 * C48412 + C10510 * C47352 +
                     C10511 * C48419 + C21626 * C47366 + C21627 * C36201) *
                        C48379 +
                    (C10516 * C47360 + C10517 * C48412 + C10518 * C47352 +
                     C10519 * C48419 + (C10520 - C10521) * C47366 +
                     (C10522 - C10523) * C36201) *
                        C26140) *
                       C48603) *
                      C447 +
                  ((((C9001 - C9000) * C47360 + (C9003 - C9002) * C48412 +
                     C10508 * C47352 + C10509 * C48419 + C10510 * C47366 +
                     C10511 * C36201) *
                        C48372 +
                    ((C9005 - C9004) * C47360 + (C9007 - C9006) * C48412 +
                     C10516 * C47352 + C10517 * C48419 + C10518 * C47366 +
                     C10519 * C36201) *
                        C48379 +
                    ((C9009 - C9008) * C47360 + (C9011 - C9010) * C48412 +
                     C14545 * C47352 + C14546 * C48419 +
                     (C10341 - C10342) * C47366 + (C10343 - C10344) * C36201) *
                        C26140) *
                       C339 +
                   ((C10504 * C47360 + C10505 * C48412 + C10506 * C47352 +
                     C10507 * C48419 + C21624 * C47366 + C21625 * C36201) *
                        C48372 +
                    (C10337 * C47360 + C10338 * C48412 + C10339 * C47352 +
                     C10340 * C48419 + (C10521 - C10520) * C47366 +
                     (C10523 - C10522) * C36201) *
                        C48379 +
                    (C14405 * C47360 + C14406 * C48412 +
                     (C10342 - C10341) * C47352 + (C10344 - C10343) * C48419 +
                     (C48212 * C10500 - C8908 * C10499) * C47366 +
                     (C48212 * C10502 - C8908 * C10501) * C36201) *
                        C26140) *
                       C48603) *
                      C48601) *
                 C48249) /
                (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48212 * C126 - C8908 * C119) * C47360 +
                     (C48212 * C140 - C8908 * C131) * C48412 +
                     (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                     C10934 * C47366 + C10935 * C36201) *
                        C48372 +
                    ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                     C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                     C10507 * C36201) *
                        C48379 +
                    C46613 * C26140) *
                       C721 +
                   (((C10064 - C10063) * C47360 + (C10066 - C10065) * C48412 +
                     (C10068 - C10067) * C47352 + (C10070 - C10069) * C48419 +
                     (C10936 - C10937) * C47366 + (C10938 - C10939) * C36201) *
                        C48372 +
                    (C10508 * C47360 + C10509 * C48412 + C10510 * C47352 +
                     C10511 * C48419 + C21626 * C47366 + C21627 * C36201) *
                        C48379 +
                    (C10516 * C47360 + C10517 * C48412 + C10518 * C47352 +
                     C10519 * C48419 + (C10520 - C10521) * C47366 +
                     (C10522 - C10523) * C36201) *
                        C26140) *
                       C48603) *
                      C48283 * C449 +
                  ((((C8908 * C120 - C48212 * C127) * C47360 +
                     (C8908 * C132 - C48212 * C141) * C48412 +
                     (C10071 - C10072) * C47352 + (C10073 - C10074) * C48419 +
                     (C10075 - C10076) * C47366 + (C10077 - C10078) * C36201) *
                        C48372 +
                    ((C9016 - C9017) * C47360 + (C9018 - C9019) * C48412 +
                     (C9893 - C9894) * C47352 + (C9895 - C9896) * C48419 +
                     (C9897 - C9898) * C47366 + (C9899 - C9900) * C36201) *
                        C48379 +
                    ((C9020 - C9021) * C47360 + (C9022 - C9023) * C48412 +
                     (C9901 - C9902) * C47352 + (C9903 - C9904) * C48419 +
                     (C9905 - C9906) * C47366 + (C9907 - C9908) * C36201) *
                        C26140) *
                       C721 +
                   (((C10072 - C10071) * C47360 + (C10074 - C10073) * C48412 +
                     (C10076 - C10075) * C47352 + (C10078 - C10077) * C48419 +
                     (C17669 - C17668) * C47366 + (C17671 - C17670) * C36201) *
                        C48372 +
                    ((C9894 - C9893) * C47360 + (C9896 - C9895) * C48412 +
                     (C9898 - C9897) * C47352 + (C9900 - C9899) * C48419 +
                     (C21133 - C21132) * C47366 + (C21135 - C21134) * C36201) *
                        C48379 +
                    ((C9902 - C9901) * C47360 + (C9904 - C9903) * C48412 +
                     (C9906 - C9905) * C47352 + (C9908 - C9907) * C48419 +
                     (C48212 * C10058 - C8908 * C10055) * C47366 +
                     (C48212 * C10061 - C8908 * C10059) * C36201) *
                        C26140) *
                       C48603) *
                      C48283 * C48599)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48212 * C126 - C8908 * C119) * C47360 +
                     (C48212 * C140 - C8908 * C131) * C48412 +
                     (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                     C10934 * C47366 + C10935 * C36201) *
                        C48372 +
                    ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                     C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                     C10507 * C36201) *
                        C48379 +
                    C46613 * C26140) *
                       C721 +
                   (((C10064 - C10063) * C47360 + (C10066 - C10065) * C48412 +
                     (C10068 - C10067) * C47352 + (C10070 - C10069) * C48419 +
                     (C10936 - C10937) * C47366 + (C10938 - C10939) * C36201) *
                        C48372 +
                    (C10508 * C47360 + C10509 * C48412 + C10510 * C47352 +
                     C10511 * C48419 + C21626 * C47366 + C21627 * C36201) *
                        C48379 +
                    (C10516 * C47360 + C10517 * C48412 + C10518 * C47352 +
                     C10519 * C48419 + (C10520 - C10521) * C47366 +
                     (C10522 - C10523) * C36201) *
                        C26140) *
                       C48603) *
                      C229 +
                  ((((C9001 - C9000) * C47360 + (C9003 - C9002) * C48412 +
                     C10508 * C47352 + C10509 * C48419 + C10510 * C47366 +
                     C10511 * C36201) *
                        C48372 +
                    ((C9005 - C9004) * C47360 + (C9007 - C9006) * C48412 +
                     C10516 * C47352 + C10517 * C48419 + C10518 * C47366 +
                     C10519 * C36201) *
                        C48379 +
                    ((C9009 - C9008) * C47360 + (C9011 - C9010) * C48412 +
                     C14545 * C47352 + C14546 * C48419 +
                     (C10341 - C10342) * C47366 + (C10343 - C10344) * C36201) *
                        C26140) *
                       C721 +
                   ((C10504 * C47360 + C10505 * C48412 + C10506 * C47352 +
                     C10507 * C48419 + C21624 * C47366 + C21625 * C36201) *
                        C48372 +
                    (C10337 * C47360 + C10338 * C48412 + C10339 * C47352 +
                     C10340 * C48419 + (C10521 - C10520) * C47366 +
                     (C10523 - C10522) * C36201) *
                        C48379 +
                    (C14405 * C47360 + C14406 * C48412 +
                     (C10342 - C10341) * C47352 + (C10344 - C10343) * C48419 +
                     (C48212 * C10500 - C8908 * C10499) * C47366 +
                     (C48212 * C10502 - C8908 * C10501) * C36201) *
                        C26140) *
                       C48603) *
                      C48601) *
                 C48249) /
                (p * q * std::sqrt(p + q));
    d2ee[62] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C48212 * C126 - C8908 * C119) * C47360 +
                    (C48212 * C140 - C8908 * C131) * C48412 +
                    (C10063 - C10064) * C47352 + (C10065 - C10066) * C48419 +
                    C10934 * C47366 + C10935 * C36201) *
                       C48372 +
                   ((C9000 - C9001) * C47360 + (C9002 - C9003) * C48412 +
                    C10504 * C47352 + C10505 * C48419 + C10506 * C47366 +
                    C10507 * C36201) *
                       C48379 +
                   C46613 * C26140) *
                      C867 +
                  (((C10064 - C10063) * C47360 + (C10066 - C10065) * C48412 +
                    (C10068 - C10067) * C47352 + (C10070 - C10069) * C48419 +
                    (C10936 - C10937) * C47366 + (C10938 - C10939) * C36201) *
                       C48372 +
                   (C10508 * C47360 + C10509 * C48412 + C10510 * C47352 +
                    C10511 * C48419 + C21626 * C47366 + C21627 * C36201) *
                       C48379 +
                   (C10516 * C47360 + C10517 * C48412 + C10518 * C47352 +
                    C10519 * C48419 + (C10520 - C10521) * C47366 +
                    (C10522 - C10523) * C36201) *
                       C26140) *
                      C868 +
                  ((C10934 * C47360 + C10935 * C48412 + C18140 * C47352 +
                    C18141 * C48419 + C18142 * C47366 + C18143 * C36201) *
                       C48372 +
                   (C10506 * C47360 + C10507 * C48412 + C21624 * C47352 +
                    C21625 * C48419 + (C17907 - C17906) * C47366 +
                    (C17909 - C17908) * C36201) *
                       C48379 +
                   (C10339 * C47360 + C10340 * C48412 +
                    (C10521 - C10520) * C47352 + (C10523 - C10522) * C48419 +
                    (C48212 * C10929 - C8908 * C10926) * C47366 +
                    (C48212 * C10932 - C8908 * C10930) * C36201) *
                       C26140) *
                      C869) *
                 C48283 * C48249) /
                (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C30748 +
            (C48212 * C140 - C8908 * C131) * C30746 +
            (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
               C48648 +
           ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
            C10504 * C30749 + C10505 * C48416) *
               C48644 +
           (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
            C10338 * C48416) *
               C48634 +
           (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
            C14406 * C48416) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C30748 +
            (C8908 * C132 - C48212 * C141) * C30746 +
            (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
               C48648 +
           ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
            (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
               C48644 +
           ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
            (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
               C48634 +
           ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
            (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C30748 +
            (C48212 * C142 - C8908 * C133) * C30746 +
            (C48212 * C349 - C8908 * C343) * C30749 +
            (C48212 * C361 - C8908 * C354) * C48416) *
               C48648 +
           ((C48212 * C241 - C8908 * C235) * C30748 +
            (C48212 * C253 - C8908 * C246) * C30746 +
            (C48212 * C626 - C8908 * C621) * C30749 +
            (C48212 * C636 - C8908 * C631) * C48416) *
               C48644 +
           ((C48212 * C524 - C8908 * C519) * C30748 +
            (C48212 * C534 - C8908 * C529) * C30746 +
            (C48212 * C1371 - C8908 * C1367) * C30749 +
            (C48212 * C1379 - C8908 * C1374) * C48416) *
               C48634 +
           ((C48212 * C1161 - C8908 * C1157) * C30748 +
            (C48212 * C1169 - C8908 * C1164) * C30746 +
            (C48212 * C1825 - C8908 * C1822) * C30749 +
            (C48212 * C1831 - C8908 * C1828) * C48416) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C30748 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C30746 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
               C22087 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C30748 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C30746 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
               C22087 +
           ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
            (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
            (C7644 * C620 - C48638 * C625 + C7645 * C621 - C48625 * C626 +
             C7646 * C622 - C48593 * C627) *
                C30749 +
            (C7644 * C630 - C48638 * C635 + C7645 * C631 - C48625 * C636 +
             C7646 * C632 - C48593 * C637) *
                C48416) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48638 * C128 - C7644 * C121 + C48625 * C129 - C7645 * C122 +
             C48593 * C130 - C7646 * C123) *
                C30748 +
            (C48638 * C142 - C7644 * C133 + C48625 * C143 - C7645 * C134 +
             C48593 * C144 - C7646 * C135) *
                C30746 +
            (C48638 * C349 - C7644 * C343 + C48625 * C350 - C7645 * C344 +
             C48593 * C351 - C7646 * C345) *
                C30749 +
            (C48638 * C361 - C7644 * C354 + C48625 * C362 - C7645 * C355 +
             C48593 * C363 - C7646 * C356) *
                C48416) *
               C22087 +
           ((C48638 * C241 - C7644 * C235 + C48625 * C242 - C7645 * C236 +
             C48593 * C243 - C7646 * C237) *
                C30748 +
            (C48638 * C253 - C7644 * C246 + C48625 * C254 - C7645 * C247 +
             C48593 * C255 - C7646 * C248) *
                C30746 +
            (C48638 * C626 - C7644 * C621 + C48625 * C627 - C7645 * C622 +
             C48593 * C628 - C7646 * C623) *
                C30749 +
            (C48638 * C636 - C7644 * C631 + C48625 * C637 - C7645 * C632 +
             C48593 * C638 - C7646 * C633) *
                C48416) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C33485 +
            (C48212 * C140 - C8908 * C131) * C48649 +
            (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
            C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
            C18141 * C48622) *
               C22087 +
           ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
            C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
            C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C33485 +
            (C8908 * C132 - C48212 * C141) * C48649 +
            (C10071 - C10072) * C33486 + (C10073 - C10074) * C48646 +
            (C10075 - C10076) * C33487 + (C10077 - C10078) * C48637 +
            (C17668 - C17669) * C33488 + (C17670 - C17671) * C48622) *
               C22087 +
           ((C9016 - C9017) * C33485 + (C9018 - C9019) * C48649 +
            (C9893 - C9894) * C33486 + (C9895 - C9896) * C48646 +
            (C9897 - C9898) * C33487 + (C9899 - C9900) * C48637 +
            (C21132 - C21133) * C33488 + (C21134 - C21135) * C48622) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C33485 +
            (C48212 * C142 - C8908 * C133) * C48649 +
            (C48212 * C349 - C8908 * C343) * C33486 +
            (C48212 * C361 - C8908 * C354) * C48646 +
            (C48212 * C877 - C8908 * C872) * C33487 +
            (C48212 * C887 - C8908 * C882) * C48637 +
            (C48212 * C2700 - C8908 * C2696) * C33488 +
            (C48212 * C2708 - C8908 * C2703) * C48622) *
               C22087 +
           ((C48212 * C241 - C8908 * C235) * C33485 +
            (C48212 * C253 - C8908 * C246) * C48649 +
            (C48212 * C626 - C8908 * C621) * C33486 +
            (C48212 * C636 - C8908 * C631) * C48646 +
            (C48212 * C2266 - C8908 * C2260) * C33487 +
            (C48212 * C2278 - C8908 * C2269) * C48637 +
            (C48212 * C3165 - C8908 * C3162) * C33488 +
            (C48212 * C3171 - C8908 * C3168) * C48622) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
             C10338 * C48416) *
                C48634 +
            (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
             C14406 * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9017 - C9016) * C30748 + (C9019 - C9018) * C30746 +
             (C9894 - C9893) * C30749 + (C9896 - C9895) * C48416) *
                C48648 +
            ((C9021 - C9020) * C30748 + (C9023 - C9022) * C30746 +
             (C9902 - C9901) * C30749 + (C9904 - C9903) * C48416) *
                C48644 +
            ((C9025 - C9024) * C30748 + (C9027 - C9026) * C30746 +
             (C14038 - C14037) * C30749 + (C14040 - C14039) * C48416) *
                C48634 +
            ((C9029 - C9028) * C30748 + (C9031 - C9030) * C30746 +
             (C48212 * C9117 - C8908 * C9114) * C30749 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30749 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C30748 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C30746 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30749 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48416) *
                C22087 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C30748 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C30746 +
             (C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C30749 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C33485 +
             (C48212 * C140 - C8908 * C131) * C48649 +
             (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
             C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
             C18141 * C48622) *
                C22087 +
            ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
             C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
             C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
                C48376) *
               C48300 * C229 +
           (((C9001 - C9000) * C33485 + (C9003 - C9002) * C48649 +
             C10508 * C33486 + C10509 * C48646 + C10510 * C33487 +
             C10511 * C48637 + C21626 * C33488 + C21627 * C48622) *
                C22087 +
            ((C9005 - C9004) * C33485 + (C9007 - C9006) * C48649 +
             C10516 * C33486 + C10517 * C48646 + C10518 * C33487 +
             C10519 * C48637 + (C10520 - C10521) * C33488 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C33485 +
             (C8908 * C132 - C48212 * C141) * C48649 +
             (C10071 - C10072) * C33486 + (C10073 - C10074) * C48646 +
             (C10075 - C10076) * C33487 + (C10077 - C10078) * C48637 +
             (C17668 - C17669) * C33488 + (C17670 - C17671) * C48622) *
                C22087 +
            ((C9016 - C9017) * C33485 + (C9018 - C9019) * C48649 +
             (C9893 - C9894) * C33486 + (C9895 - C9896) * C48646 +
             (C9897 - C9898) * C33487 + (C9899 - C9900) * C48637 +
             (C21132 - C21133) * C33488 + (C21134 - C21135) * C48622) *
                C48376) *
               C48300 * C229 +
           (((C9017 - C9016) * C33485 + (C9019 - C9018) * C48649 +
             (C9894 - C9893) * C33486 + (C9896 - C9895) * C48646 +
             (C9898 - C9897) * C33487 + (C9900 - C9899) * C48637 +
             (C21133 - C21132) * C33488 + (C21135 - C21134) * C48622) *
                C22087 +
            ((C9021 - C9020) * C33485 + (C9023 - C9022) * C48649 +
             (C9902 - C9901) * C33486 + (C9904 - C9903) * C48646 +
             (C9906 - C9905) * C33487 + (C9908 - C9907) * C48637 +
             (C48212 * C10058 - C8908 * C10055) * C33488 +
             (C48212 * C10061 - C8908 * C10059) * C48622) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
             C10338 * C48416) *
                C48634 +
            (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
             C14406 * C48416) *
                C48616) *
               C339 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C339 +
           (((C10072 - C10071) * C30748 + (C10074 - C10073) * C30746 +
             (C10076 - C10075) * C30749 + (C10078 - C10077) * C48416) *
                C48648 +
            ((C9894 - C9893) * C30748 + (C9896 - C9895) * C30746 +
             (C9898 - C9897) * C30749 + (C9900 - C9899) * C48416) *
                C48644 +
            ((C9902 - C9901) * C30748 + (C9904 - C9903) * C30746 +
             (C9906 - C9905) * C30749 + (C9908 - C9907) * C48416) *
                C48634 +
            ((C14038 - C14037) * C30748 + (C14040 - C14039) * C30746 +
             (C48212 * C9881 - C8908 * C9880) * C30749 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
                C48376) *
               C339 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30748 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C339 +
           (((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C30748 +
             (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C30746 +
             (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C30749 +
             (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C48416) *
                C22087 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30748 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C30746 +
             (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
              C48593 * C2545 - C7646 * C2544) *
                 C30749 +
             (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
              C48593 * C2547 - C7646 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C33485 +
             (C48212 * C140 - C8908 * C131) * C48649 +
             (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
             C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
             C18141 * C48622) *
                C22087 +
            ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
             C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
             C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
                C48376) *
               C339 +
           (((C10064 - C10063) * C33485 + (C10066 - C10065) * C48649 +
             (C10068 - C10067) * C33486 + (C10070 - C10069) * C48646 +
             (C10936 - C10937) * C33487 + (C10938 - C10939) * C48637 +
             (C17665 - C17664) * C33488 + (C17667 - C17666) * C48622) *
                C22087 +
            (C10508 * C33485 + C10509 * C48649 + C10510 * C33486 +
             C10511 * C48646 + C21626 * C33487 + C21627 * C48637 +
             (C17906 - C17907) * C33488 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C33485 +
             (C8908 * C132 - C48212 * C141) * C48649 +
             (C10071 - C10072) * C33486 + (C10073 - C10074) * C48646 +
             (C10075 - C10076) * C33487 + (C10077 - C10078) * C48637 +
             (C17668 - C17669) * C33488 + (C17670 - C17671) * C48622) *
                C22087 +
            ((C9016 - C9017) * C33485 + (C9018 - C9019) * C48649 +
             (C9893 - C9894) * C33486 + (C9895 - C9896) * C48646 +
             (C9897 - C9898) * C33487 + (C9899 - C9900) * C48637 +
             (C21132 - C21133) * C33488 + (C21134 - C21135) * C48622) *
                C48376) *
               C339 +
           (((C10072 - C10071) * C33485 + (C10074 - C10073) * C48649 +
             (C10076 - C10075) * C33486 + (C10078 - C10077) * C48646 +
             (C17669 - C17668) * C33487 + (C17671 - C17670) * C48637 +
             (C17673 - C17672) * C33488 + (C17675 - C17674) * C48622) *
                C22087 +
            ((C9894 - C9893) * C33485 + (C9896 - C9895) * C48649 +
             (C9898 - C9897) * C33486 + (C9900 - C9899) * C48646 +
             (C21133 - C21132) * C33487 + (C21135 - C21134) * C48637 +
             (C48212 * C17570 - C8908 * C17569) * C33488 +
             (C48212 * C17572 - C8908 * C17571) * C48622) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
             C10338 * C48416) *
                C48634 +
            (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
             C14406 * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9017 - C9016) * C30748 + (C9019 - C9018) * C30746 +
             (C9894 - C9893) * C30749 + (C9896 - C9895) * C48416) *
                C48648 +
            ((C9021 - C9020) * C30748 + (C9023 - C9022) * C30746 +
             (C9902 - C9901) * C30749 + (C9904 - C9903) * C48416) *
                C48644 +
            ((C9025 - C9024) * C30748 + (C9027 - C9026) * C30746 +
             (C14038 - C14037) * C30749 + (C14040 - C14039) * C48416) *
                C48634 +
            ((C9029 - C9028) * C30748 + (C9031 - C9030) * C30746 +
             (C48212 * C9117 - C8908 * C9114) * C30749 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30749 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C30748 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C30746 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30749 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48416) *
                C22087 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C30748 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C30746 +
             (C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C30749 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C33485 +
             (C48212 * C140 - C8908 * C131) * C48649 +
             (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
             C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
             C18141 * C48622) *
                C22087 +
            ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
             C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
             C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
                C48376) *
               C48300 * C447 +
           (((C9001 - C9000) * C33485 + (C9003 - C9002) * C48649 +
             C10508 * C33486 + C10509 * C48646 + C10510 * C33487 +
             C10511 * C48637 + C21626 * C33488 + C21627 * C48622) *
                C22087 +
            ((C9005 - C9004) * C33485 + (C9007 - C9006) * C48649 +
             C10516 * C33486 + C10517 * C48646 + C10518 * C33487 +
             C10519 * C48637 + (C10520 - C10521) * C33488 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C33485 +
             (C8908 * C132 - C48212 * C141) * C48649 +
             (C10071 - C10072) * C33486 + (C10073 - C10074) * C48646 +
             (C10075 - C10076) * C33487 + (C10077 - C10078) * C48637 +
             (C17668 - C17669) * C33488 + (C17670 - C17671) * C48622) *
                C22087 +
            ((C9016 - C9017) * C33485 + (C9018 - C9019) * C48649 +
             (C9893 - C9894) * C33486 + (C9895 - C9896) * C48646 +
             (C9897 - C9898) * C33487 + (C9899 - C9900) * C48637 +
             (C21132 - C21133) * C33488 + (C21134 - C21135) * C48622) *
                C48376) *
               C48300 * C447 +
           (((C9017 - C9016) * C33485 + (C9019 - C9018) * C48649 +
             (C9894 - C9893) * C33486 + (C9896 - C9895) * C48646 +
             (C9898 - C9897) * C33487 + (C9900 - C9899) * C48637 +
             (C21133 - C21132) * C33488 + (C21135 - C21134) * C48622) *
                C22087 +
            ((C9021 - C9020) * C33485 + (C9023 - C9022) * C48649 +
             (C9902 - C9901) * C33486 + (C9904 - C9903) * C48646 +
             (C9906 - C9905) * C33487 + (C9908 - C9907) * C48637 +
             (C48212 * C10058 - C8908 * C10055) * C33488 +
             (C48212 * C10061 - C8908 * C10059) * C48622) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C30748 +
            (C48212 * C140 - C8908 * C131) * C30746 +
            (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
               C48648 +
           ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
            C10504 * C30749 + C10505 * C48416) *
               C48644 +
           C41170 * C48634 + C41171 * C48616) *
              C48300 * C513 +
          (((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
            C10508 * C30749 + C10509 * C48416) *
               C48648 +
           ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
            C10516 * C30749 + C10517 * C48416) *
               C48644 +
           ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
            C14545 * C30749 + C14546 * C48416) *
               C48634 +
           ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
            (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
               C48616) *
              C48300 * C514 +
          (C41170 * C48648 + C41171 * C48644 +
           (C9274 * C30748 + C9275 * C30746 + (C9388 - C9387) * C30749 +
            (C9390 - C9389) * C48416) *
               C48634 +
           ((C9277 - C9276) * C30748 + (C9279 - C9278) * C30746 +
            (C48212 * C9371 - C8908 * C9370) * C30749 +
            (C48212 * C9373 - C8908 * C9372) * C48416) *
               C48616) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C30748 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C30746 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
               C22087 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
               C48376) *
              C48300 * C513 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30749 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48416) *
               C22087 +
           ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
            (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
               C48376) *
              C48300 * C514 +
          ((C8264 * C30748 + C8265 * C30746 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C30749 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48416) *
               C22087 +
           ((C8251 - C8250 + C8253 - C8252 + C8255 - C8254) * C30748 +
            (C8257 - C8256 + C8259 - C8258 + C8261 - C8260) * C30746 +
            (C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
             C48593 * C1825 - C7646 * C1822) *
                C30749 +
            (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
             C48593 * C1831 - C7646 * C1828) *
                C48416) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C33485 +
            (C48212 * C140 - C8908 * C131) * C48649 +
            (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
            C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
            C18141 * C48622) *
               C22087 +
           ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
            C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
            C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
               C48376) *
              C48300 * C513 +
          (((C9001 - C9000) * C33485 + (C9003 - C9002) * C48649 +
            C10508 * C33486 + C10509 * C48646 + C10510 * C33487 +
            C10511 * C48637 + C21626 * C33488 + C21627 * C48622) *
               C22087 +
           ((C9005 - C9004) * C33485 + (C9007 - C9006) * C48649 +
            C10516 * C33486 + C10517 * C48646 + C10518 * C33487 +
            C10519 * C48637 + (C10520 - C10521) * C33488 +
            (C10522 - C10523) * C48622) *
               C48376) *
              C48300 * C514 +
          ((C9270 * C33485 + C9271 * C48649 + C10337 * C33486 +
            C10338 * C48646 + C10339 * C33487 + C10340 * C48637 +
            (C10521 - C10520) * C33488 + (C10523 - C10522) * C48622) *
               C22087 +
           (C9272 * C33485 + C9273 * C48649 + C14405 * C33486 +
            C14406 * C48646 + (C10342 - C10341) * C33487 +
            (C10344 - C10343) * C48637 +
            (C48212 * C10500 - C8908 * C10499) * C33488 +
            (C48212 * C10502 - C8908 * C10501) * C48622) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            C41170 * C48634 + C41171 * C48616) *
               C339 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C339 +
           ((C10504 * C30748 + C10505 * C30746 + C10506 * C30749 +
             C10507 * C48416) *
                C48648 +
            (C10337 * C30748 + C10338 * C30746 + C10339 * C30749 +
             C10340 * C48416) *
                C48644 +
            (C14405 * C30748 + C14406 * C30746 + (C10342 - C10341) * C30749 +
             (C10344 - C10343) * C48416) *
                C48634 +
            ((C9388 - C9387) * C30748 + (C9390 - C9389) * C30746 +
             (C48212 * C9620 - C8908 * C9617) * C30749 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             C40034 * C30749 + C40035 * C48416) *
                C48376) *
               C339 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            (C40036 * C30748 + C40037 * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C447 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             C40036 * C30749 + C40037 * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C339 +
           ((C40034 * C30748 + C40035 * C30746 +
             (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C30749 +
             (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C48416) *
                C22087 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C30748 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C30746 +
             (C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
              C48593 * C2272 - C7646 * C2263) *
                 C30749 +
             (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
              C48593 * C2281 - C7646 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C33485 +
             (C48212 * C140 - C8908 * C131) * C48649 +
             (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
             C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
             C18141 * C48622) *
                C22087 +
            ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
             C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
             C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
                C48376) *
               C339 +
           (((C10064 - C10063) * C33485 + (C10066 - C10065) * C48649 +
             (C10068 - C10067) * C33486 + (C10070 - C10069) * C48646 +
             (C10936 - C10937) * C33487 + (C10938 - C10939) * C48637 +
             (C17665 - C17664) * C33488 + (C17667 - C17666) * C48622) *
                C22087 +
            (C10508 * C33485 + C10509 * C48649 + C10510 * C33486 +
             C10511 * C48646 + C21626 * C33487 + C21627 * C48637 +
             (C17906 - C17907) * C33488 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C33485 + (C9003 - C9002) * C48649 +
             C10508 * C33486 + C10509 * C48646 + C10510 * C33487 +
             C10511 * C48637 + C21626 * C33488 + C21627 * C48622) *
                C22087 +
            ((C9005 - C9004) * C33485 + (C9007 - C9006) * C48649 +
             C10516 * C33486 + C10517 * C48646 + C10518 * C33487 +
             C10519 * C48637 + (C10520 - C10521) * C33488 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C339 +
           ((C10504 * C33485 + C10505 * C48649 + C10506 * C33486 +
             C10507 * C48646 + C21624 * C33487 + C21625 * C48637 +
             (C17907 - C17906) * C33488 + (C17909 - C17908) * C48622) *
                C22087 +
            (C10337 * C33485 + C10338 * C48649 + C10339 * C33486 +
             C10340 * C48646 + (C10521 - C10520) * C33487 +
             (C10523 - C10522) * C48637 +
             (C48212 * C10929 - C8908 * C10926) * C33488 +
             (C48212 * C10932 - C8908 * C10930) * C48622) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            C41170 * C48634 + C41171 * C48616) *
               C721 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C721 +
           (((C10072 - C10071) * C30748 + (C10074 - C10073) * C30746 +
             (C10076 - C10075) * C30749 + (C10078 - C10077) * C48416) *
                C48648 +
            ((C9894 - C9893) * C30748 + (C9896 - C9895) * C30746 +
             (C9898 - C9897) * C30749 + (C9900 - C9899) * C48416) *
                C48644 +
            ((C9902 - C9901) * C30748 + (C9904 - C9903) * C30746 +
             (C9906 - C9905) * C30749 + (C9908 - C9907) * C48416) *
                C48634 +
            ((C14038 - C14037) * C30748 + (C14040 - C14039) * C30746 +
             (C48212 * C9881 - C8908 * C9880) * C30749 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             C40034 * C30749 + C40035 * C48416) *
                C48376) *
               C721 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            (C40036 * C30748 + C40037 * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C721 +
           (((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C30748 +
             (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C30746 +
             (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C30749 +
             (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C48416) *
                C22087 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30748 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C30746 +
             (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
              C48593 * C2545 - C7646 * C2544) *
                 C30749 +
             (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
              C48593 * C2547 - C7646 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C33485 +
             (C48212 * C140 - C8908 * C131) * C48649 +
             (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
             C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
             C18141 * C48622) *
                C22087 +
            ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
             C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
             C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
                C48376) *
               C721 +
           (((C10064 - C10063) * C33485 + (C10066 - C10065) * C48649 +
             (C10068 - C10067) * C33486 + (C10070 - C10069) * C48646 +
             (C10936 - C10937) * C33487 + (C10938 - C10939) * C48637 +
             (C17665 - C17664) * C33488 + (C17667 - C17666) * C48622) *
                C22087 +
            (C10508 * C33485 + C10509 * C48649 + C10510 * C33486 +
             C10511 * C48646 + C21626 * C33487 + C21627 * C48637 +
             (C17906 - C17907) * C33488 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C33485 +
             (C8908 * C132 - C48212 * C141) * C48649 +
             (C10071 - C10072) * C33486 + (C10073 - C10074) * C48646 +
             (C10075 - C10076) * C33487 + (C10077 - C10078) * C48637 +
             (C17668 - C17669) * C33488 + (C17670 - C17671) * C48622) *
                C22087 +
            ((C9016 - C9017) * C33485 + (C9018 - C9019) * C48649 +
             (C9893 - C9894) * C33486 + (C9895 - C9896) * C48646 +
             (C9897 - C9898) * C33487 + (C9899 - C9900) * C48637 +
             (C21132 - C21133) * C33488 + (C21134 - C21135) * C48622) *
                C48376) *
               C721 +
           (((C10072 - C10071) * C33485 + (C10074 - C10073) * C48649 +
             (C10076 - C10075) * C33486 + (C10078 - C10077) * C48646 +
             (C17669 - C17668) * C33487 + (C17671 - C17670) * C48637 +
             (C17673 - C17672) * C33488 + (C17675 - C17674) * C48622) *
                C22087 +
            ((C9894 - C9893) * C33485 + (C9896 - C9895) * C48649 +
             (C9898 - C9897) * C33486 + (C9900 - C9899) * C48646 +
             (C21133 - C21132) * C33487 + (C21135 - C21134) * C48637 +
             (C48212 * C17570 - C8908 * C17569) * C33488 +
             (C48212 * C17572 - C8908 * C17571) * C48622) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            C41170 * C48634 + C41171 * C48616) *
               C721 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C721 +
           ((C10504 * C30748 + C10505 * C30746 + C10506 * C30749 +
             C10507 * C48416) *
                C48648 +
            (C10337 * C30748 + C10338 * C30746 + C10339 * C30749 +
             C10340 * C48416) *
                C48644 +
            (C14405 * C30748 + C14406 * C30746 + (C10342 - C10341) * C30749 +
             (C10344 - C10343) * C48416) *
                C48634 +
            ((C9388 - C9387) * C30748 + (C9390 - C9389) * C30746 +
             (C48212 * C9620 - C8908 * C9617) * C30749 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             C40034 * C30749 + C40035 * C48416) *
                C48376) *
               C721 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            (C40036 * C30748 + C40037 * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C229 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             C40036 * C30749 + C40037 * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C721 +
           ((C40034 * C30748 + C40035 * C30746 +
             (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C30749 +
             (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C48416) *
                C22087 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C30748 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C30746 +
             (C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
              C48593 * C2272 - C7646 * C2263) *
                 C30749 +
             (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
              C48593 * C2281 - C7646 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C33485 +
             (C48212 * C140 - C8908 * C131) * C48649 +
             (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
             C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
             C18141 * C48622) *
                C22087 +
            ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
             C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
             C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
                C48376) *
               C721 +
           (((C10064 - C10063) * C33485 + (C10066 - C10065) * C48649 +
             (C10068 - C10067) * C33486 + (C10070 - C10069) * C48646 +
             (C10936 - C10937) * C33487 + (C10938 - C10939) * C48637 +
             (C17665 - C17664) * C33488 + (C17667 - C17666) * C48622) *
                C22087 +
            (C10508 * C33485 + C10509 * C48649 + C10510 * C33486 +
             C10511 * C48646 + C21626 * C33487 + C21627 * C48637 +
             (C17906 - C17907) * C33488 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C33485 + (C9003 - C9002) * C48649 +
             C10508 * C33486 + C10509 * C48646 + C10510 * C33487 +
             C10511 * C48637 + C21626 * C33488 + C21627 * C48622) *
                C22087 +
            ((C9005 - C9004) * C33485 + (C9007 - C9006) * C48649 +
             C10516 * C33486 + C10517 * C48646 + C10518 * C33487 +
             C10519 * C48637 + (C10520 - C10521) * C33488 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C721 +
           ((C10504 * C33485 + C10505 * C48649 + C10506 * C33486 +
             C10507 * C48646 + C21624 * C33487 + C21625 * C48637 +
             (C17907 - C17906) * C33488 + (C17909 - C17908) * C48622) *
                C22087 +
            (C10337 * C33485 + C10338 * C48649 + C10339 * C33486 +
             C10340 * C48646 + (C10521 - C10520) * C33487 +
             (C10523 - C10522) * C48637 +
             (C48212 * C10929 - C8908 * C10926) * C33488 +
             (C48212 * C10932 - C8908 * C10930) * C48622) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C30748 +
            (C48212 * C140 - C8908 * C131) * C30746 +
            (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
               C48648 +
           ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
            C10504 * C30749 + C10505 * C48416) *
               C48644 +
           C41170 * C48634 + C41171 * C48616) *
              C867 +
          (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
            (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
               C48648 +
           (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
            C10511 * C48416) *
               C48644 +
           (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
            C10519 * C48416) *
               C48634 +
           (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
            (C10343 - C10344) * C48416) *
               C48616) *
              C868 +
          ((C10934 * C30748 + C10935 * C30746 + C18140 * C30749 +
            C18141 * C48416) *
               C48648 +
           (C10506 * C30748 + C10507 * C30746 + C21624 * C30749 +
            C21625 * C48416) *
               C48644 +
           (C10339 * C30748 + C10340 * C30746 + (C10521 - C10520) * C30749 +
            (C10523 - C10522) * C48416) *
               C48634 +
           ((C10342 - C10341) * C30748 + (C10344 - C10343) * C30746 +
            (C48212 * C10500 - C8908 * C10499) * C30749 +
            (C48212 * C10502 - C8908 * C10501) * C48416) *
               C48616) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C30748 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C30746 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
               C22087 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
            C40034 * C30749 + C40035 * C48416) *
               C48376) *
              C867 +
          (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
               C22087 +
           (C40036 * C30748 + C40037 * C30746 +
            (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
            (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
               C48376) *
              C868 +
          ((C16197 * C30748 + C16198 * C30746 +
            (C16184 - C16183 + C16186 - C16185 + C16188 - C16187) * C30749 +
            (C16190 - C16189 + C16192 - C16191 + C16194 - C16193) * C48416) *
               C22087 +
           ((C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C30748 +
            (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C30746 +
            (C48638 * C3163 - C7644 * C3160 + C48625 * C3164 - C7645 * C3161 +
             C48593 * C3165 - C7646 * C3162) *
                C30749 +
            (C48638 * C3169 - C7644 * C3166 + C48625 * C3170 - C7645 * C3167 +
             C48593 * C3171 - C7646 * C3168) *
                C48416) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C33485 +
            (C48212 * C140 - C8908 * C131) * C48649 +
            (C10063 - C10064) * C33486 + (C10065 - C10066) * C48646 +
            C10934 * C33487 + C10935 * C48637 + C18140 * C33488 +
            C18141 * C48622) *
               C22087 +
           ((C9000 - C9001) * C33485 + (C9002 - C9003) * C48649 +
            C10504 * C33486 + C10505 * C48646 + C10506 * C33487 +
            C10507 * C48637 + C21624 * C33488 + C21625 * C48622) *
               C48376) *
              C867 +
          (((C10064 - C10063) * C33485 + (C10066 - C10065) * C48649 +
            (C10068 - C10067) * C33486 + (C10070 - C10069) * C48646 +
            (C10936 - C10937) * C33487 + (C10938 - C10939) * C48637 +
            (C17665 - C17664) * C33488 + (C17667 - C17666) * C48622) *
               C22087 +
           (C10508 * C33485 + C10509 * C48649 + C10510 * C33486 +
            C10511 * C48646 + C21626 * C33487 + C21627 * C48637 +
            (C17906 - C17907) * C33488 + (C17908 - C17909) * C48622) *
               C48376) *
              C868 +
          ((C10934 * C33485 + C10935 * C48649 + C18140 * C33486 +
            C18141 * C48646 + C18142 * C33487 + C18143 * C48637 +
            (C18145 - C18144) * C33488 + (C18147 - C18146) * C48622) *
               C22087 +
           (C10506 * C33485 + C10507 * C48649 + C21624 * C33486 +
            C21625 * C48646 + (C17907 - C17906) * C33487 +
            (C17909 - C17908) * C48637 +
            (C48212 * C17902 - C8908 * C17901) * C33488 +
            (C48212 * C17904 - C8908 * C17903) * C48622) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C47360 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48412 +
            (C12670 - C12671 + C12672 - C12673) * C47352 +
            (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
            C19799 * C36201) *
               C22087 +
           ((C11176 - C11177 + C11178 - C11179) * C47360 +
            (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
            C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C47360 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C48412 +
            (C12678 - C12679 + C12680 - C12681) * C47352 +
            (C12682 - C12683 + C12684 - C12685) * C48419 +
            (C18690 - C18691 + C18692 - C18693) * C47366 +
            (C18694 - C18695 + C18696 - C18697) * C36201) *
               C22087 +
           ((C11200 - C11201 + C11202 - C11203) * C47360 +
            (C11204 - C11205 + C11206 - C11207) * C48412 +
            (C12460 - C12461 + C12462 - C12463) * C47352 +
            (C12464 - C12465 + C12466 - C12467) * C48419 +
            (C18488 - C18489 + C18490 - C18491) * C47366 +
            (C18492 - C18493 + C18494 - C18495) * C36201) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C47360 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C48412 +
            (C48551 * C349 - C47223 * C343 + C48222 * C350 - C47204 * C344) *
                C47352 +
            (C48551 * C361 - C47223 * C354 + C48222 * C362 - C47204 * C355) *
                C48419 +
            (C48551 * C877 - C47223 * C872 + C48222 * C878 - C47204 * C873) *
                C47366 +
            (C48551 * C887 - C47223 * C882 + C48222 * C888 - C47204 * C883) *
                C36201) *
               C22087 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C47360 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C48412 +
            (C48551 * C626 - C47223 * C621 + C48222 * C627 - C47204 * C622) *
                C47352 +
            (C48551 * C636 - C47223 * C631 + C48222 * C637 - C47204 * C632) *
                C48419 +
            (C48551 * C2266 - C47223 * C2260 + C48222 * C2545 -
             C47204 * C2544) *
                C47366 +
            (C48551 * C2278 - C47223 * C2269 + C48222 * C2547 -
             C47204 * C2546) *
                C36201) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C47360 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48412 +
             (C12670 - C12671 + C12672 - C12673) * C47352 +
             (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
             C19799 * C36201) *
                C22087 +
            ((C11176 - C11177 + C11178 - C11179) * C47360 +
             (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
             C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
                C48376) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C47360 +
             (C11181 - C11180 + C11183 - C11182) * C48412 + C13263 * C47352 +
             C13264 * C48419 + C19250 * C47366 + C19251 * C36201) *
                C22087 +
            ((C11185 - C11184 + C11187 - C11186) * C47360 +
             (C11189 - C11188 + C11191 - C11190) * C48412 + C13265 * C47352 +
             C13266 * C48419 + (C13253 - C13254 + C13255 - C13256) * C47366 +
             (C13257 - C13258 + C13259 - C13260) * C36201) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C47360 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48412 +
             (C12678 - C12679 + C12680 - C12681) * C47352 +
             (C12682 - C12683 + C12684 - C12685) * C48419 +
             (C18690 - C18691 + C18692 - C18693) * C47366 +
             (C18694 - C18695 + C18696 - C18697) * C36201) *
                C22087 +
            ((C11200 - C11201 + C11202 - C11203) * C47360 +
             (C11204 - C11205 + C11206 - C11207) * C48412 +
             (C12460 - C12461 + C12462 - C12463) * C47352 +
             (C12464 - C12465 + C12466 - C12467) * C48419 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36201) *
                C48376) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C47360 +
             (C11205 - C11204 + C11207 - C11206) * C48412 +
             (C12461 - C12460 + C12463 - C12462) * C47352 +
             (C12465 - C12464 + C12467 - C12466) * C48419 +
             (C18489 - C18488 + C18491 - C18490) * C47366 +
             (C18493 - C18492 + C18495 - C18494) * C36201) *
                C22087 +
            ((C11209 - C11208 + C11211 - C11210) * C47360 +
             (C11213 - C11212 + C11215 - C11214) * C48412 +
             (C12469 - C12468 + C12471 - C12470) * C47352 +
             (C12473 - C12472 + C12475 - C12474) * C48419 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C47366 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C36201) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C47360 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48412 +
             (C12670 - C12671 + C12672 - C12673) * C47352 +
             (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
             C19799 * C36201) *
                C22087 +
            ((C11176 - C11177 + C11178 - C11179) * C47360 +
             (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
             C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
                C48376) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C47360 +
             (C12675 - C12674 + C12677 - C12676) * C48412 +
             (C13801 - C13802 + C13803 - C13804) * C47352 +
             (C13805 - C13806 + C13807 - C13808) * C48419 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36201) *
                C22087 +
            (C13263 * C47360 + C13264 * C48412 + C19250 * C47352 +
             C19251 * C48419 + (C19240 - C19241 + C19242 - C19243) * C47366 +
             (C19244 - C19245 + C19246 - C19247) * C36201) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C47360 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48412 +
             (C12678 - C12679 + C12680 - C12681) * C47352 +
             (C12682 - C12683 + C12684 - C12685) * C48419 +
             (C18690 - C18691 + C18692 - C18693) * C47366 +
             (C18694 - C18695 + C18696 - C18697) * C36201) *
                C22087 +
            ((C11200 - C11201 + C11202 - C11203) * C47360 +
             (C11204 - C11205 + C11206 - C11207) * C48412 +
             (C12460 - C12461 + C12462 - C12463) * C47352 +
             (C12464 - C12465 + C12466 - C12467) * C48419 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36201) *
                C48376) *
               C339 +
           (((C12679 - C12678 + C12681 - C12680) * C47360 +
             (C12683 - C12682 + C12685 - C12684) * C48412 +
             (C18691 - C18690 + C18693 - C18692) * C47352 +
             (C18695 - C18694 + C18697 - C18696) * C48419 +
             (C20167 - C20166 + C20169 - C20168) * C47366 +
             (C20171 - C20170 + C20173 - C20172) * C36201) *
                C22087 +
            ((C12461 - C12460 + C12463 - C12462) * C47360 +
             (C12465 - C12464 + C12467 - C12466) * C48412 +
             (C18489 - C18488 + C18491 - C18490) * C47352 +
             (C18493 - C18492 + C18495 - C18494) * C48419 +
             (C48551 * C3164 - C47223 * C3161 + C48222 * C3165 -
              C47204 * C3162) *
                 C47366 +
             (C48551 * C3170 - C47223 * C3167 + C48222 * C3171 -
              C47204 * C3168) *
                 C36201) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C47360 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48412 +
             (C12670 - C12671 + C12672 - C12673) * C47352 +
             (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
             C19799 * C36201) *
                C22087 +
            ((C11176 - C11177 + C11178 - C11179) * C47360 +
             (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
             C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
                C48376) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C47360 +
             (C11181 - C11180 + C11183 - C11182) * C48412 + C13263 * C47352 +
             C13264 * C48419 + C19250 * C47366 + C19251 * C36201) *
                C22087 +
            ((C11185 - C11184 + C11187 - C11186) * C47360 +
             (C11189 - C11188 + C11191 - C11190) * C48412 + C13265 * C47352 +
             C13266 * C48419 + (C13253 - C13254 + C13255 - C13256) * C47366 +
             (C13257 - C13258 + C13259 - C13260) * C36201) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C47360 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48412 +
             (C12678 - C12679 + C12680 - C12681) * C47352 +
             (C12682 - C12683 + C12684 - C12685) * C48419 +
             (C18690 - C18691 + C18692 - C18693) * C47366 +
             (C18694 - C18695 + C18696 - C18697) * C36201) *
                C22087 +
            ((C11200 - C11201 + C11202 - C11203) * C47360 +
             (C11204 - C11205 + C11206 - C11207) * C48412 +
             (C12460 - C12461 + C12462 - C12463) * C47352 +
             (C12464 - C12465 + C12466 - C12467) * C48419 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36201) *
                C48376) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C47360 +
             (C11205 - C11204 + C11207 - C11206) * C48412 +
             (C12461 - C12460 + C12463 - C12462) * C47352 +
             (C12465 - C12464 + C12467 - C12466) * C48419 +
             (C18489 - C18488 + C18491 - C18490) * C47366 +
             (C18493 - C18492 + C18495 - C18494) * C36201) *
                C22087 +
            ((C11209 - C11208 + C11211 - C11210) * C47360 +
             (C11213 - C11212 + C11215 - C11214) * C48412 +
             (C12469 - C12468 + C12471 - C12470) * C47352 +
             (C12473 - C12472 + C12475 - C12474) * C48419 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C47366 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C36201) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C47360 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48412 +
            (C12670 - C12671 + C12672 - C12673) * C47352 +
            (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
            C19799 * C36201) *
               C22087 +
           ((C11176 - C11177 + C11178 - C11179) * C47360 +
            (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
            C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
               C48376) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C47360 +
            (C11181 - C11180 + C11183 - C11182) * C48412 + C13263 * C47352 +
            C13264 * C48419 + C19250 * C47366 + C19251 * C36201) *
               C22087 +
           ((C11185 - C11184 + C11187 - C11186) * C47360 +
            (C11189 - C11188 + C11191 - C11190) * C48412 + C13265 * C47352 +
            C13266 * C48419 + (C13253 - C13254 + C13255 - C13256) * C47366 +
            (C13257 - C13258 + C13259 - C13260) * C36201) *
               C48376) *
              C48300 * C514 +
          ((C11598 * C47360 + C11599 * C48412 + C13033 * C47352 +
            C13034 * C48419 + (C13254 - C13253 + C13256 - C13255) * C47366 +
            (C13258 - C13257 + C13260 - C13259) * C36201) *
               C22087 +
           (C11600 * C47360 + C11601 * C48412 +
            (C11755 - C11754 + C11757 - C11756) * C47352 +
            (C11759 - C11758 + C11761 - C11760) * C48419 +
            (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
             C47204 * C9880) *
                C47366 +
            (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
             C47204 * C9882) *
                C36201) *
               C48376) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C47360 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48412 +
             (C12670 - C12671 + C12672 - C12673) * C47352 +
             (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
             C19799 * C36201) *
                C22087 +
            ((C11176 - C11177 + C11178 - C11179) * C47360 +
             (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
             C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
                C48376) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C47360 +
             (C12675 - C12674 + C12677 - C12676) * C48412 +
             (C13801 - C13802 + C13803 - C13804) * C47352 +
             (C13805 - C13806 + C13807 - C13808) * C48419 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36201) *
                C22087 +
            (C13263 * C47360 + C13264 * C48412 + C19250 * C47352 +
             C19251 * C48419 + (C19240 - C19241 + C19242 - C19243) * C47366 +
             (C19244 - C19245 + C19246 - C19247) * C36201) *
                C48376) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C47360 +
             (C11181 - C11180 + C11183 - C11182) * C48412 + C13263 * C47352 +
             C13264 * C48419 + C19250 * C47366 + C19251 * C36201) *
                C22087 +
            ((C11185 - C11184 + C11187 - C11186) * C47360 +
             (C11189 - C11188 + C11191 - C11190) * C48412 + C13265 * C47352 +
             C13266 * C48419 + (C13253 - C13254 + C13255 - C13256) * C47366 +
             (C13257 - C13258 + C13259 - C13260) * C36201) *
                C48376) *
               C339 +
           ((C13261 * C47360 + C13262 * C48412 + C19248 * C47352 +
             C19249 * C48419 + (C19241 - C19240 + C19243 - C19242) * C47366 +
             (C19245 - C19244 + C19247 - C19246) * C36201) *
                C22087 +
            (C13033 * C47360 + C13034 * C48412 +
             (C13254 - C13253 + C13256 - C13255) * C47352 +
             (C13258 - C13257 + C13260 - C13259) * C48419 +
             (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
              C47204 * C10055) *
                 C47366 +
             (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
              C47204 * C10059) *
                 C36201) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C47360 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48412 +
             (C12670 - C12671 + C12672 - C12673) * C47352 +
             (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
             C19799 * C36201) *
                C22087 +
            ((C11176 - C11177 + C11178 - C11179) * C47360 +
             (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
             C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
                C48376) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C47360 +
             (C12675 - C12674 + C12677 - C12676) * C48412 +
             (C13801 - C13802 + C13803 - C13804) * C47352 +
             (C13805 - C13806 + C13807 - C13808) * C48419 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36201) *
                C22087 +
            (C13263 * C47360 + C13264 * C48412 + C19250 * C47352 +
             C19251 * C48419 + (C19240 - C19241 + C19242 - C19243) * C47366 +
             (C19244 - C19245 + C19246 - C19247) * C36201) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C47360 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48412 +
             (C12678 - C12679 + C12680 - C12681) * C47352 +
             (C12682 - C12683 + C12684 - C12685) * C48419 +
             (C18690 - C18691 + C18692 - C18693) * C47366 +
             (C18694 - C18695 + C18696 - C18697) * C36201) *
                C22087 +
            ((C11200 - C11201 + C11202 - C11203) * C47360 +
             (C11204 - C11205 + C11206 - C11207) * C48412 +
             (C12460 - C12461 + C12462 - C12463) * C47352 +
             (C12464 - C12465 + C12466 - C12467) * C48419 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36201) *
                C48376) *
               C721 +
           (((C12679 - C12678 + C12681 - C12680) * C47360 +
             (C12683 - C12682 + C12685 - C12684) * C48412 +
             (C18691 - C18690 + C18693 - C18692) * C47352 +
             (C18695 - C18694 + C18697 - C18696) * C48419 +
             (C20167 - C20166 + C20169 - C20168) * C47366 +
             (C20171 - C20170 + C20173 - C20172) * C36201) *
                C22087 +
            ((C12461 - C12460 + C12463 - C12462) * C47360 +
             (C12465 - C12464 + C12467 - C12466) * C48412 +
             (C18489 - C18488 + C18491 - C18490) * C47352 +
             (C18493 - C18492 + C18495 - C18494) * C48419 +
             (C48551 * C3164 - C47223 * C3161 + C48222 * C3165 -
              C47204 * C3162) *
                 C47366 +
             (C48551 * C3170 - C47223 * C3167 + C48222 * C3171 -
              C47204 * C3168) *
                 C36201) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C47360 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48412 +
             (C12670 - C12671 + C12672 - C12673) * C47352 +
             (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
             C19799 * C36201) *
                C22087 +
            ((C11176 - C11177 + C11178 - C11179) * C47360 +
             (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
             C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
                C48376) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C47360 +
             (C12675 - C12674 + C12677 - C12676) * C48412 +
             (C13801 - C13802 + C13803 - C13804) * C47352 +
             (C13805 - C13806 + C13807 - C13808) * C48419 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36201) *
                C22087 +
            (C13263 * C47360 + C13264 * C48412 + C19250 * C47352 +
             C19251 * C48419 + (C19240 - C19241 + C19242 - C19243) * C47366 +
             (C19244 - C19245 + C19246 - C19247) * C36201) *
                C48376) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C47360 +
             (C11181 - C11180 + C11183 - C11182) * C48412 + C13263 * C47352 +
             C13264 * C48419 + C19250 * C47366 + C19251 * C36201) *
                C22087 +
            ((C11185 - C11184 + C11187 - C11186) * C47360 +
             (C11189 - C11188 + C11191 - C11190) * C48412 + C13265 * C47352 +
             C13266 * C48419 + (C13253 - C13254 + C13255 - C13256) * C47366 +
             (C13257 - C13258 + C13259 - C13260) * C36201) *
                C48376) *
               C721 +
           ((C13261 * C47360 + C13262 * C48412 + C19248 * C47352 +
             C19249 * C48419 + (C19241 - C19240 + C19243 - C19242) * C47366 +
             (C19245 - C19244 + C19247 - C19246) * C36201) *
                C22087 +
            (C13033 * C47360 + C13034 * C48412 +
             (C13254 - C13253 + C13256 - C13255) * C47352 +
             (C13258 - C13257 + C13260 - C13259) * C48419 +
             (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
              C47204 * C10055) *
                 C47366 +
             (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
              C47204 * C10059) *
                 C36201) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C47360 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48412 +
            (C12670 - C12671 + C12672 - C12673) * C47352 +
            (C12674 - C12675 + C12676 - C12677) * C48419 + C19798 * C47366 +
            C19799 * C36201) *
               C22087 +
           ((C11176 - C11177 + C11178 - C11179) * C47360 +
            (C11180 - C11181 + C11182 - C11183) * C48412 + C13261 * C47352 +
            C13262 * C48419 + C19248 * C47366 + C19249 * C36201) *
               C48376) *
              C867 +
          (((C12671 - C12670 + C12673 - C12672) * C47360 +
            (C12675 - C12674 + C12677 - C12676) * C48412 +
            (C13801 - C13802 + C13803 - C13804) * C47352 +
            (C13805 - C13806 + C13807 - C13808) * C48419 +
            (C19790 - C19791 + C19792 - C19793) * C47366 +
            (C19794 - C19795 + C19796 - C19797) * C36201) *
               C22087 +
           (C13263 * C47360 + C13264 * C48412 + C19250 * C47352 +
            C19251 * C48419 + (C19240 - C19241 + C19242 - C19243) * C47366 +
            (C19244 - C19245 + C19246 - C19247) * C36201) *
               C48376) *
              C868 +
          ((C19798 * C47360 + C19799 * C48412 + C20902 * C47352 +
            C20903 * C48419 + (C20895 - C20894 + C20897 - C20896) * C47366 +
            (C20899 - C20898 + C20901 - C20900) * C36201) *
               C22087 +
           (C19248 * C47360 + C19249 * C48412 +
            (C19241 - C19240 + C19243 - C19242) * C47352 +
            (C19245 - C19244 + C19247 - C19246) * C48419 +
            (C48551 * C10927 - C47223 * C10925 + C48222 * C17570 -
             C47204 * C17569) *
                C47366 +
            (C48551 * C10931 - C47223 * C10928 + C48222 * C17572 -
             C47204 * C17571) *
                C36201) *
               C48376) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C30748 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C30746 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
               C22087 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C30748 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C30746 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
               C22087 +
           ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
            (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
            (C7644 * C620 - C48638 * C625 + C7645 * C621 - C48625 * C626 +
             C7646 * C622 - C48593 * C627) *
                C30749 +
            (C7644 * C630 - C48638 * C635 + C7645 * C631 - C48625 * C636 +
             C7646 * C632 - C48593 * C637) *
                C48416) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48638 * C128 - C7644 * C121 + C48625 * C129 - C7645 * C122 +
             C48593 * C130 - C7646 * C123) *
                C30748 +
            (C48638 * C142 - C7644 * C133 + C48625 * C143 - C7645 * C134 +
             C48593 * C144 - C7646 * C135) *
                C30746 +
            (C48638 * C349 - C7644 * C343 + C48625 * C350 - C7645 * C344 +
             C48593 * C351 - C7646 * C345) *
                C30749 +
            (C48638 * C361 - C7644 * C354 + C48625 * C362 - C7645 * C355 +
             C48593 * C363 - C7646 * C356) *
                C48416) *
               C22087 +
           ((C48638 * C241 - C7644 * C235 + C48625 * C242 - C7645 * C236 +
             C48593 * C243 - C7646 * C237) *
                C30748 +
            (C48638 * C253 - C7644 * C246 + C48625 * C254 - C7645 * C247 +
             C48593 * C255 - C7646 * C248) *
                C30746 +
            (C48638 * C626 - C7644 * C621 + C48625 * C627 - C7645 * C622 +
             C48593 * C628 - C7646 * C623) *
                C30749 +
            (C48638 * C636 - C7644 * C631 + C48625 * C637 - C7645 * C632 +
             C48593 * C638 - C7646 * C633) *
                C48416) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C30748 +
            (C48212 * C140 - C8908 * C131) * C30746 +
            (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
               C48648 +
           ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
            C10504 * C30749 + C10505 * C48416) *
               C48644 +
           (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
            C10338 * C48416) *
               C48634 +
           (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
            C14406 * C48416) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C30748 +
            (C8908 * C132 - C48212 * C141) * C30746 +
            (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
               C48648 +
           ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
            (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
               C48644 +
           ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
            (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
               C48634 +
           ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
            (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C30748 +
            (C48212 * C142 - C8908 * C133) * C30746 +
            (C48212 * C349 - C8908 * C343) * C30749 +
            (C48212 * C361 - C8908 * C354) * C48416) *
               C48648 +
           ((C48212 * C241 - C8908 * C235) * C30748 +
            (C48212 * C253 - C8908 * C246) * C30746 +
            (C48212 * C626 - C8908 * C621) * C30749 +
            (C48212 * C636 - C8908 * C631) * C48416) *
               C48644 +
           ((C48212 * C524 - C8908 * C519) * C30748 +
            (C48212 * C534 - C8908 * C529) * C30746 +
            (C48212 * C1371 - C8908 * C1367) * C30749 +
            (C48212 * C1379 - C8908 * C1374) * C48416) *
               C48634 +
           ((C48212 * C1161 - C8908 * C1157) * C30748 +
            (C48212 * C1169 - C8908 * C1164) * C30746 +
            (C48212 * C1825 - C8908 * C1822) * C30749 +
            (C48212 * C1831 - C8908 * C1828) * C48416) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30749 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C30748 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C30746 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30749 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48416) *
                C22087 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C30748 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C30746 +
             (C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C30749 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
             C10338 * C48416) *
                C48634 +
            (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
             C14406 * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9017 - C9016) * C30748 + (C9019 - C9018) * C30746 +
             (C9894 - C9893) * C30749 + (C9896 - C9895) * C48416) *
                C48648 +
            ((C9021 - C9020) * C30748 + (C9023 - C9022) * C30746 +
             (C9902 - C9901) * C30749 + (C9904 - C9903) * C48416) *
                C48644 +
            ((C9025 - C9024) * C30748 + (C9027 - C9026) * C30746 +
             (C14038 - C14037) * C30749 + (C14040 - C14039) * C48416) *
                C48634 +
            ((C9029 - C9028) * C30748 + (C9031 - C9030) * C30746 +
             (C48212 * C9117 - C8908 * C9114) * C30749 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
                C48376) *
               C339 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30748 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C339 +
           (((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C30748 +
             (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C30746 +
             (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C30749 +
             (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C48416) *
                C22087 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30748 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C30746 +
             (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
              C48593 * C2545 - C7646 * C2544) *
                 C30749 +
             (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
              C48593 * C2547 - C7646 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
             C10338 * C48416) *
                C48634 +
            (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
             C14406 * C48416) *
                C48616) *
               C339 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C339 +
           (((C10072 - C10071) * C30748 + (C10074 - C10073) * C30746 +
             (C10076 - C10075) * C30749 + (C10078 - C10077) * C48416) *
                C48648 +
            ((C9894 - C9893) * C30748 + (C9896 - C9895) * C30746 +
             (C9898 - C9897) * C30749 + (C9900 - C9899) * C48416) *
                C48644 +
            ((C9902 - C9901) * C30748 + (C9904 - C9903) * C30746 +
             (C9906 - C9905) * C30749 + (C9908 - C9907) * C48416) *
                C48634 +
            ((C14038 - C14037) * C30748 + (C14040 - C14039) * C30746 +
             (C48212 * C9881 - C8908 * C9880) * C30749 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30749 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C30748 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C30746 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30749 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48416) *
                C22087 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C30748 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C30746 +
             (C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C30749 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            (C9270 * C30748 + C9271 * C30746 + C10337 * C30749 +
             C10338 * C48416) *
                C48634 +
            (C9272 * C30748 + C9273 * C30746 + C14405 * C30749 +
             C14406 * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9017 - C9016) * C30748 + (C9019 - C9018) * C30746 +
             (C9894 - C9893) * C30749 + (C9896 - C9895) * C48416) *
                C48648 +
            ((C9021 - C9020) * C30748 + (C9023 - C9022) * C30746 +
             (C9902 - C9901) * C30749 + (C9904 - C9903) * C48416) *
                C48644 +
            ((C9025 - C9024) * C30748 + (C9027 - C9026) * C30746 +
             (C14038 - C14037) * C30749 + (C14040 - C14039) * C48416) *
                C48634 +
            ((C9029 - C9028) * C30748 + (C9031 - C9030) * C30746 +
             (C48212 * C9117 - C8908 * C9114) * C30749 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C30748 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C30746 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
               C22087 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C30749 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48416) *
               C48376) *
              C48300 * C513 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C30749 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48416) *
               C22087 +
           ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
            (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
               C48376) *
              C48300 * C514 +
          ((C8264 * C30748 + C8265 * C30746 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C30749 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48416) *
               C22087 +
           ((C8251 - C8250 + C8253 - C8252 + C8255 - C8254) * C30748 +
            (C8257 - C8256 + C8259 - C8258 + C8261 - C8260) * C30746 +
            (C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
             C48593 * C1825 - C7646 * C1822) *
                C30749 +
            (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
             C48593 * C1831 - C7646 * C1828) *
                C48416) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C30748 +
            (C48212 * C140 - C8908 * C131) * C30746 +
            (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
               C48648 +
           ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
            C10504 * C30749 + C10505 * C48416) *
               C48644 +
           C41170 * C48634 + C41171 * C48616) *
              C48300 * C513 +
          (((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
            C10508 * C30749 + C10509 * C48416) *
               C48648 +
           ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
            C10516 * C30749 + C10517 * C48416) *
               C48644 +
           ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
            C14545 * C30749 + C14546 * C48416) *
               C48634 +
           ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
            (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
               C48616) *
              C48300 * C514 +
          (C41170 * C48648 + C41171 * C48644 +
           (C9274 * C30748 + C9275 * C30746 + (C9388 - C9387) * C30749 +
            (C9390 - C9389) * C48416) *
               C48634 +
           ((C9277 - C9276) * C30748 + (C9279 - C9278) * C30746 +
            (C48212 * C9371 - C8908 * C9370) * C30749 +
            (C48212 * C9373 - C8908 * C9372) * C48416) *
               C48616) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             C40034 * C30749 + C40035 * C48416) *
                C48376) *
               C339 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            (C40036 * C30748 + C40037 * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C447 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             C40036 * C30749 + C40037 * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C339 +
           ((C40034 * C30748 + C40035 * C30746 +
             (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C30749 +
             (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C48416) *
                C22087 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C30748 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C30746 +
             (C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
              C48593 * C2272 - C7646 * C2263) *
                 C30749 +
             (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
              C48593 * C2281 - C7646 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            C41170 * C48634 + C41171 * C48616) *
               C339 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C339 +
           ((C10504 * C30748 + C10505 * C30746 + C10506 * C30749 +
             C10507 * C48416) *
                C48648 +
            (C10337 * C30748 + C10338 * C30746 + C10339 * C30749 +
             C10340 * C48416) *
                C48644 +
            (C14405 * C30748 + C14406 * C30746 + (C10342 - C10341) * C30749 +
             (C10344 - C10343) * C48416) *
                C48634 +
            ((C9388 - C9387) * C30748 + (C9390 - C9389) * C30746 +
             (C48212 * C9620 - C8908 * C9617) * C30749 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             C40034 * C30749 + C40035 * C48416) *
                C48376) *
               C721 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            (C40036 * C30748 + C40037 * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C30748 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C30746 +
             (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C30749 +
             (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C48416) *
                C22087 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C30748 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C30746 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C30749 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48416) *
                C48376) *
               C721 +
           (((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C30748 +
             (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C30746 +
             (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C30749 +
             (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C48416) *
                C22087 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C30748 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C30746 +
             (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
              C48593 * C2545 - C7646 * C2544) *
                 C30749 +
             (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
              C48593 * C2547 - C7646 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            C41170 * C48634 + C41171 * C48616) *
               C721 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C30748 +
             (C8908 * C132 - C48212 * C141) * C30746 +
             (C10071 - C10072) * C30749 + (C10073 - C10074) * C48416) *
                C48648 +
            ((C9016 - C9017) * C30748 + (C9018 - C9019) * C30746 +
             (C9893 - C9894) * C30749 + (C9895 - C9896) * C48416) *
                C48644 +
            ((C9020 - C9021) * C30748 + (C9022 - C9023) * C30746 +
             (C9901 - C9902) * C30749 + (C9903 - C9904) * C48416) *
                C48634 +
            ((C9024 - C9025) * C30748 + (C9026 - C9027) * C30746 +
             (C14037 - C14038) * C30749 + (C14039 - C14040) * C48416) *
                C48616) *
               C721 +
           (((C10072 - C10071) * C30748 + (C10074 - C10073) * C30746 +
             (C10076 - C10075) * C30749 + (C10078 - C10077) * C48416) *
                C48648 +
            ((C9894 - C9893) * C30748 + (C9896 - C9895) * C30746 +
             (C9898 - C9897) * C30749 + (C9900 - C9899) * C48416) *
                C48644 +
            ((C9902 - C9901) * C30748 + (C9904 - C9903) * C30746 +
             (C9906 - C9905) * C30749 + (C9908 - C9907) * C48416) *
                C48634 +
            ((C14038 - C14037) * C30748 + (C14040 - C14039) * C30746 +
             (C48212 * C9881 - C8908 * C9880) * C30749 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C30748 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C30746 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
             (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
                C22087 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
             C40034 * C30749 + C40035 * C48416) *
                C48376) *
               C721 +
           (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
             (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
             (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
                C22087 +
            (C40036 * C30748 + C40037 * C30746 +
             (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
             (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
                C48376) *
               C48603) *
              C229 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C30748 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C30746 +
             C40036 * C30749 + C40037 * C48416) *
                C22087 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C30748 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C30746 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C30749 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48416) *
                C48376) *
               C721 +
           ((C40034 * C30748 + C40035 * C30746 +
             (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C30749 +
             (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C48416) *
                C22087 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C30748 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C30746 +
             (C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
              C48593 * C2272 - C7646 * C2263) *
                 C30749 +
             (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
              C48593 * C2281 - C7646 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C30748 +
             (C48212 * C140 - C8908 * C131) * C30746 +
             (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
                C48648 +
            ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
             C10504 * C30749 + C10505 * C48416) *
                C48644 +
            C41170 * C48634 + C41171 * C48616) *
               C721 +
           (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
             (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
                C48648 +
            (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
             C10511 * C48416) *
                C48644 +
            (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
             C10519 * C48416) *
                C48634 +
            (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C30748 + (C9003 - C9002) * C30746 +
             C10508 * C30749 + C10509 * C48416) *
                C48648 +
            ((C9005 - C9004) * C30748 + (C9007 - C9006) * C30746 +
             C10516 * C30749 + C10517 * C48416) *
                C48644 +
            ((C9009 - C9008) * C30748 + (C9011 - C9010) * C30746 +
             C14545 * C30749 + C14546 * C48416) *
                C48634 +
            ((C9013 - C9012) * C30748 + (C9015 - C9014) * C30746 +
             (C9387 - C9388) * C30749 + (C9389 - C9390) * C48416) *
                C48616) *
               C721 +
           ((C10504 * C30748 + C10505 * C30746 + C10506 * C30749 +
             C10507 * C48416) *
                C48648 +
            (C10337 * C30748 + C10338 * C30746 + C10339 * C30749 +
             C10340 * C48416) *
                C48644 +
            (C14405 * C30748 + C14406 * C30746 + (C10342 - C10341) * C30749 +
             (C10344 - C10343) * C48416) *
                C48634 +
            ((C9388 - C9387) * C30748 + (C9390 - C9389) * C30746 +
             (C48212 * C9620 - C8908 * C9617) * C30749 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C30748 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C30746 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C30749 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C48416) *
               C22087 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C30748 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C30746 +
            C40034 * C30749 + C40035 * C48416) *
               C48376) *
              C867 +
          (((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C30748 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C30746 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C30749 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C48416) *
               C22087 +
           (C40036 * C30748 + C40037 * C30746 +
            (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C30749 +
            (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48416) *
               C48376) *
              C868 +
          ((C16197 * C30748 + C16198 * C30746 +
            (C16184 - C16183 + C16186 - C16185 + C16188 - C16187) * C30749 +
            (C16190 - C16189 + C16192 - C16191 + C16194 - C16193) * C48416) *
               C22087 +
           ((C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C30748 +
            (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C30746 +
            (C48638 * C3163 - C7644 * C3160 + C48625 * C3164 - C7645 * C3161 +
             C48593 * C3165 - C7646 * C3162) *
                C30749 +
            (C48638 * C3169 - C7644 * C3166 + C48625 * C3170 - C7645 * C3167 +
             C48593 * C3171 - C7646 * C3168) *
                C48416) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C30748 +
            (C48212 * C140 - C8908 * C131) * C30746 +
            (C10063 - C10064) * C30749 + (C10065 - C10066) * C48416) *
               C48648 +
           ((C9000 - C9001) * C30748 + (C9002 - C9003) * C30746 +
            C10504 * C30749 + C10505 * C48416) *
               C48644 +
           C41170 * C48634 + C41171 * C48616) *
              C867 +
          (((C10064 - C10063) * C30748 + (C10066 - C10065) * C30746 +
            (C10068 - C10067) * C30749 + (C10070 - C10069) * C48416) *
               C48648 +
           (C10508 * C30748 + C10509 * C30746 + C10510 * C30749 +
            C10511 * C48416) *
               C48644 +
           (C10516 * C30748 + C10517 * C30746 + C10518 * C30749 +
            C10519 * C48416) *
               C48634 +
           (C14545 * C30748 + C14546 * C30746 + (C10341 - C10342) * C30749 +
            (C10343 - C10344) * C48416) *
               C48616) *
              C868 +
          ((C10934 * C30748 + C10935 * C30746 + C18140 * C30749 +
            C18141 * C48416) *
               C48648 +
           (C10506 * C30748 + C10507 * C30746 + C21624 * C30749 +
            C21625 * C48416) *
               C48644 +
           (C10339 * C30748 + C10340 * C30746 + (C10521 - C10520) * C30749 +
            (C10523 - C10522) * C48416) *
               C48634 +
           ((C10342 - C10341) * C30748 + (C10344 - C10343) * C30746 +
            (C48212 * C10500 - C8908 * C10499) * C30749 +
            (C48212 * C10502 - C8908 * C10501) * C48416) *
               C48616) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C118 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48329) *
               C11039 +
           ((C48551 * C239 - C47223 * C233 + C48222 * C240 - C47204 * C234) *
                C118 +
            (C48551 * C251 - C47223 * C244 + C48222 * C252 - C47204 * C245) *
                C48329) *
               C11040 +
           ((C48551 * C522 - C47223 * C517 + C48222 * C523 - C47204 * C518) *
                C118 +
            (C48551 * C532 - C47223 * C527 + C48222 * C533 - C47204 * C528) *
                C48329) *
               C11041 +
           ((C48551 * C1159 - C47223 * C1155 + C48222 * C1160 -
             C47204 * C1156) *
                C118 +
            (C48551 * C1167 - C47223 * C1162 + C48222 * C1168 -
             C47204 * C1163) *
                C48329) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C118 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C48329) *
               C11039 +
           ((C47223 * C234 - C48551 * C240 + C47204 * C235 - C48222 * C241) *
                C118 +
            (C47223 * C245 - C48551 * C252 + C47204 * C246 - C48222 * C253) *
                C48329) *
               C11040 +
           ((C47223 * C518 - C48551 * C523 + C47204 * C519 - C48222 * C524) *
                C118 +
            (C47223 * C528 - C48551 * C533 + C47204 * C529 - C48222 * C534) *
                C48329) *
               C11041 +
           ((C47223 * C1156 - C48551 * C1160 + C47204 * C1157 -
             C48222 * C1161) *
                C118 +
            (C47223 * C1163 - C48551 * C1168 + C47204 * C1164 -
             C48222 * C1169) *
                C48329) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C118 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C48329) *
               C11039 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C118 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C48329) *
               C11040 +
           ((C48551 * C524 - C47223 * C519 + C48222 * C525 - C47204 * C520) *
                C118 +
            (C48551 * C534 - C47223 * C529 + C48222 * C535 - C47204 * C530) *
                C48329) *
               C11041 +
           ((C48551 * C1161 - C47223 * C1157 + C48222 * C1165 -
             C47204 * C1158) *
                C118 +
            (C48551 * C1169 - C47223 * C1164 + C48222 * C1170 -
             C47204 * C1166) *
                C48329) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48329) *
               C48573 +
           ((C3718 * C239 - C3724 * C233 + C3719 * C240 - C3725 * C234 +
             C3720 * C241 - C3726 * C235 + C48610 * C242 - C3727 * C236) *
                C118 +
            (C3718 * C251 - C3724 * C244 + C3719 * C252 - C3725 * C245 +
             C3720 * C253 - C3726 * C246 + C48610 * C254 - C3727 * C247) *
                C48329) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C118 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48329) *
               C48573 +
           ((C3724 * C234 - C3718 * C240 + C3725 * C235 - C3719 * C241 +
             C3726 * C236 - C3720 * C242 + C3727 * C237 - C48610 * C243) *
                C118 +
            (C3724 * C245 - C3718 * C252 + C3725 * C246 - C3719 * C253 +
             C3726 * C247 - C3720 * C254 + C3727 * C248 - C48610 * C255) *
                C48329) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
             C3720 * C130 - C3726 * C123 + C48610 * C136 - C3727 * C124) *
                C118 +
            (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
             C3720 * C144 - C3726 * C135 + C48610 * C145 - C3727 * C137) *
                C48329) *
               C48573 +
           ((C3718 * C241 - C3724 * C235 + C3719 * C242 - C3725 * C236 +
             C3720 * C243 - C3726 * C237 + C48610 * C249 - C3727 * C238) *
                C118 +
            (C3718 * C253 - C3724 * C246 + C3719 * C254 - C3725 * C247 +
             C3720 * C255 - C3726 * C248 + C48610 * C256 - C3727 * C250) *
                C48329) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C15017 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C15014 +
            (C12670 - C12671 + C12672 - C12673) * C15018 +
            (C12674 - C12675 + C12676 - C12677) * C15015 +
            (C13802 - C13801 + C13804 - C13803) * C15019 +
            (C13806 - C13805 + C13808 - C13807) * C48609) *
               C48573 +
           ((C11176 - C11177 + C11178 - C11179) * C15017 +
            (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
            C13262 * C15015 + (C13242 - C13241 + C13244 - C13243) * C15019 +
            (C13246 - C13245 + C13248 - C13247) * C48609) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C15017 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C15014 +
            (C12678 - C12679 + C12680 - C12681) * C15018 +
            (C12682 - C12683 + C12684 - C12685) * C15015 +
            (C47223 * C871 - C48551 * C876 + C47204 * C872 - C48222 * C877) *
                C15019 +
            (C47223 * C881 - C48551 * C886 + C47204 * C882 - C48222 * C887) *
                C48609) *
               C48573 +
           ((C11200 - C11201 + C11202 - C11203) * C15017 +
            (C11204 - C11205 + C11206 - C11207) * C15014 +
            (C12460 - C12461 + C12462 - C12463) * C15018 +
            (C12464 - C12465 + C12466 - C12467) * C15015 +
            (C47223 * C2259 - C48551 * C2265 + C47204 * C2260 -
             C48222 * C2266) *
                C15019 +
            (C47223 * C2268 - C48551 * C2277 + C47204 * C2269 -
             C48222 * C2278) *
                C48609) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C15017 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C15014 +
            (C48551 * C349 - C47223 * C343 + C48222 * C350 - C47204 * C344) *
                C15018 +
            (C48551 * C361 - C47223 * C354 + C48222 * C362 - C47204 * C355) *
                C15015 +
            (C48551 * C877 - C47223 * C872 + C48222 * C878 - C47204 * C873) *
                C15019 +
            (C48551 * C887 - C47223 * C882 + C48222 * C888 - C47204 * C883) *
                C48609) *
               C48573 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C15017 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C15014 +
            (C48551 * C626 - C47223 * C621 + C48222 * C627 - C47204 * C622) *
                C15018 +
            (C48551 * C636 - C47223 * C631 + C48222 * C637 - C47204 * C632) *
                C15015 +
            (C48551 * C2266 - C47223 * C2260 + C48222 * C2545 -
             C47204 * C2544) *
                C15019 +
            (C48551 * C2278 - C47223 * C2269 + C48222 * C2547 -
             C47204 * C2546) *
                C48609) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            ((C11184 - C11185 + C11186 - C11187) * C118 +
             (C11188 - C11189 + C11190 - C11191) * C48329) *
                C11041 +
            ((C11192 - C11193 + C11194 - C11195) * C118 +
             (C11196 - C11197 + C11198 - C11199) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C47223 * C1637 - C48551 * C1640 + C47204 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C47223 * C1643 - C48551 * C1646 + C47204 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C118 +
             (C11205 - C11204 + C11207 - C11206) * C48329) *
                C11039 +
            ((C11209 - C11208 + C11211 - C11210) * C118 +
             (C11213 - C11212 + C11215 - C11214) * C48329) *
                C11040 +
            ((C11217 - C11216 + C11219 - C11218) * C118 +
             (C11221 - C11220 + C11223 - C11222) * C48329) *
                C11041 +
            ((C48551 * C1641 - C47223 * C1638 + C48222 * C1642 -
              C47204 * C1639) *
                 C118 +
             (C48551 * C1647 - C47223 * C1644 + C48222 * C1648 -
              C47204 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
              C3726 * C519 - C3720 * C524 + C3727 * C520 - C48610 * C525) *
                 C118 +
             (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
              C3726 * C529 - C3720 * C534 + C3727 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                 C118 +
             (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                 C48329) *
                C48573 +
            ((C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
              C3720 * C525 - C3726 * C520 + C48610 * C526 - C3727 * C521) *
                 C118 +
             (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
              C3720 * C535 - C3726 * C530 + C48610 * C536 - C3727 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C15017 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C15014 +
             (C12670 - C12671 + C12672 - C12673) * C15018 +
             (C12674 - C12675 + C12676 - C12677) * C15015 +
             (C13802 - C13801 + C13804 - C13803) * C15019 +
             (C13806 - C13805 + C13808 - C13807) * C48609) *
                C48573 +
            ((C11176 - C11177 + C11178 - C11179) * C15017 +
             (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
             C13262 * C15015 + (C13242 - C13241 + C13244 - C13243) * C15019 +
             (C13246 - C13245 + C13248 - C13247) * C48609) *
                C48376) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C15017 +
             (C11181 - C11180 + C11183 - C11182) * C15014 + C13263 * C15018 +
             C13264 * C15015 + (C13241 - C13242 + C13243 - C13244) * C15019 +
             (C13245 - C13246 + C13247 - C13248) * C48609) *
                C48573 +
            ((C11185 - C11184 + C11187 - C11186) * C15017 +
             (C11189 - C11188 + C11191 - C11190) * C15014 + C13265 * C15018 +
             C13266 * C15015 + (C13253 - C13254 + C13255 - C13256) * C15019 +
             (C13257 - C13258 + C13259 - C13260) * C48609) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C15017 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C15014 +
             (C12678 - C12679 + C12680 - C12681) * C15018 +
             (C12682 - C12683 + C12684 - C12685) * C15015 +
             (C47223 * C871 - C48551 * C876 + C47204 * C872 - C48222 * C877) *
                 C15019 +
             (C47223 * C881 - C48551 * C886 + C47204 * C882 - C48222 * C887) *
                 C48609) *
                C48573 +
            ((C11200 - C11201 + C11202 - C11203) * C15017 +
             (C11204 - C11205 + C11206 - C11207) * C15014 +
             (C12460 - C12461 + C12462 - C12463) * C15018 +
             (C12464 - C12465 + C12466 - C12467) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48609) *
                C48376) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C15017 +
             (C11205 - C11204 + C11207 - C11206) * C15014 +
             (C12461 - C12460 + C12463 - C12462) * C15018 +
             (C12465 - C12464 + C12467 - C12466) * C15015 +
             (C18489 - C18488 + C18491 - C18490) * C15019 +
             (C18493 - C18492 + C18495 - C18494) * C48609) *
                C48573 +
            ((C11209 - C11208 + C11211 - C11210) * C15017 +
             (C11213 - C11212 + C11215 - C11214) * C15014 +
             (C12469 - C12468 + C12471 - C12470) * C15018 +
             (C12473 - C12472 + C12475 - C12474) * C15015 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C15019 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48609) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            ((C11184 - C11185 + C11186 - C11187) * C118 +
             (C11188 - C11189 + C11190 - C11191) * C48329) *
                C11041 +
            ((C11192 - C11193 + C11194 - C11195) * C118 +
             (C11196 - C11197 + C11198 - C11199) * C48329) *
                C48616) *
               C339 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C47223 * C619 - C48551 * C624 + C47204 * C620 - C48222 * C625) *
                 C118 +
             (C47223 * C629 - C48551 * C634 + C47204 * C630 - C48222 * C635) *
                 C48329) *
                C11040 +
            ((C47223 * C1365 - C48551 * C1369 + C47204 * C1366 -
              C48222 * C1370) *
                 C118 +
             (C47223 * C1372 - C48551 * C1377 + C47204 * C1373 -
              C48222 * C1378) *
                 C48329) *
                C11041 +
            ((C47223 * C1820 - C48551 * C1823 + C47204 * C1821 -
              C48222 * C1824) *
                 C118 +
             (C47223 * C1826 - C48551 * C1829 + C47204 * C1827 -
              C48222 * C1830) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C339 +
           (((C48551 * C348 - C47223 * C342 + C48222 * C349 - C47204 * C343) *
                 C118 +
             (C48551 * C360 - C47223 * C353 + C48222 * C361 - C47204 * C354) *
                 C48329) *
                C11039 +
            ((C48551 * C625 - C47223 * C620 + C48222 * C626 - C47204 * C621) *
                 C118 +
             (C48551 * C635 - C47223 * C630 + C48222 * C636 - C47204 * C631) *
                 C48329) *
                C11040 +
            ((C48551 * C1370 - C47223 * C1366 + C48222 * C1371 -
              C47204 * C1367) *
                 C118 +
             (C48551 * C1378 - C47223 * C1373 + C48222 * C1379 -
              C47204 * C1374) *
                 C48329) *
                C11041 +
            ((C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C118 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C339 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C3724 * C619 - C3718 * C624 + C3725 * C620 - C3719 * C625 +
              C3726 * C621 - C3720 * C626 + C3727 * C622 - C48610 * C627) *
                 C118 +
             (C3724 * C629 - C3718 * C634 + C3725 * C630 - C3719 * C635 +
              C3726 * C631 - C3720 * C636 + C3727 * C632 - C48610 * C637) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C339 +
           (((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
              C3720 * C350 - C3726 * C344 + C48610 * C351 - C3727 * C345) *
                 C118 +
             (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
              C3720 * C362 - C3726 * C355 + C48610 * C363 - C3727 * C356) *
                 C48329) *
                C48573 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C15017 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C15014 +
             (C12670 - C12671 + C12672 - C12673) * C15018 +
             (C12674 - C12675 + C12676 - C12677) * C15015 +
             (C13802 - C13801 + C13804 - C13803) * C15019 +
             (C13806 - C13805 + C13808 - C13807) * C48609) *
                C48573 +
            ((C11176 - C11177 + C11178 - C11179) * C15017 +
             (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
             C13262 * C15015 + (C13242 - C13241 + C13244 - C13243) * C15019 +
             (C13246 - C13245 + C13248 - C13247) * C48609) *
                C48376) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C15017 +
             (C12675 - C12674 + C12677 - C12676) * C15014 +
             (C13801 - C13802 + C13803 - C13804) * C15018 +
             (C13805 - C13806 + C13807 - C13808) * C15015 +
             (C47223 * C2694 - C48551 * C2698 + C47204 * C2695 -
              C48222 * C2699) *
                 C15019 +
             (C47223 * C2701 - C48551 * C2706 + C47204 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C48573 +
            (C13263 * C15017 + C13264 * C15014 +
             (C13241 - C13242 + C13243 - C13244) * C15018 +
             (C13245 - C13246 + C13247 - C13248) * C15015 +
             (C47223 * C3160 - C48551 * C3163 + C47204 * C3161 -
              C48222 * C3164) *
                 C15019 +
             (C47223 * C3166 - C48551 * C3169 + C47204 * C3167 -
              C48222 * C3170) *
                 C48609) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C15017 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C15014 +
             (C12678 - C12679 + C12680 - C12681) * C15018 +
             (C12682 - C12683 + C12684 - C12685) * C15015 +
             (C18690 - C18691 + C18692 - C18693) * C15019 +
             (C18694 - C18695 + C18696 - C18697) * C48609) *
                C48573 +
            ((C11200 - C11201 + C11202 - C11203) * C15017 +
             (C11204 - C11205 + C11206 - C11207) * C15014 +
             (C12460 - C12461 + C12462 - C12463) * C15018 +
             (C12464 - C12465 + C12466 - C12467) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48609) *
                C48376) *
               C339 +
           (((C12679 - C12678 + C12681 - C12680) * C15017 +
             (C12683 - C12682 + C12685 - C12684) * C15014 +
             (C18691 - C18690 + C18693 - C18692) * C15018 +
             (C18695 - C18694 + C18697 - C18696) * C15015 +
             (C48551 * C2699 - C47223 * C2695 + C48222 * C2700 -
              C47204 * C2696) *
                 C15019 +
             (C48551 * C2707 - C47223 * C2702 + C48222 * C2708 -
              C47204 * C2703) *
                 C48609) *
                C48573 +
            ((C12461 - C12460 + C12463 - C12462) * C15017 +
             (C12465 - C12464 + C12467 - C12466) * C15014 +
             (C18489 - C18488 + C18491 - C18490) * C15018 +
             (C18493 - C18492 + C18495 - C18494) * C15015 +
             (C48551 * C3164 - C47223 * C3161 + C48222 * C3165 -
              C47204 * C3162) *
                 C15019 +
             (C48551 * C3170 - C47223 * C3167 + C48222 * C3171 -
              C47204 * C3168) *
                 C48609) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            ((C11184 - C11185 + C11186 - C11187) * C118 +
             (C11188 - C11189 + C11190 - C11191) * C48329) *
                C11041 +
            ((C11192 - C11193 + C11194 - C11195) * C118 +
             (C11196 - C11197 + C11198 - C11199) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C47223 * C1637 - C48551 * C1640 + C47204 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C47223 * C1643 - C48551 * C1646 + C47204 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C118 +
             (C11205 - C11204 + C11207 - C11206) * C48329) *
                C11039 +
            ((C11209 - C11208 + C11211 - C11210) * C118 +
             (C11213 - C11212 + C11215 - C11214) * C48329) *
                C11040 +
            ((C11217 - C11216 + C11219 - C11218) * C118 +
             (C11221 - C11220 + C11223 - C11222) * C48329) *
                C11041 +
            ((C48551 * C1641 - C47223 * C1638 + C48222 * C1642 -
              C47204 * C1639) *
                 C118 +
             (C48551 * C1647 - C47223 * C1644 + C48222 * C1648 -
              C47204 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
              C3726 * C519 - C3720 * C524 + C3727 * C520 - C48610 * C525) *
                 C118 +
             (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
              C3726 * C529 - C3720 * C534 + C3727 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                 C118 +
             (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                 C48329) *
                C48573 +
            ((C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
              C3720 * C525 - C3726 * C520 + C48610 * C526 - C3727 * C521) *
                 C118 +
             (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
              C3720 * C535 - C3726 * C530 + C48610 * C536 - C3727 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C15017 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C15014 +
             (C12670 - C12671 + C12672 - C12673) * C15018 +
             (C12674 - C12675 + C12676 - C12677) * C15015 +
             (C13802 - C13801 + C13804 - C13803) * C15019 +
             (C13806 - C13805 + C13808 - C13807) * C48609) *
                C48573 +
            ((C11176 - C11177 + C11178 - C11179) * C15017 +
             (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
             C13262 * C15015 + (C13242 - C13241 + C13244 - C13243) * C15019 +
             (C13246 - C13245 + C13248 - C13247) * C48609) *
                C48376) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C15017 +
             (C11181 - C11180 + C11183 - C11182) * C15014 + C13263 * C15018 +
             C13264 * C15015 + (C13241 - C13242 + C13243 - C13244) * C15019 +
             (C13245 - C13246 + C13247 - C13248) * C48609) *
                C48573 +
            ((C11185 - C11184 + C11187 - C11186) * C15017 +
             (C11189 - C11188 + C11191 - C11190) * C15014 + C13265 * C15018 +
             C13266 * C15015 + (C13253 - C13254 + C13255 - C13256) * C15019 +
             (C13257 - C13258 + C13259 - C13260) * C48609) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C15017 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C15014 +
             (C12678 - C12679 + C12680 - C12681) * C15018 +
             (C12682 - C12683 + C12684 - C12685) * C15015 +
             (C18690 - C18691 + C18692 - C18693) * C15019 +
             (C18694 - C18695 + C18696 - C18697) * C48609) *
                C48573 +
            ((C11200 - C11201 + C11202 - C11203) * C15017 +
             (C11204 - C11205 + C11206 - C11207) * C15014 +
             (C12460 - C12461 + C12462 - C12463) * C15018 +
             (C12464 - C12465 + C12466 - C12467) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48609) *
                C48376) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C15017 +
             (C11205 - C11204 + C11207 - C11206) * C15014 +
             (C12461 - C12460 + C12463 - C12462) * C15018 +
             (C12465 - C12464 + C12467 - C12466) * C15015 +
             (C18489 - C18488 + C18491 - C18490) * C15019 +
             (C18493 - C18492 + C18495 - C18494) * C48609) *
                C48573 +
            ((C11209 - C11208 + C11211 - C11210) * C15017 +
             (C11213 - C11212 + C11215 - C11214) * C15014 +
             (C12469 - C12468 + C12471 - C12470) * C15018 +
             (C12473 - C12472 + C12475 - C12474) * C15015 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C15019 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48609) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C118 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48329) *
               C11039 +
           ((C11176 - C11177 + C11178 - C11179) * C118 +
            (C11180 - C11181 + C11182 - C11183) * C48329) *
               C11040 +
           C11606 * C11041 + C11607 * C48616) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C118 +
            (C11181 - C11180 + C11183 - C11182) * C48329) *
               C11039 +
           ((C11185 - C11184 + C11187 - C11186) * C118 +
            (C11189 - C11188 + C11191 - C11190) * C48329) *
               C11040 +
           ((C11193 - C11192 + C11195 - C11194) * C118 +
            (C11197 - C11196 + C11199 - C11198) * C48329) *
               C11041 +
           ((C11590 - C11591 + C11592 - C11593) * C118 +
            (C11594 - C11595 + C11596 - C11597) * C48329) *
               C48616) *
              C48300 * C514 +
          (C11606 * C11039 + C11607 * C11040 +
           ((C11591 - C11590 + C11593 - C11592) * C118 +
            (C11595 - C11594 + C11597 - C11596) * C48329) *
               C11041 +
           ((C48551 * C8993 - C47223 * C8991 + C48222 * C8995 -
             C47204 * C8992) *
                C118 +
            (C48551 * C8997 - C47223 * C8994 + C48222 * C8998 -
             C47204 * C8996) *
                C48329) *
               C48616) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48329) *
               C48573 +
           ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                C118 +
            (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                C48329) *
               C48376) *
              C48300 * C513 +
          (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C118 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48329) *
               C48573 +
           ((C4249 - C4250 + C4251 - C4252 + C4253 - C4254 + C4255 - C4256) *
                C118 +
            (C4257 - C4258 + C4259 - C4260 + C4261 - C4262 + C4263 - C4264) *
                C48329) *
               C48376) *
              C48300 * C514 +
          (((C4250 - C4249 + C4252 - C4251 + C4254 - C4253 + C4256 - C4255) *
                C118 +
            (C4258 - C4257 + C4260 - C4259 + C4262 - C4261 + C4264 - C4263) *
                C48329) *
               C48573 +
           ((C3718 * C1159 - C3724 * C1155 + C3719 * C1160 - C3725 * C1156 +
             C3720 * C1161 - C3726 * C1157 + C48610 * C1165 - C3727 * C1158) *
                C118 +
            (C3718 * C1167 - C3724 * C1162 + C3719 * C1168 - C3725 * C1163 +
             C3720 * C1169 - C3726 * C1164 + C48610 * C1170 - C3727 * C1166) *
                C48329) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C15017 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C15014 +
            (C12670 - C12671 + C12672 - C12673) * C15018 +
            (C12674 - C12675 + C12676 - C12677) * C15015 +
            (C13802 - C13801 + C13804 - C13803) * C15019 +
            (C13806 - C13805 + C13808 - C13807) * C48609) *
               C48573 +
           ((C11176 - C11177 + C11178 - C11179) * C15017 +
            (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
            C13262 * C15015 + (C13242 - C13241 + C13244 - C13243) * C15019 +
            (C13246 - C13245 + C13248 - C13247) * C48609) *
               C48376) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C15017 +
            (C11181 - C11180 + C11183 - C11182) * C15014 + C13263 * C15018 +
            C13264 * C15015 + (C13241 - C13242 + C13243 - C13244) * C15019 +
            (C13245 - C13246 + C13247 - C13248) * C48609) *
               C48573 +
           ((C11185 - C11184 + C11187 - C11186) * C15017 +
            (C11189 - C11188 + C11191 - C11190) * C15014 + C13265 * C15018 +
            C13266 * C15015 + (C13253 - C13254 + C13255 - C13256) * C15019 +
            (C13257 - C13258 + C13259 - C13260) * C48609) *
               C48376) *
              C48300 * C514 +
          ((C11598 * C15017 + C11599 * C15014 + C13033 * C15018 +
            C13034 * C15015 + (C13254 - C13253 + C13256 - C13255) * C15019 +
            (C13258 - C13257 + C13260 - C13259) * C48609) *
               C48573 +
           (C11600 * C15017 + C11601 * C15014 +
            (C11755 - C11754 + C11757 - C11756) * C15018 +
            (C11759 - C11758 + C11761 - C11760) * C15015 +
            (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
             C47204 * C9880) *
                C15019 +
            (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
             C47204 * C9882) *
                C48609) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            C11606 * C11041 + C11607 * C48616) *
               C339 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C11738 - C11739 + C11740 - C11741) * C118 +
             (C11742 - C11743 + C11744 - C11745) * C48329) *
                C11040 +
            ((C11746 - C11747 + C11748 - C11749) * C118 +
             (C11750 - C11751 + C11752 - C11753) * C48329) *
                C11041 +
            ((C11754 - C11755 + C11756 - C11757) * C118 +
             (C11758 - C11759 + C11760 - C11761) * C48329) *
                C48616) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C11590 - C11591 + C11592 - C11593) * C118 +
             (C11594 - C11595 + C11596 - C11597) * C48329) *
                C48616) *
               C339 +
           (((C11739 - C11738 + C11741 - C11740) * C118 +
             (C11743 - C11742 + C11745 - C11744) * C48329) *
                C11039 +
            ((C11747 - C11746 + C11749 - C11748) * C118 +
             (C11751 - C11750 + C11753 - C11752) * C48329) *
                C11040 +
            ((C11755 - C11754 + C11757 - C11756) * C118 +
             (C11759 - C11758 + C11761 - C11760) * C48329) *
                C11041 +
            ((C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
              C47204 * C9114) *
                 C118 +
             (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
              C47204 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C339 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                 C118 +
             (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                 C48329) *
                C48376) *
               C48603) *
              C447 +
          ((((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C4249 - C4250 + C4251 - C4252 + C4253 - C4254 + C4255 - C4256) *
                 C118 +
             (C4257 - C4258 + C4259 - C4260 + C4261 - C4262 + C4263 - C4264) *
                 C48329) *
                C48376) *
               C339 +
           (((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                 C118 +
             (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                 C48329) *
                C48573 +
            ((C3718 * C1369 - C3724 * C1365 + C3719 * C1370 - C3725 * C1366 +
              C3720 * C1371 - C3726 * C1367 + C48610 * C1375 - C3727 * C1368) *
                 C118 +
             (C3718 * C1377 - C3724 * C1372 + C3719 * C1378 - C3725 * C1373 +
              C3720 * C1379 - C3726 * C1374 + C48610 * C1380 - C3727 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C15017 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C15014 +
             (C12670 - C12671 + C12672 - C12673) * C15018 +
             (C12674 - C12675 + C12676 - C12677) * C15015 +
             (C13802 - C13801 + C13804 - C13803) * C15019 +
             (C13806 - C13805 + C13808 - C13807) * C48609) *
                C48573 +
            ((C11176 - C11177 + C11178 - C11179) * C15017 +
             (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
             C13262 * C15015 + C19248 * C15019 + C19249 * C48609) *
                C48376) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C15017 +
             (C12675 - C12674 + C12677 - C12676) * C15014 +
             (C13801 - C13802 + C13803 - C13804) * C15018 +
             (C13805 - C13806 + C13807 - C13808) * C15015 +
             (C47223 * C2694 - C48551 * C2698 + C47204 * C2695 -
              C48222 * C2699) *
                 C15019 +
             (C47223 * C2701 - C48551 * C2706 + C47204 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C48573 +
            (C13263 * C15017 + C13264 * C15014 + C19250 * C15018 +
             C19251 * C15015 + (C19240 - C19241 + C19242 - C19243) * C15019 +
             (C19244 - C19245 + C19246 - C19247) * C48609) *
                C48376) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C15017 +
             (C11181 - C11180 + C11183 - C11182) * C15014 + C13263 * C15018 +
             C13264 * C15015 + C19250 * C15019 + C19251 * C48609) *
                C48573 +
            ((C11185 - C11184 + C11187 - C11186) * C15017 +
             (C11189 - C11188 + C11191 - C11190) * C15014 + C13265 * C15018 +
             C13266 * C15015 + (C13253 - C13254 + C13255 - C13256) * C15019 +
             (C13257 - C13258 + C13259 - C13260) * C48609) *
                C48376) *
               C339 +
           ((C13261 * C15017 + C13262 * C15014 + C19248 * C15018 +
             C19249 * C15015 + (C19241 - C19240 + C19243 - C19242) * C15019 +
             (C19245 - C19244 + C19247 - C19246) * C48609) *
                C48573 +
            (C13033 * C15017 + C13034 * C15014 +
             (C13254 - C13253 + C13256 - C13255) * C15018 +
             (C13258 - C13257 + C13260 - C13259) * C15015 +
             (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
              C47204 * C10055) *
                 C15019 +
             (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
              C47204 * C10059) *
                 C48609) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            C11606 * C11041 + C11607 * C48616) *
               C721 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C11738 - C11739 + C11740 - C11741) * C118 +
             (C11742 - C11743 + C11744 - C11745) * C48329) *
                C11040 +
            ((C11746 - C11747 + C11748 - C11749) * C118 +
             (C11750 - C11751 + C11752 - C11753) * C48329) *
                C11041 +
            ((C11754 - C11755 + C11756 - C11757) * C118 +
             (C11758 - C11759 + C11760 - C11761) * C48329) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C721 +
           (((C48551 * C348 - C47223 * C342 + C48222 * C349 - C47204 * C343) *
                 C118 +
             (C48551 * C360 - C47223 * C353 + C48222 * C361 - C47204 * C354) *
                 C48329) *
                C11039 +
            ((C48551 * C625 - C47223 * C620 + C48222 * C626 - C47204 * C621) *
                 C118 +
             (C48551 * C635 - C47223 * C630 + C48222 * C636 - C47204 * C631) *
                 C48329) *
                C11040 +
            ((C48551 * C1370 - C47223 * C1366 + C48222 * C1371 -
              C47204 * C1367) *
                 C118 +
             (C48551 * C1378 - C47223 * C1373 + C48222 * C1379 -
              C47204 * C1374) *
                 C48329) *
                C11041 +
            ((C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C118 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C721 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                 C118 +
             (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C721 +
           (((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
              C3720 * C350 - C3726 * C344 + C48610 * C351 - C3727 * C345) *
                 C118 +
             (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
              C3720 * C362 - C3726 * C355 + C48610 * C363 - C3727 * C356) *
                 C48329) *
                C48573 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C15017 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C15014 +
             (C12670 - C12671 + C12672 - C12673) * C15018 +
             (C12674 - C12675 + C12676 - C12677) * C15015 +
             (C13802 - C13801 + C13804 - C13803) * C15019 +
             (C13806 - C13805 + C13808 - C13807) * C48609) *
                C48573 +
            ((C11176 - C11177 + C11178 - C11179) * C15017 +
             (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
             C13262 * C15015 + C19248 * C15019 + C19249 * C48609) *
                C48376) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C15017 +
             (C12675 - C12674 + C12677 - C12676) * C15014 +
             (C13801 - C13802 + C13803 - C13804) * C15018 +
             (C13805 - C13806 + C13807 - C13808) * C15015 +
             (C47223 * C2694 - C48551 * C2698 + C47204 * C2695 -
              C48222 * C2699) *
                 C15019 +
             (C47223 * C2701 - C48551 * C2706 + C47204 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C48573 +
            (C13263 * C15017 + C13264 * C15014 + C19250 * C15018 +
             C19251 * C15015 + (C19240 - C19241 + C19242 - C19243) * C15019 +
             (C19244 - C19245 + C19246 - C19247) * C48609) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C15017 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C15014 +
             (C12678 - C12679 + C12680 - C12681) * C15018 +
             (C12682 - C12683 + C12684 - C12685) * C15015 +
             (C18690 - C18691 + C18692 - C18693) * C15019 +
             (C18694 - C18695 + C18696 - C18697) * C48609) *
                C48573 +
            ((C11200 - C11201 + C11202 - C11203) * C15017 +
             (C11204 - C11205 + C11206 - C11207) * C15014 +
             (C12460 - C12461 + C12462 - C12463) * C15018 +
             (C12464 - C12465 + C12466 - C12467) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48609) *
                C48376) *
               C721 +
           (((C12679 - C12678 + C12681 - C12680) * C15017 +
             (C12683 - C12682 + C12685 - C12684) * C15014 +
             (C18691 - C18690 + C18693 - C18692) * C15018 +
             (C18695 - C18694 + C18697 - C18696) * C15015 +
             (C48551 * C2699 - C47223 * C2695 + C48222 * C2700 -
              C47204 * C2696) *
                 C15019 +
             (C48551 * C2707 - C47223 * C2702 + C48222 * C2708 -
              C47204 * C2703) *
                 C48609) *
                C48573 +
            ((C12461 - C12460 + C12463 - C12462) * C15017 +
             (C12465 - C12464 + C12467 - C12466) * C15014 +
             (C18489 - C18488 + C18491 - C18490) * C15018 +
             (C18493 - C18492 + C18495 - C18494) * C15015 +
             (C48551 * C3164 - C47223 * C3161 + C48222 * C3165 -
              C47204 * C3162) *
                 C15019 +
             (C48551 * C3170 - C47223 * C3167 + C48222 * C3171 -
              C47204 * C3168) *
                 C48609) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            C11606 * C11041 + C11607 * C48616) *
               C721 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C11738 - C11739 + C11740 - C11741) * C118 +
             (C11742 - C11743 + C11744 - C11745) * C48329) *
                C11040 +
            ((C11746 - C11747 + C11748 - C11749) * C118 +
             (C11750 - C11751 + C11752 - C11753) * C48329) *
                C11041 +
            ((C11754 - C11755 + C11756 - C11757) * C118 +
             (C11758 - C11759 + C11760 - C11761) * C48329) *
                C48616) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C11590 - C11591 + C11592 - C11593) * C118 +
             (C11594 - C11595 + C11596 - C11597) * C48329) *
                C48616) *
               C721 +
           (((C11739 - C11738 + C11741 - C11740) * C118 +
             (C11743 - C11742 + C11745 - C11744) * C48329) *
                C11039 +
            ((C11747 - C11746 + C11749 - C11748) * C118 +
             (C11751 - C11750 + C11753 - C11752) * C48329) *
                C11040 +
            ((C11755 - C11754 + C11757 - C11756) * C118 +
             (C11759 - C11758 + C11761 - C11760) * C48329) *
                C11041 +
            ((C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
              C47204 * C9114) *
                 C118 +
             (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
              C47204 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C721 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                 C118 +
             (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                 C48329) *
                C48376) *
               C48603) *
              C229 +
          ((((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C4249 - C4250 + C4251 - C4252 + C4253 - C4254 + C4255 - C4256) *
                 C118 +
             (C4257 - C4258 + C4259 - C4260 + C4261 - C4262 + C4263 - C4264) *
                 C48329) *
                C48376) *
               C721 +
           (((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                 C118 +
             (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                 C48329) *
                C48573 +
            ((C3718 * C1369 - C3724 * C1365 + C3719 * C1370 - C3725 * C1366 +
              C3720 * C1371 - C3726 * C1367 + C48610 * C1375 - C3727 * C1368) *
                 C118 +
             (C3718 * C1377 - C3724 * C1372 + C3719 * C1378 - C3725 * C1373 +
              C3720 * C1379 - C3726 * C1374 + C48610 * C1380 - C3727 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C15017 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C15014 +
             (C12670 - C12671 + C12672 - C12673) * C15018 +
             (C12674 - C12675 + C12676 - C12677) * C15015 +
             (C13802 - C13801 + C13804 - C13803) * C15019 +
             (C13806 - C13805 + C13808 - C13807) * C48609) *
                C48573 +
            ((C11176 - C11177 + C11178 - C11179) * C15017 +
             (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
             C13262 * C15015 + C19248 * C15019 + C19249 * C48609) *
                C48376) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C15017 +
             (C12675 - C12674 + C12677 - C12676) * C15014 +
             (C13801 - C13802 + C13803 - C13804) * C15018 +
             (C13805 - C13806 + C13807 - C13808) * C15015 +
             (C47223 * C2694 - C48551 * C2698 + C47204 * C2695 -
              C48222 * C2699) *
                 C15019 +
             (C47223 * C2701 - C48551 * C2706 + C47204 * C2702 -
              C48222 * C2707) *
                 C48609) *
                C48573 +
            (C13263 * C15017 + C13264 * C15014 + C19250 * C15018 +
             C19251 * C15015 + (C19240 - C19241 + C19242 - C19243) * C15019 +
             (C19244 - C19245 + C19246 - C19247) * C48609) *
                C48376) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C15017 +
             (C11181 - C11180 + C11183 - C11182) * C15014 + C13263 * C15018 +
             C13264 * C15015 + C19250 * C15019 + C19251 * C48609) *
                C48573 +
            ((C11185 - C11184 + C11187 - C11186) * C15017 +
             (C11189 - C11188 + C11191 - C11190) * C15014 + C13265 * C15018 +
             C13266 * C15015 + (C13253 - C13254 + C13255 - C13256) * C15019 +
             (C13257 - C13258 + C13259 - C13260) * C48609) *
                C48376) *
               C721 +
           ((C13261 * C15017 + C13262 * C15014 + C19248 * C15018 +
             C19249 * C15015 + (C19241 - C19240 + C19243 - C19242) * C15019 +
             (C19245 - C19244 + C19247 - C19246) * C48609) *
                C48573 +
            (C13033 * C15017 + C13034 * C15014 +
             (C13254 - C13253 + C13256 - C13255) * C15018 +
             (C13258 - C13257 + C13260 - C13259) * C15015 +
             (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
              C47204 * C10055) *
                 C15019 +
             (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
              C47204 * C10059) *
                 C48609) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C118 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48329) *
               C11039 +
           ((C11176 - C11177 + C11178 - C11179) * C118 +
            (C11180 - C11181 + C11182 - C11183) * C48329) *
               C11040 +
           C11606 * C11041 + C11607 * C48616) *
              C867 +
          (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                C118 +
            (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                C48329) *
               C11039 +
           ((C11738 - C11739 + C11740 - C11741) * C118 +
            (C11742 - C11743 + C11744 - C11745) * C48329) *
               C11040 +
           ((C11746 - C11747 + C11748 - C11749) * C118 +
            (C11750 - C11751 + C11752 - C11753) * C48329) *
               C11041 +
           ((C11754 - C11755 + C11756 - C11757) * C118 +
            (C11758 - C11759 + C11760 - C11761) * C48329) *
               C48616) *
              C868 +
          (((C48551 * C875 - C47223 * C870 + C48222 * C876 - C47204 * C871) *
                C118 +
            (C48551 * C885 - C47223 * C880 + C48222 * C886 - C47204 * C881) *
                C48329) *
               C11039 +
           ((C48551 * C2264 - C47223 * C2258 + C48222 * C2265 -
             C47204 * C2259) *
                C118 +
            (C48551 * C2276 - C47223 * C2267 + C48222 * C2277 -
             C47204 * C2268) *
                C48329) *
               C11040 +
           ((C48551 * C2270 - C47223 * C2261 + C48222 * C2271 -
             C47204 * C2262) *
                C118 +
            (C48551 * C2279 - C47223 * C2273 + C48222 * C2280 -
             C47204 * C2274) *
                C48329) *
               C11041 +
           ((C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
             C47204 * C9880) *
                C118 +
            (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
             C47204 * C9882) *
                C48329) *
               C48616) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48329) *
               C48573 +
           ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                C118 +
            (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                C48329) *
               C48376) *
              C867 +
          (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                C118 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                C48329) *
               C48573 +
           ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C118 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48329) *
               C48376) *
              C868 +
          (((C3718 * C875 - C3724 * C870 + C3719 * C876 - C3725 * C871 +
             C3720 * C877 - C3726 * C872 + C48610 * C878 - C3727 * C873) *
                C118 +
            (C3718 * C885 - C3724 * C880 + C3719 * C886 - C3725 * C881 +
             C3720 * C887 - C3726 * C882 + C48610 * C888 - C3727 * C883) *
                C48329) *
               C48573 +
           ((C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
             C3720 * C2266 - C3726 * C2260 + C48610 * C2545 - C3727 * C2544) *
                C118 +
            (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
             C3720 * C2278 - C3726 * C2269 + C48610 * C2547 - C3727 * C2546) *
                C48329) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C15017 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C15014 +
            (C12670 - C12671 + C12672 - C12673) * C15018 +
            (C12674 - C12675 + C12676 - C12677) * C15015 + C19798 * C15019 +
            C19799 * C48609) *
               C48573 +
           ((C11176 - C11177 + C11178 - C11179) * C15017 +
            (C11180 - C11181 + C11182 - C11183) * C15014 + C13261 * C15018 +
            C13262 * C15015 + C19248 * C15019 + C19249 * C48609) *
               C48376) *
              C867 +
          (((C12671 - C12670 + C12673 - C12672) * C15017 +
            (C12675 - C12674 + C12677 - C12676) * C15014 +
            (C13801 - C13802 + C13803 - C13804) * C15018 +
            (C13805 - C13806 + C13807 - C13808) * C15015 +
            (C19790 - C19791 + C19792 - C19793) * C15019 +
            (C19794 - C19795 + C19796 - C19797) * C48609) *
               C48573 +
           (C13263 * C15017 + C13264 * C15014 + C19250 * C15018 +
            C19251 * C15015 + (C19240 - C19241 + C19242 - C19243) * C15019 +
            (C19244 - C19245 + C19246 - C19247) * C48609) *
               C48376) *
              C868 +
          ((C19798 * C15017 + C19799 * C15014 +
            (C19791 - C19790 + C19793 - C19792) * C15018 +
            (C19795 - C19794 + C19797 - C19796) * C15015 +
            (C48551 * C3589 - C47223 * C3586 + C48222 * C3590 -
             C47204 * C3587) *
                C15019 +
            (C48551 * C3595 - C47223 * C3592 + C48222 * C3596 -
             C47204 * C3593) *
                C48609) *
               C48573 +
           (C19248 * C15017 + C19249 * C15014 +
            (C19241 - C19240 + C19243 - C19242) * C15018 +
            (C19245 - C19244 + C19247 - C19246) * C15015 +
            (C48551 * C10927 - C47223 * C10925 + C48222 * C17570 -
             C47204 * C17569) *
                C15019 +
            (C48551 * C10931 - C47223 * C10928 + C48222 * C17572 -
             C47204 * C17571) *
                C48609) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C4868 +
            (C48212 * C140 - C8908 * C131) * C48574 +
            (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
               C11039 +
           ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
            C10504 * C4869 + C10505 * C48416) *
               C11040 +
           (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 + C10338 * C48416) *
               C11041 +
           (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
            (C9386 - C9385) * C48416) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C4868 +
            (C8908 * C132 - C48212 * C141) * C48574 +
            (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
               C11039 +
           ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
            (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
               C11040 +
           ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
            (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
               C11041 +
           ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
            (C8908 * C1821 - C48212 * C1824) * C4869 +
            (C8908 * C1827 - C48212 * C1830) * C48416) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C4868 +
            (C48212 * C142 - C8908 * C133) * C48574 +
            (C48212 * C349 - C8908 * C343) * C4869 +
            (C48212 * C361 - C8908 * C354) * C48416) *
               C11039 +
           ((C48212 * C241 - C8908 * C235) * C4868 +
            (C48212 * C253 - C8908 * C246) * C48574 +
            (C48212 * C626 - C8908 * C621) * C4869 +
            (C48212 * C636 - C8908 * C631) * C48416) *
               C11040 +
           ((C48212 * C524 - C8908 * C519) * C4868 +
            (C48212 * C534 - C8908 * C529) * C48574 +
            (C48212 * C1371 - C8908 * C1367) * C4869 +
            (C48212 * C1379 - C8908 * C1374) * C48416) *
               C11041 +
           ((C48212 * C1161 - C8908 * C1157) * C4868 +
            (C48212 * C1169 - C8908 * C1164) * C48574 +
            (C48212 * C1825 - C8908 * C1822) * C4869 +
            (C48212 * C1831 - C8908 * C1828) * C48416) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C4868 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48574 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
               C48573 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
            (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C4868 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48574 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
               C48573 +
           ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
            (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
            (C1006 * C620 - C1000 * C625 + C1007 * C621 - C1001 * C626 +
             C1008 * C622 - C48593 * C627) *
                C4869 +
            (C1006 * C630 - C1000 * C635 + C1007 * C631 - C1001 * C636 +
             C1008 * C632 - C48593 * C637) *
                C48416) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
             C48593 * C130 - C1008 * C123) *
                C4868 +
            (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
             C48593 * C144 - C1008 * C135) *
                C48574 +
            (C1000 * C349 - C1006 * C343 + C1001 * C350 - C1007 * C344 +
             C48593 * C351 - C1008 * C345) *
                C4869 +
            (C1000 * C361 - C1006 * C354 + C1001 * C362 - C1007 * C355 +
             C48593 * C363 - C1008 * C356) *
                C48416) *
               C48573 +
           ((C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
             C48593 * C243 - C1008 * C237) *
                C4868 +
            (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
             C48593 * C255 - C1008 * C248) *
                C48574 +
            (C1000 * C626 - C1006 * C621 + C1001 * C627 - C1007 * C622 +
             C48593 * C628 - C1008 * C623) *
                C4869 +
            (C1000 * C636 - C1006 * C631 + C1001 * C637 - C1007 * C632 +
             C48593 * C638 - C1008 * C633) *
                C48416) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C19901 +
            (C48212 * C140 - C8908 * C131) * C19897 +
            (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
            C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
            C18141 * C48622) *
               C48573 +
           ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
            C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
            C10507 * C19899 + (C10513 - C10512) * C19904 +
            (C10515 - C10514) * C48622) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C19901 +
            (C8908 * C132 - C48212 * C141) * C19897 +
            (C10071 - C10072) * C19902 + (C10073 - C10074) * C19898 +
            (C10075 - C10076) * C19903 + (C10077 - C10078) * C19899 +
            (C17668 - C17669) * C19904 + (C17670 - C17671) * C48622) *
               C48573 +
           ((C9016 - C9017) * C19901 + (C9018 - C9019) * C19897 +
            (C9893 - C9894) * C19902 + (C9895 - C9896) * C19898 +
            (C9897 - C9898) * C19903 + (C9899 - C9900) * C19899 +
            (C8908 * C3161 - C48212 * C3164) * C19904 +
            (C8908 * C3167 - C48212 * C3170) * C48622) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C19901 +
            (C48212 * C142 - C8908 * C133) * C19897 +
            (C48212 * C349 - C8908 * C343) * C19902 +
            (C48212 * C361 - C8908 * C354) * C19898 +
            (C48212 * C877 - C8908 * C872) * C19903 +
            (C48212 * C887 - C8908 * C882) * C19899 +
            (C48212 * C2700 - C8908 * C2696) * C19904 +
            (C48212 * C2708 - C8908 * C2703) * C48622) *
               C48573 +
           ((C48212 * C241 - C8908 * C235) * C19901 +
            (C48212 * C253 - C8908 * C246) * C19897 +
            (C48212 * C626 - C8908 * C621) * C19902 +
            (C48212 * C636 - C8908 * C631) * C19898 +
            (C48212 * C2266 - C8908 * C2260) * C19903 +
            (C48212 * C2278 - C8908 * C2269) * C19899 +
            (C48212 * C3165 - C8908 * C3162) * C19904 +
            (C48212 * C3171 - C8908 * C3168) * C48622) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 +
             C10338 * C48416) *
                C11041 +
            (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
             (C9386 - C9385) * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             (C9383 - C9384) * C4869 + (C9385 - C9386) * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9017 - C9016) * C4868 + (C9019 - C9018) * C48574 +
             (C9894 - C9893) * C4869 + (C9896 - C9895) * C48416) *
                C11039 +
            ((C9021 - C9020) * C4868 + (C9023 - C9022) * C48574 +
             (C9902 - C9901) * C4869 + (C9904 - C9903) * C48416) *
                C11040 +
            ((C9025 - C9024) * C4868 + (C9027 - C9026) * C48574 +
             (C14038 - C14037) * C4869 + (C14040 - C14039) * C48416) *
                C11041 +
            ((C9029 - C9028) * C4868 + (C9031 - C9030) * C48574 +
             (C48212 * C9117 - C8908 * C9114) * C4869 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4869 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C4868 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48574 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4869 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48416) *
                C48573 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C4868 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48574 +
             (C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C4869 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C19901 +
             (C48212 * C140 - C8908 * C131) * C19897 +
             (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
             C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
             C18141 * C48622) *
                C48573 +
            ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
             C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
             C10507 * C19899 + (C10513 - C10512) * C19904 +
             (C10515 - C10514) * C48622) *
                C48376) *
               C48300 * C229 +
           (((C9001 - C9000) * C19901 + (C9003 - C9002) * C19897 +
             C10508 * C19902 + C10509 * C19898 + C10510 * C19903 +
             C10511 * C19899 + (C10512 - C10513) * C19904 +
             (C10514 - C10515) * C48622) *
                C48573 +
            ((C9005 - C9004) * C19901 + (C9007 - C9006) * C19897 +
             C10516 * C19902 + C10517 * C19898 + C10518 * C19903 +
             C10519 * C19899 + (C10520 - C10521) * C19904 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C19901 +
             (C8908 * C132 - C48212 * C141) * C19897 +
             (C10071 - C10072) * C19902 + (C10073 - C10074) * C19898 +
             (C10075 - C10076) * C19903 + (C10077 - C10078) * C19899 +
             (C17668 - C17669) * C19904 + (C17670 - C17671) * C48622) *
                C48573 +
            ((C9016 - C9017) * C19901 + (C9018 - C9019) * C19897 +
             (C9893 - C9894) * C19902 + (C9895 - C9896) * C19898 +
             (C9897 - C9898) * C19903 + (C9899 - C9900) * C19899 +
             (C21132 - C21133) * C19904 + (C21134 - C21135) * C48622) *
                C48376) *
               C48300 * C229 +
           (((C9017 - C9016) * C19901 + (C9019 - C9018) * C19897 +
             (C9894 - C9893) * C19902 + (C9896 - C9895) * C19898 +
             (C9898 - C9897) * C19903 + (C9900 - C9899) * C19899 +
             (C21133 - C21132) * C19904 + (C21135 - C21134) * C48622) *
                C48573 +
            ((C9021 - C9020) * C19901 + (C9023 - C9022) * C19897 +
             (C9902 - C9901) * C19902 + (C9904 - C9903) * C19898 +
             (C9906 - C9905) * C19903 + (C9908 - C9907) * C19899 +
             (C48212 * C10058 - C8908 * C10055) * C19904 +
             (C48212 * C10061 - C8908 * C10059) * C48622) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 +
             C10338 * C48416) *
                C11041 +
            (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
             (C9386 - C9385) * C48416) *
                C48616) *
               C339 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            ((C9383 - C9384) * C4868 + (C9385 - C9386) * C48574 +
             (C10341 - C10342) * C4869 + (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C339 +
           (((C10072 - C10071) * C4868 + (C10074 - C10073) * C48574 +
             (C10076 - C10075) * C4869 + (C10078 - C10077) * C48416) *
                C11039 +
            ((C9894 - C9893) * C4868 + (C9896 - C9895) * C48574 +
             (C9898 - C9897) * C4869 + (C9900 - C9899) * C48416) *
                C11040 +
            ((C9902 - C9901) * C4868 + (C9904 - C9903) * C48574 +
             (C9906 - C9905) * C4869 + (C9908 - C9907) * C48416) *
                C11041 +
            ((C14038 - C14037) * C4868 + (C14040 - C14039) * C48574 +
             (C48212 * C9881 - C8908 * C9880) * C4869 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                C48376) *
               C339 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4868 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C339 +
           (((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C4868 +
             (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48574 +
             (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C4869 +
             (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48416) *
                C48573 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4868 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48574 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48593 * C2545 - C1008 * C2544) *
                 C4869 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48593 * C2547 - C1008 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C19901 +
             (C48212 * C140 - C8908 * C131) * C19897 +
             (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
             C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
             C18141 * C48622) *
                C48573 +
            ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
             C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
             C10507 * C19899 + (C10513 - C10512) * C19904 +
             (C10515 - C10514) * C48622) *
                C48376) *
               C339 +
           (((C10064 - C10063) * C19901 + (C10066 - C10065) * C19897 +
             (C10068 - C10067) * C19902 + (C10070 - C10069) * C19898 +
             (C10936 - C10937) * C19903 + (C10938 - C10939) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48622) *
                C48573 +
            (C10508 * C19901 + C10509 * C19897 + C10510 * C19902 +
             C10511 * C19898 + (C10512 - C10513) * C19903 +
             (C10514 - C10515) * C19899 + (C17906 - C17907) * C19904 +
             (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C19901 +
             (C8908 * C132 - C48212 * C141) * C19897 +
             (C10071 - C10072) * C19902 + (C10073 - C10074) * C19898 +
             (C10075 - C10076) * C19903 + (C10077 - C10078) * C19899 +
             (C17668 - C17669) * C19904 + (C17670 - C17671) * C48622) *
                C48573 +
            ((C9016 - C9017) * C19901 + (C9018 - C9019) * C19897 +
             (C9893 - C9894) * C19902 + (C9895 - C9896) * C19898 +
             (C9897 - C9898) * C19903 + (C9899 - C9900) * C19899 +
             (C21132 - C21133) * C19904 + (C21134 - C21135) * C48622) *
                C48376) *
               C339 +
           (((C10072 - C10071) * C19901 + (C10074 - C10073) * C19897 +
             (C10076 - C10075) * C19902 + (C10078 - C10077) * C19898 +
             (C17669 - C17668) * C19903 + (C17671 - C17670) * C19899 +
             (C17673 - C17672) * C19904 + (C17675 - C17674) * C48622) *
                C48573 +
            ((C9894 - C9893) * C19901 + (C9896 - C9895) * C19897 +
             (C9898 - C9897) * C19902 + (C9900 - C9899) * C19898 +
             (C21133 - C21132) * C19903 + (C21135 - C21134) * C19899 +
             (C48212 * C17570 - C8908 * C17569) * C19904 +
             (C48212 * C17572 - C8908 * C17571) * C48622) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 +
             C10338 * C48416) *
                C11041 +
            (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
             (C9386 - C9385) * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             (C9383 - C9384) * C4869 + (C9385 - C9386) * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9017 - C9016) * C4868 + (C9019 - C9018) * C48574 +
             (C9894 - C9893) * C4869 + (C9896 - C9895) * C48416) *
                C11039 +
            ((C9021 - C9020) * C4868 + (C9023 - C9022) * C48574 +
             (C9902 - C9901) * C4869 + (C9904 - C9903) * C48416) *
                C11040 +
            ((C9025 - C9024) * C4868 + (C9027 - C9026) * C48574 +
             (C14038 - C14037) * C4869 + (C14040 - C14039) * C48416) *
                C11041 +
            ((C9029 - C9028) * C4868 + (C9031 - C9030) * C48574 +
             (C48212 * C9117 - C8908 * C9114) * C4869 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4869 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C4868 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48574 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4869 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48416) *
                C48573 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C4868 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48574 +
             (C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C4869 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C19901 +
             (C48212 * C140 - C8908 * C131) * C19897 +
             (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
             C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
             C18141 * C48622) *
                C48573 +
            ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
             C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
             C10507 * C19899 + (C10513 - C10512) * C19904 +
             (C10515 - C10514) * C48622) *
                C48376) *
               C48300 * C447 +
           (((C9001 - C9000) * C19901 + (C9003 - C9002) * C19897 +
             C10508 * C19902 + C10509 * C19898 + C10510 * C19903 +
             C10511 * C19899 + (C10512 - C10513) * C19904 +
             (C10514 - C10515) * C48622) *
                C48573 +
            ((C9005 - C9004) * C19901 + (C9007 - C9006) * C19897 +
             C10516 * C19902 + C10517 * C19898 + C10518 * C19903 +
             C10519 * C19899 + (C10520 - C10521) * C19904 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C19901 +
             (C8908 * C132 - C48212 * C141) * C19897 +
             (C10071 - C10072) * C19902 + (C10073 - C10074) * C19898 +
             (C10075 - C10076) * C19903 + (C10077 - C10078) * C19899 +
             (C17668 - C17669) * C19904 + (C17670 - C17671) * C48622) *
                C48573 +
            ((C9016 - C9017) * C19901 + (C9018 - C9019) * C19897 +
             (C9893 - C9894) * C19902 + (C9895 - C9896) * C19898 +
             (C9897 - C9898) * C19903 + (C9899 - C9900) * C19899 +
             (C21132 - C21133) * C19904 + (C21134 - C21135) * C48622) *
                C48376) *
               C48300 * C447 +
           (((C9017 - C9016) * C19901 + (C9019 - C9018) * C19897 +
             (C9894 - C9893) * C19902 + (C9896 - C9895) * C19898 +
             (C9898 - C9897) * C19903 + (C9900 - C9899) * C19899 +
             (C21133 - C21132) * C19904 + (C21135 - C21134) * C48622) *
                C48573 +
            ((C9021 - C9020) * C19901 + (C9023 - C9022) * C19897 +
             (C9902 - C9901) * C19902 + (C9904 - C9903) * C19898 +
             (C9906 - C9905) * C19903 + (C9908 - C9907) * C19899 +
             (C48212 * C10058 - C8908 * C10055) * C19904 +
             (C48212 * C10061 - C8908 * C10059) * C48622) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C4868 +
                     (C48212 * C140 - C8908 * C131) * C48574 +
                     (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                        C11039 +
                    ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
                     C10504 * C4869 + C10505 * C48416) *
                        C11040 +
                    C14413 * C11041 + C14414 * C48616) *
                       C48300 * C513 +
                   (((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
                     C10508 * C4869 + C10509 * C48416) *
                        C11039 +
                    ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
                     C10516 * C4869 + C10517 * C48416) *
                        C11040 +
                    ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
                     (C9383 - C9384) * C4869 + (C9385 - C9386) * C48416) *
                        C11041 +
                    ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
                     (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                        C48616) *
                       C48300 * C514 +
                   (C14413 * C11039 + C14414 * C11040 +
                    (C9274 * C4868 + C9275 * C48574 + (C9388 - C9387) * C4869 +
                     (C9390 - C9389) * C48416) *
                        C11041 +
                    ((C9277 - C9276) * C4868 + (C9279 - C9278) * C48574 +
                     (C48212 * C9371 - C8908 * C9370) * C4869 +
                     (C48212 * C9373 - C8908 * C9372) * C48416) *
                        C48616) *
                       C48300 * C515) *
                  C48249) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C4868 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48574 +
                     (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
                     (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                        C48573 +
                    ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
                     (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
                     (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
                     (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                        C48376) *
                       C48300 * C513 +
                   (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
                     (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
                     (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4869 +
                     (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48416) *
                        C48573 +
                    ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
                     (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
                     (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
                     (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                        C48376) *
                       C48300 * C514 +
                   ((C1670 * C4868 + C1671 * C48574 +
                     (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C4869 +
                     (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48416) *
                        C48573 +
                    ((C1657 - C1656 + C1659 - C1658 + C1661 - C1660) * C4868 +
                     (C1663 - C1662 + C1665 - C1664 + C1667 - C1666) * C48574 +
                     (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 -
                      C1007 * C1821 + C48593 * C1825 - C1008 * C1822) *
                         C4869 +
                     (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 -
                      C1007 * C1827 + C48593 * C1831 - C1008 * C1828) *
                         C48416) *
                        C48376) *
                       C48300 * C515) *
                  C48249) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C19901 +
                     (C48212 * C140 - C8908 * C131) * C19897 +
                     (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
                     C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
                     C18141 * C48622) *
                        C48573 +
                    ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
                     C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
                     C10507 * C19899 + (C10513 - C10512) * C19904 +
                     (C10515 - C10514) * C48622) *
                        C48376) *
                       C48300 * C513 +
                   (((C9001 - C9000) * C19901 + (C9003 - C9002) * C19897 +
                     C10508 * C19902 + C10509 * C19898 + C10510 * C19903 +
                     C10511 * C19899 + (C10512 - C10513) * C19904 +
                     (C10514 - C10515) * C48622) *
                        C48573 +
                    ((C9005 - C9004) * C19901 + (C9007 - C9006) * C19897 +
                     C10516 * C19902 + C10517 * C19898 + C10518 * C19903 +
                     C10519 * C19899 + (C10520 - C10521) * C19904 +
                     (C10522 - C10523) * C48622) *
                        C48376) *
                       C48300 * C514 +
                   ((C9270 * C19901 + C9271 * C19897 + C10337 * C19902 +
                     C10338 * C19898 + C10339 * C19903 + C10340 * C19899 +
                     (C10521 - C10520) * C19904 + (C10523 - C10522) * C48622) *
                        C48573 +
                    (C9272 * C19901 + C9273 * C19897 + C14405 * C19902 +
                     C14406 * C19898 + (C10342 - C10341) * C19903 +
                     (C10344 - C10343) * C19899 +
                     (C48212 * C10500 - C8908 * C10499) * C19904 +
                     (C48212 * C10502 - C8908 * C10501) * C48622) *
                        C48376) *
                       C48300 * C515) *
                  C48249) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            C14413 * C11041 + C14414 * C48616) *
               C339 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            (C14545 * C4868 + C14546 * C48574 + (C10341 - C10342) * C4869 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             C14545 * C4869 + C14546 * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C339 +
           ((C10504 * C4868 + C10505 * C48574 + C10506 * C4869 +
             C10507 * C48416) *
                C11039 +
            (C10337 * C4868 + C10338 * C48574 + C10339 * C4869 +
             C10340 * C48416) *
                C11040 +
            (C14405 * C4868 + C14406 * C48574 + (C10342 - C10341) * C4869 +
             (C10344 - C10343) * C48416) *
                C11041 +
            ((C9388 - C9387) * C4868 + (C9390 - C9389) * C48574 +
             (C48212 * C9620 - C8908 * C9617) * C4869 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             C6991 * C4869 + C6992 * C48416) *
                C48376) *
               C339 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            (C6993 * C4868 + C6994 * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C447 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             C6993 * C4869 + C6994 * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C339 +
           ((C6991 * C4868 + C6992 * C48574 +
             (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C4869 +
             (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48416) *
                C48573 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C4868 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48574 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48593 * C2272 - C1008 * C2263) *
                 C4869 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48593 * C2281 - C1008 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C19901 +
             (C48212 * C140 - C8908 * C131) * C19897 +
             (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
             C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
             C18141 * C48622) *
                C48573 +
            ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
             C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
             C10507 * C19899 + C21624 * C19904 + C21625 * C48622) *
                C48376) *
               C339 +
           (((C10064 - C10063) * C19901 + (C10066 - C10065) * C19897 +
             (C10068 - C10067) * C19902 + (C10070 - C10069) * C19898 +
             (C10936 - C10937) * C19903 + (C10938 - C10939) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48622) *
                C48573 +
            (C10508 * C19901 + C10509 * C19897 + C10510 * C19902 +
             C10511 * C19898 + C21626 * C19903 + C21627 * C19899 +
             (C17906 - C17907) * C19904 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C19901 + (C9003 - C9002) * C19897 +
             C10508 * C19902 + C10509 * C19898 + C10510 * C19903 +
             C10511 * C19899 + C21626 * C19904 + C21627 * C48622) *
                C48573 +
            ((C9005 - C9004) * C19901 + (C9007 - C9006) * C19897 +
             C10516 * C19902 + C10517 * C19898 + C10518 * C19903 +
             C10519 * C19899 + (C10520 - C10521) * C19904 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C339 +
           ((C10504 * C19901 + C10505 * C19897 + C10506 * C19902 +
             C10507 * C19898 + C21624 * C19903 + C21625 * C19899 +
             (C17907 - C17906) * C19904 + (C17909 - C17908) * C48622) *
                C48573 +
            (C10337 * C19901 + C10338 * C19897 + C10339 * C19902 +
             C10340 * C19898 + (C10521 - C10520) * C19903 +
             (C10523 - C10522) * C19899 +
             (C48212 * C10929 - C8908 * C10926) * C19904 +
             (C48212 * C10932 - C8908 * C10930) * C48622) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            C14413 * C11041 + C14414 * C48616) *
               C721 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            (C14545 * C4868 + C14546 * C48574 + (C10341 - C10342) * C4869 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C721 +
           (((C10072 - C10071) * C4868 + (C10074 - C10073) * C48574 +
             (C10076 - C10075) * C4869 + (C10078 - C10077) * C48416) *
                C11039 +
            ((C9894 - C9893) * C4868 + (C9896 - C9895) * C48574 +
             (C9898 - C9897) * C4869 + (C9900 - C9899) * C48416) *
                C11040 +
            ((C9902 - C9901) * C4868 + (C9904 - C9903) * C48574 +
             (C9906 - C9905) * C4869 + (C9908 - C9907) * C48416) *
                C11041 +
            ((C14038 - C14037) * C4868 + (C14040 - C14039) * C48574 +
             (C48212 * C9881 - C8908 * C9880) * C4869 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             C6991 * C4869 + C6992 * C48416) *
                C48376) *
               C721 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            (C6993 * C4868 + C6994 * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C721 +
           (((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C4868 +
             (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48574 +
             (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C4869 +
             (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48416) *
                C48573 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4868 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48574 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48593 * C2545 - C1008 * C2544) *
                 C4869 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48593 * C2547 - C1008 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C19901 +
             (C48212 * C140 - C8908 * C131) * C19897 +
             (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
             C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
             C18141 * C48622) *
                C48573 +
            ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
             C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
             C10507 * C19899 + C21624 * C19904 + C21625 * C48622) *
                C48376) *
               C721 +
           (((C10064 - C10063) * C19901 + (C10066 - C10065) * C19897 +
             (C10068 - C10067) * C19902 + (C10070 - C10069) * C19898 +
             (C10936 - C10937) * C19903 + (C10938 - C10939) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48622) *
                C48573 +
            (C10508 * C19901 + C10509 * C19897 + C10510 * C19902 +
             C10511 * C19898 + C21626 * C19903 + C21627 * C19899 +
             (C17906 - C17907) * C19904 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C19901 +
             (C8908 * C132 - C48212 * C141) * C19897 +
             (C10071 - C10072) * C19902 + (C10073 - C10074) * C19898 +
             (C10075 - C10076) * C19903 + (C10077 - C10078) * C19899 +
             (C17668 - C17669) * C19904 + (C17670 - C17671) * C48622) *
                C48573 +
            ((C9016 - C9017) * C19901 + (C9018 - C9019) * C19897 +
             (C9893 - C9894) * C19902 + (C9895 - C9896) * C19898 +
             (C9897 - C9898) * C19903 + (C9899 - C9900) * C19899 +
             (C21132 - C21133) * C19904 + (C21134 - C21135) * C48622) *
                C48376) *
               C721 +
           (((C10072 - C10071) * C19901 + (C10074 - C10073) * C19897 +
             (C10076 - C10075) * C19902 + (C10078 - C10077) * C19898 +
             (C17669 - C17668) * C19903 + (C17671 - C17670) * C19899 +
             (C17673 - C17672) * C19904 + (C17675 - C17674) * C48622) *
                C48573 +
            ((C9894 - C9893) * C19901 + (C9896 - C9895) * C19897 +
             (C9898 - C9897) * C19902 + (C9900 - C9899) * C19898 +
             (C21133 - C21132) * C19903 + (C21135 - C21134) * C19899 +
             (C48212 * C17570 - C8908 * C17569) * C19904 +
             (C48212 * C17572 - C8908 * C17571) * C48622) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            C14413 * C11041 + C14414 * C48616) *
               C721 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            (C14545 * C4868 + C14546 * C48574 + (C10341 - C10342) * C4869 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             C14545 * C4869 + C14546 * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C721 +
           ((C10504 * C4868 + C10505 * C48574 + C10506 * C4869 +
             C10507 * C48416) *
                C11039 +
            (C10337 * C4868 + C10338 * C48574 + C10339 * C4869 +
             C10340 * C48416) *
                C11040 +
            (C14405 * C4868 + C14406 * C48574 + (C10342 - C10341) * C4869 +
             (C10344 - C10343) * C48416) *
                C11041 +
            ((C9388 - C9387) * C4868 + (C9390 - C9389) * C48574 +
             (C48212 * C9620 - C8908 * C9617) * C4869 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             C6991 * C4869 + C6992 * C48416) *
                C48376) *
               C721 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            (C6993 * C4868 + C6994 * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C229 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             C6993 * C4869 + C6994 * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C721 +
           ((C6991 * C4868 + C6992 * C48574 +
             (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C4869 +
             (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48416) *
                C48573 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C4868 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48574 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48593 * C2272 - C1008 * C2263) *
                 C4869 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48593 * C2281 - C1008 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C19901 +
             (C48212 * C140 - C8908 * C131) * C19897 +
             (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
             C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
             C18141 * C48622) *
                C48573 +
            ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
             C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
             C10507 * C19899 + C21624 * C19904 + C21625 * C48622) *
                C48376) *
               C721 +
           (((C10064 - C10063) * C19901 + (C10066 - C10065) * C19897 +
             (C10068 - C10067) * C19902 + (C10070 - C10069) * C19898 +
             (C10936 - C10937) * C19903 + (C10938 - C10939) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48622) *
                C48573 +
            (C10508 * C19901 + C10509 * C19897 + C10510 * C19902 +
             C10511 * C19898 + C21626 * C19903 + C21627 * C19899 +
             (C17906 - C17907) * C19904 + (C17908 - C17909) * C48622) *
                C48376) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C19901 + (C9003 - C9002) * C19897 +
             C10508 * C19902 + C10509 * C19898 + C10510 * C19903 +
             C10511 * C19899 + C21626 * C19904 + C21627 * C48622) *
                C48573 +
            ((C9005 - C9004) * C19901 + (C9007 - C9006) * C19897 +
             C10516 * C19902 + C10517 * C19898 + C10518 * C19903 +
             C10519 * C19899 + (C10520 - C10521) * C19904 +
             (C10522 - C10523) * C48622) *
                C48376) *
               C721 +
           ((C10504 * C19901 + C10505 * C19897 + C10506 * C19902 +
             C10507 * C19898 + C21624 * C19903 + C21625 * C19899 +
             (C17907 - C17906) * C19904 + (C17909 - C17908) * C48622) *
                C48573 +
            (C10337 * C19901 + C10338 * C19897 + C10339 * C19902 +
             C10340 * C19898 + (C10521 - C10520) * C19903 +
             (C10523 - C10522) * C19899 +
             (C48212 * C10929 - C8908 * C10926) * C19904 +
             (C48212 * C10932 - C8908 * C10930) * C48622) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C4868 +
                     (C48212 * C140 - C8908 * C131) * C48574 +
                     (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                        C11039 +
                    ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
                     C10504 * C4869 + C10505 * C48416) *
                        C11040 +
                    C14413 * C11041 + C14414 * C48616) *
                       C867 +
                   (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
                     (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                        C11039 +
                    (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
                     C10511 * C48416) *
                        C11040 +
                    (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
                     C10519 * C48416) *
                        C11041 +
                    (C14545 * C4868 + C14546 * C48574 +
                     (C10341 - C10342) * C4869 + (C10343 - C10344) * C48416) *
                        C48616) *
                       C868 +
                   ((C10934 * C4868 + C10935 * C48574 +
                     (C10937 - C10936) * C4869 + (C10939 - C10938) * C48416) *
                        C11039 +
                    (C10506 * C4868 + C10507 * C48574 +
                     (C10513 - C10512) * C4869 + (C10515 - C10514) * C48416) *
                        C11040 +
                    (C10339 * C4868 + C10340 * C48574 +
                     (C10521 - C10520) * C4869 + (C10523 - C10522) * C48416) *
                        C11041 +
                    ((C10342 - C10341) * C4868 + (C10344 - C10343) * C48574 +
                     (C48212 * C10500 - C8908 * C10499) * C4869 +
                     (C48212 * C10502 - C8908 * C10501) * C48416) *
                        C48616) *
                       C869) *
                  C48283 * C48249) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C4868 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48574 +
                     (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
                     (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                        C48573 +
                    ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
                     (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
                     C6991 * C4869 + C6992 * C48416) *
                        C48376) *
                       C867 +
                   (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
                     (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
                     (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
                     (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                        C48573 +
                    (C6993 * C4868 + C6994 * C48574 +
                     (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
                     (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                        C48376) *
                       C868 +
                   ((C3619 * C4868 + C3620 * C48574 +
                     (C3606 - C3605 + C3608 - C3607 + C3610 - C3609) * C4869 +
                     (C3612 - C3611 + C3614 - C3613 + C3616 - C3615) * C48416) *
                        C48573 +
                    ((C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C4868 +
                     (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48574 +
                     (C1000 * C3163 - C1006 * C3160 + C1001 * C3164 -
                      C1007 * C3161 + C48593 * C3165 - C1008 * C3162) *
                         C4869 +
                     (C1000 * C3169 - C1006 * C3166 + C1001 * C3170 -
                      C1007 * C3167 + C48593 * C3171 - C1008 * C3168) *
                         C48416) *
                        C48376) *
                       C869) *
                  C48283 * C48249) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C19901 +
                     (C48212 * C140 - C8908 * C131) * C19897 +
                     (C10063 - C10064) * C19902 + (C10065 - C10066) * C19898 +
                     C10934 * C19903 + C10935 * C19899 + C18140 * C19904 +
                     C18141 * C48622) *
                        C48573 +
                    ((C9000 - C9001) * C19901 + (C9002 - C9003) * C19897 +
                     C10504 * C19902 + C10505 * C19898 + C10506 * C19903 +
                     C10507 * C19899 + C21624 * C19904 + C21625 * C48622) *
                        C48376) *
                       C867 +
                   (((C10064 - C10063) * C19901 + (C10066 - C10065) * C19897 +
                     (C10068 - C10067) * C19902 + (C10070 - C10069) * C19898 +
                     (C10936 - C10937) * C19903 + (C10938 - C10939) * C19899 +
                     (C17665 - C17664) * C19904 + (C17667 - C17666) * C48622) *
                        C48573 +
                    (C10508 * C19901 + C10509 * C19897 + C10510 * C19902 +
                     C10511 * C19898 + C21626 * C19903 + C21627 * C19899 +
                     (C17906 - C17907) * C19904 + (C17908 - C17909) * C48622) *
                        C48376) *
                       C868 +
                   ((C10934 * C19901 + C10935 * C19897 + C18140 * C19902 +
                     C18141 * C19898 + C18142 * C19903 + C18143 * C19899 +
                     (C18145 - C18144) * C19904 + (C18147 - C18146) * C48622) *
                        C48573 +
                    (C10506 * C19901 + C10507 * C19897 + C21624 * C19902 +
                     C21625 * C19898 + (C17907 - C17906) * C19903 +
                     (C17909 - C17908) * C19899 +
                     (C48212 * C17902 - C8908 * C17901) * C19904 +
                     (C48212 * C17904 - C8908 * C17903) * C48622) *
                        C48376) *
                       C869) *
                  C48283 * C48249) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C48329) *
                  C48318 * C48300 * C48283 * C110 +
              ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                C117 * C124 - C105 * C136) *
                   C118 +
               (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                C117 * C137 - C105 * C145) *
                   C48329) *
                  C48318 * C48300 * C48283 * C111 +
              ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                C105 * C138 - C117 * C125) *
                   C118 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                C105 * C146 - C117 * C139) *
                   C48329) *
                  C48318 * C48300 * C48283 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48593 * C128 - C1008 * C121) *
                    C118 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48593 * C142 - C1008 * C133) *
                    C48329) *
                   C48641 +
               ((C1000 * C239 - C1006 * C233 + C1001 * C240 - C1007 * C234 +
                 C48593 * C241 - C1008 * C235) *
                    C118 +
                (C1000 * C251 - C1006 * C244 + C1001 * C252 - C1007 * C245 +
                 C48593 * C253 - C1008 * C246) *
                    C48329) *
                   C48629 +
               ((C1000 * C522 - C1006 * C517 + C1001 * C523 - C1007 * C518 +
                 C48593 * C524 - C1008 * C519) *
                    C118 +
                (C1000 * C532 - C1006 * C527 + C1001 * C533 - C1007 * C528 +
                 C48593 * C534 - C1008 * C529) *
                    C48329) *
                   C48606) *
                  C48300 * C48283 * C110 +
              (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                 C1008 * C122 - C48593 * C129) *
                    C118 +
                (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                 C1008 * C134 - C48593 * C143) *
                    C48329) *
                   C48641 +
               ((C1006 * C234 - C1000 * C240 + C1007 * C235 - C1001 * C241 +
                 C1008 * C236 - C48593 * C242) *
                    C118 +
                (C1006 * C245 - C1000 * C252 + C1007 * C246 - C1001 * C253 +
                 C1008 * C247 - C48593 * C254) *
                    C48329) *
                   C48629 +
               ((C1006 * C518 - C1000 * C523 + C1007 * C519 - C1001 * C524 +
                 C1008 * C520 - C48593 * C525) *
                    C118 +
                (C1006 * C528 - C1000 * C533 + C1007 * C529 - C1001 * C534 +
                 C1008 * C530 - C48593 * C535) *
                    C48329) *
                   C48606) *
                  C48300 * C48283 * C111 +
              (((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
                 C48593 * C130 - C1008 * C123) *
                    C118 +
                (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
                 C48593 * C144 - C1008 * C135) *
                    C48329) *
                   C48641 +
               ((C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
                 C48593 * C243 - C1008 * C237) *
                    C118 +
                (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
                 C48593 * C255 - C1008 * C248) *
                    C48329) *
                   C48629 +
               ((C1000 * C524 - C1006 * C519 + C1001 * C525 - C1007 * C520 +
                 C48593 * C526 - C1008 * C521) *
                    C118 +
                (C1000 * C534 - C1006 * C529 + C1001 * C535 - C1007 * C530 +
                 C48593 * C536 - C1008 * C531) *
                    C48329) *
                   C48606) *
                  C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                                C1007 * C120 + C48593 * C128 - C1008 * C121) *
                                   C2395 +
                               (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                                C1007 * C132 + C48593 * C142 - C1008 * C133) *
                                   C48642 +
                               (C1000 * C347 - C1006 * C341 + C1001 * C348 -
                                C1007 * C342 + C48593 * C349 - C1008 * C343) *
                                   C2396 +
                               (C1000 * C359 - C1006 * C352 + C1001 * C360 -
                                C1007 * C353 + C48593 * C361 - C1008 * C354) *
                                   C48631 +
                               (C1000 * C875 - C1006 * C870 + C1001 * C876 -
                                C1007 * C871 + C48593 * C877 - C1008 * C872) *
                                   C2397 +
                               (C1000 * C885 - C1006 * C880 + C1001 * C886 -
                                C1007 * C881 + C48593 * C887 - C1008 * C882) *
                                   C48609) *
                                  C48318 * C48300 * C48283 * C110 +
                              ((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                                C1001 * C128 + C1008 * C122 - C48593 * C129) *
                                   C2395 +
                               (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                                C1001 * C142 + C1008 * C134 - C48593 * C143) *
                                   C48642 +
                               (C1006 * C342 - C1000 * C348 + C1007 * C343 -
                                C1001 * C349 + C1008 * C344 - C48593 * C350) *
                                   C2396 +
                               (C1006 * C353 - C1000 * C360 + C1007 * C354 -
                                C1001 * C361 + C1008 * C355 - C48593 * C362) *
                                   C48631 +
                               (C1006 * C871 - C1000 * C876 + C1007 * C872 -
                                C1001 * C877 + C1008 * C873 - C48593 * C878) *
                                   C2397 +
                               (C1006 * C881 - C1000 * C886 + C1007 * C882 -
                                C1001 * C887 + C1008 * C883 - C48593 * C888) *
                                   C48609) *
                                  C48318 * C48300 * C48283 * C111 +
                              ((C1000 * C128 - C1006 * C121 + C1001 * C129 -
                                C1007 * C122 + C48593 * C130 - C1008 * C123) *
                                   C2395 +
                               (C1000 * C142 - C1006 * C133 + C1001 * C143 -
                                C1007 * C134 + C48593 * C144 - C1008 * C135) *
                                   C48642 +
                               (C1000 * C349 - C1006 * C343 + C1001 * C350 -
                                C1007 * C344 + C48593 * C351 - C1008 * C345) *
                                   C2396 +
                               (C1000 * C361 - C1006 * C354 + C1001 * C362 -
                                C1007 * C355 + C48593 * C363 - C1008 * C356) *
                                   C48631 +
                               (C1000 * C877 - C1006 * C872 + C1001 * C878 -
                                C1007 * C873 + C48593 * C879 - C1008 * C874) *
                                   C2397 +
                               (C1000 * C887 - C1006 * C882 + C1001 * C888 -
                                C1007 * C883 + C48593 * C889 - C1008 * C884) *
                                   C48609) *
                                  C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C48638 * C239 - C7644 * C233 + C48625 * C240 - C7645 * C234 +
             C48593 * C241 - C7646 * C235) *
                C118 +
            (C48638 * C251 - C7644 * C244 + C48625 * C252 - C7645 * C245 +
             C48593 * C253 - C7646 * C246) *
                C48329) *
               C7642 +
           ((C48638 * C522 - C7644 * C517 + C48625 * C523 - C7645 * C518 +
             C48593 * C524 - C7646 * C519) *
                C118 +
            (C48638 * C532 - C7644 * C527 + C48625 * C533 - C7645 * C528 +
             C48593 * C534 - C7646 * C529) *
                C48329) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C118 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C48329) *
               C7641 +
           ((C7644 * C234 - C48638 * C240 + C7645 * C235 - C48625 * C241 +
             C7646 * C236 - C48593 * C242) *
                C118 +
            (C7644 * C245 - C48638 * C252 + C7645 * C246 - C48625 * C253 +
             C7646 * C247 - C48593 * C254) *
                C48329) *
               C7642 +
           ((C7644 * C518 - C48638 * C523 + C7645 * C519 - C48625 * C524 +
             C7646 * C520 - C48593 * C525) *
                C118 +
            (C7644 * C528 - C48638 * C533 + C7645 * C529 - C48625 * C534 +
             C7646 * C530 - C48593 * C535) *
                C48329) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C48638 * C128 - C7644 * C121 + C48625 * C129 - C7645 * C122 +
             C48593 * C130 - C7646 * C123) *
                C118 +
            (C48638 * C142 - C7644 * C133 + C48625 * C143 - C7645 * C134 +
             C48593 * C144 - C7646 * C135) *
                C48329) *
               C7641 +
           ((C48638 * C241 - C7644 * C235 + C48625 * C242 - C7645 * C236 +
             C48593 * C243 - C7646 * C237) *
                C118 +
            (C48638 * C253 - C7644 * C246 + C48625 * C254 - C7645 * C247 +
             C48593 * C255 - C7646 * C248) *
                C48329) *
               C7642 +
           ((C48638 * C524 - C7644 * C519 + C48625 * C525 - C7645 * C520 +
             C48593 * C526 - C7646 * C521) *
                C118 +
            (C48638 * C534 - C7644 * C529 + C48625 * C535 - C7645 * C530 +
             C48593 * C536 - C7646 * C531) *
                C48329) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C48212 * C239 - C8908 * C233) * C118 +
            (C48212 * C251 - C8908 * C244) * C48329) *
               C8904 +
           ((C48212 * C522 - C8908 * C517) * C118 +
            (C48212 * C532 - C8908 * C527) * C48329) *
               C8905 +
           ((C48212 * C1159 - C8908 * C1155) * C118 +
            (C48212 * C1167 - C8908 * C1162) * C48329) *
               C8906 +
           ((C48212 * C1640 - C8908 * C1637) * C118 +
            (C48212 * C1646 - C8908 * C1643) * C48329) *
               C8907) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C118 +
            (C8908 * C132 - C48212 * C141) * C48329) *
               C8903 +
           ((C8908 * C234 - C48212 * C240) * C118 +
            (C8908 * C245 - C48212 * C252) * C48329) *
               C8904 +
           ((C8908 * C518 - C48212 * C523) * C118 +
            (C8908 * C528 - C48212 * C533) * C48329) *
               C8905 +
           ((C8908 * C1156 - C48212 * C1160) * C118 +
            (C8908 * C1163 - C48212 * C1168) * C48329) *
               C8906 +
           ((C8908 * C1638 - C48212 * C1641) * C118 +
            (C8908 * C1644 - C48212 * C1647) * C48329) *
               C8907) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C118 +
            (C48212 * C142 - C8908 * C133) * C48329) *
               C8903 +
           ((C48212 * C241 - C8908 * C235) * C118 +
            (C48212 * C253 - C8908 * C246) * C48329) *
               C8904 +
           ((C48212 * C524 - C8908 * C519) * C118 +
            (C48212 * C534 - C8908 * C529) * C48329) *
               C8905 +
           ((C48212 * C1161 - C8908 * C1157) * C118 +
            (C48212 * C1169 - C8908 * C1164) * C48329) *
               C8906 +
           ((C48212 * C1642 - C8908 * C1639) * C118 +
            (C48212 * C1648 - C8908 * C1645) * C48329) *
               C8907) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C2395 +
            (C48212 * C140 - C8908 * C131) * C48642 +
            (C48212 * C347 - C8908 * C341) * C2396 +
            (C48212 * C359 - C8908 * C352) * C48631 +
            (C48212 * C875 - C8908 * C870) * C2397 +
            (C48212 * C885 - C8908 * C880) * C48609) *
               C7641 +
           ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
            (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
            (C48212 * C2264 - C8908 * C2258) * C2397 +
            (C48212 * C2276 - C8908 * C2267) * C48609) *
               C7642 +
           (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
            (C9382 - C9381) * C48631 +
            (C48212 * C2270 - C8908 * C2261) * C2397 +
            (C48212 * C2279 - C8908 * C2273) * C48609) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C2395 +
            (C8908 * C132 - C48212 * C141) * C48642 +
            (C8908 * C342 - C48212 * C348) * C2396 +
            (C8908 * C353 - C48212 * C360) * C48631 +
            (C8908 * C871 - C48212 * C876) * C2397 +
            (C8908 * C881 - C48212 * C886) * C48609) *
               C7641 +
           ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
            (C8908 * C620 - C48212 * C625) * C2396 +
            (C8908 * C630 - C48212 * C635) * C48631 +
            (C8908 * C2259 - C48212 * C2265) * C2397 +
            (C8908 * C2268 - C48212 * C2277) * C48609) *
               C7642 +
           ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
            (C8908 * C1366 - C48212 * C1370) * C2396 +
            (C8908 * C1373 - C48212 * C1378) * C48631 +
            (C8908 * C2262 - C48212 * C2271) * C2397 +
            (C8908 * C2274 - C48212 * C2280) * C48609) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C2395 +
            (C48212 * C142 - C8908 * C133) * C48642 +
            (C48212 * C349 - C8908 * C343) * C2396 +
            (C48212 * C361 - C8908 * C354) * C48631 +
            (C48212 * C877 - C8908 * C872) * C2397 +
            (C48212 * C887 - C8908 * C882) * C48609) *
               C7641 +
           ((C48212 * C241 - C8908 * C235) * C2395 +
            (C48212 * C253 - C8908 * C246) * C48642 +
            (C48212 * C626 - C8908 * C621) * C2396 +
            (C48212 * C636 - C8908 * C631) * C48631 +
            (C48212 * C2266 - C8908 * C2260) * C2397 +
            (C48212 * C2278 - C8908 * C2269) * C48609) *
               C7642 +
           ((C48212 * C524 - C8908 * C519) * C2395 +
            (C48212 * C534 - C8908 * C529) * C48642 +
            (C48212 * C1371 - C8908 * C1367) * C2396 +
            (C48212 * C1379 - C8908 * C1374) * C48631 +
            (C48212 * C2272 - C8908 * C2263) * C2397 +
            (C48212 * C2281 - C8908 * C2275) * C48609) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C48638 * C126 - C7644 * C119 + C48625 * C127 -
                                C7645 * C120 + C48593 * C128 - C7646 * C121) *
                                   C15017 +
                               (C48638 * C140 - C7644 * C131 + C48625 * C141 -
                                C7645 * C132 + C48593 * C142 - C7646 * C133) *
                                   C15014 +
                               (C48638 * C347 - C7644 * C341 + C48625 * C348 -
                                C7645 * C342 + C48593 * C349 - C7646 * C343) *
                                   C15018 +
                               (C48638 * C359 - C7644 * C352 + C48625 * C360 -
                                C7645 * C353 + C48593 * C361 - C7646 * C354) *
                                   C15015 +
                               (C48638 * C875 - C7644 * C870 + C48625 * C876 -
                                C7645 * C871 + C48593 * C877 - C7646 * C872) *
                                   C15019 +
                               (C48638 * C885 - C7644 * C880 + C48625 * C886 -
                                C7645 * C881 + C48593 * C887 - C7646 * C882) *
                                   C48609) *
                                  C48318 * C48300 * C48283 * C110 +
                              ((C7644 * C120 - C48638 * C127 + C7645 * C121 -
                                C48625 * C128 + C7646 * C122 - C48593 * C129) *
                                   C15017 +
                               (C7644 * C132 - C48638 * C141 + C7645 * C133 -
                                C48625 * C142 + C7646 * C134 - C48593 * C143) *
                                   C15014 +
                               (C7644 * C342 - C48638 * C348 + C7645 * C343 -
                                C48625 * C349 + C7646 * C344 - C48593 * C350) *
                                   C15018 +
                               (C7644 * C353 - C48638 * C360 + C7645 * C354 -
                                C48625 * C361 + C7646 * C355 - C48593 * C362) *
                                   C15015 +
                               (C7644 * C871 - C48638 * C876 + C7645 * C872 -
                                C48625 * C877 + C7646 * C873 - C48593 * C878) *
                                   C15019 +
                               (C7644 * C881 - C48638 * C886 + C7645 * C882 -
                                C48625 * C887 + C7646 * C883 - C48593 * C888) *
                                   C48609) *
                                  C48318 * C48300 * C48283 * C111 +
                              ((C48638 * C128 - C7644 * C121 + C48625 * C129 -
                                C7645 * C122 + C48593 * C130 - C7646 * C123) *
                                   C15017 +
                               (C48638 * C142 - C7644 * C133 + C48625 * C143 -
                                C7645 * C134 + C48593 * C144 - C7646 * C135) *
                                   C15014 +
                               (C48638 * C349 - C7644 * C343 + C48625 * C350 -
                                C7645 * C344 + C48593 * C351 - C7646 * C345) *
                                   C15018 +
                               (C48638 * C361 - C7644 * C354 + C48625 * C362 -
                                C7645 * C355 + C48593 * C363 - C7646 * C356) *
                                   C15015 +
                               (C48638 * C877 - C7644 * C872 + C48625 * C878 -
                                C7645 * C873 + C48593 * C879 - C7646 * C874) *
                                   C15019 +
                               (C48638 * C887 - C7644 * C882 + C48625 * C888 -
                                C7645 * C883 + C48593 * C889 - C7646 * C884) *
                                   C48609) *
                                  C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C15017 +
            (C48212 * C140 - C8908 * C131) * C15014 +
            (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
            C10934 * C15019 + C10935 * C48609) *
               C48641 +
           ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
            C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
            C10507 * C48609) *
               C48629 +
           (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
            C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C15017 +
            (C8908 * C132 - C48212 * C141) * C15014 +
            (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
            (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
               C48641 +
           ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
            (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
            (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
               C48629 +
           ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
            (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
            (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C15017 +
            (C48212 * C142 - C8908 * C133) * C15014 +
            (C48212 * C349 - C8908 * C343) * C15018 +
            (C48212 * C361 - C8908 * C354) * C15015 +
            (C48212 * C877 - C8908 * C872) * C15019 +
            (C48212 * C887 - C8908 * C882) * C48609) *
               C48641 +
           ((C48212 * C241 - C8908 * C235) * C15017 +
            (C48212 * C253 - C8908 * C246) * C15014 +
            (C48212 * C626 - C8908 * C621) * C15018 +
            (C48212 * C636 - C8908 * C631) * C15015 +
            (C48212 * C2266 - C8908 * C2260) * C15019 +
            (C48212 * C2278 - C8908 * C2269) * C48609) *
               C48629 +
           ((C48212 * C524 - C8908 * C519) * C15017 +
            (C48212 * C534 - C8908 * C529) * C15014 +
            (C48212 * C1371 - C8908 * C1367) * C15018 +
            (C48212 * C1379 - C8908 * C1374) * C15015 +
            (C48212 * C2272 - C8908 * C2263) * C15019 +
            (C48212 * C2281 - C8908 * C2275) * C48609) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48212 * C126 - C8908 * C119) * C17482 +
           (C48212 * C140 - C8908 * C131) * C17477 +
           (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
           C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
           (C10939 - C10938) * C17480 +
           (C48212 * C3589 - C8908 * C3586) * C17486 +
           (C48212 * C3595 - C8908 * C3592) * C17481) *
              C48318 * C48300 * C48283 * C110 +
          ((C8908 * C120 - C48212 * C127) * C17482 +
           (C8908 * C132 - C48212 * C141) * C17477 +
           (C10071 - C10072) * C17483 + (C10073 - C10074) * C17478 +
           (C10075 - C10076) * C17484 + (C10077 - C10078) * C17479 +
           (C8908 * C2695 - C48212 * C2699) * C17485 +
           (C8908 * C2702 - C48212 * C2707) * C17480 +
           (C8908 * C3587 - C48212 * C3590) * C17486 +
           (C8908 * C3593 - C48212 * C3596) * C17481) *
              C48318 * C48300 * C48283 * C111 +
          ((C48212 * C128 - C8908 * C121) * C17482 +
           (C48212 * C142 - C8908 * C133) * C17477 +
           (C48212 * C349 - C8908 * C343) * C17483 +
           (C48212 * C361 - C8908 * C354) * C17478 +
           (C48212 * C877 - C8908 * C872) * C17484 +
           (C48212 * C887 - C8908 * C882) * C17479 +
           (C48212 * C2700 - C8908 * C2696) * C17485 +
           (C48212 * C2708 - C8908 * C2703) * C17480 +
           (C48212 * C3591 - C8908 * C3588) * C17486 +
           (C48212 * C3597 - C8908 * C3594) * C17481) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48329) *
                   C48318 * C48300 * C229 +
               ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48329) *
                   C48318 * C48300 * C48601) *
                  C231 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48329) *
                   C48318 * C48300 * C229 +
               ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
                 C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
                 C105 * C249 - C117 * C238) *
                    C118 +
                (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
                 C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
                 C105 * C256 - C117 * C250) *
                    C48329) *
                   C48318 * C48300 * C48601) *
                  C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                  C48593 * C128 - C1008 * C121) *
                     C118 +
                 (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                  C48593 * C142 - C1008 * C133) *
                     C48329) *
                    C48641 +
                ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                 (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                    C48629 +
                ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
                 (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                    C48606) *
                   C48300 * C229 +
               (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
                 (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                    C48641 +
                ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
                 (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                    C48629 +
                ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 -
                  C1001 * C1160 + C1008 * C1157 - C48593 * C1161) *
                     C118 +
                 (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 -
                  C1001 * C1168 + C1008 * C1164 - C48593 * C1169) *
                     C48329) *
                    C48606) *
                   C48300 * C48601) *
                  C231 +
              ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                  C1008 * C122 - C48593 * C129) *
                     C118 +
                 (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                  C1008 * C134 - C48593 * C143) *
                     C48329) *
                    C48641 +
                ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
                 (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                    C48629 +
                ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
                 (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                    C48606) *
                   C48300 * C229 +
               (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
                 (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                    C48641 +
                ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
                 (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                    C48629 +
                ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 -
                  C1007 * C1157 + C48593 * C1165 - C1008 * C1158) *
                     C118 +
                 (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 -
                  C1007 * C1164 + C48593 * C1170 - C1008 * C1166) *
                     C48329) *
                    C48606) *
                   C48300 * C48601) *
                  C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C1000 * C347 - C1006 * C341 + C1001 * C348 - C1007 * C342 +
             C48593 * C349 - C1008 * C343) *
                C2396 +
            (C1000 * C359 - C1006 * C352 + C1001 * C360 - C1007 * C353 +
             C48593 * C361 - C1008 * C354) *
                C48631 +
            (C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
             C48593 * C877 - C1008 * C872) *
                C2397 +
            (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
             C48593 * C887 - C1008 * C882) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
             C1008 * C2260 - C48593 * C2266) *
                C2397 +
            (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
             C1008 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C1006 * C342 - C1000 * C348 + C1007 * C343 - C1001 * C349 +
             C1008 * C344 - C48593 * C350) *
                C2396 +
            (C1006 * C353 - C1000 * C360 + C1007 * C354 - C1001 * C361 +
             C1008 * C355 - C48593 * C362) *
                C48631 +
            (C1006 * C871 - C1000 * C876 + C1007 * C872 - C1001 * C877 +
             C1008 * C873 - C48593 * C878) *
                C2397 +
            (C1006 * C881 - C1000 * C886 + C1007 * C882 - C1001 * C887 +
             C1008 * C883 - C48593 * C888) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C2395 +
            (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48642 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48593 * C627 - C1008 * C622) *
                C2396 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48593 * C637 - C1008 * C632) *
                C48631 +
            (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
             C48593 * C2545 - C1008 * C2544) *
                C2397 +
            (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
             C48593 * C2547 - C1008 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C229 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C229 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C48212 * C347 - C8908 * C341) * C2396 +
             (C48212 * C359 - C8908 * C352) * C48631 +
             (C48212 * C875 - C8908 * C870) * C2397 +
             (C48212 * C885 - C8908 * C880) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
             (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
                C7642 +
            (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
             (C9382 - C9381) * C48631 + (C9889 - C9890) * C2397 +
             (C9891 - C9892) * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             (C9375 - C9376) * C2396 + (C9377 - C9378) * C48631 +
             (C9886 - C9885) * C2397 + (C9888 - C9887) * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             (C9379 - C9380) * C2396 + (C9381 - C9382) * C48631 +
             (C9890 - C9889) * C2397 + (C9892 - C9891) * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C8908 * C9616 - C48212 * C9618) * C2397 +
             (C8908 * C9619 - C48212 * C9622) * C48609) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C8908 * C342 - C48212 * C348) * C2396 +
             (C8908 * C353 - C48212 * C360) * C48631 +
             (C8908 * C871 - C48212 * C876) * C2397 +
             (C8908 * C881 - C48212 * C886) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9017 - C9016) * C2395 + (C9019 - C9018) * C48642 +
             (C9894 - C9893) * C2396 + (C9896 - C9895) * C48631 +
             (C9898 - C9897) * C2397 + (C9900 - C9899) * C48609) *
                C7641 +
            ((C9021 - C9020) * C2395 + (C9023 - C9022) * C48642 +
             (C9902 - C9901) * C2396 + (C9904 - C9903) * C48631 +
             (C9906 - C9905) * C2397 + (C9908 - C9907) * C48609) *
                C7642 +
            ((C9025 - C9024) * C2395 + (C9027 - C9026) * C48642 +
             (C48212 * C1824 - C8908 * C1821) * C2396 +
             (C48212 * C1830 - C8908 * C1827) * C48631 +
             (C48212 * C9881 - C8908 * C9880) * C2397 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C48638 * C347 - C7644 * C341 + C48625 * C348 - C7645 * C342 +
             C48593 * C349 - C7646 * C343) *
                C15018 +
            (C48638 * C359 - C7644 * C352 + C48625 * C360 - C7645 * C353 +
             C48593 * C361 - C7646 * C354) *
                C15015 +
            (C48638 * C875 - C7644 * C870 + C48625 * C876 - C7645 * C871 +
             C48593 * C877 - C7646 * C872) *
                C15019 +
            (C48638 * C885 - C7644 * C880 + C48625 * C886 - C7645 * C881 +
             C48593 * C887 - C7646 * C882) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C7644 * C2258 - C48638 * C2264 + C7645 * C2259 - C48625 * C2265 +
             C7646 * C2260 - C48593 * C2266) *
                C15019 +
            (C7644 * C2267 - C48638 * C2276 + C7645 * C2268 - C48625 * C2277 +
             C7646 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C7644 * C342 - C48638 * C348 + C7645 * C343 - C48625 * C349 +
             C7646 * C344 - C48593 * C350) *
                C15018 +
            (C7644 * C353 - C48638 * C360 + C7645 * C354 - C48625 * C361 +
             C7646 * C355 - C48593 * C362) *
                C15015 +
            (C7644 * C871 - C48638 * C876 + C7645 * C872 - C48625 * C877 +
             C7646 * C873 - C48593 * C878) *
                C15019 +
            (C7644 * C881 - C48638 * C886 + C7645 * C882 - C48625 * C887 +
             C7646 * C883 - C48593 * C888) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C15017 +
            (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C15014 +
            (C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
             C48593 * C627 - C7646 * C622) *
                C15018 +
            (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
             C48593 * C637 - C7646 * C632) *
                C15015 +
            (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
             C48593 * C2545 - C7646 * C2544) *
                C15019 +
            (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
             C48593 * C2547 - C7646 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
             C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9017 - C9016) * C15017 + (C9019 - C9018) * C15014 +
             (C9894 - C9893) * C15018 + (C9896 - C9895) * C15015 +
             (C9898 - C9897) * C15019 + (C9900 - C9899) * C48609) *
                C48641 +
            ((C9021 - C9020) * C15017 + (C9023 - C9022) * C15014 +
             (C9902 - C9901) * C15018 + (C9904 - C9903) * C15015 +
             (C9906 - C9905) * C15019 + (C9908 - C9907) * C48609) *
                C48629 +
            ((C9025 - C9024) * C15017 + (C9027 - C9026) * C15014 +
             (C14038 - C14037) * C15018 + (C14040 - C14039) * C15015 +
             (C48212 * C9881 - C8908 * C9880) * C15019 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C17482 +
            (C48212 * C140 - C8908 * C131) * C17477 +
            (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
            C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
            (C10939 - C10938) * C17480 +
            (C48212 * C3589 - C8908 * C3586) * C17486 +
            (C48212 * C3595 - C8908 * C3592) * C17481) *
               C48318 * C48300 * C229 +
           ((C9001 - C9000) * C17482 + (C9003 - C9002) * C17477 +
            C10508 * C17483 + C10509 * C17478 + C10510 * C17484 +
            C10511 * C17479 + (C10512 - C10513) * C17485 +
            (C10514 - C10515) * C17480 +
            (C8908 * C10925 - C48212 * C10927) * C17486 +
            (C8908 * C10928 - C48212 * C10931) * C17481) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C8908 * C120 - C48212 * C127) * C17482 +
            (C8908 * C132 - C48212 * C141) * C17477 +
            (C10071 - C10072) * C17483 + (C10073 - C10074) * C17478 +
            (C10075 - C10076) * C17484 + (C10077 - C10078) * C17479 +
            (C8908 * C2695 - C48212 * C2699) * C17485 +
            (C8908 * C2702 - C48212 * C2707) * C17480 +
            (C8908 * C3587 - C48212 * C3590) * C17486 +
            (C8908 * C3593 - C48212 * C3596) * C17481) *
               C48318 * C48300 * C229 +
           ((C9017 - C9016) * C17482 + (C9019 - C9018) * C17477 +
            (C9894 - C9893) * C17483 + (C9896 - C9895) * C17478 +
            (C9898 - C9897) * C17484 + (C9900 - C9899) * C17479 +
            (C48212 * C3164 - C8908 * C3161) * C17485 +
            (C48212 * C3170 - C8908 * C3167) * C17480 +
            (C48212 * C17570 - C8908 * C17569) * C17486 +
            (C48212 * C17572 - C8908 * C17571) * C17481) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48329) *
                   C48318 * C339 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48329) *
                   C48318 * C48603) *
                  C48283 * C231 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48329) *
                   C48318 * C339 +
               ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
                 C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
                 C105 * C357 - C117 * C346) *
                    C118 +
                (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
                 C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
                 C105 * C364 - C117 * C358) *
                    C48329) *
                   C48318 * C48603) *
                  C48283 * C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                  C48593 * C128 - C1008 * C121) *
                     C118 +
                 (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                  C48593 * C142 - C1008 * C133) *
                     C48329) *
                    C48641 +
                ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                 (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                    C48629 +
                ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
                 (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                    C48606) *
                   C339 +
               (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                  C1008 * C343 - C48593 * C349) *
                     C118 +
                 (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                  C1008 * C354 - C48593 * C361) *
                     C48329) *
                    C48641 +
                ((C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
                  C1008 * C621 - C48593 * C626) *
                     C118 +
                 (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
                  C1008 * C631 - C48593 * C636) *
                     C48329) *
                    C48629 +
                ((C1006 * C1365 - C1000 * C1369 + C1007 * C1366 -
                  C1001 * C1370 + C1008 * C1367 - C48593 * C1371) *
                     C118 +
                 (C1006 * C1372 - C1000 * C1377 + C1007 * C1373 -
                  C1001 * C1378 + C1008 * C1374 - C48593 * C1379) *
                     C48329) *
                    C48606) *
                   C48603) *
                  C48283 * C231 +
              ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                  C1008 * C122 - C48593 * C129) *
                     C118 +
                 (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                  C1008 * C134 - C48593 * C143) *
                     C48329) *
                    C48641 +
                ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
                 (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                    C48629 +
                ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
                 (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                    C48606) *
                   C339 +
               (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
                  C48593 * C350 - C1008 * C344) *
                     C118 +
                 (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
                  C48593 * C362 - C1008 * C355) *
                     C48329) *
                    C48641 +
                ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
                  C48593 * C627 - C1008 * C622) *
                     C118 +
                 (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
                  C48593 * C637 - C1008 * C632) *
                     C48329) *
                    C48629 +
                ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 -
                  C1007 * C1367 + C48593 * C1375 - C1008 * C1368) *
                     C118 +
                 (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 -
                  C1007 * C1374 + C48593 * C1380 - C1008 * C1376) *
                     C48329) *
                    C48606) *
                   C48603) *
                  C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C339 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C2396 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48631 +
            (C2747 - C2748 + C2749 - C2750 + C2751 - C2752) * C2397 +
            (C2753 - C2754 + C2755 - C2756 + C2757 - C2758) * C48609) *
               C48318 * C339 +
           ((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C2395 +
            (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48642 +
            (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C2396 +
            (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48631 +
            (C1000 * C2699 - C1006 * C2695 + C1001 * C2700 - C1007 * C2696 +
             C48593 * C2704 - C1008 * C2697) *
                C2397 +
            (C1000 * C2707 - C1006 * C2702 + C1001 * C2708 - C1007 * C2703 +
             C48593 * C2709 - C1008 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C7644 * C619 - C48638 * C624 + C7645 * C620 - C48625 * C625 +
              C7646 * C621 - C48593 * C626) *
                 C118 +
             (C7644 * C629 - C48638 * C634 + C7645 * C630 - C48625 * C635 +
              C7646 * C631 - C48593 * C636) *
                 C48329) *
                C7642 +
            ((C7644 * C1365 - C48638 * C1369 + C7645 * C1366 - C48625 * C1370 +
              C7646 * C1367 - C48593 * C1371) *
                 C118 +
             (C7644 * C1372 - C48638 * C1377 + C7645 * C1373 - C48625 * C1378 +
              C7646 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C339 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C8908 * C619 - C48212 * C624) * C118 +
             (C8908 * C629 - C48212 * C634) * C48329) *
                C8904 +
            ((C8908 * C1365 - C48212 * C1369) * C118 +
             (C8908 * C1372 - C48212 * C1377) * C48329) *
                C8905 +
            ((C8908 * C1820 - C48212 * C1823) * C118 +
             (C8908 * C1826 - C48212 * C1829) * C48329) *
                C8906 +
            ((C8908 * C9113 - C48212 * C9115) * C118 +
             (C8908 * C9116 - C48212 * C9119) * C48329) *
                C8907) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C339 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
             (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
                C7642 +
            (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
             (C9382 - C9381) * C48631 + (C9889 - C9890) * C2397 +
             (C9891 - C9892) * C48609) *
                C48606) *
               C339 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            ((C9375 - C9376) * C2395 + (C9377 - C9378) * C48642 +
             (C9886 - C9885) * C2396 + (C9888 - C9887) * C48631 +
             (C8908 * C3160 - C48212 * C3163) * C2397 +
             (C8908 * C3166 - C48212 * C3169) * C48609) *
                C7642 +
            ((C9379 - C9380) * C2395 + (C9381 - C9382) * C48642 +
             (C9890 - C9889) * C2396 + (C9892 - C9891) * C48631 +
             (C8908 * C10054 - C48212 * C10056) * C2397 +
             (C8908 * C10057 - C48212 * C10060) * C48609) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C10071 - C10072) * C2396 + (C10073 - C10074) * C48631 +
             (C10075 - C10076) * C2397 + (C10077 - C10078) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C339 +
           (((C10072 - C10071) * C2395 + (C10074 - C10073) * C48642 +
             (C10076 - C10075) * C2396 + (C10078 - C10077) * C48631 +
             (C48212 * C2699 - C8908 * C2695) * C2397 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C7641 +
            ((C9894 - C9893) * C2395 + (C9896 - C9895) * C48642 +
             (C9898 - C9897) * C2396 + (C9900 - C9899) * C48631 +
             (C48212 * C3164 - C8908 * C3161) * C2397 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C7642 +
            ((C9902 - C9901) * C2395 + (C9904 - C9903) * C48642 +
             (C9906 - C9905) * C2396 + (C9908 - C9907) * C48631 +
             (C48212 * C10058 - C8908 * C10055) * C2397 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C339 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C15018 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C15015 +
            (C15349 - C15350 + C15351 - C15352 + C15353 - C15354) * C15019 +
            (C15355 - C15356 + C15357 - C15358 + C15359 - C15360) * C48609) *
               C48318 * C339 +
           ((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C15017 +
            (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C15014 +
            (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C15018 +
            (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C15015 +
            (C48638 * C2699 - C7644 * C2695 + C48625 * C2700 - C7645 * C2696 +
             C48593 * C2704 - C7646 * C2697) *
                C15019 +
            (C48638 * C2707 - C7644 * C2702 + C48625 * C2708 - C7645 * C2703 +
             C48593 * C2709 - C7646 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
             C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                C48606) *
               C339 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C339 +
           (((C10072 - C10071) * C15017 + (C10074 - C10073) * C15014 +
             (C10076 - C10075) * C15018 + (C10078 - C10077) * C15015 +
             (C48212 * C2699 - C8908 * C2695) * C15019 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C48641 +
            ((C9894 - C9893) * C15017 + (C9896 - C9895) * C15014 +
             (C9898 - C9897) * C15018 + (C9900 - C9899) * C15015 +
             (C48212 * C3164 - C8908 * C3161) * C15019 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C48629 +
            ((C9902 - C9901) * C15017 + (C9904 - C9903) * C15014 +
             (C9906 - C9905) * C15018 + (C9908 - C9907) * C15015 +
             (C48212 * C10058 - C8908 * C10055) * C15019 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C17482 +
            (C48212 * C140 - C8908 * C131) * C17477 +
            (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
            C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
            (C10939 - C10938) * C17480 + (C17664 - C17665) * C17486 +
            (C17666 - C17667) * C17481) *
               C48318 * C339 +
           ((C10064 - C10063) * C17482 + (C10066 - C10065) * C17477 +
            (C10068 - C10067) * C17483 + (C10070 - C10069) * C17478 +
            (C10936 - C10937) * C17484 + (C10938 - C10939) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C8908 * C17655 - C48212 * C17657) * C17486 +
            (C8908 * C17658 - C48212 * C17661) * C17481) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C8908 * C120 - C48212 * C127) * C17482 +
            (C8908 * C132 - C48212 * C141) * C17477 +
            (C10071 - C10072) * C17483 + (C10073 - C10074) * C17478 +
            (C10075 - C10076) * C17484 + (C10077 - C10078) * C17479 +
            (C17668 - C17669) * C17485 + (C17670 - C17671) * C17480 +
            (C17672 - C17673) * C17486 + (C17674 - C17675) * C17481) *
               C48318 * C339 +
           ((C10072 - C10071) * C17482 + (C10074 - C10073) * C17477 +
            (C10076 - C10075) * C17483 + (C10078 - C10077) * C17478 +
            (C17669 - C17668) * C17484 + (C17671 - C17670) * C17479 +
            (C17673 - C17672) * C17485 + (C17675 - C17674) * C17480 +
            (C48212 * C17659 - C8908 * C17656) * C17486 +
            (C48212 * C17662 - C8908 * C17660) * C17481) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48329) *
                   C48318 * C48300 * C447 +
               ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48329) *
                   C48318 * C48300 * C48601) *
                  C449 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48329) *
                   C48318 * C48300 * C447 +
               ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
                 C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
                 C105 * C249 - C117 * C238) *
                    C118 +
                (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
                 C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
                 C105 * C256 - C117 * C250) *
                    C48329) *
                   C48318 * C48300 * C48601) *
                  C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                  C48593 * C128 - C1008 * C121) *
                     C118 +
                 (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                  C48593 * C142 - C1008 * C133) *
                     C48329) *
                    C48641 +
                ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                 (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                    C48629 +
                ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
                 (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                    C48606) *
                   C48300 * C447 +
               (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
                 (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                    C48641 +
                ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
                 (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                    C48629 +
                ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 -
                  C1001 * C1160 + C1008 * C1157 - C48593 * C1161) *
                     C118 +
                 (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 -
                  C1001 * C1168 + C1008 * C1164 - C48593 * C1169) *
                     C48329) *
                    C48606) *
                   C48300 * C48601) *
                  C449 +
              ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                  C1008 * C122 - C48593 * C129) *
                     C118 +
                 (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                  C1008 * C134 - C48593 * C143) *
                     C48329) *
                    C48641 +
                ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
                 (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                    C48629 +
                ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
                 (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                    C48606) *
                   C48300 * C447 +
               (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
                 (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                    C48641 +
                ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
                 (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                    C48629 +
                ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 -
                  C1007 * C1157 + C48593 * C1165 - C1008 * C1158) *
                     C118 +
                 (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 -
                  C1007 * C1164 + C48593 * C1170 - C1008 * C1166) *
                     C48329) *
                    C48606) *
                   C48300 * C48601) *
                  C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C48300 * C447 +
           ((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
             C1008 * C2260 - C48593 * C2266) *
                C2397 +
            (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
             C1008 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C2396 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48631 +
            (C2747 - C2748 + C2749 - C2750 + C2751 - C2752) * C2397 +
            (C2753 - C2754 + C2755 - C2756 + C2757 - C2758) * C48609) *
               C48318 * C48300 * C447 +
           ((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C2395 +
            (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48642 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48593 * C627 - C1008 * C622) *
                C2396 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48593 * C637 - C1008 * C632) *
                C48631 +
            (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
             C48593 * C2545 - C1008 * C2544) *
                C2397 +
            (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
             C48593 * C2547 - C1008 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C447 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C447 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
             (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
                C7642 +
            (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
             (C9382 - C9381) * C48631 + (C9889 - C9890) * C2397 +
             (C9891 - C9892) * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             (C9375 - C9376) * C2396 + (C9377 - C9378) * C48631 +
             (C9886 - C9885) * C2397 + (C9888 - C9887) * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             (C9379 - C9380) * C2396 + (C9381 - C9382) * C48631 +
             (C9890 - C9889) * C2397 + (C9892 - C9891) * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C8908 * C9616 - C48212 * C9618) * C2397 +
             (C8908 * C9619 - C48212 * C9622) * C48609) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C10071 - C10072) * C2396 + (C10073 - C10074) * C48631 +
             (C10075 - C10076) * C2397 + (C10077 - C10078) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9017 - C9016) * C2395 + (C9019 - C9018) * C48642 +
             (C9894 - C9893) * C2396 + (C9896 - C9895) * C48631 +
             (C9898 - C9897) * C2397 + (C9900 - C9899) * C48609) *
                C7641 +
            ((C9021 - C9020) * C2395 + (C9023 - C9022) * C48642 +
             (C9902 - C9901) * C2396 + (C9904 - C9903) * C48631 +
             (C9906 - C9905) * C2397 + (C9908 - C9907) * C48609) *
                C7642 +
            ((C9025 - C9024) * C2395 + (C9027 - C9026) * C48642 +
             (C48212 * C1824 - C8908 * C1821) * C2396 +
             (C48212 * C1830 - C8908 * C1827) * C48631 +
             (C48212 * C9881 - C8908 * C9880) * C2397 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C48300 * C447 +
           ((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C7644 * C2258 - C48638 * C2264 + C7645 * C2259 - C48625 * C2265 +
             C7646 * C2260 - C48593 * C2266) *
                C15019 +
            (C7644 * C2267 - C48638 * C2276 + C7645 * C2268 - C48625 * C2277 +
             C7646 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C15018 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C15015 +
            (C15349 - C15350 + C15351 - C15352 + C15353 - C15354) * C15019 +
            (C15355 - C15356 + C15357 - C15358 + C15359 - C15360) * C48609) *
               C48318 * C48300 * C447 +
           ((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C15017 +
            (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C15014 +
            (C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
             C48593 * C627 - C7646 * C622) *
                C15018 +
            (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
             C48593 * C637 - C7646 * C632) *
                C15015 +
            (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
             C48593 * C2545 - C7646 * C2544) *
                C15019 +
            (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
             C48593 * C2547 - C7646 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
             C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9017 - C9016) * C15017 + (C9019 - C9018) * C15014 +
             (C9894 - C9893) * C15018 + (C9896 - C9895) * C15015 +
             (C9898 - C9897) * C15019 + (C9900 - C9899) * C48609) *
                C48641 +
            ((C9021 - C9020) * C15017 + (C9023 - C9022) * C15014 +
             (C9902 - C9901) * C15018 + (C9904 - C9903) * C15015 +
             (C9906 - C9905) * C15019 + (C9908 - C9907) * C48609) *
                C48629 +
            ((C9025 - C9024) * C15017 + (C9027 - C9026) * C15014 +
             (C14038 - C14037) * C15018 + (C14040 - C14039) * C15015 +
             (C48212 * C9881 - C8908 * C9880) * C15019 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C17482 +
            (C48212 * C140 - C8908 * C131) * C17477 +
            (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
            C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
            (C10939 - C10938) * C17480 + (C17664 - C17665) * C17486 +
            (C17666 - C17667) * C17481) *
               C48318 * C48300 * C447 +
           ((C9001 - C9000) * C17482 + (C9003 - C9002) * C17477 +
            C10508 * C17483 + C10509 * C17478 + C10510 * C17484 +
            C10511 * C17479 + (C10512 - C10513) * C17485 +
            (C10514 - C10515) * C17480 +
            (C8908 * C10925 - C48212 * C10927) * C17486 +
            (C8908 * C10928 - C48212 * C10931) * C17481) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C8908 * C120 - C48212 * C127) * C17482 +
            (C8908 * C132 - C48212 * C141) * C17477 +
            (C10071 - C10072) * C17483 + (C10073 - C10074) * C17478 +
            (C10075 - C10076) * C17484 + (C10077 - C10078) * C17479 +
            (C17668 - C17669) * C17485 + (C17670 - C17671) * C17480 +
            (C17672 - C17673) * C17486 + (C17674 - C17675) * C17481) *
               C48318 * C48300 * C447 +
           ((C9017 - C9016) * C17482 + (C9019 - C9018) * C17477 +
            (C9894 - C9893) * C17483 + (C9896 - C9895) * C17478 +
            (C9898 - C9897) * C17484 + (C9900 - C9899) * C17479 +
            (C48212 * C3164 - C8908 * C3161) * C17485 +
            (C48212 * C3170 - C8908 * C3167) * C17480 +
            (C48212 * C17570 - C8908 * C17569) * C17486 +
            (C48212 * C17572 - C8908 * C17571) * C17481) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C48329) *
                  C48318 * C48300 * C513 +
              ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                C117 * C237 - C105 * C243) *
                   C118 +
               (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                C117 * C248 - C105 * C255) *
                   C48329) *
                  C48318 * C48300 * C514 +
              ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
                C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
                C105 * C526 - C117 * C521) *
                   C118 +
               (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
                C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
                C105 * C536 - C117 * C531) *
                   C48329) *
                  C48318 * C48300 * C515) *
             C48249 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48593 * C128 - C1008 * C121) *
                    C118 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48593 * C142 - C1008 * C133) *
                    C48329) *
                   C48641 +
               ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                   C48629 +
               C1674 * C48606) *
                  C48300 * C513 +
              (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
                (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                   C48641 +
               ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
                (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                   C48629 +
               ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
                (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                   C48606) *
                  C48300 * C514 +
              (C1674 * C48641 +
               ((C1657 - C1656 + C1659 - C1658 + C1661 - C1660) * C118 +
                (C1663 - C1662 + C1665 - C1664 + C1667 - C1666) * C48329) *
                   C48629 +
               ((C1000 * C1640 - C1006 * C1637 + C1001 * C1641 - C1007 * C1638 +
                 C48593 * C1642 - C1008 * C1639) *
                    C118 +
                (C1000 * C1646 - C1006 * C1643 + C1001 * C1647 - C1007 * C1644 +
                 C48593 * C1648 - C1008 * C1645) *
                    C48329) *
                   C48606) *
                  C48300 * C515) *
             C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48593 * C128 - C1008 * C121) *
               C2395 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48593 * C142 - C1008 * C133) *
               C48642 +
           (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
           (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
           (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
              C48318 * C48300 * C513 +
          ((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
           (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
           (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
           (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
           (C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
            C1008 * C2260 - C48593 * C2266) *
               C2397 +
           (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
            C1008 * C2269 - C48593 * C2278) *
               C48609) *
              C48318 * C48300 * C514 +
          (C1670 * C2395 + C1671 * C48642 +
           (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C2396 +
           (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48631 +
           (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
            C48593 * C2272 - C1008 * C2263) *
               C2397 +
           (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
            C48593 * C2281 - C1008 * C2275) *
               C48609) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C48300 * C513 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
               C7641 +
           ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
            (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
               C7642 +
           ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
            (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
               C48606) *
              C48300 * C514 +
          (C8268 * C7641 +
           ((C8251 - C8250 + C8253 - C8252 + C8255 - C8254) * C118 +
            (C8257 - C8256 + C8259 - C8258 + C8261 - C8260) * C48329) *
               C7642 +
           ((C48638 * C1640 - C7644 * C1637 + C48625 * C1641 - C7645 * C1638 +
             C48593 * C1642 - C7646 * C1639) *
                C118 +
            (C48638 * C1646 - C7644 * C1643 + C48625 * C1647 - C7645 * C1644 +
             C48593 * C1648 - C7646 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C48300 * C513 +
          (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
           ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
           ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
           ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
           ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
              C48300 * C514 +
          (C9286 * C8903 + C9287 * C8904 + C9288 * C8905 +
           ((C9277 - C9276) * C118 + (C9279 - C9278) * C48329) * C8906 +
           ((C48212 * C9266 - C8908 * C9265) * C118 +
            (C48212 * C9268 - C8908 * C9267) * C48329) *
               C8907) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C2395 +
            (C48212 * C140 - C8908 * C131) * C48642 +
            (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
            (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
               C7641 +
           ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
            (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
            (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
               C7642 +
           C10353 * C48606) *
              C48300 * C513 +
          (((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
            (C9375 - C9376) * C2396 + (C9377 - C9378) * C48631 +
            (C9886 - C9885) * C2397 + (C9888 - C9887) * C48609) *
               C7641 +
           ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
            (C9379 - C9380) * C2396 + (C9381 - C9382) * C48631 +
            (C9890 - C9889) * C2397 + (C9892 - C9891) * C48609) *
               C7642 +
           ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
            (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
            (C10341 - C10342) * C2397 + (C10343 - C10344) * C48609) *
               C48606) *
              C48300 * C514 +
          (C10353 * C7641 +
           (C9272 * C2395 + C9273 * C48642 + (C9384 - C9383) * C2396 +
            (C9386 - C9385) * C48631 + (C10342 - C10341) * C2397 +
            (C10344 - C10343) * C48609) *
               C7642 +
           (C9274 * C2395 + C9275 * C48642 + (C9388 - C9387) * C2396 +
            (C9390 - C9389) * C48631 +
            (C48212 * C9620 - C8908 * C9617) * C2397 +
            (C48212 * C9623 - C8908 * C9621) * C48609) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
            C48593 * C128 - C7646 * C121) *
               C15017 +
           (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
            C48593 * C142 - C7646 * C133) *
               C15014 +
           (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
           (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
           (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
           (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
              C48318 * C48300 * C513 +
          ((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
           (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
           (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
           (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
           (C7644 * C2258 - C48638 * C2264 + C7645 * C2259 - C48625 * C2265 +
            C7646 * C2260 - C48593 * C2266) *
               C15019 +
           (C7644 * C2267 - C48638 * C2276 + C7645 * C2268 - C48625 * C2277 +
            C7646 * C2269 - C48593 * C2278) *
               C48609) *
              C48318 * C48300 * C514 +
          (C8264 * C15017 + C8265 * C15014 +
           (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C15018 +
           (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C15015 +
           (C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
            C48593 * C2272 - C7646 * C2263) *
               C15019 +
           (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
            C48593 * C2281 - C7646 * C2275) *
               C48609) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C15017 +
            (C48212 * C140 - C8908 * C131) * C15014 +
            (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
            C10934 * C15019 + C10935 * C48609) *
               C48641 +
           ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
            C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
            C10507 * C48609) *
               C48629 +
           C16867 * C48606) *
              C48300 * C513 +
          (((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
            C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
            C10511 * C48609) *
               C48641 +
           ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
            C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
            C10519 * C48609) *
               C48629 +
           ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
            C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
            (C10343 - C10344) * C48609) *
               C48606) *
              C48300 * C514 +
          (C16867 * C48641 +
           (C9272 * C15017 + C9273 * C15014 + C14405 * C15018 +
            C14406 * C15015 + (C10342 - C10341) * C15019 +
            (C10344 - C10343) * C48609) *
               C48629 +
           (C9274 * C15017 + C9275 * C15014 + (C9388 - C9387) * C15018 +
            (C9390 - C9389) * C15015 +
            (C48212 * C9620 - C8908 * C9617) * C15019 +
            (C48212 * C9623 - C8908 * C9621) * C48609) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48212 * C126 - C8908 * C119) * C17482 +
           (C48212 * C140 - C8908 * C131) * C17477 +
           (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
           C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
           (C10939 - C10938) * C17480 + (C17664 - C17665) * C17486 +
           (C17666 - C17667) * C17481) *
              C48318 * C48300 * C513 +
          ((C9001 - C9000) * C17482 + (C9003 - C9002) * C17477 +
           C10508 * C17483 + C10509 * C17478 + C10510 * C17484 +
           C10511 * C17479 + (C10512 - C10513) * C17485 +
           (C10514 - C10515) * C17480 +
           (C8908 * C10925 - C48212 * C10927) * C17486 +
           (C8908 * C10928 - C48212 * C10931) * C17481) *
              C48318 * C48300 * C514 +
          (C9270 * C17482 + C9271 * C17477 + C10337 * C17483 + C10338 * C17478 +
           C10339 * C17484 + C10340 * C17479 + (C10521 - C10520) * C17485 +
           (C10523 - C10522) * C17480 +
           (C48212 * C10929 - C8908 * C10926) * C17486 +
           (C48212 * C10932 - C8908 * C10930) * C17481) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48329) *
                   C48318 * C339 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48329) *
                   C48318 * C48603) *
                  C447 +
              (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48329) *
                   C48318 * C339 +
               ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
                 C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
                 C105 * C628 - C117 * C623) *
                    C118 +
                (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
                 C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
                 C105 * C638 - C117 * C633) *
                    C48329) *
                   C48318 * C48603) *
                  C48601) *
             C48249 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                  C48593 * C128 - C1008 * C121) *
                     C118 +
                 (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                  C48593 * C142 - C1008 * C133) *
                     C48329) *
                    C48641 +
                ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                 (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                    C48629 +
                C1674 * C48606) *
                   C339 +
               (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                  C1008 * C343 - C48593 * C349) *
                     C118 +
                 (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                  C1008 * C354 - C48593 * C361) *
                     C48329) *
                    C48641 +
                ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
                 (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                    C48629 +
                ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
                 (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                    C48606) *
                   C48603) *
                  C447 +
              ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
                 (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                    C48641 +
                ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
                 (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                    C48629 +
                ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
                 (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                    C48606) *
                   C339 +
               (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
                 (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                    C48641 +
                ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
                 (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                    C48629 +
                ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 -
                  C1007 * C1821 + C48593 * C1825 - C1008 * C1822) *
                     C118 +
                 (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 -
                  C1007 * C1827 + C48593 * C1831 - C1008 * C1828) *
                     C48329) *
                    C48606) *
                   C48603) *
                  C48601) *
             C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C339 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C447 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C2397 +
            (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48609) *
               C48318 * C339 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C2395 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48642 +
            (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C2396 +
            (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48631 +
            (C1000 * C3163 - C1006 * C3160 + C1001 * C3164 - C1007 * C3161 +
             C48593 * C3165 - C1008 * C3162) *
                C2397 +
            (C1000 * C3169 - C1006 * C3166 + C1001 * C3170 - C1007 * C3167 +
             C48593 * C3171 - C1008 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C339 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C339 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
             C10507 * C48609) *
                C7642 +
            C10353 * C48606) *
               C339 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
             C10511 * C48631 + (C10512 - C10513) * C2397 +
             (C10514 - C10515) * C48609) *
                C7642 +
            (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
             C10519 * C48631 + (C10520 - C10521) * C2397 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             C10508 * C2396 + C10509 * C48631 + C10510 * C2397 +
             C10511 * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             C10516 * C2396 + C10517 * C48631 + C10518 * C2397 +
             C10519 * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C10341 - C10342) * C2397 + (C10343 - C10344) * C48609) *
                C48606) *
               C339 +
           ((C10504 * C2395 + C10505 * C48642 + C10506 * C2396 +
             C10507 * C48631 + (C10513 - C10512) * C2397 +
             (C10515 - C10514) * C48609) *
                C7641 +
            (C10337 * C2395 + C10338 * C48642 + C10339 * C2396 +
             C10340 * C48631 + (C10521 - C10520) * C2397 +
             (C10523 - C10522) * C48609) *
                C7642 +
            ((C9384 - C9383) * C2395 + (C9386 - C9385) * C48642 +
             (C10342 - C10341) * C2396 + (C10344 - C10343) * C48631 +
             (C48212 * C10500 - C8908 * C10499) * C2397 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C339 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C447 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C15019 +
            (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48609) *
               C48318 * C339 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C15017 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C15014 +
            (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C15018 +
            (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C15015 +
            (C48638 * C3163 - C7644 * C3160 + C48625 * C3164 - C7645 * C3161 +
             C48593 * C3165 - C7646 * C3162) *
                C15019 +
            (C48638 * C3169 - C7644 * C3166 + C48625 * C3170 - C7645 * C3167 +
             C48593 * C3171 - C7646 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            C16867 * C48606) *
               C339 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C339 +
           ((C10504 * C15017 + C10505 * C15014 + C10506 * C15018 +
             C10507 * C15015 + (C10513 - C10512) * C15019 +
             (C10515 - C10514) * C48609) *
                C48641 +
            (C10337 * C15017 + C10338 * C15014 + C10339 * C15018 +
             C10340 * C15015 + (C10521 - C10520) * C15019 +
             (C10523 - C10522) * C48609) *
                C48629 +
            (C14405 * C15017 + C14406 * C15014 + (C10342 - C10341) * C15018 +
             (C10344 - C10343) * C15015 +
             (C48212 * C10500 - C8908 * C10499) * C15019 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C17482 +
            (C48212 * C140 - C8908 * C131) * C17477 +
            (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
            C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
            (C10939 - C10938) * C17480 + (C17664 - C17665) * C17486 +
            (C17666 - C17667) * C17481) *
               C48318 * C339 +
           ((C10064 - C10063) * C17482 + (C10066 - C10065) * C17477 +
            (C10068 - C10067) * C17483 + (C10070 - C10069) * C17478 +
            (C10936 - C10937) * C17484 + (C10938 - C10939) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C8908 * C17655 - C48212 * C17657) * C17486 +
            (C8908 * C17658 - C48212 * C17661) * C17481) *
               C48318 * C48603) *
              C447 +
          (((C9001 - C9000) * C17482 + (C9003 - C9002) * C17477 +
            C10508 * C17483 + C10509 * C17478 + C10510 * C17484 +
            C10511 * C17479 + (C10512 - C10513) * C17485 +
            (C10514 - C10515) * C17480 + (C17906 - C17907) * C17486 +
            (C17908 - C17909) * C17481) *
               C48318 * C339 +
           (C10504 * C17482 + C10505 * C17477 + C10506 * C17483 +
            C10507 * C17478 + (C10513 - C10512) * C17484 +
            (C10515 - C10514) * C17479 + (C17907 - C17906) * C17485 +
            (C17909 - C17908) * C17480 +
            (C48212 * C17902 - C8908 * C17901) * C17486 +
            (C48212 * C17904 - C8908 * C17903) * C17481) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48329) *
                   C48318 * C721 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48329) *
                   C48318 * C48603) *
                  C48283 * C449 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48329) *
                   C48318 * C721 +
               ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
                 C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
                 C105 * C357 - C117 * C346) *
                    C118 +
                (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
                 C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
                 C105 * C364 - C117 * C358) *
                    C48329) *
                   C48318 * C48603) *
                  C48283 * C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                  C48593 * C128 - C1008 * C121) *
                     C118 +
                 (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                  C48593 * C142 - C1008 * C133) *
                     C48329) *
                    C48641 +
                ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                 (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                    C48629 +
                C1674 * C48606) *
                   C721 +
               (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                  C1008 * C343 - C48593 * C349) *
                     C118 +
                 (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                  C1008 * C354 - C48593 * C361) *
                     C48329) *
                    C48641 +
                ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
                 (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                    C48629 +
                ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
                 (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                    C48606) *
                   C48603) *
                  C48283 * C449 +
              ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                  C1008 * C122 - C48593 * C129) *
                     C118 +
                 (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                  C1008 * C134 - C48593 * C143) *
                     C48329) *
                    C48641 +
                ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
                 (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                    C48629 +
                ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
                 (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                    C48606) *
                   C721 +
               (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
                  C48593 * C350 - C1008 * C344) *
                     C118 +
                 (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
                  C48593 * C362 - C1008 * C355) *
                     C48329) *
                    C48641 +
                ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
                  C48593 * C627 - C1008 * C622) *
                     C118 +
                 (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
                  C48593 * C637 - C1008 * C632) *
                     C48329) *
                    C48629 +
                ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 -
                  C1007 * C1367 + C48593 * C1375 - C1008 * C1368) *
                     C118 +
                 (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 -
                  C1007 * C1374 + C48593 * C1380 - C1008 * C1376) *
                     C48329) *
                    C48606) *
                   C48603) *
                  C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C721 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C2396 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48631 +
            (C2747 - C2748 + C2749 - C2750 + C2751 - C2752) * C2397 +
            (C2753 - C2754 + C2755 - C2756 + C2757 - C2758) * C48609) *
               C48318 * C721 +
           ((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C2395 +
            (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48642 +
            (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C2396 +
            (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48631 +
            (C1000 * C2699 - C1006 * C2695 + C1001 * C2700 - C1007 * C2696 +
             C48593 * C2704 - C1008 * C2697) *
                C2397 +
            (C1000 * C2707 - C1006 * C2702 + C1001 * C2708 - C1007 * C2703 +
             C48593 * C2709 - C1008 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C721 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C721 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
             C10507 * C48609) *
                C7642 +
            C10353 * C48606) *
               C721 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
             C10511 * C48631 + (C10512 - C10513) * C2397 +
             (C10514 - C10515) * C48609) *
                C7642 +
            (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
             C10519 * C48631 + (C10520 - C10521) * C2397 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C10071 - C10072) * C2396 + (C10073 - C10074) * C48631 +
             (C10075 - C10076) * C2397 + (C10077 - C10078) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C721 +
           (((C10072 - C10071) * C2395 + (C10074 - C10073) * C48642 +
             (C10076 - C10075) * C2396 + (C10078 - C10077) * C48631 +
             (C48212 * C2699 - C8908 * C2695) * C2397 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C7641 +
            ((C9894 - C9893) * C2395 + (C9896 - C9895) * C48642 +
             (C9898 - C9897) * C2396 + (C9900 - C9899) * C48631 +
             (C48212 * C3164 - C8908 * C3161) * C2397 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C7642 +
            ((C9902 - C9901) * C2395 + (C9904 - C9903) * C48642 +
             (C9906 - C9905) * C2396 + (C9908 - C9907) * C48631 +
             (C48212 * C10058 - C8908 * C10055) * C2397 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C721 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C15018 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C15015 +
            (C15349 - C15350 + C15351 - C15352 + C15353 - C15354) * C15019 +
            (C15355 - C15356 + C15357 - C15358 + C15359 - C15360) * C48609) *
               C48318 * C721 +
           ((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C15017 +
            (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C15014 +
            (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C15018 +
            (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C15015 +
            (C48638 * C2699 - C7644 * C2695 + C48625 * C2700 - C7645 * C2696 +
             C48593 * C2704 - C7646 * C2697) *
                C15019 +
            (C48638 * C2707 - C7644 * C2702 + C48625 * C2708 - C7645 * C2703 +
             C48593 * C2709 - C7646 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            C16867 * C48606) *
               C721 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C721 +
           (((C10072 - C10071) * C15017 + (C10074 - C10073) * C15014 +
             (C10076 - C10075) * C15018 + (C10078 - C10077) * C15015 +
             (C48212 * C2699 - C8908 * C2695) * C15019 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C48641 +
            ((C9894 - C9893) * C15017 + (C9896 - C9895) * C15014 +
             (C9898 - C9897) * C15018 + (C9900 - C9899) * C15015 +
             (C48212 * C3164 - C8908 * C3161) * C15019 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C48629 +
            ((C9902 - C9901) * C15017 + (C9904 - C9903) * C15014 +
             (C9906 - C9905) * C15018 + (C9908 - C9907) * C15015 +
             (C48212 * C10058 - C8908 * C10055) * C15019 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C17482 +
            (C48212 * C140 - C8908 * C131) * C17477 +
            (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
            C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
            (C10939 - C10938) * C17480 + (C17664 - C17665) * C17486 +
            (C17666 - C17667) * C17481) *
               C48318 * C721 +
           ((C10064 - C10063) * C17482 + (C10066 - C10065) * C17477 +
            (C10068 - C10067) * C17483 + (C10070 - C10069) * C17478 +
            (C10936 - C10937) * C17484 + (C10938 - C10939) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C8908 * C17655 - C48212 * C17657) * C17486 +
            (C8908 * C17658 - C48212 * C17661) * C17481) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C8908 * C120 - C48212 * C127) * C17482 +
            (C8908 * C132 - C48212 * C141) * C17477 +
            (C10071 - C10072) * C17483 + (C10073 - C10074) * C17478 +
            (C10075 - C10076) * C17484 + (C10077 - C10078) * C17479 +
            (C17668 - C17669) * C17485 + (C17670 - C17671) * C17480 +
            (C17672 - C17673) * C17486 + (C17674 - C17675) * C17481) *
               C48318 * C721 +
           ((C10072 - C10071) * C17482 + (C10074 - C10073) * C17477 +
            (C10076 - C10075) * C17483 + (C10078 - C10077) * C17478 +
            (C17669 - C17668) * C17484 + (C17671 - C17670) * C17479 +
            (C17673 - C17672) * C17485 + (C17675 - C17674) * C17480 +
            (C48212 * C17659 - C8908 * C17656) * C17486 +
            (C48212 * C17662 - C8908 * C17660) * C17481) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48329) *
                   C48318 * C721 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48329) *
                   C48318 * C48603) *
                  C229 +
              (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48329) *
                   C48318 * C721 +
               ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
                 C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
                 C105 * C628 - C117 * C623) *
                    C118 +
                (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
                 C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
                 C105 * C638 - C117 * C633) *
                    C48329) *
                   C48318 * C48603) *
                  C48601) *
             C48249 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                  C48593 * C128 - C1008 * C121) *
                     C118 +
                 (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                  C48593 * C142 - C1008 * C133) *
                     C48329) *
                    C48641 +
                ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                 (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                    C48629 +
                C1674 * C48606) *
                   C721 +
               (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                  C1008 * C343 - C48593 * C349) *
                     C118 +
                 (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                  C1008 * C354 - C48593 * C361) *
                     C48329) *
                    C48641 +
                ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
                 (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                    C48629 +
                ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
                 (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                    C48606) *
                   C48603) *
                  C229 +
              ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
                 (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                    C48641 +
                ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
                 (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                    C48629 +
                ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
                 (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                    C48606) *
                   C721 +
               (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
                 (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                    C48641 +
                ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
                 (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                    C48629 +
                ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 -
                  C1007 * C1821 + C48593 * C1825 - C1008 * C1822) *
                     C118 +
                 (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 -
                  C1007 * C1827 + C48593 * C1831 - C1008 * C1828) *
                     C48329) *
                    C48606) *
                   C48603) *
                  C48601) *
             C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C721 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C229 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C2397 +
            (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48609) *
               C48318 * C721 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C2395 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48642 +
            (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C2396 +
            (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48631 +
            (C1000 * C3163 - C1006 * C3160 + C1001 * C3164 - C1007 * C3161 +
             C48593 * C3165 - C1008 * C3162) *
                C2397 +
            (C1000 * C3169 - C1006 * C3166 + C1001 * C3170 - C1007 * C3167 +
             C48593 * C3171 - C1008 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C721 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C721 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
             C10507 * C48609) *
                C7642 +
            C10353 * C48606) *
               C721 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
             C10511 * C48631 + (C10512 - C10513) * C2397 +
             (C10514 - C10515) * C48609) *
                C7642 +
            (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
             C10519 * C48631 + (C10520 - C10521) * C2397 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             C10508 * C2396 + C10509 * C48631 + C10510 * C2397 +
             C10511 * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             C10516 * C2396 + C10517 * C48631 + C10518 * C2397 +
             C10519 * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C10341 - C10342) * C2397 + (C10343 - C10344) * C48609) *
                C48606) *
               C721 +
           ((C10504 * C2395 + C10505 * C48642 + C10506 * C2396 +
             C10507 * C48631 + (C10513 - C10512) * C2397 +
             (C10515 - C10514) * C48609) *
                C7641 +
            (C10337 * C2395 + C10338 * C48642 + C10339 * C2396 +
             C10340 * C48631 + (C10521 - C10520) * C2397 +
             (C10523 - C10522) * C48609) *
                C7642 +
            ((C9384 - C9383) * C2395 + (C9386 - C9385) * C48642 +
             (C10342 - C10341) * C2396 + (C10344 - C10343) * C48631 +
             (C48212 * C10500 - C8908 * C10499) * C2397 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C721 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C229 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C15019 +
            (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48609) *
               C48318 * C721 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C15017 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C15014 +
            (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C15018 +
            (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C15015 +
            (C48638 * C3163 - C7644 * C3160 + C48625 * C3164 - C7645 * C3161 +
             C48593 * C3165 - C7646 * C3162) *
                C15019 +
            (C48638 * C3169 - C7644 * C3166 + C48625 * C3170 - C7645 * C3167 +
             C48593 * C3171 - C7646 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            C16867 * C48606) *
               C721 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C721 +
           ((C10504 * C15017 + C10505 * C15014 + C10506 * C15018 +
             C10507 * C15015 + (C10513 - C10512) * C15019 +
             (C10515 - C10514) * C48609) *
                C48641 +
            (C10337 * C15017 + C10338 * C15014 + C10339 * C15018 +
             C10340 * C15015 + (C10521 - C10520) * C15019 +
             (C10523 - C10522) * C48609) *
                C48629 +
            (C14405 * C15017 + C14406 * C15014 + (C10342 - C10341) * C15018 +
             (C10344 - C10343) * C15015 +
             (C48212 * C10500 - C8908 * C10499) * C15019 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C17482 +
            (C48212 * C140 - C8908 * C131) * C17477 +
            (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
            C10934 * C17484 + C10935 * C17479 + (C10937 - C10936) * C17485 +
            (C10939 - C10938) * C17480 + (C17664 - C17665) * C17486 +
            (C17666 - C17667) * C17481) *
               C48318 * C721 +
           ((C10064 - C10063) * C17482 + (C10066 - C10065) * C17477 +
            (C10068 - C10067) * C17483 + (C10070 - C10069) * C17478 +
            (C10936 - C10937) * C17484 + (C10938 - C10939) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C8908 * C17655 - C48212 * C17657) * C17486 +
            (C8908 * C17658 - C48212 * C17661) * C17481) *
               C48318 * C48603) *
              C229 +
          (((C9001 - C9000) * C17482 + (C9003 - C9002) * C17477 +
            C10508 * C17483 + C10509 * C17478 + C10510 * C17484 +
            C10511 * C17479 + (C10512 - C10513) * C17485 +
            (C10514 - C10515) * C17480 + (C17906 - C17907) * C17486 +
            (C17908 - C17909) * C17481) *
               C48318 * C721 +
           (C10504 * C17482 + C10505 * C17477 + C10506 * C17483 +
            C10507 * C17478 + (C10513 - C10512) * C17484 +
            (C10515 - C10514) * C17479 + (C17907 - C17906) * C17485 +
            (C17909 - C17908) * C17480 +
            (C48212 * C17902 - C8908 * C17901) * C17486 +
            (C48212 * C17904 - C8908 * C17903) * C17481) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C48329) *
                  C48318 * C867 +
              ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                C117 * C345 - C105 * C351) *
                   C118 +
               (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                C117 * C356 - C105 * C363) *
                   C48329) *
                  C48318 * C868 +
              ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
                C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
                C105 * C879 - C117 * C874) *
                   C118 +
               (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
                C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
                C105 * C889 - C117 * C884) *
                   C48329) *
                  C48318 * C869) *
             C48283 * C48249 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48593 * C128 - C1008 * C121) *
                    C118 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48593 * C142 - C1008 * C133) *
                    C48329) *
                   C48641 +
               ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
                (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                   C48629 +
               C1674 * C48606) *
                  C867 +
              (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                 C1008 * C343 - C48593 * C349) *
                    C118 +
                (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                 C1008 * C354 - C48593 * C361) *
                    C48329) *
                   C48641 +
               ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
                (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                   C48629 +
               ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
                (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                   C48606) *
                  C868 +
              (((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
                 C48593 * C877 - C1008 * C872) *
                    C118 +
                (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
                 C48593 * C887 - C1008 * C882) *
                    C48329) *
                   C48641 +
               ((C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
                 C48593 * C2266 - C1008 * C2260) *
                    C118 +
                (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
                 C48593 * C2278 - C1008 * C2269) *
                    C48329) *
                   C48629 +
               ((C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
                 C48593 * C2272 - C1008 * C2263) *
                    C118 +
                (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
                 C48593 * C2281 - C1008 * C2275) *
                    C48329) *
                   C48606) *
                  C869) *
             C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48593 * C128 - C1008 * C121) *
               C2395 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48593 * C142 - C1008 * C133) *
               C48642 +
           (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
           C3619 * C2397 + C3620 * C48609) *
              C48318 * C867 +
          ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
           (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
           (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
           (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
           (C3605 - C3606 + C3607 - C3608 + C3609 - C3610) * C2397 +
           (C3611 - C3612 + C3613 - C3614 + C3615 - C3616) * C48609) *
              C48318 * C868 +
          (C3619 * C2395 + C3620 * C48642 +
           (C3606 - C3605 + C3608 - C3607 + C3610 - C3609) * C2396 +
           (C3612 - C3611 + C3614 - C3613 + C3616 - C3615) * C48631 +
           (C1000 * C3589 - C1006 * C3586 + C1001 * C3590 - C1007 * C3587 +
            C48593 * C3591 - C1008 * C3588) *
               C2397 +
           (C1000 * C3595 - C1006 * C3592 + C1001 * C3596 - C1007 * C3593 +
            C48593 * C3597 - C1008 * C3594) *
               C48609) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C867 +
          (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
             C7646 * C343 - C48593 * C349) *
                C118 +
            (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
             C7646 * C354 - C48593 * C361) *
                C48329) *
               C7641 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
               C7642 +
           ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
               C48606) *
              C868 +
          (((C48638 * C875 - C7644 * C870 + C48625 * C876 - C7645 * C871 +
             C48593 * C877 - C7646 * C872) *
                C118 +
            (C48638 * C885 - C7644 * C880 + C48625 * C886 - C7645 * C881 +
             C48593 * C887 - C7646 * C882) *
                C48329) *
               C7641 +
           ((C48638 * C2264 - C7644 * C2258 + C48625 * C2265 - C7645 * C2259 +
             C48593 * C2266 - C7646 * C2260) *
                C118 +
            (C48638 * C2276 - C7644 * C2267 + C48625 * C2277 - C7645 * C2268 +
             C48593 * C2278 - C7646 * C2269) *
                C48329) *
               C7642 +
           ((C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
             C48593 * C2272 - C7646 * C2263) *
                C118 +
            (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
             C48593 * C2281 - C7646 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C867 +
          (((C8908 * C341 - C48212 * C347) * C118 +
            (C8908 * C352 - C48212 * C359) * C48329) *
               C8903 +
           ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
           ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
           ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
           ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
              C868 +
          (((C48212 * C875 - C8908 * C870) * C118 +
            (C48212 * C885 - C8908 * C880) * C48329) *
               C8903 +
           ((C48212 * C2264 - C8908 * C2258) * C118 +
            (C48212 * C2276 - C8908 * C2267) * C48329) *
               C8904 +
           ((C48212 * C2270 - C8908 * C2261) * C118 +
            (C48212 * C2279 - C8908 * C2273) * C48329) *
               C8905 +
           ((C48212 * C9618 - C8908 * C9616) * C118 +
            (C48212 * C9622 - C8908 * C9619) * C48329) *
               C8906 +
           ((C48212 * C9620 - C8908 * C9617) * C118 +
            (C48212 * C9623 - C8908 * C9621) * C48329) *
               C8907) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C2395 +
            (C48212 * C140 - C8908 * C131) * C48642 +
            (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
            C10934 * C2397 + C10935 * C48609) *
               C7641 +
           ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
            C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
            C10507 * C48609) *
               C7642 +
           C10353 * C48606) *
              C867 +
          (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
            (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
            (C10936 - C10937) * C2397 + (C10938 - C10939) * C48609) *
               C7641 +
           (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
            C10511 * C48631 + (C10512 - C10513) * C2397 +
            (C10514 - C10515) * C48609) *
               C7642 +
           (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
            C10519 * C48631 + (C10520 - C10521) * C2397 +
            (C10522 - C10523) * C48609) *
               C48606) *
              C868 +
          ((C10934 * C2395 + C10935 * C48642 + (C10937 - C10936) * C2396 +
            (C10939 - C10938) * C48631 +
            (C48212 * C3589 - C8908 * C3586) * C2397 +
            (C48212 * C3595 - C8908 * C3592) * C48609) *
               C7641 +
           (C10506 * C2395 + C10507 * C48642 + (C10513 - C10512) * C2396 +
            (C10515 - C10514) * C48631 +
            (C48212 * C10927 - C8908 * C10925) * C2397 +
            (C48212 * C10931 - C8908 * C10928) * C48609) *
               C7642 +
           (C10339 * C2395 + C10340 * C48642 + (C10521 - C10520) * C2396 +
            (C10523 - C10522) * C48631 +
            (C48212 * C10929 - C8908 * C10926) * C2397 +
            (C48212 * C10932 - C8908 * C10930) * C48609) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
            C48593 * C128 - C7646 * C121) *
               C15017 +
           (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
            C48593 * C142 - C7646 * C133) *
               C15014 +
           (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
           (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
           C16197 * C15019 + C16198 * C48609) *
              C48318 * C867 +
          ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
           (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
           (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
           (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
           (C16183 - C16184 + C16185 - C16186 + C16187 - C16188) * C15019 +
           (C16189 - C16190 + C16191 - C16192 + C16193 - C16194) * C48609) *
              C48318 * C868 +
          (C16197 * C15017 + C16198 * C15014 +
           (C16184 - C16183 + C16186 - C16185 + C16188 - C16187) * C15018 +
           (C16190 - C16189 + C16192 - C16191 + C16194 - C16193) * C15015 +
           (C48638 * C3589 - C7644 * C3586 + C48625 * C3590 - C7645 * C3587 +
            C48593 * C3591 - C7646 * C3588) *
               C15019 +
           (C48638 * C3595 - C7644 * C3592 + C48625 * C3596 - C7645 * C3593 +
            C48593 * C3597 - C7646 * C3594) *
               C48609) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C15017 +
            (C48212 * C140 - C8908 * C131) * C15014 +
            (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
            C10934 * C15019 + C10935 * C48609) *
               C48641 +
           ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
            C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
            C10507 * C48609) *
               C48629 +
           C16867 * C48606) *
              C867 +
          (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
            (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
            (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
               C48641 +
           (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
            C10511 * C15015 + (C10512 - C10513) * C15019 +
            (C10514 - C10515) * C48609) *
               C48629 +
           (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
            C10519 * C15015 + (C10520 - C10521) * C15019 +
            (C10522 - C10523) * C48609) *
               C48606) *
              C868 +
          ((C10934 * C15017 + C10935 * C15014 + (C10937 - C10936) * C15018 +
            (C10939 - C10938) * C15015 +
            (C48212 * C3589 - C8908 * C3586) * C15019 +
            (C48212 * C3595 - C8908 * C3592) * C48609) *
               C48641 +
           (C10506 * C15017 + C10507 * C15014 + (C10513 - C10512) * C15018 +
            (C10515 - C10514) * C15015 +
            (C48212 * C10927 - C8908 * C10925) * C15019 +
            (C48212 * C10931 - C8908 * C10928) * C48609) *
               C48629 +
           (C10339 * C15017 + C10340 * C15014 + (C10521 - C10520) * C15018 +
            (C10523 - C10522) * C15015 +
            (C48212 * C10929 - C8908 * C10926) * C15019 +
            (C48212 * C10932 - C8908 * C10930) * C48609) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48212 * C126 - C8908 * C119) * C17482 +
           (C48212 * C140 - C8908 * C131) * C17477 +
           (C10063 - C10064) * C17483 + (C10065 - C10066) * C17478 +
           C10934 * C17484 + C10935 * C17479 + C18140 * C17485 +
           C18141 * C17480 + C18142 * C17486 + C18143 * C17481) *
              C48318 * C867 +
          ((C10064 - C10063) * C17482 + (C10066 - C10065) * C17477 +
           (C10068 - C10067) * C17483 + (C10070 - C10069) * C17478 +
           (C10936 - C10937) * C17484 + (C10938 - C10939) * C17479 +
           (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
           (C18144 - C18145) * C17486 + (C18146 - C18147) * C17481) *
              C48318 * C868 +
          (C10934 * C17482 + C10935 * C17477 + C18140 * C17483 +
           C18141 * C17478 + C18142 * C17484 + C18143 * C17479 +
           (C18145 - C18144) * C17485 + (C18147 - C18146) * C17480 +
           (C48212 * C18136 - C8908 * C18135) * C17486 +
           (C48212 * C18138 - C8908 * C18137) * C17481) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C4868 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48574 +
            (C48551 * C347 - C47223 * C341 + C48222 * C348 - C47204 * C342) *
                C4869 +
            (C48551 * C359 - C47223 * C352 + C48222 * C360 - C47204 * C353) *
                C48416) *
               C7641 +
           ((C11176 - C11177 + C11178 - C11179) * C4868 +
            (C11180 - C11181 + C11182 - C11183) * C48574 +
            (C11739 - C11738 + C11741 - C11740) * C4869 +
            (C11743 - C11742 + C11745 - C11744) * C48416) *
               C7642 +
           (C11598 * C4868 + C11599 * C48574 +
            (C11747 - C11746 + C11749 - C11748) * C4869 +
            (C11751 - C11750 + C11753 - C11752) * C48416) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C4868 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C48574 +
            (C47223 * C342 - C48551 * C348 + C47204 * C343 - C48222 * C349) *
                C4869 +
            (C47223 * C353 - C48551 * C360 + C47204 * C354 - C48222 * C361) *
                C48416) *
               C7641 +
           ((C11200 - C11201 + C11202 - C11203) * C4868 +
            (C11204 - C11205 + C11206 - C11207) * C48574 +
            (C47223 * C620 - C48551 * C625 + C47204 * C621 - C48222 * C626) *
                C4869 +
            (C47223 * C630 - C48551 * C635 + C47204 * C631 - C48222 * C636) *
                C48416) *
               C7642 +
           ((C11208 - C11209 + C11210 - C11211) * C4868 +
            (C11212 - C11213 + C11214 - C11215) * C48574 +
            (C47223 * C1366 - C48551 * C1370 + C47204 * C1367 -
             C48222 * C1371) *
                C4869 +
            (C47223 * C1373 - C48551 * C1378 + C47204 * C1374 -
             C48222 * C1379) *
                C48416) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C4868 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C48574 +
            (C48551 * C349 - C47223 * C343 + C48222 * C350 - C47204 * C344) *
                C4869 +
            (C48551 * C361 - C47223 * C354 + C48222 * C362 - C47204 * C355) *
                C48416) *
               C7641 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C4868 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C48574 +
            (C48551 * C626 - C47223 * C621 + C48222 * C627 - C47204 * C622) *
                C4869 +
            (C48551 * C636 - C47223 * C631 + C48222 * C637 - C47204 * C632) *
                C48416) *
               C7642 +
           ((C48551 * C524 - C47223 * C519 + C48222 * C525 - C47204 * C520) *
                C4868 +
            (C48551 * C534 - C47223 * C529 + C48222 * C535 - C47204 * C530) *
                C48574 +
            (C48551 * C1371 - C47223 * C1367 + C48222 * C1375 -
             C47204 * C1368) *
                C4869 +
            (C48551 * C1379 - C47223 * C1374 + C48222 * C1380 -
             C47204 * C1376) *
                C48416) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
               C4868 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
               C48574 +
           (C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
            C3720 * C349 - C3726 * C343 + C48610 * C350 - C3727 * C344) *
               C4869 +
           (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
            C3720 * C361 - C3726 * C354 + C48610 * C362 - C3727 * C355) *
               C48416) *
              C48318 * C48300 * C48283 * C110 +
          ((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
            C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
               C4868 +
           (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
            C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
               C48574 +
           (C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
            C3726 * C344 - C3720 * C350 + C3727 * C345 - C48610 * C351) *
               C4869 +
           (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
            C3726 * C355 - C3720 * C362 + C3727 * C356 - C48610 * C363) *
               C48416) *
              C48318 * C48300 * C48283 * C111 +
          ((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
            C3720 * C130 - C3726 * C123 + C48610 * C136 - C3727 * C124) *
               C4868 +
           (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
            C3720 * C144 - C3726 * C135 + C48610 * C145 - C3727 * C137) *
               C48574 +
           (C3718 * C349 - C3724 * C343 + C3719 * C350 - C3725 * C344 +
            C3720 * C351 - C3726 * C345 + C48610 * C357 - C3727 * C346) *
               C4869 +
           (C3718 * C361 - C3724 * C354 + C3719 * C362 - C3725 * C355 +
            C3720 * C363 - C3726 * C356 + C48610 * C364 - C3727 * C358) *
               C48416) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
               C19901 +
           (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
               C19897 +
           (C12670 - C12671 + C12672 - C12673) * C19902 +
           (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
           C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
           (C19795 - C19794 + C19797 - C19796) * C48622) *
              C48318 * C48300 * C48283 * C110 +
          ((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
               C19901 +
           (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
               C19897 +
           (C12678 - C12679 + C12680 - C12681) * C19902 +
           (C12682 - C12683 + C12684 - C12685) * C19898 +
           (C18690 - C18691 + C18692 - C18693) * C19903 +
           (C18694 - C18695 + C18696 - C18697) * C19899 +
           (C47223 * C2695 - C48551 * C2699 + C47204 * C2696 - C48222 * C2700) *
               C19904 +
           (C47223 * C2702 - C48551 * C2707 + C47204 * C2703 - C48222 * C2708) *
               C48622) *
              C48318 * C48300 * C48283 * C111 +
          ((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
               C19901 +
           (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
               C19897 +
           (C48551 * C349 - C47223 * C343 + C48222 * C350 - C47204 * C344) *
               C19902 +
           (C48551 * C361 - C47223 * C354 + C48222 * C362 - C47204 * C355) *
               C19898 +
           (C48551 * C877 - C47223 * C872 + C48222 * C878 - C47204 * C873) *
               C19903 +
           (C48551 * C887 - C47223 * C882 + C48222 * C888 - C47204 * C883) *
               C19899 +
           (C48551 * C2700 - C47223 * C2696 + C48222 * C2704 - C47204 * C2697) *
               C19904 +
           (C48551 * C2708 - C47223 * C2703 + C48222 * C2709 - C47204 * C2705) *
               C48622) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C48551 * C347 - C47223 * C341 + C48222 * C348 - C47204 * C342) *
                 C4869 +
             (C48551 * C359 - C47223 * C352 + C48222 * C360 - C47204 * C353) *
                 C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 +
             (C11739 - C11738 + C11741 - C11740) * C4869 +
             (C11743 - C11742 + C11745 - C11744) * C48416) *
                C7642 +
            (C11598 * C4868 + C11599 * C48574 +
             (C11747 - C11746 + C11749 - C11748) * C4869 +
             (C11751 - C11750 + C11753 - C11752) * C48416) *
                C48606) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 +
             (C11738 - C11739 + C11740 - C11741) * C4869 +
             (C11742 - C11743 + C11744 - C11745) * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 +
             (C11746 - C11747 + C11748 - C11749) * C4869 +
             (C11750 - C11751 + C11752 - C11753) * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C47223 * C342 - C48551 * C348 + C47204 * C343 - C48222 * C349) *
                 C4869 +
             (C47223 * C353 - C48551 * C360 + C47204 * C354 - C48222 * C361) *
                 C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C4868 +
             (C11205 - C11204 + C11207 - C11206) * C48574 +
             (C12461 - C12460 + C12463 - C12462) * C4869 +
             (C12465 - C12464 + C12467 - C12466) * C48416) *
                C7641 +
            ((C11209 - C11208 + C11211 - C11210) * C4868 +
             (C11213 - C11212 + C11215 - C11214) * C48574 +
             (C12469 - C12468 + C12471 - C12470) * C4869 +
             (C12473 - C12472 + C12475 - C12474) * C48416) *
                C7642 +
            ((C11217 - C11216 + C11219 - C11218) * C4868 +
             (C11221 - C11220 + C11223 - C11222) * C48574 +
             (C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C4869 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
             C3720 * C349 - C3726 * C343 + C48610 * C350 - C3727 * C344) *
                C4869 +
            (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
             C3720 * C361 - C3726 * C354 + C48610 * C362 - C3727 * C355) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
             C3726 * C344 - C3720 * C350 + C3727 * C345 - C48610 * C351) *
                C4869 +
            (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
             C3726 * C355 - C3720 * C362 + C3727 * C356 - C48610 * C363) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                C4868 +
            (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                C48574 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                C4869 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C19901 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C19897 +
            (C12670 - C12671 + C12672 - C12673) * C19902 +
            (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48622) *
               C48318 * C48300 * C229 +
           ((C11177 - C11176 + C11179 - C11178) * C19901 +
            (C11181 - C11180 + C11183 - C11182) * C19897 + C13263 * C19902 +
            C13264 * C19898 + C19250 * C19903 + C19251 * C19899 +
            (C19240 - C19241 + C19242 - C19243) * C19904 +
            (C19244 - C19245 + C19246 - C19247) * C48622) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C19901 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C19897 +
            (C12678 - C12679 + C12680 - C12681) * C19902 +
            (C12682 - C12683 + C12684 - C12685) * C19898 +
            (C18690 - C18691 + C18692 - C18693) * C19903 +
            (C18694 - C18695 + C18696 - C18697) * C19899 +
            (C47223 * C2695 - C48551 * C2699 + C47204 * C2696 -
             C48222 * C2700) *
                C19904 +
            (C47223 * C2702 - C48551 * C2707 + C47204 * C2703 -
             C48222 * C2708) *
                C48622) *
               C48318 * C48300 * C229 +
           ((C11201 - C11200 + C11203 - C11202) * C19901 +
            (C11205 - C11204 + C11207 - C11206) * C19897 +
            (C12461 - C12460 + C12463 - C12462) * C19902 +
            (C12465 - C12464 + C12467 - C12466) * C19898 +
            (C18489 - C18488 + C18491 - C18490) * C19903 +
            (C18493 - C18492 + C18495 - C18494) * C19899 +
            (C48551 * C3164 - C47223 * C3161 + C48222 * C3165 -
             C47204 * C3162) *
                C19904 +
            (C48551 * C3170 - C47223 * C3167 + C48222 * C3171 -
             C47204 * C3168) *
                C48622) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 +
             (C11739 - C11738 + C11741 - C11740) * C4869 +
             (C11743 - C11742 + C11745 - C11744) * C48416) *
                C7642 +
            (C11598 * C4868 + C11599 * C48574 +
             (C11747 - C11746 + C11749 - C11748) * C4869 +
             (C11751 - C11750 + C11753 - C11752) * C48416) *
                C48606) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            ((C11738 - C11739 + C11740 - C11741) * C4868 +
             (C11742 - C11743 + C11744 - C11745) * C48574 +
             (C47223 * C2258 - C48551 * C2264 + C47204 * C2259 -
              C48222 * C2265) *
                 C4869 +
             (C47223 * C2267 - C48551 * C2276 + C47204 * C2268 -
              C48222 * C2277) *
                 C48416) *
                C7642 +
            ((C11746 - C11747 + C11748 - C11749) * C4868 +
             (C11750 - C11751 + C11752 - C11753) * C48574 +
             (C47223 * C2261 - C48551 * C2270 + C47204 * C2262 -
              C48222 * C2271) *
                 C4869 +
             (C47223 * C2273 - C48551 * C2279 + C47204 * C2274 -
              C48222 * C2280) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C12678 - C12679 + C12680 - C12681) * C4869 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C339 +
           (((C12679 - C12678 + C12681 - C12680) * C4868 +
             (C12683 - C12682 + C12685 - C12684) * C48574 +
             (C48551 * C876 - C47223 * C871 + C48222 * C877 - C47204 * C872) *
                 C4869 +
             (C48551 * C886 - C47223 * C881 + C48222 * C887 - C47204 * C882) *
                 C48416) *
                C7641 +
            ((C12461 - C12460 + C12463 - C12462) * C4868 +
             (C12465 - C12464 + C12467 - C12466) * C48574 +
             (C48551 * C2265 - C47223 * C2259 + C48222 * C2266 -
              C47204 * C2260) *
                 C4869 +
             (C48551 * C2277 - C47223 * C2268 + C48222 * C2278 -
              C47204 * C2269) *
                 C48416) *
                C7642 +
            ((C12469 - C12468 + C12471 - C12470) * C4868 +
             (C12473 - C12472 + C12475 - C12474) * C48574 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C4869 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C339 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                C4869 +
            (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                C48416) *
               C48318 * C339 +
           ((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                C4868 +
            (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                C48574 +
            (C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
             C3720 * C878 - C3726 * C873 + C48610 * C879 - C3727 * C874) *
                C4869 +
            (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
             C3720 * C888 - C3726 * C883 + C48610 * C889 - C3727 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C19901 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C19897 +
            (C12670 - C12671 + C12672 - C12673) * C19902 +
            (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48622) *
               C48318 * C339 +
           ((C12671 - C12670 + C12673 - C12672) * C19901 +
            (C12675 - C12674 + C12677 - C12676) * C19897 +
            (C13801 - C13802 + C13803 - C13804) * C19902 +
            (C13805 - C13806 + C13807 - C13808) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C47223 * C3586 - C48551 * C3589 + C47204 * C3587 -
             C48222 * C3590) *
                C19904 +
            (C47223 * C3592 - C48551 * C3595 + C47204 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C19901 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C19897 +
            (C12678 - C12679 + C12680 - C12681) * C19902 +
            (C12682 - C12683 + C12684 - C12685) * C19898 +
            (C18690 - C18691 + C18692 - C18693) * C19903 +
            (C18694 - C18695 + C18696 - C18697) * C19899 +
            (C20166 - C20167 + C20168 - C20169) * C19904 +
            (C20170 - C20171 + C20172 - C20173) * C48622) *
               C48318 * C339 +
           ((C12679 - C12678 + C12681 - C12680) * C19901 +
            (C12683 - C12682 + C12685 - C12684) * C19897 +
            (C18691 - C18690 + C18693 - C18692) * C19902 +
            (C18695 - C18694 + C18697 - C18696) * C19898 +
            (C20167 - C20166 + C20169 - C20168) * C19903 +
            (C20171 - C20170 + C20173 - C20172) * C19899 +
            (C48551 * C3590 - C47223 * C3587 + C48222 * C3591 -
             C47204 * C3588) *
                C19904 +
            (C48551 * C3596 - C47223 * C3593 + C48222 * C3597 -
             C47204 * C3594) *
                C48622) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 +
             (C11739 - C11738 + C11741 - C11740) * C4869 +
             (C11743 - C11742 + C11745 - C11744) * C48416) *
                C7642 +
            (C11598 * C4868 + C11599 * C48574 +
             (C11747 - C11746 + C11749 - C11748) * C4869 +
             (C11751 - C11750 + C11753 - C11752) * C48416) *
                C48606) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 +
             (C11738 - C11739 + C11740 - C11741) * C4869 +
             (C11742 - C11743 + C11744 - C11745) * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 +
             (C11746 - C11747 + C11748 - C11749) * C4869 +
             (C11750 - C11751 + C11752 - C11753) * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C12678 - C12679 + C12680 - C12681) * C4869 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C4868 +
             (C11205 - C11204 + C11207 - C11206) * C48574 +
             (C12461 - C12460 + C12463 - C12462) * C4869 +
             (C12465 - C12464 + C12467 - C12466) * C48416) *
                C7641 +
            ((C11209 - C11208 + C11211 - C11210) * C4868 +
             (C11213 - C11212 + C11215 - C11214) * C48574 +
             (C12469 - C12468 + C12471 - C12470) * C4869 +
             (C12473 - C12472 + C12475 - C12474) * C48416) *
                C7642 +
            ((C11217 - C11216 + C11219 - C11218) * C4868 +
             (C11221 - C11220 + C11223 - C11222) * C48574 +
             (C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C4869 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                C4869 +
            (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                C4868 +
            (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                C48574 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                C4869 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C19901 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C19897 +
            (C12670 - C12671 + C12672 - C12673) * C19902 +
            (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48622) *
               C48318 * C48300 * C447 +
           ((C11177 - C11176 + C11179 - C11178) * C19901 +
            (C11181 - C11180 + C11183 - C11182) * C19897 + C13263 * C19902 +
            C13264 * C19898 + C19250 * C19903 + C19251 * C19899 +
            (C19240 - C19241 + C19242 - C19243) * C19904 +
            (C19244 - C19245 + C19246 - C19247) * C48622) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C19901 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C19897 +
            (C12678 - C12679 + C12680 - C12681) * C19902 +
            (C12682 - C12683 + C12684 - C12685) * C19898 +
            (C18690 - C18691 + C18692 - C18693) * C19903 +
            (C18694 - C18695 + C18696 - C18697) * C19899 +
            (C20166 - C20167 + C20168 - C20169) * C19904 +
            (C20170 - C20171 + C20172 - C20173) * C48622) *
               C48318 * C48300 * C447 +
           ((C11201 - C11200 + C11203 - C11202) * C19901 +
            (C11205 - C11204 + C11207 - C11206) * C19897 +
            (C12461 - C12460 + C12463 - C12462) * C19902 +
            (C12465 - C12464 + C12467 - C12466) * C19898 +
            (C18489 - C18488 + C18491 - C18490) * C19903 +
            (C18493 - C18492 + C18495 - C18494) * C19899 +
            (C48551 * C3164 - C47223 * C3161 + C48222 * C3165 -
             C47204 * C3162) *
                C19904 +
            (C48551 * C3170 - C47223 * C3167 + C48222 * C3171 -
             C47204 * C3168) *
                C48622) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C4868 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48574 +
            (C12670 - C12671 + C12672 - C12673) * C4869 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C7641 +
           ((C11176 - C11177 + C11178 - C11179) * C4868 +
            (C11180 - C11181 + C11182 - C11183) * C48574 +
            (C11739 - C11738 + C11741 - C11740) * C4869 +
            (C11743 - C11742 + C11745 - C11744) * C48416) *
               C7642 +
           C13038 * C48606) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C4868 +
            (C11181 - C11180 + C11183 - C11182) * C48574 +
            (C11738 - C11739 + C11740 - C11741) * C4869 +
            (C11742 - C11743 + C11744 - C11745) * C48416) *
               C7641 +
           ((C11185 - C11184 + C11187 - C11186) * C4868 +
            (C11189 - C11188 + C11191 - C11190) * C48574 +
            (C11746 - C11747 + C11748 - C11749) * C4869 +
            (C11750 - C11751 + C11752 - C11753) * C48416) *
               C7642 +
           ((C11193 - C11192 + C11195 - C11194) * C4868 +
            (C11197 - C11196 + C11199 - C11198) * C48574 +
            (C11754 - C11755 + C11756 - C11757) * C4869 +
            (C11758 - C11759 + C11760 - C11761) * C48416) *
               C48606) *
              C48300 * C514 +
          (C13038 * C7641 +
           (C11600 * C4868 + C11601 * C48574 +
            (C11755 - C11754 + C11757 - C11756) * C4869 +
            (C11759 - C11758 + C11761 - C11760) * C48416) *
               C7642 +
           ((C11591 - C11590 + C11593 - C11592) * C4868 +
            (C11595 - C11594 + C11597 - C11596) * C48574 +
            (C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
             C47204 * C9114) *
                C4869 +
            (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
             C47204 * C9118) *
                C48416) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
               C4868 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
               C48574 +
           (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
               C4869 +
           (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
               C48416) *
              C48318 * C48300 * C513 +
          ((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
               C4868 +
           (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
               C48574 +
           (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
               C4869 +
           (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
               C48416) *
              C48318 * C48300 * C514 +
          ((C4250 - C4249 + C4252 - C4251 + C4254 - C4253 + C4256 - C4255) *
               C4868 +
           (C4258 - C4257 + C4260 - C4259 + C4262 - C4261 + C4264 - C4263) *
               C48574 +
           (C3718 * C1369 - C3724 * C1365 + C3719 * C1370 - C3725 * C1366 +
            C3720 * C1371 - C3726 * C1367 + C48610 * C1375 - C3727 * C1368) *
               C4869 +
           (C3718 * C1377 - C3724 * C1372 + C3719 * C1378 - C3725 * C1373 +
            C3720 * C1379 - C3726 * C1374 + C48610 * C1380 - C3727 * C1376) *
               C48416) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
               C19901 +
           (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
               C19897 +
           (C12670 - C12671 + C12672 - C12673) * C19902 +
           (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
           C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
           (C19795 - C19794 + C19797 - C19796) * C48622) *
              C48318 * C48300 * C513 +
          ((C11177 - C11176 + C11179 - C11178) * C19901 +
           (C11181 - C11180 + C11183 - C11182) * C19897 + C13263 * C19902 +
           C13264 * C19898 + C19250 * C19903 + C19251 * C19899 +
           (C19240 - C19241 + C19242 - C19243) * C19904 +
           (C19244 - C19245 + C19246 - C19247) * C48622) *
              C48318 * C48300 * C514 +
          (C11598 * C19901 + C11599 * C19897 + C13033 * C19902 +
           C13034 * C19898 + (C13254 - C13253 + C13256 - C13255) * C19903 +
           (C13258 - C13257 + C13260 - C13259) * C19899 +
           (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
            C47204 * C10055) *
               C19904 +
           (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
            C47204 * C10059) *
               C48622) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
             C13262 * C48416) *
                C7642 +
            C13038 * C48606) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            (C13263 * C4868 + C13264 * C48574 +
             (C13241 - C13242 + C13243 - C13244) * C4869 +
             (C13245 - C13246 + C13247 - C13248) * C48416) *
                C7642 +
            (C13265 * C4868 + C13266 * C48574 +
             (C13253 - C13254 + C13255 - C13256) * C4869 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C48606) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 + C13263 * C4869 +
             C13264 * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 + C13265 * C4869 +
             C13266 * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C339 +
           ((C13261 * C4868 + C13262 * C48574 +
             (C13242 - C13241 + C13244 - C13243) * C4869 +
             (C13246 - C13245 + C13248 - C13247) * C48416) *
                C7641 +
            (C13033 * C4868 + C13034 * C48574 +
             (C13254 - C13253 + C13256 - C13255) * C4869 +
             (C13258 - C13257 + C13260 - C13259) * C48416) *
                C7642 +
            ((C11755 - C11754 + C11757 - C11756) * C4868 +
             (C11759 - C11758 + C11761 - C11760) * C48574 +
             (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
              C47204 * C9880) *
                 C4869 +
             (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
              C47204 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C339 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C447 +
          (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C339 +
           ((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                C4868 +
            (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                C48574 +
            (C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
             C3720 * C2266 - C3726 * C2260 + C48610 * C2545 - C3727 * C2544) *
                C4869 +
            (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
             C3720 * C2278 - C3726 * C2269 + C48610 * C2547 - C3727 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C19901 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C19897 +
            (C12670 - C12671 + C12672 - C12673) * C19902 +
            (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48622) *
               C48318 * C339 +
           ((C12671 - C12670 + C12673 - C12672) * C19901 +
            (C12675 - C12674 + C12677 - C12676) * C19897 +
            (C13801 - C13802 + C13803 - C13804) * C19902 +
            (C13805 - C13806 + C13807 - C13808) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C47223 * C3586 - C48551 * C3589 + C47204 * C3587 -
             C48222 * C3590) *
                C19904 +
            (C47223 * C3592 - C48551 * C3595 + C47204 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C447 +
          (((C11177 - C11176 + C11179 - C11178) * C19901 +
            (C11181 - C11180 + C11183 - C11182) * C19897 + C13263 * C19902 +
            C13264 * C19898 + C19250 * C19903 + C19251 * C19899 +
            (C19240 - C19241 + C19242 - C19243) * C19904 +
            (C19244 - C19245 + C19246 - C19247) * C48622) *
               C48318 * C339 +
           (C13261 * C19901 + C13262 * C19897 + C19248 * C19902 +
            C19249 * C19898 + (C19241 - C19240 + C19243 - C19242) * C19903 +
            (C19245 - C19244 + C19247 - C19246) * C19899 +
            (C48551 * C10927 - C47223 * C10925 + C48222 * C17570 -
             C47204 * C17569) *
                C19904 +
            (C48551 * C10931 - C47223 * C10928 + C48222 * C17572 -
             C47204 * C17571) *
                C48622) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
             C13262 * C48416) *
                C7642 +
            C13038 * C48606) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            (C13263 * C4868 + C13264 * C48574 +
             (C13241 - C13242 + C13243 - C13244) * C4869 +
             (C13245 - C13246 + C13247 - C13248) * C48416) *
                C7642 +
            (C13265 * C4868 + C13266 * C48574 +
             (C13253 - C13254 + C13255 - C13256) * C4869 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C12678 - C12679 + C12680 - C12681) * C4869 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C721 +
           (((C12679 - C12678 + C12681 - C12680) * C4868 +
             (C12683 - C12682 + C12685 - C12684) * C48574 +
             (C48551 * C876 - C47223 * C871 + C48222 * C877 - C47204 * C872) *
                 C4869 +
             (C48551 * C886 - C47223 * C881 + C48222 * C887 - C47204 * C882) *
                 C48416) *
                C7641 +
            ((C12461 - C12460 + C12463 - C12462) * C4868 +
             (C12465 - C12464 + C12467 - C12466) * C48574 +
             (C48551 * C2265 - C47223 * C2259 + C48222 * C2266 -
              C47204 * C2260) *
                 C4869 +
             (C48551 * C2277 - C47223 * C2268 + C48222 * C2278 -
              C47204 * C2269) *
                 C48416) *
                C7642 +
            ((C12469 - C12468 + C12471 - C12470) * C4868 +
             (C12473 - C12472 + C12475 - C12474) * C48574 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C4869 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C721 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                C4869 +
            (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                C48416) *
               C48318 * C721 +
           ((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                C4868 +
            (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                C48574 +
            (C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
             C3720 * C878 - C3726 * C873 + C48610 * C879 - C3727 * C874) *
                C4869 +
            (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
             C3720 * C888 - C3726 * C883 + C48610 * C889 - C3727 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C19901 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C19897 +
            (C12670 - C12671 + C12672 - C12673) * C19902 +
            (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48622) *
               C48318 * C721 +
           ((C12671 - C12670 + C12673 - C12672) * C19901 +
            (C12675 - C12674 + C12677 - C12676) * C19897 +
            (C13801 - C13802 + C13803 - C13804) * C19902 +
            (C13805 - C13806 + C13807 - C13808) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C47223 * C3586 - C48551 * C3589 + C47204 * C3587 -
             C48222 * C3590) *
                C19904 +
            (C47223 * C3592 - C48551 * C3595 + C47204 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C19901 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C19897 +
            (C12678 - C12679 + C12680 - C12681) * C19902 +
            (C12682 - C12683 + C12684 - C12685) * C19898 +
            (C18690 - C18691 + C18692 - C18693) * C19903 +
            (C18694 - C18695 + C18696 - C18697) * C19899 +
            (C20166 - C20167 + C20168 - C20169) * C19904 +
            (C20170 - C20171 + C20172 - C20173) * C48622) *
               C48318 * C721 +
           ((C12679 - C12678 + C12681 - C12680) * C19901 +
            (C12683 - C12682 + C12685 - C12684) * C19897 +
            (C18691 - C18690 + C18693 - C18692) * C19902 +
            (C18695 - C18694 + C18697 - C18696) * C19898 +
            (C20167 - C20166 + C20169 - C20168) * C19903 +
            (C20171 - C20170 + C20173 - C20172) * C19899 +
            (C48551 * C3590 - C47223 * C3587 + C48222 * C3591 -
             C47204 * C3588) *
                C19904 +
            (C48551 * C3596 - C47223 * C3593 + C48222 * C3597 -
             C47204 * C3594) *
                C48622) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
             C13262 * C48416) *
                C7642 +
            C13038 * C48606) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            (C13263 * C4868 + C13264 * C48574 +
             (C13241 - C13242 + C13243 - C13244) * C4869 +
             (C13245 - C13246 + C13247 - C13248) * C48416) *
                C7642 +
            (C13265 * C4868 + C13266 * C48574 +
             (C13253 - C13254 + C13255 - C13256) * C4869 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C48606) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 + C13263 * C4869 +
             C13264 * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 + C13265 * C4869 +
             C13266 * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C721 +
           ((C13261 * C4868 + C13262 * C48574 +
             (C13242 - C13241 + C13244 - C13243) * C4869 +
             (C13246 - C13245 + C13248 - C13247) * C48416) *
                C7641 +
            (C13033 * C4868 + C13034 * C48574 +
             (C13254 - C13253 + C13256 - C13255) * C4869 +
             (C13258 - C13257 + C13260 - C13259) * C48416) *
                C7642 +
            ((C11755 - C11754 + C11757 - C11756) * C4868 +
             (C11759 - C11758 + C11761 - C11760) * C48574 +
             (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
              C47204 * C9880) *
                 C4869 +
             (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
              C47204 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C721 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C229 +
          (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C721 +
           ((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                C4868 +
            (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                C48574 +
            (C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
             C3720 * C2266 - C3726 * C2260 + C48610 * C2545 - C3727 * C2544) *
                C4869 +
            (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
             C3720 * C2278 - C3726 * C2269 + C48610 * C2547 - C3727 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C19901 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C19897 +
            (C12670 - C12671 + C12672 - C12673) * C19902 +
            (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48622) *
               C48318 * C721 +
           ((C12671 - C12670 + C12673 - C12672) * C19901 +
            (C12675 - C12674 + C12677 - C12676) * C19897 +
            (C13801 - C13802 + C13803 - C13804) * C19902 +
            (C13805 - C13806 + C13807 - C13808) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C47223 * C3586 - C48551 * C3589 + C47204 * C3587 -
             C48222 * C3590) *
                C19904 +
            (C47223 * C3592 - C48551 * C3595 + C47204 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C229 +
          (((C11177 - C11176 + C11179 - C11178) * C19901 +
            (C11181 - C11180 + C11183 - C11182) * C19897 + C13263 * C19902 +
            C13264 * C19898 + C19250 * C19903 + C19251 * C19899 +
            (C19240 - C19241 + C19242 - C19243) * C19904 +
            (C19244 - C19245 + C19246 - C19247) * C48622) *
               C48318 * C721 +
           (C13261 * C19901 + C13262 * C19897 + C19248 * C19902 +
            C19249 * C19898 + (C19241 - C19240 + C19243 - C19242) * C19903 +
            (C19245 - C19244 + C19247 - C19246) * C19899 +
            (C48551 * C10927 - C47223 * C10925 + C48222 * C17570 -
             C47204 * C17569) *
                C19904 +
            (C48551 * C10931 - C47223 * C10928 + C48222 * C17572 -
             C47204 * C17571) *
                C48622) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C4868 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48574 +
            (C12670 - C12671 + C12672 - C12673) * C4869 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C7641 +
           ((C11176 - C11177 + C11178 - C11179) * C4868 +
            (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
            C13262 * C48416) *
               C7642 +
           C13038 * C48606) *
              C867 +
          (((C12671 - C12670 + C12673 - C12672) * C4868 +
            (C12675 - C12674 + C12677 - C12676) * C48574 +
            (C13801 - C13802 + C13803 - C13804) * C4869 +
            (C13805 - C13806 + C13807 - C13808) * C48416) *
               C7641 +
           (C13263 * C4868 + C13264 * C48574 +
            (C13241 - C13242 + C13243 - C13244) * C4869 +
            (C13245 - C13246 + C13247 - C13248) * C48416) *
               C7642 +
           (C13265 * C4868 + C13266 * C48574 +
            (C13253 - C13254 + C13255 - C13256) * C4869 +
            (C13257 - C13258 + C13259 - C13260) * C48416) *
               C48606) *
              C868 +
          (((C13802 - C13801 + C13804 - C13803) * C4868 +
            (C13806 - C13805 + C13808 - C13807) * C48574 +
            (C48551 * C2698 - C47223 * C2694 + C48222 * C2699 -
             C47204 * C2695) *
                C4869 +
            (C48551 * C2706 - C47223 * C2701 + C48222 * C2707 -
             C47204 * C2702) *
                C48416) *
               C7641 +
           ((C13242 - C13241 + C13244 - C13243) * C4868 +
            (C13246 - C13245 + C13248 - C13247) * C48574 +
            (C48551 * C3163 - C47223 * C3160 + C48222 * C3164 -
             C47204 * C3161) *
                C4869 +
            (C48551 * C3169 - C47223 * C3166 + C48222 * C3170 -
             C47204 * C3167) *
                C48416) *
               C7642 +
           ((C13254 - C13253 + C13256 - C13255) * C4868 +
            (C13258 - C13257 + C13260 - C13259) * C48574 +
            (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
             C47204 * C10055) *
                C4869 +
            (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
             C47204 * C10059) *
                C48416) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
               C4868 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
               C48574 +
           (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
               C4869 +
           (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
               C48416) *
              C48318 * C867 +
          ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
               C4868 +
           (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
               C48574 +
           (C5879 - C5880 + C5881 - C5882 + C5883 - C5884 + C5885 - C5886) *
               C4869 +
           (C5887 - C5888 + C5889 - C5890 + C5891 - C5892 + C5893 - C5894) *
               C48416) *
              C48318 * C868 +
          ((C5880 - C5879 + C5882 - C5881 + C5884 - C5883 + C5886 - C5885) *
               C4868 +
           (C5888 - C5887 + C5890 - C5889 + C5892 - C5891 + C5894 - C5893) *
               C48574 +
           (C3718 * C2698 - C3724 * C2694 + C3719 * C2699 - C3725 * C2695 +
            C3720 * C2700 - C3726 * C2696 + C48610 * C2704 - C3727 * C2697) *
               C4869 +
           (C3718 * C2706 - C3724 * C2701 + C3719 * C2707 - C3725 * C2702 +
            C3720 * C2708 - C3726 * C2703 + C48610 * C2709 - C3727 * C2705) *
               C48416) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
               C19901 +
           (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
               C19897 +
           (C12670 - C12671 + C12672 - C12673) * C19902 +
           (C12674 - C12675 + C12676 - C12677) * C19898 + C19798 * C19903 +
           C19799 * C19899 + C20902 * C19904 + C20903 * C48622) *
              C48318 * C867 +
          ((C12671 - C12670 + C12673 - C12672) * C19901 +
           (C12675 - C12674 + C12677 - C12676) * C19897 +
           (C13801 - C13802 + C13803 - C13804) * C19902 +
           (C13805 - C13806 + C13807 - C13808) * C19898 +
           (C19790 - C19791 + C19792 - C19793) * C19903 +
           (C19794 - C19795 + C19796 - C19797) * C19899 +
           (C20894 - C20895 + C20896 - C20897) * C19904 +
           (C20898 - C20899 + C20900 - C20901) * C48622) *
              C48318 * C868 +
          (C19798 * C19901 + C19799 * C19897 + C20902 * C19902 +
           C20903 * C19898 + (C20895 - C20894 + C20897 - C20896) * C19903 +
           (C20899 - C20898 + C20901 - C20900) * C19899 +
           (C48551 * C17657 - C47223 * C17655 + C48222 * C17659 -
            C47204 * C17656) *
               C19904 +
           (C48551 * C17661 - C47223 * C17658 + C48222 * C17662 -
            C47204 * C17660) *
               C48622) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[126] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C118 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48329) *
                        C48641 +
                    ((C1000 * C239 - C1006 * C233 + C1001 * C240 -
                      C1007 * C234 + C48593 * C241 - C1008 * C235) *
                         C118 +
                     (C1000 * C251 - C1006 * C244 + C1001 * C252 -
                      C1007 * C245 + C48593 * C253 - C1008 * C246) *
                         C48329) *
                        C48629 +
                    ((C1000 * C522 - C1006 * C517 + C1001 * C523 -
                      C1007 * C518 + C48593 * C524 - C1008 * C519) *
                         C118 +
                     (C1000 * C532 - C1006 * C527 + C1001 * C533 -
                      C1007 * C528 + C48593 * C534 - C1008 * C529) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                      C1001 * C128 + C1008 * C122 - C48593 * C129) *
                         C118 +
                     (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                      C1001 * C142 + C1008 * C134 - C48593 * C143) *
                         C48329) *
                        C48641 +
                    ((C1006 * C234 - C1000 * C240 + C1007 * C235 -
                      C1001 * C241 + C1008 * C236 - C48593 * C242) *
                         C118 +
                     (C1006 * C245 - C1000 * C252 + C1007 * C246 -
                      C1001 * C253 + C1008 * C247 - C48593 * C254) *
                         C48329) *
                        C48629 +
                    ((C1006 * C518 - C1000 * C523 + C1007 * C519 -
                      C1001 * C524 + C1008 * C520 - C48593 * C525) *
                         C118 +
                     (C1006 * C528 - C1000 * C533 + C1007 * C529 -
                      C1001 * C534 + C1008 * C530 - C48593 * C535) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C1000 * C128 - C1006 * C121 + C1001 * C129 -
                      C1007 * C122 + C48593 * C130 - C1008 * C123) *
                         C118 +
                     (C1000 * C142 - C1006 * C133 + C1001 * C143 -
                      C1007 * C134 + C48593 * C144 - C1008 * C135) *
                         C48329) *
                        C48641 +
                    ((C1000 * C241 - C1006 * C235 + C1001 * C242 -
                      C1007 * C236 + C48593 * C243 - C1008 * C237) *
                         C118 +
                     (C1000 * C253 - C1006 * C246 + C1001 * C254 -
                      C1007 * C247 + C48593 * C255 - C1008 * C248) *
                         C48329) *
                        C48629 +
                    ((C1000 * C524 - C1006 * C519 + C1001 * C525 -
                      C1007 * C520 + C48593 * C526 - C1008 * C521) *
                         C118 +
                     (C1000 * C534 - C1006 * C529 + C1001 * C535 -
                      C1007 * C530 + C48593 * C536 - C1008 * C531) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                     C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                     C105 * C130 - C117 * C123) *
                        C118 +
                    (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                     C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                     C105 * C144 - C117 * C135) *
                        C48329) *
                       C48318 * C48300 * C48283 * C110 +
                   ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                     C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                     C117 * C124 - C105 * C136) *
                        C118 +
                    (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                     C117 * C137 - C105 * C145) *
                        C48329) *
                       C48318 * C48300 * C48283 * C111 +
                   ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                     C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                     C105 * C138 - C117 * C125) *
                        C118 +
                    (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                     C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                     C105 * C146 - C117 * C139) *
                        C48329) *
                       C48318 * C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C48638 * C126 - C7644 * C119 + C48625 * C127 -
                      C7645 * C120 + C48593 * C128 - C7646 * C121) *
                         C118 +
                     (C48638 * C140 - C7644 * C131 + C48625 * C141 -
                      C7645 * C132 + C48593 * C142 - C7646 * C133) *
                         C48329) *
                        C7641 +
                    ((C48638 * C239 - C7644 * C233 + C48625 * C240 -
                      C7645 * C234 + C48593 * C241 - C7646 * C235) *
                         C118 +
                     (C48638 * C251 - C7644 * C244 + C48625 * C252 -
                      C7645 * C245 + C48593 * C253 - C7646 * C246) *
                         C48329) *
                        C7642 +
                    ((C48638 * C522 - C7644 * C517 + C48625 * C523 -
                      C7645 * C518 + C48593 * C524 - C7646 * C519) *
                         C118 +
                     (C48638 * C532 - C7644 * C527 + C48625 * C533 -
                      C7645 * C528 + C48593 * C534 - C7646 * C529) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C7644 * C120 - C48638 * C127 + C7645 * C121 -
                      C48625 * C128 + C7646 * C122 - C48593 * C129) *
                         C118 +
                     (C7644 * C132 - C48638 * C141 + C7645 * C133 -
                      C48625 * C142 + C7646 * C134 - C48593 * C143) *
                         C48329) *
                        C7641 +
                    ((C7644 * C234 - C48638 * C240 + C7645 * C235 -
                      C48625 * C241 + C7646 * C236 - C48593 * C242) *
                         C118 +
                     (C7644 * C245 - C48638 * C252 + C7645 * C246 -
                      C48625 * C253 + C7646 * C247 - C48593 * C254) *
                         C48329) *
                        C7642 +
                    ((C7644 * C518 - C48638 * C523 + C7645 * C519 -
                      C48625 * C524 + C7646 * C520 - C48593 * C525) *
                         C118 +
                     (C7644 * C528 - C48638 * C533 + C7645 * C529 -
                      C48625 * C534 + C7646 * C530 - C48593 * C535) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C48638 * C128 - C7644 * C121 + C48625 * C129 -
                      C7645 * C122 + C48593 * C130 - C7646 * C123) *
                         C118 +
                     (C48638 * C142 - C7644 * C133 + C48625 * C143 -
                      C7645 * C134 + C48593 * C144 - C7646 * C135) *
                         C48329) *
                        C7641 +
                    ((C48638 * C241 - C7644 * C235 + C48625 * C242 -
                      C7645 * C236 + C48593 * C243 - C7646 * C237) *
                         C118 +
                     (C48638 * C253 - C7644 * C246 + C48625 * C254 -
                      C7645 * C247 + C48593 * C255 - C7646 * C248) *
                         C48329) *
                        C7642 +
                    ((C48638 * C524 - C7644 * C519 + C48625 * C525 -
                      C7645 * C520 + C48593 * C526 - C7646 * C521) *
                         C118 +
                     (C48638 * C534 - C7644 * C529 + C48625 * C535 -
                      C7645 * C530 + C48593 * C536 - C7646 * C531) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C118 +
                     (C48212 * C140 - C8908 * C131) * C48329) *
                        C8903 +
                    ((C48212 * C239 - C8908 * C233) * C118 +
                     (C48212 * C251 - C8908 * C244) * C48329) *
                        C8904 +
                    ((C48212 * C522 - C8908 * C517) * C118 +
                     (C48212 * C532 - C8908 * C527) * C48329) *
                        C8905 +
                    ((C48212 * C1159 - C8908 * C1155) * C118 +
                     (C48212 * C1167 - C8908 * C1162) * C48329) *
                        C8906 +
                    ((C48212 * C1640 - C8908 * C1637) * C118 +
                     (C48212 * C1646 - C8908 * C1643) * C48329) *
                        C8907) *
                       C48300 * C48283 * C110 +
                   (((C8908 * C120 - C48212 * C127) * C118 +
                     (C8908 * C132 - C48212 * C141) * C48329) *
                        C8903 +
                    ((C8908 * C234 - C48212 * C240) * C118 +
                     (C8908 * C245 - C48212 * C252) * C48329) *
                        C8904 +
                    ((C8908 * C518 - C48212 * C523) * C118 +
                     (C8908 * C528 - C48212 * C533) * C48329) *
                        C8905 +
                    ((C8908 * C1156 - C48212 * C1160) * C118 +
                     (C8908 * C1163 - C48212 * C1168) * C48329) *
                        C8906 +
                    ((C8908 * C1638 - C48212 * C1641) * C118 +
                     (C8908 * C1644 - C48212 * C1647) * C48329) *
                        C8907) *
                       C48300 * C48283 * C111 +
                   (((C48212 * C128 - C8908 * C121) * C118 +
                     (C48212 * C142 - C8908 * C133) * C48329) *
                        C8903 +
                    ((C48212 * C241 - C8908 * C235) * C118 +
                     (C48212 * C253 - C8908 * C246) * C48329) *
                        C8904 +
                    ((C48212 * C524 - C8908 * C519) * C118 +
                     (C48212 * C534 - C8908 * C529) * C48329) *
                        C8905 +
                    ((C48212 * C1161 - C8908 * C1157) * C118 +
                     (C48212 * C1169 - C8908 * C1164) * C48329) *
                        C8906 +
                    ((C48212 * C1642 - C8908 * C1639) * C118 +
                     (C48212 * C1648 - C8908 * C1645) * C48329) *
                        C8907) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C48638 * C126 - C7644 * C119 + C48625 * C127 -
                     C7645 * C120 + C48593 * C128 - C7646 * C121) *
                        C15017 +
                    (C48638 * C140 - C7644 * C131 + C48625 * C141 -
                     C7645 * C132 + C48593 * C142 - C7646 * C133) *
                        C15014 +
                    (C48638 * C347 - C7644 * C341 + C48625 * C348 -
                     C7645 * C342 + C48593 * C349 - C7646 * C343) *
                        C15018 +
                    (C48638 * C359 - C7644 * C352 + C48625 * C360 -
                     C7645 * C353 + C48593 * C361 - C7646 * C354) *
                        C15015 +
                    (C48638 * C875 - C7644 * C870 + C48625 * C876 -
                     C7645 * C871 + C48593 * C877 - C7646 * C872) *
                        C15019 +
                    (C48638 * C885 - C7644 * C880 + C48625 * C886 -
                     C7645 * C881 + C48593 * C887 - C7646 * C882) *
                        C48609) *
                       C48318 * C48300 * C48283 * C110 +
                   ((C7644 * C120 - C48638 * C127 + C7645 * C121 -
                     C48625 * C128 + C7646 * C122 - C48593 * C129) *
                        C15017 +
                    (C7644 * C132 - C48638 * C141 + C7645 * C133 -
                     C48625 * C142 + C7646 * C134 - C48593 * C143) *
                        C15014 +
                    (C7644 * C342 - C48638 * C348 + C7645 * C343 -
                     C48625 * C349 + C7646 * C344 - C48593 * C350) *
                        C15018 +
                    (C7644 * C353 - C48638 * C360 + C7645 * C354 -
                     C48625 * C361 + C7646 * C355 - C48593 * C362) *
                        C15015 +
                    (C7644 * C871 - C48638 * C876 + C7645 * C872 -
                     C48625 * C877 + C7646 * C873 - C48593 * C878) *
                        C15019 +
                    (C7644 * C881 - C48638 * C886 + C7645 * C882 -
                     C48625 * C887 + C7646 * C883 - C48593 * C888) *
                        C48609) *
                       C48318 * C48300 * C48283 * C111 +
                   ((C48638 * C128 - C7644 * C121 + C48625 * C129 -
                     C7645 * C122 + C48593 * C130 - C7646 * C123) *
                        C15017 +
                    (C48638 * C142 - C7644 * C133 + C48625 * C143 -
                     C7645 * C134 + C48593 * C144 - C7646 * C135) *
                        C15014 +
                    (C48638 * C349 - C7644 * C343 + C48625 * C350 -
                     C7645 * C344 + C48593 * C351 - C7646 * C345) *
                        C15018 +
                    (C48638 * C361 - C7644 * C354 + C48625 * C362 -
                     C7645 * C355 + C48593 * C363 - C7646 * C356) *
                        C15015 +
                    (C48638 * C877 - C7644 * C872 + C48625 * C878 -
                     C7645 * C873 + C48593 * C879 - C7646 * C874) *
                        C15019 +
                    (C48638 * C887 - C7644 * C882 + C48625 * C888 -
                     C7645 * C883 + C48593 * C889 - C7646 * C884) *
                        C48609) *
                       C48318 * C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C15017 +
                     (C48212 * C140 - C8908 * C131) * C15014 +
                     (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
                     C10934 * C15019 + C10935 * C48609) *
                        C48641 +
                    ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
                     C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
                     C10507 * C48609) *
                        C48629 +
                    (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
                     C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C8908 * C120 - C48212 * C127) * C15017 +
                     (C8908 * C132 - C48212 * C141) * C15014 +
                     (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
                     (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                        C48641 +
                    ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
                     (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
                     (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                        C48629 +
                    ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
                     (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
                     (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C48212 * C128 - C8908 * C121) * C15017 +
                     (C48212 * C142 - C8908 * C133) * C15014 +
                     (C48212 * C349 - C8908 * C343) * C15018 +
                     (C48212 * C361 - C8908 * C354) * C15015 +
                     (C48212 * C877 - C8908 * C872) * C15019 +
                     (C48212 * C887 - C8908 * C882) * C48609) *
                        C48641 +
                    ((C48212 * C241 - C8908 * C235) * C15017 +
                     (C48212 * C253 - C8908 * C246) * C15014 +
                     (C48212 * C626 - C8908 * C621) * C15018 +
                     (C48212 * C636 - C8908 * C631) * C15015 +
                     (C48212 * C2266 - C8908 * C2260) * C15019 +
                     (C48212 * C2278 - C8908 * C2269) * C48609) *
                        C48629 +
                    ((C48212 * C524 - C8908 * C519) * C15017 +
                     (C48212 * C534 - C8908 * C529) * C15014 +
                     (C48212 * C1371 - C8908 * C1367) * C15018 +
                     (C48212 * C1379 - C8908 * C1374) * C15015 +
                     (C48212 * C2272 - C8908 * C2263) * C15019 +
                     (C48212 * C2281 - C8908 * C2275) * C48609) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 - C1001 * C1160 +
              C1008 * C1157 - C48593 * C1161) *
                 C118 +
             (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 - C1001 * C1168 +
              C1008 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                C48641 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                C48629 +
            ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 - C1007 * C1157 +
              C48593 * C1165 - C1008 * C1158) *
                 C118 +
             (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 - C1007 * C1164 +
              C48593 * C1170 - C1008 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C48300 * C229 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C48300 * C229 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48329) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C229 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C229 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C48638 * C347 - C7644 * C341 + C48625 * C348 - C7645 * C342 +
             C48593 * C349 - C7646 * C343) *
                C15018 +
            (C48638 * C359 - C7644 * C352 + C48625 * C360 - C7645 * C353 +
             C48593 * C361 - C7646 * C354) *
                C15015 +
            (C48638 * C875 - C7644 * C870 + C48625 * C876 - C7645 * C871 +
             C48593 * C877 - C7646 * C872) *
                C15019 +
            (C48638 * C885 - C7644 * C880 + C48625 * C886 - C7645 * C881 +
             C48593 * C887 - C7646 * C882) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C7644 * C2258 - C48638 * C2264 + C7645 * C2259 - C48625 * C2265 +
             C7646 * C2260 - C48593 * C2266) *
                C15019 +
            (C7644 * C2267 - C48638 * C2276 + C7645 * C2268 - C48625 * C2277 +
             C7646 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C7644 * C342 - C48638 * C348 + C7645 * C343 - C48625 * C349 +
             C7646 * C344 - C48593 * C350) *
                C15018 +
            (C7644 * C353 - C48638 * C360 + C7645 * C354 - C48625 * C361 +
             C7646 * C355 - C48593 * C362) *
                C15015 +
            (C7644 * C871 - C48638 * C876 + C7645 * C872 - C48625 * C877 +
             C7646 * C873 - C48593 * C878) *
                C15019 +
            (C7644 * C881 - C48638 * C886 + C7645 * C882 - C48625 * C887 +
             C7646 * C883 - C48593 * C888) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C15017 +
            (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C15014 +
            (C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
             C48593 * C627 - C7646 * C622) *
                C15018 +
            (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
             C48593 * C637 - C7646 * C632) *
                C15015 +
            (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
             C48593 * C2545 - C7646 * C2544) *
                C15019 +
            (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
             C48593 * C2547 - C7646 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
             C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9017 - C9016) * C15017 + (C9019 - C9018) * C15014 +
             (C9894 - C9893) * C15018 + (C9896 - C9895) * C15015 +
             (C9898 - C9897) * C15019 + (C9900 - C9899) * C48609) *
                C48641 +
            ((C9021 - C9020) * C15017 + (C9023 - C9022) * C15014 +
             (C9902 - C9901) * C15018 + (C9904 - C9903) * C15015 +
             (C9906 - C9905) * C15019 + (C9908 - C9907) * C48609) *
                C48629 +
            ((C9025 - C9024) * C15017 + (C9027 - C9026) * C15014 +
             (C14038 - C14037) * C15018 + (C14040 - C14039) * C15015 +
             (C48212 * C9881 - C8908 * C9880) * C15019 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C339 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
              C1008 * C621 - C48593 * C626) *
                 C118 +
             (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
              C1008 * C631 - C48593 * C636) *
                 C48329) *
                C48629 +
            ((C1006 * C1365 - C1000 * C1369 + C1007 * C1366 - C1001 * C1370 +
              C1008 * C1367 - C48593 * C1371) *
                 C118 +
             (C1006 * C1372 - C1000 * C1377 + C1007 * C1373 - C1001 * C1378 +
              C1008 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C339 +
           (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
              C48593 * C350 - C1008 * C344) *
                 C118 +
             (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
              C48593 * C362 - C1008 * C355) *
                 C48329) *
                C48641 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48593 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48593 * C637 - C1008 * C632) *
                 C48329) *
                C48629 +
            ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C118 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C339 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48329) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C7644 * C619 - C48638 * C624 + C7645 * C620 - C48625 * C625 +
              C7646 * C621 - C48593 * C626) *
                 C118 +
             (C7644 * C629 - C48638 * C634 + C7645 * C630 - C48625 * C635 +
              C7646 * C631 - C48593 * C636) *
                 C48329) *
                C7642 +
            ((C7644 * C1365 - C48638 * C1369 + C7645 * C1366 - C48625 * C1370 +
              C7646 * C1367 - C48593 * C1371) *
                 C118 +
             (C7644 * C1372 - C48638 * C1377 + C7645 * C1373 - C48625 * C1378 +
              C7646 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C339 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C8908 * C619 - C48212 * C624) * C118 +
             (C8908 * C629 - C48212 * C634) * C48329) *
                C8904 +
            ((C8908 * C1365 - C48212 * C1369) * C118 +
             (C8908 * C1372 - C48212 * C1377) * C48329) *
                C8905 +
            ((C8908 * C1820 - C48212 * C1823) * C118 +
             (C8908 * C1826 - C48212 * C1829) * C48329) *
                C8906 +
            ((C8908 * C9113 - C48212 * C9115) * C118 +
             (C8908 * C9116 - C48212 * C9119) * C48329) *
                C8907) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C339 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C339 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C15018 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C15015 +
            (C15349 - C15350 + C15351 - C15352 + C15353 - C15354) * C15019 +
            (C15355 - C15356 + C15357 - C15358 + C15359 - C15360) * C48609) *
               C48318 * C339 +
           ((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C15017 +
            (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C15014 +
            (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C15018 +
            (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C15015 +
            (C48638 * C2699 - C7644 * C2695 + C48625 * C2700 - C7645 * C2696 +
             C48593 * C2704 - C7646 * C2697) *
                C15019 +
            (C48638 * C2707 - C7644 * C2702 + C48625 * C2708 - C7645 * C2703 +
             C48593 * C2709 - C7646 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
             C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                C48606) *
               C339 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C339 +
           (((C10072 - C10071) * C15017 + (C10074 - C10073) * C15014 +
             (C10076 - C10075) * C15018 + (C10078 - C10077) * C15015 +
             (C48212 * C2699 - C8908 * C2695) * C15019 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C48641 +
            ((C9894 - C9893) * C15017 + (C9896 - C9895) * C15014 +
             (C9898 - C9897) * C15018 + (C9900 - C9899) * C15015 +
             (C48212 * C3164 - C8908 * C3161) * C15019 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C48629 +
            ((C9902 - C9901) * C15017 + (C9904 - C9903) * C15014 +
             (C9906 - C9905) * C15018 + (C9908 - C9907) * C15015 +
             (C48212 * C10058 - C8908 * C10055) * C15019 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 - C1001 * C1160 +
              C1008 * C1157 - C48593 * C1161) *
                 C118 +
             (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 - C1001 * C1168 +
              C1008 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                C48641 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                C48629 +
            ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 - C1007 * C1157 +
              C48593 * C1165 - C1008 * C1158) *
                 C118 +
             (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 - C1007 * C1164 +
              C48593 * C1170 - C1008 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C48300 * C447 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C48300 * C447 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48329) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C447 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C447 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C48300 * C447 +
           ((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C7644 * C2258 - C48638 * C2264 + C7645 * C2259 - C48625 * C2265 +
             C7646 * C2260 - C48593 * C2266) *
                C15019 +
            (C7644 * C2267 - C48638 * C2276 + C7645 * C2268 - C48625 * C2277 +
             C7646 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C15018 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C15015 +
            (C15349 - C15350 + C15351 - C15352 + C15353 - C15354) * C15019 +
            (C15355 - C15356 + C15357 - C15358 + C15359 - C15360) * C48609) *
               C48318 * C48300 * C447 +
           ((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C15017 +
            (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C15014 +
            (C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
             C48593 * C627 - C7646 * C622) *
                C15018 +
            (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
             C48593 * C637 - C7646 * C632) *
                C15015 +
            (C48638 * C2265 - C7644 * C2259 + C48625 * C2266 - C7645 * C2260 +
             C48593 * C2545 - C7646 * C2544) *
                C15019 +
            (C48638 * C2277 - C7644 * C2268 + C48625 * C2278 - C7645 * C2269 +
             C48593 * C2547 - C7646 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            (C9270 * C15017 + C9271 * C15014 + C10337 * C15018 +
             C10338 * C15015 + C10339 * C15019 + C10340 * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9017 - C9016) * C15017 + (C9019 - C9018) * C15014 +
             (C9894 - C9893) * C15018 + (C9896 - C9895) * C15015 +
             (C9898 - C9897) * C15019 + (C9900 - C9899) * C48609) *
                C48641 +
            ((C9021 - C9020) * C15017 + (C9023 - C9022) * C15014 +
             (C9902 - C9901) * C15018 + (C9904 - C9903) * C15015 +
             (C9906 - C9905) * C15019 + (C9908 - C9907) * C48609) *
                C48629 +
            ((C9025 - C9024) * C15017 + (C9027 - C9026) * C15014 +
             (C14038 - C14037) * C15018 + (C14040 - C14039) * C15015 +
             (C48212 * C9881 - C8908 * C9880) * C15019 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48329) *
               C48641 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
               C48629 +
           C1674 * C48606) *
              C48300 * C513 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
               C48641 +
           ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
            (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
               C48629 +
           ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
            (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
               C48606) *
              C48300 * C514 +
          (C1674 * C48641 +
           ((C1657 - C1656 + C1659 - C1658 + C1661 - C1660) * C118 +
            (C1663 - C1662 + C1665 - C1664 + C1667 - C1666) * C48329) *
               C48629 +
           ((C1000 * C1640 - C1006 * C1637 + C1001 * C1641 - C1007 * C1638 +
             C48593 * C1642 - C1008 * C1639) *
                C118 +
            (C1000 * C1646 - C1006 * C1643 + C1001 * C1647 - C1007 * C1644 +
             C48593 * C1648 - C1008 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48329) *
              C48318 * C48300 * C513 +
          ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
            C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
            C117 * C237 - C105 * C243) *
               C118 +
           (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
            C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
            C117 * C248 - C105 * C255) *
               C48329) *
              C48318 * C48300 * C514 +
          ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
            C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
            C105 * C526 - C117 * C521) *
               C118 +
           (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
            C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
            C105 * C536 - C117 * C531) *
               C48329) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C48300 * C513 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
               C7641 +
           ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
            (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
               C7642 +
           ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
            (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
               C48606) *
              C48300 * C514 +
          (C8268 * C7641 +
           ((C8251 - C8250 + C8253 - C8252 + C8255 - C8254) * C118 +
            (C8257 - C8256 + C8259 - C8258 + C8261 - C8260) * C48329) *
               C7642 +
           ((C48638 * C1640 - C7644 * C1637 + C48625 * C1641 - C7645 * C1638 +
             C48593 * C1642 - C7646 * C1639) *
                C118 +
            (C48638 * C1646 - C7644 * C1643 + C48625 * C1647 - C7645 * C1644 +
             C48593 * C1648 - C7646 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C48300 * C513 +
          (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
           ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
           ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
           ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
           ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
              C48300 * C514 +
          (C9286 * C8903 + C9287 * C8904 + C9288 * C8905 +
           ((C9277 - C9276) * C118 + (C9279 - C9278) * C48329) * C8906 +
           ((C48212 * C9266 - C8908 * C9265) * C118 +
            (C48212 * C9268 - C8908 * C9267) * C48329) *
               C8907) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
            C48593 * C128 - C7646 * C121) *
               C15017 +
           (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
            C48593 * C142 - C7646 * C133) *
               C15014 +
           (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
           (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
           (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
           (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
              C48318 * C48300 * C513 +
          ((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
           (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
           (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
           (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
           (C7644 * C2258 - C48638 * C2264 + C7645 * C2259 - C48625 * C2265 +
            C7646 * C2260 - C48593 * C2266) *
               C15019 +
           (C7644 * C2267 - C48638 * C2276 + C7645 * C2268 - C48625 * C2277 +
            C7646 * C2269 - C48593 * C2278) *
               C48609) *
              C48318 * C48300 * C514 +
          (C8264 * C15017 + C8265 * C15014 +
           (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C15018 +
           (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C15015 +
           (C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
            C48593 * C2272 - C7646 * C2263) *
               C15019 +
           (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
            C48593 * C2281 - C7646 * C2275) *
               C48609) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C15017 +
            (C48212 * C140 - C8908 * C131) * C15014 +
            (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
            C10934 * C15019 + C10935 * C48609) *
               C48641 +
           ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
            C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
            C10507 * C48609) *
               C48629 +
           C16867 * C48606) *
              C48300 * C513 +
          (((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
            C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
            C10511 * C48609) *
               C48641 +
           ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
            C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
            C10519 * C48609) *
               C48629 +
           ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
            C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
            (C10343 - C10344) * C48609) *
               C48606) *
              C48300 * C514 +
          (C16867 * C48641 +
           (C9272 * C15017 + C9273 * C15014 + C14405 * C15018 +
            C14406 * C15015 + (C10342 - C10341) * C15019 +
            (C10344 - C10343) * C48609) *
               C48629 +
           (C9274 * C15017 + C9275 * C15014 + (C9388 - C9387) * C15018 +
            (C9390 - C9389) * C15015 +
            (C48212 * C9620 - C8908 * C9617) * C15019 +
            (C48212 * C9623 - C8908 * C9621) * C48609) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C339 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
             (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                C48606) *
               C339 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                C48641 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                C48629 +
            ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
              C48593 * C1825 - C1008 * C1822) *
                 C118 +
             (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
              C48593 * C1831 - C1008 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C447 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C339 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48329) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C339 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C339 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C339 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C447 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C15019 +
            (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48609) *
               C48318 * C339 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C15017 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C15014 +
            (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C15018 +
            (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C15015 +
            (C48638 * C3163 - C7644 * C3160 + C48625 * C3164 - C7645 * C3161 +
             C48593 * C3165 - C7646 * C3162) *
                C15019 +
            (C48638 * C3169 - C7644 * C3166 + C48625 * C3170 - C7645 * C3167 +
             C48593 * C3171 - C7646 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            C16867 * C48606) *
               C339 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C339 +
           ((C10504 * C15017 + C10505 * C15014 + C10506 * C15018 +
             C10507 * C15015 + (C10513 - C10512) * C15019 +
             (C10515 - C10514) * C48609) *
                C48641 +
            (C10337 * C15017 + C10338 * C15014 + C10339 * C15018 +
             C10340 * C15015 + (C10521 - C10520) * C15019 +
             (C10523 - C10522) * C48609) *
                C48629 +
            (C14405 * C15017 + C14406 * C15014 + (C10342 - C10341) * C15018 +
             (C10344 - C10343) * C15015 +
             (C48212 * C10500 - C8908 * C10499) * C15019 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C721 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C721 +
           (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
              C48593 * C350 - C1008 * C344) *
                 C118 +
             (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
              C48593 * C362 - C1008 * C355) *
                 C48329) *
                C48641 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48593 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48593 * C637 - C1008 * C632) *
                 C48329) *
                C48629 +
            ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C118 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C721 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48329) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C721 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C721 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C721 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
             C7646 * C122 - C48593 * C129) *
                C15017 +
            (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
             C7646 * C134 - C48593 * C143) *
                C15014 +
            (C15337 - C15338 + C15339 - C15340 + C15341 - C15342) * C15018 +
            (C15343 - C15344 + C15345 - C15346 + C15347 - C15348) * C15015 +
            (C15349 - C15350 + C15351 - C15352 + C15353 - C15354) * C15019 +
            (C15355 - C15356 + C15357 - C15358 + C15359 - C15360) * C48609) *
               C48318 * C721 +
           ((C15338 - C15337 + C15340 - C15339 + C15342 - C15341) * C15017 +
            (C15344 - C15343 + C15346 - C15345 + C15348 - C15347) * C15014 +
            (C15350 - C15349 + C15352 - C15351 + C15354 - C15353) * C15018 +
            (C15356 - C15355 + C15358 - C15357 + C15360 - C15359) * C15015 +
            (C48638 * C2699 - C7644 * C2695 + C48625 * C2700 - C7645 * C2696 +
             C48593 * C2704 - C7646 * C2697) *
                C15019 +
            (C48638 * C2707 - C7644 * C2702 + C48625 * C2708 - C7645 * C2703 +
             C48593 * C2709 - C7646 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            C16867 * C48606) *
               C721 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C15017 +
             (C8908 * C132 - C48212 * C141) * C15014 +
             (C10071 - C10072) * C15018 + (C10073 - C10074) * C15015 +
             (C10075 - C10076) * C15019 + (C10077 - C10078) * C48609) *
                C48641 +
            ((C9016 - C9017) * C15017 + (C9018 - C9019) * C15014 +
             (C9893 - C9894) * C15018 + (C9895 - C9896) * C15015 +
             (C9897 - C9898) * C15019 + (C9899 - C9900) * C48609) *
                C48629 +
            ((C9020 - C9021) * C15017 + (C9022 - C9023) * C15014 +
             (C9901 - C9902) * C15018 + (C9903 - C9904) * C15015 +
             (C9905 - C9906) * C15019 + (C9907 - C9908) * C48609) *
                C48606) *
               C721 +
           (((C10072 - C10071) * C15017 + (C10074 - C10073) * C15014 +
             (C10076 - C10075) * C15018 + (C10078 - C10077) * C15015 +
             (C48212 * C2699 - C8908 * C2695) * C15019 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C48641 +
            ((C9894 - C9893) * C15017 + (C9896 - C9895) * C15014 +
             (C9898 - C9897) * C15018 + (C9900 - C9899) * C15015 +
             (C48212 * C3164 - C8908 * C3161) * C15019 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C48629 +
            ((C9902 - C9901) * C15017 + (C9904 - C9903) * C15014 +
             (C9906 - C9905) * C15018 + (C9908 - C9907) * C15015 +
             (C48212 * C10058 - C8908 * C10055) * C15019 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C721 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
             (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                C48606) *
               C721 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                C48641 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                C48629 +
            ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
              C48593 * C1825 - C1008 * C1822) *
                 C118 +
             (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
              C48593 * C1831 - C1008 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C229 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C721 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48329) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C721 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C721 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C15017 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C15014 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
            (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
            (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C15019 +
            (C15331 - C15332 + C15333 - C15334 + C15335 - C15336) * C48609) *
               C48318 * C721 +
           ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
            (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
            (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
            (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
            (C7644 * C2694 - C48638 * C2698 + C7645 * C2695 - C48625 * C2699 +
             C7646 * C2696 - C48593 * C2700) *
                C15019 +
            (C7644 * C2701 - C48638 * C2706 + C7645 * C2702 - C48625 * C2707 +
             C7646 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C229 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C15017 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C15014 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C15018 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C15015 +
            (C15763 - C15764 + C15765 - C15766 + C15767 - C15768) * C15019 +
            (C15769 - C15770 + C15771 - C15772 + C15773 - C15774) * C48609) *
               C48318 * C721 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C15017 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C15014 +
            (C15764 - C15763 + C15766 - C15765 + C15768 - C15767) * C15018 +
            (C15770 - C15769 + C15772 - C15771 + C15774 - C15773) * C15015 +
            (C48638 * C3163 - C7644 * C3160 + C48625 * C3164 - C7645 * C3161 +
             C48593 * C3165 - C7646 * C3162) *
                C15019 +
            (C48638 * C3169 - C7644 * C3166 + C48625 * C3170 - C7645 * C3167 +
             C48593 * C3171 - C7646 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C15017 +
             (C48212 * C140 - C8908 * C131) * C15014 +
             (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
             C10934 * C15019 + C10935 * C48609) *
                C48641 +
            ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
             C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
             C10507 * C48609) *
                C48629 +
            C16867 * C48606) *
               C721 +
           (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
             (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
             (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
                C48641 +
            (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
             C10511 * C15015 + (C10512 - C10513) * C15019 +
             (C10514 - C10515) * C48609) *
                C48629 +
            (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
             C10519 * C15015 + (C10520 - C10521) * C15019 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C15017 + (C9003 - C9002) * C15014 +
             C10508 * C15018 + C10509 * C15015 + C10510 * C15019 +
             C10511 * C48609) *
                C48641 +
            ((C9005 - C9004) * C15017 + (C9007 - C9006) * C15014 +
             C10516 * C15018 + C10517 * C15015 + C10518 * C15019 +
             C10519 * C48609) *
                C48629 +
            ((C9009 - C9008) * C15017 + (C9011 - C9010) * C15014 +
             C14545 * C15018 + C14546 * C15015 + (C10341 - C10342) * C15019 +
             (C10343 - C10344) * C48609) *
                C48606) *
               C721 +
           ((C10504 * C15017 + C10505 * C15014 + C10506 * C15018 +
             C10507 * C15015 + (C10513 - C10512) * C15019 +
             (C10515 - C10514) * C48609) *
                C48641 +
            (C10337 * C15017 + C10338 * C15014 + C10339 * C15018 +
             C10340 * C15015 + (C10521 - C10520) * C15019 +
             (C10523 - C10522) * C48609) *
                C48629 +
            (C14405 * C15017 + C14406 * C15014 + (C10342 - C10341) * C15018 +
             (C10344 - C10343) * C15015 +
             (C48212 * C10500 - C8908 * C10499) * C15019 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48329) *
               C48641 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
               C48629 +
           C1674 * C48606) *
              C867 +
          (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48593 * C349) *
                C118 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48593 * C361) *
                C48329) *
               C48641 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
               C48629 +
           ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
               C48606) *
              C868 +
          (((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
             C48593 * C877 - C1008 * C872) *
                C118 +
            (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
             C48593 * C887 - C1008 * C882) *
                C48329) *
               C48641 +
           ((C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
             C48593 * C2266 - C1008 * C2260) *
                C118 +
            (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
             C48593 * C2278 - C1008 * C2269) *
                C48329) *
               C48629 +
           ((C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
             C48593 * C2272 - C1008 * C2263) *
                C118 +
            (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
             C48593 * C2281 - C1008 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48329) *
              C48318 * C867 +
          ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
            C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
            C117 * C345 - C105 * C351) *
               C118 +
           (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
            C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
            C117 * C356 - C105 * C363) *
               C48329) *
              C48318 * C868 +
          ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
            C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
            C105 * C879 - C117 * C874) *
               C118 +
           (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
            C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
            C105 * C889 - C117 * C884) *
               C48329) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C867 +
          (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
             C7646 * C343 - C48593 * C349) *
                C118 +
            (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
             C7646 * C354 - C48593 * C361) *
                C48329) *
               C7641 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
               C7642 +
           ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
               C48606) *
              C868 +
          (((C48638 * C875 - C7644 * C870 + C48625 * C876 - C7645 * C871 +
             C48593 * C877 - C7646 * C872) *
                C118 +
            (C48638 * C885 - C7644 * C880 + C48625 * C886 - C7645 * C881 +
             C48593 * C887 - C7646 * C882) *
                C48329) *
               C7641 +
           ((C48638 * C2264 - C7644 * C2258 + C48625 * C2265 - C7645 * C2259 +
             C48593 * C2266 - C7646 * C2260) *
                C118 +
            (C48638 * C2276 - C7644 * C2267 + C48625 * C2277 - C7645 * C2268 +
             C48593 * C2278 - C7646 * C2269) *
                C48329) *
               C7642 +
           ((C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
             C48593 * C2272 - C7646 * C2263) *
                C118 +
            (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
             C48593 * C2281 - C7646 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C867 +
          (((C8908 * C341 - C48212 * C347) * C118 +
            (C8908 * C352 - C48212 * C359) * C48329) *
               C8903 +
           ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
           ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
           ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
           ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
              C868 +
          (((C48212 * C875 - C8908 * C870) * C118 +
            (C48212 * C885 - C8908 * C880) * C48329) *
               C8903 +
           ((C48212 * C2264 - C8908 * C2258) * C118 +
            (C48212 * C2276 - C8908 * C2267) * C48329) *
               C8904 +
           ((C48212 * C2270 - C8908 * C2261) * C118 +
            (C48212 * C2279 - C8908 * C2273) * C48329) *
               C8905 +
           ((C48212 * C9618 - C8908 * C9616) * C118 +
            (C48212 * C9622 - C8908 * C9619) * C48329) *
               C8906 +
           ((C48212 * C9620 - C8908 * C9617) * C118 +
            (C48212 * C9623 - C8908 * C9621) * C48329) *
               C8907) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
            C48593 * C128 - C7646 * C121) *
               C15017 +
           (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
            C48593 * C142 - C7646 * C133) *
               C15014 +
           (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C15018 +
           (C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C15015 +
           C16197 * C15019 + C16198 * C48609) *
              C48318 * C867 +
          ((C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C15017 +
           (C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C15014 +
           (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C15018 +
           (C15332 - C15331 + C15334 - C15333 + C15336 - C15335) * C15015 +
           (C16183 - C16184 + C16185 - C16186 + C16187 - C16188) * C15019 +
           (C16189 - C16190 + C16191 - C16192 + C16193 - C16194) * C48609) *
              C48318 * C868 +
          (C16197 * C15017 + C16198 * C15014 +
           (C16184 - C16183 + C16186 - C16185 + C16188 - C16187) * C15018 +
           (C16190 - C16189 + C16192 - C16191 + C16194 - C16193) * C15015 +
           (C48638 * C3589 - C7644 * C3586 + C48625 * C3590 - C7645 * C3587 +
            C48593 * C3591 - C7646 * C3588) *
               C15019 +
           (C48638 * C3595 - C7644 * C3592 + C48625 * C3596 - C7645 * C3593 +
            C48593 * C3597 - C7646 * C3594) *
               C48609) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C15017 +
            (C48212 * C140 - C8908 * C131) * C15014 +
            (C10063 - C10064) * C15018 + (C10065 - C10066) * C15015 +
            C10934 * C15019 + C10935 * C48609) *
               C48641 +
           ((C9000 - C9001) * C15017 + (C9002 - C9003) * C15014 +
            C10504 * C15018 + C10505 * C15015 + C10506 * C15019 +
            C10507 * C48609) *
               C48629 +
           C16867 * C48606) *
              C867 +
          (((C10064 - C10063) * C15017 + (C10066 - C10065) * C15014 +
            (C10068 - C10067) * C15018 + (C10070 - C10069) * C15015 +
            (C10936 - C10937) * C15019 + (C10938 - C10939) * C48609) *
               C48641 +
           (C10508 * C15017 + C10509 * C15014 + C10510 * C15018 +
            C10511 * C15015 + (C10512 - C10513) * C15019 +
            (C10514 - C10515) * C48609) *
               C48629 +
           (C10516 * C15017 + C10517 * C15014 + C10518 * C15018 +
            C10519 * C15015 + (C10520 - C10521) * C15019 +
            (C10522 - C10523) * C48609) *
               C48606) *
              C868 +
          ((C10934 * C15017 + C10935 * C15014 + (C10937 - C10936) * C15018 +
            (C10939 - C10938) * C15015 +
            (C48212 * C3589 - C8908 * C3586) * C15019 +
            (C48212 * C3595 - C8908 * C3592) * C48609) *
               C48641 +
           (C10506 * C15017 + C10507 * C15014 + (C10513 - C10512) * C15018 +
            (C10515 - C10514) * C15015 +
            (C48212 * C10927 - C8908 * C10925) * C15019 +
            (C48212 * C10931 - C8908 * C10928) * C48609) *
               C48629 +
           (C10339 * C15017 + C10340 * C15014 + (C10521 - C10520) * C15018 +
            (C10523 - C10522) * C15015 +
            (C48212 * C10929 - C8908 * C10926) * C15019 +
            (C48212 * C10932 - C8908 * C10930) * C48609) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C30748 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C30746 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
               C48573 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
            C28470 * C30749 + C28471 * C48416) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
             C47239 * C122 - C26137 * C129) *
                C30748 +
            (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
             C47239 * C134 - C26137 * C143) *
                C30746 +
            (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C30749 +
            (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
               C48573 +
           ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C30748 +
            (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C30746 +
            (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C30749 +
            (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C48217 * C128 - C47233 * C121 + C48225 * C129 - C47229 * C122 +
             C26137 * C130 - C47239 * C123) *
                C30748 +
            (C48217 * C142 - C47233 * C133 + C48225 * C143 - C47229 * C134 +
             C26137 * C144 - C47239 * C135) *
                C30746 +
            (C48217 * C349 - C47233 * C343 + C48225 * C350 - C47229 * C344 +
             C26137 * C351 - C47239 * C345) *
                C30749 +
            (C48217 * C361 - C47233 * C354 + C48225 * C362 - C47229 * C355 +
             C26137 * C363 - C47239 * C356) *
                C48416) *
               C48573 +
           ((C48217 * C241 - C47233 * C235 + C48225 * C242 - C47229 * C236 +
             C26137 * C243 - C47239 * C237) *
                C30748 +
            (C48217 * C253 - C47233 * C246 + C48225 * C254 - C47229 * C247 +
             C26137 * C255 - C47239 * C248) *
                C30746 +
            (C48217 * C626 - C47233 * C621 + C48225 * C627 - C47229 * C622 +
             C26137 * C628 - C47239 * C623) *
                C30749 +
            (C48217 * C636 - C47233 * C631 + C48225 * C637 - C47229 * C632 +
             C26137 * C638 - C47239 * C633) *
                C48416) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C30748 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C30746 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C48573 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
             C28470 * C30749 + C28471 * C48416) *
                C48376) *
               C48300 * C229 +
           (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C30748 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C30746 +
             C28472 * C30749 + C28473 * C48416) *
                C48573 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C30748 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C30746 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C30749 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C30748 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C30746 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C30749 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C48573 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C30748 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C30746 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C30749 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C30748 +
             (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C30746 +
             (C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C30749 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48416) *
                C48573 +
            ((C26328 - C26327 + C26330 - C26329 + C26332 - C26331) * C30748 +
             (C26334 - C26333 + C26336 - C26335 + C26338 - C26337) * C30746 +
             (C48217 * C1370 - C47233 * C1366 + C48225 * C1371 -
              C47229 * C1367 + C26137 * C1375 - C47239 * C1368) *
                 C30749 +
             (C48217 * C1378 - C47233 * C1373 + C48225 * C1379 -
              C47229 * C1374 + C26137 * C1380 - C47239 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C30748 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C30746 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C48573 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
             C28470 * C30749 + C28471 * C48416) *
                C48376) *
               C339 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C30748 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C30746 +
             (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C30749 +
             (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48416) *
                C48573 +
            (C28472 * C30748 + C28473 * C30746 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C30749 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C30748 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C30746 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C30749 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C48573 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C30748 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C30746 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C30749 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C339 +
           (((C27897 - C27896 + C27899 - C27898 + C27901 - C27900) * C30748 +
             (C27903 - C27902 + C27905 - C27904 + C27907 - C27906) * C30746 +
             (C48217 * C876 - C47233 * C871 + C48225 * C877 - C47229 * C872 +
              C26137 * C878 - C47239 * C873) *
                 C30749 +
             (C48217 * C886 - C47233 * C881 + C48225 * C887 - C47229 * C882 +
              C26137 * C888 - C47239 * C883) *
                 C48416) *
                C48573 +
            ((C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C30748 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C30746 +
             (C48217 * C2265 - C47233 * C2259 + C48225 * C2266 -
              C47229 * C2260 + C26137 * C2545 - C47239 * C2544) *
                 C30749 +
             (C48217 * C2277 - C47233 * C2268 + C48225 * C2278 -
              C47229 * C2269 + C26137 * C2547 - C47239 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C30748 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C30746 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C48573 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
             C28470 * C30749 + C28471 * C48416) *
                C48376) *
               C48300 * C447 +
           (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C30748 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C30746 +
             C28472 * C30749 + C28473 * C48416) *
                C48573 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C30748 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C30746 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C30749 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C30748 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C30746 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C30749 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C48573 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C30748 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C30746 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C30749 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C30748 +
             (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C30746 +
             (C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C30749 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48416) *
                C48573 +
            ((C26328 - C26327 + C26330 - C26329 + C26332 - C26331) * C30748 +
             (C26334 - C26333 + C26336 - C26335 + C26338 - C26337) * C30746 +
             (C48217 * C1370 - C47233 * C1366 + C48225 * C1371 -
              C47229 * C1367 + C26137 * C1375 - C47239 * C1368) *
                 C30749 +
             (C48217 * C1378 - C47233 * C1373 + C48225 * C1379 -
              C47229 * C1374 + C26137 * C1380 - C47239 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C30748 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C30746 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
               C48573 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
            C28470 * C30749 + C28471 * C48416) *
               C48376) *
              C48300 * C513 +
          (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C30748 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C30746 +
            C28472 * C30749 + C28473 * C48416) *
               C48573 +
           ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C30748 +
            (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C30746 +
            (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C30749 +
            (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
               C48376) *
              C48300 * C514 +
          ((C26761 * C30748 + C26762 * C30746 +
            (C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C30749 +
            (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48416) *
               C48573 +
           ((C26748 - C26747 + C26750 - C26749 + C26752 - C26751) * C30748 +
            (C26754 - C26753 + C26756 - C26755 + C26758 - C26757) * C30746 +
            (C48217 * C1823 - C47233 * C1820 + C48225 * C1824 - C47229 * C1821 +
             C26137 * C1825 - C47239 * C1822) *
                C30749 +
            (C48217 * C1829 - C47233 * C1826 + C48225 * C1830 - C47229 * C1827 +
             C26137 * C1831 - C47239 * C1828) *
                C48416) *
               C48376) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C30748 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C30746 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C48573 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
             C28470 * C30749 + C28471 * C48416) *
                C48376) *
               C339 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C30748 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C30746 +
             (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C30749 +
             (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48416) *
                C48573 +
            (C28472 * C30748 + C28473 * C30746 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C30749 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C447 +
          ((((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C30748 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C30746 +
             C28472 * C30749 + C28473 * C48416) *
                C48573 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C30748 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C30746 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C30749 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C339 +
           ((C28470 * C30748 + C28471 * C30746 +
             (C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C30749 +
             (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48416) *
                C48573 +
            ((C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C30748 +
             (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C30746 +
             (C48217 * C2270 - C47233 * C2261 + C48225 * C2271 -
              C47229 * C2262 + C26137 * C2272 - C47239 * C2263) *
                 C30749 +
             (C48217 * C2279 - C47233 * C2273 + C48225 * C2280 -
              C47229 * C2274 + C26137 * C2281 - C47239 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C30748 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C30746 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C48573 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
             C28470 * C30749 + C28471 * C48416) *
                C48376) *
               C721 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C30748 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C30746 +
             (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C30749 +
             (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48416) *
                C48573 +
            (C28472 * C30748 + C28473 * C30746 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C30749 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
              C47239 * C122 - C26137 * C129) *
                 C30748 +
             (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
              C47239 * C134 - C26137 * C143) *
                 C30746 +
             (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C30749 +
             (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48416) *
                C48573 +
            ((C26315 - C26316 + C26317 - C26318 + C26319 - C26320) * C30748 +
             (C26321 - C26322 + C26323 - C26324 + C26325 - C26326) * C30746 +
             (C27678 - C27679 + C27680 - C27681 + C27682 - C27683) * C30749 +
             (C27684 - C27685 + C27686 - C27687 + C27688 - C27689) * C48416) *
                C48376) *
               C721 +
           (((C27897 - C27896 + C27899 - C27898 + C27901 - C27900) * C30748 +
             (C27903 - C27902 + C27905 - C27904 + C27907 - C27906) * C30746 +
             (C48217 * C876 - C47233 * C871 + C48225 * C877 - C47229 * C872 +
              C26137 * C878 - C47239 * C873) *
                 C30749 +
             (C48217 * C886 - C47233 * C881 + C48225 * C887 - C47229 * C882 +
              C26137 * C888 - C47239 * C883) *
                 C48416) *
                C48573 +
            ((C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C30748 +
             (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C30746 +
             (C48217 * C2265 - C47233 * C2259 + C48225 * C2266 -
              C47229 * C2260 + C26137 * C2545 - C47239 * C2544) *
                 C30749 +
             (C48217 * C2277 - C47233 * C2268 + C48225 * C2278 -
              C47229 * C2269 + C26137 * C2547 - C47239 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
              C26137 * C128 - C47239 * C121) *
                 C30748 +
             (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
              C26137 * C142 - C47239 * C133) *
                 C30746 +
             (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
             (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
                C48573 +
            ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
             (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
             C28470 * C30749 + C28471 * C48416) *
                C48376) *
               C721 +
           (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C30748 +
             (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C30746 +
             (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C30749 +
             (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48416) *
                C48573 +
            (C28472 * C30748 + C28473 * C30746 +
             (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C30749 +
             (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
                C48376) *
               C48603) *
              C229 +
          ((((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C30748 +
             (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C30746 +
             C28472 * C30749 + C28473 * C48416) *
                C48573 +
            ((C26304 - C26303 + C26306 - C26305 + C26308 - C26307) * C30748 +
             (C26310 - C26309 + C26312 - C26311 + C26314 - C26313) * C30746 +
             (C26924 - C26925 + C26926 - C26927 + C26928 - C26929) * C30749 +
             (C26930 - C26931 + C26932 - C26933 + C26934 - C26935) * C48416) *
                C48376) *
               C721 +
           ((C28470 * C30748 + C28471 * C30746 +
             (C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C30749 +
             (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48416) *
                C48573 +
            ((C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C30748 +
             (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C30746 +
             (C48217 * C2270 - C47233 * C2261 + C48225 * C2271 -
              C47229 * C2262 + C26137 * C2272 - C47239 * C2263) *
                 C30749 +
             (C48217 * C2279 - C47233 * C2273 + C48225 * C2280 -
              C47229 * C2274 + C26137 * C2281 - C47239 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C30748 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C30746 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C30749 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48416) *
               C48573 +
           ((C26291 - C26292 + C26293 - C26294 + C26295 - C26296) * C30748 +
            (C26297 - C26298 + C26299 - C26300 + C26301 - C26302) * C30746 +
            C28470 * C30749 + C28471 * C48416) *
               C48376) *
              C867 +
          (((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C30748 +
            (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C30746 +
            (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C30749 +
            (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48416) *
               C48573 +
           (C28472 * C30748 + C28473 * C30746 +
            (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C30749 +
            (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C48416) *
               C48376) *
              C868 +
          (((C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C30748 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C30746 +
            (C48217 * C2698 - C47233 * C2694 + C48225 * C2699 - C47229 * C2695 +
             C26137 * C2700 - C47239 * C2696) *
                C30749 +
            (C48217 * C2706 - C47233 * C2701 + C48225 * C2707 - C47229 * C2702 +
             C26137 * C2708 - C47239 * C2703) *
                C48416) *
               C48573 +
           ((C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C30748 +
            (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C30746 +
            (C48217 * C3163 - C47233 * C3160 + C48225 * C3164 - C47229 * C3161 +
             C26137 * C3165 - C47239 * C3162) *
                C30749 +
            (C48217 * C3169 - C47233 * C3166 + C48225 * C3170 - C47229 * C3167 +
             C26137 * C3171 - C47239 * C3168) *
                C48416) *
               C48376) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C47360 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48412 +
            (C24872 - C24873 + C24874 - C24875) * C47352 +
            (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
            C26025 * C36201) *
               C48573 +
           ((C23370 - C23371 + C23372 - C23373) * C47360 +
            (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
            C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C47360 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48412 +
            (C24888 - C24889 + C24890 - C24891) * C47352 +
            (C24892 - C24893 + C24894 - C24895) * C48419 +
            (C24896 - C24897 + C24898 - C24899) * C47366 +
            (C24900 - C24901 + C24902 - C24903) * C36201) *
               C48573 +
           ((C23394 - C23395 + C23396 - C23397) * C47360 +
            (C23398 - C23399 + C23400 - C23401) * C48412 +
            (C24662 - C24663 + C24664 - C24665) * C47352 +
            (C24666 - C24667 + C24668 - C24669) * C48419 +
            (C24670 - C24671 + C24672 - C24673) * C47366 +
            (C24674 - C24675 + C24676 - C24677) * C36201) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C47360 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C48412 +
            (C23231 * C349 - C23237 * C343 + C48222 * C350 - C23238 * C344) *
                C47352 +
            (C23231 * C361 - C23237 * C354 + C48222 * C362 - C23238 * C355) *
                C48419 +
            (C23231 * C877 - C23237 * C872 + C48222 * C878 - C23238 * C873) *
                C47366 +
            (C23231 * C887 - C23237 * C882 + C48222 * C888 - C23238 * C883) *
                C36201) *
               C48573 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C47360 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C48412 +
            (C23231 * C626 - C23237 * C621 + C48222 * C627 - C23238 * C622) *
                C47352 +
            (C23231 * C636 - C23237 * C631 + C48222 * C637 - C23238 * C632) *
                C48419 +
            (C23231 * C2266 - C23237 * C2260 + C48222 * C2545 -
             C23238 * C2544) *
                C47366 +
            (C23231 * C2278 - C23237 * C2269 + C48222 * C2547 -
             C23238 * C2546) *
                C36201) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C47360 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48412 +
             (C24872 - C24873 + C24874 - C24875) * C47352 +
             (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
             C26025 * C36201) *
                C48573 +
            ((C23370 - C23371 + C23372 - C23373) * C47360 +
             (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
             C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
                C48376) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C47360 +
             (C23375 - C23374 + C23377 - C23376) * C48412 + C25474 * C47352 +
             C25475 * C48419 + C25476 * C47366 + C25477 * C36201) *
                C48573 +
            ((C23379 - C23378 + C23381 - C23380) * C47360 +
             (C23383 - C23382 + C23385 - C23384) * C48412 + C30113 * C47352 +
             C30114 * C48419 + (C25244 - C25245 + C25246 - C25247) * C47366 +
             (C25248 - C25249 + C25250 - C25251) * C36201) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C47360 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48412 +
             (C24888 - C24889 + C24890 - C24891) * C47352 +
             (C24892 - C24893 + C24894 - C24895) * C48419 +
             (C24896 - C24897 + C24898 - C24899) * C47366 +
             (C24900 - C24901 + C24902 - C24903) * C36201) *
                C48573 +
            ((C23394 - C23395 + C23396 - C23397) * C47360 +
             (C23398 - C23399 + C23400 - C23401) * C48412 +
             (C24662 - C24663 + C24664 - C24665) * C47352 +
             (C24666 - C24667 + C24668 - C24669) * C48419 +
             (C24670 - C24671 + C24672 - C24673) * C47366 +
             (C24674 - C24675 + C24676 - C24677) * C36201) *
                C48376) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C47360 +
             (C23399 - C23398 + C23401 - C23400) * C48412 +
             (C24663 - C24662 + C24665 - C24664) * C47352 +
             (C24667 - C24666 + C24669 - C24668) * C48419 +
             (C24671 - C24670 + C24673 - C24672) * C47366 +
             (C24675 - C24674 + C24677 - C24676) * C36201) *
                C48573 +
            ((C23403 - C23402 + C23405 - C23404) * C47360 +
             (C23407 - C23406 + C23409 - C23408) * C48412 +
             (C29361 - C29360 + C29363 - C29362) * C47352 +
             (C29365 - C29364 + C29367 - C29366) * C48419 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C47366 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C36201) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C47360 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48412 +
             (C24872 - C24873 + C24874 - C24875) * C47352 +
             (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
             C26025 * C36201) *
                C48573 +
            ((C23370 - C23371 + C23372 - C23373) * C47360 +
             (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
             C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
                C48376) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C47360 +
             (C24877 - C24876 + C24879 - C24878) * C48412 +
             (C24881 - C24880 + C24883 - C24882) * C47352 +
             (C24885 - C24884 + C24887 - C24886) * C48419 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36201) *
                C48573 +
            (C25474 * C47360 + C25475 * C48412 + C25476 * C47352 +
             C25477 * C48419 + (C25462 - C25463 + C25464 - C25465) * C47366 +
             (C25466 - C25467 + C25468 - C25469) * C36201) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C47360 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48412 +
             (C24888 - C24889 + C24890 - C24891) * C47352 +
             (C24892 - C24893 + C24894 - C24895) * C48419 +
             (C24896 - C24897 + C24898 - C24899) * C47366 +
             (C24900 - C24901 + C24902 - C24903) * C36201) *
                C48573 +
            ((C23394 - C23395 + C23396 - C23397) * C47360 +
             (C23398 - C23399 + C23400 - C23401) * C48412 +
             (C24662 - C24663 + C24664 - C24665) * C47352 +
             (C24666 - C24667 + C24668 - C24669) * C48419 +
             (C24670 - C24671 + C24672 - C24673) * C47366 +
             (C24674 - C24675 + C24676 - C24677) * C36201) *
                C48376) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C47360 +
             (C24893 - C24892 + C24895 - C24894) * C48412 +
             (C24897 - C24896 + C24899 - C24898) * C47352 +
             (C24901 - C24900 + C24903 - C24902) * C48419 +
             (C33751 - C33750 + C33753 - C33752) * C47366 +
             (C33755 - C33754 + C33757 - C33756) * C36201) *
                C48573 +
            ((C24663 - C24662 + C24665 - C24664) * C47360 +
             (C24667 - C24666 + C24669 - C24668) * C48412 +
             (C24671 - C24670 + C24673 - C24672) * C47352 +
             (C24675 - C24674 + C24677 - C24676) * C48419 +
             (C23231 * C3164 - C23237 * C3161 + C48222 * C3165 -
              C23238 * C3162) *
                 C47366 +
             (C23231 * C3170 - C23237 * C3167 + C48222 * C3171 -
              C23238 * C3168) *
                 C36201) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C47360 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48412 +
             (C24872 - C24873 + C24874 - C24875) * C47352 +
             (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
             C26025 * C36201) *
                C48573 +
            ((C23370 - C23371 + C23372 - C23373) * C47360 +
             (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
             C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
                C48376) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C47360 +
             (C23375 - C23374 + C23377 - C23376) * C48412 + C25474 * C47352 +
             C25475 * C48419 + C25476 * C47366 + C25477 * C36201) *
                C48573 +
            ((C23379 - C23378 + C23381 - C23380) * C47360 +
             (C23383 - C23382 + C23385 - C23384) * C48412 + C30113 * C47352 +
             C30114 * C48419 + (C25244 - C25245 + C25246 - C25247) * C47366 +
             (C25248 - C25249 + C25250 - C25251) * C36201) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C47360 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48412 +
             (C24888 - C24889 + C24890 - C24891) * C47352 +
             (C24892 - C24893 + C24894 - C24895) * C48419 +
             (C24896 - C24897 + C24898 - C24899) * C47366 +
             (C24900 - C24901 + C24902 - C24903) * C36201) *
                C48573 +
            ((C23394 - C23395 + C23396 - C23397) * C47360 +
             (C23398 - C23399 + C23400 - C23401) * C48412 +
             (C24662 - C24663 + C24664 - C24665) * C47352 +
             (C24666 - C24667 + C24668 - C24669) * C48419 +
             (C24670 - C24671 + C24672 - C24673) * C47366 +
             (C24674 - C24675 + C24676 - C24677) * C36201) *
                C48376) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C47360 +
             (C23399 - C23398 + C23401 - C23400) * C48412 +
             (C24663 - C24662 + C24665 - C24664) * C47352 +
             (C24667 - C24666 + C24669 - C24668) * C48419 +
             (C24671 - C24670 + C24673 - C24672) * C47366 +
             (C24675 - C24674 + C24677 - C24676) * C36201) *
                C48573 +
            ((C23403 - C23402 + C23405 - C23404) * C47360 +
             (C23407 - C23406 + C23409 - C23408) * C48412 +
             (C29361 - C29360 + C29363 - C29362) * C47352 +
             (C29365 - C29364 + C29367 - C29366) * C48419 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C47366 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C36201) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C47360 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48412 +
            (C24872 - C24873 + C24874 - C24875) * C47352 +
            (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
            C26025 * C36201) *
               C48573 +
           ((C23370 - C23371 + C23372 - C23373) * C47360 +
            (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
            C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
               C48376) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C47360 +
            (C23375 - C23374 + C23377 - C23376) * C48412 + C25474 * C47352 +
            C25475 * C48419 + C25476 * C47366 + C25477 * C36201) *
               C48573 +
           ((C23379 - C23378 + C23381 - C23380) * C47360 +
            (C23383 - C23382 + C23385 - C23384) * C48412 + C30113 * C47352 +
            C30114 * C48419 + (C25244 - C25245 + C25246 - C25247) * C47366 +
            (C25248 - C25249 + C25250 - C25251) * C36201) *
               C48376) *
              C48300 * C514 +
          ((C23792 * C47360 + C23793 * C48412 + C29909 * C47352 +
            C29910 * C48419 + (C25245 - C25244 + C25247 - C25246) * C47366 +
            (C25249 - C25248 + C25251 - C25250) * C36201) *
               C48573 +
           (C23794 * C47360 + C23795 * C48412 +
            (C23949 - C23948 + C23951 - C23950) * C47352 +
            (C23953 - C23952 + C23955 - C23954) * C48419 +
            (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
             C23238 * C9880) *
                C47366 +
            (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
             C23238 * C9882) *
                C36201) *
               C48376) *
              C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C47360 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48412 +
             (C24872 - C24873 + C24874 - C24875) * C47352 +
             (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
             C26025 * C36201) *
                C48573 +
            ((C23370 - C23371 + C23372 - C23373) * C47360 +
             (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
             C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
                C48376) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C47360 +
             (C24877 - C24876 + C24879 - C24878) * C48412 +
             (C24881 - C24880 + C24883 - C24882) * C47352 +
             (C24885 - C24884 + C24887 - C24886) * C48419 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36201) *
                C48573 +
            (C25474 * C47360 + C25475 * C48412 + C25476 * C47352 +
             C25477 * C48419 + (C25462 - C25463 + C25464 - C25465) * C47366 +
             (C25466 - C25467 + C25468 - C25469) * C36201) *
                C48376) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C47360 +
             (C23375 - C23374 + C23377 - C23376) * C48412 + C25474 * C47352 +
             C25475 * C48419 + C25476 * C47366 + C25477 * C36201) *
                C48573 +
            ((C23379 - C23378 + C23381 - C23380) * C47360 +
             (C23383 - C23382 + C23385 - C23384) * C48412 + C30113 * C47352 +
             C30114 * C48419 + (C25244 - C25245 + C25246 - C25247) * C47366 +
             (C25248 - C25249 + C25250 - C25251) * C36201) *
                C48376) *
               C339 +
           ((C25470 * C47360 + C25471 * C48412 + C25472 * C47352 +
             C25473 * C48419 + (C25463 - C25462 + C25465 - C25464) * C47366 +
             (C25467 - C25466 + C25469 - C25468) * C36201) *
                C48573 +
            (C29909 * C47360 + C29910 * C48412 +
             (C25245 - C25244 + C25247 - C25246) * C47352 +
             (C25249 - C25248 + C25251 - C25250) * C48419 +
             (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
              C23238 * C10055) *
                 C47366 +
             (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
              C23238 * C10059) *
                 C36201) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C47360 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48412 +
             (C24872 - C24873 + C24874 - C24875) * C47352 +
             (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
             C26025 * C36201) *
                C48573 +
            ((C23370 - C23371 + C23372 - C23373) * C47360 +
             (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
             C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
                C48376) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C47360 +
             (C24877 - C24876 + C24879 - C24878) * C48412 +
             (C24881 - C24880 + C24883 - C24882) * C47352 +
             (C24885 - C24884 + C24887 - C24886) * C48419 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36201) *
                C48573 +
            (C25474 * C47360 + C25475 * C48412 + C25476 * C47352 +
             C25477 * C48419 + (C25462 - C25463 + C25464 - C25465) * C47366 +
             (C25466 - C25467 + C25468 - C25469) * C36201) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C47360 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C48412 +
             (C24888 - C24889 + C24890 - C24891) * C47352 +
             (C24892 - C24893 + C24894 - C24895) * C48419 +
             (C24896 - C24897 + C24898 - C24899) * C47366 +
             (C24900 - C24901 + C24902 - C24903) * C36201) *
                C48573 +
            ((C23394 - C23395 + C23396 - C23397) * C47360 +
             (C23398 - C23399 + C23400 - C23401) * C48412 +
             (C24662 - C24663 + C24664 - C24665) * C47352 +
             (C24666 - C24667 + C24668 - C24669) * C48419 +
             (C24670 - C24671 + C24672 - C24673) * C47366 +
             (C24674 - C24675 + C24676 - C24677) * C36201) *
                C48376) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C47360 +
             (C24893 - C24892 + C24895 - C24894) * C48412 +
             (C24897 - C24896 + C24899 - C24898) * C47352 +
             (C24901 - C24900 + C24903 - C24902) * C48419 +
             (C33751 - C33750 + C33753 - C33752) * C47366 +
             (C33755 - C33754 + C33757 - C33756) * C36201) *
                C48573 +
            ((C24663 - C24662 + C24665 - C24664) * C47360 +
             (C24667 - C24666 + C24669 - C24668) * C48412 +
             (C24671 - C24670 + C24673 - C24672) * C47352 +
             (C24675 - C24674 + C24677 - C24676) * C48419 +
             (C23231 * C3164 - C23237 * C3161 + C48222 * C3165 -
              C23238 * C3162) *
                 C47366 +
             (C23231 * C3170 - C23237 * C3167 + C48222 * C3171 -
              C23238 * C3168) *
                 C36201) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C47360 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C48412 +
             (C24872 - C24873 + C24874 - C24875) * C47352 +
             (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
             C26025 * C36201) *
                C48573 +
            ((C23370 - C23371 + C23372 - C23373) * C47360 +
             (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
             C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
                C48376) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C47360 +
             (C24877 - C24876 + C24879 - C24878) * C48412 +
             (C24881 - C24880 + C24883 - C24882) * C47352 +
             (C24885 - C24884 + C24887 - C24886) * C48419 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36201) *
                C48573 +
            (C25474 * C47360 + C25475 * C48412 + C25476 * C47352 +
             C25477 * C48419 + (C25462 - C25463 + C25464 - C25465) * C47366 +
             (C25466 - C25467 + C25468 - C25469) * C36201) *
                C48376) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C47360 +
             (C23375 - C23374 + C23377 - C23376) * C48412 + C25474 * C47352 +
             C25475 * C48419 + C25476 * C47366 + C25477 * C36201) *
                C48573 +
            ((C23379 - C23378 + C23381 - C23380) * C47360 +
             (C23383 - C23382 + C23385 - C23384) * C48412 + C30113 * C47352 +
             C30114 * C48419 + (C25244 - C25245 + C25246 - C25247) * C47366 +
             (C25248 - C25249 + C25250 - C25251) * C36201) *
                C48376) *
               C721 +
           ((C25470 * C47360 + C25471 * C48412 + C25472 * C47352 +
             C25473 * C48419 + (C25463 - C25462 + C25465 - C25464) * C47366 +
             (C25467 - C25466 + C25469 - C25468) * C36201) *
                C48573 +
            (C29909 * C47360 + C29910 * C48412 +
             (C25245 - C25244 + C25247 - C25246) * C47352 +
             (C25249 - C25248 + C25251 - C25250) * C48419 +
             (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
              C23238 * C10055) *
                 C47366 +
             (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
              C23238 * C10059) *
                 C36201) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C47360 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48412 +
            (C24872 - C24873 + C24874 - C24875) * C47352 +
            (C24876 - C24877 + C24878 - C24879) * C48419 + C26024 * C47366 +
            C26025 * C36201) *
               C48573 +
           ((C23370 - C23371 + C23372 - C23373) * C47360 +
            (C23374 - C23375 + C23376 - C23377) * C48412 + C25470 * C47352 +
            C25471 * C48419 + C25472 * C47366 + C25473 * C36201) *
               C48376) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C47360 +
            (C24877 - C24876 + C24879 - C24878) * C48412 +
            (C24881 - C24880 + C24883 - C24882) * C47352 +
            (C24885 - C24884 + C24887 - C24886) * C48419 +
            (C26016 - C26017 + C26018 - C26019) * C47366 +
            (C26020 - C26021 + C26022 - C26023) * C36201) *
               C48573 +
           (C25474 * C47360 + C25475 * C48412 + C25476 * C47352 +
            C25477 * C48419 + (C25462 - C25463 + C25464 - C25465) * C47366 +
            (C25466 - C25467 + C25468 - C25469) * C36201) *
               C48376) *
              C868 +
          ((C26024 * C47360 + C26025 * C48412 + C34486 * C47352 +
            C34487 * C48419 + (C34479 - C34478 + C34481 - C34480) * C47366 +
            (C34483 - C34482 + C34485 - C34484) * C36201) *
               C48573 +
           (C25472 * C47360 + C25473 * C48412 +
            (C25463 - C25462 + C25465 - C25464) * C47352 +
            (C25467 - C25466 + C25469 - C25468) * C48419 +
            (C23231 * C10927 - C23237 * C10925 + C48222 * C17570 -
             C23238 * C17569) *
                C47366 +
            (C23231 * C10931 - C23237 * C10928 + C48222 * C17572 -
             C23238 * C17571) *
                C36201) *
               C48376) *
              C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C30748 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C30746 +
            (C24872 - C24873 + C24874 - C24875) * C30749 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48641 +
           ((C23370 - C23371 + C23372 - C23373) * C30748 +
            (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
            C25471 * C48416) *
               C48629 +
           (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
            C29910 * C48416) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C30748 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C30746 +
            (C24888 - C24889 + C24890 - C24891) * C30749 +
            (C24892 - C24893 + C24894 - C24895) * C48416) *
               C48641 +
           ((C23394 - C23395 + C23396 - C23397) * C30748 +
            (C23398 - C23399 + C23400 - C23401) * C30746 +
            (C24662 - C24663 + C24664 - C24665) * C30749 +
            (C24666 - C24667 + C24668 - C24669) * C48416) *
               C48629 +
           ((C23402 - C23403 + C23404 - C23405) * C30748 +
            (C23406 - C23407 + C23408 - C23409) * C30746 +
            (C29360 - C29361 + C29362 - C29363) * C30749 +
            (C29364 - C29365 + C29366 - C29367) * C48416) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C30748 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C30746 +
            (C23231 * C349 - C23237 * C343 + C48222 * C350 - C23238 * C344) *
                C30749 +
            (C23231 * C361 - C23237 * C354 + C48222 * C362 - C23238 * C355) *
                C48416) *
               C48641 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C30748 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C30746 +
            (C23231 * C626 - C23237 * C621 + C48222 * C627 - C23238 * C622) *
                C30749 +
            (C23231 * C636 - C23237 * C631 + C48222 * C637 - C23238 * C632) *
                C48416) *
               C48629 +
           ((C23231 * C524 - C23237 * C519 + C48222 * C525 - C23238 * C520) *
                C30748 +
            (C23231 * C534 - C23237 * C529 + C48222 * C535 - C23238 * C530) *
                C30746 +
            (C23231 * C1371 - C23237 * C1367 + C48222 * C1375 -
             C23238 * C1368) *
                C30749 +
            (C23231 * C1379 - C23237 * C1374 + C48222 * C1380 -
             C23238 * C1376) *
                C48416) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
            C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
               C30748 +
           (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
            C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
               C30746 +
           (C48647 * C347 - C22089 * C341 + C48640 * C348 - C22090 * C342 +
            C48627 * C349 - C22091 * C343 + C48610 * C350 - C22092 * C344) *
               C30749 +
           (C48647 * C359 - C22089 * C352 + C48640 * C360 - C22090 * C353 +
            C48627 * C361 - C22091 * C354 + C48610 * C362 - C22092 * C355) *
               C48416) *
              C48318 * C48300 * C48283 * C110 +
          ((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
            C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
               C30748 +
           (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
            C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
               C30746 +
           (C22089 * C342 - C48647 * C348 + C22090 * C343 - C48640 * C349 +
            C22091 * C344 - C48627 * C350 + C22092 * C345 - C48610 * C351) *
               C30749 +
           (C22089 * C353 - C48647 * C360 + C22090 * C354 - C48640 * C361 +
            C22091 * C355 - C48627 * C362 + C22092 * C356 - C48610 * C363) *
               C48416) *
              C48318 * C48300 * C48283 * C111 +
          ((C48647 * C128 - C22089 * C121 + C48640 * C129 - C22090 * C122 +
            C48627 * C130 - C22091 * C123 + C48610 * C136 - C22092 * C124) *
               C30748 +
           (C48647 * C142 - C22089 * C133 + C48640 * C143 - C22090 * C134 +
            C48627 * C144 - C22091 * C135 + C48610 * C145 - C22092 * C137) *
               C30746 +
           (C48647 * C349 - C22089 * C343 + C48640 * C350 - C22090 * C344 +
            C48627 * C351 - C22091 * C345 + C48610 * C357 - C22092 * C346) *
               C30749 +
           (C48647 * C361 - C22089 * C354 + C48640 * C362 - C22090 * C355 +
            C48627 * C363 - C22091 * C356 + C48610 * C364 - C22092 * C358) *
               C48416) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
               C33485 +
           (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
               C48649 +
           (C24872 - C24873 + C24874 - C24875) * C33486 +
           (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
           C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
           (C26021 - C26020 + C26023 - C26022) * C48622) *
              C48318 * C48300 * C48283 * C110 +
          ((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
               C33485 +
           (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
               C48649 +
           (C24888 - C24889 + C24890 - C24891) * C33486 +
           (C24892 - C24893 + C24894 - C24895) * C48646 +
           (C24896 - C24897 + C24898 - C24899) * C33487 +
           (C24900 - C24901 + C24902 - C24903) * C48637 +
           (C23237 * C2695 - C23231 * C2699 + C23238 * C2696 - C48222 * C2700) *
               C33488 +
           (C23237 * C2702 - C23231 * C2707 + C23238 * C2703 - C48222 * C2708) *
               C48622) *
              C48318 * C48300 * C48283 * C111 +
          ((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
               C33485 +
           (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
               C48649 +
           (C23231 * C349 - C23237 * C343 + C48222 * C350 - C23238 * C344) *
               C33486 +
           (C23231 * C361 - C23237 * C354 + C48222 * C362 - C23238 * C355) *
               C48646 +
           (C23231 * C877 - C23237 * C872 + C48222 * C878 - C23238 * C873) *
               C33487 +
           (C23231 * C887 - C23237 * C882 + C48222 * C888 - C23238 * C883) *
               C48637 +
           (C23231 * C2700 - C23237 * C2696 + C48222 * C2704 - C23238 * C2697) *
               C33488 +
           (C23231 * C2708 - C23237 * C2703 + C48222 * C2709 - C23238 * C2705) *
               C48622) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
             C29910 * C48416) *
                C48606) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C30748 +
             (C23399 - C23398 + C23401 - C23400) * C30746 +
             (C24663 - C24662 + C24665 - C24664) * C30749 +
             (C24667 - C24666 + C24669 - C24668) * C48416) *
                C48641 +
            ((C23403 - C23402 + C23405 - C23404) * C30748 +
             (C23407 - C23406 + C23409 - C23408) * C30746 +
             (C29361 - C29360 + C29363 - C29362) * C30749 +
             (C29365 - C29364 + C29367 - C29366) * C48416) *
                C48629 +
            ((C23411 - C23410 + C23413 - C23412) * C30748 +
             (C23415 - C23414 + C23417 - C23416) * C30746 +
             (C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C30749 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C48647 * C347 - C22089 * C341 + C48640 * C348 - C22090 * C342 +
             C48627 * C349 - C22091 * C343 + C48610 * C350 - C22092 * C344) *
                C30749 +
            (C48647 * C359 - C22089 * C352 + C48640 * C360 - C22090 * C353 +
             C48627 * C361 - C22091 * C354 + C48610 * C362 - C22092 * C355) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C22089 * C342 - C48647 * C348 + C22090 * C343 - C48640 * C349 +
             C22091 * C344 - C48627 * C350 + C22092 * C345 - C48610 * C351) *
                C30749 +
            (C22089 * C353 - C48647 * C360 + C22090 * C354 - C48640 * C361 +
             C22091 * C355 - C48627 * C362 + C22092 * C356 - C48610 * C363) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
             C22246) *
                C30748 +
            (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
             C22254) *
                C30746 +
            (C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
             C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                C30749 +
            (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
             C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C33485 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48649 +
            (C24872 - C24873 + C24874 - C24875) * C33486 +
            (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
            C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
            (C26021 - C26020 + C26023 - C26022) * C48622) *
               C48318 * C48300 * C229 +
           ((C23371 - C23370 + C23373 - C23372) * C33485 +
            (C23375 - C23374 + C23377 - C23376) * C48649 + C25474 * C33486 +
            C25475 * C48646 + C25476 * C33487 + C25477 * C48637 +
            (C25462 - C25463 + C25464 - C25465) * C33488 +
            (C25466 - C25467 + C25468 - C25469) * C48622) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C33485 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48649 +
            (C24888 - C24889 + C24890 - C24891) * C33486 +
            (C24892 - C24893 + C24894 - C24895) * C48646 +
            (C24896 - C24897 + C24898 - C24899) * C33487 +
            (C24900 - C24901 + C24902 - C24903) * C48637 +
            (C23237 * C2695 - C23231 * C2699 + C23238 * C2696 -
             C48222 * C2700) *
                C33488 +
            (C23237 * C2702 - C23231 * C2707 + C23238 * C2703 -
             C48222 * C2708) *
                C48622) *
               C48318 * C48300 * C229 +
           ((C23395 - C23394 + C23397 - C23396) * C33485 +
            (C23399 - C23398 + C23401 - C23400) * C48649 +
            (C24663 - C24662 + C24665 - C24664) * C33486 +
            (C24667 - C24666 + C24669 - C24668) * C48646 +
            (C24671 - C24670 + C24673 - C24672) * C33487 +
            (C24675 - C24674 + C24677 - C24676) * C48637 +
            (C23231 * C3164 - C23237 * C3161 + C48222 * C3165 -
             C23238 * C3162) *
                C33488 +
            (C23231 * C3170 - C23237 * C3167 + C48222 * C3171 -
             C23238 * C3168) *
                C48622) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
             C29910 * C48416) *
                C48606) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C30748 +
             (C24893 - C24892 + C24895 - C24894) * C30746 +
             (C24897 - C24896 + C24899 - C24898) * C30749 +
             (C24901 - C24900 + C24903 - C24902) * C48416) *
                C48641 +
            ((C24663 - C24662 + C24665 - C24664) * C30748 +
             (C24667 - C24666 + C24669 - C24668) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48416) *
                C48629 +
            ((C29361 - C29360 + C29363 - C29362) * C30748 +
             (C29365 - C29364 + C29367 - C29366) * C30746 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C30749 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C339 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C31027 - C31028 + C31029 - C31030 + C31031 - C31032 + C31033 -
             C31034) *
                C30749 +
            (C31035 - C31036 + C31037 - C31038 + C31039 - C31040 + C31041 -
             C31042) *
                C48416) *
               C48318 * C339 +
           ((C31028 - C31027 + C31030 - C31029 + C31032 - C31031 + C31034 -
             C31033) *
                C30748 +
            (C31036 - C31035 + C31038 - C31037 + C31040 - C31039 + C31042 -
             C31041) *
                C30746 +
            (C48647 * C876 - C22089 * C871 + C48640 * C877 - C22090 * C872 +
             C48627 * C878 - C22091 * C873 + C48610 * C879 - C22092 * C874) *
                C30749 +
            (C48647 * C886 - C22089 * C881 + C48640 * C887 - C22090 * C882 +
             C48627 * C888 - C22091 * C883 + C48610 * C889 - C22092 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C33485 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48649 +
            (C24872 - C24873 + C24874 - C24875) * C33486 +
            (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
            C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
            (C26021 - C26020 + C26023 - C26022) * C48622) *
               C48318 * C339 +
           ((C24873 - C24872 + C24875 - C24874) * C33485 +
            (C24877 - C24876 + C24879 - C24878) * C48649 +
            (C24881 - C24880 + C24883 - C24882) * C33486 +
            (C24885 - C24884 + C24887 - C24886) * C48646 +
            (C26016 - C26017 + C26018 - C26019) * C33487 +
            (C26020 - C26021 + C26022 - C26023) * C48637 +
            (C23237 * C3586 - C23231 * C3589 + C23238 * C3587 -
             C48222 * C3590) *
                C33488 +
            (C23237 * C3592 - C23231 * C3595 + C23238 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C33485 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48649 +
            (C24888 - C24889 + C24890 - C24891) * C33486 +
            (C24892 - C24893 + C24894 - C24895) * C48646 +
            (C24896 - C24897 + C24898 - C24899) * C33487 +
            (C24900 - C24901 + C24902 - C24903) * C48637 +
            (C33750 - C33751 + C33752 - C33753) * C33488 +
            (C33754 - C33755 + C33756 - C33757) * C48622) *
               C48318 * C339 +
           ((C24889 - C24888 + C24891 - C24890) * C33485 +
            (C24893 - C24892 + C24895 - C24894) * C48649 +
            (C24897 - C24896 + C24899 - C24898) * C33486 +
            (C24901 - C24900 + C24903 - C24902) * C48646 +
            (C33751 - C33750 + C33753 - C33752) * C33487 +
            (C33755 - C33754 + C33757 - C33756) * C48637 +
            (C23231 * C3590 - C23237 * C3587 + C48222 * C3591 -
             C23238 * C3588) *
                C33488 +
            (C23231 * C3596 - C23237 * C3593 + C48222 * C3597 -
             C23238 * C3594) *
                C48622) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
             C29910 * C48416) *
                C48606) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C30748 +
             (C23399 - C23398 + C23401 - C23400) * C30746 +
             (C24663 - C24662 + C24665 - C24664) * C30749 +
             (C24667 - C24666 + C24669 - C24668) * C48416) *
                C48641 +
            ((C23403 - C23402 + C23405 - C23404) * C30748 +
             (C23407 - C23406 + C23409 - C23408) * C30746 +
             (C29361 - C29360 + C29363 - C29362) * C30749 +
             (C29365 - C29364 + C29367 - C29366) * C48416) *
                C48629 +
            ((C23411 - C23410 + C23413 - C23412) * C30748 +
             (C23415 - C23414 + C23417 - C23416) * C30746 +
             (C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C30749 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C31027 - C31028 + C31029 - C31030 + C31031 - C31032 + C31033 -
             C31034) *
                C30749 +
            (C31035 - C31036 + C31037 - C31038 + C31039 - C31040 + C31041 -
             C31042) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
             C22246) *
                C30748 +
            (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
             C22254) *
                C30746 +
            (C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
             C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                C30749 +
            (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
             C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C33485 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48649 +
            (C24872 - C24873 + C24874 - C24875) * C33486 +
            (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
            C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
            (C26021 - C26020 + C26023 - C26022) * C48622) *
               C48318 * C48300 * C447 +
           ((C23371 - C23370 + C23373 - C23372) * C33485 +
            (C23375 - C23374 + C23377 - C23376) * C48649 + C25474 * C33486 +
            C25475 * C48646 + C25476 * C33487 + C25477 * C48637 +
            (C25462 - C25463 + C25464 - C25465) * C33488 +
            (C25466 - C25467 + C25468 - C25469) * C48622) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C33485 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48649 +
            (C24888 - C24889 + C24890 - C24891) * C33486 +
            (C24892 - C24893 + C24894 - C24895) * C48646 +
            (C24896 - C24897 + C24898 - C24899) * C33487 +
            (C24900 - C24901 + C24902 - C24903) * C48637 +
            (C33750 - C33751 + C33752 - C33753) * C33488 +
            (C33754 - C33755 + C33756 - C33757) * C48622) *
               C48318 * C48300 * C447 +
           ((C23395 - C23394 + C23397 - C23396) * C33485 +
            (C23399 - C23398 + C23401 - C23400) * C48649 +
            (C24663 - C24662 + C24665 - C24664) * C33486 +
            (C24667 - C24666 + C24669 - C24668) * C48646 +
            (C24671 - C24670 + C24673 - C24672) * C33487 +
            (C24675 - C24674 + C24677 - C24676) * C48637 +
            (C23231 * C3164 - C23237 * C3161 + C48222 * C3165 -
             C23238 * C3162) *
                C33488 +
            (C23231 * C3170 - C23237 * C3167 + C48222 * C3171 -
             C23238 * C3168) *
                C48622) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C30748 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C30746 +
            (C24872 - C24873 + C24874 - C24875) * C30749 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48641 +
           ((C23370 - C23371 + C23372 - C23373) * C30748 +
            (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
            C25471 * C48416) *
               C48629 +
           C32655 * C48606) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C30748 +
            (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
            C25475 * C48416) *
               C48641 +
           ((C23379 - C23378 + C23381 - C23380) * C30748 +
            (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
            C30114 * C48416) *
               C48629 +
           ((C23387 - C23386 + C23389 - C23388) * C30748 +
            (C23391 - C23390 + C23393 - C23392) * C30746 +
            (C23948 - C23949 + C23950 - C23951) * C30749 +
            (C23952 - C23953 + C23954 - C23955) * C48416) *
               C48606) *
              C48300 * C514 +
          (C32655 * C48641 +
           (C23794 * C30748 + C23795 * C30746 +
            (C23949 - C23948 + C23951 - C23950) * C30749 +
            (C23953 - C23952 + C23955 - C23954) * C48416) *
               C48629 +
           ((C23785 - C23784 + C23787 - C23786) * C30748 +
            (C23789 - C23788 + C23791 - C23790) * C30746 +
            (C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
             C23238 * C9114) *
                C30749 +
            (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
             C23238 * C9118) *
                C48416) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
            C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
               C30748 +
           (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
            C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
               C30746 +
           (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
            C31018) *
               C30749 +
           (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
            C31026) *
               C48416) *
              C48318 * C48300 * C513 +
          ((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
            C22230) *
               C30748 +
           (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
            C22238) *
               C30746 +
           (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
            C22767) *
               C30749 +
           (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
            C22775) *
               C48416) *
              C48318 * C48300 * C514 +
          ((C22615 - C22614 + C22617 - C22616 + C22619 - C22618 + C22621 -
            C22620) *
               C30748 +
           (C22623 - C22622 + C22625 - C22624 + C22627 - C22626 + C22629 -
            C22628) *
               C30746 +
           (C48647 * C1369 - C22089 * C1365 + C48640 * C1370 - C22090 * C1366 +
            C48627 * C1371 - C22091 * C1367 + C48610 * C1375 - C22092 * C1368) *
               C30749 +
           (C48647 * C1377 - C22089 * C1372 + C48640 * C1378 - C22090 * C1373 +
            C48627 * C1379 - C22091 * C1374 + C48610 * C1380 - C22092 * C1376) *
               C48416) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
               C33485 +
           (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
               C48649 +
           (C24872 - C24873 + C24874 - C24875) * C33486 +
           (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
           C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
           (C26021 - C26020 + C26023 - C26022) * C48622) *
              C48318 * C48300 * C513 +
          ((C23371 - C23370 + C23373 - C23372) * C33485 +
           (C23375 - C23374 + C23377 - C23376) * C48649 + C25474 * C33486 +
           C25475 * C48646 + C25476 * C33487 + C25477 * C48637 +
           (C25462 - C25463 + C25464 - C25465) * C33488 +
           (C25466 - C25467 + C25468 - C25469) * C48622) *
              C48318 * C48300 * C514 +
          (C23792 * C33485 + C23793 * C48649 + C29909 * C33486 +
           C29910 * C48646 + (C25245 - C25244 + C25247 - C25246) * C33487 +
           (C25249 - C25248 + C25251 - C25250) * C48637 +
           (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
            C23238 * C10055) *
               C33488 +
           (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
            C23238 * C10059) *
               C48622) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            C32655 * C48606) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C339 +
           ((C25470 * C30748 + C25471 * C30746 + C25472 * C30749 +
             C25473 * C48416) *
                C48641 +
            (C29909 * C30748 + C29910 * C30746 +
             (C25245 - C25244 + C25247 - C25246) * C30749 +
             (C25249 - C25248 + C25251 - C25250) * C48416) *
                C48629 +
            ((C23949 - C23948 + C23951 - C23950) * C30748 +
             (C23953 - C23952 + C23955 - C23954) * C30746 +
             (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
              C23238 * C9880) *
                 C30749 +
             (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
              C23238 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C339 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C447 +
          (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C339 +
           ((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
             C22766) *
                C30748 +
            (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
             C22774) *
                C30746 +
            (C48647 * C2264 - C22089 * C2258 + C48640 * C2265 - C22090 * C2259 +
             C48627 * C2266 - C22091 * C2260 + C48610 * C2545 -
             C22092 * C2544) *
                C30749 +
            (C48647 * C2276 - C22089 * C2267 + C48640 * C2277 - C22090 * C2268 +
             C48627 * C2278 - C22091 * C2269 + C48610 * C2547 -
             C22092 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C33485 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48649 +
            (C24872 - C24873 + C24874 - C24875) * C33486 +
            (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
            C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
            (C26021 - C26020 + C26023 - C26022) * C48622) *
               C48318 * C339 +
           ((C24873 - C24872 + C24875 - C24874) * C33485 +
            (C24877 - C24876 + C24879 - C24878) * C48649 +
            (C24881 - C24880 + C24883 - C24882) * C33486 +
            (C24885 - C24884 + C24887 - C24886) * C48646 +
            (C26016 - C26017 + C26018 - C26019) * C33487 +
            (C26020 - C26021 + C26022 - C26023) * C48637 +
            (C23237 * C3586 - C23231 * C3589 + C23238 * C3587 -
             C48222 * C3590) *
                C33488 +
            (C23237 * C3592 - C23231 * C3595 + C23238 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C447 +
          (((C23371 - C23370 + C23373 - C23372) * C33485 +
            (C23375 - C23374 + C23377 - C23376) * C48649 + C25474 * C33486 +
            C25475 * C48646 + C25476 * C33487 + C25477 * C48637 +
            (C25462 - C25463 + C25464 - C25465) * C33488 +
            (C25466 - C25467 + C25468 - C25469) * C48622) *
               C48318 * C339 +
           (C25470 * C33485 + C25471 * C48649 + C25472 * C33486 +
            C25473 * C48646 + (C25463 - C25462 + C25465 - C25464) * C33487 +
            (C25467 - C25466 + C25469 - C25468) * C48637 +
            (C23231 * C10927 - C23237 * C10925 + C48222 * C17570 -
             C23238 * C17569) *
                C33488 +
            (C23231 * C10931 - C23237 * C10928 + C48222 * C17572 -
             C23238 * C17571) *
                C48622) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            C32655 * C48606) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C30748 +
             (C24893 - C24892 + C24895 - C24894) * C30746 +
             (C24897 - C24896 + C24899 - C24898) * C30749 +
             (C24901 - C24900 + C24903 - C24902) * C48416) *
                C48641 +
            ((C24663 - C24662 + C24665 - C24664) * C30748 +
             (C24667 - C24666 + C24669 - C24668) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48416) *
                C48629 +
            ((C29361 - C29360 + C29363 - C29362) * C30748 +
             (C29365 - C29364 + C29367 - C29366) * C30746 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C30749 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C721 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C31027 - C31028 + C31029 - C31030 + C31031 - C31032 + C31033 -
             C31034) *
                C30749 +
            (C31035 - C31036 + C31037 - C31038 + C31039 - C31040 + C31041 -
             C31042) *
                C48416) *
               C48318 * C721 +
           ((C31028 - C31027 + C31030 - C31029 + C31032 - C31031 + C31034 -
             C31033) *
                C30748 +
            (C31036 - C31035 + C31038 - C31037 + C31040 - C31039 + C31042 -
             C31041) *
                C30746 +
            (C48647 * C876 - C22089 * C871 + C48640 * C877 - C22090 * C872 +
             C48627 * C878 - C22091 * C873 + C48610 * C879 - C22092 * C874) *
                C30749 +
            (C48647 * C886 - C22089 * C881 + C48640 * C887 - C22090 * C882 +
             C48627 * C888 - C22091 * C883 + C48610 * C889 - C22092 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C33485 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48649 +
            (C24872 - C24873 + C24874 - C24875) * C33486 +
            (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
            C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
            (C26021 - C26020 + C26023 - C26022) * C48622) *
               C48318 * C721 +
           ((C24873 - C24872 + C24875 - C24874) * C33485 +
            (C24877 - C24876 + C24879 - C24878) * C48649 +
            (C24881 - C24880 + C24883 - C24882) * C33486 +
            (C24885 - C24884 + C24887 - C24886) * C48646 +
            (C26016 - C26017 + C26018 - C26019) * C33487 +
            (C26020 - C26021 + C26022 - C26023) * C48637 +
            (C23237 * C3586 - C23231 * C3589 + C23238 * C3587 -
             C48222 * C3590) *
                C33488 +
            (C23237 * C3592 - C23231 * C3595 + C23238 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C33485 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C48649 +
            (C24888 - C24889 + C24890 - C24891) * C33486 +
            (C24892 - C24893 + C24894 - C24895) * C48646 +
            (C24896 - C24897 + C24898 - C24899) * C33487 +
            (C24900 - C24901 + C24902 - C24903) * C48637 +
            (C33750 - C33751 + C33752 - C33753) * C33488 +
            (C33754 - C33755 + C33756 - C33757) * C48622) *
               C48318 * C721 +
           ((C24889 - C24888 + C24891 - C24890) * C33485 +
            (C24893 - C24892 + C24895 - C24894) * C48649 +
            (C24897 - C24896 + C24899 - C24898) * C33486 +
            (C24901 - C24900 + C24903 - C24902) * C48646 +
            (C33751 - C33750 + C33753 - C33752) * C33487 +
            (C33755 - C33754 + C33757 - C33756) * C48637 +
            (C23231 * C3590 - C23237 * C3587 + C48222 * C3591 -
             C23238 * C3588) *
                C33488 +
            (C23231 * C3596 - C23237 * C3593 + C48222 * C3597 -
             C23238 * C3594) *
                C48622) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            C32655 * C48606) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C721 +
           ((C25470 * C30748 + C25471 * C30746 + C25472 * C30749 +
             C25473 * C48416) *
                C48641 +
            (C29909 * C30748 + C29910 * C30746 +
             (C25245 - C25244 + C25247 - C25246) * C30749 +
             (C25249 - C25248 + C25251 - C25250) * C48416) *
                C48629 +
            ((C23949 - C23948 + C23951 - C23950) * C30748 +
             (C23953 - C23952 + C23955 - C23954) * C30746 +
             (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
              C23238 * C9880) *
                 C30749 +
             (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
              C23238 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C721 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C229 +
          (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C721 +
           ((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
             C22766) *
                C30748 +
            (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
             C22774) *
                C30746 +
            (C48647 * C2264 - C22089 * C2258 + C48640 * C2265 - C22090 * C2259 +
             C48627 * C2266 - C22091 * C2260 + C48610 * C2545 -
             C22092 * C2544) *
                C30749 +
            (C48647 * C2276 - C22089 * C2267 + C48640 * C2277 - C22090 * C2268 +
             C48627 * C2278 - C22091 * C2269 + C48610 * C2547 -
             C22092 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C33485 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C48649 +
            (C24872 - C24873 + C24874 - C24875) * C33486 +
            (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
            C26025 * C48637 + (C26017 - C26016 + C26019 - C26018) * C33488 +
            (C26021 - C26020 + C26023 - C26022) * C48622) *
               C48318 * C721 +
           ((C24873 - C24872 + C24875 - C24874) * C33485 +
            (C24877 - C24876 + C24879 - C24878) * C48649 +
            (C24881 - C24880 + C24883 - C24882) * C33486 +
            (C24885 - C24884 + C24887 - C24886) * C48646 +
            (C26016 - C26017 + C26018 - C26019) * C33487 +
            (C26020 - C26021 + C26022 - C26023) * C48637 +
            (C23237 * C3586 - C23231 * C3589 + C23238 * C3587 -
             C48222 * C3590) *
                C33488 +
            (C23237 * C3592 - C23231 * C3595 + C23238 * C3593 -
             C48222 * C3596) *
                C48622) *
               C48318 * C48603) *
              C229 +
          (((C23371 - C23370 + C23373 - C23372) * C33485 +
            (C23375 - C23374 + C23377 - C23376) * C48649 + C25474 * C33486 +
            C25475 * C48646 + C25476 * C33487 + C25477 * C48637 +
            (C25462 - C25463 + C25464 - C25465) * C33488 +
            (C25466 - C25467 + C25468 - C25469) * C48622) *
               C48318 * C721 +
           (C25470 * C33485 + C25471 * C48649 + C25472 * C33486 +
            C25473 * C48646 + (C25463 - C25462 + C25465 - C25464) * C33487 +
            (C25467 - C25466 + C25469 - C25468) * C48637 +
            (C23231 * C10927 - C23237 * C10925 + C48222 * C17570 -
             C23238 * C17569) *
                C33488 +
            (C23231 * C10931 - C23237 * C10928 + C48222 * C17572 -
             C23238 * C17571) *
                C48622) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C30748 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C30746 +
            (C24872 - C24873 + C24874 - C24875) * C30749 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48641 +
           ((C23370 - C23371 + C23372 - C23373) * C30748 +
            (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
            C25471 * C48416) *
               C48629 +
           C32655 * C48606) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C30748 +
            (C24877 - C24876 + C24879 - C24878) * C30746 +
            (C24881 - C24880 + C24883 - C24882) * C30749 +
            (C24885 - C24884 + C24887 - C24886) * C48416) *
               C48641 +
           (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
            C25477 * C48416) *
               C48629 +
           (C30113 * C30748 + C30114 * C30746 +
            (C25244 - C25245 + C25246 - C25247) * C30749 +
            (C25248 - C25249 + C25250 - C25251) * C48416) *
               C48606) *
              C868 +
          ((C26024 * C30748 + C26025 * C30746 +
            (C26017 - C26016 + C26019 - C26018) * C30749 +
            (C26021 - C26020 + C26023 - C26022) * C48416) *
               C48641 +
           (C25472 * C30748 + C25473 * C30746 +
            (C25463 - C25462 + C25465 - C25464) * C30749 +
            (C25467 - C25466 + C25469 - C25468) * C48416) *
               C48629 +
           ((C25245 - C25244 + C25247 - C25246) * C30748 +
            (C25249 - C25248 + C25251 - C25250) * C30746 +
            (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
             C23238 * C10055) *
                C30749 +
            (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
             C23238 * C10059) *
                C48416) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
            C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
               C30748 +
           (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
            C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
               C30746 +
           (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
            C31018) *
               C30749 +
           (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
            C31026) *
               C48416) *
              C48318 * C867 +
          ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
            C31017) *
               C30748 +
           (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
            C31025) *
               C30746 +
           (C31759 - C31760 + C31761 - C31762 + C31763 - C31764 + C31765 -
            C31766) *
               C30749 +
           (C31767 - C31768 + C31769 - C31770 + C31771 - C31772 + C31773 -
            C31774) *
               C48416) *
              C48318 * C868 +
          ((C31760 - C31759 + C31762 - C31761 + C31764 - C31763 + C31766 -
            C31765) *
               C30748 +
           (C31768 - C31767 + C31770 - C31769 + C31772 - C31771 + C31774 -
            C31773) *
               C30746 +
           (C48647 * C2698 - C22089 * C2694 + C48640 * C2699 - C22090 * C2695 +
            C48627 * C2700 - C22091 * C2696 + C48610 * C2704 - C22092 * C2697) *
               C30749 +
           (C48647 * C2706 - C22089 * C2701 + C48640 * C2707 - C22090 * C2702 +
            C48627 * C2708 - C22091 * C2703 + C48610 * C2709 - C22092 * C2705) *
               C48416) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
               C33485 +
           (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
               C48649 +
           (C24872 - C24873 + C24874 - C24875) * C33486 +
           (C24876 - C24877 + C24878 - C24879) * C48646 + C26024 * C33487 +
           C26025 * C48637 + C34486 * C33488 + C34487 * C48622) *
              C48318 * C867 +
          ((C24873 - C24872 + C24875 - C24874) * C33485 +
           (C24877 - C24876 + C24879 - C24878) * C48649 +
           (C24881 - C24880 + C24883 - C24882) * C33486 +
           (C24885 - C24884 + C24887 - C24886) * C48646 +
           (C26016 - C26017 + C26018 - C26019) * C33487 +
           (C26020 - C26021 + C26022 - C26023) * C48637 +
           (C34478 - C34479 + C34480 - C34481) * C33488 +
           (C34482 - C34483 + C34484 - C34485) * C48622) *
              C48318 * C868 +
          (C26024 * C33485 + C26025 * C48649 + C34486 * C33486 +
           C34487 * C48646 + (C34479 - C34478 + C34481 - C34480) * C33487 +
           (C34483 - C34482 + C34485 - C34484) * C48637 +
           (C23231 * C17657 - C23237 * C17655 + C48222 * C17659 -
            C23238 * C17656) *
               C33488 +
           (C23231 * C17661 - C23237 * C17658 + C48222 * C17662 -
            C23238 * C17660) *
               C48622) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
            C26137 * C128 - C47239 * C121) *
               C47360 +
           (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
            C26137 * C142 - C47239 * C133) *
               C48412 +
           (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
           (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
           (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
           (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
              C48318 * C48300 * C48283 * C110 +
          ((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
            C47239 * C122 - C26137 * C129) *
               C47360 +
           (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
            C47239 * C134 - C26137 * C143) *
               C48412 +
           (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C47352 +
           (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48419 +
           (C47233 * C871 - C48217 * C876 + C47229 * C872 - C48225 * C877 +
            C47239 * C873 - C26137 * C878) *
               C47366 +
           (C47233 * C881 - C48217 * C886 + C47229 * C882 - C48225 * C887 +
            C47239 * C883 - C26137 * C888) *
               C36201) *
              C48318 * C48300 * C48283 * C111 +
          ((C48217 * C128 - C47233 * C121 + C48225 * C129 - C47229 * C122 +
            C26137 * C130 - C47239 * C123) *
               C47360 +
           (C48217 * C142 - C47233 * C133 + C48225 * C143 - C47229 * C134 +
            C26137 * C144 - C47239 * C135) *
               C48412 +
           (C48217 * C349 - C47233 * C343 + C48225 * C350 - C47229 * C344 +
            C26137 * C351 - C47239 * C345) *
               C47352 +
           (C48217 * C361 - C47233 * C354 + C48225 * C362 - C47229 * C355 +
            C26137 * C363 - C47239 * C356) *
               C48419 +
           (C48217 * C877 - C47233 * C872 + C48225 * C878 - C47229 * C873 +
            C26137 * C879 - C47239 * C874) *
               C47366 +
           (C48217 * C887 - C47233 * C882 + C48225 * C888 - C47229 * C883 +
            C26137 * C889 - C47239 * C884) *
               C36201) *
              C48318 * C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C47360 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48412 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
            (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
               C48318 * C48300 * C229 +
           ((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C47360 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48412 +
            C28472 * C47352 + C28473 * C48419 +
            (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C47366 +
            (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C36201) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
             C47239 * C122 - C26137 * C129) *
                C47360 +
            (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
             C47239 * C134 - C26137 * C143) *
                C48412 +
            (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C47352 +
            (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48419 +
            (C47233 * C871 - C48217 * C876 + C47229 * C872 - C48225 * C877 +
             C47239 * C873 - C26137 * C878) *
                C47366 +
            (C47233 * C881 - C48217 * C886 + C47229 * C882 - C48225 * C887 +
             C47239 * C883 - C26137 * C888) *
                C36201) *
               C48318 * C48300 * C229 +
           ((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C47360 +
            (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C48412 +
            (C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C47352 +
            (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48419 +
            (C48217 * C2265 - C47233 * C2259 + C48225 * C2266 - C47229 * C2260 +
             C26137 * C2545 - C47239 * C2544) *
                C47366 +
            (C48217 * C2277 - C47233 * C2268 + C48225 * C2278 - C47229 * C2269 +
             C26137 * C2547 - C47239 * C2546) *
                C36201) *
               C48318 * C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C47360 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48412 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
            (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
               C48318 * C339 +
           ((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C47360 +
            (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48412 +
            (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C47352 +
            (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48419 +
            (C47233 * C2694 - C48217 * C2698 + C47229 * C2695 - C48225 * C2699 +
             C47239 * C2696 - C26137 * C2700) *
                C47366 +
            (C47233 * C2701 - C48217 * C2706 + C47229 * C2702 - C48225 * C2707 +
             C47239 * C2703 - C26137 * C2708) *
                C36201) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
             C47239 * C122 - C26137 * C129) *
                C47360 +
            (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
             C47239 * C134 - C26137 * C143) *
                C48412 +
            (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C47352 +
            (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48419 +
            (C36498 - C36499 + C36500 - C36501 + C36502 - C36503) * C47366 +
            (C36504 - C36505 + C36506 - C36507 + C36508 - C36509) * C36201) *
               C48318 * C339 +
           ((C27897 - C27896 + C27899 - C27898 + C27901 - C27900) * C47360 +
            (C27903 - C27902 + C27905 - C27904 + C27907 - C27906) * C48412 +
            (C36499 - C36498 + C36501 - C36500 + C36503 - C36502) * C47352 +
            (C36505 - C36504 + C36507 - C36506 + C36509 - C36508) * C48419 +
            (C48217 * C2699 - C47233 * C2695 + C48225 * C2700 - C47229 * C2696 +
             C26137 * C2704 - C47239 * C2697) *
                C47366 +
            (C48217 * C2707 - C47233 * C2702 + C48225 * C2708 - C47229 * C2703 +
             C26137 * C2709 - C47239 * C2705) *
                C36201) *
               C48318 * C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C47360 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48412 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
            (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
               C48318 * C48300 * C447 +
           ((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C47360 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48412 +
            C28472 * C47352 + C28473 * C48419 +
            (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C47366 +
            (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C36201) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
             C47239 * C122 - C26137 * C129) *
                C47360 +
            (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
             C47239 * C134 - C26137 * C143) *
                C48412 +
            (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C47352 +
            (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48419 +
            (C36498 - C36499 + C36500 - C36501 + C36502 - C36503) * C47366 +
            (C36504 - C36505 + C36506 - C36507 + C36508 - C36509) * C36201) *
               C48318 * C48300 * C447 +
           ((C26316 - C26315 + C26318 - C26317 + C26320 - C26319) * C47360 +
            (C26322 - C26321 + C26324 - C26323 + C26326 - C26325) * C48412 +
            (C27679 - C27678 + C27681 - C27680 + C27683 - C27682) * C47352 +
            (C27685 - C27684 + C27687 - C27686 + C27689 - C27688) * C48419 +
            (C48217 * C2265 - C47233 * C2259 + C48225 * C2266 - C47229 * C2260 +
             C26137 * C2545 - C47239 * C2544) *
                C47366 +
            (C48217 * C2277 - C47233 * C2268 + C48225 * C2278 - C47229 * C2269 +
             C26137 * C2547 - C47239 * C2546) *
                C36201) *
               C48318 * C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
            C26137 * C128 - C47239 * C121) *
               C47360 +
           (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
            C26137 * C142 - C47239 * C133) *
               C48412 +
           (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
           (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
           (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
           (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
              C48318 * C48300 * C513 +
          ((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C47360 +
           (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48412 +
           C28472 * C47352 + C28473 * C48419 +
           (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C47366 +
           (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C36201) *
              C48318 * C48300 * C514 +
          (C26761 * C47360 + C26762 * C48412 +
           (C26925 - C26924 + C26927 - C26926 + C26929 - C26928) * C47352 +
           (C26931 - C26930 + C26933 - C26932 + C26935 - C26934) * C48419 +
           (C48217 * C2270 - C47233 * C2261 + C48225 * C2271 - C47229 * C2262 +
            C26137 * C2272 - C47239 * C2263) *
               C47366 +
           (C48217 * C2279 - C47233 * C2273 + C48225 * C2280 - C47229 * C2274 +
            C26137 * C2281 - C47239 * C2275) *
               C36201) *
              C48318 * C48300 * C515) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C47360 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48412 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
            (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
               C48318 * C339 +
           ((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C47360 +
            (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48412 +
            (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C47352 +
            (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48419 +
            (C47233 * C2694 - C48217 * C2698 + C47229 * C2695 - C48225 * C2699 +
             C47239 * C2696 - C26137 * C2700) *
                C47366 +
            (C47233 * C2701 - C48217 * C2706 + C47229 * C2702 - C48225 * C2707 +
             C47239 * C2703 - C26137 * C2708) *
                C36201) *
               C48318 * C48603) *
              C447 +
          (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C47360 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48412 +
            C28472 * C47352 + C28473 * C48419 +
            (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C47366 +
            (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C36201) *
               C48318 * C339 +
           (C28470 * C47360 + C28471 * C48412 +
            (C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C47352 +
            (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48419 +
            (C48217 * C3163 - C47233 * C3160 + C48225 * C3164 - C47229 * C3161 +
             C26137 * C3165 - C47239 * C3162) *
                C47366 +
            (C48217 * C3169 - C47233 * C3166 + C48225 * C3170 - C47229 * C3167 +
             C26137 * C3171 - C47239 * C3168) *
                C36201) *
               C48318 * C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C47360 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48412 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
            (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
               C48318 * C721 +
           ((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C47360 +
            (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48412 +
            (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C47352 +
            (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48419 +
            (C47233 * C2694 - C48217 * C2698 + C47229 * C2695 - C48225 * C2699 +
             C47239 * C2696 - C26137 * C2700) *
                C47366 +
            (C47233 * C2701 - C48217 * C2706 + C47229 * C2702 - C48225 * C2707 +
             C47239 * C2703 - C26137 * C2708) *
                C36201) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C47233 * C120 - C48217 * C127 + C47229 * C121 - C48225 * C128 +
             C47239 * C122 - C26137 * C129) *
                C47360 +
            (C47233 * C132 - C48217 * C141 + C47229 * C133 - C48225 * C142 +
             C47239 * C134 - C26137 * C143) *
                C48412 +
            (C27896 - C27897 + C27898 - C27899 + C27900 - C27901) * C47352 +
            (C27902 - C27903 + C27904 - C27905 + C27906 - C27907) * C48419 +
            (C36498 - C36499 + C36500 - C36501 + C36502 - C36503) * C47366 +
            (C36504 - C36505 + C36506 - C36507 + C36508 - C36509) * C36201) *
               C48318 * C721 +
           ((C27897 - C27896 + C27899 - C27898 + C27901 - C27900) * C47360 +
            (C27903 - C27902 + C27905 - C27904 + C27907 - C27906) * C48412 +
            (C36499 - C36498 + C36501 - C36500 + C36503 - C36502) * C47352 +
            (C36505 - C36504 + C36507 - C36506 + C36509 - C36508) * C48419 +
            (C48217 * C2699 - C47233 * C2695 + C48225 * C2700 - C47229 * C2696 +
             C26137 * C2704 - C47239 * C2697) *
                C47366 +
            (C48217 * C2707 - C47233 * C2702 + C48225 * C2708 - C47229 * C2703 +
             C26137 * C2709 - C47239 * C2705) *
                C36201) *
               C48318 * C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
             C26137 * C128 - C47239 * C121) *
                C47360 +
            (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
             C26137 * C142 - C47239 * C133) *
                C48412 +
            (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
            (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
            (C29009 - C29008 + C29011 - C29010 + C29013 - C29012) * C47366 +
            (C29015 - C29014 + C29017 - C29016 + C29019 - C29018) * C36201) *
               C48318 * C721 +
           ((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C47360 +
            (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48412 +
            (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C47352 +
            (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48419 +
            (C47233 * C2694 - C48217 * C2698 + C47229 * C2695 - C48225 * C2699 +
             C47239 * C2696 - C26137 * C2700) *
                C47366 +
            (C47233 * C2701 - C48217 * C2706 + C47229 * C2702 - C48225 * C2707 +
             C47239 * C2703 - C26137 * C2708) *
                C36201) *
               C48318 * C48603) *
              C229 +
          (((C26292 - C26291 + C26294 - C26293 + C26296 - C26295) * C47360 +
            (C26298 - C26297 + C26300 - C26299 + C26302 - C26301) * C48412 +
            C28472 * C47352 + C28473 * C48419 +
            (C28454 - C28455 + C28456 - C28457 + C28458 - C28459) * C47366 +
            (C28460 - C28461 + C28462 - C28463 + C28464 - C28465) * C36201) *
               C48318 * C721 +
           (C28470 * C47360 + C28471 * C48412 +
            (C28455 - C28454 + C28457 - C28456 + C28459 - C28458) * C47352 +
            (C28461 - C28460 + C28463 - C28462 + C28465 - C28464) * C48419 +
            (C48217 * C3163 - C47233 * C3160 + C48225 * C3164 - C47229 * C3161 +
             C26137 * C3165 - C47239 * C3162) *
                C47366 +
            (C48217 * C3169 - C47233 * C3166 + C48225 * C3170 - C47229 * C3167 +
             C26137 * C3171 - C47239 * C3168) *
                C36201) *
               C48318 * C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48217 * C126 - C47233 * C119 + C48225 * C127 - C47229 * C120 +
            C26137 * C128 - C47239 * C121) *
               C47360 +
           (C48217 * C140 - C47233 * C131 + C48225 * C141 - C47229 * C132 +
            C26137 * C142 - C47239 * C133) *
               C48412 +
           (C27884 - C27885 + C27886 - C27887 + C27888 - C27889) * C47352 +
           (C27890 - C27891 + C27892 - C27893 + C27894 - C27895) * C48419 +
           C37334 * C47366 + C37335 * C36201) *
              C48318 * C867 +
          ((C27885 - C27884 + C27887 - C27886 + C27889 - C27888) * C47360 +
           (C27891 - C27890 + C27893 - C27892 + C27895 - C27894) * C48412 +
           (C29008 - C29009 + C29010 - C29011 + C29012 - C29013) * C47352 +
           (C29014 - C29015 + C29016 - C29017 + C29018 - C29019) * C48419 +
           (C37320 - C37321 + C37322 - C37323 + C37324 - C37325) * C47366 +
           (C37326 - C37327 + C37328 - C37329 + C37330 - C37331) * C36201) *
              C48318 * C868 +
          (C37334 * C47360 + C37335 * C48412 +
           (C37321 - C37320 + C37323 - C37322 + C37325 - C37324) * C47352 +
           (C37327 - C37326 + C37329 - C37328 + C37331 - C37330) * C48419 +
           (C48217 * C3589 - C47233 * C3586 + C48225 * C3590 - C47229 * C3587 +
            C26137 * C3591 - C47239 * C3588) *
               C47366 +
           (C48217 * C3595 - C47233 * C3592 + C48225 * C3596 - C47229 * C3593 +
            C26137 * C3597 - C47239 * C3594) *
               C36201) *
              C48318 * C869) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
            C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
               C30748 +
           (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
            C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
               C30746 +
           (C48647 * C347 - C22089 * C341 + C48640 * C348 - C22090 * C342 +
            C48627 * C349 - C22091 * C343 + C48610 * C350 - C22092 * C344) *
               C30749 +
           (C48647 * C359 - C22089 * C352 + C48640 * C360 - C22090 * C353 +
            C48627 * C361 - C22091 * C354 + C48610 * C362 - C22092 * C355) *
               C48416) *
              C48318 * C48300 * C48283 * C110 +
          ((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
            C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
               C30748 +
           (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
            C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
               C30746 +
           (C22089 * C342 - C48647 * C348 + C22090 * C343 - C48640 * C349 +
            C22091 * C344 - C48627 * C350 + C22092 * C345 - C48610 * C351) *
               C30749 +
           (C22089 * C353 - C48647 * C360 + C22090 * C354 - C48640 * C361 +
            C22091 * C355 - C48627 * C362 + C22092 * C356 - C48610 * C363) *
               C48416) *
              C48318 * C48300 * C48283 * C111 +
          ((C48647 * C128 - C22089 * C121 + C48640 * C129 - C22090 * C122 +
            C48627 * C130 - C22091 * C123 + C48610 * C136 - C22092 * C124) *
               C30748 +
           (C48647 * C142 - C22089 * C133 + C48640 * C143 - C22090 * C134 +
            C48627 * C144 - C22091 * C135 + C48610 * C145 - C22092 * C137) *
               C30746 +
           (C48647 * C349 - C22089 * C343 + C48640 * C350 - C22090 * C344 +
            C48627 * C351 - C22091 * C345 + C48610 * C357 - C22092 * C346) *
               C30749 +
           (C48647 * C361 - C22089 * C354 + C48640 * C362 - C22090 * C355 +
            C48627 * C363 - C22091 * C356 + C48610 * C364 - C22092 * C358) *
               C48416) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C30748 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C30746 +
            (C24872 - C24873 + C24874 - C24875) * C30749 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48641 +
           ((C23370 - C23371 + C23372 - C23373) * C30748 +
            (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
            C25471 * C48416) *
               C48629 +
           (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
            C29910 * C48416) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                C30748 +
            (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                C30746 +
            (C24888 - C24889 + C24890 - C24891) * C30749 +
            (C24892 - C24893 + C24894 - C24895) * C48416) *
               C48641 +
           ((C23394 - C23395 + C23396 - C23397) * C30748 +
            (C23398 - C23399 + C23400 - C23401) * C30746 +
            (C24662 - C24663 + C24664 - C24665) * C30749 +
            (C24666 - C24667 + C24668 - C24669) * C48416) *
               C48629 +
           ((C23402 - C23403 + C23404 - C23405) * C30748 +
            (C23406 - C23407 + C23408 - C23409) * C30746 +
            (C29360 - C29361 + C29362 - C29363) * C30749 +
            (C29364 - C29365 + C29366 - C29367) * C48416) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C23231 * C128 - C23237 * C121 + C48222 * C129 - C23238 * C122) *
                C30748 +
            (C23231 * C142 - C23237 * C133 + C48222 * C143 - C23238 * C134) *
                C30746 +
            (C23231 * C349 - C23237 * C343 + C48222 * C350 - C23238 * C344) *
                C30749 +
            (C23231 * C361 - C23237 * C354 + C48222 * C362 - C23238 * C355) *
                C48416) *
               C48641 +
           ((C23231 * C241 - C23237 * C235 + C48222 * C242 - C23238 * C236) *
                C30748 +
            (C23231 * C253 - C23237 * C246 + C48222 * C254 - C23238 * C247) *
                C30746 +
            (C23231 * C626 - C23237 * C621 + C48222 * C627 - C23238 * C622) *
                C30749 +
            (C23231 * C636 - C23237 * C631 + C48222 * C637 - C23238 * C632) *
                C48416) *
               C48629 +
           ((C23231 * C524 - C23237 * C519 + C48222 * C525 - C23238 * C520) *
                C30748 +
            (C23231 * C534 - C23237 * C529 + C48222 * C535 - C23238 * C530) *
                C30746 +
            (C23231 * C1371 - C23237 * C1367 + C48222 * C1375 -
             C23238 * C1368) *
                C30749 +
            (C23231 * C1379 - C23237 * C1374 + C48222 * C1380 -
             C23238 * C1376) *
                C48416) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C48647 * C347 - C22089 * C341 + C48640 * C348 - C22090 * C342 +
             C48627 * C349 - C22091 * C343 + C48610 * C350 - C22092 * C344) *
                C30749 +
            (C48647 * C359 - C22089 * C352 + C48640 * C360 - C22090 * C353 +
             C48627 * C361 - C22091 * C354 + C48610 * C362 - C22092 * C355) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C22089 * C342 - C48647 * C348 + C22090 * C343 - C48640 * C349 +
             C22091 * C344 - C48627 * C350 + C22092 * C345 - C48610 * C351) *
                C30749 +
            (C22089 * C353 - C48647 * C360 + C22090 * C354 - C48640 * C361 +
             C22091 * C355 - C48627 * C362 + C22092 * C356 - C48610 * C363) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
             C22246) *
                C30748 +
            (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
             C22254) *
                C30746 +
            (C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
             C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                C30749 +
            (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
             C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
             C29910 * C48416) *
                C48606) *
               C48300 * C229 +
           (((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C48300 * C229 +
           (((C23395 - C23394 + C23397 - C23396) * C30748 +
             (C23399 - C23398 + C23401 - C23400) * C30746 +
             (C24663 - C24662 + C24665 - C24664) * C30749 +
             (C24667 - C24666 + C24669 - C24668) * C48416) *
                C48641 +
            ((C23403 - C23402 + C23405 - C23404) * C30748 +
             (C23407 - C23406 + C23409 - C23408) * C30746 +
             (C29361 - C29360 + C29363 - C29362) * C30749 +
             (C29365 - C29364 + C29367 - C29366) * C48416) *
                C48629 +
            ((C23411 - C23410 + C23413 - C23412) * C30748 +
             (C23415 - C23414 + C23417 - C23416) * C30746 +
             (C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C30749 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C339 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C31027 - C31028 + C31029 - C31030 + C31031 - C31032 + C31033 -
             C31034) *
                C30749 +
            (C31035 - C31036 + C31037 - C31038 + C31039 - C31040 + C31041 -
             C31042) *
                C48416) *
               C48318 * C339 +
           ((C31028 - C31027 + C31030 - C31029 + C31032 - C31031 + C31034 -
             C31033) *
                C30748 +
            (C31036 - C31035 + C31038 - C31037 + C31040 - C31039 + C31042 -
             C31041) *
                C30746 +
            (C48647 * C876 - C22089 * C871 + C48640 * C877 - C22090 * C872 +
             C48627 * C878 - C22091 * C873 + C48610 * C879 - C22092 * C874) *
                C30749 +
            (C48647 * C886 - C22089 * C881 + C48640 * C887 - C22090 * C882 +
             C48627 * C888 - C22091 * C883 + C48610 * C889 - C22092 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
             C29910 * C48416) *
                C48606) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C30748 +
             (C24893 - C24892 + C24895 - C24894) * C30746 +
             (C24897 - C24896 + C24899 - C24898) * C30749 +
             (C24901 - C24900 + C24903 - C24902) * C48416) *
                C48641 +
            ((C24663 - C24662 + C24665 - C24664) * C30748 +
             (C24667 - C24666 + C24669 - C24668) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48416) *
                C48629 +
            ((C29361 - C29360 + C29363 - C29362) * C30748 +
             (C29365 - C29364 + C29367 - C29366) * C30746 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C30749 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C31027 - C31028 + C31029 - C31030 + C31031 - C31032 + C31033 -
             C31034) *
                C30749 +
            (C31035 - C31036 + C31037 - C31038 + C31039 - C31040 + C31041 -
             C31042) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C22241 - C22240 + C22243 - C22242 + C22245 - C22244 + C22247 -
             C22246) *
                C30748 +
            (C22249 - C22248 + C22251 - C22250 + C22253 - C22252 + C22255 -
             C22254) *
                C30746 +
            (C48647 * C625 - C22089 * C620 + C48640 * C626 - C22090 * C621 +
             C48627 * C627 - C22091 * C622 + C48610 * C628 - C22092 * C623) *
                C30749 +
            (C48647 * C635 - C22089 * C630 + C48640 * C636 - C22090 * C631 +
             C48627 * C637 - C22091 * C632 + C48610 * C638 - C22092 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            (C23792 * C30748 + C23793 * C30746 + C29909 * C30749 +
             C29910 * C48416) *
                C48606) *
               C48300 * C447 +
           (((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C48300 * C447 +
           (((C23395 - C23394 + C23397 - C23396) * C30748 +
             (C23399 - C23398 + C23401 - C23400) * C30746 +
             (C24663 - C24662 + C24665 - C24664) * C30749 +
             (C24667 - C24666 + C24669 - C24668) * C48416) *
                C48641 +
            ((C23403 - C23402 + C23405 - C23404) * C30748 +
             (C23407 - C23406 + C23409 - C23408) * C30746 +
             (C29361 - C29360 + C29363 - C29362) * C30749 +
             (C29365 - C29364 + C29367 - C29366) * C48416) *
                C48629 +
            ((C23411 - C23410 + C23413 - C23412) * C30748 +
             (C23415 - C23414 + C23417 - C23416) * C30746 +
             (C23231 * C1824 - C23237 * C1821 + C48222 * C1825 -
              C23238 * C1822) *
                 C30749 +
             (C23231 * C1830 - C23237 * C1827 + C48222 * C1831 -
              C23238 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
            C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
               C30748 +
           (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
            C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
               C30746 +
           (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
            C31018) *
               C30749 +
           (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
            C31026) *
               C48416) *
              C48318 * C48300 * C513 +
          ((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
            C22230) *
               C30748 +
           (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
            C22238) *
               C30746 +
           (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
            C22767) *
               C30749 +
           (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
            C22775) *
               C48416) *
              C48318 * C48300 * C514 +
          ((C22615 - C22614 + C22617 - C22616 + C22619 - C22618 + C22621 -
            C22620) *
               C30748 +
           (C22623 - C22622 + C22625 - C22624 + C22627 - C22626 + C22629 -
            C22628) *
               C30746 +
           (C48647 * C1369 - C22089 * C1365 + C48640 * C1370 - C22090 * C1366 +
            C48627 * C1371 - C22091 * C1367 + C48610 * C1375 - C22092 * C1368) *
               C30749 +
           (C48647 * C1377 - C22089 * C1372 + C48640 * C1378 - C22090 * C1373 +
            C48627 * C1379 - C22091 * C1374 + C48610 * C1380 - C22092 * C1376) *
               C48416) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C30748 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C30746 +
            (C24872 - C24873 + C24874 - C24875) * C30749 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48641 +
           ((C23370 - C23371 + C23372 - C23373) * C30748 +
            (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
            C25471 * C48416) *
               C48629 +
           C32655 * C48606) *
              C48300 * C513 +
          (((C23371 - C23370 + C23373 - C23372) * C30748 +
            (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
            C25475 * C48416) *
               C48641 +
           ((C23379 - C23378 + C23381 - C23380) * C30748 +
            (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
            C30114 * C48416) *
               C48629 +
           ((C23387 - C23386 + C23389 - C23388) * C30748 +
            (C23391 - C23390 + C23393 - C23392) * C30746 +
            (C23948 - C23949 + C23950 - C23951) * C30749 +
            (C23952 - C23953 + C23954 - C23955) * C48416) *
               C48606) *
              C48300 * C514 +
          (C32655 * C48641 +
           (C23794 * C30748 + C23795 * C30746 +
            (C23949 - C23948 + C23951 - C23950) * C30749 +
            (C23953 - C23952 + C23955 - C23954) * C48416) *
               C48629 +
           ((C23785 - C23784 + C23787 - C23786) * C30748 +
            (C23789 - C23788 + C23791 - C23790) * C30746 +
            (C23231 * C9115 - C23237 * C9113 + C48222 * C9117 -
             C23238 * C9114) *
                C30749 +
            (C23231 * C9119 - C23237 * C9116 + C48222 * C9120 -
             C23238 * C9118) *
                C48416) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C339 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C447 +
          (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C339 +
           ((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
             C22766) *
                C30748 +
            (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
             C22774) *
                C30746 +
            (C48647 * C2264 - C22089 * C2258 + C48640 * C2265 - C22090 * C2259 +
             C48627 * C2266 - C22091 * C2260 + C48610 * C2545 -
             C22092 * C2544) *
                C30749 +
            (C48647 * C2276 - C22089 * C2267 + C48640 * C2277 - C22090 * C2268 +
             C48627 * C2278 - C22091 * C2269 + C48610 * C2547 -
             C22092 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            C32655 * C48606) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C447 +
          ((((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C339 +
           ((C25470 * C30748 + C25471 * C30746 + C25472 * C30749 +
             C25473 * C48416) *
                C48641 +
            (C29909 * C30748 + C29910 * C30746 +
             (C25245 - C25244 + C25247 - C25246) * C30749 +
             (C25249 - C25248 + C25251 - C25250) * C48416) *
                C48629 +
            ((C23949 - C23948 + C23951 - C23950) * C30748 +
             (C23953 - C23952 + C23955 - C23954) * C30746 +
             (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
              C23238 * C9880) *
                 C30749 +
             (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
              C23238 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C721 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C22089 * C120 - C48647 * C127 + C22090 * C121 - C48640 * C128 +
             C22091 * C122 - C48627 * C129 + C22092 * C123 - C48610 * C130) *
                C30748 +
            (C22089 * C132 - C48647 * C141 + C22090 * C133 - C48640 * C142 +
             C22091 * C134 - C48627 * C143 + C22092 * C135 - C48610 * C144) *
                C30746 +
            (C31027 - C31028 + C31029 - C31030 + C31031 - C31032 + C31033 -
             C31034) *
                C30749 +
            (C31035 - C31036 + C31037 - C31038 + C31039 - C31040 + C31041 -
             C31042) *
                C48416) *
               C48318 * C721 +
           ((C31028 - C31027 + C31030 - C31029 + C31032 - C31031 + C31034 -
             C31033) *
                C30748 +
            (C31036 - C31035 + C31038 - C31037 + C31040 - C31039 + C31042 -
             C31041) *
                C30746 +
            (C48647 * C876 - C22089 * C871 + C48640 * C877 - C22090 * C872 +
             C48627 * C878 - C22091 * C873 + C48610 * C879 - C22092 * C874) *
                C30749 +
            (C48647 * C886 - C22089 * C881 + C48640 * C887 - C22090 * C882 +
             C48627 * C888 - C22091 * C883 + C48610 * C889 - C22092 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            C32655 * C48606) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C23237 * C120 - C23231 * C127 + C23238 * C121 - C48222 * C128) *
                 C30748 +
             (C23237 * C132 - C23231 * C141 + C23238 * C133 - C48222 * C142) *
                 C30746 +
             (C24888 - C24889 + C24890 - C24891) * C30749 +
             (C24892 - C24893 + C24894 - C24895) * C48416) *
                C48641 +
            ((C23394 - C23395 + C23396 - C23397) * C30748 +
             (C23398 - C23399 + C23400 - C23401) * C30746 +
             (C24662 - C24663 + C24664 - C24665) * C30749 +
             (C24666 - C24667 + C24668 - C24669) * C48416) *
                C48629 +
            ((C23402 - C23403 + C23404 - C23405) * C30748 +
             (C23406 - C23407 + C23408 - C23409) * C30746 +
             (C29360 - C29361 + C29362 - C29363) * C30749 +
             (C29364 - C29365 + C29366 - C29367) * C48416) *
                C48606) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C30748 +
             (C24893 - C24892 + C24895 - C24894) * C30746 +
             (C24897 - C24896 + C24899 - C24898) * C30749 +
             (C24901 - C24900 + C24903 - C24902) * C48416) *
                C48641 +
            ((C24663 - C24662 + C24665 - C24664) * C30748 +
             (C24667 - C24666 + C24669 - C24668) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48416) *
                C48629 +
            ((C29361 - C29360 + C29363 - C29362) * C30748 +
             (C29365 - C29364 + C29367 - C29366) * C30746 +
             (C23231 * C2271 - C23237 * C2262 + C48222 * C2272 -
              C23238 * C2263) *
                 C30749 +
             (C23231 * C2280 - C23237 * C2274 + C48222 * C2281 -
              C23238 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
             C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
                C30748 +
            (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
             C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
                C30746 +
            (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
             C31018) *
                C30749 +
            (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
             C31026) *
                C48416) *
               C48318 * C721 +
           ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
             C31017) *
                C30748 +
            (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
             C31025) *
                C30746 +
            (C22089 * C870 - C48647 * C875 + C22090 * C871 - C48640 * C876 +
             C22091 * C872 - C48627 * C877 + C22092 * C873 - C48610 * C878) *
                C30749 +
            (C22089 * C880 - C48647 * C885 + C22090 * C881 - C48640 * C886 +
             C22091 * C882 - C48627 * C887 + C22092 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C229 +
          (((C22225 - C22224 + C22227 - C22226 + C22229 - C22228 + C22231 -
             C22230) *
                C30748 +
            (C22233 - C22232 + C22235 - C22234 + C22237 - C22236 + C22239 -
             C22238) *
                C30746 +
            (C22760 - C22761 + C22762 - C22763 + C22764 - C22765 + C22766 -
             C22767) *
                C30749 +
            (C22768 - C22769 + C22770 - C22771 + C22772 - C22773 + C22774 -
             C22775) *
                C48416) *
               C48318 * C721 +
           ((C22761 - C22760 + C22763 - C22762 + C22765 - C22764 + C22767 -
             C22766) *
                C30748 +
            (C22769 - C22768 + C22771 - C22770 + C22773 - C22772 + C22775 -
             C22774) *
                C30746 +
            (C48647 * C2264 - C22089 * C2258 + C48640 * C2265 - C22090 * C2259 +
             C48627 * C2266 - C22091 * C2260 + C48610 * C2545 -
             C22092 * C2544) *
                C30749 +
            (C48647 * C2276 - C22089 * C2267 + C48640 * C2277 - C22090 * C2268 +
             C48627 * C2278 - C22091 * C2269 + C48610 * C2547 -
             C22092 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                 C30748 +
             (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                 C30746 +
             (C24872 - C24873 + C24874 - C24875) * C30749 +
             (C24876 - C24877 + C24878 - C24879) * C48416) *
                C48641 +
            ((C23370 - C23371 + C23372 - C23373) * C30748 +
             (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
             C25471 * C48416) *
                C48629 +
            C32655 * C48606) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C30748 +
             (C24877 - C24876 + C24879 - C24878) * C30746 +
             (C24881 - C24880 + C24883 - C24882) * C30749 +
             (C24885 - C24884 + C24887 - C24886) * C48416) *
                C48641 +
            (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
             C25477 * C48416) *
                C48629 +
            (C30113 * C30748 + C30114 * C30746 +
             (C25244 - C25245 + C25246 - C25247) * C30749 +
             (C25248 - C25249 + C25250 - C25251) * C48416) *
                C48606) *
               C48603) *
              C229 +
          ((((C23371 - C23370 + C23373 - C23372) * C30748 +
             (C23375 - C23374 + C23377 - C23376) * C30746 + C25474 * C30749 +
             C25475 * C48416) *
                C48641 +
            ((C23379 - C23378 + C23381 - C23380) * C30748 +
             (C23383 - C23382 + C23385 - C23384) * C30746 + C30113 * C30749 +
             C30114 * C48416) *
                C48629 +
            ((C23387 - C23386 + C23389 - C23388) * C30748 +
             (C23391 - C23390 + C23393 - C23392) * C30746 +
             (C23948 - C23949 + C23950 - C23951) * C30749 +
             (C23952 - C23953 + C23954 - C23955) * C48416) *
                C48606) *
               C721 +
           ((C25470 * C30748 + C25471 * C30746 + C25472 * C30749 +
             C25473 * C48416) *
                C48641 +
            (C29909 * C30748 + C29910 * C30746 +
             (C25245 - C25244 + C25247 - C25246) * C30749 +
             (C25249 - C25248 + C25251 - C25250) * C48416) *
                C48629 +
            ((C23949 - C23948 + C23951 - C23950) * C30748 +
             (C23953 - C23952 + C23955 - C23954) * C30746 +
             (C23231 * C9618 - C23237 * C9616 + C48222 * C9881 -
              C23238 * C9880) *
                 C30749 +
             (C23231 * C9622 - C23237 * C9619 + C48222 * C9883 -
              C23238 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48647 * C126 - C22089 * C119 + C48640 * C127 - C22090 * C120 +
            C48627 * C128 - C22091 * C121 + C48610 * C129 - C22092 * C122) *
               C30748 +
           (C48647 * C140 - C22089 * C131 + C48640 * C141 - C22090 * C132 +
            C48627 * C142 - C22091 * C133 + C48610 * C143 - C22092 * C134) *
               C30746 +
           (C31011 - C31012 + C31013 - C31014 + C31015 - C31016 + C31017 -
            C31018) *
               C30749 +
           (C31019 - C31020 + C31021 - C31022 + C31023 - C31024 + C31025 -
            C31026) *
               C48416) *
              C48318 * C867 +
          ((C31012 - C31011 + C31014 - C31013 + C31016 - C31015 + C31018 -
            C31017) *
               C30748 +
           (C31020 - C31019 + C31022 - C31021 + C31024 - C31023 + C31026 -
            C31025) *
               C30746 +
           (C31759 - C31760 + C31761 - C31762 + C31763 - C31764 + C31765 -
            C31766) *
               C30749 +
           (C31767 - C31768 + C31769 - C31770 + C31771 - C31772 + C31773 -
            C31774) *
               C48416) *
              C48318 * C868 +
          ((C31760 - C31759 + C31762 - C31761 + C31764 - C31763 + C31766 -
            C31765) *
               C30748 +
           (C31768 - C31767 + C31770 - C31769 + C31772 - C31771 + C31774 -
            C31773) *
               C30746 +
           (C48647 * C2698 - C22089 * C2694 + C48640 * C2699 - C22090 * C2695 +
            C48627 * C2700 - C22091 * C2696 + C48610 * C2704 - C22092 * C2697) *
               C30749 +
           (C48647 * C2706 - C22089 * C2701 + C48640 * C2707 - C22090 * C2702 +
            C48627 * C2708 - C22091 * C2703 + C48610 * C2709 - C22092 * C2705) *
               C48416) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23231 * C126 - C23237 * C119 + C48222 * C127 - C23238 * C120) *
                C30748 +
            (C23231 * C140 - C23237 * C131 + C48222 * C141 - C23238 * C132) *
                C30746 +
            (C24872 - C24873 + C24874 - C24875) * C30749 +
            (C24876 - C24877 + C24878 - C24879) * C48416) *
               C48641 +
           ((C23370 - C23371 + C23372 - C23373) * C30748 +
            (C23374 - C23375 + C23376 - C23377) * C30746 + C25470 * C30749 +
            C25471 * C48416) *
               C48629 +
           C32655 * C48606) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C30748 +
            (C24877 - C24876 + C24879 - C24878) * C30746 +
            (C24881 - C24880 + C24883 - C24882) * C30749 +
            (C24885 - C24884 + C24887 - C24886) * C48416) *
               C48641 +
           (C25474 * C30748 + C25475 * C30746 + C25476 * C30749 +
            C25477 * C48416) *
               C48629 +
           (C30113 * C30748 + C30114 * C30746 +
            (C25244 - C25245 + C25246 - C25247) * C30749 +
            (C25248 - C25249 + C25250 - C25251) * C48416) *
               C48606) *
              C868 +
          ((C26024 * C30748 + C26025 * C30746 +
            (C26017 - C26016 + C26019 - C26018) * C30749 +
            (C26021 - C26020 + C26023 - C26022) * C48416) *
               C48641 +
           (C25472 * C30748 + C25473 * C30746 +
            (C25463 - C25462 + C25465 - C25464) * C30749 +
            (C25467 - C25466 + C25469 - C25468) * C48416) *
               C48629 +
           ((C25245 - C25244 + C25247 - C25246) * C30748 +
            (C25249 - C25248 + C25251 - C25250) * C30746 +
            (C23231 * C10056 - C23237 * C10054 + C48222 * C10058 -
             C23238 * C10055) *
                C30749 +
            (C23231 * C10060 - C23237 * C10057 + C48222 * C10061 -
             C23238 * C10059) *
                C48416) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48329) *
               C48573 +
           ((C3718 * C239 - C3724 * C233 + C3719 * C240 - C3725 * C234 +
             C3720 * C241 - C3726 * C235 + C48610 * C242 - C3727 * C236) *
                C118 +
            (C3718 * C251 - C3724 * C244 + C3719 * C252 - C3725 * C245 +
             C3720 * C253 - C3726 * C246 + C48610 * C254 - C3727 * C247) *
                C48329) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C118 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48329) *
               C48573 +
           ((C3724 * C234 - C3718 * C240 + C3725 * C235 - C3719 * C241 +
             C3726 * C236 - C3720 * C242 + C3727 * C237 - C48610 * C243) *
                C118 +
            (C3724 * C245 - C3718 * C252 + C3725 * C246 - C3719 * C253 +
             C3726 * C247 - C3720 * C254 + C3727 * C248 - C48610 * C255) *
                C48329) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
             C3720 * C130 - C3726 * C123 + C48610 * C136 - C3727 * C124) *
                C118 +
            (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
             C3720 * C144 - C3726 * C135 + C48610 * C145 - C3727 * C137) *
                C48329) *
               C48573 +
           ((C3718 * C241 - C3724 * C235 + C3719 * C242 - C3725 * C236 +
             C3720 * C243 - C3726 * C237 + C48610 * C249 - C3727 * C238) *
                C118 +
            (C3718 * C253 - C3724 * C246 + C3719 * C254 - C3725 * C247 +
             C3720 * C255 - C3726 * C248 + C48610 * C256 - C3727 * C250) *
                C48329) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C118 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48329) *
               C11039 +
           ((C48551 * C239 - C47223 * C233 + C48222 * C240 - C47204 * C234) *
                C118 +
            (C48551 * C251 - C47223 * C244 + C48222 * C252 - C47204 * C245) *
                C48329) *
               C11040 +
           ((C48551 * C522 - C47223 * C517 + C48222 * C523 - C47204 * C518) *
                C118 +
            (C48551 * C532 - C47223 * C527 + C48222 * C533 - C47204 * C528) *
                C48329) *
               C11041 +
           ((C48551 * C1159 - C47223 * C1155 + C48222 * C1160 -
             C47204 * C1156) *
                C118 +
            (C48551 * C1167 - C47223 * C1162 + C48222 * C1168 -
             C47204 * C1163) *
                C48329) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C118 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C48329) *
               C11039 +
           ((C47223 * C234 - C48551 * C240 + C47204 * C235 - C48222 * C241) *
                C118 +
            (C47223 * C245 - C48551 * C252 + C47204 * C246 - C48222 * C253) *
                C48329) *
               C11040 +
           ((C47223 * C518 - C48551 * C523 + C47204 * C519 - C48222 * C524) *
                C118 +
            (C47223 * C528 - C48551 * C533 + C47204 * C529 - C48222 * C534) *
                C48329) *
               C11041 +
           ((C47223 * C1156 - C48551 * C1160 + C47204 * C1157 -
             C48222 * C1161) *
                C118 +
            (C47223 * C1163 - C48551 * C1168 + C47204 * C1164 -
             C48222 * C1169) *
                C48329) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C118 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C48329) *
               C11039 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C118 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C48329) *
               C11040 +
           ((C48551 * C524 - C47223 * C519 + C48222 * C525 - C47204 * C520) *
                C118 +
            (C48551 * C534 - C47223 * C529 + C48222 * C535 - C47204 * C530) *
                C48329) *
               C11041 +
           ((C48551 * C1161 - C47223 * C1157 + C48222 * C1165 -
             C47204 * C1158) *
                C118 +
            (C48551 * C1169 - C47223 * C1164 + C48222 * C1170 -
             C47204 * C1166) *
                C48329) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
              C3726 * C519 - C3720 * C524 + C3727 * C520 - C48610 * C525) *
                 C118 +
             (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
              C3726 * C529 - C3720 * C534 + C3727 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C48300 * C229 +
           (((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                 C118 +
             (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                 C48329) *
                C48573 +
            ((C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
              C3720 * C525 - C3726 * C520 + C48610 * C526 - C3727 * C521) *
                 C118 +
             (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
              C3720 * C535 - C3726 * C530 + C48610 * C536 - C3727 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            ((C11184 - C11185 + C11186 - C11187) * C118 +
             (C11188 - C11189 + C11190 - C11191) * C48329) *
                C11041 +
            ((C11192 - C11193 + C11194 - C11195) * C118 +
             (C11196 - C11197 + C11198 - C11199) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C47223 * C1637 - C48551 * C1640 + C47204 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C47223 * C1643 - C48551 * C1646 + C47204 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C118 +
             (C11205 - C11204 + C11207 - C11206) * C48329) *
                C11039 +
            ((C11209 - C11208 + C11211 - C11210) * C118 +
             (C11213 - C11212 + C11215 - C11214) * C48329) *
                C11040 +
            ((C11217 - C11216 + C11219 - C11218) * C118 +
             (C11221 - C11220 + C11223 - C11222) * C48329) *
                C11041 +
            ((C48551 * C1641 - C47223 * C1638 + C48222 * C1642 -
              C47204 * C1639) *
                 C118 +
             (C48551 * C1647 - C47223 * C1644 + C48222 * C1648 -
              C47204 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C339 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C3724 * C619 - C3718 * C624 + C3725 * C620 - C3719 * C625 +
              C3726 * C621 - C3720 * C626 + C3727 * C622 - C48610 * C627) *
                 C118 +
             (C3724 * C629 - C3718 * C634 + C3725 * C630 - C3719 * C635 +
              C3726 * C631 - C3720 * C636 + C3727 * C632 - C48610 * C637) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C339 +
           (((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
              C3720 * C350 - C3726 * C344 + C48610 * C351 - C3727 * C345) *
                 C118 +
             (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
              C3720 * C362 - C3726 * C355 + C48610 * C363 - C3727 * C356) *
                 C48329) *
                C48573 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            ((C11184 - C11185 + C11186 - C11187) * C118 +
             (C11188 - C11189 + C11190 - C11191) * C48329) *
                C11041 +
            ((C11192 - C11193 + C11194 - C11195) * C118 +
             (C11196 - C11197 + C11198 - C11199) * C48329) *
                C48616) *
               C339 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C47223 * C619 - C48551 * C624 + C47204 * C620 - C48222 * C625) *
                 C118 +
             (C47223 * C629 - C48551 * C634 + C47204 * C630 - C48222 * C635) *
                 C48329) *
                C11040 +
            ((C47223 * C1365 - C48551 * C1369 + C47204 * C1366 -
              C48222 * C1370) *
                 C118 +
             (C47223 * C1372 - C48551 * C1377 + C47204 * C1373 -
              C48222 * C1378) *
                 C48329) *
                C11041 +
            ((C47223 * C1820 - C48551 * C1823 + C47204 * C1821 -
              C48222 * C1824) *
                 C118 +
             (C47223 * C1826 - C48551 * C1829 + C47204 * C1827 -
              C48222 * C1830) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C339 +
           (((C48551 * C348 - C47223 * C342 + C48222 * C349 - C47204 * C343) *
                 C118 +
             (C48551 * C360 - C47223 * C353 + C48222 * C361 - C47204 * C354) *
                 C48329) *
                C11039 +
            ((C48551 * C625 - C47223 * C620 + C48222 * C626 - C47204 * C621) *
                 C118 +
             (C48551 * C635 - C47223 * C630 + C48222 * C636 - C47204 * C631) *
                 C48329) *
                C11040 +
            ((C48551 * C1370 - C47223 * C1366 + C48222 * C1371 -
              C47204 * C1367) *
                 C118 +
             (C48551 * C1378 - C47223 * C1373 + C48222 * C1379 -
              C47204 * C1374) *
                 C48329) *
                C11041 +
            ((C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C118 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
              C3726 * C519 - C3720 * C524 + C3727 * C520 - C48610 * C525) *
                 C118 +
             (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
              C3726 * C529 - C3720 * C534 + C3727 * C530 - C48610 * C535) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C48300 * C447 +
           (((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                 C118 +
             (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                 C48329) *
                C48573 +
            ((C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
              C3720 * C525 - C3726 * C520 + C48610 * C526 - C3727 * C521) *
                 C118 +
             (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
              C3720 * C535 - C3726 * C530 + C48610 * C536 - C3727 * C531) *
                 C48329) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            ((C11184 - C11185 + C11186 - C11187) * C118 +
             (C11188 - C11189 + C11190 - C11191) * C48329) *
                C11041 +
            ((C11192 - C11193 + C11194 - C11195) * C118 +
             (C11196 - C11197 + C11198 - C11199) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C47223 * C1637 - C48551 * C1640 + C47204 * C1638 -
              C48222 * C1641) *
                 C118 +
             (C47223 * C1643 - C48551 * C1646 + C47204 * C1644 -
              C48222 * C1647) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C118 +
             (C11205 - C11204 + C11207 - C11206) * C48329) *
                C11039 +
            ((C11209 - C11208 + C11211 - C11210) * C118 +
             (C11213 - C11212 + C11215 - C11214) * C48329) *
                C11040 +
            ((C11217 - C11216 + C11219 - C11218) * C118 +
             (C11221 - C11220 + C11223 - C11222) * C48329) *
                C11041 +
            ((C48551 * C1641 - C47223 * C1638 + C48222 * C1642 -
              C47204 * C1639) *
                 C118 +
             (C48551 * C1647 - C47223 * C1644 + C48222 * C1648 -
              C47204 * C1645) *
                 C48329) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48329) *
               C48573 +
           ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                C118 +
            (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                C48329) *
               C48376) *
              C48300 * C513 +
          (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C118 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48329) *
               C48573 +
           ((C4249 - C4250 + C4251 - C4252 + C4253 - C4254 + C4255 - C4256) *
                C118 +
            (C4257 - C4258 + C4259 - C4260 + C4261 - C4262 + C4263 - C4264) *
                C48329) *
               C48376) *
              C48300 * C514 +
          (((C4250 - C4249 + C4252 - C4251 + C4254 - C4253 + C4256 - C4255) *
                C118 +
            (C4258 - C4257 + C4260 - C4259 + C4262 - C4261 + C4264 - C4263) *
                C48329) *
               C48573 +
           ((C3718 * C1159 - C3724 * C1155 + C3719 * C1160 - C3725 * C1156 +
             C3720 * C1161 - C3726 * C1157 + C48610 * C1165 - C3727 * C1158) *
                C118 +
            (C3718 * C1167 - C3724 * C1162 + C3719 * C1168 - C3725 * C1163 +
             C3720 * C1169 - C3726 * C1164 + C48610 * C1170 - C3727 * C1166) *
                C48329) *
               C48376) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C118 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48329) *
               C11039 +
           ((C11176 - C11177 + C11178 - C11179) * C118 +
            (C11180 - C11181 + C11182 - C11183) * C48329) *
               C11040 +
           C11606 * C11041 + C11607 * C48616) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C118 +
            (C11181 - C11180 + C11183 - C11182) * C48329) *
               C11039 +
           ((C11185 - C11184 + C11187 - C11186) * C118 +
            (C11189 - C11188 + C11191 - C11190) * C48329) *
               C11040 +
           ((C11193 - C11192 + C11195 - C11194) * C118 +
            (C11197 - C11196 + C11199 - C11198) * C48329) *
               C11041 +
           ((C11590 - C11591 + C11592 - C11593) * C118 +
            (C11594 - C11595 + C11596 - C11597) * C48329) *
               C48616) *
              C48300 * C514 +
          (C11606 * C11039 + C11607 * C11040 +
           ((C11591 - C11590 + C11593 - C11592) * C118 +
            (C11595 - C11594 + C11597 - C11596) * C48329) *
               C11041 +
           ((C48551 * C8993 - C47223 * C8991 + C48222 * C8995 -
             C47204 * C8992) *
                C118 +
            (C48551 * C8997 - C47223 * C8994 + C48222 * C8998 -
             C47204 * C8996) *
                C48329) *
               C48616) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C339 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                 C118 +
             (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                 C48329) *
                C48376) *
               C48603) *
              C447 +
          ((((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C4249 - C4250 + C4251 - C4252 + C4253 - C4254 + C4255 - C4256) *
                 C118 +
             (C4257 - C4258 + C4259 - C4260 + C4261 - C4262 + C4263 - C4264) *
                 C48329) *
                C48376) *
               C339 +
           (((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                 C118 +
             (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                 C48329) *
                C48573 +
            ((C3718 * C1369 - C3724 * C1365 + C3719 * C1370 - C3725 * C1366 +
              C3720 * C1371 - C3726 * C1367 + C48610 * C1375 - C3727 * C1368) *
                 C118 +
             (C3718 * C1377 - C3724 * C1372 + C3719 * C1378 - C3725 * C1373 +
              C3720 * C1379 - C3726 * C1374 + C48610 * C1380 - C3727 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            C11606 * C11041 + C11607 * C48616) *
               C339 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C11738 - C11739 + C11740 - C11741) * C118 +
             (C11742 - C11743 + C11744 - C11745) * C48329) *
                C11040 +
            ((C11746 - C11747 + C11748 - C11749) * C118 +
             (C11750 - C11751 + C11752 - C11753) * C48329) *
                C11041 +
            ((C11754 - C11755 + C11756 - C11757) * C118 +
             (C11758 - C11759 + C11760 - C11761) * C48329) *
                C48616) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C11590 - C11591 + C11592 - C11593) * C118 +
             (C11594 - C11595 + C11596 - C11597) * C48329) *
                C48616) *
               C339 +
           (((C11739 - C11738 + C11741 - C11740) * C118 +
             (C11743 - C11742 + C11745 - C11744) * C48329) *
                C11039 +
            ((C11747 - C11746 + C11749 - C11748) * C118 +
             (C11751 - C11750 + C11753 - C11752) * C48329) *
                C11040 +
            ((C11755 - C11754 + C11757 - C11756) * C118 +
             (C11759 - C11758 + C11761 - C11760) * C48329) *
                C11041 +
            ((C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
              C47204 * C9114) *
                 C118 +
             (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
              C47204 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C721 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                 C118 +
             (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                 C48329) *
                C48573 +
            ((C3875 - C3876 + C3877 - C3878 + C3879 - C3880 + C3881 - C3882) *
                 C118 +
             (C3883 - C3884 + C3885 - C3886 + C3887 - C3888 + C3889 - C3890) *
                 C48329) *
                C48376) *
               C721 +
           (((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
              C3720 * C350 - C3726 * C344 + C48610 * C351 - C3727 * C345) *
                 C118 +
             (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
              C3720 * C362 - C3726 * C355 + C48610 * C363 - C3727 * C356) *
                 C48329) *
                C48573 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                 C48329) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            C11606 * C11041 + C11607 * C48616) *
               C721 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C11738 - C11739 + C11740 - C11741) * C118 +
             (C11742 - C11743 + C11744 - C11745) * C48329) *
                C11040 +
            ((C11746 - C11747 + C11748 - C11749) * C118 +
             (C11750 - C11751 + C11752 - C11753) * C48329) *
                C11041 +
            ((C11754 - C11755 + C11756 - C11757) * C118 +
             (C11758 - C11759 + C11760 - C11761) * C48329) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C118 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48329) *
                C11039 +
            ((C11200 - C11201 + C11202 - C11203) * C118 +
             (C11204 - C11205 + C11206 - C11207) * C48329) *
                C11040 +
            ((C11208 - C11209 + C11210 - C11211) * C118 +
             (C11212 - C11213 + C11214 - C11215) * C48329) *
                C11041 +
            ((C11216 - C11217 + C11218 - C11219) * C118 +
             (C11220 - C11221 + C11222 - C11223) * C48329) *
                C48616) *
               C721 +
           (((C48551 * C348 - C47223 * C342 + C48222 * C349 - C47204 * C343) *
                 C118 +
             (C48551 * C360 - C47223 * C353 + C48222 * C361 - C47204 * C354) *
                 C48329) *
                C11039 +
            ((C48551 * C625 - C47223 * C620 + C48222 * C626 - C47204 * C621) *
                 C118 +
             (C48551 * C635 - C47223 * C630 + C48222 * C636 - C47204 * C631) *
                 C48329) *
                C11040 +
            ((C48551 * C1370 - C47223 * C1366 + C48222 * C1371 -
              C47204 * C1367) *
                 C118 +
             (C48551 * C1378 - C47223 * C1373 + C48222 * C1379 -
              C47204 * C1374) *
                 C48329) *
                C11041 +
            ((C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C118 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48329) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                 C48329) *
                C48573 +
            ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                 C118 +
             (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                 C48329) *
                C48376) *
               C721 +
           (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
              C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                 C118 +
             (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
              C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                 C48329) *
                C48573 +
            ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                 C118 +
             (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                 C48329) *
                C48376) *
               C48603) *
              C229 +
          ((((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                 C118 +
             (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                 C48329) *
                C48573 +
            ((C4249 - C4250 + C4251 - C4252 + C4253 - C4254 + C4255 - C4256) *
                 C118 +
             (C4257 - C4258 + C4259 - C4260 + C4261 - C4262 + C4263 - C4264) *
                 C48329) *
                C48376) *
               C721 +
           (((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                 C118 +
             (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                 C48329) *
                C48573 +
            ((C3718 * C1369 - C3724 * C1365 + C3719 * C1370 - C3725 * C1366 +
              C3720 * C1371 - C3726 * C1367 + C48610 * C1375 - C3727 * C1368) *
                 C118 +
             (C3718 * C1377 - C3724 * C1372 + C3719 * C1378 - C3725 * C1373 +
              C3720 * C1379 - C3726 * C1374 + C48610 * C1380 - C3727 * C1376) *
                 C48329) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C118 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48329) *
                C11039 +
            ((C11176 - C11177 + C11178 - C11179) * C118 +
             (C11180 - C11181 + C11182 - C11183) * C48329) *
                C11040 +
            C11606 * C11041 + C11607 * C48616) *
               C721 +
           (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                 C118 +
             (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                 C48329) *
                C11039 +
            ((C11738 - C11739 + C11740 - C11741) * C118 +
             (C11742 - C11743 + C11744 - C11745) * C48329) *
                C11040 +
            ((C11746 - C11747 + C11748 - C11749) * C118 +
             (C11750 - C11751 + C11752 - C11753) * C48329) *
                C11041 +
            ((C11754 - C11755 + C11756 - C11757) * C118 +
             (C11758 - C11759 + C11760 - C11761) * C48329) *
                C48616) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48329) *
                C11039 +
            ((C11185 - C11184 + C11187 - C11186) * C118 +
             (C11189 - C11188 + C11191 - C11190) * C48329) *
                C11040 +
            ((C11193 - C11192 + C11195 - C11194) * C118 +
             (C11197 - C11196 + C11199 - C11198) * C48329) *
                C11041 +
            ((C11590 - C11591 + C11592 - C11593) * C118 +
             (C11594 - C11595 + C11596 - C11597) * C48329) *
                C48616) *
               C721 +
           (((C11739 - C11738 + C11741 - C11740) * C118 +
             (C11743 - C11742 + C11745 - C11744) * C48329) *
                C11039 +
            ((C11747 - C11746 + C11749 - C11748) * C118 +
             (C11751 - C11750 + C11753 - C11752) * C48329) *
                C11040 +
            ((C11755 - C11754 + C11757 - C11756) * C118 +
             (C11759 - C11758 + C11761 - C11760) * C48329) *
                C11041 +
            ((C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
              C47204 * C9114) *
                 C118 +
             (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
              C47204 * C9118) *
                 C48329) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48329) *
               C48573 +
           ((C3859 - C3860 + C3861 - C3862 + C3863 - C3864 + C3865 - C3866) *
                C118 +
            (C3867 - C3868 + C3869 - C3870 + C3871 - C3872 + C3873 - C3874) *
                C48329) *
               C48376) *
              C867 +
          (((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48610 * C350) *
                C118 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48610 * C362) *
                C48329) *
               C48573 +
           ((C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C118 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48329) *
               C48376) *
              C868 +
          (((C3718 * C875 - C3724 * C870 + C3719 * C876 - C3725 * C871 +
             C3720 * C877 - C3726 * C872 + C48610 * C878 - C3727 * C873) *
                C118 +
            (C3718 * C885 - C3724 * C880 + C3719 * C886 - C3725 * C881 +
             C3720 * C887 - C3726 * C882 + C48610 * C888 - C3727 * C883) *
                C48329) *
               C48573 +
           ((C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
             C3720 * C2266 - C3726 * C2260 + C48610 * C2545 - C3727 * C2544) *
                C118 +
            (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
             C3720 * C2278 - C3726 * C2269 + C48610 * C2547 - C3727 * C2546) *
                C48329) *
               C48376) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C118 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48329) *
               C11039 +
           ((C11176 - C11177 + C11178 - C11179) * C118 +
            (C11180 - C11181 + C11182 - C11183) * C48329) *
               C11040 +
           C11606 * C11041 + C11607 * C48616) *
              C867 +
          (((C47223 * C341 - C48551 * C347 + C47204 * C342 - C48222 * C348) *
                C118 +
            (C47223 * C352 - C48551 * C359 + C47204 * C353 - C48222 * C360) *
                C48329) *
               C11039 +
           ((C11738 - C11739 + C11740 - C11741) * C118 +
            (C11742 - C11743 + C11744 - C11745) * C48329) *
               C11040 +
           ((C11746 - C11747 + C11748 - C11749) * C118 +
            (C11750 - C11751 + C11752 - C11753) * C48329) *
               C11041 +
           ((C11754 - C11755 + C11756 - C11757) * C118 +
            (C11758 - C11759 + C11760 - C11761) * C48329) *
               C48616) *
              C868 +
          (((C48551 * C875 - C47223 * C870 + C48222 * C876 - C47204 * C871) *
                C118 +
            (C48551 * C885 - C47223 * C880 + C48222 * C886 - C47204 * C881) *
                C48329) *
               C11039 +
           ((C48551 * C2264 - C47223 * C2258 + C48222 * C2265 -
             C47204 * C2259) *
                C118 +
            (C48551 * C2276 - C47223 * C2267 + C48222 * C2277 -
             C47204 * C2268) *
                C48329) *
               C11040 +
           ((C48551 * C2270 - C47223 * C2261 + C48222 * C2271 -
             C47204 * C2262) *
                C118 +
            (C48551 * C2279 - C47223 * C2273 + C48222 * C2280 -
             C47204 * C2274) *
                C48329) *
               C11041 +
           ((C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
             C47204 * C9880) *
                C118 +
            (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
             C47204 * C9882) *
                C48329) *
               C48616) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C4868 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48574 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
               C48573 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
            (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C4868 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48574 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
               C48573 +
           ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
            (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
            (C1006 * C620 - C1000 * C625 + C1007 * C621 - C1001 * C626 +
             C1008 * C622 - C48593 * C627) *
                C4869 +
            (C1006 * C630 - C1000 * C635 + C1007 * C631 - C1001 * C636 +
             C1008 * C632 - C48593 * C637) *
                C48416) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
             C48593 * C130 - C1008 * C123) *
                C4868 +
            (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
             C48593 * C144 - C1008 * C135) *
                C48574 +
            (C1000 * C349 - C1006 * C343 + C1001 * C350 - C1007 * C344 +
             C48593 * C351 - C1008 * C345) *
                C4869 +
            (C1000 * C361 - C1006 * C354 + C1001 * C362 - C1007 * C355 +
             C48593 * C363 - C1008 * C356) *
                C48416) *
               C48573 +
           ((C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
             C48593 * C243 - C1008 * C237) *
                C4868 +
            (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
             C48593 * C255 - C1008 * C248) *
                C48574 +
            (C1000 * C626 - C1006 * C621 + C1001 * C627 - C1007 * C622 +
             C48593 * C628 - C1008 * C623) *
                C4869 +
            (C1000 * C636 - C1006 * C631 + C1001 * C637 - C1007 * C632 +
             C48593 * C638 - C1008 * C633) *
                C48416) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C4868 +
            (C48212 * C140 - C8908 * C131) * C48574 +
            (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
               C11039 +
           ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
            C10504 * C4869 + C10505 * C48416) *
               C11040 +
           (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 + C10338 * C48416) *
               C11041 +
           (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
            (C9386 - C9385) * C48416) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C8908 * C120 - C48212 * C127) * C4868 +
            (C8908 * C132 - C48212 * C141) * C48574 +
            (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
               C11039 +
           ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
            (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
               C11040 +
           ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
            (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
               C11041 +
           ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
            (C8908 * C1821 - C48212 * C1824) * C4869 +
            (C8908 * C1827 - C48212 * C1830) * C48416) *
               C48616) *
              C48300 * C48283 * C111 +
          (((C48212 * C128 - C8908 * C121) * C4868 +
            (C48212 * C142 - C8908 * C133) * C48574 +
            (C48212 * C349 - C8908 * C343) * C4869 +
            (C48212 * C361 - C8908 * C354) * C48416) *
               C11039 +
           ((C48212 * C241 - C8908 * C235) * C4868 +
            (C48212 * C253 - C8908 * C246) * C48574 +
            (C48212 * C626 - C8908 * C621) * C4869 +
            (C48212 * C636 - C8908 * C631) * C48416) *
               C11040 +
           ((C48212 * C524 - C8908 * C519) * C4868 +
            (C48212 * C534 - C8908 * C529) * C48574 +
            (C48212 * C1371 - C8908 * C1367) * C4869 +
            (C48212 * C1379 - C8908 * C1374) * C48416) *
               C11041 +
           ((C48212 * C1161 - C8908 * C1157) * C4868 +
            (C48212 * C1169 - C8908 * C1164) * C48574 +
            (C48212 * C1825 - C8908 * C1822) * C4869 +
            (C48212 * C1831 - C8908 * C1828) * C48416) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4869 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C48300 * C48601) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C48300 * C229 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C4868 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48574 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4869 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48416) *
                C48573 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C4868 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48574 +
             (C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C4869 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 +
             C10338 * C48416) *
                C11041 +
            (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
             (C9386 - C9385) * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             (C9383 - C9384) * C4869 + (C9385 - C9386) * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C229 +
           (((C9017 - C9016) * C4868 + (C9019 - C9018) * C48574 +
             (C9894 - C9893) * C4869 + (C9896 - C9895) * C48416) *
                C11039 +
            ((C9021 - C9020) * C4868 + (C9023 - C9022) * C48574 +
             (C9902 - C9901) * C4869 + (C9904 - C9903) * C48416) *
                C11040 +
            ((C9025 - C9024) * C4868 + (C9027 - C9026) * C48574 +
             (C14038 - C14037) * C4869 + (C14040 - C14039) * C48416) *
                C11041 +
            ((C9029 - C9028) * C4868 + (C9031 - C9030) * C48574 +
             (C48212 * C9117 - C8908 * C9114) * C4869 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                C48376) *
               C339 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4868 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C48283 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C339 +
           (((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C4868 +
             (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48574 +
             (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C4869 +
             (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48416) *
                C48573 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4868 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48574 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48593 * C2545 - C1008 * C2544) *
                 C4869 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48593 * C2547 - C1008 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 +
             C10338 * C48416) *
                C11041 +
            (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
             (C9386 - C9385) * C48416) *
                C48616) *
               C339 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            ((C9383 - C9384) * C4868 + (C9385 - C9386) * C48574 +
             (C10341 - C10342) * C4869 + (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C339 +
           (((C10072 - C10071) * C4868 + (C10074 - C10073) * C48574 +
             (C10076 - C10075) * C4869 + (C10078 - C10077) * C48416) *
                C11039 +
            ((C9894 - C9893) * C4868 + (C9896 - C9895) * C48574 +
             (C9898 - C9897) * C4869 + (C9900 - C9899) * C48416) *
                C11040 +
            ((C9902 - C9901) * C4868 + (C9904 - C9903) * C48574 +
             (C9906 - C9905) * C4869 + (C9908 - C9907) * C48416) *
                C11041 +
            ((C14038 - C14037) * C4868 + (C14040 - C14039) * C48574 +
             (C48212 * C9881 - C8908 * C9880) * C4869 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4869 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C48300 * C48601) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C48300 * C447 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C4868 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48574 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4869 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48416) *
                C48573 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C4868 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48574 +
             (C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C4869 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48416) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            (C9270 * C4868 + C9271 * C48574 + C10337 * C4869 +
             C10338 * C48416) *
                C11041 +
            (C9272 * C4868 + C9273 * C48574 + (C9384 - C9383) * C4869 +
             (C9386 - C9385) * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             (C9383 - C9384) * C4869 + (C9385 - C9386) * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C48300 * C447 +
           (((C9017 - C9016) * C4868 + (C9019 - C9018) * C48574 +
             (C9894 - C9893) * C4869 + (C9896 - C9895) * C48416) *
                C11039 +
            ((C9021 - C9020) * C4868 + (C9023 - C9022) * C48574 +
             (C9902 - C9901) * C4869 + (C9904 - C9903) * C48416) *
                C11040 +
            ((C9025 - C9024) * C4868 + (C9027 - C9026) * C48574 +
             (C14038 - C14037) * C4869 + (C14040 - C14039) * C48416) *
                C11041 +
            ((C9029 - C9028) * C4868 + (C9031 - C9030) * C48574 +
             (C48212 * C9117 - C8908 * C9114) * C4869 +
             (C48212 * C9120 - C8908 * C9118) * C48416) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C4868 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48574 +
                     (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
                     (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                        C48573 +
                    ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
                     (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
                     (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C4869 +
                     (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48416) *
                        C48376) *
                       C48300 * C513 +
                   (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
                     (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
                     (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C4869 +
                     (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48416) *
                        C48573 +
                    ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
                     (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
                     (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
                     (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                        C48376) *
                       C48300 * C514 +
                   ((C1670 * C4868 + C1671 * C48574 +
                     (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C4869 +
                     (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48416) *
                        C48573 +
                    ((C1657 - C1656 + C1659 - C1658 + C1661 - C1660) * C4868 +
                     (C1663 - C1662 + C1665 - C1664 + C1667 - C1666) * C48574 +
                     (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 -
                      C1007 * C1821 + C48593 * C1825 - C1008 * C1822) *
                         C4869 +
                     (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 -
                      C1007 * C1827 + C48593 * C1831 - C1008 * C1828) *
                         C48416) *
                        C48376) *
                       C48300 * C515) *
                  C48249) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C4868 +
                     (C48212 * C140 - C8908 * C131) * C48574 +
                     (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                        C11039 +
                    ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
                     C10504 * C4869 + C10505 * C48416) *
                        C11040 +
                    C14413 * C11041 + C14414 * C48616) *
                       C48300 * C513 +
                   (((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
                     C10508 * C4869 + C10509 * C48416) *
                        C11039 +
                    ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
                     C10516 * C4869 + C10517 * C48416) *
                        C11040 +
                    ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
                     (C9383 - C9384) * C4869 + (C9385 - C9386) * C48416) *
                        C11041 +
                    ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
                     (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                        C48616) *
                       C48300 * C514 +
                   (C14413 * C11039 + C14414 * C11040 +
                    (C9274 * C4868 + C9275 * C48574 + (C9388 - C9387) * C4869 +
                     (C9390 - C9389) * C48416) *
                        C11041 +
                    ((C9277 - C9276) * C4868 + (C9279 - C9278) * C48574 +
                     (C48212 * C9371 - C8908 * C9370) * C4869 +
                     (C48212 * C9373 - C8908 * C9372) * C48416) *
                        C48616) *
                       C48300 * C515) *
                  C48249) /
                     (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             C6991 * C4869 + C6992 * C48416) *
                C48376) *
               C339 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            (C6993 * C4868 + C6994 * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C447 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             C6993 * C4869 + C6994 * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C339 +
           ((C6991 * C4868 + C6992 * C48574 +
             (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C4869 +
             (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48416) *
                C48573 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C4868 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48574 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48593 * C2272 - C1008 * C2263) *
                 C4869 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48593 * C2281 - C1008 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            C14413 * C11041 + C14414 * C48616) *
               C339 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            (C14545 * C4868 + C14546 * C48574 + (C10341 - C10342) * C4869 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             C14545 * C4869 + C14546 * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C339 +
           ((C10504 * C4868 + C10505 * C48574 + C10506 * C4869 +
             C10507 * C48416) *
                C11039 +
            (C10337 * C4868 + C10338 * C48574 + C10339 * C4869 +
             C10340 * C48416) *
                C11040 +
            (C14405 * C4868 + C14406 * C48574 + (C10342 - C10341) * C4869 +
             (C10344 - C10343) * C48416) *
                C11041 +
            ((C9388 - C9387) * C4868 + (C9390 - C9389) * C48574 +
             (C48212 * C9620 - C8908 * C9617) * C4869 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             C6991 * C4869 + C6992 * C48416) *
                C48376) *
               C721 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            (C6993 * C4868 + C6994 * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C48283 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C4868 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48574 +
             (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C4869 +
             (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48416) *
                C48573 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C4868 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48574 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C4869 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48416) *
                C48376) *
               C721 +
           (((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C4868 +
             (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48574 +
             (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C4869 +
             (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48416) *
                C48573 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C4868 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48574 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48593 * C2545 - C1008 * C2544) *
                 C4869 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48593 * C2547 - C1008 * C2546) *
                 C48416) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            C14413 * C11041 + C14414 * C48616) *
               C721 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            (C14545 * C4868 + C14546 * C48574 + (C10341 - C10342) * C4869 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C4868 +
             (C8908 * C132 - C48212 * C141) * C48574 +
             (C10071 - C10072) * C4869 + (C10073 - C10074) * C48416) *
                C11039 +
            ((C9016 - C9017) * C4868 + (C9018 - C9019) * C48574 +
             (C9893 - C9894) * C4869 + (C9895 - C9896) * C48416) *
                C11040 +
            ((C9020 - C9021) * C4868 + (C9022 - C9023) * C48574 +
             (C9901 - C9902) * C4869 + (C9903 - C9904) * C48416) *
                C11041 +
            ((C9024 - C9025) * C4868 + (C9026 - C9027) * C48574 +
             (C14037 - C14038) * C4869 + (C14039 - C14040) * C48416) *
                C48616) *
               C721 +
           (((C10072 - C10071) * C4868 + (C10074 - C10073) * C48574 +
             (C10076 - C10075) * C4869 + (C10078 - C10077) * C48416) *
                C11039 +
            ((C9894 - C9893) * C4868 + (C9896 - C9895) * C48574 +
             (C9898 - C9897) * C4869 + (C9900 - C9899) * C48416) *
                C11040 +
            ((C9902 - C9901) * C4868 + (C9904 - C9903) * C48574 +
             (C9906 - C9905) * C4869 + (C9908 - C9907) * C48416) *
                C11041 +
            ((C14038 - C14037) * C4868 + (C14040 - C14039) * C48574 +
             (C48212 * C9881 - C8908 * C9880) * C4869 +
             (C48212 * C9883 - C8908 * C9882) * C48416) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C4868 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48574 +
             (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
             (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                C48573 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
             C6991 * C4869 + C6992 * C48416) *
                C48376) *
               C721 +
           (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
             (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
             (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
             (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                C48573 +
            (C6993 * C4868 + C6994 * C48574 +
             (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
             (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                C48376) *
               C48603) *
              C229 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C4868 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48574 +
             C6993 * C4869 + C6994 * C48416) *
                C48573 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C4868 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48574 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C4869 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48416) *
                C48376) *
               C721 +
           ((C6991 * C4868 + C6992 * C48574 +
             (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C4869 +
             (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48416) *
                C48573 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C4868 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48574 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48593 * C2272 - C1008 * C2263) *
                 C4869 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48593 * C2281 - C1008 * C2275) *
                 C48416) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C4868 +
             (C48212 * C140 - C8908 * C131) * C48574 +
             (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                C11039 +
            ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
             C10504 * C4869 + C10505 * C48416) *
                C11040 +
            C14413 * C11041 + C14414 * C48616) *
               C721 +
           (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
             (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                C11039 +
            (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
             C10511 * C48416) *
                C11040 +
            (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
             C10519 * C48416) *
                C11041 +
            (C14545 * C4868 + C14546 * C48574 + (C10341 - C10342) * C4869 +
             (C10343 - C10344) * C48416) *
                C48616) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C4868 + (C9003 - C9002) * C48574 +
             C10508 * C4869 + C10509 * C48416) *
                C11039 +
            ((C9005 - C9004) * C4868 + (C9007 - C9006) * C48574 +
             C10516 * C4869 + C10517 * C48416) *
                C11040 +
            ((C9009 - C9008) * C4868 + (C9011 - C9010) * C48574 +
             C14545 * C4869 + C14546 * C48416) *
                C11041 +
            ((C9013 - C9012) * C4868 + (C9015 - C9014) * C48574 +
             (C9387 - C9388) * C4869 + (C9389 - C9390) * C48416) *
                C48616) *
               C721 +
           ((C10504 * C4868 + C10505 * C48574 + C10506 * C4869 +
             C10507 * C48416) *
                C11039 +
            (C10337 * C4868 + C10338 * C48574 + C10339 * C4869 +
             C10340 * C48416) *
                C11040 +
            (C14405 * C4868 + C14406 * C48574 + (C10342 - C10341) * C4869 +
             (C10344 - C10343) * C48416) *
                C11041 +
            ((C9388 - C9387) * C4868 + (C9390 - C9389) * C48574 +
             (C48212 * C9620 - C8908 * C9617) * C4869 +
             (C48212 * C9623 - C8908 * C9621) * C48416) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[197] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C4868 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48574 +
                     (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C4869 +
                     (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48416) *
                        C48573 +
                    ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C4868 +
                     (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48574 +
                     C6991 * C4869 + C6992 * C48416) *
                        C48376) *
                       C867 +
                   (((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C4868 +
                     (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48574 +
                     (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C4869 +
                     (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48416) *
                        C48573 +
                    (C6993 * C4868 + C6994 * C48574 +
                     (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C4869 +
                     (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48416) *
                        C48376) *
                       C868 +
                   ((C3619 * C4868 + C3620 * C48574 +
                     (C3606 - C3605 + C3608 - C3607 + C3610 - C3609) * C4869 +
                     (C3612 - C3611 + C3614 - C3613 + C3616 - C3615) * C48416) *
                        C48573 +
                    ((C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C4868 +
                     (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48574 +
                     (C1000 * C3163 - C1006 * C3160 + C1001 * C3164 -
                      C1007 * C3161 + C48593 * C3165 - C1008 * C3162) *
                         C4869 +
                     (C1000 * C3169 - C1006 * C3166 + C1001 * C3170 -
                      C1007 * C3167 + C48593 * C3171 - C1008 * C3168) *
                         C48416) *
                        C48376) *
                       C869) *
                  C48283 * C48249) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C4868 +
                     (C48212 * C140 - C8908 * C131) * C48574 +
                     (C10063 - C10064) * C4869 + (C10065 - C10066) * C48416) *
                        C11039 +
                    ((C9000 - C9001) * C4868 + (C9002 - C9003) * C48574 +
                     C10504 * C4869 + C10505 * C48416) *
                        C11040 +
                    C14413 * C11041 + C14414 * C48616) *
                       C867 +
                   (((C10064 - C10063) * C4868 + (C10066 - C10065) * C48574 +
                     (C10068 - C10067) * C4869 + (C10070 - C10069) * C48416) *
                        C11039 +
                    (C10508 * C4868 + C10509 * C48574 + C10510 * C4869 +
                     C10511 * C48416) *
                        C11040 +
                    (C10516 * C4868 + C10517 * C48574 + C10518 * C4869 +
                     C10519 * C48416) *
                        C11041 +
                    (C14545 * C4868 + C14546 * C48574 +
                     (C10341 - C10342) * C4869 + (C10343 - C10344) * C48416) *
                        C48616) *
                       C868 +
                   ((C10934 * C4868 + C10935 * C48574 +
                     (C10937 - C10936) * C4869 + (C10939 - C10938) * C48416) *
                        C11039 +
                    (C10506 * C4868 + C10507 * C48574 +
                     (C10513 - C10512) * C4869 + (C10515 - C10514) * C48416) *
                        C11040 +
                    (C10339 * C4868 + C10340 * C48574 +
                     (C10521 - C10520) * C4869 + (C10523 - C10522) * C48416) *
                        C11041 +
                    ((C10342 - C10341) * C4868 + (C10344 - C10343) * C48574 +
                     (C48212 * C10500 - C8908 * C10499) * C4869 +
                     (C48212 * C10502 - C8908 * C10501) * C48416) *
                        C48616) *
                       C869) *
                  C48283 * C48249) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C118 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48329) *
                        C48641 +
                    ((C1000 * C239 - C1006 * C233 + C1001 * C240 -
                      C1007 * C234 + C48593 * C241 - C1008 * C235) *
                         C118 +
                     (C1000 * C251 - C1006 * C244 + C1001 * C252 -
                      C1007 * C245 + C48593 * C253 - C1008 * C246) *
                         C48329) *
                        C48629 +
                    ((C1000 * C522 - C1006 * C517 + C1001 * C523 -
                      C1007 * C518 + C48593 * C524 - C1008 * C519) *
                         C118 +
                     (C1000 * C532 - C1006 * C527 + C1001 * C533 -
                      C1007 * C528 + C48593 * C534 - C1008 * C529) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                      C1001 * C128 + C1008 * C122 - C48593 * C129) *
                         C118 +
                     (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                      C1001 * C142 + C1008 * C134 - C48593 * C143) *
                         C48329) *
                        C48641 +
                    ((C1006 * C234 - C1000 * C240 + C1007 * C235 -
                      C1001 * C241 + C1008 * C236 - C48593 * C242) *
                         C118 +
                     (C1006 * C245 - C1000 * C252 + C1007 * C246 -
                      C1001 * C253 + C1008 * C247 - C48593 * C254) *
                         C48329) *
                        C48629 +
                    ((C1006 * C518 - C1000 * C523 + C1007 * C519 -
                      C1001 * C524 + C1008 * C520 - C48593 * C525) *
                         C118 +
                     (C1006 * C528 - C1000 * C533 + C1007 * C529 -
                      C1001 * C534 + C1008 * C530 - C48593 * C535) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C1000 * C128 - C1006 * C121 + C1001 * C129 -
                      C1007 * C122 + C48593 * C130 - C1008 * C123) *
                         C118 +
                     (C1000 * C142 - C1006 * C133 + C1001 * C143 -
                      C1007 * C134 + C48593 * C144 - C1008 * C135) *
                         C48329) *
                        C48641 +
                    ((C1000 * C241 - C1006 * C235 + C1001 * C242 -
                      C1007 * C236 + C48593 * C243 - C1008 * C237) *
                         C118 +
                     (C1000 * C253 - C1006 * C246 + C1001 * C254 -
                      C1007 * C247 + C48593 * C255 - C1008 * C248) *
                         C48329) *
                        C48629 +
                    ((C1000 * C524 - C1006 * C519 + C1001 * C525 -
                      C1007 * C520 + C48593 * C526 - C1008 * C521) *
                         C118 +
                     (C1000 * C534 - C1006 * C529 + C1001 * C535 -
                      C1007 * C530 + C48593 * C536 - C1008 * C531) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                     C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                     C105 * C130 - C117 * C123) *
                        C118 +
                    (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                     C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                     C105 * C144 - C117 * C135) *
                        C48329) *
                       C48318 * C48300 * C48283 * C110 +
                   ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                     C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                     C117 * C124 - C105 * C136) *
                        C118 +
                    (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                     C117 * C137 - C105 * C145) *
                        C48329) *
                       C48318 * C48300 * C48283 * C111 +
                   ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                     C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                     C105 * C138 - C117 * C125) *
                        C118 +
                    (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                     C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                     C105 * C146 - C117 * C139) *
                        C48329) *
                       C48318 * C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                     C48593 * C128 - C1008 * C121) *
                        C2395 +
                    (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                     C48593 * C142 - C1008 * C133) *
                        C48642 +
                    (C1000 * C347 - C1006 * C341 + C1001 * C348 - C1007 * C342 +
                     C48593 * C349 - C1008 * C343) *
                        C2396 +
                    (C1000 * C359 - C1006 * C352 + C1001 * C360 - C1007 * C353 +
                     C48593 * C361 - C1008 * C354) *
                        C48631 +
                    (C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
                     C48593 * C877 - C1008 * C872) *
                        C2397 +
                    (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
                     C48593 * C887 - C1008 * C882) *
                        C48609) *
                       C48318 * C48300 * C48283 * C110 +
                   ((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                     C1008 * C122 - C48593 * C129) *
                        C2395 +
                    (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                     C1008 * C134 - C48593 * C143) *
                        C48642 +
                    (C1006 * C342 - C1000 * C348 + C1007 * C343 - C1001 * C349 +
                     C1008 * C344 - C48593 * C350) *
                        C2396 +
                    (C1006 * C353 - C1000 * C360 + C1007 * C354 - C1001 * C361 +
                     C1008 * C355 - C48593 * C362) *
                        C48631 +
                    (C1006 * C871 - C1000 * C876 + C1007 * C872 - C1001 * C877 +
                     C1008 * C873 - C48593 * C878) *
                        C2397 +
                    (C1006 * C881 - C1000 * C886 + C1007 * C882 - C1001 * C887 +
                     C1008 * C883 - C48593 * C888) *
                        C48609) *
                       C48318 * C48300 * C48283 * C111 +
                   ((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
                     C48593 * C130 - C1008 * C123) *
                        C2395 +
                    (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
                     C48593 * C144 - C1008 * C135) *
                        C48642 +
                    (C1000 * C349 - C1006 * C343 + C1001 * C350 - C1007 * C344 +
                     C48593 * C351 - C1008 * C345) *
                        C2396 +
                    (C1000 * C361 - C1006 * C354 + C1001 * C362 - C1007 * C355 +
                     C48593 * C363 - C1008 * C356) *
                        C48631 +
                    (C1000 * C877 - C1006 * C872 + C1001 * C878 - C1007 * C873 +
                     C48593 * C879 - C1008 * C874) *
                        C2397 +
                    (C1000 * C887 - C1006 * C882 + C1001 * C888 - C1007 * C883 +
                     C48593 * C889 - C1008 * C884) *
                        C48609) *
                       C48318 * C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C48638 * C126 - C7644 * C119 + C48625 * C127 -
                      C7645 * C120 + C48593 * C128 - C7646 * C121) *
                         C118 +
                     (C48638 * C140 - C7644 * C131 + C48625 * C141 -
                      C7645 * C132 + C48593 * C142 - C7646 * C133) *
                         C48329) *
                        C7641 +
                    ((C48638 * C239 - C7644 * C233 + C48625 * C240 -
                      C7645 * C234 + C48593 * C241 - C7646 * C235) *
                         C118 +
                     (C48638 * C251 - C7644 * C244 + C48625 * C252 -
                      C7645 * C245 + C48593 * C253 - C7646 * C246) *
                         C48329) *
                        C7642 +
                    ((C48638 * C522 - C7644 * C517 + C48625 * C523 -
                      C7645 * C518 + C48593 * C524 - C7646 * C519) *
                         C118 +
                     (C48638 * C532 - C7644 * C527 + C48625 * C533 -
                      C7645 * C528 + C48593 * C534 - C7646 * C529) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C7644 * C120 - C48638 * C127 + C7645 * C121 -
                      C48625 * C128 + C7646 * C122 - C48593 * C129) *
                         C118 +
                     (C7644 * C132 - C48638 * C141 + C7645 * C133 -
                      C48625 * C142 + C7646 * C134 - C48593 * C143) *
                         C48329) *
                        C7641 +
                    ((C7644 * C234 - C48638 * C240 + C7645 * C235 -
                      C48625 * C241 + C7646 * C236 - C48593 * C242) *
                         C118 +
                     (C7644 * C245 - C48638 * C252 + C7645 * C246 -
                      C48625 * C253 + C7646 * C247 - C48593 * C254) *
                         C48329) *
                        C7642 +
                    ((C7644 * C518 - C48638 * C523 + C7645 * C519 -
                      C48625 * C524 + C7646 * C520 - C48593 * C525) *
                         C118 +
                     (C7644 * C528 - C48638 * C533 + C7645 * C529 -
                      C48625 * C534 + C7646 * C530 - C48593 * C535) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C48638 * C128 - C7644 * C121 + C48625 * C129 -
                      C7645 * C122 + C48593 * C130 - C7646 * C123) *
                         C118 +
                     (C48638 * C142 - C7644 * C133 + C48625 * C143 -
                      C7645 * C134 + C48593 * C144 - C7646 * C135) *
                         C48329) *
                        C7641 +
                    ((C48638 * C241 - C7644 * C235 + C48625 * C242 -
                      C7645 * C236 + C48593 * C243 - C7646 * C237) *
                         C118 +
                     (C48638 * C253 - C7644 * C246 + C48625 * C254 -
                      C7645 * C247 + C48593 * C255 - C7646 * C248) *
                         C48329) *
                        C7642 +
                    ((C48638 * C524 - C7644 * C519 + C48625 * C525 -
                      C7645 * C520 + C48593 * C526 - C7646 * C521) *
                         C118 +
                     (C48638 * C534 - C7644 * C529 + C48625 * C535 -
                      C7645 * C530 + C48593 * C536 - C7646 * C531) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C118 +
                     (C48212 * C140 - C8908 * C131) * C48329) *
                        C8903 +
                    ((C48212 * C239 - C8908 * C233) * C118 +
                     (C48212 * C251 - C8908 * C244) * C48329) *
                        C8904 +
                    ((C48212 * C522 - C8908 * C517) * C118 +
                     (C48212 * C532 - C8908 * C527) * C48329) *
                        C8905 +
                    ((C48212 * C1159 - C8908 * C1155) * C118 +
                     (C48212 * C1167 - C8908 * C1162) * C48329) *
                        C8906 +
                    ((C48212 * C1640 - C8908 * C1637) * C118 +
                     (C48212 * C1646 - C8908 * C1643) * C48329) *
                        C8907) *
                       C48300 * C48283 * C110 +
                   (((C8908 * C120 - C48212 * C127) * C118 +
                     (C8908 * C132 - C48212 * C141) * C48329) *
                        C8903 +
                    ((C8908 * C234 - C48212 * C240) * C118 +
                     (C8908 * C245 - C48212 * C252) * C48329) *
                        C8904 +
                    ((C8908 * C518 - C48212 * C523) * C118 +
                     (C8908 * C528 - C48212 * C533) * C48329) *
                        C8905 +
                    ((C8908 * C1156 - C48212 * C1160) * C118 +
                     (C8908 * C1163 - C48212 * C1168) * C48329) *
                        C8906 +
                    ((C8908 * C1638 - C48212 * C1641) * C118 +
                     (C8908 * C1644 - C48212 * C1647) * C48329) *
                        C8907) *
                       C48300 * C48283 * C111 +
                   (((C48212 * C128 - C8908 * C121) * C118 +
                     (C48212 * C142 - C8908 * C133) * C48329) *
                        C8903 +
                    ((C48212 * C241 - C8908 * C235) * C118 +
                     (C48212 * C253 - C8908 * C246) * C48329) *
                        C8904 +
                    ((C48212 * C524 - C8908 * C519) * C118 +
                     (C48212 * C534 - C8908 * C529) * C48329) *
                        C8905 +
                    ((C48212 * C1161 - C8908 * C1157) * C118 +
                     (C48212 * C1169 - C8908 * C1164) * C48329) *
                        C8906 +
                    ((C48212 * C1642 - C8908 * C1639) * C118 +
                     (C48212 * C1648 - C8908 * C1645) * C48329) *
                        C8907) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C2395 +
                     (C48212 * C140 - C8908 * C131) * C48642 +
                     (C48212 * C347 - C8908 * C341) * C2396 +
                     (C48212 * C359 - C8908 * C352) * C48631 +
                     (C48212 * C875 - C8908 * C870) * C2397 +
                     (C48212 * C885 - C8908 * C880) * C48609) *
                        C7641 +
                    ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
                     (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
                     (C48212 * C2264 - C8908 * C2258) * C2397 +
                     (C48212 * C2276 - C8908 * C2267) * C48609) *
                        C7642 +
                    (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
                     (C9382 - C9381) * C48631 +
                     (C48212 * C2270 - C8908 * C2261) * C2397 +
                     (C48212 * C2279 - C8908 * C2273) * C48609) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C8908 * C120 - C48212 * C127) * C2395 +
                     (C8908 * C132 - C48212 * C141) * C48642 +
                     (C8908 * C342 - C48212 * C348) * C2396 +
                     (C8908 * C353 - C48212 * C360) * C48631 +
                     (C8908 * C871 - C48212 * C876) * C2397 +
                     (C8908 * C881 - C48212 * C886) * C48609) *
                        C7641 +
                    ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
                     (C8908 * C620 - C48212 * C625) * C2396 +
                     (C8908 * C630 - C48212 * C635) * C48631 +
                     (C8908 * C2259 - C48212 * C2265) * C2397 +
                     (C8908 * C2268 - C48212 * C2277) * C48609) *
                        C7642 +
                    ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
                     (C8908 * C1366 - C48212 * C1370) * C2396 +
                     (C8908 * C1373 - C48212 * C1378) * C48631 +
                     (C8908 * C2262 - C48212 * C2271) * C2397 +
                     (C8908 * C2274 - C48212 * C2280) * C48609) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C48212 * C128 - C8908 * C121) * C2395 +
                     (C48212 * C142 - C8908 * C133) * C48642 +
                     (C48212 * C349 - C8908 * C343) * C2396 +
                     (C48212 * C361 - C8908 * C354) * C48631 +
                     (C48212 * C877 - C8908 * C872) * C2397 +
                     (C48212 * C887 - C8908 * C882) * C48609) *
                        C7641 +
                    ((C48212 * C241 - C8908 * C235) * C2395 +
                     (C48212 * C253 - C8908 * C246) * C48642 +
                     (C48212 * C626 - C8908 * C621) * C2396 +
                     (C48212 * C636 - C8908 * C631) * C48631 +
                     (C48212 * C2266 - C8908 * C2260) * C2397 +
                     (C48212 * C2278 - C8908 * C2269) * C48609) *
                        C7642 +
                    ((C48212 * C524 - C8908 * C519) * C2395 +
                     (C48212 * C534 - C8908 * C529) * C48642 +
                     (C48212 * C1371 - C8908 * C1367) * C2396 +
                     (C48212 * C1379 - C8908 * C1374) * C48631 +
                     (C48212 * C2272 - C8908 * C2263) * C2397 +
                     (C48212 * C2281 - C8908 * C2275) * C48609) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 - C1001 * C1160 +
              C1008 * C1157 - C48593 * C1161) *
                 C118 +
             (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 - C1001 * C1168 +
              C1008 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                C48641 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                C48629 +
            ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 - C1007 * C1157 +
              C48593 * C1165 - C1008 * C1158) *
                 C118 +
             (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 - C1007 * C1164 +
              C48593 * C1170 - C1008 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C48300 * C229 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C48300 * C229 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48329) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C1000 * C347 - C1006 * C341 + C1001 * C348 - C1007 * C342 +
             C48593 * C349 - C1008 * C343) *
                C2396 +
            (C1000 * C359 - C1006 * C352 + C1001 * C360 - C1007 * C353 +
             C48593 * C361 - C1008 * C354) *
                C48631 +
            (C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
             C48593 * C877 - C1008 * C872) *
                C2397 +
            (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
             C48593 * C887 - C1008 * C882) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
             C1008 * C2260 - C48593 * C2266) *
                C2397 +
            (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
             C1008 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C1006 * C342 - C1000 * C348 + C1007 * C343 - C1001 * C349 +
             C1008 * C344 - C48593 * C350) *
                C2396 +
            (C1006 * C353 - C1000 * C360 + C1007 * C354 - C1001 * C361 +
             C1008 * C355 - C48593 * C362) *
                C48631 +
            (C1006 * C871 - C1000 * C876 + C1007 * C872 - C1001 * C877 +
             C1008 * C873 - C48593 * C878) *
                C2397 +
            (C1006 * C881 - C1000 * C886 + C1007 * C882 - C1001 * C887 +
             C1008 * C883 - C48593 * C888) *
                C48609) *
               C48318 * C48300 * C229 +
           ((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C2395 +
            (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48642 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48593 * C627 - C1008 * C622) *
                C2396 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48593 * C637 - C1008 * C632) *
                C48631 +
            (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
             C48593 * C2545 - C1008 * C2544) *
                C2397 +
            (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
             C48593 * C2547 - C1008 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C229 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C229 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C48212 * C347 - C8908 * C341) * C2396 +
             (C48212 * C359 - C8908 * C352) * C48631 +
             (C48212 * C875 - C8908 * C870) * C2397 +
             (C48212 * C885 - C8908 * C880) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
             (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
                C7642 +
            (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
             (C9382 - C9381) * C48631 + (C9889 - C9890) * C2397 +
             (C9891 - C9892) * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             (C9375 - C9376) * C2396 + (C9377 - C9378) * C48631 +
             (C9886 - C9885) * C2397 + (C9888 - C9887) * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             (C9379 - C9380) * C2396 + (C9381 - C9382) * C48631 +
             (C9890 - C9889) * C2397 + (C9892 - C9891) * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C8908 * C9616 - C48212 * C9618) * C2397 +
             (C8908 * C9619 - C48212 * C9622) * C48609) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C8908 * C342 - C48212 * C348) * C2396 +
             (C8908 * C353 - C48212 * C360) * C48631 +
             (C8908 * C871 - C48212 * C876) * C2397 +
             (C8908 * C881 - C48212 * C886) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C229 +
           (((C9017 - C9016) * C2395 + (C9019 - C9018) * C48642 +
             (C9894 - C9893) * C2396 + (C9896 - C9895) * C48631 +
             (C9898 - C9897) * C2397 + (C9900 - C9899) * C48609) *
                C7641 +
            ((C9021 - C9020) * C2395 + (C9023 - C9022) * C48642 +
             (C9902 - C9901) * C2396 + (C9904 - C9903) * C48631 +
             (C9906 - C9905) * C2397 + (C9908 - C9907) * C48609) *
                C7642 +
            ((C9025 - C9024) * C2395 + (C9027 - C9026) * C48642 +
             (C48212 * C1824 - C8908 * C1821) * C2396 +
             (C48212 * C1830 - C8908 * C1827) * C48631 +
             (C48212 * C9881 - C8908 * C9880) * C2397 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C339 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
              C1008 * C621 - C48593 * C626) *
                 C118 +
             (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
              C1008 * C631 - C48593 * C636) *
                 C48329) *
                C48629 +
            ((C1006 * C1365 - C1000 * C1369 + C1007 * C1366 - C1001 * C1370 +
              C1008 * C1367 - C48593 * C1371) *
                 C118 +
             (C1006 * C1372 - C1000 * C1377 + C1007 * C1373 - C1001 * C1378 +
              C1008 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C339 +
           (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
              C48593 * C350 - C1008 * C344) *
                 C118 +
             (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
              C48593 * C362 - C1008 * C355) *
                 C48329) *
                C48641 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48593 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48593 * C637 - C1008 * C632) *
                 C48329) *
                C48629 +
            ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C118 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C339 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48329) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C339 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C2396 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48631 +
            (C2747 - C2748 + C2749 - C2750 + C2751 - C2752) * C2397 +
            (C2753 - C2754 + C2755 - C2756 + C2757 - C2758) * C48609) *
               C48318 * C339 +
           ((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C2395 +
            (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48642 +
            (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C2396 +
            (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48631 +
            (C1000 * C2699 - C1006 * C2695 + C1001 * C2700 - C1007 * C2696 +
             C48593 * C2704 - C1008 * C2697) *
                C2397 +
            (C1000 * C2707 - C1006 * C2702 + C1001 * C2708 - C1007 * C2703 +
             C48593 * C2709 - C1008 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C7644 * C619 - C48638 * C624 + C7645 * C620 - C48625 * C625 +
              C7646 * C621 - C48593 * C626) *
                 C118 +
             (C7644 * C629 - C48638 * C634 + C7645 * C630 - C48625 * C635 +
              C7646 * C631 - C48593 * C636) *
                 C48329) *
                C7642 +
            ((C7644 * C1365 - C48638 * C1369 + C7645 * C1366 - C48625 * C1370 +
              C7646 * C1367 - C48593 * C1371) *
                 C118 +
             (C7644 * C1372 - C48638 * C1377 + C7645 * C1373 - C48625 * C1378 +
              C7646 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C339 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C8908 * C619 - C48212 * C624) * C118 +
             (C8908 * C629 - C48212 * C634) * C48329) *
                C8904 +
            ((C8908 * C1365 - C48212 * C1369) * C118 +
             (C8908 * C1372 - C48212 * C1377) * C48329) *
                C8905 +
            ((C8908 * C1820 - C48212 * C1823) * C118 +
             (C8908 * C1826 - C48212 * C1829) * C48329) *
                C8906 +
            ((C8908 * C9113 - C48212 * C9115) * C118 +
             (C8908 * C9116 - C48212 * C9119) * C48329) *
                C8907) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C339 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
             (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
                C7642 +
            (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
             (C9382 - C9381) * C48631 + (C9889 - C9890) * C2397 +
             (C9891 - C9892) * C48609) *
                C48606) *
               C339 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            ((C9375 - C9376) * C2395 + (C9377 - C9378) * C48642 +
             (C9886 - C9885) * C2396 + (C9888 - C9887) * C48631 +
             (C8908 * C3160 - C48212 * C3163) * C2397 +
             (C8908 * C3166 - C48212 * C3169) * C48609) *
                C7642 +
            ((C9379 - C9380) * C2395 + (C9381 - C9382) * C48642 +
             (C9890 - C9889) * C2396 + (C9892 - C9891) * C48631 +
             (C8908 * C10054 - C48212 * C10056) * C2397 +
             (C8908 * C10057 - C48212 * C10060) * C48609) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C10071 - C10072) * C2396 + (C10073 - C10074) * C48631 +
             (C10075 - C10076) * C2397 + (C10077 - C10078) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C339 +
           (((C10072 - C10071) * C2395 + (C10074 - C10073) * C48642 +
             (C10076 - C10075) * C2396 + (C10078 - C10077) * C48631 +
             (C48212 * C2699 - C8908 * C2695) * C2397 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C7641 +
            ((C9894 - C9893) * C2395 + (C9896 - C9895) * C48642 +
             (C9898 - C9897) * C2396 + (C9900 - C9899) * C48631 +
             (C48212 * C3164 - C8908 * C3161) * C2397 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C7642 +
            ((C9902 - C9901) * C2395 + (C9904 - C9903) * C48642 +
             (C9906 - C9905) * C2396 + (C9908 - C9907) * C48631 +
             (C48212 * C10058 - C8908 * C10055) * C2397 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 - C1001 * C1160 +
              C1008 * C1157 - C48593 * C1161) *
                 C118 +
             (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 - C1001 * C1168 +
              C1008 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                C48641 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                C48629 +
            ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 - C1007 * C1157 +
              C48593 * C1165 - C1008 * C1158) *
                 C118 +
             (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 - C1007 * C1164 +
              C48593 * C1170 - C1008 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C48300 * C447 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C48300 * C447 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48329) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C48300 * C447 +
           ((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
             C1008 * C2260 - C48593 * C2266) *
                C2397 +
            (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
             C1008 * C2269 - C48593 * C2278) *
                C48609) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C2396 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48631 +
            (C2747 - C2748 + C2749 - C2750 + C2751 - C2752) * C2397 +
            (C2753 - C2754 + C2755 - C2756 + C2757 - C2758) * C48609) *
               C48318 * C48300 * C447 +
           ((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C2395 +
            (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48642 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48593 * C627 - C1008 * C622) *
                C2396 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48593 * C637 - C1008 * C632) *
                C48631 +
            (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
             C48593 * C2545 - C1008 * C2544) *
                C2397 +
            (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
             C48593 * C2547 - C1008 * C2546) *
                C48609) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C447 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C447 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
             (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
                C7642 +
            (C9270 * C2395 + C9271 * C48642 + (C9380 - C9379) * C2396 +
             (C9382 - C9381) * C48631 + (C9889 - C9890) * C2397 +
             (C9891 - C9892) * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             (C9375 - C9376) * C2396 + (C9377 - C9378) * C48631 +
             (C9886 - C9885) * C2397 + (C9888 - C9887) * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             (C9379 - C9380) * C2396 + (C9381 - C9382) * C48631 +
             (C9890 - C9889) * C2397 + (C9892 - C9891) * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C8908 * C9616 - C48212 * C9618) * C2397 +
             (C8908 * C9619 - C48212 * C9622) * C48609) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C10071 - C10072) * C2396 + (C10073 - C10074) * C48631 +
             (C10075 - C10076) * C2397 + (C10077 - C10078) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C48300 * C447 +
           (((C9017 - C9016) * C2395 + (C9019 - C9018) * C48642 +
             (C9894 - C9893) * C2396 + (C9896 - C9895) * C48631 +
             (C9898 - C9897) * C2397 + (C9900 - C9899) * C48609) *
                C7641 +
            ((C9021 - C9020) * C2395 + (C9023 - C9022) * C48642 +
             (C9902 - C9901) * C2396 + (C9904 - C9903) * C48631 +
             (C9906 - C9905) * C2397 + (C9908 - C9907) * C48609) *
                C7642 +
            ((C9025 - C9024) * C2395 + (C9027 - C9026) * C48642 +
             (C48212 * C1824 - C8908 * C1821) * C2396 +
             (C48212 * C1830 - C8908 * C1827) * C48631 +
             (C48212 * C9881 - C8908 * C9880) * C2397 +
             (C48212 * C9883 - C8908 * C9882) * C48609) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48329) *
               C48641 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
               C48629 +
           C1674 * C48606) *
              C48300 * C513 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
               C48641 +
           ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
            (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
               C48629 +
           ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
            (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
               C48606) *
              C48300 * C514 +
          (C1674 * C48641 +
           ((C1657 - C1656 + C1659 - C1658 + C1661 - C1660) * C118 +
            (C1663 - C1662 + C1665 - C1664 + C1667 - C1666) * C48329) *
               C48629 +
           ((C1000 * C1640 - C1006 * C1637 + C1001 * C1641 - C1007 * C1638 +
             C48593 * C1642 - C1008 * C1639) *
                C118 +
            (C1000 * C1646 - C1006 * C1643 + C1001 * C1647 - C1007 * C1644 +
             C48593 * C1648 - C1008 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48329) *
              C48318 * C48300 * C513 +
          ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
            C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
            C117 * C237 - C105 * C243) *
               C118 +
           (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
            C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
            C117 * C248 - C105 * C255) *
               C48329) *
              C48318 * C48300 * C514 +
          ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
            C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
            C105 * C526 - C117 * C521) *
               C118 +
           (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
            C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
            C105 * C536 - C117 * C531) *
               C48329) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48593 * C128 - C1008 * C121) *
               C2395 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48593 * C142 - C1008 * C133) *
               C48642 +
           (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
           (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
           (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
              C48318 * C48300 * C513 +
          ((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
           (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
           (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
           (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
           (C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
            C1008 * C2260 - C48593 * C2266) *
               C2397 +
           (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
            C1008 * C2269 - C48593 * C2278) *
               C48609) *
              C48318 * C48300 * C514 +
          (C1670 * C2395 + C1671 * C48642 +
           (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C2396 +
           (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48631 +
           (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
            C48593 * C2272 - C1008 * C2263) *
               C2397 +
           (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
            C48593 * C2281 - C1008 * C2275) *
               C48609) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C48300 * C513 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
               C7641 +
           ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
            (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
               C7642 +
           ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
            (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
               C48606) *
              C48300 * C514 +
          (C8268 * C7641 +
           ((C8251 - C8250 + C8253 - C8252 + C8255 - C8254) * C118 +
            (C8257 - C8256 + C8259 - C8258 + C8261 - C8260) * C48329) *
               C7642 +
           ((C48638 * C1640 - C7644 * C1637 + C48625 * C1641 - C7645 * C1638 +
             C48593 * C1642 - C7646 * C1639) *
                C118 +
            (C48638 * C1646 - C7644 * C1643 + C48625 * C1647 - C7645 * C1644 +
             C48593 * C1648 - C7646 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C48300 * C513 +
          (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
           ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
           ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
           ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
           ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
              C48300 * C514 +
          (C9286 * C8903 + C9287 * C8904 + C9288 * C8905 +
           ((C9277 - C9276) * C118 + (C9279 - C9278) * C48329) * C8906 +
           ((C48212 * C9266 - C8908 * C9265) * C118 +
            (C48212 * C9268 - C8908 * C9267) * C48329) *
               C8907) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C2395 +
            (C48212 * C140 - C8908 * C131) * C48642 +
            (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
            (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
               C7641 +
           ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
            (C9376 - C9375) * C2396 + (C9378 - C9377) * C48631 +
            (C9885 - C9886) * C2397 + (C9887 - C9888) * C48609) *
               C7642 +
           C10353 * C48606) *
              C48300 * C513 +
          (((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
            (C9375 - C9376) * C2396 + (C9377 - C9378) * C48631 +
            (C9886 - C9885) * C2397 + (C9888 - C9887) * C48609) *
               C7641 +
           ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
            (C9379 - C9380) * C2396 + (C9381 - C9382) * C48631 +
            (C9890 - C9889) * C2397 + (C9892 - C9891) * C48609) *
               C7642 +
           ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
            (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
            (C10341 - C10342) * C2397 + (C10343 - C10344) * C48609) *
               C48606) *
              C48300 * C514 +
          (C10353 * C7641 +
           (C9272 * C2395 + C9273 * C48642 + (C9384 - C9383) * C2396 +
            (C9386 - C9385) * C48631 + (C10342 - C10341) * C2397 +
            (C10344 - C10343) * C48609) *
               C7642 +
           (C9274 * C2395 + C9275 * C48642 + (C9388 - C9387) * C2396 +
            (C9390 - C9389) * C48631 +
            (C48212 * C9620 - C8908 * C9617) * C2397 +
            (C48212 * C9623 - C8908 * C9621) * C48609) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C339 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
             (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                C48606) *
               C339 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                C48641 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                C48629 +
            ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
              C48593 * C1825 - C1008 * C1822) *
                 C118 +
             (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
              C48593 * C1831 - C1008 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C447 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C339 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48329) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C339 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C447 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C2397 +
            (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48609) *
               C48318 * C339 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C2395 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48642 +
            (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C2396 +
            (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48631 +
            (C1000 * C3163 - C1006 * C3160 + C1001 * C3164 - C1007 * C3161 +
             C48593 * C3165 - C1008 * C3162) *
                C2397 +
            (C1000 * C3169 - C1006 * C3166 + C1001 * C3170 - C1007 * C3167 +
             C48593 * C3171 - C1008 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C339 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C339 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
             C10507 * C48609) *
                C7642 +
            C10353 * C48606) *
               C339 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
             C10511 * C48631 + (C10512 - C10513) * C2397 +
             (C10514 - C10515) * C48609) *
                C7642 +
            (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
             C10519 * C48631 + (C10520 - C10521) * C2397 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             C10508 * C2396 + C10509 * C48631 + C10510 * C2397 +
             C10511 * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             C10516 * C2396 + C10517 * C48631 + C10518 * C2397 +
             C10519 * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C10341 - C10342) * C2397 + (C10343 - C10344) * C48609) *
                C48606) *
               C339 +
           ((C10504 * C2395 + C10505 * C48642 + C10506 * C2396 +
             C10507 * C48631 + (C10513 - C10512) * C2397 +
             (C10515 - C10514) * C48609) *
                C7641 +
            (C10337 * C2395 + C10338 * C48642 + C10339 * C2396 +
             C10340 * C48631 + (C10521 - C10520) * C2397 +
             (C10523 - C10522) * C48609) *
                C7642 +
            ((C9384 - C9383) * C2395 + (C9386 - C9385) * C48642 +
             (C10342 - C10341) * C2396 + (C10344 - C10343) * C48631 +
             (C48212 * C10500 - C8908 * C10499) * C2397 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C721 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C721 +
           (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
              C48593 * C350 - C1008 * C344) *
                 C118 +
             (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
              C48593 * C362 - C1008 * C355) *
                 C48329) *
                C48641 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48593 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48593 * C637 - C1008 * C632) *
                 C48329) *
                C48629 +
            ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C118 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C721 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48329) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C721 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48593 * C129) *
                C2395 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48593 * C143) *
                C48642 +
            (C2735 - C2736 + C2737 - C2738 + C2739 - C2740) * C2396 +
            (C2741 - C2742 + C2743 - C2744 + C2745 - C2746) * C48631 +
            (C2747 - C2748 + C2749 - C2750 + C2751 - C2752) * C2397 +
            (C2753 - C2754 + C2755 - C2756 + C2757 - C2758) * C48609) *
               C48318 * C721 +
           ((C2736 - C2735 + C2738 - C2737 + C2740 - C2739) * C2395 +
            (C2742 - C2741 + C2744 - C2743 + C2746 - C2745) * C48642 +
            (C2748 - C2747 + C2750 - C2749 + C2752 - C2751) * C2396 +
            (C2754 - C2753 + C2756 - C2755 + C2758 - C2757) * C48631 +
            (C1000 * C2699 - C1006 * C2695 + C1001 * C2700 - C1007 * C2696 +
             C48593 * C2704 - C1008 * C2697) *
                C2397 +
            (C1000 * C2707 - C1006 * C2702 + C1001 * C2708 - C1007 * C2703 +
             C48593 * C2709 - C1008 * C2705) *
                C48609) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C721 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C721 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
             C10507 * C48609) *
                C7642 +
            C10353 * C48606) *
               C721 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
             C10511 * C48631 + (C10512 - C10513) * C2397 +
             (C10514 - C10515) * C48609) *
                C7642 +
            (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
             C10519 * C48631 + (C10520 - C10521) * C2397 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C2395 +
             (C8908 * C132 - C48212 * C141) * C48642 +
             (C10071 - C10072) * C2396 + (C10073 - C10074) * C48631 +
             (C10075 - C10076) * C2397 + (C10077 - C10078) * C48609) *
                C7641 +
            ((C9016 - C9017) * C2395 + (C9018 - C9019) * C48642 +
             (C9893 - C9894) * C2396 + (C9895 - C9896) * C48631 +
             (C9897 - C9898) * C2397 + (C9899 - C9900) * C48609) *
                C7642 +
            ((C9020 - C9021) * C2395 + (C9022 - C9023) * C48642 +
             (C9901 - C9902) * C2396 + (C9903 - C9904) * C48631 +
             (C9905 - C9906) * C2397 + (C9907 - C9908) * C48609) *
                C48606) *
               C721 +
           (((C10072 - C10071) * C2395 + (C10074 - C10073) * C48642 +
             (C10076 - C10075) * C2396 + (C10078 - C10077) * C48631 +
             (C48212 * C2699 - C8908 * C2695) * C2397 +
             (C48212 * C2707 - C8908 * C2702) * C48609) *
                C7641 +
            ((C9894 - C9893) * C2395 + (C9896 - C9895) * C48642 +
             (C9898 - C9897) * C2396 + (C9900 - C9899) * C48631 +
             (C48212 * C3164 - C8908 * C3161) * C2397 +
             (C48212 * C3170 - C8908 * C3167) * C48609) *
                C7642 +
            ((C9902 - C9901) * C2395 + (C9904 - C9903) * C48642 +
             (C9906 - C9905) * C2396 + (C9908 - C9907) * C48631 +
             (C48212 * C10058 - C8908 * C10055) * C2397 +
             (C48212 * C10061 - C8908 * C10059) * C48609) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C721 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
             (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                C48606) *
               C721 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                C48641 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                C48629 +
            ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
              C48593 * C1825 - C1008 * C1822) *
                 C118 +
             (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
              C48593 * C1831 - C1008 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C229 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C721 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48329) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C2395 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48642 +
            (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
            (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
            (C2723 - C2724 + C2725 - C2726 + C2727 - C2728) * C2397 +
            (C2729 - C2730 + C2731 - C2732 + C2733 - C2734) * C48609) *
               C48318 * C721 +
           ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
            (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
            (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
            (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
            (C1006 * C2694 - C1000 * C2698 + C1007 * C2695 - C1001 * C2699 +
             C1008 * C2696 - C48593 * C2700) *
                C2397 +
            (C1006 * C2701 - C1000 * C2706 + C1007 * C2702 - C1001 * C2707 +
             C1008 * C2703 - C48593 * C2708) *
                C48609) *
               C48318 * C48603) *
              C229 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C2395 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48642 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C2396 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48631 +
            (C3173 - C3174 + C3175 - C3176 + C3177 - C3178) * C2397 +
            (C3179 - C3180 + C3181 - C3182 + C3183 - C3184) * C48609) *
               C48318 * C721 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C2395 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48642 +
            (C3174 - C3173 + C3176 - C3175 + C3178 - C3177) * C2396 +
            (C3180 - C3179 + C3182 - C3181 + C3184 - C3183) * C48631 +
            (C1000 * C3163 - C1006 * C3160 + C1001 * C3164 - C1007 * C3161 +
             C48593 * C3165 - C1008 * C3162) *
                C2397 +
            (C1000 * C3169 - C1006 * C3166 + C1001 * C3170 - C1007 * C3167 +
             C48593 * C3171 - C1008 * C3168) *
                C48609) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C721 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C721 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C2395 +
             (C48212 * C140 - C8908 * C131) * C48642 +
             (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
             (C10067 - C10068) * C2397 + (C10069 - C10070) * C48609) *
                C7641 +
            ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
             C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
             C10507 * C48609) *
                C7642 +
            C10353 * C48606) *
               C721 +
           (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
             (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
             (C8908 * C2694 - C48212 * C2698) * C2397 +
             (C8908 * C2701 - C48212 * C2706) * C48609) *
                C7641 +
            (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
             C10511 * C48631 + (C10512 - C10513) * C2397 +
             (C10514 - C10515) * C48609) *
                C7642 +
            (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
             C10519 * C48631 + (C10520 - C10521) * C2397 +
             (C10522 - C10523) * C48609) *
                C48606) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C2395 + (C9003 - C9002) * C48642 +
             C10508 * C2396 + C10509 * C48631 + C10510 * C2397 +
             C10511 * C48609) *
                C7641 +
            ((C9005 - C9004) * C2395 + (C9007 - C9006) * C48642 +
             C10516 * C2396 + C10517 * C48631 + C10518 * C2397 +
             C10519 * C48609) *
                C7642 +
            ((C9009 - C9008) * C2395 + (C9011 - C9010) * C48642 +
             (C9383 - C9384) * C2396 + (C9385 - C9386) * C48631 +
             (C10341 - C10342) * C2397 + (C10343 - C10344) * C48609) *
                C48606) *
               C721 +
           ((C10504 * C2395 + C10505 * C48642 + C10506 * C2396 +
             C10507 * C48631 + (C10513 - C10512) * C2397 +
             (C10515 - C10514) * C48609) *
                C7641 +
            (C10337 * C2395 + C10338 * C48642 + C10339 * C2396 +
             C10340 * C48631 + (C10521 - C10520) * C2397 +
             (C10523 - C10522) * C48609) *
                C7642 +
            ((C9384 - C9383) * C2395 + (C9386 - C9385) * C48642 +
             (C10342 - C10341) * C2396 + (C10344 - C10343) * C48631 +
             (C48212 * C10500 - C8908 * C10499) * C2397 +
             (C48212 * C10502 - C8908 * C10501) * C48609) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48329) *
               C48641 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
               C48629 +
           C1674 * C48606) *
              C867 +
          (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48593 * C349) *
                C118 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48593 * C361) *
                C48329) *
               C48641 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
               C48629 +
           ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
               C48606) *
              C868 +
          (((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
             C48593 * C877 - C1008 * C872) *
                C118 +
            (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
             C48593 * C887 - C1008 * C882) *
                C48329) *
               C48641 +
           ((C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
             C48593 * C2266 - C1008 * C2260) *
                C118 +
            (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
             C48593 * C2278 - C1008 * C2269) *
                C48329) *
               C48629 +
           ((C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
             C48593 * C2272 - C1008 * C2263) *
                C118 +
            (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
             C48593 * C2281 - C1008 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48329) *
              C48318 * C867 +
          ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
            C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
            C117 * C345 - C105 * C351) *
               C118 +
           (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
            C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
            C117 * C356 - C105 * C363) *
               C48329) *
              C48318 * C868 +
          ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
            C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
            C105 * C879 - C117 * C874) *
               C118 +
           (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
            C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
            C105 * C889 - C117 * C884) *
               C48329) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48593 * C128 - C1008 * C121) *
               C2395 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48593 * C142 - C1008 * C133) *
               C48642 +
           (C2711 - C2712 + C2713 - C2714 + C2715 - C2716) * C2396 +
           (C2717 - C2718 + C2719 - C2720 + C2721 - C2722) * C48631 +
           C3619 * C2397 + C3620 * C48609) *
              C48318 * C867 +
          ((C2712 - C2711 + C2714 - C2713 + C2716 - C2715) * C2395 +
           (C2718 - C2717 + C2720 - C2719 + C2722 - C2721) * C48642 +
           (C2724 - C2723 + C2726 - C2725 + C2728 - C2727) * C2396 +
           (C2730 - C2729 + C2732 - C2731 + C2734 - C2733) * C48631 +
           (C3605 - C3606 + C3607 - C3608 + C3609 - C3610) * C2397 +
           (C3611 - C3612 + C3613 - C3614 + C3615 - C3616) * C48609) *
              C48318 * C868 +
          (C3619 * C2395 + C3620 * C48642 +
           (C3606 - C3605 + C3608 - C3607 + C3610 - C3609) * C2396 +
           (C3612 - C3611 + C3614 - C3613 + C3616 - C3615) * C48631 +
           (C1000 * C3589 - C1006 * C3586 + C1001 * C3590 - C1007 * C3587 +
            C48593 * C3591 - C1008 * C3588) *
               C2397 +
           (C1000 * C3595 - C1006 * C3592 + C1001 * C3596 - C1007 * C3593 +
            C48593 * C3597 - C1008 * C3594) *
               C48609) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C867 +
          (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
             C7646 * C343 - C48593 * C349) *
                C118 +
            (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
             C7646 * C354 - C48593 * C361) *
                C48329) *
               C7641 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
               C7642 +
           ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
               C48606) *
              C868 +
          (((C48638 * C875 - C7644 * C870 + C48625 * C876 - C7645 * C871 +
             C48593 * C877 - C7646 * C872) *
                C118 +
            (C48638 * C885 - C7644 * C880 + C48625 * C886 - C7645 * C881 +
             C48593 * C887 - C7646 * C882) *
                C48329) *
               C7641 +
           ((C48638 * C2264 - C7644 * C2258 + C48625 * C2265 - C7645 * C2259 +
             C48593 * C2266 - C7646 * C2260) *
                C118 +
            (C48638 * C2276 - C7644 * C2267 + C48625 * C2277 - C7645 * C2268 +
             C48593 * C2278 - C7646 * C2269) *
                C48329) *
               C7642 +
           ((C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
             C48593 * C2272 - C7646 * C2263) *
                C118 +
            (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
             C48593 * C2281 - C7646 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C867 +
          (((C8908 * C341 - C48212 * C347) * C118 +
            (C8908 * C352 - C48212 * C359) * C48329) *
               C8903 +
           ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
           ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
           ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
           ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
              C868 +
          (((C48212 * C875 - C8908 * C870) * C118 +
            (C48212 * C885 - C8908 * C880) * C48329) *
               C8903 +
           ((C48212 * C2264 - C8908 * C2258) * C118 +
            (C48212 * C2276 - C8908 * C2267) * C48329) *
               C8904 +
           ((C48212 * C2270 - C8908 * C2261) * C118 +
            (C48212 * C2279 - C8908 * C2273) * C48329) *
               C8905 +
           ((C48212 * C9618 - C8908 * C9616) * C118 +
            (C48212 * C9622 - C8908 * C9619) * C48329) *
               C8906 +
           ((C48212 * C9620 - C8908 * C9617) * C118 +
            (C48212 * C9623 - C8908 * C9621) * C48329) *
               C8907) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C2395 +
            (C48212 * C140 - C8908 * C131) * C48642 +
            (C10063 - C10064) * C2396 + (C10065 - C10066) * C48631 +
            C10934 * C2397 + C10935 * C48609) *
               C7641 +
           ((C9000 - C9001) * C2395 + (C9002 - C9003) * C48642 +
            C10504 * C2396 + C10505 * C48631 + C10506 * C2397 +
            C10507 * C48609) *
               C7642 +
           C10353 * C48606) *
              C867 +
          (((C10064 - C10063) * C2395 + (C10066 - C10065) * C48642 +
            (C10068 - C10067) * C2396 + (C10070 - C10069) * C48631 +
            (C10936 - C10937) * C2397 + (C10938 - C10939) * C48609) *
               C7641 +
           (C10508 * C2395 + C10509 * C48642 + C10510 * C2396 +
            C10511 * C48631 + (C10512 - C10513) * C2397 +
            (C10514 - C10515) * C48609) *
               C7642 +
           (C10516 * C2395 + C10517 * C48642 + C10518 * C2396 +
            C10519 * C48631 + (C10520 - C10521) * C2397 +
            (C10522 - C10523) * C48609) *
               C48606) *
              C868 +
          ((C10934 * C2395 + C10935 * C48642 + (C10937 - C10936) * C2396 +
            (C10939 - C10938) * C48631 +
            (C48212 * C3589 - C8908 * C3586) * C2397 +
            (C48212 * C3595 - C8908 * C3592) * C48609) *
               C7641 +
           (C10506 * C2395 + C10507 * C48642 + (C10513 - C10512) * C2396 +
            (C10515 - C10514) * C48631 +
            (C48212 * C10927 - C8908 * C10925) * C2397 +
            (C48212 * C10931 - C8908 * C10928) * C48609) *
               C7642 +
           (C10339 * C2395 + C10340 * C48642 + (C10521 - C10520) * C2396 +
            (C10523 - C10522) * C48631 +
            (C48212 * C10929 - C8908 * C10926) * C2397 +
            (C48212 * C10932 - C8908 * C10930) * C48609) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
               C4868 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
               C48574 +
           (C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
            C3720 * C349 - C3726 * C343 + C48610 * C350 - C3727 * C344) *
               C4869 +
           (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
            C3720 * C361 - C3726 * C354 + C48610 * C362 - C3727 * C355) *
               C48416) *
              C48318 * C48300 * C48283 * C110 +
          ((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
            C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
               C4868 +
           (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
            C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
               C48574 +
           (C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
            C3726 * C344 - C3720 * C350 + C3727 * C345 - C48610 * C351) *
               C4869 +
           (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
            C3726 * C355 - C3720 * C362 + C3727 * C356 - C48610 * C363) *
               C48416) *
              C48318 * C48300 * C48283 * C111 +
          ((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
            C3720 * C130 - C3726 * C123 + C48610 * C136 - C3727 * C124) *
               C4868 +
           (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
            C3720 * C144 - C3726 * C135 + C48610 * C145 - C3727 * C137) *
               C48574 +
           (C3718 * C349 - C3724 * C343 + C3719 * C350 - C3725 * C344 +
            C3720 * C351 - C3726 * C345 + C48610 * C357 - C3727 * C346) *
               C4869 +
           (C3718 * C361 - C3724 * C354 + C3719 * C362 - C3725 * C355 +
            C3720 * C363 - C3726 * C356 + C48610 * C364 - C3727 * C358) *
               C48416) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C4868 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48574 +
            (C48551 * C347 - C47223 * C341 + C48222 * C348 - C47204 * C342) *
                C4869 +
            (C48551 * C359 - C47223 * C352 + C48222 * C360 - C47204 * C353) *
                C48416) *
               C7641 +
           ((C11176 - C11177 + C11178 - C11179) * C4868 +
            (C11180 - C11181 + C11182 - C11183) * C48574 +
            (C11739 - C11738 + C11741 - C11740) * C4869 +
            (C11743 - C11742 + C11745 - C11744) * C48416) *
               C7642 +
           (C11598 * C4868 + C11599 * C48574 +
            (C11747 - C11746 + C11749 - C11748) * C4869 +
            (C11751 - C11750 + C11753 - C11752) * C48416) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                C4868 +
            (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                C48574 +
            (C47223 * C342 - C48551 * C348 + C47204 * C343 - C48222 * C349) *
                C4869 +
            (C47223 * C353 - C48551 * C360 + C47204 * C354 - C48222 * C361) *
                C48416) *
               C7641 +
           ((C11200 - C11201 + C11202 - C11203) * C4868 +
            (C11204 - C11205 + C11206 - C11207) * C48574 +
            (C47223 * C620 - C48551 * C625 + C47204 * C621 - C48222 * C626) *
                C4869 +
            (C47223 * C630 - C48551 * C635 + C47204 * C631 - C48222 * C636) *
                C48416) *
               C7642 +
           ((C11208 - C11209 + C11210 - C11211) * C4868 +
            (C11212 - C11213 + C11214 - C11215) * C48574 +
            (C47223 * C1366 - C48551 * C1370 + C47204 * C1367 -
             C48222 * C1371) *
                C4869 +
            (C47223 * C1373 - C48551 * C1378 + C47204 * C1374 -
             C48222 * C1379) *
                C48416) *
               C48606) *
              C48300 * C48283 * C111 +
          (((C48551 * C128 - C47223 * C121 + C48222 * C129 - C47204 * C122) *
                C4868 +
            (C48551 * C142 - C47223 * C133 + C48222 * C143 - C47204 * C134) *
                C48574 +
            (C48551 * C349 - C47223 * C343 + C48222 * C350 - C47204 * C344) *
                C4869 +
            (C48551 * C361 - C47223 * C354 + C48222 * C362 - C47204 * C355) *
                C48416) *
               C7641 +
           ((C48551 * C241 - C47223 * C235 + C48222 * C242 - C47204 * C236) *
                C4868 +
            (C48551 * C253 - C47223 * C246 + C48222 * C254 - C47204 * C247) *
                C48574 +
            (C48551 * C626 - C47223 * C621 + C48222 * C627 - C47204 * C622) *
                C4869 +
            (C48551 * C636 - C47223 * C631 + C48222 * C637 - C47204 * C632) *
                C48416) *
               C7642 +
           ((C48551 * C524 - C47223 * C519 + C48222 * C525 - C47204 * C520) *
                C4868 +
            (C48551 * C534 - C47223 * C529 + C48222 * C535 - C47204 * C530) *
                C48574 +
            (C48551 * C1371 - C47223 * C1367 + C48222 * C1375 -
             C47204 * C1368) *
                C4869 +
            (C48551 * C1379 - C47223 * C1374 + C48222 * C1380 -
             C47204 * C1376) *
                C48416) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
             C3720 * C349 - C3726 * C343 + C48610 * C350 - C3727 * C344) *
                C4869 +
            (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
             C3720 * C361 - C3726 * C354 + C48610 * C362 - C3727 * C355) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
             C3726 * C344 - C3720 * C350 + C3727 * C345 - C48610 * C351) *
                C4869 +
            (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
             C3726 * C355 - C3720 * C362 + C3727 * C356 - C48610 * C363) *
                C48416) *
               C48318 * C48300 * C229 +
           ((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                C4868 +
            (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                C48574 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                C4869 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C48551 * C347 - C47223 * C341 + C48222 * C348 - C47204 * C342) *
                 C4869 +
             (C48551 * C359 - C47223 * C352 + C48222 * C360 - C47204 * C353) *
                 C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 +
             (C11739 - C11738 + C11741 - C11740) * C4869 +
             (C11743 - C11742 + C11745 - C11744) * C48416) *
                C7642 +
            (C11598 * C4868 + C11599 * C48574 +
             (C11747 - C11746 + C11749 - C11748) * C4869 +
             (C11751 - C11750 + C11753 - C11752) * C48416) *
                C48606) *
               C48300 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 +
             (C11738 - C11739 + C11740 - C11741) * C4869 +
             (C11742 - C11743 + C11744 - C11745) * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 +
             (C11746 - C11747 + C11748 - C11749) * C4869 +
             (C11750 - C11751 + C11752 - C11753) * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C47223 * C342 - C48551 * C348 + C47204 * C343 - C48222 * C349) *
                 C4869 +
             (C47223 * C353 - C48551 * C360 + C47204 * C354 - C48222 * C361) *
                 C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C48300 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C4868 +
             (C11205 - C11204 + C11207 - C11206) * C48574 +
             (C12461 - C12460 + C12463 - C12462) * C4869 +
             (C12465 - C12464 + C12467 - C12466) * C48416) *
                C7641 +
            ((C11209 - C11208 + C11211 - C11210) * C4868 +
             (C11213 - C11212 + C11215 - C11214) * C48574 +
             (C12469 - C12468 + C12471 - C12470) * C4869 +
             (C12473 - C12472 + C12475 - C12474) * C48416) *
                C7642 +
            ((C11217 - C11216 + C11219 - C11218) * C4868 +
             (C11221 - C11220 + C11223 - C11222) * C48574 +
             (C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C4869 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C339 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                C4869 +
            (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                C48416) *
               C48318 * C339 +
           ((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                C4868 +
            (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                C48574 +
            (C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
             C3720 * C878 - C3726 * C873 + C48610 * C879 - C3727 * C874) *
                C4869 +
            (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
             C3720 * C888 - C3726 * C883 + C48610 * C889 - C3727 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 +
             (C11739 - C11738 + C11741 - C11740) * C4869 +
             (C11743 - C11742 + C11745 - C11744) * C48416) *
                C7642 +
            (C11598 * C4868 + C11599 * C48574 +
             (C11747 - C11746 + C11749 - C11748) * C4869 +
             (C11751 - C11750 + C11753 - C11752) * C48416) *
                C48606) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            ((C11738 - C11739 + C11740 - C11741) * C4868 +
             (C11742 - C11743 + C11744 - C11745) * C48574 +
             (C47223 * C2258 - C48551 * C2264 + C47204 * C2259 -
              C48222 * C2265) *
                 C4869 +
             (C47223 * C2267 - C48551 * C2276 + C47204 * C2268 -
              C48222 * C2277) *
                 C48416) *
                C7642 +
            ((C11746 - C11747 + C11748 - C11749) * C4868 +
             (C11750 - C11751 + C11752 - C11753) * C48574 +
             (C47223 * C2261 - C48551 * C2270 + C47204 * C2262 -
              C48222 * C2271) *
                 C4869 +
             (C47223 * C2273 - C48551 * C2279 + C47204 * C2274 -
              C48222 * C2280) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C12678 - C12679 + C12680 - C12681) * C4869 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C339 +
           (((C12679 - C12678 + C12681 - C12680) * C4868 +
             (C12683 - C12682 + C12685 - C12684) * C48574 +
             (C48551 * C876 - C47223 * C871 + C48222 * C877 - C47204 * C872) *
                 C4869 +
             (C48551 * C886 - C47223 * C881 + C48222 * C887 - C47204 * C882) *
                 C48416) *
                C7641 +
            ((C12461 - C12460 + C12463 - C12462) * C4868 +
             (C12465 - C12464 + C12467 - C12466) * C48574 +
             (C48551 * C2265 - C47223 * C2259 + C48222 * C2266 -
              C47204 * C2260) *
                 C4869 +
             (C48551 * C2277 - C47223 * C2268 + C48222 * C2278 -
              C47204 * C2269) *
                 C48416) *
                C7642 +
            ((C12469 - C12468 + C12471 - C12470) * C4868 +
             (C12473 - C12472 + C12475 - C12474) * C48574 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C4869 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                C4869 +
            (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                C48416) *
               C48318 * C48300 * C447 +
           ((C3876 - C3875 + C3878 - C3877 + C3880 - C3879 + C3882 - C3881) *
                C4868 +
            (C3884 - C3883 + C3886 - C3885 + C3888 - C3887 + C3890 - C3889) *
                C48574 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48610 * C628 - C3727 * C623) *
                C4869 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48610 * C638 - C3727 * C633) *
                C48416) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 +
             (C11739 - C11738 + C11741 - C11740) * C4869 +
             (C11743 - C11742 + C11745 - C11744) * C48416) *
                C7642 +
            (C11598 * C4868 + C11599 * C48574 +
             (C11747 - C11746 + C11749 - C11748) * C4869 +
             (C11751 - C11750 + C11753 - C11752) * C48416) *
                C48606) *
               C48300 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 +
             (C11738 - C11739 + C11740 - C11741) * C4869 +
             (C11742 - C11743 + C11744 - C11745) * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 +
             (C11746 - C11747 + C11748 - C11749) * C4869 +
             (C11750 - C11751 + C11752 - C11753) * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C12678 - C12679 + C12680 - C12681) * C4869 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C48300 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C4868 +
             (C11205 - C11204 + C11207 - C11206) * C48574 +
             (C12461 - C12460 + C12463 - C12462) * C4869 +
             (C12465 - C12464 + C12467 - C12466) * C48416) *
                C7641 +
            ((C11209 - C11208 + C11211 - C11210) * C4868 +
             (C11213 - C11212 + C11215 - C11214) * C48574 +
             (C12469 - C12468 + C12471 - C12470) * C4869 +
             (C12473 - C12472 + C12475 - C12474) * C48416) *
                C7642 +
            ((C11217 - C11216 + C11219 - C11218) * C4868 +
             (C11221 - C11220 + C11223 - C11222) * C48574 +
             (C48551 * C1824 - C47223 * C1821 + C48222 * C1825 -
              C47204 * C1822) *
                 C4869 +
             (C48551 * C1830 - C47223 * C1827 + C48222 * C1831 -
              C47204 * C1828) *
                 C48416) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
               C4868 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
               C48574 +
           (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
               C4869 +
           (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
               C48416) *
              C48318 * C48300 * C513 +
          ((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
               C4868 +
           (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
               C48574 +
           (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
               C4869 +
           (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
               C48416) *
              C48318 * C48300 * C514 +
          ((C4250 - C4249 + C4252 - C4251 + C4254 - C4253 + C4256 - C4255) *
               C4868 +
           (C4258 - C4257 + C4260 - C4259 + C4262 - C4261 + C4264 - C4263) *
               C48574 +
           (C3718 * C1369 - C3724 * C1365 + C3719 * C1370 - C3725 * C1366 +
            C3720 * C1371 - C3726 * C1367 + C48610 * C1375 - C3727 * C1368) *
               C4869 +
           (C3718 * C1377 - C3724 * C1372 + C3719 * C1378 - C3725 * C1373 +
            C3720 * C1379 - C3726 * C1374 + C48610 * C1380 - C3727 * C1376) *
               C48416) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C4868 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48574 +
            (C12670 - C12671 + C12672 - C12673) * C4869 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C7641 +
           ((C11176 - C11177 + C11178 - C11179) * C4868 +
            (C11180 - C11181 + C11182 - C11183) * C48574 +
            (C11739 - C11738 + C11741 - C11740) * C4869 +
            (C11743 - C11742 + C11745 - C11744) * C48416) *
               C7642 +
           C13038 * C48606) *
              C48300 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C4868 +
            (C11181 - C11180 + C11183 - C11182) * C48574 +
            (C11738 - C11739 + C11740 - C11741) * C4869 +
            (C11742 - C11743 + C11744 - C11745) * C48416) *
               C7641 +
           ((C11185 - C11184 + C11187 - C11186) * C4868 +
            (C11189 - C11188 + C11191 - C11190) * C48574 +
            (C11746 - C11747 + C11748 - C11749) * C4869 +
            (C11750 - C11751 + C11752 - C11753) * C48416) *
               C7642 +
           ((C11193 - C11192 + C11195 - C11194) * C4868 +
            (C11197 - C11196 + C11199 - C11198) * C48574 +
            (C11754 - C11755 + C11756 - C11757) * C4869 +
            (C11758 - C11759 + C11760 - C11761) * C48416) *
               C48606) *
              C48300 * C514 +
          (C13038 * C7641 +
           (C11600 * C4868 + C11601 * C48574 +
            (C11755 - C11754 + C11757 - C11756) * C4869 +
            (C11759 - C11758 + C11761 - C11760) * C48416) *
               C7642 +
           ((C11591 - C11590 + C11593 - C11592) * C4868 +
            (C11595 - C11594 + C11597 - C11596) * C48574 +
            (C48551 * C9115 - C47223 * C9113 + C48222 * C9117 -
             C47204 * C9114) *
                C4869 +
            (C48551 * C9119 - C47223 * C9116 + C48222 * C9120 -
             C47204 * C9118) *
                C48416) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C339 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C447 +
          (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C339 +
           ((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                C4868 +
            (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                C48574 +
            (C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
             C3720 * C2266 - C3726 * C2260 + C48610 * C2545 - C3727 * C2544) *
                C4869 +
            (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
             C3720 * C2278 - C3726 * C2269 + C48610 * C2547 - C3727 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
             C13262 * C48416) *
                C7642 +
            C13038 * C48606) *
               C339 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            (C13263 * C4868 + C13264 * C48574 +
             (C13241 - C13242 + C13243 - C13244) * C4869 +
             (C13245 - C13246 + C13247 - C13248) * C48416) *
                C7642 +
            (C13265 * C4868 + C13266 * C48574 +
             (C13253 - C13254 + C13255 - C13256) * C4869 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C48606) *
               C48603) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 + C13263 * C4869 +
             C13264 * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 + C13265 * C4869 +
             C13266 * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C339 +
           ((C13261 * C4868 + C13262 * C48574 +
             (C13242 - C13241 + C13244 - C13243) * C4869 +
             (C13246 - C13245 + C13248 - C13247) * C48416) *
                C7641 +
            (C13033 * C4868 + C13034 * C48574 +
             (C13254 - C13253 + C13256 - C13255) * C4869 +
             (C13258 - C13257 + C13260 - C13259) * C48416) *
                C7642 +
            ((C11755 - C11754 + C11757 - C11756) * C4868 +
             (C11759 - C11758 + C11761 - C11760) * C48574 +
             (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
              C47204 * C9880) *
                 C4869 +
             (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
              C47204 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C721 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48610 * C130) *
                C4868 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48610 * C144) *
                C48574 +
            (C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                C4869 +
            (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                C48416) *
               C48318 * C721 +
           ((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                C4868 +
            (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                C48574 +
            (C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
             C3720 * C878 - C3726 * C873 + C48610 * C879 - C3727 * C874) *
                C4869 +
            (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
             C3720 * C888 - C3726 * C883 + C48610 * C889 - C3727 * C884) *
                C48416) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
             C13262 * C48416) *
                C7642 +
            C13038 * C48606) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            (C13263 * C4868 + C13264 * C48574 +
             (C13241 - C13242 + C13243 - C13244) * C4869 +
             (C13245 - C13246 + C13247 - C13248) * C48416) *
                C7642 +
            (C13265 * C4868 + C13266 * C48574 +
             (C13253 - C13254 + C13255 - C13256) * C4869 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C47223 * C120 - C48551 * C127 + C47204 * C121 - C48222 * C128) *
                 C4868 +
             (C47223 * C132 - C48551 * C141 + C47204 * C133 - C48222 * C142) *
                 C48574 +
             (C12678 - C12679 + C12680 - C12681) * C4869 +
             (C12682 - C12683 + C12684 - C12685) * C48416) *
                C7641 +
            ((C11200 - C11201 + C11202 - C11203) * C4868 +
             (C11204 - C11205 + C11206 - C11207) * C48574 +
             (C12460 - C12461 + C12462 - C12463) * C4869 +
             (C12464 - C12465 + C12466 - C12467) * C48416) *
                C7642 +
            ((C11208 - C11209 + C11210 - C11211) * C4868 +
             (C11212 - C11213 + C11214 - C11215) * C48574 +
             (C12468 - C12469 + C12470 - C12471) * C4869 +
             (C12472 - C12473 + C12474 - C12475) * C48416) *
                C48606) *
               C721 +
           (((C12679 - C12678 + C12681 - C12680) * C4868 +
             (C12683 - C12682 + C12685 - C12684) * C48574 +
             (C48551 * C876 - C47223 * C871 + C48222 * C877 - C47204 * C872) *
                 C4869 +
             (C48551 * C886 - C47223 * C881 + C48222 * C887 - C47204 * C882) *
                 C48416) *
                C7641 +
            ((C12461 - C12460 + C12463 - C12462) * C4868 +
             (C12465 - C12464 + C12467 - C12466) * C48574 +
             (C48551 * C2265 - C47223 * C2259 + C48222 * C2266 -
              C47204 * C2260) *
                 C4869 +
             (C48551 * C2277 - C47223 * C2268 + C48222 * C2278 -
              C47204 * C2269) *
                 C48416) *
                C7642 +
            ((C12469 - C12468 + C12471 - C12470) * C4868 +
             (C12473 - C12472 + C12475 - C12474) * C48574 +
             (C48551 * C2271 - C47223 * C2262 + C48222 * C2272 -
              C47204 * C2263) *
                 C4869 +
             (C48551 * C2280 - C47223 * C2274 + C48222 * C2281 -
              C47204 * C2275) *
                 C48416) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
                C4868 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
                C48574 +
            (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C4869 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48416) *
               C48318 * C721 +
           ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C4868 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48574 +
            (C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
             C3726 * C872 - C3720 * C877 + C3727 * C873 - C48610 * C878) *
                C4869 +
            (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
             C3726 * C882 - C3720 * C887 + C3727 * C883 - C48610 * C888) *
                C48416) *
               C48318 * C48603) *
              C229 +
          (((C3860 - C3859 + C3862 - C3861 + C3864 - C3863 + C3866 - C3865) *
                C4868 +
            (C3868 - C3867 + C3870 - C3869 + C3872 - C3871 + C3874 - C3873) *
                C48574 +
            (C4395 - C4396 + C4397 - C4398 + C4399 - C4400 + C4401 - C4402) *
                C4869 +
            (C4403 - C4404 + C4405 - C4406 + C4407 - C4408 + C4409 - C4410) *
                C48416) *
               C48318 * C721 +
           ((C4396 - C4395 + C4398 - C4397 + C4400 - C4399 + C4402 - C4401) *
                C4868 +
            (C4404 - C4403 + C4406 - C4405 + C4408 - C4407 + C4410 - C4409) *
                C48574 +
            (C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
             C3720 * C2266 - C3726 * C2260 + C48610 * C2545 - C3727 * C2544) *
                C4869 +
            (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
             C3720 * C2278 - C3726 * C2269 + C48610 * C2547 - C3727 * C2546) *
                C48416) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                 C4868 +
             (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                 C48574 +
             (C12670 - C12671 + C12672 - C12673) * C4869 +
             (C12674 - C12675 + C12676 - C12677) * C48416) *
                C7641 +
            ((C11176 - C11177 + C11178 - C11179) * C4868 +
             (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
             C13262 * C48416) *
                C7642 +
            C13038 * C48606) *
               C721 +
           (((C12671 - C12670 + C12673 - C12672) * C4868 +
             (C12675 - C12674 + C12677 - C12676) * C48574 +
             (C47223 * C870 - C48551 * C875 + C47204 * C871 - C48222 * C876) *
                 C4869 +
             (C47223 * C880 - C48551 * C885 + C47204 * C881 - C48222 * C886) *
                 C48416) *
                C7641 +
            (C13263 * C4868 + C13264 * C48574 +
             (C13241 - C13242 + C13243 - C13244) * C4869 +
             (C13245 - C13246 + C13247 - C13248) * C48416) *
                C7642 +
            (C13265 * C4868 + C13266 * C48574 +
             (C13253 - C13254 + C13255 - C13256) * C4869 +
             (C13257 - C13258 + C13259 - C13260) * C48416) *
                C48606) *
               C48603) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C4868 +
             (C11181 - C11180 + C11183 - C11182) * C48574 + C13263 * C4869 +
             C13264 * C48416) *
                C7641 +
            ((C11185 - C11184 + C11187 - C11186) * C4868 +
             (C11189 - C11188 + C11191 - C11190) * C48574 + C13265 * C4869 +
             C13266 * C48416) *
                C7642 +
            ((C11193 - C11192 + C11195 - C11194) * C4868 +
             (C11197 - C11196 + C11199 - C11198) * C48574 +
             (C11754 - C11755 + C11756 - C11757) * C4869 +
             (C11758 - C11759 + C11760 - C11761) * C48416) *
                C48606) *
               C721 +
           ((C13261 * C4868 + C13262 * C48574 +
             (C13242 - C13241 + C13244 - C13243) * C4869 +
             (C13246 - C13245 + C13248 - C13247) * C48416) *
                C7641 +
            (C13033 * C4868 + C13034 * C48574 +
             (C13254 - C13253 + C13256 - C13255) * C4869 +
             (C13258 - C13257 + C13260 - C13259) * C48416) *
                C7642 +
            ((C11755 - C11754 + C11757 - C11756) * C4868 +
             (C11759 - C11758 + C11761 - C11760) * C48574 +
             (C48551 * C9618 - C47223 * C9616 + C48222 * C9881 -
              C47204 * C9880) *
                 C4869 +
             (C48551 * C9622 - C47223 * C9619 + C48222 * C9883 -
              C47204 * C9882) *
                 C48416) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48610 * C129 - C3727 * C122) *
               C4868 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48610 * C143 - C3727 * C134) *
               C48574 +
           (C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
               C4869 +
           (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
               C48416) *
              C48318 * C867 +
          ((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
               C4868 +
           (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
               C48574 +
           (C5879 - C5880 + C5881 - C5882 + C5883 - C5884 + C5885 - C5886) *
               C4869 +
           (C5887 - C5888 + C5889 - C5890 + C5891 - C5892 + C5893 - C5894) *
               C48416) *
              C48318 * C868 +
          ((C5880 - C5879 + C5882 - C5881 + C5884 - C5883 + C5886 - C5885) *
               C4868 +
           (C5888 - C5887 + C5890 - C5889 + C5892 - C5891 + C5894 - C5893) *
               C48574 +
           (C3718 * C2698 - C3724 * C2694 + C3719 * C2699 - C3725 * C2695 +
            C3720 * C2700 - C3726 * C2696 + C48610 * C2704 - C3727 * C2697) *
               C4869 +
           (C3718 * C2706 - C3724 * C2701 + C3719 * C2707 - C3725 * C2702 +
            C3720 * C2708 - C3726 * C2703 + C48610 * C2709 - C3727 * C2705) *
               C48416) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48551 * C126 - C47223 * C119 + C48222 * C127 - C47204 * C120) *
                C4868 +
            (C48551 * C140 - C47223 * C131 + C48222 * C141 - C47204 * C132) *
                C48574 +
            (C12670 - C12671 + C12672 - C12673) * C4869 +
            (C12674 - C12675 + C12676 - C12677) * C48416) *
               C7641 +
           ((C11176 - C11177 + C11178 - C11179) * C4868 +
            (C11180 - C11181 + C11182 - C11183) * C48574 + C13261 * C4869 +
            C13262 * C48416) *
               C7642 +
           C13038 * C48606) *
              C867 +
          (((C12671 - C12670 + C12673 - C12672) * C4868 +
            (C12675 - C12674 + C12677 - C12676) * C48574 +
            (C13801 - C13802 + C13803 - C13804) * C4869 +
            (C13805 - C13806 + C13807 - C13808) * C48416) *
               C7641 +
           (C13263 * C4868 + C13264 * C48574 +
            (C13241 - C13242 + C13243 - C13244) * C4869 +
            (C13245 - C13246 + C13247 - C13248) * C48416) *
               C7642 +
           (C13265 * C4868 + C13266 * C48574 +
            (C13253 - C13254 + C13255 - C13256) * C4869 +
            (C13257 - C13258 + C13259 - C13260) * C48416) *
               C48606) *
              C868 +
          (((C13802 - C13801 + C13804 - C13803) * C4868 +
            (C13806 - C13805 + C13808 - C13807) * C48574 +
            (C48551 * C2698 - C47223 * C2694 + C48222 * C2699 -
             C47204 * C2695) *
                C4869 +
            (C48551 * C2706 - C47223 * C2701 + C48222 * C2707 -
             C47204 * C2702) *
                C48416) *
               C7641 +
           ((C13242 - C13241 + C13244 - C13243) * C4868 +
            (C13246 - C13245 + C13248 - C13247) * C48574 +
            (C48551 * C3163 - C47223 * C3160 + C48222 * C3164 -
             C47204 * C3161) *
                C4869 +
            (C48551 * C3169 - C47223 * C3166 + C48222 * C3170 -
             C47204 * C3167) *
                C48416) *
               C7642 +
           ((C13254 - C13253 + C13256 - C13255) * C4868 +
            (C13258 - C13257 + C13260 - C13259) * C48574 +
            (C48551 * C10056 - C47223 * C10054 + C48222 * C10058 -
             C47204 * C10055) *
                C4869 +
            (C48551 * C10060 - C47223 * C10057 + C48222 * C10061 -
             C47204 * C10059) *
                C48416) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                     C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                     C105 * C130 - C117 * C123) *
                        C118 +
                    (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                     C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                     C105 * C144 - C117 * C135) *
                        C48329) *
                       C48318 * C48300 * C48283 * C110 +
                   ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                     C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                     C117 * C124 - C105 * C136) *
                        C118 +
                    (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                     C117 * C137 - C105 * C145) *
                        C48329) *
                       C48318 * C48300 * C48283 * C111 +
                   ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                     C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                     C105 * C138 - C117 * C125) *
                        C118 +
                    (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                     C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                     C105 * C146 - C117 * C139) *
                        C48329) *
                       C48318 * C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48593 * C128 - C1008 * C121) *
                         C118 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48593 * C142 - C1008 * C133) *
                         C48329) *
                        C48641 +
                    ((C1000 * C239 - C1006 * C233 + C1001 * C240 -
                      C1007 * C234 + C48593 * C241 - C1008 * C235) *
                         C118 +
                     (C1000 * C251 - C1006 * C244 + C1001 * C252 -
                      C1007 * C245 + C48593 * C253 - C1008 * C246) *
                         C48329) *
                        C48629 +
                    ((C1000 * C522 - C1006 * C517 + C1001 * C523 -
                      C1007 * C518 + C48593 * C524 - C1008 * C519) *
                         C118 +
                     (C1000 * C532 - C1006 * C527 + C1001 * C533 -
                      C1007 * C528 + C48593 * C534 - C1008 * C529) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                      C1001 * C128 + C1008 * C122 - C48593 * C129) *
                         C118 +
                     (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                      C1001 * C142 + C1008 * C134 - C48593 * C143) *
                         C48329) *
                        C48641 +
                    ((C1006 * C234 - C1000 * C240 + C1007 * C235 -
                      C1001 * C241 + C1008 * C236 - C48593 * C242) *
                         C118 +
                     (C1006 * C245 - C1000 * C252 + C1007 * C246 -
                      C1001 * C253 + C1008 * C247 - C48593 * C254) *
                         C48329) *
                        C48629 +
                    ((C1006 * C518 - C1000 * C523 + C1007 * C519 -
                      C1001 * C524 + C1008 * C520 - C48593 * C525) *
                         C118 +
                     (C1006 * C528 - C1000 * C533 + C1007 * C529 -
                      C1001 * C534 + C1008 * C530 - C48593 * C535) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C1000 * C128 - C1006 * C121 + C1001 * C129 -
                      C1007 * C122 + C48593 * C130 - C1008 * C123) *
                         C118 +
                     (C1000 * C142 - C1006 * C133 + C1001 * C143 -
                      C1007 * C134 + C48593 * C144 - C1008 * C135) *
                         C48329) *
                        C48641 +
                    ((C1000 * C241 - C1006 * C235 + C1001 * C242 -
                      C1007 * C236 + C48593 * C243 - C1008 * C237) *
                         C118 +
                     (C1000 * C253 - C1006 * C246 + C1001 * C254 -
                      C1007 * C247 + C48593 * C255 - C1008 * C248) *
                         C48329) *
                        C48629 +
                    ((C1000 * C524 - C1006 * C519 + C1001 * C525 -
                      C1007 * C520 + C48593 * C526 - C1008 * C521) *
                         C118 +
                     (C1000 * C534 - C1006 * C529 + C1001 * C535 -
                      C1007 * C530 + C48593 * C536 - C1008 * C531) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48638 * C126 - C7644 * C119 + C48625 * C127 -
                      C7645 * C120 + C48593 * C128 - C7646 * C121) *
                         C118 +
                     (C48638 * C140 - C7644 * C131 + C48625 * C141 -
                      C7645 * C132 + C48593 * C142 - C7646 * C133) *
                         C48329) *
                        C7641 +
                    ((C48638 * C239 - C7644 * C233 + C48625 * C240 -
                      C7645 * C234 + C48593 * C241 - C7646 * C235) *
                         C118 +
                     (C48638 * C251 - C7644 * C244 + C48625 * C252 -
                      C7645 * C245 + C48593 * C253 - C7646 * C246) *
                         C48329) *
                        C7642 +
                    ((C48638 * C522 - C7644 * C517 + C48625 * C523 -
                      C7645 * C518 + C48593 * C524 - C7646 * C519) *
                         C118 +
                     (C48638 * C532 - C7644 * C527 + C48625 * C533 -
                      C7645 * C528 + C48593 * C534 - C7646 * C529) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C110 +
                   (((C7644 * C120 - C48638 * C127 + C7645 * C121 -
                      C48625 * C128 + C7646 * C122 - C48593 * C129) *
                         C118 +
                     (C7644 * C132 - C48638 * C141 + C7645 * C133 -
                      C48625 * C142 + C7646 * C134 - C48593 * C143) *
                         C48329) *
                        C7641 +
                    ((C7644 * C234 - C48638 * C240 + C7645 * C235 -
                      C48625 * C241 + C7646 * C236 - C48593 * C242) *
                         C118 +
                     (C7644 * C245 - C48638 * C252 + C7645 * C246 -
                      C48625 * C253 + C7646 * C247 - C48593 * C254) *
                         C48329) *
                        C7642 +
                    ((C7644 * C518 - C48638 * C523 + C7645 * C519 -
                      C48625 * C524 + C7646 * C520 - C48593 * C525) *
                         C118 +
                     (C7644 * C528 - C48638 * C533 + C7645 * C529 -
                      C48625 * C534 + C7646 * C530 - C48593 * C535) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C111 +
                   (((C48638 * C128 - C7644 * C121 + C48625 * C129 -
                      C7645 * C122 + C48593 * C130 - C7646 * C123) *
                         C118 +
                     (C48638 * C142 - C7644 * C133 + C48625 * C143 -
                      C7645 * C134 + C48593 * C144 - C7646 * C135) *
                         C48329) *
                        C7641 +
                    ((C48638 * C241 - C7644 * C235 + C48625 * C242 -
                      C7645 * C236 + C48593 * C243 - C7646 * C237) *
                         C118 +
                     (C48638 * C253 - C7644 * C246 + C48625 * C254 -
                      C7645 * C247 + C48593 * C255 - C7646 * C248) *
                         C48329) *
                        C7642 +
                    ((C48638 * C524 - C7644 * C519 + C48625 * C525 -
                      C7645 * C520 + C48593 * C526 - C7646 * C521) *
                         C118 +
                     (C48638 * C534 - C7644 * C529 + C48625 * C535 -
                      C7645 * C530 + C48593 * C536 - C7646 * C531) *
                         C48329) *
                        C48606) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48212 * C126 - C8908 * C119) * C118 +
                     (C48212 * C140 - C8908 * C131) * C48329) *
                        C8903 +
                    ((C48212 * C239 - C8908 * C233) * C118 +
                     (C48212 * C251 - C8908 * C244) * C48329) *
                        C8904 +
                    ((C48212 * C522 - C8908 * C517) * C118 +
                     (C48212 * C532 - C8908 * C527) * C48329) *
                        C8905 +
                    ((C48212 * C1159 - C8908 * C1155) * C118 +
                     (C48212 * C1167 - C8908 * C1162) * C48329) *
                        C8906 +
                    ((C48212 * C1640 - C8908 * C1637) * C118 +
                     (C48212 * C1646 - C8908 * C1643) * C48329) *
                        C8907) *
                       C48300 * C48283 * C110 +
                   (((C8908 * C120 - C48212 * C127) * C118 +
                     (C8908 * C132 - C48212 * C141) * C48329) *
                        C8903 +
                    ((C8908 * C234 - C48212 * C240) * C118 +
                     (C8908 * C245 - C48212 * C252) * C48329) *
                        C8904 +
                    ((C8908 * C518 - C48212 * C523) * C118 +
                     (C8908 * C528 - C48212 * C533) * C48329) *
                        C8905 +
                    ((C8908 * C1156 - C48212 * C1160) * C118 +
                     (C8908 * C1163 - C48212 * C1168) * C48329) *
                        C8906 +
                    ((C8908 * C1638 - C48212 * C1641) * C118 +
                     (C8908 * C1644 - C48212 * C1647) * C48329) *
                        C8907) *
                       C48300 * C48283 * C111 +
                   (((C48212 * C128 - C8908 * C121) * C118 +
                     (C48212 * C142 - C8908 * C133) * C48329) *
                        C8903 +
                    ((C48212 * C241 - C8908 * C235) * C118 +
                     (C48212 * C253 - C8908 * C246) * C48329) *
                        C8904 +
                    ((C48212 * C524 - C8908 * C519) * C118 +
                     (C48212 * C534 - C8908 * C529) * C48329) *
                        C8905 +
                    ((C48212 * C1161 - C8908 * C1157) * C118 +
                     (C48212 * C1169 - C8908 * C1164) * C48329) *
                        C8906 +
                    ((C48212 * C1642 - C8908 * C1639) * C118 +
                     (C48212 * C1648 - C8908 * C1645) * C48329) *
                        C8907) *
                       C48300 * C48283 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C48300 * C229 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C48300 * C48601) *
              C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C48300 * C229 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48329) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 - C1001 * C1160 +
              C1008 * C1157 - C48593 * C1161) *
                 C118 +
             (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 - C1001 * C1168 +
              C1008 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                C48641 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                C48629 +
            ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 - C1007 * C1157 +
              C48593 * C1165 - C1008 * C1158) *
                 C118 +
             (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 - C1007 * C1164 +
              C48593 * C1170 - C1008 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C229 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C229 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C229 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C48283 * C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C339 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48329) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C339 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
              C1008 * C621 - C48593 * C626) *
                 C118 +
             (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
              C1008 * C631 - C48593 * C636) *
                 C48329) *
                C48629 +
            ((C1006 * C1365 - C1000 * C1369 + C1007 * C1366 - C1001 * C1370 +
              C1008 * C1367 - C48593 * C1371) *
                 C118 +
             (C1006 * C1372 - C1000 * C1377 + C1007 * C1373 - C1001 * C1378 +
              C1008 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C339 +
           (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
              C48593 * C350 - C1008 * C344) *
                 C118 +
             (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
              C48593 * C362 - C1008 * C355) *
                 C48329) *
                C48641 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48593 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48593 * C637 - C1008 * C632) *
                 C48329) *
                C48629 +
            ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C118 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C7644 * C619 - C48638 * C624 + C7645 * C620 - C48625 * C625 +
              C7646 * C621 - C48593 * C626) *
                 C118 +
             (C7644 * C629 - C48638 * C634 + C7645 * C630 - C48625 * C635 +
              C7646 * C631 - C48593 * C636) *
                 C48329) *
                C7642 +
            ((C7644 * C1365 - C48638 * C1369 + C7645 * C1366 - C48625 * C1370 +
              C7646 * C1367 - C48593 * C1371) *
                 C118 +
             (C7644 * C1372 - C48638 * C1377 + C7645 * C1373 - C48625 * C1378 +
              C7646 * C1374 - C48593 * C1379) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C231 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C339 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C8908 * C619 - C48212 * C624) * C118 +
             (C8908 * C629 - C48212 * C634) * C48329) *
                C8904 +
            ((C8908 * C1365 - C48212 * C1369) * C118 +
             (C8908 * C1372 - C48212 * C1377) * C48329) *
                C8905 +
            ((C8908 * C1820 - C48212 * C1823) * C118 +
             (C8908 * C1826 - C48212 * C1829) * C48329) *
                C8906 +
            ((C8908 * C9113 - C48212 * C9115) * C118 +
             (C8908 * C9116 - C48212 * C9119) * C48329) *
                C8907) *
               C48603) *
              C48283 * C231 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C339 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C48300 * C447 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C48300 * C48601) *
              C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C48300 * C447 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48329) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            ((C1184 - C1185 + C1186 - C1187 + C1188 - C1189) * C118 +
             (C1190 - C1191 + C1192 - C1193 + C1194 - C1195) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1006 * C1155 - C1000 * C1159 + C1007 * C1156 - C1001 * C1160 +
              C1008 * C1157 - C48593 * C1161) *
                 C118 +
             (C1006 * C1162 - C1000 * C1167 + C1007 * C1163 - C1001 * C1168 +
              C1008 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C1197 - C1196 + C1199 - C1198 + C1201 - C1200) * C118 +
             (C1203 - C1202 + C1205 - C1204 + C1207 - C1206) * C48329) *
                C48641 +
            ((C1209 - C1208 + C1211 - C1210 + C1213 - C1212) * C118 +
             (C1215 - C1214 + C1217 - C1216 + C1219 - C1218) * C48329) *
                C48629 +
            ((C1000 * C1160 - C1006 * C1156 + C1001 * C1161 - C1007 * C1157 +
              C48593 * C1165 - C1008 * C1158) *
                 C118 +
             (C1000 * C1168 - C1006 * C1163 + C1001 * C1169 - C1007 * C1164 +
              C48593 * C1170 - C1008 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            ((C7806 - C7807 + C7808 - C7809 + C7810 - C7811) * C118 +
             (C7812 - C7813 + C7814 - C7815 + C7816 - C7817) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C7644 * C1155 - C48638 * C1159 + C7645 * C1156 - C48625 * C1160 +
              C7646 * C1157 - C48593 * C1161) *
                 C118 +
             (C7644 * C1162 - C48638 * C1167 + C7645 * C1163 - C48625 * C1168 +
              C7646 * C1164 - C48593 * C1169) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C48300 * C447 +
           (((C7819 - C7818 + C7821 - C7820 + C7823 - C7822) * C118 +
             (C7825 - C7824 + C7827 - C7826 + C7829 - C7828) * C48329) *
                C7641 +
            ((C7831 - C7830 + C7833 - C7832 + C7835 - C7834) * C118 +
             (C7837 - C7836 + C7839 - C7838 + C7841 - C7840) * C48329) *
                C7642 +
            ((C48638 * C1160 - C7644 * C1156 + C48625 * C1161 - C7645 * C1157 +
              C48593 * C1165 - C7646 * C1158) *
                 C118 +
             (C48638 * C1168 - C7644 * C1163 + C48625 * C1169 - C7645 * C1164 +
              C48593 * C1170 - C7646 * C1166) *
                 C48329) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            ((C9004 - C9005) * C118 + (C9006 - C9007) * C48329) * C8905 +
            ((C9008 - C9009) * C118 + (C9010 - C9011) * C48329) * C8906 +
            ((C9012 - C9013) * C118 + (C9014 - C9015) * C48329) * C8907) *
               C48300 * C447 +
           (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C8908 * C8991 - C48212 * C8993) * C118 +
             (C8908 * C8994 - C48212 * C8997) * C48329) *
                C8907) *
               C48300 * C48601) *
              C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C48300 * C447 +
           (((C9017 - C9016) * C118 + (C9019 - C9018) * C48329) * C8903 +
            ((C9021 - C9020) * C118 + (C9023 - C9022) * C48329) * C8904 +
            ((C9025 - C9024) * C118 + (C9027 - C9026) * C48329) * C8905 +
            ((C9029 - C9028) * C118 + (C9031 - C9030) * C48329) * C8906 +
            ((C48212 * C8995 - C8908 * C8992) * C118 +
             (C48212 * C8998 - C8908 * C8996) * C48329) *
                C8907) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48329) *
              C48318 * C48300 * C513 +
          ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
            C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
            C117 * C237 - C105 * C243) *
               C118 +
           (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
            C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
            C117 * C248 - C105 * C255) *
               C48329) *
              C48318 * C48300 * C514 +
          ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
            C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
            C105 * C526 - C117 * C521) *
               C118 +
           (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
            C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
            C105 * C536 - C117 * C531) *
               C48329) *
              C48318 * C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48329) *
               C48641 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
               C48629 +
           C1674 * C48606) *
              C48300 * C513 +
          (((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
            (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
               C48641 +
           ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
            (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
               C48629 +
           ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
            (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
               C48606) *
              C48300 * C514 +
          (C1674 * C48641 +
           ((C1657 - C1656 + C1659 - C1658 + C1661 - C1660) * C118 +
            (C1663 - C1662 + C1665 - C1664 + C1667 - C1666) * C48329) *
               C48629 +
           ((C1000 * C1640 - C1006 * C1637 + C1001 * C1641 - C1007 * C1638 +
             C48593 * C1642 - C1008 * C1639) *
                C118 +
            (C1000 * C1646 - C1006 * C1643 + C1001 * C1647 - C1007 * C1644 +
             C48593 * C1648 - C1008 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C48300 * C513 +
          (((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
            (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
               C7641 +
           ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
            (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
               C7642 +
           ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
            (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
               C48606) *
              C48300 * C514 +
          (C8268 * C7641 +
           ((C8251 - C8250 + C8253 - C8252 + C8255 - C8254) * C118 +
            (C8257 - C8256 + C8259 - C8258 + C8261 - C8260) * C48329) *
               C7642 +
           ((C48638 * C1640 - C7644 * C1637 + C48625 * C1641 - C7645 * C1638 +
             C48593 * C1642 - C7646 * C1639) *
                C118 +
            (C48638 * C1646 - C7644 * C1643 + C48625 * C1647 - C7645 * C1644 +
             C48593 * C1648 - C7646 * C1645) *
                C48329) *
               C48606) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C48300 * C513 +
          (((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
           ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
           ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
           ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
           ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
              C48300 * C514 +
          (C9286 * C8903 + C9287 * C8904 + C9288 * C8905 +
           ((C9277 - C9276) * C118 + (C9279 - C9278) * C48329) * C8906 +
           ((C48212 * C9266 - C8908 * C9265) * C118 +
            (C48212 * C9268 - C8908 * C9267) * C48329) *
               C8907) *
              C48300 * C515) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C447 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C339 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48329) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C339 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
             (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                C48606) *
               C339 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                C48641 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                C48629 +
            ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
              C48593 * C1825 - C1008 * C1822) *
                 C118 +
             (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
              C48593 * C1831 - C1008 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C339 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C447 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C339 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C339 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C447 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C339 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C48283 * C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48329) *
               C48318 * C721 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48329) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C721 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48593 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48593 * C143) *
                 C48329) *
                C48641 +
            ((C1196 - C1197 + C1198 - C1199 + C1200 - C1201) * C118 +
             (C1202 - C1203 + C1204 - C1205 + C1206 - C1207) * C48329) *
                C48629 +
            ((C1208 - C1209 + C1210 - C1211 + C1212 - C1213) * C118 +
             (C1214 - C1215 + C1216 - C1217 + C1218 - C1219) * C48329) *
                C48606) *
               C721 +
           (((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
              C48593 * C350 - C1008 * C344) *
                 C118 +
             (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
              C48593 * C362 - C1008 * C355) *
                 C48329) *
                C48641 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48593 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48593 * C637 - C1008 * C632) *
                 C48329) *
                C48629 +
            ((C1000 * C1370 - C1006 * C1366 + C1001 * C1371 - C1007 * C1367 +
              C48593 * C1375 - C1008 * C1368) *
                 C118 +
             (C1000 * C1378 - C1006 * C1373 + C1001 * C1379 - C1007 * C1374 +
              C48593 * C1380 - C1008 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C48283 * C449 +
          ((((C7644 * C120 - C48638 * C127 + C7645 * C121 - C48625 * C128 +
              C7646 * C122 - C48593 * C129) *
                 C118 +
             (C7644 * C132 - C48638 * C141 + C7645 * C133 - C48625 * C142 +
              C7646 * C134 - C48593 * C143) *
                 C48329) *
                C7641 +
            ((C7818 - C7819 + C7820 - C7821 + C7822 - C7823) * C118 +
             (C7824 - C7825 + C7826 - C7827 + C7828 - C7829) * C48329) *
                C7642 +
            ((C7830 - C7831 + C7832 - C7833 + C7834 - C7835) * C118 +
             (C7836 - C7837 + C7838 - C7839 + C7840 - C7841) * C48329) *
                C48606) *
               C721 +
           (((C48638 * C348 - C7644 * C342 + C48625 * C349 - C7645 * C343 +
              C48593 * C350 - C7646 * C344) *
                 C118 +
             (C48638 * C360 - C7644 * C353 + C48625 * C361 - C7645 * C354 +
              C48593 * C362 - C7646 * C355) *
                 C48329) *
                C7641 +
            ((C48638 * C625 - C7644 * C620 + C48625 * C626 - C7645 * C621 +
              C48593 * C627 - C7646 * C622) *
                 C118 +
             (C48638 * C635 - C7644 * C630 + C48625 * C636 - C7645 * C631 +
              C48593 * C637 - C7646 * C632) *
                 C48329) *
                C7642 +
            ((C48638 * C1370 - C7644 * C1366 + C48625 * C1371 - C7645 * C1367 +
              C48593 * C1375 - C7646 * C1368) *
                 C118 +
             (C48638 * C1378 - C7644 * C1373 + C48625 * C1379 - C7645 * C1374 +
              C48593 * C1380 - C7646 * C1376) *
                 C48329) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C48283 * C449 +
          ((((C8908 * C120 - C48212 * C127) * C118 +
             (C8908 * C132 - C48212 * C141) * C48329) *
                C8903 +
            ((C9016 - C9017) * C118 + (C9018 - C9019) * C48329) * C8904 +
            ((C9020 - C9021) * C118 + (C9022 - C9023) * C48329) * C8905 +
            ((C9024 - C9025) * C118 + (C9026 - C9027) * C48329) * C8906 +
            ((C9028 - C9029) * C118 + (C9030 - C9031) * C48329) * C8907) *
               C721 +
           (((C48212 * C348 - C8908 * C342) * C118 +
             (C48212 * C360 - C8908 * C353) * C48329) *
                C8903 +
            ((C48212 * C625 - C8908 * C620) * C118 +
             (C48212 * C635 - C8908 * C630) * C48329) *
                C8904 +
            ((C48212 * C1370 - C8908 * C1366) * C118 +
             (C48212 * C1378 - C8908 * C1373) * C48329) *
                C8905 +
            ((C48212 * C1824 - C8908 * C1821) * C118 +
             (C48212 * C1830 - C8908 * C1827) * C48329) *
                C8906 +
            ((C48212 * C9117 - C8908 * C9114) * C118 +
             (C48212 * C9120 - C8908 * C9118) * C48329) *
                C8907) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48329) *
               C48318 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48329) *
               C48318 * C48603) *
              C229 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48329) *
               C48318 * C721 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48329) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48593 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48593 * C142 - C1008 * C133) *
                 C48329) *
                C48641 +
            ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
             (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
                C48629 +
            C1674 * C48606) *
               C721 +
           (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
              C1008 * C343 - C48593 * C349) *
                 C118 +
             (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
              C1008 * C354 - C48593 * C361) *
                 C48329) *
                C48641 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
                C48629 +
            ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C1173 - C1172 + C1175 - C1174 + C1177 - C1176) * C118 +
             (C1179 - C1178 + C1181 - C1180 + C1183 - C1182) * C48329) *
                C48641 +
            ((C1185 - C1184 + C1187 - C1186 + C1189 - C1188) * C118 +
             (C1191 - C1190 + C1193 - C1192 + C1195 - C1194) * C48329) *
                C48629 +
            ((C1656 - C1657 + C1658 - C1659 + C1660 - C1661) * C118 +
             (C1662 - C1663 + C1664 - C1665 + C1666 - C1667) * C48329) *
                C48606) *
               C721 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48329) *
                C48641 +
            ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48329) *
                C48629 +
            ((C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
              C48593 * C1825 - C1008 * C1822) *
                 C118 +
             (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
              C48593 * C1831 - C1008 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
              C48593 * C128 - C7646 * C121) *
                 C118 +
             (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
              C48593 * C142 - C7646 * C133) *
                 C48329) *
                C7641 +
            ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
             (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
                C7642 +
            C8268 * C48606) *
               C721 +
           (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
              C7646 * C343 - C48593 * C349) *
                 C118 +
             (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
              C7646 * C354 - C48593 * C361) *
                 C48329) *
                C7641 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
                C7642 +
            ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
                C48606) *
               C48603) *
              C229 +
          ((((C7795 - C7794 + C7797 - C7796 + C7799 - C7798) * C118 +
             (C7801 - C7800 + C7803 - C7802 + C7805 - C7804) * C48329) *
                C7641 +
            ((C7807 - C7806 + C7809 - C7808 + C7811 - C7810) * C118 +
             (C7813 - C7812 + C7815 - C7814 + C7817 - C7816) * C48329) *
                C7642 +
            ((C8250 - C8251 + C8252 - C8253 + C8254 - C8255) * C118 +
             (C8256 - C8257 + C8258 - C8259 + C8260 - C8261) * C48329) *
                C48606) *
               C721 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48329) *
                C7641 +
            ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48329) *
                C7642 +
            ((C48638 * C1823 - C7644 * C1820 + C48625 * C1824 - C7645 * C1821 +
              C48593 * C1825 - C7646 * C1822) *
                 C118 +
             (C48638 * C1829 - C7644 * C1826 + C48625 * C1830 - C7645 * C1827 +
              C48593 * C1831 - C7646 * C1828) *
                 C48329) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48212 * C126 - C8908 * C119) * C118 +
             (C48212 * C140 - C8908 * C131) * C48329) *
                C8903 +
            ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
            C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
               C721 +
           (((C8908 * C341 - C48212 * C347) * C118 +
             (C8908 * C352 - C48212 * C359) * C48329) *
                C8903 +
            ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
            ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
            ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
            ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
               C48603) *
              C229 +
          ((((C9001 - C9000) * C118 + (C9003 - C9002) * C48329) * C8903 +
            ((C9005 - C9004) * C118 + (C9007 - C9006) * C48329) * C8904 +
            ((C9009 - C9008) * C118 + (C9011 - C9010) * C48329) * C8905 +
            ((C9013 - C9012) * C118 + (C9015 - C9014) * C48329) * C8906 +
            ((C9276 - C9277) * C118 + (C9278 - C9279) * C48329) * C8907) *
               C721 +
           (((C9376 - C9375) * C118 + (C9378 - C9377) * C48329) * C8903 +
            ((C9380 - C9379) * C118 + (C9382 - C9381) * C48329) * C8904 +
            ((C9384 - C9383) * C118 + (C9386 - C9385) * C48329) * C8905 +
            ((C9388 - C9387) * C118 + (C9390 - C9389) * C48329) * C8906 +
            ((C48212 * C9371 - C8908 * C9370) * C118 +
             (C48212 * C9373 - C8908 * C9372) * C48329) *
                C8907) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48329) *
              C48318 * C867 +
          ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
            C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
            C117 * C345 - C105 * C351) *
               C118 +
           (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
            C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
            C117 * C356 - C105 * C363) *
               C48329) *
              C48318 * C868 +
          ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
            C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
            C105 * C879 - C117 * C874) *
               C118 +
           (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
            C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
            C105 * C889 - C117 * C884) *
               C48329) *
              C48318 * C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48593 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48593 * C142 - C1008 * C133) *
                C48329) *
               C48641 +
           ((C1172 - C1173 + C1174 - C1175 + C1176 - C1177) * C118 +
            (C1178 - C1179 + C1180 - C1181 + C1182 - C1183) * C48329) *
               C48629 +
           C1674 * C48606) *
              C867 +
          (((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48593 * C349) *
                C118 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48593 * C361) *
                C48329) *
               C48641 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48329) *
               C48629 +
           ((C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C118 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48329) *
               C48606) *
              C868 +
          (((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
             C48593 * C877 - C1008 * C872) *
                C118 +
            (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
             C48593 * C887 - C1008 * C882) *
                C48329) *
               C48641 +
           ((C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
             C48593 * C2266 - C1008 * C2260) *
                C118 +
            (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
             C48593 * C2278 - C1008 * C2269) *
                C48329) *
               C48629 +
           ((C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
             C48593 * C2272 - C1008 * C2263) *
                C118 +
            (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
             C48593 * C2281 - C1008 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48638 * C126 - C7644 * C119 + C48625 * C127 - C7645 * C120 +
             C48593 * C128 - C7646 * C121) *
                C118 +
            (C48638 * C140 - C7644 * C131 + C48625 * C141 - C7645 * C132 +
             C48593 * C142 - C7646 * C133) *
                C48329) *
               C7641 +
           ((C7794 - C7795 + C7796 - C7797 + C7798 - C7799) * C118 +
            (C7800 - C7801 + C7802 - C7803 + C7804 - C7805) * C48329) *
               C7642 +
           C8268 * C48606) *
              C867 +
          (((C7644 * C341 - C48638 * C347 + C7645 * C342 - C48625 * C348 +
             C7646 * C343 - C48593 * C349) *
                C118 +
            (C7644 * C352 - C48638 * C359 + C7645 * C353 - C48625 * C360 +
             C7646 * C354 - C48593 * C361) *
                C48329) *
               C7641 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48329) *
               C7642 +
           ((C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C118 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48329) *
               C48606) *
              C868 +
          (((C48638 * C875 - C7644 * C870 + C48625 * C876 - C7645 * C871 +
             C48593 * C877 - C7646 * C872) *
                C118 +
            (C48638 * C885 - C7644 * C880 + C48625 * C886 - C7645 * C881 +
             C48593 * C887 - C7646 * C882) *
                C48329) *
               C7641 +
           ((C48638 * C2264 - C7644 * C2258 + C48625 * C2265 - C7645 * C2259 +
             C48593 * C2266 - C7646 * C2260) *
                C118 +
            (C48638 * C2276 - C7644 * C2267 + C48625 * C2277 - C7645 * C2268 +
             C48593 * C2278 - C7646 * C2269) *
                C48329) *
               C7642 +
           ((C48638 * C2270 - C7644 * C2261 + C48625 * C2271 - C7645 * C2262 +
             C48593 * C2272 - C7646 * C2263) *
                C118 +
            (C48638 * C2279 - C7644 * C2273 + C48625 * C2280 - C7645 * C2274 +
             C48593 * C2281 - C7646 * C2275) *
                C48329) *
               C48606) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48212 * C126 - C8908 * C119) * C118 +
            (C48212 * C140 - C8908 * C131) * C48329) *
               C8903 +
           ((C9000 - C9001) * C118 + (C9002 - C9003) * C48329) * C8904 +
           C9286 * C8905 + C9287 * C8906 + C9288 * C8907) *
              C867 +
          (((C8908 * C341 - C48212 * C347) * C118 +
            (C8908 * C352 - C48212 * C359) * C48329) *
               C8903 +
           ((C9375 - C9376) * C118 + (C9377 - C9378) * C48329) * C8904 +
           ((C9379 - C9380) * C118 + (C9381 - C9382) * C48329) * C8905 +
           ((C9383 - C9384) * C118 + (C9385 - C9386) * C48329) * C8906 +
           ((C9387 - C9388) * C118 + (C9389 - C9390) * C48329) * C8907) *
              C868 +
          (((C48212 * C875 - C8908 * C870) * C118 +
            (C48212 * C885 - C8908 * C880) * C48329) *
               C8903 +
           ((C48212 * C2264 - C8908 * C2258) * C118 +
            (C48212 * C2276 - C8908 * C2267) * C48329) *
               C8904 +
           ((C48212 * C2270 - C8908 * C2261) * C118 +
            (C48212 * C2279 - C8908 * C2273) * C48329) *
               C8905 +
           ((C48212 * C9618 - C8908 * C9616) * C118 +
            (C48212 * C9622 - C8908 * C9619) * C48329) *
               C8906 +
           ((C48212 * C9620 - C8908 * C9617) * C118 +
            (C48212 * C9623 - C8908 * C9621) * C48329) *
               C8907) *
              C869) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
}
