/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47175 = ae * be;
    const double C47174 = ae + be;
    const double C47173 = 0 * be;
    const double C47172 = yA - yB;
    const double C47192 = 0 * be;
    const double C47191 = zA - zB;
    const double C47232 = 0 * ae;
    const double C47227 = 0 * be;
    const double C47226 = 0 * be;
    const double C47277 = 0 * be;
    const double C47319 = 0 * ae;
    const double C47314 = 0 * be;
    const double C47313 = 0 * be;
    const double C47364 = 0 * be;
    const double C47425 = yP - yQ;
    const double C47424 = zP - zQ;
    const double C47423 = p + q;
    const double C47422 = p * q;
    const double C47434 = bs[4];
    const double C47432 = xP - xQ;
    const double C47439 = bs[5];
    const double C47446 = bs[6];
    const double C47454 = bs[7];
    const double C47494 = bs[3];
    const double C47909 = bs[2];
    const double C115 = bs[0];
    const double C48254 = xA - xB;
    const double C48289 = ce + de;
    const double C48288 = ce * de;
    const double C48287 = xC - xD;
    const double C48302 = yC - yD;
    const double C48311 = zC - zD;
    const double C47176 = std::pow(C47174, 2);
    const double C47210 = 2 * C47174;
    const double C47228 = C47173 / C47174;
    const double C47177 = C47175 * C47172;
    const double C47229 = C47172 * C47173;
    const double C48352 = std::pow(C47172, 2);
    const double C48410 = C47172 * be;
    const double C48408 = C47172 * ae;
    const double C47315 = C47192 / C47174;
    const double C47193 = C47175 * C47191;
    const double C47316 = C47191 * C47192;
    const double C48369 = std::pow(C47191, 2);
    const double C48452 = C47191 * be;
    const double C48450 = C47191 * ae;
    const double C47239 = C47232 / C47174;
    const double C47234 = C47172 * C47227;
    const double C47278 = C47277 / C47174;
    const double C47326 = C47319 / C47174;
    const double C47321 = C47191 * C47314;
    const double C47365 = C47364 / C47174;
    const double C47480 = C47425 * be;
    const double C47575 = std::pow(C47425, 2);
    const double C47427 = C47424 * C47425;
    const double C47465 = C47424 * ae;
    const double C47650 = std::pow(C47424, 2);
    const double C47426 = 2 * C47422;
    const double C47440 = std::pow(C47432, 2);
    const double C48257 = C48254 * be;
    const double C48256 = C48254 * ae;
    const double C48255 = std::pow(C48254, 2);
    const double C48299 = 2 * C48289;
    const double C48607 = std::pow(C48289, 2);
    const double C48290 = std::pow(C48287, 2);
    const double C48606 = C48287 * de;
    const double C48605 = C48287 * ce;
    const double C48324 = std::pow(C48302, 2);
    const double C48611 = C48302 * de;
    const double C48609 = C48302 * ce;
    const double C48341 = std::pow(C48311, 2);
    const double C48612 = C48311 * de;
    const double C48610 = C48311 * ce;
    const double C47178 = 2 * C47176;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * ae * be) /
                        C47176;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * ae * be) /
                        C47176;
    const double C48603 = 4 * C47176;
    const double C48269 = std::pow(C47210, -1);
    const double C48604 = C47176 * C47210;
    const double C48600 = std::pow(C47210, -2);
    const double C47237 = C47229 / C47174;
    const double C48353 = C48352 * C47175;
    const double C48613 = std::pow(C48408, 2);
    const double C47324 = C47316 / C47174;
    const double C48370 = C48369 * C47175;
    const double C48615 = std::pow(C48450, 2);
    const double C47240 = C47234 / C47174;
    const double C47327 = C47321 / C47174;
    const double C47482 = C47434 * C47480;
    const double C47485 = C47439 * C47480;
    const double C47488 = C47446 * C47480;
    const double C47527 = C47494 * C47480;
    const double C47542 = C47454 * C47480;
    const double C47429 = C47427 * ae;
    const double C47467 = C47434 * C47465;
    const double C47470 = C47439 * C47465;
    const double C47473 = C47446 * C47465;
    const double C47495 = C47494 * C47465;
    const double C47510 = C47454 * C47465;
    const double C47428 = C47426 / C47423;
    const double C122 = (-(bs[1] * C47480 * C47426) / C47423) / C47174;
    const double C123 = (-(bs[1] * C47465 * C47426) / C47423) / C47174;
    const double C116 = -(C47432 * bs[1] * C47426) / C47423;
    const double C264 = -(C47425 * bs[1] * C47426) / C47423;
    const double C388 = -(C47424 * bs[1] * C47426) / C47423;
    const double C48593 = std::pow(C48256, 2);
    const double C48258 = C48255 * C47175;
    const double C48608 = std::pow(C48299, -1);
    const double C48642 = 2 * C48607;
    const double C48291 = C48290 * C48288;
    const double C48325 = C48324 * C48288;
    const double C48342 = C48341 * C48288;
    const double C47231 = C47173 / C47178;
    const double C47236 = C47227 / C47178;
    const double C47235 = C47226 / C47178;
    const double C47318 = C47192 / C47178;
    const double C47323 = C47314 / C47178;
    const double C47322 = C47313 / C47178;
    const double C48639 = C47174 * C48603;
    const double C48640 = 4 * C48604;
    const double C47241 = 0 - C47237;
    const double C48354 = C48353 / C47174;
    const double C47328 = 0 - C47324;
    const double C48371 = C48370 / C47174;
    const double C47244 = 0 - C47240;
    const double C47331 = 0 - C47327;
    const double C47430 = C47429 * be;
    const double C47433 = std::pow(C47428, 4);
    const double C47438 = -C47428;
    const double C47445 = std::pow(C47428, 6);
    const double C47908 = std::pow(C47428, 2);
    const double C124 =
        (C47432 * std::pow(C47428, 2) * bs[2] * C47480) / C47174;
    const double C125 =
        (C47432 * std::pow(C47428, 2) * bs[2] * C47465) / C47174;
    const double C270 =
        (C47425 * std::pow(C47428, 2) * bs[2] * C47480) / C47174 -
        (be * bs[1] * C47426) / (C47423 * C47174);
    const double C271 =
        (C47425 * std::pow(C47428, 2) * bs[2] * C47465) / C47174;
    const double C394 =
        (C47424 * std::pow(C47428, 2) * bs[2] * C47480) / C47174;
    const double C395 =
        (C47424 * std::pow(C47428, 2) * bs[2] * C47465) / C47174 -
        (ae * bs[1] * C47426) / (C47423 * C47174);
    const double C48259 = C48258 / C47174;
    const double C48292 = C48291 / C48289;
    const double C48326 = C48325 / C48289;
    const double C48343 = C48342 / C48289;
    const double C47245 = C47241 * ae;
    const double C48355 = -C48354;
    const double C47332 = C47328 * ae;
    const double C48372 = -C48371;
    const double C47248 = C47244 * ae;
    const double C47335 = C47331 * ae;
    const double C47435 = C47434 * C47430;
    const double C47442 = C47439 * C47430;
    const double C47447 = C47446 * C47430;
    const double C47456 = C47454 * C47430;
    const double C138 =
        (std::pow(-C47428, 3) * bs[3] * C47430 +
         std::pow(C47428, 4) * bs[4] * C47430 * std::pow(xP - xQ, 2)) /
        C47176;
    const double C47468 = C47433 * C47467;
    const double C47483 = C47433 * C47482;
    const double C47523 = C47434 * C47433;
    const double C47441 = std::pow(C47438, 5);
    const double C47453 = std::pow(C47438, 7);
    const double C47493 = std::pow(C47438, 3);
    const double C282 = (be * std::pow(C47428, 2) * bs[2] * C47424 * ae +
                         C47425 * std::pow(C47438, 3) * bs[3] * C47430) /
                        C47176;
    const double C406 = (ae * std::pow(C47428, 2) * bs[2] * C47425 * be +
                         C47424 * std::pow(C47438, 3) * bs[3] * C47430) /
                        C47176;
    const double C47474 = C47445 * C47473;
    const double C47489 = C47445 * C47488;
    const double C47565 = C47446 * C47445;
    const double C47910 = C47909 * C47908;
    const double C48260 = -C48259;
    const double C48293 = -C48292;
    const double C48327 = -C48326;
    const double C48344 = -C48343;
    const double C47249 = C47245 / C47174;
    const double C48356 = std::exp(C48355);
    const double C47336 = C47332 / C47174;
    const double C48373 = std::exp(C48372);
    const double C47252 = C47248 / C47174;
    const double C47339 = C47335 / C47174;
    const double C47436 = C47433 * C47435;
    const double C47448 = C47445 * C47447;
    const double C47498 = C47432 * C47468;
    const double C47573 = be * C47468;
    const double C47572 = C47425 * C47468;
    const double C48017 = C47424 * C47468;
    const double C47530 = C47432 * C47483;
    const double C47597 = C47425 * C47483;
    const double C47648 = ae * C47483;
    const double C47647 = C47424 * C47483;
    const double C47559 = C47432 * C47523;
    const double C47603 = C47425 * C47523;
    const double C47602 = C47523 * be;
    const double C47916 = C47523 * C47440;
    const double C47967 = C47523 * C47575;
    const double C48020 = C47523 * C47650;
    const double C48100 = C47424 * C47523;
    const double C48099 = C47523 * ae;
    const double C47443 = C47441 * C47442;
    const double C47471 = C47441 * C47470;
    const double C47486 = C47441 * C47485;
    const double C47525 = C47439 * C47441;
    const double C47457 = C47453 * C47456;
    const double C47512 = C47453 * C47510;
    const double C47544 = C47453 * C47542;
    const double C47496 = C47493 * C47495;
    const double C47528 = C47493 * C47527;
    const double C47557 = C47494 * C47493;
    const double C47475 = C47474 * C47440;
    const double C47509 = C47432 * C47474;
    const double C47672 = C47474 * C47575;
    const double C47709 = be * C47474;
    const double C47708 = C47425 * C47474;
    const double C48144 = C47424 * C47474;
    const double C47490 = C47489 * C47440;
    const double C47541 = C47432 * C47489;
    const double C47728 = C47425 * C47489;
    const double C47809 = C47489 * C47650;
    const double C47851 = ae * C47489;
    const double C47850 = C47424 * C47489;
    const double C47567 = C47565 * C47440;
    const double C47702 = C47432 * C47565;
    const double C47731 = C47565 * C47575;
    const double C47752 = C47425 * C47565;
    const double C47751 = C47565 * be;
    const double C48148 = C47565 * C47650;
    const double C117 = C47910 * C47440 - (bs[1] * C47426) / C47423;
    const double C265 = C47425 * C47432 * C47910;
    const double C389 = C47424 * C47432 * C47910;
    const double C580 = C47910 * C47575 - (bs[1] * C47426) / C47423;
    const double C682 = C47424 * C47425 * C47910;
    const double C933 = C47910 * C47650 - (bs[1] * C47426) / C47423;
    const double C48261 = std::exp(C48260);
    const double C48294 = std::exp(C48293);
    const double C48328 = std::exp(C48327);
    const double C48345 = std::exp(C48344);
    const double C47253 = C47249 - C47236;
    const double C150 = C48356 * C138;
    const double C146 = C48356 * C137;
    const double C144 = C48356 * C124;
    const double C2819 = C48356 * C406;
    const double C2817 = C48356 * C394;
    const double C47179 = C47177 * C48356;
    const double C113 = -(2 * ae * be * (yA - yB) * C48356) / (ae + be);
    const double C48409 = C48356 / C47210;
    const double C48411 = C48356 * C48408;
    const double C48418 = C48269 * C48356;
    const double C48619 = C48356 * C48410;
    const double C48650 = C48600 * C48356;
    const double C48648 = C48356 * C48613;
    const double C47340 = C47336 - C47323;
    const double C47194 = C47193 * C48373;
    const double C114 = -(2 * ae * be * (zA - zB) * C48373) / (ae + be);
    const double C48451 = C48373 / C47210;
    const double C48453 = C48373 * C48450;
    const double C48460 = C48269 * C48373;
    const double C48625 = C48373 * C48452;
    const double C48653 = C48600 * C48373;
    const double C48651 = C48373 * C48615;
    const double C47256 = C47252 - C47235;
    const double C47343 = C47339 - C47322;
    const double C139 = (2 * C47432 * C47436 +
                         C47432 * (C47436 + std::pow(-C47428, 5) * bs[5] *
                                                C47430 * std::pow(C47432, 2))) /
                        C47176;
    const double C283 =
        (be * C47432 * std::pow(C47438, 3) * bs[3] * C47424 * ae +
         C47425 * C47432 * C47436) /
        C47176;
    const double C407 =
        (ae * C47432 * std::pow(C47438, 3) * bs[3] * C47425 * be +
         C47424 * C47432 * C47436) /
        C47176;
    const double C47449 = C47448 * C47440;
    const double C47452 = C47432 * C47448;
    const double C47671 = C47425 * C47448;
    const double C47808 = C47424 * C47448;
    const double C47611 = C47559 * be;
    const double C47920 = 2 * C47559;
    const double C47971 = C47425 * C47559;
    const double C48027 = C47424 * C47559;
    const double C48026 = C47559 * ae;
    const double C47605 = C47603 * be;
    const double C48040 = 2 * C47603;
    const double C48077 = C47424 * C47603;
    const double C48076 = C47603 * ae;
    const double C48105 = 2 * C48100;
    const double C48103 = C48100 * ae;
    const double C47553 = C47432 * C47443;
    const double C47574 = C47425 * C47443;
    const double C47649 = C47424 * C47443;
    const double C140 =
        (3 * (C47436 + C47443 * C47440) +
         C47432 * (2 * C47432 * C47443 +
                   C47432 * (C47443 +
                             std::pow(C47428, 6) * bs[6] * C47430 * C47440))) /
        C47176;
    const double C284 = (be * (std::pow(C47438, 3) * bs[3] * C47465 +
                               C47433 * C47434 * C47465 * C47440) +
                         C47425 * (C47436 + C47443 * C47440)) /
                        C47176;
    const double C408 = (ae * (std::pow(C47438, 3) * bs[3] * C47480 +
                               C47433 * C47434 * C47480 * C47440) +
                         C47424 * (C47436 + C47443 * C47440)) /
                        C47176;
    const double C596 = (C47432 * C47436 + be * C47425 * C47498 +
                         C47425 * (be * C47498 + C47425 * C47432 * C47443)) /
                        C47176;
    const double C698 =
        (ae * (C47425 * C47432 * C47483 + C47432 * C47494 * C47493 * be) +
         C47424 * (be * C47498 + C47425 * C47432 * C47443)) /
        C47176;
    const double C949 = (C47432 * C47436 + ae * C47424 * C47530 +
                         C47424 * (ae * C47530 + C47424 * C47432 * C47443)) /
                        C47176;
    const double C47500 = C47471 * C47440;
    const double C47503 = C47432 * C47471;
    const double C47577 = C47471 * C47575;
    const double C47670 = be * C47471;
    const double C47669 = C47425 * C47471;
    const double C48098 = C47424 * C47471;
    const double C47532 = C47486 * C47440;
    const double C47535 = C47432 * C47486;
    const double C47601 = C47425 * C47486;
    const double C47652 = C47486 * C47650;
    const double C47807 = ae * C47486;
    const double C47806 = C47424 * C47486;
    const double C47561 = C47525 * C47440;
    const double C47564 = C47432 * C47525;
    const double C47699 = C47525 * C47575;
    const double C47730 = C47425 * C47525;
    const double C47729 = C47525 * be;
    const double C48101 = C47525 * C47650;
    const double C48146 = C47424 * C47525;
    const double C48145 = C47525 * ae;
    const double C47458 = C47457 * C47440;
    const double C47685 = C47432 * C47457;
    const double C47710 = C47425 * C47457;
    const double C47852 = C47424 * C47457;
    const double C47513 = C47512 * C47440;
    const double C47686 = C47432 * C47512;
    const double C47712 = C47512 * C47575;
    const double C47545 = C47544 * C47440;
    const double C47750 = C47425 * C47544;
    const double C47768 = C47432 * C47544;
    const double C47854 = C47544 * C47650;
    const double C595 = (C47493 * C47494 * C47430 + be * C47425 * C47496 +
                         C47425 * (be * C47496 + C47425 * C47436)) /
                        C47176;
    const double C697 = (ae * (C47425 * C47493 * C47494 * C47480 +
                               bs[2] * std::pow(C47428, 2) * be) +
                         C47424 * (be * C47496 + C47425 * C47436)) /
                        C47176;
    const double C1279 = (2 * (be * C47496 + C47425 * C47436) +
                          be * (C47496 + C47468 * std::pow(C47425, 2)) +
                          C47425 * (C47436 + be * C47425 * C47468 +
                                    C47425 * (be * C47468 + C47425 * C47443))) /
                         C47176;
    const double C127 =
        (std::pow(C47428, 2) * bs[2] * C47465 + C47496 * C47440) / C47174;
    const double C129 =
        (2 * C47432 * C47496 + C47432 * (C47496 + C47468 * C47440)) / C47174;
    const double C273 = (C47425 * C47432 * C47496) / C47174;
    const double C275 = (C47425 * (C47496 + C47468 * C47440)) / C47174;
    const double C397 =
        (C47424 * C47432 * C47496 + C47432 * bs[2] * std::pow(C47428, 2) * ae) /
        C47174;
    const double C586 = (C47908 * C47909 * C47465 + C47496 * C47575) / C47174;
    const double C588 = (C47432 * C47496 + C47498 * C47575) / C47174;
    const double C688 =
        (C47424 * C47425 * C47496 + C47425 * C47910 * ae) / C47174;
    const double C939 =
        (C47908 * C47909 * C47465 + C47424 * (C47424 * C47496 + C47910 * ae) +
         C47424 * C47910 * ae) /
        C47174;
    const double C1272 =
        (2 * C47425 * C47496 + C47425 * (C47496 + C47468 * C47575)) / C47174;
    const double C948 = (C47493 * C47494 * C47430 + ae * C47424 * C47528 +
                         C47424 * (ae * C47528 + C47424 * C47436)) /
                        C47176;
    const double C2812 = (2 * (ae * C47528 + C47424 * C47436) +
                          ae * (C47528 + C47483 * std::pow(C47424, 2)) +
                          C47424 * (C47436 + ae * C47424 * C47483 +
                                    C47424 * (ae * C47483 + C47424 * C47443))) /
                         C47176;
    const double C126 =
        (std::pow(C47428, 2) * bs[2] * C47480 + C47528 * C47440) / C47174;
    const double C128 =
        (2 * C47432 * C47528 + C47432 * (C47528 + C47483 * C47440)) / C47174;
    const double C272 =
        (C47425 * C47432 * C47528 + C47432 * bs[2] * std::pow(C47428, 2) * be) /
        C47174;
    const double C396 = (C47424 * C47432 * C47528) / C47174;
    const double C398 = (C47424 * (C47528 + C47483 * C47440)) / C47174;
    const double C585 =
        (C47908 * C47909 * C47480 + C47425 * (C47425 * C47528 + C47910 * be) +
         C47425 * C47910 * be) /
        C47174;
    const double C687 = (C47424 * (C47425 * C47528 + C47910 * be)) / C47174;
    const double C938 = (C47908 * C47909 * C47480 + C47528 * C47650) / C47174;
    const double C940 = (C47432 * C47528 + C47530 * C47650) / C47174;
    const double C2804 =
        (2 * C47424 * C47528 + C47424 * (C47528 + C47483 * C47650)) / C47174;
    const double C47598 = C47557 * be;
    const double C1465 =
        (ae * (C47528 + C47425 * (C47425 * C47483 + C47557 * be) +
               C47425 * C47557 * be) +
         C47424 * (C47436 + be * C47425 * C47468 +
                   C47425 * (be * C47468 + C47425 * C47443))) /
        C47176;
    const double C47913 = C47432 * C47557;
    const double C47917 = C47557 + C47916;
    const double C47966 = C47425 * C47557;
    const double C47968 = C47557 + C47967;
    const double C48019 = C47424 * C47557;
    const double C48018 = C47557 * ae;
    const double C48022 = C47557 + C48020;
    const double C274 = (C47425 * (C47528 + C47483 * C47440) +
                         (bs[2] * std::pow(C47428, 2) + C47557 * C47440) * be) /
                        C47174;
    const double C399 = (C47424 * (C47496 + C47468 * C47440) +
                         (bs[2] * std::pow(C47428, 2) + C47557 * C47440) * ae) /
                        C47174;
    const double C1458 = (C47424 * (C47496 + C47468 * C47575) +
                          (C47910 + C47557 * C47575) * ae) /
                         C47174;
    const double C2805 =
        (2 * (C47424 * C47496 + C47910 * ae) +
         C47424 * (C47496 + C47424 * (C47424 * C47468 + C47557 * ae) +
                   C47424 * C47557 * ae) +
         (C47910 + C47557 * C47650) * ae) /
        C47174;
    const double C118 =
        2 * C47432 * C47910 + C47432 * (C47910 + C47557 * C47440);
    const double C266 = C47425 * (C47910 + C47557 * C47440);
    const double C390 = C47424 * (C47910 + C47557 * C47440);
    const double C1267 =
        2 * C47425 * C47910 + C47425 * (C47910 + C47557 * C47575);
    const double C1453 = C47424 * (C47910 + C47557 * C47575);
    const double C2800 =
        2 * C47424 * C47910 + C47424 * (C47910 + C47557 * C47650);
    const double C47476 = C47471 + C47475;
    const double C47511 = 2 * C47509;
    const double C47583 = C47509 * C47575;
    const double C47684 = be * C47509;
    const double C47683 = C47425 * C47509;
    const double C48113 = C47424 * C47509;
    const double C47676 = C47471 + C47672;
    const double C47716 = 2 * C47708;
    const double C47714 = be * C47708;
    const double C48128 = C47424 * C47708;
    const double C47491 = C47486 + C47490;
    const double C47543 = 2 * C47541;
    const double C47614 = C47425 * C47541;
    const double C47658 = C47541 * C47650;
    const double C47821 = ae * C47541;
    const double C47820 = C47424 * C47541;
    const double C47813 = C47486 + C47809;
    const double C47858 = 2 * C47850;
    const double C47856 = ae * C47850;
    const double C47568 = C47525 + C47567;
    const double C47703 = C47702 * C47575;
    const double C47770 = C47425 * C47702;
    const double C47769 = C47702 * be;
    const double C48116 = C47702 * C47650;
    const double C47734 = C47525 + C47731;
    const double C47756 = C47752 * be;
    const double C48131 = C47752 * C47650;
    const double C48152 = C47525 + C48148;
    const double C48263 = C48261 * C48256;
    const double C48262 = C48261 / C47210;
    const double C48271 = C48269 * C48261;
    const double C48596 = C48261 * C48257;
    const double C48637 = C48600 * C48261;
    const double C48631 = C48261 * C48593;
    const double C48643 = C48608 * C48294;
    const double C48641 = C48294 * C48605;
    const double C262 = -(C48294 * C48606) / C48289;
    const double C48645 = C48608 * C48328;
    const double C48644 = C48328 * C48609;
    const double C510 = -(C48328 * C48611) / C48289;
    const double C48647 = C48608 * C48345;
    const double C48646 = C48345 * C48610;
    const double C784 = -(C48345 * C48612) / C48289;
    const double C47258 = C47253 / C47210;
    const double C47257 = C47172 * C47253;
    const double C47211 = 2 * C47179;
    const double C47233 = C47179 / C47176;
    const double C1071 = ((0 * ae) / C47174 - C47179 / C47176) / (2 * C47174) +
                         (0 * ae) / C47174;
    const double C3790 =
        ((C48356 - (C47172 * 2 * C47179) / C47174) * ae) / C47174 -
        C47173 / C47178;
    const double C3791 = (0 * ae) / C47174 - C47179 / C47176;
    const double C149 = C113 * C117;
    const double C147 = C113 * C125;
    const double C145 = C113 * C116;
    const double C289 = C113 * C265;
    const double C413 = C113 * C389;
    const double C2822 = C113 * C933;
    const double C2820 = C113 * C395;
    const double C2818 = C113 * C388;
    const double C3259 = C113 * C682;
    const double C7765 = (C48356 * std::pow(C48410, 2)) / C47176 + C48409;
    const double C48412 = C48411 * C48410;
    const double C48417 = C48411 / C47178;
    const double C48617 = C48411 / C47174;
    const double C48614 = C48269 * C48411;
    const double C1070 =
        (((C48356 - (C47172 * 2 * C47179) / C47174) * ae) / C47174 -
         C47173 / C47178) /
            (2 * C47174) +
        ((C47172 * ((0 * ae) / C47174 - C47179 / C47176) + C48418) * ae) /
            C47174;
    const double C48419 = C48418 * C48410;
    const double C48623 = C48408 * C48418;
    const double C48622 = 2 * C48418;
    const double C48660 = C48418 / C48603;
    const double C9033 = C48418 / C48640;
    const double C26137 = C48418 / C47210;
    const double C48656 = C48619 / C47174;
    const double C7766 = (-2 * C48269 * C48619) / C47174;
    const double C48672 = C48648 / C47176;
    const double C47345 = C47340 / C47210;
    const double C47344 = C47191 * C47340;
    const double C47298 = 2 * C47194;
    const double C47320 = C47194 / C47176;
    const double C2460 = ((0 * ae) / C47174 - C47194 / C47176) / (2 * C47174) +
                         (0 * ae) / C47174;
    const double C4966 =
        ((C48373 - (C47191 * 2 * C47194) / C47174) * ae) / C47174 -
        C47192 / C47178;
    const double C4967 = (0 * ae) / C47174 - C47194 / C47176;
    const double C15014 = (C48373 * std::pow(C48452, 2)) / C47176 + C48451;
    const double C48454 = C48453 * C48452;
    const double C48459 = C48453 / C47178;
    const double C48618 = C48453 / C47174;
    const double C48616 = C48269 * C48453;
    const double C2459 =
        (((C48373 - (C47191 * 2 * C47194) / C47174) * ae) / C47174 -
         C47192 / C47178) /
            (2 * C47174) +
        ((C47191 * ((0 * ae) / C47174 - C47194 / C47176) + C48460) * ae) /
            C47174;
    const double C48461 = C48460 * C48452;
    const double C48629 = C48450 * C48460;
    const double C48628 = 2 * C48460;
    const double C48666 = C48460 / C48603;
    const double C17481 = C48460 / C48640;
    const double C36177 = C48460 / C47210;
    const double C48662 = C48625 / C47174;
    const double C15015 = (-2 * C48269 * C48625) / C47174;
    const double C48674 = C48651 / C47176;
    const double C47262 = C47256 + C47228;
    const double C47349 = C47343 + C47315;
    const double C154 = C48356 * C139;
    const double C292 = C48356 * C283;
    const double C3799 = C48418 * C283;
    const double C22098 = C48418 * C283;
    const double C416 = C48356 * C407;
    const double C47450 = C47443 + C47449;
    const double C47455 = 2 * C47452;
    const double C47582 = C47425 * C47452;
    const double C47657 = C47424 * C47452;
    const double C47576 = C47573 + C47574;
    const double C47651 = C47648 + C47649;
    const double C158 = C48356 * C140;
    const double C296 = C48356 * C284;
    const double C3807 = C48418 * C284;
    const double C22106 = C48418 * C284;
    const double C420 = C48356 * C408;
    const double C1083 = C48650 * C596;
    const double C3980 = C48418 * C596;
    const double C7785 = C48650 * C596;
    const double C22279 = C48418 * C596;
    const double C2642 = C48356 * C698;
    const double C4134 = C48418 * C698;
    const double C22433 = C48418 * C698;
    const double C2464 = C48356 * C949;
    const double C47501 = C47468 + C47500;
    const double C47505 = 2 * C47503;
    const double C47581 = be * C47503;
    const double C47580 = C47425 * C47503;
    const double C1280 = (2 * (be * C47498 + C47425 * C47553) +
                          be * (C47498 + C47503 * std::pow(C47425, 2)) +
                          C47425 * (C47553 + be * C47425 * C47503 +
                                    C47425 * (be * C47503 + C47425 * C47452))) /
                         C47176;
    const double C48025 = C47424 * C47503;
    const double C1274 =
        (2 * C47425 * C47498 + C47425 * (C47498 + C47503 * C47575)) / C47174;
    const double C47578 = C47468 + C47577;
    const double C47674 = C47670 + C47671;
    const double C47675 = 2 * C47669;
    const double C47673 = be * C47669;
    const double C48075 = C47424 * C47669;
    const double C48102 = C48098 + C48099;
    const double C47533 = C47483 + C47532;
    const double C47537 = 2 * C47535;
    const double C47610 = C47425 * C47535;
    const double C47656 = ae * C47535;
    const double C47655 = C47424 * C47535;
    const double C1466 =
        (ae * (C47530 + C47425 * (C47425 * C47535 + C47559 * be) +
               C47425 * C47559 * be) +
         C47424 * (C47553 + be * C47425 * C47503 +
                   C47425 * (be * C47503 + C47425 * C47452))) /
        C47176;
    const double C2813 = (2 * (ae * C47530 + C47424 * C47553) +
                          ae * (C47530 + C47535 * std::pow(C47424, 2)) +
                          C47424 * (C47553 + ae * C47424 * C47535 +
                                    C47424 * (ae * C47535 + C47424 * C47452))) /
                         C47176;
    const double C2806 =
        (2 * C47424 * C47530 + C47424 * (C47530 + C47535 * C47650)) / C47174;
    const double C47604 = C47601 + C47602;
    const double C47653 = C47483 + C47652;
    const double C47811 = C47807 + C47808;
    const double C47812 = 2 * C47806;
    const double C47810 = ae * C47806;
    const double C47562 = C47523 + C47561;
    const double C47566 = 2 * C47564;
    const double C47616 = C47425 * C47564;
    const double C47615 = C47564 * be;
    const double C47972 = C47564 * C47575;
    const double C48028 = C47564 * C47650;
    const double C48115 = C47424 * C47564;
    const double C48114 = C47564 * ae;
    const double C47700 = C47523 + C47699;
    const double C47735 = 2 * C47730;
    const double C47733 = C47730 * be;
    const double C48078 = C47730 * C47650;
    const double C48130 = C47424 * C47730;
    const double C48129 = C47730 * ae;
    const double C47732 = C47728 + C47729;
    const double C48104 = C47523 + C48101;
    const double C48153 = 2 * C48146;
    const double C48151 = C48146 * ae;
    const double C48150 = C48144 + C48145;
    const double C47459 = C47448 + C47458;
    const double C47688 = C47425 * C47685;
    const double C47822 = C47424 * C47685;
    const double C47715 = C47709 + C47710;
    const double C47857 = C47851 + C47852;
    const double C47514 = C47474 + C47513;
    const double C47690 = C47686 * C47575;
    const double C47717 = C47474 + C47712;
    const double C47546 = C47489 + C47545;
    const double C47755 = C47750 + C47751;
    const double C47772 = C47425 * C47768;
    const double C47823 = C47768 * C47650;
    const double C47859 = C47489 + C47854;
    const double C3262 = C48356 * C697;
    const double C6536 = C48418 * C697;
    const double C24886 = C48418 * C697;
    const double C151 = C113 * C127;
    const double C155 = C113 * C129;
    const double C291 = C113 * C273;
    const double C295 = C113 * C275;
    const double C415 = C113 * C397;
    const double C3261 = C113 * C688;
    const double C2824 = C113 * C939;
    const double C2823 = C48356 * C948;
    const double C3686 = C48356 * C2812;
    const double C148 = C48356 * C126;
    const double C152 = C48356 * C128;
    const double C290 = C48356 * C272;
    const double C3795 = C48418 * C272;
    const double C22094 = C48418 * C272;
    const double C414 = C48356 * C396;
    const double C418 = C48356 * C398;
    const double C3260 = C48356 * C687;
    const double C6532 = C48418 * C687;
    const double C24882 = C48418 * C687;
    const double C2821 = C48356 * C938;
    const double C2462 = C48356 * C940;
    const double C3684 = C48356 * C2804;
    const double C47599 = C47597 + C47598;
    const double C7113 = C48418 * C1465;
    const double C10113 = C48650 * C1465;
    const double C16540 = C48650 * C1465;
    const double C25469 = C48418 * C1465;
    const double C587 =
        (C47432 * C47528 + C47425 * (C47425 * C47530 + C47913 * be) +
         C47425 * C47913 * be) /
        C47174;
    const double C689 = (C47424 * (C47425 * C47530 + C47913 * be)) / C47174;
    const double C690 =
        (C47424 * C47425 * C47498 + C47425 * C47913 * ae) / C47174;
    const double C941 =
        (C47432 * C47496 + C47424 * (C47424 * C47498 + C47913 * ae) +
         C47424 * C47913 * ae) /
        C47174;
    const double C1460 = (C47424 * (C47498 + C47503 * C47575) +
                          (C47913 + C47559 * C47575) * ae) /
                         C47174;
    const double C2807 =
        (2 * (C47424 * C47498 + C47913 * ae) +
         C47424 * (C47498 + C47424 * (C47424 * C47503 + C47559 * ae) +
                   C47424 * C47559 * ae) +
         (C47913 + C47559 * C47650) * ae) /
        C47174;
    const double C581 = C47432 * C47910 + C47913 * C47575;
    const double C683 = C47424 * C47425 * C47913;
    const double C934 = C47432 * C47910 + C47913 * C47650;
    const double C1268 =
        2 * C47425 * C47913 + C47425 * (C47913 + C47559 * C47575);
    const double C1454 = C47424 * (C47913 + C47559 * C47575);
    const double C2323 = C47425 * C47913 + C47971 * C47650;
    const double C2801 =
        2 * C47424 * C47913 + C47424 * (C47913 + C47559 * C47650);
    const double C119 = 3 * (C47910 + C47557 * C47440) +
                        C47432 * (2 * C47913 + C47432 * C47917);
    const double C267 = C47425 * (2 * C47913 + C47432 * C47917);
    const double C391 = C47424 * (2 * C47913 + C47432 * C47917);
    const double C582 = C47910 + C47557 * C47440 + C47917 * C47575;
    const double C684 = C47424 * C47425 * C47917;
    const double C935 = C47910 + C47557 * C47440 + C47917 * C47650;
    const double C2329 =
        (C47425 * C47496 + C47424 * (C47424 * C47572 + C47966 * ae) +
         C47424 * C47966 * ae) /
        C47174;
    const double C3250 =
        (2 * (C47424 * C47572 + C47966 * ae) +
         C47424 * (C47572 + C47424 * (C47424 * C47669 + C47603 * ae) +
                   C47424 * C47603 * ae) +
         (C47966 + C47603 * C47650) * ae) /
        C47174;
    const double C2321 = C47425 * C47910 + C47966 * C47650;
    const double C3246 =
        2 * C47424 * C47966 + C47424 * (C47966 + C47603 * C47650);
    const double C1749 = 3 * (C47910 + C47557 * C47575) +
                         C47425 * (2 * C47966 + C47425 * C47968);
    const double C1907 = C47424 * (2 * C47966 + C47425 * C47968);
    const double C2322 = C47910 + C47557 * C47575 + C47968 * C47650;
    const double C48021 = C48017 + C48018;
    const double C3668 = 3 * (C47910 + C47557 * C47650) +
                         C47424 * (2 * C48019 + C47424 * C48022);
    const double C294 = C48356 * C274;
    const double C3803 = C48418 * C274;
    const double C22102 = C48418 * C274;
    const double C419 = C113 * C399;
    const double C3685 = C113 * C2805;
    const double C153 = C113 * C118;
    const double C293 = C113 * C266;
    const double C417 = C113 * C390;
    const double C3683 = C113 * C2800;
    const double C47504 = C47432 * C47476;
    const double C47508 = 3 * C47476;
    const double C47588 = be * C47476;
    const double C47587 = C47425 * C47476;
    const double C48033 = C47424 * C47476;
    const double C47585 = C47503 + C47583;
    const double C47689 = 2 * C47683;
    const double C47687 = be * C47683;
    const double C48090 = C47424 * C47683;
    const double C47679 = C47425 * C47676;
    const double C47711 = 3 * C47676;
    const double C47707 = be * C47676;
    const double C48082 = C47424 * C47676;
    const double C47718 = C47448 + C47714;
    const double C47536 = C47432 * C47491;
    const double C47540 = 3 * C47491;
    const double C47623 = C47425 * C47491;
    const double C47663 = ae * C47491;
    const double C47662 = C47424 * C47491;
    const double C47660 = C47535 + C47658;
    const double C47826 = 2 * C47820;
    const double C47824 = ae * C47820;
    const double C47816 = C47424 * C47813;
    const double C47853 = 3 * C47813;
    const double C47849 = ae * C47813;
    const double C47860 = C47448 + C47856;
    const double C47569 = C47432 * C47568;
    const double C47629 = C47425 * C47568;
    const double C47628 = C47568 * be;
    const double C47977 = C47568 * C47575;
    const double C48036 = C47568 * C47650;
    const double C47704 = C47564 + C47703;
    const double C47773 = C47770 * be;
    const double C48093 = C47770 * C47650;
    const double C48119 = C47564 + C48116;
    const double C47737 = C47425 * C47734;
    const double C47753 = C47734 * be;
    const double C48085 = C47734 * C47650;
    const double C48134 = C47730 + C48131;
    const double C48155 = C47424 * C48152;
    const double C48264 = C48263 * C48257;
    const double C48270 = C48263 / C47178;
    const double C48597 = C48269 * C48263;
    const double C48595 = C48263 / C47174;
    const double C1066 = (C48261 * std::pow(C48257, 2)) / C47176 + C48262;
    const double C48272 = C48271 * C48257;
    const double C48601 = C48256 * C48271;
    const double C48599 = 2 * C48271;
    const double C48654 = C48271 / C48603;
    const double C107 = C48271 / C48640;
    const double C26140 = C48271 / C47210;
    const double C48633 = C48596 / C47174;
    const double C1067 = (-2 * C48269 * C48596) / C47174;
    const double C48667 = C48631 / C47176;
    const double C112 = C48643 / C48299;
    const double C110 = C48294 / C48299 - (C48641 * C48606) / C48607;
    const double C111 = C48641 / C48642 - (C48643 * C48606) / C48289;
    const double C512 = C48641 / C48289;
    const double C578 = C48645 / C48299;
    const double C260 = C48644 / C48289;
    const double C576 = C48328 / C48299 - (C48644 * C48611) / C48607;
    const double C577 = C48644 / C48642 - (C48645 * C48611) / C48289;
    const double C932 = C48647 / C48299;
    const double C386 = C48646 / C48289;
    const double C930 = C48345 / C48299 - (C48646 * C48612) / C48607;
    const double C931 = C48646 / C48642 - (C48647 * C48612) / C48289;
    const double C47263 = C47257 + 0;
    const double C47230 = C47172 * C47211;
    const double C7772 =
        ((-C47173 / C47174) / C47210 -
         ((C48356 - (C47172 * C47211) / C47174) * be) / C47174) /
            C47210 -
        ((C47172 * ((-C47211 / C47174) / C47210 - (0 * be) / C47174) + C48418) *
         be) /
            C47174;
    const double C7773 =
        ((-C47211 / C47174) / C47210 - (0 * be) / C47174) / C47210 -
        (0 * be) / C47174;
    const double C22090 = (-C47211 / C47174) / C47210 - (0 * be) / C47174;
    const double C47243 = C47239 - C47233;
    const double C1084 = C1071 * C588;
    const double C16541 = C1071 * C1458;
    const double C16535 = C1071 * C1453;
    const double C3814 = C3790 * C129;
    const double C3810 = C3790 * C118;
    const double C3806 = C3790 * C127;
    const double C3802 = C3790 * C117;
    const double C3798 = C3790 * C125;
    const double C3794 = C3790 * C116;
    const double C3985 = C3790 * C275;
    const double C3981 = C3790 * C266;
    const double C3977 = C3790 * C273;
    const double C3973 = C3790 * C265;
    const double C4139 = C3790 * C399;
    const double C4135 = C3790 * C390;
    const double C4131 = C3790 * C397;
    const double C4127 = C3790 * C389;
    const double C6535 = C3790 * C395;
    const double C6531 = C3790 * C388;
    const double C7110 = C3790 * C688;
    const double C7106 = C3790 * C682;
    const double C7652 = C3790 * C939;
    const double C7648 = C3790 * C933;
    const double C19794 = C3790 * C2805;
    const double C19790 = C3790 * C2800;
    const double C3808 = C3791 * C275;
    const double C3804 = C3791 * C266;
    const double C3800 = C3791 * C273;
    const double C3796 = C3791 * C265;
    const double C3979 = C3791 * C588;
    const double C6537 = C3791 * C688;
    const double C6533 = C3791 * C682;
    const double C7112 = C3791 * C1458;
    const double C7108 = C3791 * C1453;
    const double C7806 = C7765 * C139;
    const double C7800 = C7765 * C128;
    const double C7793 = C7765 * C138;
    const double C7787 = C7765 * C126;
    const double C7781 = C7765 * C137;
    const double C7775 = C7765 * C124;
    const double C7989 = C7765 * C284;
    const double C7983 = C7765 * C274;
    const double C7977 = C7765 * C283;
    const double C7971 = C7765 * C272;
    const double C8159 = C7765 * C408;
    const double C8153 = C7765 * C398;
    const double C8147 = C7765 * C407;
    const double C8141 = C7765 * C396;
    const double C10134 = C7765 * C949;
    const double C10128 = C7765 * C940;
    const double C10121 = C7765 * C948;
    const double C10115 = C7765 * C938;
    const double C10109 = C7765 * C406;
    const double C10103 = C7765 * C394;
    const double C10552 = C7765 * C697;
    const double C10546 = C7765 * C687;
    const double C10992 = C7765 * C2812;
    const double C10986 = C7765 * C2804;
    const double C12496 = C7765 * C698;
    const double C48413 = C48412 / C47176;
    const double C3822 = C48617 * C140;
    const double C3813 = C48617 * C139;
    const double C3809 = C48617 * C128;
    const double C3805 = C48617 * C138;
    const double C3801 = C48617 * C126;
    const double C3797 = C48617 * C137;
    const double C3793 = C48617 * C124;
    const double C3986 = C48617 * C284;
    const double C3982 = C48617 * C274;
    const double C3978 = C48617 * C283;
    const double C3974 = C48617 * C272;
    const double C4140 = C48617 * C408;
    const double C4136 = C48617 * C398;
    const double C4132 = C48617 * C407;
    const double C4128 = C48617 * C396;
    const double C6325 = C48617 * C698;
    const double C6551 = C48617 * C949;
    const double C6547 = C48617 * C940;
    const double C6534 = C48617 * C406;
    const double C6530 = C48617 * C394;
    const double C7111 = C48617 * C697;
    const double C7107 = C48617 * C687;
    const double C7653 = C48617 * C948;
    const double C7649 = C48617 * C938;
    const double C19795 = C48617 * C2812;
    const double C19791 = C48617 * C2804;
    const double C1069 =
        (((0 - (C47172 * C47173) / C47174) * ae) / C47174 - (0 * be) / C47178) /
            (2 * C47174) +
        ((C47172 * (((C48356 - (C47172 * 2 * C47179) / C47174) * ae) / C47174 -
                    C47173 / C47178) +
          C48617) *
         ae) /
            C47174 +
        (0 * ae) / C47174 - C47179 / C47176;
    const double C48649 = 2 * C48614;
    const double C1094 = C1070 * C275;
    const double C1088 = C1070 * C266;
    const double C1082 = C1070 * C273;
    const double C1076 = C1070 * C265;
    const double C1292 = C1070 * C588;
    const double C16539 = C1070 * C688;
    const double C16533 = C1070 * C682;
    const double C16976 = C1070 * C1458;
    const double C16970 = C1070 * C1453;
    const double C48420 = C48419 / C47174;
    const double C48659 = C48623 / C47178;
    const double C26155 = C26137 * C596;
    const double C29523 = C26137 * C1465;
    const double C48676 = C48617 - C48656;
    const double C22083 = -C48656;
    const double C7795 = C7766 * C284;
    const double C7789 = C7766 * C274;
    const double C7783 = C7766 * C283;
    const double C7777 = C7766 * C272;
    const double C7979 = C7766 * C596;
    const double C8149 = C7766 * C698;
    const double C10111 = C7766 * C697;
    const double C10105 = C7766 * C687;
    const double C10554 = C7766 * C1465;
    const double C48685 = C48672 + C48409;
    const double C47350 = C47344 + 0;
    const double C47317 = C47191 * C47298;
    const double C15018 =
        ((-C47192 / C47174) / C47210 -
         ((C48373 - (C47191 * C47298) / C47174) * be) / C47174) /
            C47210 -
        ((C47191 * ((-C47298 / C47174) / C47210 - (0 * be) / C47174) + C48460) *
         be) /
            C47174;
    const double C15019 =
        ((-C47298 / C47174) / C47210 - (0 * be) / C47174) / C47210 -
        (0 * be) / C47174;
    const double C30749 = (-C47298 / C47174) / C47210 - (0 * be) / C47174;
    const double C47330 = C47326 - C47320;
    const double C48455 = C48454 / C47176;
    const double C2458 =
        (((0 - (C47191 * C47192) / C47174) * ae) / C47174 - (0 * be) / C47178) /
            (2 * C47174) +
        ((C47191 * (((C48373 - (C47191 * 2 * C47194) / C47174) * ae) / C47174 -
                    C47192 / C47178) +
          C48618) *
         ae) /
            C47174 +
        (0 * ae) / C47174 - C47194 / C47176;
    const double C48652 = 2 * C48616;
    const double C48462 = C48461 / C47174;
    const double C48665 = C48629 / C47178;
    const double C48679 = C48618 - C48662;
    const double C30746 = -C48662;
    const double C48686 = C48674 + C48451;
    const double C47266 = C47262 / C47210;
    const double C47353 = C47349 / C47210;
    const double C141 =
        (4 * (2 * C47432 * C47443 + C47432 * C47450) +
         C47432 * (3 * C47450 +
                   C47432 * (2 * C47432 * C47448 +
                             C47432 * (C47448 + std::pow(C47438, 7) * bs[7] *
                                                    C47430 * C47440)))) /
        C47176;
    const double C285 =
        (be * (2 * C47432 * C47468 +
               C47432 * (C47468 + C47441 * C47439 * C47465 * C47440)) +
         C47425 * (2 * C47432 * C47443 + C47432 * C47450)) /
        C47176;
    const double C409 =
        (ae * (2 * C47432 * C47483 +
               C47432 * (C47483 + C47441 * C47439 * C47480 * C47440)) +
         C47424 * (2 * C47432 * C47443 + C47432 * C47450)) /
        C47176;
    const double C597 = (C47436 + C47443 * C47440 + be * C47425 * C47501 +
                         C47425 * (be * C47501 + C47425 * C47450)) /
                        C47176;
    const double C699 =
        (ae * (C47425 * (C47483 + C47486 * C47440) +
               (C47494 * C47493 + C47434 * C47433 * C47440) * be) +
         C47424 * (be * C47501 + C47425 * C47450)) /
        C47176;
    const double C131 = (3 * (C47496 + C47468 * C47440) +
                         C47432 * (2 * C47498 + C47432 * C47501)) /
                        C47174;
    const double C277 = (C47425 * (2 * C47498 + C47432 * C47501)) / C47174;
    const double C401 =
        (C47424 * (2 * C47498 + C47432 * C47501) +
         (2 * C47432 * C47557 + C47432 * (C47557 + C47523 * C47440)) * ae) /
        C47174;
    const double C590 = (C47496 + C47468 * C47440 + C47501 * C47575) / C47174;
    const double C692 =
        (C47424 * C47425 * C47501 + C47425 * C47917 * ae) / C47174;
    const double C943 =
        (C47496 + C47468 * C47440 + C47424 * (C47424 * C47501 + C47917 * ae) +
         C47424 * C47917 * ae) /
        C47174;
    const double C1276 =
        (2 * C47425 * C47501 + C47425 * (C47501 + C47476 * C47575)) / C47174;
    const double C47584 = C47581 + C47582;
    const double C2333 =
        (C47425 * C47498 + C47424 * (C47424 * C47580 + C47971 * ae) +
         C47424 * C47971 * ae) /
        C47174;
    const double C1295 = C48650 * C1280;
    const double C7981 = C48650 * C1280;
    const double C11123 = C48660 * C1280;
    const double C23288 = C48660 * C1280;
    const double C26351 = C26137 * C1280;
    const double C48029 = C48025 + C48026;
    const double C1294 = C1071 * C1274;
    const double C1758 =
        (3 * (C47436 + be * C47572 + C47425 * C47576) +
         be * (2 * C47572 + C47425 * C47578) +
         C47425 * (2 * C47576 + be * C47578 +
                   C47425 * (C47443 + be * C47425 * C47471 +
                             C47425 * (be * C47471 + C47425 * C47448)))) /
        C47176;
    const double C1916 =
        (ae * (2 * (C47425 * C47483 + C47557 * be) +
               C47425 * (C47483 + C47425 * (C47425 * C47486 + C47523 * be) +
                         C47425 * C47523 * be) +
               (C47557 + C47523 * C47575) * be) +
         C47424 * (2 * C47576 + be * C47578 +
                   C47425 * (C47443 + be * C47425 * C47471 +
                             C47425 * (be * C47471 + C47425 * C47448)))) /
        C47176;
    const double C1753 = (3 * (C47496 + C47468 * C47575) +
                          C47425 * (2 * C47572 + C47425 * C47578)) /
                         C47174;
    const double C1911 = (C47424 * (2 * C47572 + C47425 * C47578) +
                          (2 * C47966 + C47425 * C47968) * ae) /
                         C47174;
    const double C2330 =
        (C47496 + C47468 * C47575 + C47424 * (C47424 * C47578 + C47968 * ae) +
         C47424 * C47968 * ae) /
        C47174;
    const double C47678 = C47425 * C47674;
    const double C47706 = 2 * C47674;
    const double C47787 = C47424 * C47674;
    const double C47677 = C47443 + C47673;
    const double C48079 = C48075 + C48076;
    const double C48106 = C47424 * C48102;
    const double C48143 = 2 * C48102;
    const double C950 = (C47436 + C47443 * C47440 + ae * C47424 * C47533 +
                         C47424 * (ae * C47533 + C47424 * C47450)) /
                        C47176;
    const double C130 = (3 * (C47528 + C47483 * C47440) +
                         C47432 * (2 * C47530 + C47432 * C47533)) /
                        C47174;
    const double C276 =
        (C47425 * (2 * C47530 + C47432 * C47533) +
         (2 * C47432 * C47557 + C47432 * (C47557 + C47523 * C47440)) * be) /
        C47174;
    const double C400 = (C47424 * (2 * C47530 + C47432 * C47533)) / C47174;
    const double C589 =
        (C47528 + C47483 * C47440 + C47425 * (C47425 * C47533 + C47917 * be) +
         C47425 * C47917 * be) /
        C47174;
    const double C691 = (C47424 * (C47425 * C47533 + C47917 * be)) / C47174;
    const double C942 = (C47528 + C47483 * C47440 + C47533 * C47650) / C47174;
    const double C2808 =
        (2 * C47424 * C47533 + C47424 * (C47533 + C47491 * C47650)) / C47174;
    const double C47612 = C47610 + C47611;
    const double C47659 = C47656 + C47657;
    const double C1481 = C48650 * C1466;
    const double C6327 = C48418 * C1466;
    const double C8151 = C48650 * C1466;
    const double C12498 = C7766 * C1466;
    const double C24677 = C48418 * C1466;
    const double C26521 = C26137 * C1466;
    const double C2836 = C48356 * C2813;
    const double C18703 = C48617 * C2813;
    const double C2834 = C48356 * C2806;
    const double C18699 = C48617 * C2806;
    const double C47606 = C47425 * C47604;
    const double C47742 = 2 * C47604;
    const double C47786 = ae * C47604;
    const double C47785 = C47424 * C47604;
    const double C3677 =
        (3 * (C47436 + ae * C47647 + C47424 * C47651) +
         ae * (2 * C47647 + C47424 * C47653) +
         C47424 * (2 * C47651 + ae * C47653 +
                   C47424 * (C47443 + ae * C47424 * C47486 +
                             C47424 * (ae * C47486 + C47424 * C47448)))) /
        C47176;
    const double C3671 = (3 * (C47528 + C47483 * C47650) +
                          C47424 * (2 * C47647 + C47424 * C47653)) /
                         C47174;
    const double C47815 = C47424 * C47811;
    const double C47848 = 2 * C47811;
    const double C47814 = C47443 + C47810;
    const double C47624 = C47562 * be;
    const double C47921 = C47432 * C47562;
    const double C47925 = 3 * C47562;
    const double C47976 = C47425 * C47562;
    const double C48035 = C47424 * C47562;
    const double C48034 = C47562 * ae;
    const double C1462 = (C47424 * (C47501 + C47476 * C47575) +
                          (C47917 + C47562 * C47575) * ae) /
                         C47174;
    const double C2809 =
        (2 * (C47424 * C47501 + C47917 * ae) +
         C47424 * (C47501 + C47424 * (C47424 * C47476 + C47562 * ae) +
                   C47424 * C47562 * ae) +
         (C47917 + C47562 * C47650) * ae) /
        C47174;
    const double C1269 =
        2 * C47425 * C47917 + C47425 * (C47917 + C47562 * C47575);
    const double C1455 = C47424 * (C47917 + C47562 * C47575);
    const double C2802 =
        2 * C47424 * C47917 + C47424 * (C47917 + C47562 * C47650);
    const double C47618 = C47616 * be;
    const double C48045 = 2 * C47616;
    const double C48092 = C47424 * C47616;
    const double C48091 = C47616 * ae;
    const double C3252 =
        (2 * (C47424 * C47580 + C47971 * ae) +
         C47424 * (C47580 + C47424 * (C47424 * C47683 + C47616 * ae) +
                   C47424 * C47616 * ae) +
         (C47971 + C47616 * C47650) * ae) /
        C47174;
    const double C3247 =
        2 * C47424 * C47971 + C47424 * (C47971 + C47616 * C47650);
    const double C47617 = C47614 + C47615;
    const double C47973 = C47559 + C47972;
    const double C48030 = C47559 + C48028;
    const double C48120 = 2 * C48115;
    const double C48118 = C48115 * ae;
    const double C48117 = C48113 + C48114;
    const double C47744 = C47700 * be;
    const double C48041 = C47425 * C47700;
    const double C48054 = 3 * C47700;
    const double C48084 = C47424 * C47700;
    const double C48083 = C47700 * ae;
    const double C10097 =
        (2 * (C47424 * C47578 + C47968 * ae) +
         C47424 * (C47578 + C47424 * (C47424 * C47676 + C47700 * ae) +
                   C47424 * C47700 * ae) +
         (C47968 + C47700 * C47650) * ae) /
        C47174;
    const double C10094 =
        2 * C47424 * C47968 + C47424 * (C47968 + C47700 * C47650);
    const double C48080 = C47603 + C48078;
    const double C48135 = 2 * C48130;
    const double C48133 = C48130 * ae;
    const double C48132 = C48128 + C48129;
    const double C47736 = C47425 * C47732;
    const double C47749 = 2 * C47732;
    const double C47788 = C47732 * C47650;
    const double C47835 = ae * C47732;
    const double C47834 = C47424 * C47732;
    const double C48107 = C47424 * C48104;
    const double C48149 = 3 * C48104;
    const double C48147 = C48104 * ae;
    const double C48154 = C47424 * C48150;
    const double C47460 = C47432 * C47459;
    const double C47589 = C47425 * C47459;
    const double C47664 = C47424 * C47459;
    const double C1281 = (2 * (be * C47501 + C47425 * C47450) +
                          be * (C47501 + C47476 * std::pow(C47425, 2)) +
                          C47425 * (C47450 + be * C47425 * C47476 +
                                    C47425 * (be * C47476 + C47425 * C47459))) /
                         C47176;
    const double C1467 =
        (ae * (C47533 + C47425 * (C47425 * C47491 + C47562 * be) +
               C47425 * C47562 * be) +
         C47424 * (C47450 + be * C47425 * C47476 +
                   C47425 * (be * C47476 + C47425 * C47459))) /
        C47176;
    const double C2814 = (2 * (ae * C47533 + C47424 * C47450) +
                          ae * (C47533 + C47491 * std::pow(C47424, 2)) +
                          C47424 * (C47450 + ae * C47424 * C47491 +
                                    C47424 * (ae * C47491 + C47424 * C47459))) /
                         C47176;
    const double C47692 = C47684 + C47688;
    const double C47825 = C47821 + C47822;
    const double C47719 = C47425 * C47715;
    const double C47836 = C47424 * C47715;
    const double C47861 = C47424 * C47857;
    const double C47515 = C47432 * C47514;
    const double C47590 = C47514 * C47575;
    const double C47693 = C47509 + C47690;
    const double C47720 = C47425 * C47717;
    const double C47547 = C47432 * C47546;
    const double C47627 = C47425 * C47546;
    const double C47665 = C47546 * C47650;
    const double C47757 = C47425 * C47755;
    const double C47837 = C47755 * C47650;
    const double C47774 = C47772 + C47769;
    const double C47827 = C47541 + C47823;
    const double C47862 = C47424 * C47859;
    const double C165 = C150 - C151;
    const double C167 = C154 - C155;
    const double C2830 = C415 - C416;
    const double C2826 = C416 - C415;
    const double C3682 = C2823 - C2824;
    const double C164 = C148 - C149;
    const double C2829 = C413 - C414;
    const double C2825 = C414 - C413;
    const double C3681 = C2821 - C2822;
    const double C2339 = (be * C47496 + C47425 * C47436 + ae * C47424 * C47599 +
                          C47424 * (ae * C47599 + C47424 * C47576)) /
                         C47176;
    const double C3255 =
        (2 * (ae * C47599 + C47424 * C47576) +
         ae * (C47599 + C47604 * std::pow(C47424, 2)) +
         C47424 * (C47576 + ae * C47424 * C47604 +
                   C47424 * (ae * C47604 +
                             C47424 * (be * C47471 + C47425 * C47448)))) /
        C47176;
    const double C1271 =
        (2 * (C47425 * C47528 + C47910 * be) +
         C47425 * (C47528 + C47425 * C47599 + C47425 * C47557 * be) +
         (C47910 + C47557 * C47575) * be) /
        C47174;
    const double C1457 =
        (C47424 * (C47528 + C47425 * C47599 + C47425 * C47557 * be)) / C47174;
    const double C2327 =
        (C47425 * C47528 + C47910 * be + C47599 * C47650) / C47174;
    const double C3249 =
        (2 * C47424 * C47599 + C47424 * (C47599 + C47604 * C47650)) / C47174;
    const double C1077 = C48650 * C587;
    const double C3976 = C48418 * C587;
    const double C7779 = C48650 * C587;
    const double C7973 = C7766 * C587;
    const double C22275 = C48418 * C587;
    const double C26149 = C26137 * C587;
    const double C2640 = C48356 * C689;
    const double C4130 = C48418 * C689;
    const double C6321 = C48617 * C689;
    const double C8143 = C7766 * C689;
    const double C12490 = C7765 * C689;
    const double C22429 = C48418 * C689;
    const double C1478 = C1070 * C690;
    const double C2641 = C113 * C690;
    const double C4133 = C3791 * C690;
    const double C6324 = C3790 * C690;
    const double C2465 = C113 * C941;
    const double C6550 = C3790 * C941;
    const double C1480 = C1071 * C1460;
    const double C6326 = C3791 * C1460;
    const double C32089 = C1070 * C1460;
    const double C2835 = C113 * C2807;
    const double C18702 = C3790 * C2807;
    const double C1078 = C1071 * C581;
    const double C1286 = C1070 * C581;
    const double C3975 = C3791 * C581;
    const double C1472 = C1070 * C683;
    const double C2639 = C113 * C683;
    const double C4129 = C3791 * C683;
    const double C6320 = C3790 * C683;
    const double C2463 = C113 * C934;
    const double C6546 = C3790 * C934;
    const double C1288 = C1071 * C1268;
    const double C1474 = C1071 * C1454;
    const double C6322 = C3791 * C1454;
    const double C32083 = C1070 * C1454;
    const double C2643 = C113 * C2323;
    const double C6548 = C3791 * C2323;
    const double C16556 = C1070 * C2323;
    const double C18488 = C3790 * C2323;
    const double C2833 = C113 * C2801;
    const double C18698 = C3790 * C2801;
    const double C157 = C113 * C119;
    const double C3817 = C3790 * C119;
    const double C297 = C113 * C267;
    const double C1099 = C1070 * C267;
    const double C3812 = C3791 * C267;
    const double C3989 = C3790 * C267;
    const double C421 = C113 * C391;
    const double C4143 = C3790 * C391;
    const double C1090 = C1071 * C582;
    const double C1298 = C1070 * C582;
    const double C3983 = C3791 * C582;
    const double C1484 = C1070 * C684;
    const double C2647 = C113 * C684;
    const double C4137 = C3791 * C684;
    const double C6328 = C3790 * C684;
    const double C2471 = C113 * C935;
    const double C6558 = C3790 * C935;
    const double C3265 = C113 * C2329;
    const double C7654 = C3791 * C2329;
    const double C16551 = C1070 * C2329;
    const double C19248 = C3790 * C2329;
    const double C17408 = C1070 * C3250;
    const double C17904 = C113 * C3250;
    const double C19796 = C3791 * C3250;
    const double C21610 = C3790 * C3250;
    const double C3263 = C113 * C2321;
    const double C7650 = C3791 * C2321;
    const double C16545 = C1070 * C2321;
    const double C19244 = C3790 * C2321;
    const double C17402 = C1070 * C3246;
    const double C17902 = C113 * C3246;
    const double C19792 = C3791 * C3246;
    const double C21606 = C3790 * C3246;
    const double C16972 = C1071 * C1907;
    const double C16547 = C1071 * C2322;
    const double C16982 = C1070 * C2322;
    const double C19246 = C3791 * C2322;
    const double C3672 =
        (3 * (C47496 + C47424 * C48021 + C48019 * ae) +
         C47424 * (2 * C48021 +
                   C47424 * (C47468 + C47424 * (C47424 * C47471 + C47523 * ae) +
                             C47424 * C47523 * ae) +
                   C48022 * ae) +
         (2 * C48019 + C47424 * C48022) * ae) /
        C47174;
    const double C17665 = C113 * C3668;
    const double C21976 = C3790 * C3668;
    const double C2469 = C420 - C419;
    const double C2838 = C419 - C420;
    const double C18141 = C3686 - C3685;
    const double C166 = C152 - C153;
    const double C2468 = C418 - C417;
    const double C2837 = C417 - C418;
    const double C18140 = C3684 - C3683;
    const double C47506 = C47505 + C47504;
    const double C1755 = (3 * (C47498 + C47503 * C47575) +
                          C47425 * (2 * C47580 + C47425 * C47585)) /
                         C47174;
    const double C47691 = C47452 + C47687;
    const double C47681 = C47675 + C47679;
    const double C47538 = C47537 + C47536;
    const double C3673 = (3 * (C47530 + C47535 * C47650) +
                          C47424 * (2 * C47655 + C47424 * C47660)) /
                         C47174;
    const double C47828 = C47452 + C47824;
    const double C47818 = C47812 + C47816;
    const double C47570 = C47566 + C47569;
    const double C47631 = C47629 * be;
    const double C47978 = C47562 + C47977;
    const double C48038 = C47562 + C48036;
    const double C47771 = C47704 * be;
    const double C48046 = C47425 * C47704;
    const double C48095 = C47616 + C48093;
    const double C48122 = C47424 * C48119;
    const double C47739 = C47735 + C47737;
    const double C48087 = C47700 + C48085;
    const double C48137 = C47424 * C48134;
    const double C48157 = C48153 + C48155;
    const double C48265 = C48264 / C47176;
    const double C48634 = 2 * C48597;
    const double C48273 = C48272 / C47174;
    const double C48638 = C48601 / C47178;
    const double C48668 = C48595 - C48633;
    const double C23267 = -C48633;
    const double C48682 = C48667 + C48262;
    const double C47267 = C47263 * be;
    const double C47238 = C47230 / C47174;
    const double C7801 = C7772 * C267;
    const double C7796 = C7772 * C275;
    const double C7790 = C7772 * C266;
    const double C7784 = C7772 * C273;
    const double C7778 = C7772 * C265;
    const double C7984 = C7772 * C582;
    const double C7978 = C7772 * C588;
    const double C7972 = C7772 * C581;
    const double C8154 = C7772 * C684;
    const double C8148 = C7772 * C690;
    const double C8142 = C7772 * C683;
    const double C10129 = C7772 * C2323;
    const double C10124 = C7772 * C2329;
    const double C10118 = C7772 * C2321;
    const double C10112 = C7772 * C688;
    const double C10106 = C7772 * C682;
    const double C10559 = C7772 * C2322;
    const double C10553 = C7772 * C1458;
    const double C10547 = C7772 * C1453;
    const double C10993 = C7772 * C3250;
    const double C10987 = C7772 * C3246;
    const double C12497 = C7772 * C1460;
    const double C12491 = C7772 * C1454;
    const double C7792 = C7773 * C582;
    const double C7786 = C7773 * C588;
    const double C7780 = C7773 * C581;
    const double C7980 = C7773 * C1274;
    const double C7974 = C7773 * C1268;
    const double C8150 = C7773 * C1460;
    const double C8144 = C7773 * C1454;
    const double C10120 = C7773 * C2322;
    const double C10114 = C7773 * C1458;
    const double C10108 = C7773 * C1453;
    const double C10549 = C7773 * C1907;
    const double C22111 = C22090 * C267;
    const double C22107 = C22090 * C275;
    const double C22103 = C22090 * C266;
    const double C22099 = C22090 * C273;
    const double C22095 = C22090 * C265;
    const double C22282 = C22090 * C582;
    const double C22278 = C22090 * C588;
    const double C22274 = C22090 * C581;
    const double C22436 = C22090 * C684;
    const double C22432 = C22090 * C690;
    const double C22428 = C22090 * C683;
    const double C24463 = C22090 * C2323;
    const double C24676 = C22090 * C1460;
    const double C24672 = C22090 * C1454;
    const double C24895 = C22090 * C2329;
    const double C24891 = C22090 * C2321;
    const double C24887 = C22090 * C688;
    const double C24883 = C22090 * C682;
    const double C25472 = C22090 * C2322;
    const double C25468 = C22090 * C1458;
    const double C25464 = C22090 * C1453;
    const double C26022 = C22090 * C3250;
    const double C26018 = C22090 * C3246;
    const double C47247 = C47172 * C47243;
    const double C47276 = C47243 / C47210;
    const double C3828 = C3807 - C3808;
    const double C3826 = C3803 - C3804;
    const double C48414 = C48409 - C48413;
    const double C3831 = C3813 - C3814;
    const double C3829 = C3809 - C3810;
    const double C3827 = C3805 - C3806;
    const double C3825 = C3801 - C3802;
    const double C6117 = C4140 - C4139;
    const double C6556 = C4139 - C4140;
    const double C6115 = C4136 - C4135;
    const double C6554 = C4135 - C4136;
    const double C6544 = C4131 - C4132;
    const double C6540 = C4132 - C4131;
    const double C6542 = C4127 - C4128;
    const double C6538 = C4128 - C4127;
    const double C19788 = C7653 - C7652;
    const double C19786 = C7649 - C7648;
    const double C21974 = C19795 - C19794;
    const double C21972 = C19791 - C19790;
    const double C1103 = C1069 * C129;
    const double C1097 = C1069 * C118;
    const double C1092 = C1069 * C127;
    const double C1086 = C1069 * C117;
    const double C1080 = C1069 * C125;
    const double C1074 = C1069 * C116;
    const double C1302 = C1069 * C275;
    const double C1296 = C1069 * C266;
    const double C1290 = C1069 * C273;
    const double C1284 = C1069 * C265;
    const double C1488 = C1069 * C399;
    const double C1482 = C1069 * C390;
    const double C1476 = C1069 * C397;
    const double C1470 = C1069 * C389;
    const double C16560 = C1069 * C941;
    const double C16554 = C1069 * C934;
    const double C16549 = C1069 * C939;
    const double C16543 = C1069 * C933;
    const double C16537 = C1069 * C395;
    const double C16531 = C1069 * C388;
    const double C16986 = C1069 * C2329;
    const double C16980 = C1069 * C2321;
    const double C16974 = C1069 * C688;
    const double C16968 = C1069 * C682;
    const double C17406 = C1069 * C2805;
    const double C17400 = C1069 * C2800;
    const double C32087 = C1069 * C690;
    const double C32081 = C1069 * C683;
    const double C48673 = C48649 / C47174;
    const double C48421 = C48417 - C48420;
    const double C48687 = C48676 / C47210;
    const double C22121 = C22083 * C140;
    const double C22112 = C22083 * C139;
    const double C22108 = C22083 * C128;
    const double C22104 = C22083 * C138;
    const double C22100 = C22083 * C126;
    const double C22096 = C22083 * C137;
    const double C22092 = C22083 * C124;
    const double C22285 = C22083 * C284;
    const double C22281 = C22083 * C274;
    const double C22277 = C22083 * C283;
    const double C22273 = C22083 * C272;
    const double C22439 = C22083 * C408;
    const double C22435 = C22083 * C398;
    const double C22431 = C22083 * C407;
    const double C22427 = C22083 * C396;
    const double C24464 = C22083 * C949;
    const double C24460 = C22083 * C940;
    const double C24675 = C22083 * C698;
    const double C24671 = C22083 * C689;
    const double C24917 = C22083 * C2813;
    const double C24913 = C22083 * C2806;
    const double C24892 = C22083 * C948;
    const double C24888 = C22083 * C938;
    const double C24884 = C22083 * C406;
    const double C24880 = C22083 * C394;
    const double C25467 = C22083 * C697;
    const double C25463 = C22083 * C687;
    const double C26021 = C22083 * C2812;
    const double C26017 = C22083 * C2804;
    const double C7771 =
        ((-(0 * be) / C47174) / C47210 -
         ((0 - (C47172 * C47173) / C47174) * be) / C47174) /
            C47210 -
        ((C47172 * ((-C47173 / C47174) / C47210 -
                    ((C48356 - (C47172 * C47211) / C47174) * be) / C47174) +
          C22083) *
         be) /
            C47174 +
        (-C47211 / C47174) / C47210 - (0 * be) / C47174;
    const double C1104 = C48685 * C139;
    const double C1098 = C48685 * C128;
    const double C1091 = C48685 * C138;
    const double C1085 = C48685 * C126;
    const double C1079 = C48685 * C137;
    const double C1073 = C48685 * C124;
    const double C1303 = C48685 * C284;
    const double C1297 = C48685 * C274;
    const double C1291 = C48685 * C283;
    const double C1285 = C48685 * C272;
    const double C1489 = C48685 * C408;
    const double C1483 = C48685 * C398;
    const double C1477 = C48685 * C407;
    const double C1471 = C48685 * C396;
    const double C16561 = C48685 * C949;
    const double C16555 = C48685 * C940;
    const double C16548 = C48685 * C948;
    const double C16542 = C48685 * C938;
    const double C16536 = C48685 * C406;
    const double C16530 = C48685 * C394;
    const double C16975 = C48685 * C697;
    const double C16969 = C48685 * C687;
    const double C17407 = C48685 * C2812;
    const double C17401 = C48685 * C2804;
    const double C32088 = C48685 * C698;
    const double C32082 = C48685 * C689;
    const double C47354 = C47350 * be;
    const double C47325 = C47317 / C47174;
    const double C47334 = C47191 * C47330;
    const double C47363 = C47330 / C47210;
    const double C48456 = C48451 - C48455;
    const double C48675 = C48652 / C47174;
    const double C48463 = C48459 - C48462;
    const double C48689 = C48679 / C47210;
    const double C15017 =
        ((-(0 * be) / C47174) / C47210 -
         ((0 - (C47191 * C47192) / C47174) * be) / C47174) /
            C47210 -
        ((C47191 * ((-C47192 / C47174) / C47210 -
                    ((C48373 - (C47191 * C47298) / C47174) * be) / C47174) +
          C30746) *
         be) /
            C47174 +
        (-C47298 / C47174) / C47210 - (0 * be) / C47174;
    const double C163 = C48356 * C141;
    const double C300 = C48356 * C285;
    const double C3815 = C48418 * C285;
    const double C3994 = C48617 * C285;
    const double C7808 = C7766 * C285;
    const double C22114 = C48418 * C285;
    const double C22293 = C22083 * C285;
    const double C424 = C48356 * C409;
    const double C4148 = C48617 * C409;
    const double C22447 = C22083 * C409;
    const double C1095 = C48650 * C597;
    const double C3988 = C48418 * C597;
    const double C7797 = C48650 * C597;
    const double C7991 = C7766 * C597;
    const double C22287 = C48418 * C597;
    const double C26167 = C26137 * C597;
    const double C2650 = C48356 * C699;
    const double C4142 = C48418 * C699;
    const double C6333 = C48617 * C699;
    const double C8161 = C7766 * C699;
    const double C22441 = C48418 * C699;
    const double C27696 = C22083 * C699;
    const double C159 = C113 * C131;
    const double C3821 = C3790 * C131;
    const double C299 = C113 * C277;
    const double C1105 = C1070 * C277;
    const double C3816 = C3791 * C277;
    const double C3993 = C3790 * C277;
    const double C7807 = C7772 * C277;
    const double C22115 = C22090 * C277;
    const double C423 = C113 * C401;
    const double C4147 = C3790 * C401;
    const double C1096 = C1071 * C590;
    const double C1304 = C1070 * C590;
    const double C3987 = C3791 * C590;
    const double C7798 = C7773 * C590;
    const double C7990 = C7772 * C590;
    const double C22286 = C22090 * C590;
    const double C1490 = C1070 * C692;
    const double C2649 = C113 * C692;
    const double C4141 = C3791 * C692;
    const double C6332 = C3790 * C692;
    const double C8160 = C7772 * C692;
    const double C22440 = C22090 * C692;
    const double C2473 = C113 * C943;
    const double C6562 = C3790 * C943;
    const double C1306 = C1071 * C1276;
    const double C7992 = C7773 * C1276;
    const double C1759 =
        (3 * (C47553 + be * C47580 + C47425 * C47584) +
         be * (2 * C47580 + C47425 * C47585) +
         C47425 *
             (2 * C47584 + be * C47585 +
              C47425 * (C47452 + be * C47425 * C47509 +
                        C47425 * (be * C47509 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C1917 =
        (ae * (2 * (C47425 * C47535 + C47559 * be) +
               C47425 * (C47535 + C47425 * (C47425 * C47541 + C47564 * be) +
                         C47425 * C47564 * be) +
               (C47559 + C47564 * C47575) * be) +
         C47424 *
             (2 * C47584 + be * C47585 +
              C47425 * (C47452 + be * C47425 * C47509 +
                        C47425 * (be * C47509 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C2645 = C113 * C2333;
    const double C6552 = C3791 * C2333;
    const double C10135 = C7772 * C2333;
    const double C16562 = C1070 * C2333;
    const double C18492 = C3790 * C2333;
    const double C24467 = C22090 * C2333;
    const double C10556 = C48650 * C1916;
    const double C14155 = C48660 * C1916;
    const double C16979 = C48650 * C1916;
    const double C30102 = C26137 * C1916;
    const double C40872 = C48660 * C1916;
    const double C10555 = C7773 * C1911;
    const double C16978 = C1071 * C1911;
    const double C10126 = C7773 * C2330;
    const double C10565 = C7772 * C2330;
    const double C16553 = C1071 * C2330;
    const double C16988 = C1070 * C2330;
    const double C19250 = C3791 * C2330;
    const double C25476 = C22090 * C2330;
    const double C47713 = C47706 + C47707;
    const double C47680 = C47677 + C47678;
    const double C48108 = C47468 + C48106;
    const double C2472 = C48356 * C950;
    const double C6563 = C48617 * C950;
    const double C24473 = C22083 * C950;
    const double C156 = C48356 * C130;
    const double C3818 = C48617 * C130;
    const double C22117 = C22083 * C130;
    const double C298 = C48356 * C276;
    const double C3811 = C48418 * C276;
    const double C3990 = C48617 * C276;
    const double C7802 = C7766 * C276;
    const double C22110 = C48418 * C276;
    const double C22289 = C22083 * C276;
    const double C422 = C48356 * C400;
    const double C4144 = C48617 * C400;
    const double C22443 = C22083 * C400;
    const double C1089 = C48650 * C589;
    const double C3984 = C48418 * C589;
    const double C7791 = C48650 * C589;
    const double C7985 = C7766 * C589;
    const double C22283 = C48418 * C589;
    const double C26161 = C26137 * C589;
    const double C2648 = C48356 * C691;
    const double C4138 = C48418 * C691;
    const double C6329 = C48617 * C691;
    const double C8155 = C7766 * C691;
    const double C22437 = C48418 * C691;
    const double C27692 = C22083 * C691;
    const double C2470 = C48356 * C942;
    const double C6559 = C48617 * C942;
    const double C24469 = C22083 * C942;
    const double C2842 = C48356 * C2808;
    const double C2341 = (be * C47498 + C47425 * C47553 + ae * C47424 * C47612 +
                          C47424 * (ae * C47612 + C47424 * C47584)) /
                         C47176;
    const double C1273 =
        (2 * (C47425 * C47530 + C47913 * be) +
         C47425 * (C47530 + C47425 * C47612 + C47425 * C47559 * be) +
         (C47913 + C47559 * C47575) * be) /
        C47174;
    const double C1459 =
        (C47424 * (C47530 + C47425 * C47612 + C47425 * C47559 * be)) / C47174;
    const double C2331 =
        (C47425 * C47530 + C47913 * be + C47612 * C47650) / C47174;
    const double C3678 =
        (3 * (C47553 + ae * C47655 + C47424 * C47659) +
         ae * (2 * C47655 + C47424 * C47660) +
         C47424 *
             (2 * C47659 + ae * C47660 +
              C47424 * (C47452 + ae * C47424 * C47541 +
                        C47424 * (ae * C47541 + C47424 * C47432 * C47457)))) /
        C47176;
    const double C47607 = C47483 + C47606;
    const double C47789 = C47786 + C47787;
    const double C17666 = C48356 * C3677;
    const double C21981 = C48617 * C3677;
    const double C42713 = C22083 * C3677;
    const double C17664 = C48356 * C3671;
    const double C21977 = C48617 * C3671;
    const double C42709 = C22083 * C3671;
    const double C47855 = C47848 + C47849;
    const double C47817 = C47814 + C47815;
    const double C47625 = C47623 + C47624;
    const double C47922 = C47920 + C47921;
    const double C2337 =
        (C47425 * C47501 + C47424 * (C47424 * C47587 + C47976 * ae) +
         C47424 * C47976 * ae) /
        C47174;
    const double C3254 =
        (2 * (C47424 * C47587 + C47976 * ae) +
         C47424 * (C47587 + C47424 * (C47424 * C47425 * C47514 + C47629 * ae) +
                   C47424 * C47629 * ae) +
         (C47976 + C47629 * C47650) * ae) /
        C47174;
    const double C2325 = C47425 * C47917 + C47976 * C47650;
    const double C3248 =
        2 * C47424 * C47976 + C47424 * (C47976 + C47629 * C47650);
    const double C48037 = C48033 + C48034;
    const double C1492 = C1071 * C1462;
    const double C6334 = C3791 * C1462;
    const double C8162 = C7773 * C1462;
    const double C27697 = C22090 * C1462;
    const double C2843 = C113 * C2809;
    const double C1300 = C1071 * C1269;
    const double C7986 = C7773 * C1269;
    const double C1486 = C1071 * C1455;
    const double C6330 = C3791 * C1455;
    const double C8156 = C7773 * C1455;
    const double C27693 = C22090 * C1455;
    const double C2841 = C113 * C2802;
    const double C48094 = C48090 + C48091;
    const double C18704 = C3791 * C3252;
    const double C20038 = C113 * C3252;
    const double C24918 = C22090 * C3252;
    const double C18700 = C3791 * C3247;
    const double C20036 = C113 * C3247;
    const double C24914 = C22090 * C3247;
    const double C47619 = C47425 * C47617;
    const double C47767 = 2 * C47617;
    const double C47800 = ae * C47617;
    const double C47799 = C47424 * C47617;
    const double C3256 =
        (2 * (ae * C47612 + C47424 * C47584) +
         ae * (C47612 + C47617 * std::pow(C47424, 2)) +
         C47424 *
             (C47584 + ae * C47424 * C47617 +
              C47424 * (ae * C47617 +
                        C47424 * (be * C47509 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C3251 =
        (2 * C47424 * C47612 + C47424 * (C47612 + C47617 * C47650)) / C47174;
    const double C1913 = (C47424 * (2 * C47580 + C47425 * C47585) +
                          (2 * C47971 + C47425 * C47973) * ae) /
                         C47174;
    const double C2334 =
        (C47498 + C47503 * C47575 + C47424 * (C47424 * C47585 + C47973 * ae) +
         C47424 * C47973 * ae) /
        C47174;
    const double C1750 = 3 * (C47913 + C47559 * C47575) +
                         C47425 * (2 * C47971 + C47425 * C47973);
    const double C1908 = C47424 * (2 * C47971 + C47425 * C47973);
    const double C2324 = C47913 + C47559 * C47575 + C47973 * C47650;
    const double C10095 =
        2 * C47424 * C47973 + C47424 * (C47973 + C47704 * C47650);
    const double C3674 =
        (3 * (C47498 + C47424 * C48029 + C48027 * ae) +
         C47424 * (2 * C48029 +
                   C47424 * (C47503 + C47424 * (C47424 * C47509 + C47564 * ae) +
                             C47424 * C47564 * ae) +
                   C48030 * ae) +
         (2 * C48027 + C47424 * C48030) * ae) /
        C47174;
    const double C3669 = 3 * (C47913 + C47559 * C47650) +
                         C47424 * (2 * C48027 + C47424 * C48030);
    const double C48121 = C47424 * C48117;
    const double C48042 = C48040 + C48041;
    const double C48086 = C48082 + C48083;
    const double C10995 = C7773 * C10097;
    const double C17410 = C1071 * C10097;
    const double C21612 = C3791 * C10097;
    const double C42344 = C22090 * C10097;
    const double C10989 = C7773 * C10094;
    const double C17404 = C1071 * C10094;
    const double C21608 = C3791 * C10094;
    const double C42340 = C22090 * C10094;
    const double C10974 =
        (3 * (C47572 + C47424 * C48079 + C48077 * ae) +
         C47424 * (2 * C48079 +
                   C47424 * (C47669 + C47424 * (C47424 * C47708 + C47730 * ae) +
                             C47424 * C47730 * ae) +
                   C48080 * ae) +
         (2 * C48077 + C47424 * C48080) * ae) /
        C47174;
    const double C10970 = 3 * (C47966 + C47603 * C47650) +
                          C47424 * (2 * C48077 + C47424 * C48080);
    const double C48136 = C47424 * C48132;
    const double C47738 = C47486 + C47736;
    const double C47790 = C47604 + C47788;
    const double C47840 = 2 * C47834;
    const double C47838 = ae * C47834;
    const double C48109 = C48105 + C48107;
    const double C48156 = C47471 + C48154;
    const double C47461 = C47455 + C47460;
    const double C47591 = C47588 + C47589;
    const double C47666 = C47663 + C47664;
    const double C1307 = C48650 * C1281;
    const double C7993 = C48650 * C1281;
    const double C11140 = C48660 * C1281;
    const double C23305 = C48660 * C1281;
    const double C26363 = C26137 * C1281;
    const double C1493 = C48650 * C1467;
    const double C6335 = C48418 * C1467;
    const double C8163 = C48650 * C1467;
    const double C26533 = C26137 * C1467;
    const double C27698 = C48418 * C1467;
    const double C2844 = C48356 * C2814;
    const double C47694 = C47425 * C47692;
    const double C47801 = C47424 * C47692;
    const double C47829 = C47424 * C47825;
    const double C47721 = C47718 + C47719;
    const double C47839 = C47835 + C47836;
    const double C47863 = C47860 + C47861;
    const double C47516 = C47511 + C47515;
    const double C47592 = C47476 + C47590;
    const double C47695 = C47425 * C47693;
    const double C10099 =
        (2 * (C47424 * C47585 + C47973 * ae) +
         C47424 * (C47585 + C47424 * (C47424 * C47693 + C47704 * ae) +
                   C47424 * C47704 * ae) +
         (C47973 + C47704 * C47650) * ae) /
        C47174;
    const double C47722 = C47716 + C47720;
    const double C47548 = C47543 + C47547;
    const double C47630 = C47627 + C47628;
    const double C47667 = C47491 + C47665;
    const double C47758 = C47489 + C47757;
    const double C47841 = C47732 + C47837;
    const double C47775 = C47425 * C47774;
    const double C47802 = C47774 * C47650;
    const double C47830 = C47424 * C47827;
    const double C47864 = C47858 + C47862;
    const double C171 = C165 * C48373;
    const double C2467 = C165 * C48686;
    const double C4970 = C165 * C48618;
    const double C15022 = C165 * C15014;
    const double C30752 = C165 * C30746;
    const double C173 = C167 * C48373;
    const double C4974 = C167 * C48618;
    const double C30756 = C167 * C30746;
    const double C170 = C164 * C114;
    const double C2466 = C164 * C2458;
    const double C4969 = C164 * C4966;
    const double C3266 = C48356 * C2339;
    const double C7655 = C48418 * C2339;
    const double C10123 = C7766 * C2339;
    const double C10564 = C7765 * C2339;
    const double C16987 = C48685 * C2339;
    const double C19249 = C48617 * C2339;
    const double C24894 = C48418 * C2339;
    const double C25475 = C22083 * C2339;
    const double C10994 = C7766 * C3255;
    const double C17905 = C48356 * C3255;
    const double C19797 = C48418 * C3255;
    const double C21611 = C48617 * C3255;
    const double C26023 = C48418 * C3255;
    const double C42343 = C22083 * C3255;
    const double C7109 = C48418 * C1457;
    const double C10107 = C48650 * C1457;
    const double C10548 = C7766 * C1457;
    const double C16534 = C48650 * C1457;
    const double C25465 = C48418 * C1457;
    const double C29517 = C26137 * C1457;
    const double C3264 = C48356 * C2327;
    const double C7651 = C48418 * C2327;
    const double C10117 = C7766 * C2327;
    const double C10558 = C7765 * C2327;
    const double C16981 = C48685 * C2327;
    const double C19245 = C48617 * C2327;
    const double C24890 = C48418 * C2327;
    const double C25471 = C22083 * C2327;
    const double C10988 = C7766 * C3249;
    const double C17903 = C48356 * C3249;
    const double C19793 = C48418 * C3249;
    const double C21607 = C48617 * C3249;
    const double C26019 = C48418 * C3249;
    const double C42339 = C22083 * C3249;
    const double C6545 = C4133 - C4134;
    const double C6541 = C4134 - C4133;
    const double C2832 = C2465 - C2464;
    const double C2828 = C2464 - C2465;
    const double C18696 = C6550 - C6551;
    const double C18692 = C6551 - C6550;
    const double C32298 = C1480 - C1481;
    const double C32292 = C1481 - C1480;
    const double C20173 = C2835 - C2836;
    const double C20171 = C2836 - C2835;
    const double C6543 = C4129 - C4130;
    const double C6539 = C4130 - C4129;
    const double C2831 = C2463 - C2462;
    const double C2827 = C2462 - C2463;
    const double C18694 = C6546 - C6547;
    const double C18690 = C6547 - C6546;
    const double C20172 = C2833 - C2834;
    const double C20170 = C2834 - C2833;
    const double C17667 = C113 * C3672;
    const double C21980 = C3790 * C3672;
    const double C4972 = C2469 * C48460;
    const double C15024 = C2469 * C15015;
    const double C30754 = C2469 * C48460;
    const double C172 = C166 * C114;
    const double C4973 = C166 * C4966;
    const double C2479 = C2468 * C2459;
    const double C4971 = C2468 * C4967;
    const double C15023 = C2468 * C15018;
    const double C30753 = C2468 * C30749;
    const double C133 = (4 * (2 * C47498 + C47432 * C47501) +
                         C47432 * (3 * C47501 + C47432 * C47506)) /
                        C47174;
    const double C279 = (C47425 * (3 * C47501 + C47432 * C47506)) / C47174;
    const double C403 = (C47424 * (3 * C47501 + C47432 * C47506) +
                         (3 * (C47557 + C47523 * C47440) +
                          C47432 * (2 * C47559 + C47432 * C47562)) *
                             ae) /
                        C47174;
    const double C592 =
        (2 * C47498 + C47432 * C47501 + C47506 * C47575) / C47174;
    const double C9125 = (4 * (2 * C47572 + C47425 * C47578) +
                          C47425 * (3 * C47578 + C47425 * C47681)) /
                         C47174;
    const double C132 = (4 * (2 * C47530 + C47432 * C47533) +
                         C47432 * (3 * C47533 + C47432 * C47538)) /
                        C47174;
    const double C278 = (C47425 * (3 * C47533 + C47432 * C47538) +
                         (3 * (C47557 + C47523 * C47440) +
                          C47432 * (2 * C47559 + C47432 * C47562)) *
                             be) /
                        C47174;
    const double C402 = (C47424 * (3 * C47533 + C47432 * C47538)) / C47174;
    const double C944 =
        (2 * C47530 + C47432 * C47533 + C47538 * C47650) / C47174;
    const double C17669 = C48356 * C3673;
    const double C17657 = (4 * (2 * C47647 + C47424 * C47653) +
                           C47424 * (3 * C47653 + C47424 * C47818)) /
                          C47174;
    const double C47637 = C47570 * be;
    const double C47926 = C47432 * C47570;
    const double C48000 = C47425 * C47570;
    const double C1751 = 3 * (C47917 + C47562 * C47575) +
                         C47425 * (2 * C47976 + C47425 * C47978);
    const double C1909 = C47424 * (2 * C47976 + C47425 * C47978);
    const double C2326 = C47917 + C47562 * C47575 + C47978 * C47650;
    const double C3670 = 3 * (C47917 + C47562 * C47650) +
                         C47424 * (2 * C48035 + C47424 * C48038);
    const double C48047 = C48045 + C48046;
    const double C17569 = 3 * (C47971 + C47616 * C47650) +
                          C47424 * (2 * C48092 + C47424 * C48095);
    const double C48124 = C48120 + C48122;
    const double C47754 = C47739 * be;
    const double C48055 = C47425 * C47739;
    const double C10971 = 3 * (C47968 + C47700 * C47650) +
                          C47424 * (2 * C48084 + C47424 * C48087);
    const double C48139 = C48135 + C48137;
    const double C48159 = C47424 * C48157;
    const double C48266 = C48262 - C48265;
    const double C48669 = C48634 / C47174;
    const double C48274 = C48270 - C48273;
    const double C48683 = C48668 / C47210;
    const double C47269 = C47267 / C47174;
    const double C47242 = C48356 - C47238;
    const double C7815 = C7795 - C7796;
    const double C7812 = C7789 - C7790;
    const double C12705 = C8148 - C8149;
    const double C12699 = C8149 - C8148;
    const double C12702 = C8142 - C8143;
    const double C12696 = C8143 - C8142;
    const double C12706 = C8150 - C8151;
    const double C12700 = C8151 - C8150;
    const double C22127 = C22106 - C22107;
    const double C22125 = C22102 - C22103;
    const double C24907 = C22432 - C22433;
    const double C24899 = C22433 - C22432;
    const double C24905 = C22428 - C22429;
    const double C24897 = C22429 - C22428;
    const double C47251 = C47247 + C48418;
    const double C47279 = C47276 - C47278;
    const double C26176 = C48414 * C139;
    const double C26170 = C48414 * C128;
    const double C26163 = C48414 * C138;
    const double C26157 = C48414 * C126;
    const double C26151 = C48414 * C137;
    const double C26145 = C48414 * C124;
    const double C26359 = C48414 * C284;
    const double C26353 = C48414 * C274;
    const double C26347 = C48414 * C283;
    const double C26341 = C48414 * C272;
    const double C26529 = C48414 * C408;
    const double C26523 = C48414 * C398;
    const double C26517 = C48414 * C407;
    const double C26511 = C48414 * C396;
    const double C29314 = C48414 * C698;
    const double C29308 = C48414 * C689;
    const double C29544 = C48414 * C949;
    const double C29538 = C48414 * C940;
    const double C29519 = C48414 * C406;
    const double C29513 = C48414 * C394;
    const double C30098 = C48414 * C697;
    const double C30092 = C48414 * C687;
    const double C30644 = C48414 * C948;
    const double C30638 = C48414 * C938;
    const double C46733 = C48414 * C2339;
    const double C46727 = C48414 * C2327;
    const double C47153 = C48414 * C2812;
    const double C47147 = C48414 * C2804;
    const double C48620 = C48414 * C48408;
    const double C48658 = C48622 + C48414;
    const double C3834 = C3827 + C3828;
    const double C3833 = C3825 + C3826;
    const double C1106 = C48673 * C285;
    const double C1100 = C48673 * C276;
    const double C1093 = C48673 * C284;
    const double C1087 = C48673 * C274;
    const double C1081 = C48673 * C283;
    const double C1075 = C48673 * C272;
    const double C1305 = C48673 * C597;
    const double C1299 = C48673 * C589;
    const double C1293 = C48673 * C596;
    const double C1287 = C48673 * C587;
    const double C1491 = C48673 * C699;
    const double C1485 = C48673 * C691;
    const double C1479 = C48673 * C698;
    const double C1473 = C48673 * C689;
    const double C16550 = C48673 * C2339;
    const double C16544 = C48673 * C2327;
    const double C16538 = C48673 * C697;
    const double C16532 = C48673 * C687;
    const double C16977 = C48673 * C1465;
    const double C16971 = C48673 * C1457;
    const double C17409 = C48673 * C3255;
    const double C17403 = C48673 * C3249;
    const double C32090 = C48673 * C1466;
    const double C26178 = C48421 * C285;
    const double C26172 = C48421 * C276;
    const double C26165 = C48421 * C284;
    const double C26159 = C48421 * C274;
    const double C26153 = C48421 * C283;
    const double C26147 = C48421 * C272;
    const double C26361 = C48421 * C597;
    const double C26355 = C48421 * C589;
    const double C26349 = C48421 * C596;
    const double C26343 = C48421 * C587;
    const double C26531 = C48421 * C699;
    const double C26525 = C48421 * C691;
    const double C26519 = C48421 * C698;
    const double C26513 = C48421 * C689;
    const double C29316 = C48421 * C1466;
    const double C29521 = C48421 * C697;
    const double C29515 = C48421 * C687;
    const double C30100 = C48421 * C1465;
    const double C30094 = C48421 * C1457;
    const double C30646 = C48421 * C2339;
    const double C30640 = C48421 * C2327;
    const double C47155 = C48421 * C3255;
    const double C47149 = C48421 * C3249;
    const double C48624 = C48421 / C47210;
    const double C48621 = C48421 * C48408;
    const double C11098 = C48687 - (C48414 * C48410) / C47174;
    const double C7805 = C7771 * C129;
    const double C7799 = C7771 * C118;
    const double C7794 = C7771 * C127;
    const double C7788 = C7771 * C117;
    const double C7782 = C7771 * C125;
    const double C7776 = C7771 * C116;
    const double C7988 = C7771 * C275;
    const double C7982 = C7771 * C266;
    const double C7976 = C7771 * C273;
    const double C7970 = C7771 * C265;
    const double C8158 = C7771 * C399;
    const double C8152 = C7771 * C390;
    const double C8146 = C7771 * C397;
    const double C8140 = C7771 * C389;
    const double C10133 = C7771 * C941;
    const double C10127 = C7771 * C934;
    const double C10122 = C7771 * C939;
    const double C10116 = C7771 * C933;
    const double C10110 = C7771 * C395;
    const double C10104 = C7771 * C388;
    const double C10563 = C7771 * C2329;
    const double C10557 = C7771 * C2321;
    const double C10551 = C7771 * C688;
    const double C10545 = C7771 * C682;
    const double C10991 = C7771 * C2805;
    const double C10985 = C7771 * C2800;
    const double C12495 = C7771 * C690;
    const double C12489 = C7771 * C683;
    const double C1112 = C1091 - C1092;
    const double C1109 = C1085 - C1086;
    const double C32296 = C1476 - C1477;
    const double C32290 = C1477 - C1476;
    const double C32293 = C1470 - C1471;
    const double C32287 = C1471 - C1470;
    const double C17397 = C16548 - C16549;
    const double C17394 = C16542 - C16543;
    const double C47356 = C47354 / C47174;
    const double C47329 = C48373 - C47325;
    const double C47338 = C47334 + C48460;
    const double C47366 = C47363 - C47365;
    const double C36183 = C165 * C48456;
    const double C48626 = C48456 * C48450;
    const double C48664 = C48628 + C48456;
    const double C2480 = C2469 * C48675;
    const double C36185 = C2469 * C48463;
    const double C48630 = C48463 / C47210;
    const double C48627 = C48463 * C48450;
    const double C19897 = C48689 - (C48456 * C48452) / C47174;
    const double C15021 = C164 * C15017;
    const double C169 = C158 - C159;
    const double C3832 = C3815 - C3816;
    const double C22131 = C22114 - C22115;
    const double C4976 = C424 - C423;
    const double C5250 = C423 - C424;
    const double C1114 = C1095 - C1096;
    const double C7816 = C7797 - C7798;
    const double C6118 = C4142 - C4141;
    const double C6557 = C4141 - C4142;
    const double C27489 = C22441 - C22440;
    const double C27896 = C22440 - C22441;
    const double C11286 = C48660 * C1759;
    const double C23451 = C48660 * C1759;
    const double C11432 = C48660 * C1917;
    const double C12500 = C48650 * C1917;
    const double C23597 = C48660 * C1917;
    const double C29318 = C26137 * C1917;
    const double C32092 = C48650 * C1917;
    const double C9128 =
        (4 * (2 * C47576 + be * C47578 + C47425 * C47680) +
         be * (3 * C47578 + C47425 * C47681) +
         C47425 *
             (3 * C47680 + be * C47681 +
              C47425 * (2 * C47674 + be * C47676 +
                        C47425 * (C47448 + be * C47425 * C47474 +
                                  C47425 * (be * C47474 + C47425 * C47457))))) /
        C47176;
    const double C48110 = C48108 + C48103;
    const double C2482 = C2472 - C2473;
    const double C2840 = C2473 - C2472;
    const double C168 = C156 - C157;
    const double C3830 = C3811 - C3812;
    const double C22129 = C22110 - C22111;
    const double C4975 = C422 - C421;
    const double C5249 = C421 - C422;
    const double C1111 = C1089 - C1090;
    const double C7813 = C7791 - C7792;
    const double C6116 = C4138 - C4137;
    const double C6555 = C4137 - C4138;
    const double C27487 = C22437 - C22436;
    const double C27894 = C22436 - C22437;
    const double C2481 = C2470 - C2471;
    const double C2839 = C2471 - C2470;
    const double C2646 = C48356 * C2341;
    const double C6553 = C48418 * C2341;
    const double C10136 = C7766 * C2341;
    const double C16563 = C48673 * C2341;
    const double C18493 = C48617 * C2341;
    const double C24466 = C48418 * C2341;
    const double C24683 = C22083 * C2341;
    const double C29546 = C48421 * C2341;
    const double C1289 = C48650 * C1273;
    const double C7975 = C48650 * C1273;
    const double C11115 = C48660 * C1273;
    const double C23280 = C48660 * C1273;
    const double C26345 = C26137 * C1273;
    const double C1475 = C48650 * C1459;
    const double C6323 = C48418 * C1459;
    const double C8145 = C48650 * C1459;
    const double C12492 = C7766 * C1459;
    const double C24673 = C48418 * C1459;
    const double C26515 = C26137 * C1459;
    const double C29310 = C48421 * C1459;
    const double C32084 = C48673 * C1459;
    const double C2644 = C48356 * C2331;
    const double C6549 = C48418 * C2331;
    const double C10130 = C7766 * C2331;
    const double C16557 = C48673 * C2331;
    const double C18489 = C48617 * C2331;
    const double C24462 = C48418 * C2331;
    const double C24679 = C22083 * C2331;
    const double C29540 = C48421 * C2331;
    const double C17671 = C48356 * C3678;
    const double C47608 = C47607 + C47605;
    const double C18142 = C17664 - C17665;
    const double C17661 =
        (4 * (2 * C47651 + ae * C47653 + C47424 * C47817) +
         ae * (3 * C47653 + C47424 * C47818) +
         C47424 *
             (3 * C47817 + ae * C47818 +
              C47424 * (2 * C47811 + ae * C47813 +
                        C47424 * (C47448 + ae * C47424 * C47489 +
                                  C47424 * (ae * C47489 + C47424 * C47457))))) /
        C47176;
    const double C1275 =
        (2 * (C47425 * C47533 + C47917 * be) +
         C47425 * (C47533 + C47425 * C47625 + C47425 * C47562 * be) +
         (C47917 + C47562 * C47575) * be) /
        C47174;
    const double C1461 =
        (C47424 * (C47533 + C47425 * C47625 + C47425 * C47562 * be)) / C47174;
    const double C2335 =
        (C47425 * C47533 + C47917 * be + C47625 * C47650) / C47174;
    const double C591 =
        (2 * C47530 + C47432 * C47533 +
         C47425 * (C47425 * C47538 + C47922 * be) + C47425 * C47922 * be) /
        C47174;
    const double C693 = (C47424 * (C47425 * C47538 + C47922 * be)) / C47174;
    const double C694 =
        (C47424 * C47425 * C47506 + C47425 * C47922 * ae) / C47174;
    const double C945 =
        (2 * C47498 + C47432 * C47501 +
         C47424 * (C47424 * C47506 + C47922 * ae) + C47424 * C47922 * ae) /
        C47174;
    const double C120 = 4 * (2 * C47913 + C47432 * C47917) +
                        C47432 * (3 * C47917 + C47432 * C47922);
    const double C268 = C47425 * (3 * C47917 + C47432 * C47922);
    const double C392 = C47424 * (3 * C47917 + C47432 * C47922);
    const double C583 = 2 * C47913 + C47432 * C47917 + C47922 * C47575;
    const double C685 = C47424 * C47425 * C47922;
    const double C936 = 2 * C47913 + C47432 * C47917 + C47922 * C47650;
    const double C1270 =
        2 * C47425 * C47922 + C47425 * (C47922 + C47570 * C47575);
    const double C1456 = C47424 * (C47922 + C47570 * C47575);
    const double C2803 =
        2 * C47424 * C47922 + C47424 * (C47922 + C47570 * C47650);
    const double C2653 = C113 * C2337;
    const double C6564 = C3791 * C2337;
    const double C24474 = C22090 * C2337;
    const double C2651 = C113 * C2325;
    const double C6560 = C3791 * C2325;
    const double C24470 = C22090 * C2325;
    const double C3676 =
        (3 * (C47501 + C47424 * C48037 + C48035 * ae) +
         C47424 * (2 * C48037 +
                   C47424 * (C47476 + C47424 * (C47424 * C47514 + C47568 * ae) +
                             C47424 * C47568 * ae) +
                   C48038 * ae) +
         (2 * C48035 + C47424 * C48038) * ae) /
        C47174;
    const double C17571 =
        (3 * (C47580 + C47424 * C48094 + C48092 * ae) +
         C47424 * (2 * C48094 +
                   C47424 * (C47683 +
                             C47424 * (C47424 * C47425 * C47686 + C47770 * ae) +
                             C47424 * C47770 * ae) +
                   C48095 * ae) +
         (2 * C48092 + C47424 * C48095) * ae) /
        C47174;
    const double C47620 = C47535 + C47619;
    const double C18705 = C48418 * C3256;
    const double C20039 = C48356 * C3256;
    const double C24919 = C48418 * C3256;
    const double C18701 = C48418 * C3251;
    const double C20037 = C48356 * C3251;
    const double C24915 = C48418 * C3251;
    const double C12499 = C7773 * C1913;
    const double C32091 = C1071 * C1913;
    const double C10137 = C7773 * C2334;
    const double C16564 = C1071 * C2334;
    const double C18494 = C3791 * C2334;
    const double C24684 = C22090 * C2334;
    const double C12493 = C7773 * C1908;
    const double C32085 = C1071 * C1908;
    const double C10131 = C7773 * C2324;
    const double C16558 = C1071 * C2324;
    const double C18490 = C3791 * C2324;
    const double C24680 = C22090 * C2324;
    const double C17670 = C113 * C3674;
    const double C17668 = C113 * C3669;
    const double C48123 = C47503 + C48121;
    const double C9215 = (C47424 * (3 * C47578 + C47425 * C47681) +
                          (3 * C47968 + C47425 * C48042) * ae) /
                         C47174;
    const double C9684 =
        (2 * C47572 + C47425 * C47578 +
         C47424 * (C47424 * C47681 + C48042 * ae) + C47424 * C48042 * ae) /
        C47174;
    const double C9122 = 4 * (2 * C47966 + C47425 * C47968) +
                         C47425 * (3 * C47968 + C47425 * C48042);
    const double C9212 = C47424 * (3 * C47968 + C47425 * C48042);
    const double C9680 = 2 * C47966 + C47425 * C47968 + C48042 * C47650;
    const double C10540 =
        2 * C47424 * C48042 + C47424 * (C48042 + C47739 * C47650);
    const double C10975 =
        (3 * (C47578 + C47424 * C48086 + C48084 * ae) +
         C47424 * (2 * C48086 +
                   C47424 * (C47676 + C47424 * (C47424 * C47717 + C47734 * ae) +
                             C47424 * C47734 * ae) +
                   C48087 * ae) +
         (2 * C48084 + C47424 * C48087) * ae) /
        C47174;
    const double C17908 = C113 * C10974;
    const double C21982 = C3791 * C10974;
    const double C42714 = C22090 * C10974;
    const double C17906 = C113 * C10970;
    const double C21978 = C3791 * C10970;
    const double C42710 = C22090 * C10970;
    const double C48138 = C47669 + C48136;
    const double C47740 = C47738 + C47733;
    const double C10976 =
        (3 * (C47576 + ae * C47785 + C47424 * C47789) +
         ae * (2 * C47785 + C47424 * C47790) +
         C47424 * (2 * C47789 + ae * C47790 +
                   C47424 * (C47674 + ae * C47424 * C47732 +
                             C47424 * (ae * C47732 + C47424 * C47715)))) /
        C47176;
    const double C10972 = (3 * (C47599 + C47604 * C47650) +
                           C47424 * (2 * C47785 + C47424 * C47790)) /
                          C47174;
    const double C47842 = C47674 + C47838;
    const double C17655 = 4 * (2 * C48019 + C47424 * C48022) +
                          C47424 * (3 * C48022 + C47424 * C48109);
    const double C48158 = C48156 + C48151;
    const double C142 =
        (5 * (3 * C47450 + C47432 * C47461) +
         C47432 * (4 * C47461 +
                   C47432 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C286 =
        (be * (3 * (C47468 + C47471 * C47440) +
               C47432 *
                   (2 * C47432 * C47471 +
                    C47432 * (C47471 + C47445 * C47446 * C47465 * C47440))) +
         C47425 * (3 * C47450 + C47432 * C47461)) /
        C47176;
    const double C287 =
        (be * (4 * (2 * C47432 * C47471 + C47432 * C47476) +
               C47432 * (3 * C47476 +
                         C47432 * (2 * C47432 * C47474 +
                                   C47432 * (C47474 + C47453 * C47454 * C47465 *
                                                          C47440)))) +
         C47425 * (4 * C47461 +
                   C47432 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C410 =
        (ae * (3 * (C47483 + C47486 * C47440) +
               C47432 *
                   (2 * C47432 * C47486 +
                    C47432 * (C47486 + C47445 * C47446 * C47480 * C47440))) +
         C47424 * (3 * C47450 + C47432 * C47461)) /
        C47176;
    const double C411 =
        (ae * (4 * (2 * C47432 * C47486 + C47432 * C47491) +
               C47432 * (3 * C47491 +
                         C47432 * (2 * C47432 * C47489 +
                                   C47432 * (C47489 + C47453 * C47454 * C47480 *
                                                          C47440)))) +
         C47424 * (4 * C47461 +
                   C47432 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C598 =
        (2 * C47432 * C47443 + C47432 * C47450 + be * C47425 * C47506 +
         C47425 * (be * C47506 + C47425 * C47461)) /
        C47176;
    const double C700 =
        (ae * (C47425 * (2 * C47432 * C47486 + C47432 * C47491) +
               (2 * C47432 * C47523 +
                C47432 * (C47523 + C47439 * C47441 * C47440)) *
                   be) +
         C47424 * (be * C47506 + C47425 * C47461)) /
        C47176;
    const double C951 =
        (2 * C47432 * C47443 + C47432 * C47450 + ae * C47424 * C47538 +
         C47424 * (ae * C47538 + C47424 * C47461)) /
        C47176;
    const double C2343 = (be * C47501 + C47425 * C47450 + ae * C47424 * C47625 +
                          C47424 * (ae * C47625 + C47424 * C47591)) /
                         C47176;
    const double C47696 = C47691 + C47694;
    const double C47803 = C47800 + C47801;
    const double C47831 = C47828 + C47829;
    const double C47723 = C47425 * C47721;
    const double C47794 = C47424 * C47721;
    const double C47843 = C47424 * C47839;
    const double C47865 = C47424 * C47863;
    const double C47517 = C47432 * C47516;
    const double C1282 =
        (2 * (be * C47506 + C47425 * C47461) +
         be * (C47506 + C47516 * std::pow(C47425, 2)) +
         C47425 * (C47461 + be * C47425 * C47516 +
                   C47425 * (be * C47516 +
                             C47425 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1278 =
        (2 * C47425 * C47506 + C47425 * (C47506 + C47516 * C47575)) / C47174;
    const double C1464 = (C47424 * (C47506 + C47516 * C47575) +
                          (C47922 + C47570 * C47575) * ae) /
                         C47174;
    const double C2811 =
        (2 * (C47424 * C47506 + C47922 * ae) +
         C47424 * (C47506 + C47424 * (C47424 * C47516 + C47570 * ae) +
                   C47424 * C47570 * ae) +
         (C47922 + C47570 * C47650) * ae) /
        C47174;
    const double C1760 =
        (3 * (C47450 + be * C47587 + C47425 * C47591) +
         be * (2 * C47587 + C47425 * C47592) +
         C47425 * (2 * C47591 + be * C47592 +
                   C47425 * (C47459 + be * C47425 * C47514 +
                             C47425 * (be * C47514 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1918 =
        (ae * (2 * (C47425 * C47491 + C47562 * be) +
               C47425 * (C47491 + C47425 * (C47425 * C47546 + C47568 * be) +
                         C47425 * C47568 * be) +
               (C47562 + C47568 * C47575) * be) +
         C47424 * (2 * C47591 + be * C47592 +
                   C47425 * (C47459 + be * C47425 * C47514 +
                             C47425 * (be * C47514 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1757 = (3 * (C47501 + C47476 * C47575) +
                          C47425 * (2 * C47587 + C47425 * C47592)) /
                         C47174;
    const double C1915 = (C47424 * (2 * C47587 + C47425 * C47592) +
                          (2 * C47976 + C47425 * C47978) * ae) /
                         C47174;
    const double C2338 =
        (C47501 + C47476 * C47575 + C47424 * (C47424 * C47592 + C47978 * ae) +
         C47424 * C47978 * ae) /
        C47174;
    const double C47697 = C47689 + C47695;
    const double C47724 = C47425 * C47722;
    const double C10542 =
        (2 * (C47424 * C47681 + C48042 * ae) +
         C47424 * (C47681 + C47424 * (C47424 * C47722 + C47739 * ae) +
                   C47424 * C47739 * ae) +
         (C48042 + C47739 * C47650) * ae) /
        C47174;
    const double C47549 = C47432 * C47548;
    const double C47636 = C47425 * C47548;
    const double C1468 =
        (ae * (C47538 + C47425 * (C47425 * C47548 + C47570 * be) +
               C47425 * C47570 * be) +
         C47424 * (C47461 + be * C47425 * C47516 +
                   C47425 * (be * C47516 +
                             C47425 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C2815 =
        (2 * (ae * C47538 + C47424 * C47461) +
         ae * (C47538 + C47548 * std::pow(C47424, 2)) +
         C47424 * (C47461 + ae * C47424 * C47548 +
                   C47424 * (ae * C47548 +
                             C47424 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C2810 =
        (2 * C47424 * C47538 + C47424 * (C47538 + C47548 * C47650)) / C47174;
    const double C47632 = C47425 * C47630;
    const double C3257 =
        (2 * (ae * C47625 + C47424 * C47591) +
         ae * (C47625 + C47630 * std::pow(C47424, 2)) +
         C47424 * (C47591 + ae * C47424 * C47630 +
                   C47424 * (ae * C47630 +
                             C47424 * (be * C47514 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C3253 =
        (2 * C47424 * C47625 + C47424 * (C47625 + C47630 * C47650)) / C47174;
    const double C3679 =
        (3 * (C47450 + ae * C47662 + C47424 * C47666) +
         ae * (2 * C47662 + C47424 * C47667) +
         C47424 * (2 * C47666 + ae * C47667 +
                   C47424 * (C47459 + ae * C47424 * C47546 +
                             C47424 * (ae * C47546 +
                                       C47424 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C3675 = (3 * (C47533 + C47491 * C47650) +
                          C47424 * (2 * C47662 + C47424 * C47667)) /
                         C47174;
    const double C47759 = C47758 + C47756;
    const double C47844 = C47424 * C47841;
    const double C47776 = C47541 + C47775;
    const double C47804 = C47617 + C47802;
    const double C47832 = C47826 + C47830;
    const double C47866 = C47424 * C47864;
    const double C176 = C170 + C171;
    const double C2478 = C2466 + C2467;
    const double C4977 = C4969 + C4970;
    const double C19789 = C7655 - C7654;
    const double C10983 = C10123 - C10124;
    const double C26015 = C24894 - C24895;
    const double C21975 = C19797 - C19796;
    const double C42707 = C26023 - C26022;
    const double C19787 = C7651 - C7650;
    const double C10980 = C10117 - C10118;
    const double C26013 = C24890 - C24891;
    const double C21973 = C19793 - C19792;
    const double C42705 = C26019 - C26018;
    const double C6569 = C6544 + C6545;
    const double C6567 = C6540 + C6541;
    const double C6568 = C6542 + C6543;
    const double C6566 = C6538 + C6539;
    const double C18143 = C17666 - C17667;
    const double C177 = C172 + C173;
    const double C4978 = C4973 + C4974;
    const double C162 = C113 * C133;
    const double C303 = C113 * C279;
    const double C3823 = C3791 * C279;
    const double C22122 = C22090 * C279;
    const double C427 = C113 * C403;
    const double C1107 = C1071 * C592;
    const double C3995 = C3791 * C592;
    const double C7809 = C7773 * C592;
    const double C22294 = C22090 * C592;
    const double C161 = C48356 * C132;
    const double C302 = C48356 * C278;
    const double C3820 = C48418 * C278;
    const double C22119 = C48418 * C278;
    const double C426 = C48356 * C402;
    const double C2475 = C48356 * C944;
    const double C18145 = C48356 * C17657;
    const double C47927 = C47925 + C47926;
    const double C2636 =
        (C47425 * C47506 + C47424 * (C47424 * C47425 * C47516 + C48000 * ae) +
         C47424 * C48000 * ae) /
        C47174;
    const double C2634 = C47425 * C47922 + C48000 * C47650;
    const double C9123 = 4 * (2 * C47971 + C47425 * C47973) +
                         C47425 * (3 * C47973 + C47425 * C48047);
    const double C9213 = C47424 * (3 * C47973 + C47425 * C48047);
    const double C9944 = 2 * C47971 + C47425 * C47973 + C48047 * C47650;
    const double C17656 = 4 * (2 * C48027 + C47424 * C48030) +
                          C47424 * (3 * C48030 + C47424 * C48124);
    const double C48056 = C48054 + C48055;
    const double C17897 = 4 * (2 * C48077 + C47424 * C48080) +
                          C47424 * (3 * C48080 + C47424 * C48139);
    const double C48161 = C48149 + C48159;
    const double C48594 = C48266 * C48256;
    const double C48636 = C48599 + C48266;
    const double C48602 = C48274 / C47210;
    const double C48598 = C48274 * C48256;
    const double C3786 = C48683 - (C48266 * C48257) / C47174;
    const double C47271 = C47266 - C47269;
    const double C47246 = C47242 * ae;
    const double C22089 = (-C47228) / C47210 - (C47242 * be) / C47174;
    const double C47255 = C47251 * be;
    const double C26179 = C47279 * C592;
    const double C26168 = C47279 * C590;
    const double C26162 = C47279 * C582;
    const double C26156 = C47279 * C588;
    const double C26150 = C47279 * C581;
    const double C26362 = C47279 * C1276;
    const double C26356 = C47279 * C1269;
    const double C26350 = C47279 * C1274;
    const double C26344 = C47279 * C1268;
    const double C26532 = C47279 * C1462;
    const double C26526 = C47279 * C1455;
    const double C26520 = C47279 * C1460;
    const double C26514 = C47279 * C1454;
    const double C29317 = C47279 * C1913;
    const double C29311 = C47279 * C1908;
    const double C29547 = C47279 * C2334;
    const double C29541 = C47279 * C2324;
    const double C29524 = C47279 * C1458;
    const double C29518 = C47279 * C1453;
    const double C30101 = C47279 * C1911;
    const double C30095 = C47279 * C1907;
    const double C30647 = C47279 * C2330;
    const double C30641 = C47279 * C2322;
    const double C47156 = C47279 * C10097;
    const double C47150 = C47279 * C10094;
    const double C9039 =
        (C47279 / C47210 + (0 * ae) / C47174) / C47210 - (0 * be) / C47174;
    const double C11107 = C47279 / C47210 - (0 * be) / C47174;
    const double C23272 = C47279 / C47210 + (0 * ae) / C47174;
    const double C48655 = C48620 / C47174;
    const double C48677 = C48658 / C47210;
    const double C3838 = C3834 * C48373;
    const double C6114 = C3834 * C48618;
    const double C34604 = C3834 * C30746;
    const double C3837 = C3833 * C114;
    const double C6113 = C3833 * C4966;
    const double C1113 = C1093 - C1094;
    const double C1110 = C1087 - C1088;
    const double C32297 = C1478 - C1479;
    const double C32291 = C1479 - C1478;
    const double C32294 = C1472 - C1473;
    const double C32288 = C1473 - C1472;
    const double C17398 = C16550 - C16551;
    const double C17395 = C16544 - C16545;
    const double C48678 = C48659 + C48624;
    const double C11100 = C48624 - C48419 / C47178;
    const double C48657 = C48621 / C47174;
    const double C11134 = C11098 * C138;
    const double C11126 = C11098 * C126;
    const double C11117 = C11098 * C137;
    const double C11109 = C11098 * C124;
    const double C11280 = C11098 * C283;
    const double C11272 = C11098 * C272;
    const double C11426 = C11098 * C407;
    const double C11418 = C11098 * C396;
    const double C14149 = C11098 * C406;
    const double C14141 = C11098 * C394;
    const double C14524 = C11098 * C697;
    const double C14516 = C11098 * C687;
    const double C14898 = C11098 * C948;
    const double C14890 = C11098 * C938;
    const double C7814 = C7793 - C7794;
    const double C7811 = C7787 - C7788;
    const double C12704 = C8146 - C8147;
    const double C12698 = C8147 - C8146;
    const double C12701 = C8140 - C8141;
    const double C12695 = C8141 - C8140;
    const double C10982 = C10121 - C10122;
    const double C10979 = C10115 - C10116;
    const double C47358 = C47353 - C47356;
    const double C47333 = C47329 * ae;
    const double C30748 = (-C47315) / C47210 - (C47329 * be) / C47174;
    const double C47342 = C47338 * be;
    const double C17486 =
        (C47366 / C47210 + (0 * ae) / C47174) / C47210 - (0 * be) / C47174;
    const double C19904 = C47366 / C47210 - (0 * be) / C47174;
    const double C33479 = C47366 / C47210 + (0 * ae) / C47174;
    const double C48661 = C48626 / C47174;
    const double C48680 = C48664 / C47210;
    const double C48681 = C48665 + C48630;
    const double C19899 = C48630 - C48461 / C47178;
    const double C48663 = C48627 / C47174;
    const double C15027 = C15021 + C15022;
    const double C175 = C169 * C48373;
    const double C3836 = C3831 + C3832;
    const double C4980 = C4976 * C48460;
    const double C30758 = C4976 * C48460;
    const double C6121 = C6117 + C6118;
    const double C6571 = C6556 + C6557;
    const double C17658 =
        (4 * (2 * C48021 + C47424 * C48110 + C48022 * ae) +
         C47424 *
             (3 * C48110 +
              C47424 *
                  (2 * C48102 +
                   C47424 * (C47471 + C47424 * (C47424 * C47474 + C47525 * ae) +
                             C47424 * C47525 * ae) +
                   C48104 * ae) +
              C48109 * ae) +
         (3 * C48022 + C47424 * C48109) * ae) /
        C47174;
    const double C2485 = C2482 * C48653;
    const double C15026 = C2482 * C48653;
    const double C36187 = C2482 * C36177;
    const double C174 = C168 * C114;
    const double C3835 = C3829 + C3830;
    const double C4979 = C4975 * C4967;
    const double C30757 = C4975 * C30749;
    const double C6120 = C6115 + C6116;
    const double C6570 = C6554 + C6555;
    const double C2484 = C2481 * C2460;
    const double C15025 = C2481 * C15019;
    const double C36186 = C2481 * C47366;
    const double C18697 = C6552 - C6553;
    const double C18693 = C6553 - C6552;
    const double C24911 = C24467 - C24466;
    const double C24903 = C24466 - C24467;
    const double C32295 = C1474 - C1475;
    const double C32289 = C1475 - C1474;
    const double C12703 = C8144 - C8145;
    const double C12697 = C8145 - C8144;
    const double C18695 = C6548 - C6549;
    const double C18691 = C6549 - C6548;
    const double C24909 = C24463 - C24462;
    const double C24901 = C24462 - C24463;
    const double C2340 =
        (C47436 + be * C47572 + C47425 * C47576 + ae * C47424 * C47608 +
         C47424 * (ae * C47608 +
                   C47424 * (C47443 + be * C47425 * C47471 +
                             C47425 * (be * C47471 + C47425 * C47448)))) /
        C47176;
    const double C9218 =
        (ae * (3 * C47608 +
               C47425 * (2 * C47604 +
                         C47425 * (C47486 +
                                   C47425 * (C47425 * C47489 + C47525 * be) +
                                   C47425 * C47525 * be) +
                         C47700 * be) +
               (2 * C47603 + C47425 * C47700) * be) +
         C47424 *
             (3 * C47680 + be * C47681 +
              C47425 * (2 * C47674 + be * C47676 +
                        C47425 * (C47448 + be * C47425 * C47474 +
                                  C47425 * (be * C47474 + C47425 * C47457))))) /
        C47176;
    const double C1752 =
        (3 * (C47528 + C47425 * C47599 + C47966 * be) +
         C47425 * (2 * C47599 + C47425 * C47608 + C47968 * be) +
         (2 * C47966 + C47425 * C47968) * be) /
        C47174;
    const double C1910 =
        (C47424 * (2 * C47599 + C47425 * C47608 + C47968 * be)) / C47174;
    const double C2328 =
        (C47528 + C47425 * C47599 + C47966 * be + C47608 * C47650) / C47174;
    const double C18147 = C48356 * C17661;
    const double C1301 = C48650 * C1275;
    const double C7987 = C48650 * C1275;
    const double C11132 = C48660 * C1275;
    const double C23297 = C48660 * C1275;
    const double C26357 = C26137 * C1275;
    const double C1487 = C48650 * C1461;
    const double C6331 = C48418 * C1461;
    const double C8157 = C48650 * C1461;
    const double C26527 = C26137 * C1461;
    const double C27694 = C48418 * C1461;
    const double C2652 = C48356 * C2335;
    const double C6561 = C48418 * C2335;
    const double C24471 = C48418 * C2335;
    const double C1102 = C48650 * C591;
    const double C3992 = C48418 * C591;
    const double C7804 = C48650 * C591;
    const double C22291 = C48418 * C591;
    const double C26174 = C26137 * C591;
    const double C4146 = C48418 * C693;
    const double C5116 = C48356 * C693;
    const double C22445 = C48418 * C693;
    const double C4149 = C3791 * C694;
    const double C5117 = C113 * C694;
    const double C22448 = C22090 * C694;
    const double C2476 = C113 * C945;
    const double C160 = C113 * C120;
    const double C301 = C113 * C268;
    const double C3819 = C3791 * C268;
    const double C22118 = C22090 * C268;
    const double C425 = C113 * C392;
    const double C1101 = C1071 * C583;
    const double C3991 = C3791 * C583;
    const double C7803 = C7773 * C583;
    const double C22290 = C22090 * C583;
    const double C26173 = C47279 * C583;
    const double C4145 = C3791 * C685;
    const double C5115 = C113 * C685;
    const double C22444 = C22090 * C685;
    const double C2474 = C113 * C936;
    const double C47621 = C47620 + C47618;
    const double C48125 = C48123 + C48118;
    const double C10567 = C7773 * C9684;
    const double C16990 = C1071 * C9684;
    const double C46736 = C47279 * C9684;
    const double C10561 = C7773 * C9680;
    const double C16984 = C1071 * C9680;
    const double C46730 = C47279 * C9680;
    const double C48140 = C48138 + C48133;
    const double C47743 = C47425 * C47740;
    const double C47748 = 3 * C47740;
    const double C47793 = ae * C47740;
    const double C47792 = C47424 * C47740;
    const double C10100 =
        (2 * (ae * C47608 + C47424 * C47680) + ae * (C47608 + C47740 * C47650) +
         C47424 * (C47680 + ae * C47424 * C47740 +
                   C47424 * (ae * C47740 + C47424 * C47721))) /
        C47176;
    const double C10096 =
        (2 * C47424 * C47608 + C47424 * (C47608 + C47740 * C47650)) / C47174;
    const double C17909 = C48356 * C10976;
    const double C21983 = C48418 * C10976;
    const double C42715 = C48418 * C10976;
    const double C17907 = C48356 * C10972;
    const double C21979 = C48418 * C10972;
    const double C42711 = C48418 * C10972;
    const double C18144 = C113 * C17655;
    const double C48160 = C47424 * C48158;
    const double C304 = C48356 * C286;
    const double C3824 = C48418 * C286;
    const double C22123 = C48418 * C286;
    const double C428 = C48356 * C410;
    const double C1108 = C48650 * C598;
    const double C3996 = C48418 * C598;
    const double C7810 = C48650 * C598;
    const double C22295 = C48418 * C598;
    const double C26180 = C26137 * C598;
    const double C4150 = C48418 * C700;
    const double C5118 = C48356 * C700;
    const double C22449 = C48418 * C700;
    const double C2477 = C48356 * C951;
    const double C2654 = C48356 * C2343;
    const double C6565 = C48418 * C2343;
    const double C24475 = C48418 * C2343;
    const double C47725 = C47713 + C47723;
    const double C47845 = C47842 + C47843;
    const double C47867 = C47855 + C47865;
    const double C47518 = C47508 + C47517;
    const double C9129 =
        (4 * (2 * C47584 + be * C47585 + C47425 * C47696) +
         be * (3 * C47585 + C47425 * C47697) +
         C47425 * (3 * C47696 + be * C47697 +
                   C47425 * (2 * C47692 + be * C47693 +
                             C47425 * (C47685 + be * C47425 * C47686 +
                                       C47425 * (be * C47686 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C9127 = (4 * (2 * C47580 + C47425 * C47585) +
                          C47425 * (3 * C47585 + C47425 * C47697)) /
                         C47174;
    const double C9217 = (C47424 * (3 * C47585 + C47425 * C47697) +
                          (3 * C47973 + C47425 * C48047) * ae) /
                         C47174;
    const double C9946 =
        (2 * C47580 + C47425 * C47585 +
         C47424 * (C47424 * C47697 + C48047 * ae) + C47424 * C48047 * ae) /
        C47174;
    const double C47726 = C47711 + C47724;
    const double C47550 = C47540 + C47549;
    const double C47638 = C47636 + C47637;
    const double C47633 = C47491 + C47632;
    const double C47760 = C47425 * C47759;
    const double C47795 = C47759 * C47650;
    const double C47846 = C47840 + C47844;
    const double C47777 = C47776 + C47773;
    const double C17572 =
        (3 * (C47584 + ae * C47799 + C47424 * C47803) +
         ae * (2 * C47799 + C47424 * C47804) +
         C47424 * (2 * C47803 + ae * C47804 +
                   C47424 * (C47692 + ae * C47424 * C47774 +
                             C47424 * (ae * C47774 +
                                       C47424 * (be * C47686 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C17570 = (3 * (C47612 + C47617 * C47650) +
                           C47424 * (2 * C47799 + C47424 * C47804)) /
                          C47174;
    const double C17662 =
        (4 * (2 * C47659 + ae * C47660 + C47424 * C47831) +
         ae * (3 * C47660 + C47424 * C47832) +
         C47424 * (3 * C47831 + ae * C47832 +
                   C47424 * (2 * C47825 + ae * C47827 +
                             C47424 * (C47685 + ae * C47424 * C47768 +
                                       C47424 * (ae * C47768 +
                                                 C47424 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C17659 = (4 * (2 * C47655 + C47424 * C47660) +
                           C47424 * (3 * C47660 + C47424 * C47832)) /
                          C47174;
    const double C47868 = C47853 + C47866;
    const double C2483 = C2478 + C2479;
    const double C4981 = C4977 + C4971;
    const double C19799 = C19788 + C19789;
    const double C21985 = C21974 + C21975;
    const double C19798 = C19786 + C19787;
    const double C21984 = C21972 + C21973;
    const double C121 = 5 * (3 * C47917 + C47432 * C47922) +
                        C47432 * (4 * C47922 + C47432 * C47927);
    const double C269 = C47425 * (4 * C47922 + C47432 * C47927);
    const double C393 = C47424 * (4 * C47922 + C47432 * C47927);
    const double C584 = 3 * C47917 + C47432 * C47922 + C47927 * C47575;
    const double C686 = C47424 * C47425 * C47927;
    const double C937 = 3 * C47917 + C47432 * C47922 + C47927 * C47650;
    const double C9364 = 5 * (3 * C47968 + C47425 * C48042) +
                         C47425 * (4 * C48042 + C47425 * C48056);
    const double C9450 = C47424 * (4 * C48042 + C47425 * C48056);
    const double C9681 = 3 * C47968 + C47425 * C48042 + C48056 * C47650;
    const double C18135 = 5 * (3 * C48022 + C47424 * C48109) +
                          C47424 * (4 * C48109 + C47424 * C48161);
    const double C48632 = C48594 / C47174;
    const double C48670 = C48636 / C47210;
    const double C48671 = C48638 + C48602;
    const double C3788 = C48602 - C48272 / C47178;
    const double C48635 = C48598 / C47174;
    const double C47250 = C47246 / C47174;
    const double C22120 = C22089 * C131;
    const double C22116 = C22089 * C119;
    const double C22113 = C22089 * C129;
    const double C22109 = C22089 * C118;
    const double C22105 = C22089 * C127;
    const double C22101 = C22089 * C117;
    const double C22097 = C22089 * C125;
    const double C22093 = C22089 * C116;
    const double C22292 = C22089 * C277;
    const double C22288 = C22089 * C267;
    const double C22284 = C22089 * C275;
    const double C22280 = C22089 * C266;
    const double C22276 = C22089 * C273;
    const double C22272 = C22089 * C265;
    const double C22446 = C22089 * C401;
    const double C22442 = C22089 * C391;
    const double C22438 = C22089 * C399;
    const double C22434 = C22089 * C390;
    const double C22430 = C22089 * C397;
    const double C22426 = C22089 * C389;
    const double C24472 = C22089 * C943;
    const double C24468 = C22089 * C935;
    const double C24465 = C22089 * C941;
    const double C24461 = C22089 * C934;
    const double C24682 = C22089 * C2333;
    const double C24678 = C22089 * C2323;
    const double C24674 = C22089 * C690;
    const double C24670 = C22089 * C683;
    const double C24916 = C22089 * C2807;
    const double C24912 = C22089 * C2801;
    const double C24893 = C22089 * C939;
    const double C24889 = C22089 * C933;
    const double C24885 = C22089 * C395;
    const double C24881 = C22089 * C388;
    const double C25474 = C22089 * C2329;
    const double C25470 = C22089 * C2321;
    const double C25466 = C22089 * C688;
    const double C25462 = C22089 * C682;
    const double C26020 = C22089 * C2805;
    const double C26016 = C22089 * C2800;
    const double C27695 = C22089 * C692;
    const double C27691 = C22089 * C684;
    const double C42342 = C22089 * C3250;
    const double C42338 = C22089 * C3246;
    const double C42712 = C22089 * C3672;
    const double C42708 = C22089 * C3668;
    const double C47261 = C47255 / C47174;
    const double C26186 = C26167 - C26168;
    const double C26183 = C26161 - C26162;
    const double C29536 = C26520 - C26521;
    const double C29530 = C26521 - C26520;
    const double C29533 = C26514 - C26515;
    const double C29527 = C26515 - C26514;
    const double C11139 = C11107 * C1276;
    const double C11131 = C11107 * C1269;
    const double C11124 = C11107 * C1274;
    const double C11116 = C11107 * C1268;
    const double C11285 = C11107 * C1755;
    const double C11277 = C11107 * C1750;
    const double C11431 = C11107 * C1913;
    const double C11423 = C11107 * C1908;
    const double C14156 = C11107 * C1911;
    const double C14148 = C11107 * C1907;
    const double C14529 = C11107 * C9215;
    const double C14521 = C11107 * C9212;
    const double C14903 = C11107 * C9684;
    const double C14895 = C11107 * C9680;
    const double C23304 = C23272 * C1276;
    const double C23296 = C23272 * C1269;
    const double C23289 = C23272 * C1274;
    const double C23281 = C23272 * C1268;
    const double C23450 = C23272 * C1755;
    const double C23442 = C23272 * C1750;
    const double C23596 = C23272 * C1913;
    const double C23588 = C23272 * C1908;
    const double C40873 = C23272 * C1911;
    const double C40865 = C23272 * C1907;
    const double C41246 = C23272 * C9215;
    const double C41238 = C23272 * C9212;
    const double C41620 = C23272 * C9684;
    const double C41612 = C23272 * C9680;
    const double C48692 = C48655 + C48687;
    const double C11099 = C48677 - (C48421 * C48410) / C47174;
    const double C3841 = C3837 + C3838;
    const double C6119 = C6113 + C6114;
    const double C1116 = C1112 + C1113;
    const double C1115 = C1109 + C1110;
    const double C32302 = C32296 + C32297;
    const double C32300 = C32290 + C32291;
    const double C32301 = C32293 + C32294;
    const double C32299 = C32287 + C32288;
    const double C17413 = C17397 + C17398;
    const double C17412 = C17394 + C17395;
    const double C23303 = C48678 * C597;
    const double C23295 = C48678 * C589;
    const double C23286 = C48678 * C596;
    const double C23278 = C48678 * C587;
    const double C23449 = C48678 * C1280;
    const double C23441 = C48678 * C1273;
    const double C23595 = C48678 * C1466;
    const double C23587 = C48678 * C1459;
    const double C40870 = C48678 * C1465;
    const double C40862 = C48678 * C1457;
    const double C41245 = C48678 * C1916;
    const double C9032 = C48678 / C47210 - C48419 / C48639;
    const double C11138 = C11100 * C597;
    const double C11130 = C11100 * C589;
    const double C11121 = C11100 * C596;
    const double C11113 = C11100 * C587;
    const double C11284 = C11100 * C1280;
    const double C11276 = C11100 * C1273;
    const double C11430 = C11100 * C1466;
    const double C11422 = C11100 * C1459;
    const double C14153 = C11100 * C1465;
    const double C14145 = C11100 * C1457;
    const double C14528 = C11100 * C1916;
    const double C48688 = C48657 + C48677;
    const double C7818 = C7814 + C7815;
    const double C7817 = C7811 + C7812;
    const double C12710 = C12704 + C12705;
    const double C12708 = C12698 + C12699;
    const double C12709 = C12701 + C12702;
    const double C12707 = C12695 + C12696;
    const double C10998 = C10982 + C10983;
    const double C10997 = C10979 + C10980;
    const double C47337 = C47333 / C47174;
    const double C30755 = C166 * C30748;
    const double C30751 = C164 * C30748;
    const double C34603 = C3833 * C30748;
    const double C47348 = C47342 / C47174;
    const double C48693 = C48661 + C48689;
    const double C19898 = C48680 - (C48463 * C48452) / C47174;
    const double C17480 = C48681 / C47210 - C48461 / C48639;
    const double C48690 = C48663 + C48680;
    const double C15028 = C15027 + C15023;
    const double C3840 = C3836 * C48373;
    const double C6123 = C6121 * C48460;
    const double C34606 = C6121 * C48460;
    const double C18146 = C113 * C17658;
    const double C178 = C174 + C175;
    const double C3839 = C3835 * C114;
    const double C4982 = C4978 + C4979;
    const double C6122 = C6120 * C4967;
    const double C34605 = C6120 * C30749;
    const double C18709 = C18696 + C18697;
    const double C18707 = C18692 + C18693;
    const double C18708 = C18694 + C18695;
    const double C18706 = C18690 + C18691;
    const double C10125 = C48650 * C2340;
    const double C10566 = C7766 * C2340;
    const double C14902 = C11100 * C2340;
    const double C16552 = C48650 * C2340;
    const double C16989 = C48673 * C2340;
    const double C19251 = C48418 * C2340;
    const double C25477 = C48418 * C2340;
    const double C30648 = C26137 * C2340;
    const double C41619 = C48678 * C2340;
    const double C46735 = C48421 * C2340;
    const double C14530 = C48660 * C9218;
    const double C41247 = C48660 * C9218;
    const double C10550 = C48650 * C1910;
    const double C14147 = C48660 * C1910;
    const double C14520 = C11100 * C1910;
    const double C16973 = C48650 * C1910;
    const double C30096 = C26137 * C1910;
    const double C40864 = C48660 * C1910;
    const double C41237 = C48678 * C1910;
    const double C10119 = C48650 * C2328;
    const double C10560 = C7766 * C2328;
    const double C14894 = C11100 * C2328;
    const double C16546 = C48650 * C2328;
    const double C16983 = C48673 * C2328;
    const double C19247 = C48418 * C2328;
    const double C25473 = C48418 * C2328;
    const double C30642 = C26137 * C2328;
    const double C41611 = C48678 * C2328;
    const double C46729 = C48421 * C2328;
    const double C2342 =
        (C47553 + be * C47580 + C47425 * C47584 + ae * C47424 * C47621 +
         C47424 *
             (ae * C47621 +
              C47424 * (C47452 + be * C47425 * C47509 +
                        C47425 * (be * C47509 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C9219 =
        (ae * (3 * C47621 +
               C47425 * (2 * C47617 +
                         C47425 * (C47541 +
                                   C47425 * (C47425 * C47432 * C47544 +
                                             C47702 * be) +
                                   C47425 * C47702 * be) +
                         C47704 * be) +
               (2 * C47616 + C47425 * C47704) * be) +
         C47424 * (3 * C47696 + be * C47697 +
                   C47425 * (2 * C47692 + be * C47693 +
                             C47425 * (C47685 + be * C47425 * C47686 +
                                       C47425 * (be * C47686 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C1754 =
        (3 * (C47530 + C47425 * C47612 + C47971 * be) +
         C47425 * (2 * C47612 + C47425 * C47621 + C47973 * be) +
         (2 * C47971 + C47425 * C47973) * be) /
        C47174;
    const double C1912 =
        (C47424 * (2 * C47612 + C47425 * C47621 + C47973 * be)) / C47174;
    const double C2332 =
        (C47530 + C47425 * C47612 + C47971 * be + C47621 * C47650) / C47174;
    const double C17660 =
        (4 * (2 * C48029 + C47424 * C48125 + C48030 * ae) +
         C47424 *
             (3 * C48125 +
              C47424 *
                  (2 * C48117 +
                   C47424 * (C47509 + C47424 * (C47424 * C47686 + C47702 * ae) +
                             C47424 * C47702 * ae) +
                   C48119 * ae) +
              C48124 * ae) +
         (3 * C48030 + C47424 * C48124) * ae) /
        C47174;
    const double C17899 =
        (4 * (2 * C48079 + C47424 * C48140 + C48080 * ae) +
         C47424 * (3 * C48140 +
                   C47424 * (2 * C48132 +
                             C47424 * (C47708 +
                                       C47424 * (C47424 * C47425 * C47512 +
                                                 C47752 * ae) +
                                       C47424 * C47752 * ae) +
                             C48134 * ae) +
                   C48139 * ae) +
         (3 * C48080 + C47424 * C48139) * ae) /
        C47174;
    const double C47745 = C47742 + C47743;
    const double C47796 = C47793 + C47794;
    const double C10996 = C48650 * C10100;
    const double C17411 = C48650 * C10100;
    const double C21613 = C48418 * C10100;
    const double C42345 = C48418 * C10100;
    const double C47157 = C26137 * C10100;
    const double C10990 = C48650 * C10096;
    const double C17405 = C48650 * C10096;
    const double C21609 = C48418 * C10096;
    const double C42341 = C48418 * C10096;
    const double C47151 = C26137 * C10096;
    const double C48162 = C48143 + C48160;
    const double C599 =
        (3 * C47450 + C47432 * C47461 + be * C47425 * C47518 +
         C47425 * (be * C47518 +
                   C47425 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C701 =
        (ae * (C47425 * (3 * C47491 +
                         C47432 * (2 * C47432 * C47489 +
                                   C47432 * (C47489 + C47453 * C47454 * C47480 *
                                                          C47440))) +
               (3 * (C47523 + C47525 * C47440) +
                C47432 * (2 * C47432 * C47525 +
                          C47432 * (C47525 + C47446 * C47445 * C47440))) *
                   be) +
         C47424 * (be * C47518 +
                   C47425 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C135 = (5 * (3 * C47501 + C47432 * C47506) +
                         C47432 * (4 * C47506 + C47432 * C47518)) /
                        C47174;
    const double C281 = (C47425 * (4 * C47506 + C47432 * C47518)) / C47174;
    const double C405 = (C47424 * (4 * C47506 + C47432 * C47518) +
                         (4 * (2 * C47559 + C47432 * C47562) +
                          C47432 * (3 * C47562 + C47432 * C47570)) *
                             ae) /
                        C47174;
    const double C594 =
        (3 * C47501 + C47432 * C47506 + C47518 * C47575) / C47174;
    const double C696 =
        (C47424 * C47425 * C47518 + C47425 * C47927 * ae) / C47174;
    const double C947 =
        (3 * C47501 + C47432 * C47506 +
         C47424 * (C47424 * C47518 + C47927 * ae) + C47424 * C47927 * ae) /
        C47174;
    const double C9367 =
        (5 * (3 * C47680 + be * C47681 + C47425 * C47725) +
         be * (4 * C47681 + C47425 * C47726) +
         C47425 *
             (4 * C47725 + be * C47726 +
              C47425 *
                  (3 * C47721 + be * C47722 +
                   C47425 * (2 * C47715 + be * C47717 +
                             C47425 * (C47457 + be * C47425 * C47512 +
                                       C47425 * (be * C47512 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C9453 =
        (ae * (4 * (2 * C47604 + C47425 * C47740 + C47700 * be) +
               C47425 * (3 * C47740 +
                         C47425 * (2 * C47732 +
                                   C47425 * (C47489 +
                                             C47425 * (C47425 * C47544 +
                                                       C47565 * be) +
                                             C47425 * C47565 * be) +
                                   C47734 * be) +
                         C47739 * be) +
               (3 * C47700 + C47425 * C47739) * be) +
         C47424 *
             (4 * C47725 + be * C47726 +
              C47425 *
                  (3 * C47721 + be * C47722 +
                   C47425 * (2 * C47715 + be * C47717 +
                             C47425 * (C47457 + be * C47425 * C47512 +
                                       C47425 * (be * C47512 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C9366 = (5 * (3 * C47578 + C47425 * C47681) +
                          C47425 * (4 * C47681 + C47425 * C47726)) /
                         C47174;
    const double C9452 = (C47424 * (4 * C47681 + C47425 * C47726) +
                          (4 * C48042 + C47425 * C48056) * ae) /
                         C47174;
    const double C9685 =
        (3 * C47578 + C47425 * C47681 +
         C47424 * (C47424 * C47726 + C48056 * ae) + C47424 * C48056 * ae) /
        C47174;
    const double C952 =
        (3 * C47450 + C47432 * C47461 + ae * C47424 * C47550 +
         C47424 * (ae * C47550 +
                   C47424 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C134 = (5 * (3 * C47533 + C47432 * C47538) +
                         C47432 * (4 * C47538 + C47432 * C47550)) /
                        C47174;
    const double C280 = (C47425 * (4 * C47538 + C47432 * C47550) +
                         (4 * (2 * C47559 + C47432 * C47562) +
                          C47432 * (3 * C47562 + C47432 * C47570)) *
                             be) /
                        C47174;
    const double C404 = (C47424 * (4 * C47538 + C47432 * C47550)) / C47174;
    const double C593 =
        (3 * C47533 + C47432 * C47538 +
         C47425 * (C47425 * C47550 + C47927 * be) + C47425 * C47927 * be) /
        C47174;
    const double C695 = (C47424 * (C47425 * C47550 + C47927 * be)) / C47174;
    const double C946 =
        (3 * C47533 + C47432 * C47538 + C47550 * C47650) / C47174;
    const double C2637 =
        (be * C47506 + C47425 * C47461 + ae * C47424 * C47638 +
         C47424 * (ae * C47638 +
                   C47424 * (be * C47516 +
                             C47425 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1277 =
        (2 * (C47425 * C47538 + C47922 * be) +
         C47425 * (C47538 + C47425 * C47638 + C47425 * C47570 * be) +
         (C47922 + C47570 * C47575) * be) /
        C47174;
    const double C1463 =
        (C47424 * (C47538 + C47425 * C47638 + C47425 * C47570 * be)) / C47174;
    const double C2635 =
        (C47425 * C47538 + C47922 * be + C47638 * C47650) / C47174;
    const double C47634 = C47633 + C47631;
    const double C47761 = C47749 + C47760;
    const double C47797 = C47740 + C47795;
    const double C17900 =
        (4 * (2 * C47789 + ae * C47790 + C47424 * C47845) +
         ae * (3 * C47790 + C47424 * C47846) +
         C47424 *
             (3 * C47845 + ae * C47846 +
              C47424 *
                  (2 * C47839 + ae * C47841 +
                   C47424 * (C47715 + ae * C47424 * C47755 +
                             C47424 * (ae * C47755 +
                                       C47424 * (be * C47512 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C17898 = (4 * (2 * C47785 + C47424 * C47790) +
                           C47424 * (3 * C47790 + C47424 * C47846)) /
                          C47174;
    const double C47778 = C47425 * C47777;
    const double C10101 =
        (2 * (ae * C47621 + C47424 * C47696) + ae * (C47621 + C47777 * C47650) +
         C47424 * (C47696 + ae * C47424 * C47777 +
                   C47424 * (ae * C47777 +
                             C47424 * (C47685 + be * C47425 * C47686 +
                                       C47425 * (be * C47686 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C10098 =
        (2 * C47424 * C47621 + C47424 * (C47621 + C47777 * C47650)) / C47174;
    const double C18138 =
        (5 * (3 * C47817 + ae * C47818 + C47424 * C47867) +
         ae * (4 * C47818 + C47424 * C47868) +
         C47424 *
             (4 * C47867 + ae * C47868 +
              C47424 *
                  (3 * C47863 + ae * C47864 +
                   C47424 * (2 * C47857 + ae * C47859 +
                             C47424 * (C47457 + ae * C47424 * C47544 +
                                       C47424 * (ae * C47544 +
                                                 C47424 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C18136 = (5 * (3 * C47653 + C47424 * C47818) +
                           C47424 * (4 * C47818 + C47424 * C47868)) /
                          C47174;
    const double C2486 = C2483 + C2480;
    const double C4983 = C4981 + C4972;
    const double C48691 = C48632 + C48683;
    const double C3787 = C48670 - (C48274 * C48257) / C47174;
    const double C106 = C48671 / C47210 - C48272 / C48639;
    const double C48684 = C48635 + C48670;
    const double C47254 = C47250 - C47231;
    const double C22130 = C22112 - C22113;
    const double C22128 = C22108 - C22109;
    const double C22126 = C22104 - C22105;
    const double C22124 = C22100 - C22101;
    const double C27488 = C22439 - C22438;
    const double C27895 = C22438 - C22439;
    const double C27486 = C22435 - C22434;
    const double C27893 = C22434 - C22435;
    const double C24906 = C22430 - C22431;
    const double C24898 = C22431 - C22430;
    const double C24904 = C22426 - C22427;
    const double C24896 = C22427 - C22426;
    const double C24910 = C24465 - C24464;
    const double C24902 = C24464 - C24465;
    const double C24908 = C24461 - C24460;
    const double C24900 = C24460 - C24461;
    const double C26014 = C24892 - C24893;
    const double C26012 = C24888 - C24889;
    const double C42706 = C26021 - C26020;
    const double C42704 = C26017 - C26016;
    const double C23299 = C48692 * C138;
    const double C23291 = C48692 * C126;
    const double C23282 = C48692 * C137;
    const double C23274 = C48692 * C124;
    const double C23445 = C48692 * C283;
    const double C23437 = C48692 * C272;
    const double C23591 = C48692 * C407;
    const double C23583 = C48692 * C396;
    const double C40866 = C48692 * C406;
    const double C40858 = C48692 * C394;
    const double C41241 = C48692 * C697;
    const double C41233 = C48692 * C687;
    const double C41615 = C48692 * C948;
    const double C41607 = C48692 * C938;
    const double C9029 =
        (C48685 + 2 * C48414) / C47210 - (C48692 * C48410) / C47174;
    const double C11136 = C11099 * C284;
    const double C11128 = C11099 * C274;
    const double C11119 = C11099 * C283;
    const double C11111 = C11099 * C272;
    const double C11282 = C11099 * C596;
    const double C11274 = C11099 * C587;
    const double C11428 = C11099 * C698;
    const double C11420 = C11099 * C689;
    const double C14151 = C11099 * C697;
    const double C14143 = C11099 * C687;
    const double C14526 = C11099 * C1465;
    const double C14518 = C11099 * C1457;
    const double C14900 = C11099 * C2339;
    const double C14892 = C11099 * C2327;
    const double C1118 = C1116 + C1114;
    const double C1117 = C1115 + C1111;
    const double C32306 = C32302 + C32298;
    const double C32304 = C32300 + C32292;
    const double C32305 = C32301 + C32295;
    const double C32303 = C32299 + C32289;
    const double C23301 = C48688 * C284;
    const double C23293 = C48688 * C274;
    const double C23284 = C48688 * C283;
    const double C23276 = C48688 * C272;
    const double C23447 = C48688 * C596;
    const double C23439 = C48688 * C587;
    const double C23593 = C48688 * C698;
    const double C23585 = C48688 * C689;
    const double C40868 = C48688 * C697;
    const double C40860 = C48688 * C687;
    const double C41243 = C48688 * C1465;
    const double C41235 = C48688 * C1457;
    const double C41617 = C48688 * C2339;
    const double C41609 = C48688 * C2327;
    const double C9030 =
        (C48673 + 2 * C48421 + C48692) / C47210 - (C48688 * C48410) / C47174;
    const double C9031 = (C48650 + C48418 / C47174 + C48688) / C47210 -
                         (C48678 * C48410) / C47174;
    const double C7820 = C7818 + C7816;
    const double C7819 = C7817 + C7813;
    const double C12714 = C12710 + C12706;
    const double C12712 = C12708 + C12700;
    const double C12713 = C12709 + C12703;
    const double C12711 = C12707 + C12697;
    const double C47341 = C47337 - C47318;
    const double C30760 = C30755 + C30756;
    const double C30759 = C30751 + C30752;
    const double C34607 = C34603 + C34604;
    const double C17477 =
        (C48686 + 2 * C48456) / C47210 - (C48693 * C48452) / C47174;
    const double C17478 =
        (C48675 + 2 * C48463 + C48693) / C47210 - (C48690 * C48452) / C47174;
    const double C17479 = (C48653 + C48460 / C47174 + C48690) / C47210 -
                          (C48681 * C48452) / C47174;
    const double C15029 = C15028 + C15024;
    const double C3842 = C3839 + C3840;
    const double C4984 = C4982 + C4980;
    const double C6124 = C6119 + C6122;
    const double C10984 = C10125 - C10126;
    const double C17399 = C16552 - C16553;
    const double C47145 = C30648 - C30647;
    const double C10981 = C10119 - C10120;
    const double C17396 = C16546 - C16547;
    const double C47142 = C30642 - C30641;
    const double C10138 = C48650 * C2342;
    const double C16565 = C48650 * C2342;
    const double C18495 = C48418 * C2342;
    const double C24685 = C48418 * C2342;
    const double C29548 = C26137 * C2342;
    const double C11278 = C48660 * C1754;
    const double C23443 = C48660 * C1754;
    const double C11424 = C48660 * C1912;
    const double C12494 = C48650 * C1912;
    const double C23589 = C48660 * C1912;
    const double C29312 = C26137 * C1912;
    const double C32086 = C48650 * C1912;
    const double C10132 = C48650 * C2332;
    const double C16559 = C48650 * C2332;
    const double C18491 = C48418 * C2332;
    const double C24681 = C48418 * C2332;
    const double C29542 = C26137 * C2332;
    const double C47746 = C47745 + C47744;
    const double C48163 = C48162 + C48147;
    const double C2344 =
        (C47450 + be * C47587 + C47425 * C47591 + ae * C47424 * C47634 +
         C47424 * (ae * C47634 +
                   C47424 * (C47459 + be * C47425 * C47514 +
                             C47425 * (be * C47514 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1756 =
        (3 * (C47533 + C47425 * C47625 + C47976 * be) +
         C47425 * (2 * C47625 + C47425 * C47634 + C47978 * be) +
         (2 * C47976 + C47425 * C47978) * be) /
        C47174;
    const double C1914 =
        (C47424 * (2 * C47625 + C47425 * C47634 + C47978 * be)) / C47174;
    const double C2336 =
        (C47533 + C47425 * C47625 + C47976 * be + C47634 * C47650) / C47174;
    const double C47762 = C47761 + C47753;
    const double C10977 =
        (3 * (C47680 + ae * C47792 + C47424 * C47796) +
         ae * (2 * C47792 + C47424 * C47797) +
         C47424 *
             (2 * C47796 + ae * C47797 +
              C47424 *
                  (C47721 + ae * C47424 * C47759 +
                   C47424 * (ae * C47759 +
                             C47424 * (C47457 + be * C47425 * C47512 +
                                       C47425 * (be * C47512 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C10973 = (3 * (C47608 + C47740 * C47650) +
                           C47424 * (2 * C47792 + C47424 * C47797)) /
                          C47174;
    const double C47779 = C47767 + C47778;
    const double C2487 = C2486 + C2484;
    const double C103 =
        (C48682 + 2 * C48266) / C47210 - (C48691 * C48257) / C47174;
    const double C104 =
        (C48669 + 2 * C48274 + C48691) / C47210 - (C48684 * C48257) / C47174;
    const double C105 = (C48637 + C48271 / C47174 + C48684) / C47210 -
                        (C48671 * C48257) / C47174;
    const double C47260 = C47254 / C47210;
    const double C47259 = C47172 * C47254;
    const double C22135 = C22130 + C22131;
    const double C22134 = C22128 + C22129;
    const double C22133 = C22126 + C22127;
    const double C22132 = C22124 + C22125;
    const double C27492 = C27488 + C27489;
    const double C27898 = C27895 + C27896;
    const double C27491 = C27486 + C27487;
    const double C27897 = C27893 + C27894;
    const double C24925 = C24906 + C24907;
    const double C24921 = C24898 + C24899;
    const double C24924 = C24904 + C24905;
    const double C24920 = C24896 + C24897;
    const double C24927 = C24910 + C24911;
    const double C24923 = C24902 + C24903;
    const double C24926 = C24908 + C24909;
    const double C24922 = C24900 + C24901;
    const double C26025 = C26014 + C26015;
    const double C26024 = C26012 + C26013;
    const double C42717 = C42706 + C42707;
    const double C42716 = C42704 + C42705;
    const double C1120 = C1118 * C48373;
    const double C1119 = C1117 * C114;
    const double C7822 = C7820 * C48373;
    const double C7821 = C7819 * C114;
    const double C47347 = C47341 / C47210;
    const double C47346 = C47191 * C47341;
    const double C30762 = C30760 + C30757;
    const double C30761 = C30759 + C30753;
    const double C34608 = C34607 + C34605;
    const double C15030 = C15029 + C15025;
    const double C6125 = C6124 + C6123;
    const double C11000 = C10998 + C10984;
    const double C17415 = C17413 + C17399;
    const double C10999 = C10997 + C10981;
    const double C17414 = C17412 + C17396;
    const double C9686 =
        (2 * C47576 + be * C47578 + C47425 * C47680 + ae * C47424 * C47746 +
         C47424 * (ae * C47746 + C47424 * C47725)) /
        C47176;
    const double C9124 =
        (4 * (2 * C47599 + C47425 * C47608 + C47968 * be) +
         C47425 * (3 * C47608 + C47425 * C47746 + C48042 * be) +
         (3 * C47968 + C47425 * C48042) * be) /
        C47174;
    const double C9214 =
        (C47424 * (3 * C47608 + C47425 * C47746 + C48042 * be)) / C47174;
    const double C9682 =
        (2 * C47599 + C47425 * C47608 + C47968 * be + C47746 * C47650) / C47174;
    const double C18137 =
        (5 * (3 * C48110 + C47424 * C48163 + C48109 * ae) +
         C47424 * (4 * C48163 +
                   C47424 * (3 * C48158 +
                             C47424 * (2 * C48150 +
                                       C47424 * (C47474 +
                                                 C47424 * (C47424 * C47512 +
                                                           C47565 * ae) +
                                                 C47424 * C47565 * ae) +
                                       C48152 * ae) +
                             C48157 * ae) +
                   C48161 * ae) +
         (4 * C48109 + C47424 * C48161) * ae) /
        C47174;
    const double C47763 = C47425 * C47762;
    const double C10543 =
        (2 * (ae * C47746 + C47424 * C47725) + ae * (C47746 + C47762 * C47650) +
         C47424 *
             (C47725 + ae * C47424 * C47762 +
              C47424 *
                  (ae * C47762 +
                   C47424 * (2 * C47715 + be * C47717 +
                             C47425 * (C47457 + be * C47425 * C47512 +
                                       C47425 * (be * C47512 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C10541 =
        (2 * C47424 * C47746 + C47424 * (C47746 + C47762 * C47650)) / C47174;
    const double C47780 = C47779 + C47771;
    const double C2488 = C2487 + C2485;
    const double C47265 = C47260 - C47261;
    const double C47264 = C47259 + C48617;
    const double C22139 = C22135 * C48373;
    const double C22138 = C22134 * C114;
    const double C22137 = C22133 * C48373;
    const double C27485 = C22133 * C48618;
    const double C39038 = C22133 * C30746;
    const double C22136 = C22132 * C114;
    const double C27484 = C22132 * C4966;
    const double C39037 = C22132 * C30748;
    const double C27494 = C27492 * C48460;
    const double C39040 = C27492 * C48460;
    const double C27493 = C27491 * C4967;
    const double C39039 = C27491 * C30749;
    const double C1121 = C1119 + C1120;
    const double C7823 = C7821 + C7822;
    const double C47352 = C47347 - C47348;
    const double C47351 = C47346 + C48618;
    const double C30764 = C30762 + C30758;
    const double C30763 = C30761 + C30754;
    const double C34609 = C34608 + C34606;
    const double C15031 = C15030 + C15026;
    const double C10568 = C48650 * C9686;
    const double C14904 = C48660 * C9686;
    const double C16991 = C48650 * C9686;
    const double C41621 = C48660 * C9686;
    const double C46737 = C26137 * C9686;
    const double C14522 = C48660 * C9214;
    const double C41239 = C48660 * C9214;
    const double C10562 = C48650 * C9682;
    const double C14896 = C48660 * C9682;
    const double C16985 = C48650 * C9682;
    const double C41613 = C48660 * C9682;
    const double C46731 = C26137 * C9682;
    const double C47764 = C47748 + C47763;
    const double C9947 =
        (2 * C47584 + be * C47585 + C47425 * C47696 + ae * C47424 * C47780 +
         C47424 * (ae * C47780 +
                   C47424 * (2 * C47692 + be * C47693 +
                             C47425 * (C47685 + be * C47425 * C47686 +
                                       C47425 * (be * C47686 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C9126 =
        (4 * (2 * C47612 + C47425 * C47621 + C47973 * be) +
         C47425 * (3 * C47621 + C47425 * C47780 + C48047 * be) +
         (3 * C47973 + C47425 * C48047) * be) /
        C47174;
    const double C9216 =
        (C47424 * (3 * C47621 + C47425 * C47780 + C48047 * be)) / C47174;
    const double C9945 =
        (2 * C47612 + C47425 * C47621 + C47973 * be + C47780 * C47650) / C47174;
    const double C26177 = C47265 * C277;
    const double C26171 = C47265 * C267;
    const double C26166 = C47265 * C275;
    const double C26160 = C47265 * C266;
    const double C26154 = C47265 * C273;
    const double C26148 = C47265 * C265;
    const double C26360 = C47265 * C590;
    const double C26354 = C47265 * C582;
    const double C26348 = C47265 * C588;
    const double C26342 = C47265 * C581;
    const double C26530 = C47265 * C692;
    const double C26524 = C47265 * C684;
    const double C26518 = C47265 * C690;
    const double C26512 = C47265 * C683;
    const double C29315 = C47265 * C1460;
    const double C29309 = C47265 * C1454;
    const double C29545 = C47265 * C2333;
    const double C29539 = C47265 * C2323;
    const double C29522 = C47265 * C688;
    const double C29516 = C47265 * C682;
    const double C30099 = C47265 * C1458;
    const double C30093 = C47265 * C1453;
    const double C30645 = C47265 * C2329;
    const double C30639 = C47265 * C2321;
    const double C46734 = C47265 * C2330;
    const double C46728 = C47265 * C2322;
    const double C47154 = C47265 * C3250;
    const double C47148 = C47265 * C3246;
    const double C9038 =
        (C47265 / C47210 + ((C47172 * C47279 + C26137) * ae) / C47174) /
            C47210 -
        ((C47172 * (C47279 / C47210 + (0 * ae) / C47174) + C48660) * be) /
            C47174;
    const double C11106 =
        C47265 / C47210 - ((C47172 * C47279 + C26137) * be) / C47174;
    const double C23271 =
        C47265 / C47210 + ((C47172 * C47279 + C26137) * ae) / C47174;
    const double C47268 = C47264 * be;
    const double C22141 = C22138 + C22139;
    const double C22140 = C22136 + C22137;
    const double C27490 = C27484 + C27485;
    const double C39041 = C39037 + C39038;
    const double C36184 = C2468 * C47352;
    const double C17485 =
        (C47352 / C47210 + ((C47191 * C47366 + C36177) * ae) / C47174) /
            C47210 -
        ((C47191 * (C47366 / C47210 + (0 * ae) / C47174) + C48666) * be) /
            C47174;
    const double C19903 =
        C47352 / C47210 - ((C47191 * C47366 + C36177) * be) / C47174;
    const double C33478 =
        C47352 / C47210 + ((C47191 * C47366 + C36177) * ae) / C47174;
    const double C47355 = C47351 * be;
    const double C47765 = C47764 + C47754;
    const double C26185 = C26165 - C26166;
    const double C26182 = C26159 - C26160;
    const double C29535 = C26518 - C26519;
    const double C29529 = C26519 - C26518;
    const double C29532 = C26512 - C26513;
    const double C29526 = C26513 - C26512;
    const double C47144 = C30646 - C30645;
    const double C47141 = C30640 - C30639;
    const double C11137 = C11106 * C590;
    const double C11129 = C11106 * C582;
    const double C11122 = C11106 * C588;
    const double C11114 = C11106 * C581;
    const double C11283 = C11106 * C1274;
    const double C11275 = C11106 * C1268;
    const double C11429 = C11106 * C1460;
    const double C11421 = C11106 * C1454;
    const double C14154 = C11106 * C1458;
    const double C14146 = C11106 * C1453;
    const double C14527 = C11106 * C1911;
    const double C14519 = C11106 * C1907;
    const double C14901 = C11106 * C2330;
    const double C14893 = C11106 * C2322;
    const double C23302 = C23271 * C590;
    const double C23294 = C23271 * C582;
    const double C23287 = C23271 * C588;
    const double C23279 = C23271 * C581;
    const double C23448 = C23271 * C1274;
    const double C23440 = C23271 * C1268;
    const double C23594 = C23271 * C1460;
    const double C23586 = C23271 * C1454;
    const double C40871 = C23271 * C1458;
    const double C40863 = C23271 * C1453;
    const double C41244 = C23271 * C1911;
    const double C41236 = C23271 * C1907;
    const double C41618 = C23271 * C2330;
    const double C41610 = C23271 * C2322;
    const double C47270 = C47268 / C47174;
    const double C27495 = C27490 + C27493;
    const double C39042 = C39041 + C39039;
    const double C47357 = C47355 / C47174;
    const double C9687 =
        (3 * C47680 + be * C47681 + C47425 * C47725 + ae * C47424 * C47765 +
         C47424 *
             (ae * C47765 +
              C47424 *
                  (3 * C47721 + be * C47722 +
                   C47425 * (2 * C47715 + be * C47717 +
                             C47425 * (C47457 + be * C47425 * C47512 +
                                       C47425 * (be * C47512 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C9365 =
        (5 * (3 * C47608 + C47425 * C47746 + C48042 * be) +
         C47425 * (4 * C47746 + C47425 * C47765 + C48056 * be) +
         (4 * C48042 + C47425 * C48056) * be) /
        C47174;
    const double C9451 =
        (C47424 * (4 * C47746 + C47425 * C47765 + C48056 * be)) / C47174;
    const double C9683 =
        (3 * C47608 + C47425 * C47746 + C48042 * be + C47765 * C47650) / C47174;
    const double C47272 = C47258 - C47270;
    const double C27496 = C27495 + C27494;
    const double C39043 = C39042 + C39040;
    const double C47359 = C47345 - C47357;
    const double C47273 = C47272 + C47243;
    const double C47360 = C47359 + C47330;
    const double C26175 = C47273 * C129;
    const double C26169 = C47273 * C118;
    const double C26164 = C47273 * C127;
    const double C26158 = C47273 * C117;
    const double C26152 = C47273 * C125;
    const double C26146 = C47273 * C116;
    const double C26358 = C47273 * C275;
    const double C26352 = C47273 * C266;
    const double C26346 = C47273 * C273;
    const double C26340 = C47273 * C265;
    const double C26528 = C47273 * C399;
    const double C26522 = C47273 * C390;
    const double C26516 = C47273 * C397;
    const double C26510 = C47273 * C389;
    const double C29313 = C47273 * C690;
    const double C29307 = C47273 * C683;
    const double C29543 = C47273 * C941;
    const double C29537 = C47273 * C934;
    const double C29520 = C47273 * C395;
    const double C29514 = C47273 * C388;
    const double C30097 = C47273 * C688;
    const double C30091 = C47273 * C682;
    const double C30643 = C47273 * C939;
    const double C30637 = C47273 * C933;
    const double C46732 = C47273 * C2329;
    const double C46726 = C47273 * C2321;
    const double C47152 = C47273 * C2805;
    const double C47146 = C47273 * C2800;
    const double C9035 =
        (((((0 - (C47172 * C47226) / C47174) * ae) / C47174 -
           (0 * be) / C47178 + (2 * C47227) / C47174) /
              C47210 -
          ((C47172 * C47262 + 0) * be) / C47174 + C47236 - C47249) /
             C47210 +
         ((C47172 * C47271 + 0) * ae) / C47174) /
            C47210 -
        ((C47172 * (C47271 / C47210 +
                    ((C47172 * C47273 + C48414) * ae) / C47174 + C47265) +
          C48692) *
         be) /
            C47174 +
        C47273 / C47210 + ((C47172 * C47265 + C48421) * ae) / C47174 +
        2 * (C47243 / C47210 - (0 * be) / C47174);
    const double C9036 =
        (C47271 / C47210 + ((C47172 * C47273 + C48414) * ae) / C47174 +
         C47265) /
            C47210 -
        ((C47172 * (C47273 / C47210 +
                    ((C47172 * C47265 + C48421) * ae) / C47174 + 2 * C47279) +
          C48688) *
         be) /
            C47174 +
        2 * (C47265 / C47210 + ((C47172 * C47279 + C26137) * ae) / C47174);
    const double C9037 =
        (C47273 / C47210 + ((C47172 * C47265 + C48421) * ae) / C47174 +
         2 * C47279) /
            C47210 -
        ((C47172 *
              (C47265 / C47210 + ((C47172 * C47279 + C26137) * ae) / C47174) +
          C48678) *
         be) /
            C47174 +
        3 * (C47279 / C47210 + (0 * ae) / C47174);
    const double C11104 =
        C47271 / C47210 - ((C47172 * C47273 + C48414) * be) / C47174 + C47265;
    const double C11105 = C47273 / C47210 -
                          ((C47172 * C47265 + C48421) * be) / C47174 +
                          2 * C47279;
    const double C23269 =
        C47271 / C47210 + ((C47172 * C47273 + C48414) * ae) / C47174 + C47265;
    const double C23270 = C47273 / C47210 +
                          ((C47172 * C47265 + C48421) * ae) / C47174 +
                          2 * C47279;
    const double C36182 = C164 * C47360;
    const double C17482 =
        (((((0 - (C47191 * C47313) / C47174) * ae) / C47174 -
           (0 * be) / C47178 + (2 * C47314) / C47174) /
              C47210 -
          ((C47191 * C47349 + 0) * be) / C47174 + C47323 - C47336) /
             C47210 +
         ((C47191 * C47358 + 0) * ae) / C47174) /
            C47210 -
        ((C47191 * (C47358 / C47210 +
                    ((C47191 * C47360 + C48456) * ae) / C47174 + C47352) +
          C48693) *
         be) /
            C47174 +
        C47360 / C47210 + ((C47191 * C47352 + C48463) * ae) / C47174 +
        2 * (C47330 / C47210 - (0 * be) / C47174);
    const double C17483 =
        (C47358 / C47210 + ((C47191 * C47360 + C48456) * ae) / C47174 +
         C47352) /
            C47210 -
        ((C47191 * (C47360 / C47210 +
                    ((C47191 * C47352 + C48463) * ae) / C47174 + 2 * C47366) +
          C48690) *
         be) /
            C47174 +
        2 * (C47352 / C47210 + ((C47191 * C47366 + C36177) * ae) / C47174);
    const double C17484 =
        (C47360 / C47210 + ((C47191 * C47352 + C48463) * ae) / C47174 +
         2 * C47366) /
            C47210 -
        ((C47191 *
              (C47352 / C47210 + ((C47191 * C47366 + C36177) * ae) / C47174) +
          C48681) *
         be) /
            C47174 +
        3 * (C47366 / C47210 + (0 * ae) / C47174);
    const double C19901 =
        C47358 / C47210 - ((C47191 * C47360 + C48456) * be) / C47174 + C47352;
    const double C19902 = C47360 / C47210 -
                          ((C47191 * C47352 + C48463) * be) / C47174 +
                          2 * C47366;
    const double C33476 =
        C47358 / C47210 + ((C47191 * C47360 + C48456) * ae) / C47174 + C47352;
    const double C33477 = C47360 / C47210 +
                          ((C47191 * C47352 + C48463) * ae) / C47174 +
                          2 * C47366;
    const double C26184 = C26163 - C26164;
    const double C26181 = C26157 - C26158;
    const double C29534 = C26516 - C26517;
    const double C29528 = C26517 - C26516;
    const double C29531 = C26510 - C26511;
    const double C29525 = C26511 - C26510;
    const double C47143 = C30644 - C30643;
    const double C47140 = C30638 - C30637;
    const double C11133 = C11104 * C127;
    const double C11125 = C11104 * C117;
    const double C11118 = C11104 * C125;
    const double C11110 = C11104 * C116;
    const double C11279 = C11104 * C273;
    const double C11271 = C11104 * C265;
    const double C11425 = C11104 * C397;
    const double C11417 = C11104 * C389;
    const double C14150 = C11104 * C395;
    const double C14142 = C11104 * C388;
    const double C14523 = C11104 * C688;
    const double C14515 = C11104 * C682;
    const double C14897 = C11104 * C939;
    const double C14889 = C11104 * C933;
    const double C11135 = C11105 * C275;
    const double C11127 = C11105 * C266;
    const double C11120 = C11105 * C273;
    const double C11112 = C11105 * C265;
    const double C11281 = C11105 * C588;
    const double C11273 = C11105 * C581;
    const double C11427 = C11105 * C690;
    const double C11419 = C11105 * C683;
    const double C14152 = C11105 * C688;
    const double C14144 = C11105 * C682;
    const double C14525 = C11105 * C1458;
    const double C14517 = C11105 * C1453;
    const double C14899 = C11105 * C2329;
    const double C14891 = C11105 * C2321;
    const double C23298 = C23269 * C127;
    const double C23290 = C23269 * C117;
    const double C23283 = C23269 * C125;
    const double C23275 = C23269 * C116;
    const double C23444 = C23269 * C273;
    const double C23436 = C23269 * C265;
    const double C23590 = C23269 * C397;
    const double C23582 = C23269 * C389;
    const double C40867 = C23269 * C395;
    const double C40859 = C23269 * C388;
    const double C41240 = C23269 * C688;
    const double C41232 = C23269 * C682;
    const double C41614 = C23269 * C939;
    const double C41606 = C23269 * C933;
    const double C23300 = C23270 * C275;
    const double C23292 = C23270 * C266;
    const double C23285 = C23270 * C273;
    const double C23277 = C23270 * C265;
    const double C23446 = C23270 * C588;
    const double C23438 = C23270 * C581;
    const double C23592 = C23270 * C690;
    const double C23584 = C23270 * C683;
    const double C40869 = C23270 * C688;
    const double C40861 = C23270 * C682;
    const double C41242 = C23270 * C1458;
    const double C41234 = C23270 * C1453;
    const double C41616 = C23270 * C2329;
    const double C41608 = C23270 * C2321;
    const double C36188 = C36182 + C36183;
    const double C26188 = C26184 + C26185;
    const double C26187 = C26181 + C26182;
    const double C29552 = C29534 + C29535;
    const double C29550 = C29528 + C29529;
    const double C29551 = C29531 + C29532;
    const double C29549 = C29525 + C29526;
    const double C47159 = C47143 + C47144;
    const double C47158 = C47140 + C47141;
    const double C36189 = C36188 + C36184;
    const double C26190 = C26188 + C26186;
    const double C26189 = C26187 + C26183;
    const double C29556 = C29552 + C29536;
    const double C29554 = C29550 + C29530;
    const double C29555 = C29551 + C29533;
    const double C29553 = C29549 + C29527;
    const double C47161 = C47159 + C47145;
    const double C47160 = C47158 + C47142;
    const double C36190 = C36189 + C36185;
    const double C26192 = C26190 * C48373;
    const double C26191 = C26189 * C114;
    const double C36191 = C36190 + C36186;
    const double C26193 = C26191 + C26192;
    const double C36192 = C36191 + C36187;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C114 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48373) *
               C48266 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
               C48274 +
           C26193 * C26140) *
              C48345 * C48328 * C110 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C114 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48373) *
               C48266 +
           ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C114 +
            (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48373) *
               C48274 +
           ((C26169 - C26170 + C26171 - C26172 + C26173 - C26174) * C114 +
            (C26175 - C26176 + C26177 - C26178 + C26179 - C26180) * C48373) *
               C26140) *
              C48345 * C48328 * C111 +
          (C26193 * C48266 +
           ((C26170 - C26169 + C26172 - C26171 + C26174 - C26173) * C114 +
            (C26176 - C26175 + C26178 - C26177 + C26180 - C26179) * C48373) *
               C48274 +
           ((C48414 * C130 - C47273 * C119 + C48421 * C278 - C47265 * C268 +
             C26137 * C593 - C47279 * C584) *
                C114 +
            (C48414 * C140 - C47273 * C131 + C48421 * C286 - C47265 * C279 +
             C26137 * C599 - C47279 * C594) *
                C48373) *
               C26140) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C114 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48373) *
                C48266 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
                C48274 +
            C26193 * C26140) *
               C48345 * C260 +
           (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C114 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48373) *
                C48266 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C114 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48373) *
                C48274 +
            ((C26352 - C26353 + C26354 - C26355 + C26356 - C26357) * C114 +
             (C26358 - C26359 + C26360 - C26361 + C26362 - C26363) * C48373) *
                C26140) *
               C48345 * C48645) *
              C262 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C114 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48373) *
                C48266 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C114 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48373) *
                C48274 +
            ((C26169 - C26170 + C26171 - C26172 + C26173 - C26174) * C114 +
             (C26175 - C26176 + C26177 - C26178 + C26179 - C26180) * C48373) *
                C26140) *
               C48345 * C260 +
           (((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C114 +
             (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C48373) *
                C48266 +
            ((C26353 - C26352 + C26355 - C26354 + C26357 - C26356) * C114 +
             (C26359 - C26358 + C26361 - C26360 + C26363 - C26362) * C48373) *
                C48274 +
            ((C48414 * C276 - C47273 * C267 + C48421 * C591 - C47265 * C583 +
              C26137 * C1277 - C47279 * C1270) *
                 C114 +
             (C48414 * C285 - C47273 * C277 + C48421 * C598 - C47265 * C592 +
              C26137 * C1282 - C47279 * C1278) *
                 C48373) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C114 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48373) *
                C48266 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
                C48274 +
            C26193 * C26140) *
               C386 +
           (((C47273 * C388 - C48414 * C394 + C47265 * C682 - C48421 * C687 +
              C47279 * C1453 - C26137 * C1457) *
                 C114 +
             (C47273 * C395 - C48414 * C406 + C47265 * C688 - C48421 * C697 +
              C47279 * C1458 - C26137 * C1465) *
                 C48373) *
                C48266 +
            ((C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C114 +
             (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48373) *
                C48274 +
            ((C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C114 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48373) *
                C26140) *
               C48647) *
              C48328 * C262 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C114 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48373) *
                C48266 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C114 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48373) *
                C48274 +
            ((C26169 - C26170 + C26171 - C26172 + C26173 - C26174) * C114 +
             (C26175 - C26176 + C26177 - C26178 + C26179 - C26180) * C48373) *
                C26140) *
               C386 +
           (((C26511 - C26510 + C26513 - C26512 + C26515 - C26514) * C114 +
             (C26517 - C26516 + C26519 - C26518 + C26521 - C26520) * C48373) *
                C48266 +
            ((C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C114 +
             (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48373) *
                C48274 +
            ((C48414 * C400 - C47273 * C391 + C48421 * C693 - C47265 * C685 +
              C26137 * C1463 - C47279 * C1456) *
                 C114 +
             (C48414 * C409 - C47273 * C401 + C48421 * C700 - C47265 * C694 +
              C26137 * C1468 - C47279 * C1464) *
                 C48373) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C114 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48373) *
                C48266 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
                C48274 +
            C26193 * C26140) *
               C48345 * C510 +
           (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C114 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48373) *
                C48266 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C114 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48373) *
                C48274 +
            ((C26352 - C26353 + C26354 - C26355 + C26356 - C26357) * C114 +
             (C26358 - C26359 + C26360 - C26361 + C26362 - C26363) * C48373) *
                C26140) *
               C48345 * C48645) *
              C512 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C114 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48373) *
                C48266 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C114 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48373) *
                C48274 +
            ((C26169 - C26170 + C26171 - C26172 + C26173 - C26174) * C114 +
             (C26175 - C26176 + C26177 - C26178 + C26179 - C26180) * C48373) *
                C26140) *
               C48345 * C510 +
           (((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C114 +
             (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C48373) *
                C48266 +
            ((C26353 - C26352 + C26355 - C26354 + C26357 - C26356) * C114 +
             (C26359 - C26358 + C26361 - C26360 + C26363 - C26362) * C48373) *
                C48274 +
            ((C48414 * C276 - C47273 * C267 + C48421 * C591 - C47265 * C583 +
              C26137 * C1277 - C47279 * C1270) *
                 C114 +
             (C48414 * C285 - C47273 * C277 + C48421 * C598 - C47265 * C592 +
              C26137 * C1282 - C47279 * C1278) *
                 C48373) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C114 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48373) *
               C48266 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
               C48274 +
           C26193 * C26140) *
              C48345 * C576 +
          (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C114 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C48373) *
               C48266 +
           ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C114 +
            (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48373) *
               C48274 +
           ((C26352 - C26353 + C26354 - C26355 + C26356 - C26357) * C114 +
            (C26358 - C26359 + C26360 - C26361 + C26362 - C26363) * C48373) *
               C26140) *
              C48345 * C577 +
          (((C48414 * C585 - C47273 * C580 + C48421 * C1271 - C47265 * C1267 +
             C26137 * C1752 - C47279 * C1749) *
                C114 +
            (C48414 * C595 - C47273 * C586 + C48421 * C1279 - C47265 * C1272 +
             C26137 * C1758 - C47279 * C1753) *
                C48373) *
               C48266 +
           ((C48414 * C587 - C47273 * C581 + C48421 * C1273 - C47265 * C1268 +
             C26137 * C1754 - C47279 * C1750) *
                C114 +
            (C48414 * C596 - C47273 * C588 + C48421 * C1280 - C47265 * C1274 +
             C26137 * C1759 - C47279 * C1755) *
                C48373) *
               C48274 +
           ((C48414 * C589 - C47273 * C582 + C48421 * C1275 - C47265 * C1269 +
             C26137 * C1756 - C47279 * C1751) *
                C114 +
            (C48414 * C597 - C47273 * C590 + C48421 * C1281 - C47265 * C1276 +
             C26137 * C1760 - C47279 * C1757) *
                C48373) *
               C26140) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C114 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48373) *
                C48266 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
                C48274 +
            C26193 * C26140) *
               C386 +
           (((C47273 * C388 - C48414 * C394 + C47265 * C682 - C48421 * C687 +
              C47279 * C1453 - C26137 * C1457) *
                 C114 +
             (C47273 * C395 - C48414 * C406 + C47265 * C688 - C48421 * C697 +
              C47279 * C1458 - C26137 * C1465) *
                 C48373) *
                C48266 +
            ((C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C114 +
             (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48373) *
                C48274 +
            ((C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C114 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48373) *
                C26140) *
               C48647) *
              C510 +
          ((((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C114 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48373) *
                C48266 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C114 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48373) *
                C48274 +
            ((C26352 - C26353 + C26354 - C26355 + C26356 - C26357) * C114 +
             (C26358 - C26359 + C26360 - C26361 + C26362 - C26363) * C48373) *
                C26140) *
               C386 +
           (((C48414 * C687 - C47273 * C682 + C48421 * C1457 - C47265 * C1453 +
              C26137 * C1910 - C47279 * C1907) *
                 C114 +
             (C48414 * C697 - C47273 * C688 + C48421 * C1465 - C47265 * C1458 +
              C26137 * C1916 - C47279 * C1911) *
                 C48373) *
                C48266 +
            ((C48414 * C689 - C47273 * C683 + C48421 * C1459 - C47265 * C1454 +
              C26137 * C1912 - C47279 * C1908) *
                 C114 +
             (C48414 * C698 - C47273 * C690 + C48421 * C1466 - C47265 * C1460 +
              C26137 * C1917 - C47279 * C1913) *
                 C48373) *
                C48274 +
            ((C48414 * C691 - C47273 * C684 + C48421 * C1461 - C47265 * C1455 +
              C26137 * C1914 - C47279 * C1909) *
                 C114 +
             (C48414 * C699 - C47273 * C692 + C48421 * C1467 - C47265 * C1462 +
              C26137 * C1918 - C47279 * C1915) *
                 C48373) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C114 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48373) *
                C48266 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
                C48274 +
            C26193 * C26140) *
               C784 +
           (((C47273 * C388 - C48414 * C394 + C47265 * C682 - C48421 * C687 +
              C47279 * C1453 - C26137 * C1457) *
                 C114 +
             (C47273 * C395 - C48414 * C406 + C47265 * C688 - C48421 * C697 +
              C47279 * C1458 - C26137 * C1465) *
                 C48373) *
                C48266 +
            ((C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C114 +
             (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48373) *
                C48274 +
            ((C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C114 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48373) *
                C26140) *
               C48647) *
              C48328 * C512 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C114 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48373) *
                C48266 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C114 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48373) *
                C48274 +
            ((C26169 - C26170 + C26171 - C26172 + C26173 - C26174) * C114 +
             (C26175 - C26176 + C26177 - C26178 + C26179 - C26180) * C48373) *
                C26140) *
               C784 +
           (((C26511 - C26510 + C26513 - C26512 + C26515 - C26514) * C114 +
             (C26517 - C26516 + C26519 - C26518 + C26521 - C26520) * C48373) *
                C48266 +
            ((C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C114 +
             (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48373) *
                C48274 +
            ((C48414 * C400 - C47273 * C391 + C48421 * C693 - C47265 * C685 +
              C26137 * C1463 - C47279 * C1456) *
                 C114 +
             (C48414 * C409 - C47273 * C401 + C48421 * C700 - C47265 * C694 +
              C26137 * C1468 - C47279 * C1464) *
                 C48373) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C114 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48373) *
                C48266 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
                C48274 +
            C26193 * C26140) *
               C784 +
           (((C47273 * C388 - C48414 * C394 + C47265 * C682 - C48421 * C687 +
              C47279 * C1453 - C26137 * C1457) *
                 C114 +
             (C47273 * C395 - C48414 * C406 + C47265 * C688 - C48421 * C697 +
              C47279 * C1458 - C26137 * C1465) *
                 C48373) *
                C48266 +
            ((C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C114 +
             (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48373) *
                C48274 +
            ((C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C114 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48373) *
                C26140) *
               C48647) *
              C260 +
          ((((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C114 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48373) *
                C48266 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C114 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48373) *
                C48274 +
            ((C26352 - C26353 + C26354 - C26355 + C26356 - C26357) * C114 +
             (C26358 - C26359 + C26360 - C26361 + C26362 - C26363) * C48373) *
                C26140) *
               C784 +
           (((C48414 * C687 - C47273 * C682 + C48421 * C1457 - C47265 * C1453 +
              C26137 * C1910 - C47279 * C1907) *
                 C114 +
             (C48414 * C697 - C47273 * C688 + C48421 * C1465 - C47265 * C1458 +
              C26137 * C1916 - C47279 * C1911) *
                 C48373) *
                C48266 +
            ((C48414 * C689 - C47273 * C683 + C48421 * C1459 - C47265 * C1454 +
              C26137 * C1912 - C47279 * C1908) *
                 C114 +
             (C48414 * C698 - C47273 * C690 + C48421 * C1466 - C47265 * C1460 +
              C26137 * C1917 - C47279 * C1913) *
                 C48373) *
                C48274 +
            ((C48414 * C691 - C47273 * C684 + C48421 * C1461 - C47265 * C1455 +
              C26137 * C1914 - C47279 * C1909) *
                 C114 +
             (C48414 * C699 - C47273 * C692 + C48421 * C1467 - C47265 * C1462 +
              C26137 * C1918 - C47279 * C1915) *
                 C48373) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C114 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48373) *
               C48266 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C114 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48373) *
               C48274 +
           C26193 * C26140) *
              C930 +
          (((C47273 * C388 - C48414 * C394 + C47265 * C682 - C48421 * C687 +
             C47279 * C1453 - C26137 * C1457) *
                C114 +
            (C47273 * C395 - C48414 * C406 + C47265 * C688 - C48421 * C697 +
             C47279 * C1458 - C26137 * C1465) *
                C48373) *
               C48266 +
           ((C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C114 +
            (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48373) *
               C48274 +
           ((C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C114 +
            (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48373) *
               C26140) *
              C931 +
          (((C48414 * C938 - C47273 * C933 + C48421 * C2327 - C47265 * C2321 +
             C26137 * C2328 - C47279 * C2322) *
                C114 +
            (C48414 * C948 - C47273 * C939 + C48421 * C2339 - C47265 * C2329 +
             C26137 * C2340 - C47279 * C2330) *
                C48373) *
               C48266 +
           ((C48414 * C940 - C47273 * C934 + C48421 * C2331 - C47265 * C2323 +
             C26137 * C2332 - C47279 * C2324) *
                C114 +
            (C48414 * C949 - C47273 * C941 + C48421 * C2341 - C47265 * C2333 +
             C26137 * C2342 - C47279 * C2334) *
                C48373) *
               C48274 +
           ((C48414 * C942 - C47273 * C935 + C48421 * C2335 - C47265 * C2325 +
             C26137 * C2336 - C47279 * C2326) *
                C114 +
            (C48414 * C950 - C47273 * C943 + C48421 * C2343 - C47265 * C2337 +
             C26137 * C2344 - C47279 * C2338) *
                C48373) *
               C26140) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C4966 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48618 +
            (C48414 * C394 - C47273 * C388 + C48421 * C687 - C47265 * C682 +
             C26137 * C1457 - C47279 * C1453) *
                C4967 +
            (C48414 * C406 - C47273 * C395 + C48421 * C697 - C47265 * C688 +
             C26137 * C1465 - C47279 * C1458) *
                C48460) *
               C23267 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
            (C26511 - C26510 + C26513 - C26512 + C26515 - C26514) * C4967 +
            (C26517 - C26516 + C26519 - C26518 + C26521 - C26520) * C48460) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C4966 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48618 +
            (C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C4967 +
            (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48460) *
               C23267 +
           ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C4966 +
            (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48618 +
            (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C4967 +
            (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C26189 * C4966 + C26190 * C48618 +
            (C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C4967 +
            (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48460) *
               C23267 +
           ((C26170 - C26169 + C26172 - C26171 + C26174 - C26173) * C4966 +
            (C26176 - C26175 + C26178 - C26177 + C26180 - C26179) * C48618 +
            (C48414 * C400 - C47273 * C391 + C48421 * C693 - C47265 * C685 +
             C26137 * C1463 - C47279 * C1456) *
                C4967 +
            (C48414 * C409 - C47273 * C401 + C48421 * C700 - C47265 * C694 +
             C26137 * C1468 - C47279 * C1464) *
                C48460) *
               C48271) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C4966 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48618 +
             (C48414 * C394 - C47273 * C388 + C48421 * C687 - C47265 * C682 +
              C26137 * C1457 - C47279 * C1453) *
                 C4967 +
             (C48414 * C406 - C47273 * C395 + C48421 * C697 - C47265 * C688 +
              C26137 * C1465 - C47279 * C1458) *
                 C48460) *
                C23267 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
             (C26511 - C26510 + C26513 - C26512 + C26515 - C26514) * C4967 +
             (C26517 - C26516 + C26519 - C26518 + C26521 - C26520) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C4966 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48618 +
             (C47273 * C682 - C48414 * C687 + C47265 * C1453 - C48421 * C1457 +
              C47279 * C1907 - C26137 * C1910) *
                 C4967 +
             (C47273 * C688 - C48414 * C697 + C47265 * C1458 - C48421 * C1465 +
              C47279 * C1911 - C26137 * C1916) *
                 C48460) *
                C23267 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C4966 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48618 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C4967 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C4966 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48618 +
             (C26510 - C26511 + C26512 - C26513 + C26514 - C26515) * C4967 +
             (C26516 - C26517 + C26518 - C26519 + C26520 - C26521) * C48460) *
                C23267 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C4966 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48618 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C4967 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C4966 +
             (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C48618 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C4967 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48460) *
                C23267 +
            ((C26353 - C26352 + C26355 - C26354 + C26357 - C26356) * C4966 +
             (C26359 - C26358 + C26361 - C26360 + C26363 - C26362) * C48618 +
             (C48414 * C691 - C47273 * C684 + C48421 * C1461 - C47265 * C1455 +
              C26137 * C1914 - C47279 * C1909) *
                 C4967 +
             (C48414 * C699 - C47273 * C692 + C48421 * C1467 - C47265 * C1462 +
              C26137 * C1918 - C47279 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C4966 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48618 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C23267 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
             C29553 * C4967 + C29554 * C48460) *
                C48271) *
               C386 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C4966 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48618 +
             (C47273 * C933 - C48414 * C938 + C47265 * C2321 - C48421 * C2327 +
              C47279 * C2322 - C26137 * C2328) *
                 C4967 +
             (C47273 * C939 - C48414 * C948 + C47265 * C2329 - C48421 * C2339 +
              C47279 * C2330 - C26137 * C2340) *
                 C48460) *
                C23267 +
            (C29555 * C4966 + C29556 * C48618 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C4967 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C4966 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48618 +
             C29555 * C4967 + C29556 * C48460) *
                C23267 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C4966 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48618 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C4967 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C386 +
           ((C29553 * C4966 + C29554 * C48618 +
             (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C4967 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48460) *
                C23267 +
            ((C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C4966 +
             (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48618 +
             (C48414 * C942 - C47273 * C935 + C48421 * C2335 - C47265 * C2325 +
              C26137 * C2336 - C47279 * C2326) *
                 C4967 +
             (C48414 * C950 - C47273 * C943 + C48421 * C2343 - C47265 * C2337 +
              C26137 * C2344 - C47279 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C4966 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48618 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C23267 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
             C29553 * C4967 + C29554 * C48460) *
                C48271) *
               C48345 * C510 +
           (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C4966 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48618 +
             (C47273 * C682 - C48414 * C687 + C47265 * C1453 - C48421 * C1457 +
              C47279 * C1907 - C26137 * C1910) *
                 C4967 +
             (C47273 * C688 - C48414 * C697 + C47265 * C1458 - C48421 * C1465 +
              C47279 * C1911 - C26137 * C1916) *
                 C48460) *
                C23267 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C4966 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48618 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C4967 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C4966 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48618 +
             C29555 * C4967 + C29556 * C48460) *
                C23267 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C4966 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48618 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C4967 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C48345 * C510 +
           (((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C4966 +
             (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C48618 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C4967 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48460) *
                C23267 +
            ((C26353 - C26352 + C26355 - C26354 + C26357 - C26356) * C4966 +
             (C26359 - C26358 + C26361 - C26360 + C26363 - C26362) * C48618 +
             (C48414 * C691 - C47273 * C684 + C48421 * C1461 - C47265 * C1455 +
              C26137 * C1914 - C47279 * C1909) *
                 C4967 +
             (C48414 * C699 - C47273 * C692 + C48421 * C1467 - C47265 * C1462 +
              C26137 * C1918 - C47279 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C4966 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48618 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
               C23267 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
            C29553 * C4967 + C29554 * C48460) *
               C48271) *
              C48345 * C576 +
          (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C4966 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C48618 +
            (C47273 * C682 - C48414 * C687 + C47265 * C1453 - C48421 * C1457 +
             C47279 * C1907 - C26137 * C1910) *
                C4967 +
            (C47273 * C688 - C48414 * C697 + C47265 * C1458 - C48421 * C1465 +
             C47279 * C1911 - C26137 * C1916) *
                C48460) *
               C23267 +
           ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C4966 +
            (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48618 +
            (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C4967 +
            (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
               C48271) *
              C48345 * C577 +
          (((C48414 * C585 - C47273 * C580 + C48421 * C1271 - C47265 * C1267 +
             C26137 * C1752 - C47279 * C1749) *
                C4966 +
            (C48414 * C595 - C47273 * C586 + C48421 * C1279 - C47265 * C1272 +
             C26137 * C1758 - C47279 * C1753) *
                C48618 +
            (C48414 * C1457 - C47273 * C1453 + C48421 * C1910 - C47265 * C1907 +
             C26137 * C9214 - C47279 * C9212) *
                C4967 +
            (C48414 * C1465 - C47273 * C1458 + C48421 * C1916 - C47265 * C1911 +
             C26137 * C9218 - C47279 * C9215) *
                C48460) *
               C23267 +
           ((C48414 * C587 - C47273 * C581 + C48421 * C1273 - C47265 * C1268 +
             C26137 * C1754 - C47279 * C1750) *
                C4966 +
            (C48414 * C596 - C47273 * C588 + C48421 * C1280 - C47265 * C1274 +
             C26137 * C1759 - C47279 * C1755) *
                C48618 +
            (C48414 * C1459 - C47273 * C1454 + C48421 * C1912 - C47265 * C1908 +
             C26137 * C9216 - C47279 * C9213) *
                C4967 +
            (C48414 * C1466 - C47273 * C1460 + C48421 * C1917 - C47265 * C1913 +
             C26137 * C9219 - C47279 * C9217) *
                C48460) *
               C48271) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C4966 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48618 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C23267 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
             C29553 * C4967 + C29554 * C48460) *
                C48271) *
               C386 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C4966 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48618 +
             (C47273 * C933 - C48414 * C938 + C47265 * C2321 - C48421 * C2327 +
              C47279 * C2322 - C26137 * C2328) *
                 C4967 +
             (C47273 * C939 - C48414 * C948 + C47265 * C2329 - C48421 * C2339 +
              C47279 * C2330 - C26137 * C2340) *
                 C48460) *
                C23267 +
            (C29555 * C4966 + C29556 * C48618 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C4967 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C510 +
          ((((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C4966 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48618 +
             (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C4967 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
                C23267 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C4966 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48618 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C4967 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C386 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C4966 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48618 +
             (C48414 * C2327 - C47273 * C2321 + C48421 * C2328 -
              C47265 * C2322 + C26137 * C9682 - C47279 * C9680) *
                 C4967 +
             (C48414 * C2339 - C47273 * C2329 + C48421 * C2340 -
              C47265 * C2330 + C26137 * C9686 - C47279 * C9684) *
                 C48460) *
                C23267 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C4966 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48618 +
             (C48414 * C2331 - C47273 * C2323 + C48421 * C2332 -
              C47265 * C2324 + C26137 * C9945 - C47279 * C9944) *
                 C4967 +
             (C48414 * C2341 - C47273 * C2333 + C48421 * C2342 -
              C47265 * C2334 + C26137 * C9947 - C47279 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C4966 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48618 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C23267 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
             C29553 * C4967 + C29554 * C48460) *
                C48271) *
               C784 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C4966 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48618 +
             (C47273 * C933 - C48414 * C938 + C47265 * C2321 - C48421 * C2327 +
              C47279 * C2322 - C26137 * C2328) *
                 C4967 +
             (C47273 * C939 - C48414 * C948 + C47265 * C2329 - C48421 * C2339 +
              C47279 * C2330 - C26137 * C2340) *
                 C48460) *
                C23267 +
            (C29555 * C4966 + C29556 * C48618 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C4967 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C4966 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48618 +
             C29555 * C4967 + C29556 * C48460) *
                C23267 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C4966 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C48618 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C4967 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C784 +
           ((C29553 * C4966 + C29554 * C48618 +
             (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C4967 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48460) *
                C23267 +
            ((C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C4966 +
             (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48618 +
             (C48414 * C942 - C47273 * C935 + C48421 * C2335 - C47265 * C2325 +
              C26137 * C2336 - C47279 * C2326) *
                 C4967 +
             (C48414 * C950 - C47273 * C943 + C48421 * C2343 - C47265 * C2337 +
              C26137 * C2344 - C47279 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C4966 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C48618 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C23267 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
             C29553 * C4967 + C29554 * C48460) *
                C48271) *
               C784 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C4966 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48618 +
             (C47273 * C933 - C48414 * C938 + C47265 * C2321 - C48421 * C2327 +
              C47279 * C2322 - C26137 * C2328) *
                 C4967 +
             (C47273 * C939 - C48414 * C948 + C47265 * C2329 - C48421 * C2339 +
              C47279 * C2330 - C26137 * C2340) *
                 C48460) *
                C23267 +
            (C29555 * C4966 + C29556 * C48618 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C4967 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C260 +
          ((((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C4966 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C48618 +
             (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C4967 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
                C23267 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C4966 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C48618 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C4967 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C784 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C4966 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48618 +
             (C48414 * C2327 - C47273 * C2321 + C48421 * C2328 -
              C47265 * C2322 + C26137 * C9682 - C47279 * C9680) *
                 C4967 +
             (C48414 * C2339 - C47273 * C2329 + C48421 * C2340 -
              C47265 * C2330 + C26137 * C9686 - C47279 * C9684) *
                 C48460) *
                C23267 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C4966 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48618 +
             (C48414 * C2331 - C47273 * C2323 + C48421 * C2332 -
              C47265 * C2324 + C26137 * C9945 - C47279 * C9944) *
                 C4967 +
             (C48414 * C2341 - C47273 * C2333 + C48421 * C2342 -
              C47265 * C2334 + C26137 * C9947 - C47279 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C4966 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48618 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C4967 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
               C23267 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C4966 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C48618 +
            C29553 * C4967 + C29554 * C48460) *
               C48271) *
              C930 +
          (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C4966 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48618 +
            (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C4967 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48460) *
               C23267 +
           (C29555 * C4966 + C29556 * C48618 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C4967 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
               C48271) *
              C931 +
          (((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C4966 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48618 +
            (C48414 * C2804 - C47273 * C2800 + C48421 * C3249 - C47265 * C3246 +
             C26137 * C10096 - C47279 * C10094) *
                C4967 +
            (C48414 * C2812 - C47273 * C2805 + C48421 * C3255 - C47265 * C3250 +
             C26137 * C10100 - C47279 * C10097) *
                C48460) *
               C23267 +
           ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C4966 +
            (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48618 +
            (C48414 * C2806 - C47273 * C2801 + C48421 * C3251 - C47265 * C3247 +
             C26137 * C10098 - C47279 * C10095) *
                C4967 +
            (C48414 * C2813 - C47273 * C2807 + C48421 * C3256 - C47265 * C3252 +
             C26137 * C10101 - C47279 * C10099) *
                C48460) *
               C48271) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C114 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C48373) *
               C23267 +
           ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C114 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48373) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C114 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C48373) *
               C23267 +
           ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C114 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48373) *
               C48271) *
              C48345 * C48328 * C111 +
          (((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
             C23296) *
                C114 +
            (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
             C23304) *
                C48373) *
               C23267 +
           ((C48692 * C128 - C23269 * C118 + C48688 * C276 - C23270 * C267 +
             C48678 * C591 - C23271 * C583 + C48660 * C1277 - C23272 * C1270) *
                C114 +
            (C48692 * C139 - C23269 * C129 + C48688 * C285 - C23270 * C277 +
             C48678 * C598 - C23271 * C592 + C48660 * C1282 - C23272 * C1278) *
                C48373) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C114 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48373) *
               C48691 +
           ((C22092 - C22093 + C22094 - C22095) * C114 +
            (C22096 - C22097 + C22098 - C22099) * C48373) *
               C48684 +
           C22140 * C48671 + C22141 * C48654) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C114 +
            (C22097 - C22096 + C22099 - C22098) * C48373) *
               C48691 +
           ((C22101 - C22100 + C22103 - C22102) * C114 +
            (C22105 - C22104 + C22107 - C22106) * C48373) *
               C48684 +
           ((C22109 - C22108 + C22111 - C22110) * C114 +
            (C22113 - C22112 + C22115 - C22114) * C48373) *
               C48671 +
           ((C22116 - C22117 + C22118 - C22119) * C114 +
            (C22120 - C22121 + C22122 - C22123) * C48373) *
               C48654) *
              C48345 * C48328 * C111 +
          (C22140 * C48691 + C22141 * C48684 +
           ((C22117 - C22116 + C22119 - C22118) * C114 +
            (C22121 - C22120 + C22123 - C22122) * C48373) *
               C48671 +
           ((C22083 * C132 - C22089 * C120 + C48418 * C280 - C22090 * C269) *
                C114 +
            (C22083 * C141 - C22089 * C133 + C48418 * C287 - C22090 * C281) *
                C48373) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C2458 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48686 +
            (C22083 * C394 - C22089 * C388 + C48418 * C687 - C22090 * C682) *
                C2459 +
            (C22083 * C406 - C22089 * C395 + C48418 * C697 - C22090 * C688) *
                C48675 +
            (C22083 * C938 - C22089 * C933 + C48418 * C2327 - C22090 * C2321) *
                C2460 +
            (C22083 * C948 - C22089 * C939 + C48418 * C2339 - C22090 * C2329) *
                C48653) *
               C23267 +
           ((C22092 - C22093 + C22094 - C22095) * C2458 +
            (C22096 - C22097 + C22098 - C22099) * C48686 +
            (C22427 - C22426 + C22429 - C22428) * C2459 +
            (C22431 - C22430 + C22433 - C22432) * C48675 +
            (C24460 - C24461 + C24462 - C24463) * C2460 +
            (C24464 - C24465 + C24466 - C24467) * C48653) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C2458 +
            (C22097 - C22096 + C22099 - C22098) * C48686 +
            (C22426 - C22427 + C22428 - C22429) * C2459 +
            (C22430 - C22431 + C22432 - C22433) * C48675 +
            (C24461 - C24460 + C24463 - C24462) * C2460 +
            (C24465 - C24464 + C24467 - C24466) * C48653) *
               C23267 +
           ((C22101 - C22100 + C22103 - C22102) * C2458 +
            (C22105 - C22104 + C22107 - C22106) * C48686 +
            (C22434 - C22435 + C22436 - C22437) * C2459 +
            (C22438 - C22439 + C22440 - C22441) * C48675 +
            (C24468 - C24469 + C24470 - C24471) * C2460 +
            (C24472 - C24473 + C24474 - C24475) * C48653) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C22132 * C2458 + C22133 * C48686 +
            (C22435 - C22434 + C22437 - C22436) * C2459 +
            (C22439 - C22438 + C22441 - C22440) * C48675 +
            (C24469 - C24468 + C24471 - C24470) * C2460 +
            (C24473 - C24472 + C24475 - C24474) * C48653) *
               C23267 +
           (C22134 * C2458 + C22135 * C48686 +
            (C22443 - C22442 + C22445 - C22444) * C2459 +
            (C22447 - C22446 + C22449 - C22448) * C48675 +
            (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                C2460 +
            (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                C48653) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C114 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48373) *
                C23267 +
            ((C48692 * C274 - C23269 * C266 + C48688 * C589 - C23270 * C582 +
              C48678 * C1275 - C23271 * C1269 + C48660 * C1756 -
              C23272 * C1751) *
                 C114 +
             (C48692 * C284 - C23269 * C275 + C48688 * C597 - C23270 * C590 +
              C48678 * C1281 - C23271 * C1276 + C48660 * C1760 -
              C23272 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C114 +
             (C22277 - C22276 + C22279 - C22278) * C48373) *
                C48691 +
            ((C22281 - C22280 + C22283 - C22282) * C114 +
             (C22285 - C22284 + C22287 - C22286) * C48373) *
                C48684 +
            ((C22289 - C22288 + C22291 - C22290) * C114 +
             (C22293 - C22292 + C22295 - C22294) * C48373) *
                C48671 +
            ((C22083 * C278 - C22089 * C268 + C48418 * C593 - C22090 * C584) *
                 C114 +
             (C22083 * C286 - C22089 * C279 + C48418 * C599 - C22090 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C2458 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48686 +
             (C22083 * C394 - C22089 * C388 + C48418 * C687 - C22090 * C682) *
                 C2459 +
             (C22083 * C406 - C22089 * C395 + C48418 * C697 - C22090 * C688) *
                 C48675 +
             (C22083 * C938 - C22089 * C933 + C48418 * C2327 - C22090 * C2321) *
                 C2460 +
             (C22083 * C948 - C22089 * C939 + C48418 * C2339 - C22090 * C2329) *
                 C48653) *
                C23267 +
            ((C22092 - C22093 + C22094 - C22095) * C2458 +
             (C22096 - C22097 + C22098 - C22099) * C48686 +
             (C22427 - C22426 + C22429 - C22428) * C2459 +
             (C22431 - C22430 + C22433 - C22432) * C48675 +
             (C24460 - C24461 + C24462 - C24463) * C2460 +
             (C24464 - C24465 + C24466 - C24467) * C48653) *
                C48271) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C2458 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48686 +
             (C22089 * C682 - C22083 * C687 + C22090 * C1453 - C48418 * C1457) *
                 C2459 +
             (C22089 * C688 - C22083 * C697 + C22090 * C1458 - C48418 * C1465) *
                 C48675 +
             (C22089 * C2321 - C22083 * C2327 + C22090 * C2322 -
              C48418 * C2328) *
                 C2460 +
             (C22089 * C2329 - C22083 * C2339 + C22090 * C2330 -
              C48418 * C2340) *
                 C48653) *
                C23267 +
            ((C22272 - C22273 + C22274 - C22275) * C2458 +
             (C22276 - C22277 + C22278 - C22279) * C48686 +
             (C24670 - C24671 + C24672 - C24673) * C2459 +
             (C24674 - C24675 + C24676 - C24677) * C48675 +
             (C24678 - C24679 + C24680 - C24681) * C2460 +
             (C24682 - C24683 + C24684 - C24685) * C48653) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C2458 +
             (C22097 - C22096 + C22099 - C22098) * C48686 +
             (C22426 - C22427 + C22428 - C22429) * C2459 +
             (C22430 - C22431 + C22432 - C22433) * C48675 +
             (C24461 - C24460 + C24463 - C24462) * C2460 +
             (C24465 - C24464 + C24467 - C24466) * C48653) *
                C23267 +
            ((C22101 - C22100 + C22103 - C22102) * C2458 +
             (C22105 - C22104 + C22107 - C22106) * C48686 +
             (C22434 - C22435 + C22436 - C22437) * C2459 +
             (C22438 - C22439 + C22440 - C22441) * C48675 +
             (C24468 - C24469 + C24470 - C24471) * C2460 +
             (C24472 - C24473 + C24474 - C24475) * C48653) *
                C48271) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C2458 +
             (C22277 - C22276 + C22279 - C22278) * C48686 +
             (C24671 - C24670 + C24673 - C24672) * C2459 +
             (C24675 - C24674 + C24677 - C24676) * C48675 +
             (C24679 - C24678 + C24681 - C24680) * C2460 +
             (C24683 - C24682 + C24685 - C24684) * C48653) *
                C23267 +
            ((C22281 - C22280 + C22283 - C22282) * C2458 +
             (C22285 - C22284 + C22287 - C22286) * C48686 +
             (C22083 * C691 - C22089 * C684 + C48418 * C1461 - C22090 * C1455) *
                 C2459 +
             (C22083 * C699 - C22089 * C692 + C48418 * C1467 - C22090 * C1462) *
                 C48675 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C2460 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48653) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C386 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C386 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C114 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48373) *
                C23267 +
            ((C48692 * C398 - C23269 * C390 + C48688 * C691 - C23270 * C684 +
              C48678 * C1461 - C23271 * C1455 + C48660 * C1914 -
              C23272 * C1909) *
                 C114 +
             (C48692 * C408 - C23269 * C399 + C48688 * C699 - C23270 * C692 +
              C48678 * C1467 - C23271 * C1462 + C48660 * C1918 -
              C23272 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C386 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C386 +
           (((C22427 - C22426 + C22429 - C22428) * C114 +
             (C22431 - C22430 + C22433 - C22432) * C48373) *
                C48691 +
            ((C22435 - C22434 + C22437 - C22436) * C114 +
             (C22439 - C22438 + C22441 - C22440) * C48373) *
                C48684 +
            ((C22443 - C22442 + C22445 - C22444) * C114 +
             (C22447 - C22446 + C22449 - C22448) * C48373) *
                C48671 +
            ((C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                 C114 +
             (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C2458 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48686 +
             (C24880 - C24881 + C24882 - C24883) * C2459 +
             (C24884 - C24885 + C24886 - C24887) * C48675 +
             (C24888 - C24889 + C24890 - C24891) * C2460 +
             (C24892 - C24893 + C24894 - C24895) * C48653) *
                C23267 +
            ((C22092 - C22093 + C22094 - C22095) * C2458 +
             (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
             C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
                C48271) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C2458 +
             (C24885 - C24884 + C24887 - C24886) * C48686 +
             (C24889 - C24888 + C24891 - C24890) * C2459 +
             (C24893 - C24892 + C24895 - C24894) * C48675 +
             (C22089 * C2800 - C22083 * C2804 + C22090 * C3246 -
              C48418 * C3249) *
                 C2460 +
             (C22089 * C2805 - C22083 * C2812 + C22090 * C3250 -
              C48418 * C3255) *
                 C48653) *
                C23267 +
            (C24924 * C2458 + C24925 * C48686 + C24926 * C2459 +
             C24927 * C48675 + (C24912 - C24913 + C24914 - C24915) * C2460 +
             (C24916 - C24917 + C24918 - C24919) * C48653) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C2458 +
             (C22097 - C22096 + C22099 - C22098) * C48686 + C24924 * C2459 +
             C24925 * C48675 + C24926 * C2460 + C24927 * C48653) *
                C23267 +
            ((C22101 - C22100 + C22103 - C22102) * C2458 +
             (C22105 - C22104 + C22107 - C22106) * C48686 +
             (C22434 - C22435 + C22436 - C22437) * C2459 +
             (C22438 - C22439 + C22440 - C22441) * C48675 +
             (C24468 - C24469 + C24470 - C24471) * C2460 +
             (C24472 - C24473 + C24474 - C24475) * C48653) *
                C48271) *
               C386 +
           ((C24920 * C2458 + C24921 * C48686 + C24922 * C2459 +
             C24923 * C48675 + (C24913 - C24912 + C24915 - C24914) * C2460 +
             (C24917 - C24916 + C24919 - C24918) * C48653) *
                C23267 +
            ((C22435 - C22434 + C22437 - C22436) * C2458 +
             (C22439 - C22438 + C22441 - C22440) * C48686 +
             (C24469 - C24468 + C24471 - C24470) * C2459 +
             (C24473 - C24472 + C24475 - C24474) * C48675 +
             (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
              C22090 * C3248) *
                 C2460 +
             (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
              C22090 * C3254) *
                 C48653) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C114 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48373) *
                C23267 +
            ((C48692 * C274 - C23269 * C266 + C48688 * C589 - C23270 * C582 +
              C48678 * C1275 - C23271 * C1269 + C48660 * C1756 -
              C23272 * C1751) *
                 C114 +
             (C48692 * C284 - C23269 * C275 + C48688 * C597 - C23270 * C590 +
              C48678 * C1281 - C23271 * C1276 + C48660 * C1760 -
              C23272 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C114 +
             (C22277 - C22276 + C22279 - C22278) * C48373) *
                C48691 +
            ((C22281 - C22280 + C22283 - C22282) * C114 +
             (C22285 - C22284 + C22287 - C22286) * C48373) *
                C48684 +
            ((C22289 - C22288 + C22291 - C22290) * C114 +
             (C22293 - C22292 + C22295 - C22294) * C48373) *
                C48671 +
            ((C22083 * C278 - C22089 * C268 + C48418 * C593 - C22090 * C584) *
                 C114 +
             (C22083 * C286 - C22089 * C279 + C48418 * C599 - C22090 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C2458 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48686 +
             (C24880 - C24881 + C24882 - C24883) * C2459 +
             (C24884 - C24885 + C24886 - C24887) * C48675 +
             (C24888 - C24889 + C24890 - C24891) * C2460 +
             (C24892 - C24893 + C24894 - C24895) * C48653) *
                C23267 +
            ((C22092 - C22093 + C22094 - C22095) * C2458 +
             (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
             C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
                C48271) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C2458 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48686 +
             (C22089 * C682 - C22083 * C687 + C22090 * C1453 - C48418 * C1457) *
                 C2459 +
             (C22089 * C688 - C22083 * C697 + C22090 * C1458 - C48418 * C1465) *
                 C48675 +
             (C22089 * C2321 - C22083 * C2327 + C22090 * C2322 -
              C48418 * C2328) *
                 C2460 +
             (C22089 * C2329 - C22083 * C2339 + C22090 * C2330 -
              C48418 * C2340) *
                 C48653) *
                C23267 +
            ((C22272 - C22273 + C22274 - C22275) * C2458 +
             (C22276 - C22277 + C22278 - C22279) * C48686 +
             (C24670 - C24671 + C24672 - C24673) * C2459 +
             (C24674 - C24675 + C24676 - C24677) * C48675 +
             (C24678 - C24679 + C24680 - C24681) * C2460 +
             (C24682 - C24683 + C24684 - C24685) * C48653) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C2458 +
             (C22097 - C22096 + C22099 - C22098) * C48686 + C24924 * C2459 +
             C24925 * C48675 + C24926 * C2460 + C24927 * C48653) *
                C23267 +
            ((C22101 - C22100 + C22103 - C22102) * C2458 +
             (C22105 - C22104 + C22107 - C22106) * C48686 +
             (C22434 - C22435 + C22436 - C22437) * C2459 +
             (C22438 - C22439 + C22440 - C22441) * C48675 +
             (C24468 - C24469 + C24470 - C24471) * C2460 +
             (C24472 - C24473 + C24474 - C24475) * C48653) *
                C48271) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C2458 +
             (C22277 - C22276 + C22279 - C22278) * C48686 +
             (C24671 - C24670 + C24673 - C24672) * C2459 +
             (C24675 - C24674 + C24677 - C24676) * C48675 +
             (C24679 - C24678 + C24681 - C24680) * C2460 +
             (C24683 - C24682 + C24685 - C24684) * C48653) *
                C23267 +
            ((C22281 - C22280 + C22283 - C22282) * C2458 +
             (C22285 - C22284 + C22287 - C22286) * C48686 +
             (C22083 * C691 - C22089 * C684 + C48418 * C1461 - C22090 * C1455) *
                 C2459 +
             (C22083 * C699 - C22089 * C692 + C48418 * C1467 - C22090 * C1462) *
                 C48675 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C2460 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48653) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C114 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C48373) *
               C23267 +
           ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C114 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48373) *
               C48271) *
              C48345 * C576 +
          (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C114 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C48373) *
               C23267 +
           ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C114 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48373) *
               C48271) *
              C48345 * C577 +
          (((C48692 * C585 - C23269 * C580 + C48688 * C1271 - C23270 * C1267 +
             C48678 * C1752 - C23271 * C1749 + C48660 * C9124 -
             C23272 * C9122) *
                C114 +
            (C48692 * C595 - C23269 * C586 + C48688 * C1279 - C23270 * C1272 +
             C48678 * C1758 - C23271 * C1753 + C48660 * C9128 -
             C23272 * C9125) *
                C48373) *
               C23267 +
           ((C48692 * C587 - C23269 * C581 + C48688 * C1273 - C23270 * C1268 +
             C48678 * C1754 - C23271 * C1750 + C48660 * C9126 -
             C23272 * C9123) *
                C114 +
            (C48692 * C596 - C23269 * C588 + C48688 * C1280 - C23270 * C1274 +
             C48678 * C1759 - C23271 * C1755 + C48660 * C9129 -
             C23272 * C9127) *
                C48373) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C114 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48373) *
               C48691 +
           ((C22092 - C22093 + C22094 - C22095) * C114 +
            (C22096 - C22097 + C22098 - C22099) * C48373) *
               C48684 +
           C22140 * C48671 + C22141 * C48654) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C114 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48373) *
               C48691 +
           ((C22272 - C22273 + C22274 - C22275) * C114 +
            (C22276 - C22277 + C22278 - C22279) * C48373) *
               C48684 +
           ((C22280 - C22281 + C22282 - C22283) * C114 +
            (C22284 - C22285 + C22286 - C22287) * C48373) *
               C48671 +
           ((C22288 - C22289 + C22290 - C22291) * C114 +
            (C22292 - C22293 + C22294 - C22295) * C48373) *
               C48654) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C114 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C48373) *
               C48691 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C114 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C48373) *
               C48684 +
           ((C22083 * C589 - C22089 * C582 + C48418 * C1275 - C22090 * C1269) *
                C114 +
            (C22083 * C597 - C22089 * C590 + C48418 * C1281 - C22090 * C1276) *
                C48373) *
               C48671 +
           ((C22083 * C591 - C22089 * C583 + C48418 * C1277 - C22090 * C1270) *
                C114 +
            (C22083 * C598 - C22089 * C592 + C48418 * C1282 - C22090 * C1278) *
                C48373) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C2458 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48686 +
            (C24880 - C24881 + C24882 - C24883) * C2459 +
            (C24884 - C24885 + C24886 - C24887) * C48675 +
            (C24888 - C24889 + C24890 - C24891) * C2460 +
            (C24892 - C24893 + C24894 - C24895) * C48653) *
               C23267 +
           ((C22092 - C22093 + C22094 - C22095) * C2458 +
            (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
            C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
               C48271) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C2458 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48686 +
            (C22089 * C682 - C22083 * C687 + C22090 * C1453 - C48418 * C1457) *
                C2459 +
            (C22089 * C688 - C22083 * C697 + C22090 * C1458 - C48418 * C1465) *
                C48675 +
            (C22089 * C2321 - C22083 * C2327 + C22090 * C2322 -
             C48418 * C2328) *
                C2460 +
            (C22089 * C2329 - C22083 * C2339 + C22090 * C2330 -
             C48418 * C2340) *
                C48653) *
               C23267 +
           ((C22272 - C22273 + C22274 - C22275) * C2458 +
            (C22276 - C22277 + C22278 - C22279) * C48686 +
            (C24670 - C24671 + C24672 - C24673) * C2459 +
            (C24674 - C24675 + C24676 - C24677) * C48675 +
            (C24678 - C24679 + C24680 - C24681) * C2460 +
            (C24682 - C24683 + C24684 - C24685) * C48653) *
               C48271) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C2458 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C48686 +
            (C22083 * C1457 - C22089 * C1453 + C48418 * C1910 -
             C22090 * C1907) *
                C2459 +
            (C22083 * C1465 - C22089 * C1458 + C48418 * C1916 -
             C22090 * C1911) *
                C48675 +
            (C22083 * C2328 - C22089 * C2322 + C48418 * C9682 -
             C22090 * C9680) *
                C2460 +
            (C22083 * C2340 - C22089 * C2330 + C48418 * C9686 -
             C22090 * C9684) *
                C48653) *
               C23267 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C2458 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C48686 +
            (C22083 * C1459 - C22089 * C1454 + C48418 * C1912 -
             C22090 * C1908) *
                C2459 +
            (C22083 * C1466 - C22089 * C1460 + C48418 * C1917 -
             C22090 * C1913) *
                C48675 +
            (C22083 * C2332 - C22089 * C2324 + C48418 * C9945 -
             C22090 * C9944) *
                C2460 +
            (C22083 * C2342 - C22089 * C2334 + C48418 * C9947 -
             C22090 * C9946) *
                C48653) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C386 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C510 +
          ((((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C386 +
           (((C48692 * C687 - C23269 * C682 + C48688 * C1457 - C23270 * C1453 +
              C48678 * C1910 - C23271 * C1907 + C48660 * C9214 -
              C23272 * C9212) *
                 C114 +
             (C48692 * C697 - C23269 * C688 + C48688 * C1465 - C23270 * C1458 +
              C48678 * C1916 - C23271 * C1911 + C48660 * C9218 -
              C23272 * C9215) *
                 C48373) *
                C23267 +
            ((C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
              C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
              C23272 * C9213) *
                 C114 +
             (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
              C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
              C23272 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C386 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C386 +
           (((C22083 * C687 - C22089 * C682 + C48418 * C1457 - C22090 * C1453) *
                 C114 +
             (C22083 * C697 - C22089 * C688 + C48418 * C1465 - C22090 * C1458) *
                 C48373) *
                C48691 +
            ((C22083 * C689 - C22089 * C683 + C48418 * C1459 - C22090 * C1454) *
                 C114 +
             (C22083 * C698 - C22089 * C690 + C48418 * C1466 - C22090 * C1460) *
                 C48373) *
                C48684 +
            ((C22083 * C691 - C22089 * C684 + C48418 * C1461 - C22090 * C1455) *
                 C114 +
             (C22083 * C699 - C22089 * C692 + C48418 * C1467 - C22090 * C1462) *
                 C48373) *
                C48671 +
            ((C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C114 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C2458 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48686 +
             (C24880 - C24881 + C24882 - C24883) * C2459 +
             (C24884 - C24885 + C24886 - C24887) * C48675 +
             (C24888 - C24889 + C24890 - C24891) * C2460 +
             (C24892 - C24893 + C24894 - C24895) * C48653) *
                C23267 +
            ((C22092 - C22093 + C22094 - C22095) * C2458 +
             (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
             C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
                C48271) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C2458 +
             (C24885 - C24884 + C24887 - C24886) * C48686 +
             (C24889 - C24888 + C24891 - C24890) * C2459 +
             (C24893 - C24892 + C24895 - C24894) * C48675 +
             (C22089 * C2800 - C22083 * C2804 + C22090 * C3246 -
              C48418 * C3249) *
                 C2460 +
             (C22089 * C2805 - C22083 * C2812 + C22090 * C3250 -
              C48418 * C3255) *
                 C48653) *
                C23267 +
            (C24924 * C2458 + C24925 * C48686 + C24926 * C2459 +
             C24927 * C48675 + (C24912 - C24913 + C24914 - C24915) * C2460 +
             (C24916 - C24917 + C24918 - C24919) * C48653) *
                C48271) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C2458 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48686 +
             (C25462 - C25463 + C25464 - C25465) * C2459 +
             (C25466 - C25467 + C25468 - C25469) * C48675 +
             (C25470 - C25471 + C25472 - C25473) * C2460 +
             (C25474 - C25475 + C25476 - C25477) * C48653) *
                C23267 +
            ((C22272 - C22273 + C22274 - C22275) * C2458 +
             (C22276 - C22277 + C22278 - C22279) * C48686 +
             (C24670 - C24671 + C24672 - C24673) * C2459 +
             (C24674 - C24675 + C24676 - C24677) * C48675 +
             (C24678 - C24679 + C24680 - C24681) * C2460 +
             (C24682 - C24683 + C24684 - C24685) * C48653) *
                C48271) *
               C386 +
           (((C25463 - C25462 + C25465 - C25464) * C2458 +
             (C25467 - C25466 + C25469 - C25468) * C48686 +
             (C25471 - C25470 + C25473 - C25472) * C2459 +
             (C25475 - C25474 + C25477 - C25476) * C48675 +
             (C22083 * C3249 - C22089 * C3246 + C48418 * C10096 -
              C22090 * C10094) *
                 C2460 +
             (C22083 * C3255 - C22089 * C3250 + C48418 * C10100 -
              C22090 * C10097) *
                 C48653) *
                C23267 +
            ((C24671 - C24670 + C24673 - C24672) * C2458 +
             (C24675 - C24674 + C24677 - C24676) * C48686 +
             (C24679 - C24678 + C24681 - C24680) * C2459 +
             (C24683 - C24682 + C24685 - C24684) * C48675 +
             (C22083 * C3251 - C22089 * C3247 + C48418 * C10098 -
              C22090 * C10095) *
                 C2460 +
             (C22083 * C3256 - C22089 * C3252 + C48418 * C10101 -
              C22090 * C10099) *
                 C48653) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C784 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C784 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C114 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48373) *
                C23267 +
            ((C48692 * C398 - C23269 * C390 + C48688 * C691 - C23270 * C684 +
              C48678 * C1461 - C23271 * C1455 + C48660 * C1914 -
              C23272 * C1909) *
                 C114 +
             (C48692 * C408 - C23269 * C399 + C48688 * C699 - C23270 * C692 +
              C48678 * C1467 - C23271 * C1462 + C48660 * C1918 -
              C23272 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C784 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C784 +
           (((C22427 - C22426 + C22429 - C22428) * C114 +
             (C22431 - C22430 + C22433 - C22432) * C48373) *
                C48691 +
            ((C22435 - C22434 + C22437 - C22436) * C114 +
             (C22439 - C22438 + C22441 - C22440) * C48373) *
                C48684 +
            ((C22443 - C22442 + C22445 - C22444) * C114 +
             (C22447 - C22446 + C22449 - C22448) * C48373) *
                C48671 +
            ((C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                 C114 +
             (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C2458 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48686 +
             (C24880 - C24881 + C24882 - C24883) * C2459 +
             (C24884 - C24885 + C24886 - C24887) * C48675 +
             (C24888 - C24889 + C24890 - C24891) * C2460 +
             (C24892 - C24893 + C24894 - C24895) * C48653) *
                C23267 +
            ((C22092 - C22093 + C22094 - C22095) * C2458 +
             (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
             C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
                C48271) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C2458 +
             (C24885 - C24884 + C24887 - C24886) * C48686 +
             (C24889 - C24888 + C24891 - C24890) * C2459 +
             (C24893 - C24892 + C24895 - C24894) * C48675 +
             (C22089 * C2800 - C22083 * C2804 + C22090 * C3246 -
              C48418 * C3249) *
                 C2460 +
             (C22089 * C2805 - C22083 * C2812 + C22090 * C3250 -
              C48418 * C3255) *
                 C48653) *
                C23267 +
            (C24924 * C2458 + C24925 * C48686 + C24926 * C2459 +
             C24927 * C48675 + (C24912 - C24913 + C24914 - C24915) * C2460 +
             (C24916 - C24917 + C24918 - C24919) * C48653) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C2458 +
             (C22097 - C22096 + C22099 - C22098) * C48686 + C24924 * C2459 +
             C24925 * C48675 + C24926 * C2460 + C24927 * C48653) *
                C23267 +
            ((C22101 - C22100 + C22103 - C22102) * C2458 +
             (C22105 - C22104 + C22107 - C22106) * C48686 +
             (C22434 - C22435 + C22436 - C22437) * C2459 +
             (C22438 - C22439 + C22440 - C22441) * C48675 +
             (C24468 - C24469 + C24470 - C24471) * C2460 +
             (C24472 - C24473 + C24474 - C24475) * C48653) *
                C48271) *
               C784 +
           ((C24920 * C2458 + C24921 * C48686 + C24922 * C2459 +
             C24923 * C48675 + (C24913 - C24912 + C24915 - C24914) * C2460 +
             (C24917 - C24916 + C24919 - C24918) * C48653) *
                C23267 +
            ((C22435 - C22434 + C22437 - C22436) * C2458 +
             (C22439 - C22438 + C22441 - C22440) * C48686 +
             (C24469 - C24468 + C24471 - C24470) * C2459 +
             (C24473 - C24472 + C24475 - C24474) * C48675 +
             (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
              C22090 * C3248) *
                 C2460 +
             (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
              C22090 * C3254) *
                 C48653) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C784 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C260 +
          ((((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C784 +
           (((C48692 * C687 - C23269 * C682 + C48688 * C1457 - C23270 * C1453 +
              C48678 * C1910 - C23271 * C1907 + C48660 * C9214 -
              C23272 * C9212) *
                 C114 +
             (C48692 * C697 - C23269 * C688 + C48688 * C1465 - C23270 * C1458 +
              C48678 * C1916 - C23271 * C1911 + C48660 * C9218 -
              C23272 * C9215) *
                 C48373) *
                C23267 +
            ((C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
              C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
              C23272 * C9213) *
                 C114 +
             (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
              C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
              C23272 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C784 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C784 +
           (((C22083 * C687 - C22089 * C682 + C48418 * C1457 - C22090 * C1453) *
                 C114 +
             (C22083 * C697 - C22089 * C688 + C48418 * C1465 - C22090 * C1458) *
                 C48373) *
                C48691 +
            ((C22083 * C689 - C22089 * C683 + C48418 * C1459 - C22090 * C1454) *
                 C114 +
             (C22083 * C698 - C22089 * C690 + C48418 * C1466 - C22090 * C1460) *
                 C48373) *
                C48684 +
            ((C22083 * C691 - C22089 * C684 + C48418 * C1461 - C22090 * C1455) *
                 C114 +
             (C22083 * C699 - C22089 * C692 + C48418 * C1467 - C22090 * C1462) *
                 C48373) *
                C48671 +
            ((C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C114 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C2458 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48686 +
             (C24880 - C24881 + C24882 - C24883) * C2459 +
             (C24884 - C24885 + C24886 - C24887) * C48675 +
             (C24888 - C24889 + C24890 - C24891) * C2460 +
             (C24892 - C24893 + C24894 - C24895) * C48653) *
                C23267 +
            ((C22092 - C22093 + C22094 - C22095) * C2458 +
             (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
             C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
                C48271) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C2458 +
             (C24885 - C24884 + C24887 - C24886) * C48686 +
             (C24889 - C24888 + C24891 - C24890) * C2459 +
             (C24893 - C24892 + C24895 - C24894) * C48675 +
             (C22089 * C2800 - C22083 * C2804 + C22090 * C3246 -
              C48418 * C3249) *
                 C2460 +
             (C22089 * C2805 - C22083 * C2812 + C22090 * C3250 -
              C48418 * C3255) *
                 C48653) *
                C23267 +
            (C24924 * C2458 + C24925 * C48686 + C24926 * C2459 +
             C24927 * C48675 + (C24912 - C24913 + C24914 - C24915) * C2460 +
             (C24916 - C24917 + C24918 - C24919) * C48653) *
                C48271) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C2458 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48686 +
             (C25462 - C25463 + C25464 - C25465) * C2459 +
             (C25466 - C25467 + C25468 - C25469) * C48675 +
             (C25470 - C25471 + C25472 - C25473) * C2460 +
             (C25474 - C25475 + C25476 - C25477) * C48653) *
                C23267 +
            ((C22272 - C22273 + C22274 - C22275) * C2458 +
             (C22276 - C22277 + C22278 - C22279) * C48686 +
             (C24670 - C24671 + C24672 - C24673) * C2459 +
             (C24674 - C24675 + C24676 - C24677) * C48675 +
             (C24678 - C24679 + C24680 - C24681) * C2460 +
             (C24682 - C24683 + C24684 - C24685) * C48653) *
                C48271) *
               C784 +
           (((C25463 - C25462 + C25465 - C25464) * C2458 +
             (C25467 - C25466 + C25469 - C25468) * C48686 +
             (C25471 - C25470 + C25473 - C25472) * C2459 +
             (C25475 - C25474 + C25477 - C25476) * C48675 +
             (C22083 * C3249 - C22089 * C3246 + C48418 * C10096 -
              C22090 * C10094) *
                 C2460 +
             (C22083 * C3255 - C22089 * C3250 + C48418 * C10100 -
              C22090 * C10097) *
                 C48653) *
                C23267 +
            ((C24671 - C24670 + C24673 - C24672) * C2458 +
             (C24675 - C24674 + C24677 - C24676) * C48686 +
             (C24679 - C24678 + C24681 - C24680) * C2459 +
             (C24683 - C24682 + C24685 - C24684) * C48675 +
             (C22083 * C3251 - C22089 * C3247 + C48418 * C10098 -
              C22090 * C10095) *
                 C2460 +
             (C22083 * C3256 - C22089 * C3252 + C48418 * C10101 -
              C22090 * C10099) *
                 C48653) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C114 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C48373) *
               C23267 +
           ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C114 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48373) *
               C48271) *
              C930 +
          (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
             C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
             C48660 * C1910) *
                C114 +
            (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
             C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
             C48660 * C1916) *
                C48373) *
               C23267 +
           ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C114 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48373) *
               C48271) *
              C931 +
          (((C48692 * C938 - C23269 * C933 + C48688 * C2327 - C23270 * C2321 +
             C48678 * C2328 - C23271 * C2322 + C48660 * C9682 -
             C23272 * C9680) *
                C114 +
            (C48692 * C948 - C23269 * C939 + C48688 * C2339 - C23270 * C2329 +
             C48678 * C2340 - C23271 * C2330 + C48660 * C9686 -
             C23272 * C9684) *
                C48373) *
               C23267 +
           ((C48692 * C940 - C23269 * C934 + C48688 * C2331 - C23270 * C2323 +
             C48678 * C2332 - C23271 * C2324 + C48660 * C9945 -
             C23272 * C9944) *
                C114 +
            (C48692 * C949 - C23269 * C941 + C48688 * C2341 - C23270 * C2333 +
             C48678 * C2342 - C23271 * C2334 + C48660 * C9947 -
             C23272 * C9946) *
                C48373) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C114 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48373) *
               C48691 +
           ((C22092 - C22093 + C22094 - C22095) * C114 +
            (C22096 - C22097 + C22098 - C22099) * C48373) *
               C48684 +
           C22140 * C48671 + C22141 * C48654) *
              C930 +
          (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                C114 +
            (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                C48373) *
               C48691 +
           ((C22426 - C22427 + C22428 - C22429) * C114 +
            (C22430 - C22431 + C22432 - C22433) * C48373) *
               C48684 +
           ((C22434 - C22435 + C22436 - C22437) * C114 +
            (C22438 - C22439 + C22440 - C22441) * C48373) *
               C48671 +
           ((C22442 - C22443 + C22444 - C22445) * C114 +
            (C22446 - C22447 + C22448 - C22449) * C48373) *
               C48654) *
              C931 +
          (((C22083 * C938 - C22089 * C933 + C48418 * C2327 - C22090 * C2321) *
                C114 +
            (C22083 * C948 - C22089 * C939 + C48418 * C2339 - C22090 * C2329) *
                C48373) *
               C48691 +
           ((C22083 * C940 - C22089 * C934 + C48418 * C2331 - C22090 * C2323) *
                C114 +
            (C22083 * C949 - C22089 * C941 + C48418 * C2341 - C22090 * C2333) *
                C48373) *
               C48684 +
           ((C22083 * C942 - C22089 * C935 + C48418 * C2335 - C22090 * C2325) *
                C114 +
            (C22083 * C950 - C22089 * C943 + C48418 * C2343 - C22090 * C2337) *
                C48373) *
               C48671 +
           ((C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                C114 +
            (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                C48373) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C2458 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48686 +
            (C24880 - C24881 + C24882 - C24883) * C2459 +
            (C24884 - C24885 + C24886 - C24887) * C48675 + C26024 * C2460 +
            C26025 * C48653) *
               C23267 +
           ((C22092 - C22093 + C22094 - C22095) * C2458 +
            (C22096 - C22097 + C22098 - C22099) * C48686 + C24920 * C2459 +
            C24921 * C48675 + C24922 * C2460 + C24923 * C48653) *
               C48271) *
              C930 +
          (((C24881 - C24880 + C24883 - C24882) * C2458 +
            (C24885 - C24884 + C24887 - C24886) * C48686 +
            (C24889 - C24888 + C24891 - C24890) * C2459 +
            (C24893 - C24892 + C24895 - C24894) * C48675 +
            (C26016 - C26017 + C26018 - C26019) * C2460 +
            (C26020 - C26021 + C26022 - C26023) * C48653) *
               C23267 +
           (C24924 * C2458 + C24925 * C48686 + C24926 * C2459 +
            C24927 * C48675 + (C24912 - C24913 + C24914 - C24915) * C2460 +
            (C24916 - C24917 + C24918 - C24919) * C48653) *
               C48271) *
              C931 +
          ((C26024 * C2458 + C26025 * C48686 +
            (C26017 - C26016 + C26019 - C26018) * C2459 +
            (C26021 - C26020 + C26023 - C26022) * C48675 +
            (C22083 * C3671 - C22089 * C3668 + C48418 * C10972 -
             C22090 * C10970) *
                C2460 +
            (C22083 * C3677 - C22089 * C3672 + C48418 * C10976 -
             C22090 * C10974) *
                C48653) *
               C23267 +
           (C24922 * C2458 + C24923 * C48686 +
            (C24913 - C24912 + C24915 - C24914) * C2459 +
            (C24917 - C24916 + C24919 - C24918) * C48675 +
            (C22083 * C3673 - C22089 * C3669 + C48418 * C17570 -
             C22090 * C17569) *
                C2460 +
            (C22083 * C3678 - C22089 * C3674 + C48418 * C17572 -
             C22090 * C17571) *
                C48653) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C4966 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48618 +
            (C24880 - C24881 + C24882 - C24883) * C4967 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48266 +
           ((C22092 - C22093 + C22094 - C22095) * C4966 +
            (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
            C24921 * C48460) *
               C48274 +
           C27496 * C26140) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C4966 +
            (C22097 - C22096 + C22099 - C22098) * C48618 + C24924 * C4967 +
            C24925 * C48460) *
               C48266 +
           ((C22101 - C22100 + C22103 - C22102) * C4966 +
            (C22105 - C22104 + C22107 - C22106) * C48618 +
            (C22434 - C22435 + C22436 - C22437) * C4967 +
            (C22438 - C22439 + C22440 - C22441) * C48460) *
               C48274 +
           ((C22109 - C22108 + C22111 - C22110) * C4966 +
            (C22113 - C22112 + C22115 - C22114) * C48618 +
            (C22442 - C22443 + C22444 - C22445) * C4967 +
            (C22446 - C22447 + C22448 - C22449) * C48460) *
               C26140) *
              C48345 * C48328 * C111 +
          (C27496 * C48266 +
           (C22134 * C4966 + C22135 * C48618 +
            (C22443 - C22442 + C22445 - C22444) * C4967 +
            (C22447 - C22446 + C22449 - C22448) * C48460) *
               C48274 +
           ((C22117 - C22116 + C22119 - C22118) * C4966 +
            (C22121 - C22120 + C22123 - C22122) * C48618 +
            (C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                C4967 +
            (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                C48460) *
               C26140) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C4966 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48618 +
             (C24880 - C24881 + C24882 - C24883) * C4967 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48266 +
            ((C22092 - C22093 + C22094 - C22095) * C4966 +
             (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
             C24921 * C48460) *
                C48274 +
            C27496 * C26140) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C4966 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48618 +
             (C25462 - C25463 + C25464 - C25465) * C4967 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48266 +
            ((C22272 - C22273 + C22274 - C22275) * C4966 +
             (C22276 - C22277 + C22278 - C22279) * C48618 +
             (C24670 - C24671 + C24672 - C24673) * C4967 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48274 +
            ((C22280 - C22281 + C22282 - C22283) * C4966 +
             (C22284 - C22285 + C22286 - C22287) * C48618 +
             (C27691 - C27692 + C27693 - C27694) * C4967 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C26140) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C4966 +
             (C22097 - C22096 + C22099 - C22098) * C48618 + C24924 * C4967 +
             C24925 * C48460) *
                C48266 +
            ((C22101 - C22100 + C22103 - C22102) * C4966 +
             (C22105 - C22104 + C22107 - C22106) * C48618 +
             (C22434 - C22435 + C22436 - C22437) * C4967 +
             (C22438 - C22439 + C22440 - C22441) * C48460) *
                C48274 +
            ((C22109 - C22108 + C22111 - C22110) * C4966 +
             (C22113 - C22112 + C22115 - C22114) * C48618 +
             (C22442 - C22443 + C22444 - C22445) * C4967 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C26140) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C4966 +
             (C22277 - C22276 + C22279 - C22278) * C48618 +
             (C24671 - C24670 + C24673 - C24672) * C4967 +
             (C24675 - C24674 + C24677 - C24676) * C48460) *
                C48266 +
            ((C22281 - C22280 + C22283 - C22282) * C4966 +
             (C22285 - C22284 + C22287 - C22286) * C48618 +
             (C27692 - C27691 + C27694 - C27693) * C4967 +
             (C27696 - C27695 + C27698 - C27697) * C48460) *
                C48274 +
            ((C22289 - C22288 + C22291 - C22290) * C4966 +
             (C22293 - C22292 + C22295 - C22294) * C48618 +
             (C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C4967 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48460) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C4966 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48618 +
             (C24880 - C24881 + C24882 - C24883) * C4967 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48266 +
            ((C22092 - C22093 + C22094 - C22095) * C4966 +
             (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
             C24921 * C48460) *
                C48274 +
            C27496 * C26140) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C4966 +
             (C24885 - C24884 + C24887 - C24886) * C48618 +
             (C24889 - C24888 + C24891 - C24890) * C4967 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48266 +
            (C24924 * C4966 + C24925 * C48618 + C24926 * C4967 +
             C24927 * C48460) *
                C48274 +
            (C27897 * C4966 + C27898 * C48618 +
             (C24468 - C24469 + C24470 - C24471) * C4967 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C26140) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C4966 +
             (C22097 - C22096 + C22099 - C22098) * C48618 + C24924 * C4967 +
             C24925 * C48460) *
                C48266 +
            ((C22101 - C22100 + C22103 - C22102) * C4966 +
             (C22105 - C22104 + C22107 - C22106) * C48618 + C27897 * C4967 +
             C27898 * C48460) *
                C48274 +
            ((C22109 - C22108 + C22111 - C22110) * C4966 +
             (C22113 - C22112 + C22115 - C22114) * C48618 +
             (C22442 - C22443 + C22444 - C22445) * C4967 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C26140) *
               C386 +
           ((C24920 * C4966 + C24921 * C48618 + C24922 * C4967 +
             C24923 * C48460) *
                C48266 +
            (C27491 * C4966 + C27492 * C48618 +
             (C24469 - C24468 + C24471 - C24470) * C4967 +
             (C24473 - C24472 + C24475 - C24474) * C48460) *
                C48274 +
            ((C22443 - C22442 + C22445 - C22444) * C4966 +
             (C22447 - C22446 + C22449 - C22448) * C48618 +
             (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                 C4967 +
             (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                 C48460) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C4966 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48618 +
             (C24880 - C24881 + C24882 - C24883) * C4967 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48266 +
            ((C22092 - C22093 + C22094 - C22095) * C4966 +
             (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
             C24921 * C48460) *
                C48274 +
            C27496 * C26140) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C4966 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48618 +
             (C25462 - C25463 + C25464 - C25465) * C4967 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48266 +
            ((C22272 - C22273 + C22274 - C22275) * C4966 +
             (C22276 - C22277 + C22278 - C22279) * C48618 +
             (C24670 - C24671 + C24672 - C24673) * C4967 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48274 +
            ((C22280 - C22281 + C22282 - C22283) * C4966 +
             (C22284 - C22285 + C22286 - C22287) * C48618 +
             (C27691 - C27692 + C27693 - C27694) * C4967 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C26140) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C4966 +
             (C22097 - C22096 + C22099 - C22098) * C48618 + C24924 * C4967 +
             C24925 * C48460) *
                C48266 +
            ((C22101 - C22100 + C22103 - C22102) * C4966 +
             (C22105 - C22104 + C22107 - C22106) * C48618 + C27897 * C4967 +
             C27898 * C48460) *
                C48274 +
            ((C22109 - C22108 + C22111 - C22110) * C4966 +
             (C22113 - C22112 + C22115 - C22114) * C48618 +
             (C22442 - C22443 + C22444 - C22445) * C4967 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C26140) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C4966 +
             (C22277 - C22276 + C22279 - C22278) * C48618 +
             (C24671 - C24670 + C24673 - C24672) * C4967 +
             (C24675 - C24674 + C24677 - C24676) * C48460) *
                C48266 +
            ((C22281 - C22280 + C22283 - C22282) * C4966 +
             (C22285 - C22284 + C22287 - C22286) * C48618 +
             (C27692 - C27691 + C27694 - C27693) * C4967 +
             (C27696 - C27695 + C27698 - C27697) * C48460) *
                C48274 +
            ((C22289 - C22288 + C22291 - C22290) * C4966 +
             (C22293 - C22292 + C22295 - C22294) * C48618 +
             (C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C4967 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48460) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C4966 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48618 +
            (C24880 - C24881 + C24882 - C24883) * C4967 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48266 +
           ((C22092 - C22093 + C22094 - C22095) * C4966 +
            (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
            C24921 * C48460) *
               C48274 +
           C27496 * C26140) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C4966 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48618 +
            (C25462 - C25463 + C25464 - C25465) * C4967 +
            (C25466 - C25467 + C25468 - C25469) * C48460) *
               C48266 +
           ((C22272 - C22273 + C22274 - C22275) * C4966 +
            (C22276 - C22277 + C22278 - C22279) * C48618 +
            (C24670 - C24671 + C24672 - C24673) * C4967 +
            (C24674 - C24675 + C24676 - C24677) * C48460) *
               C48274 +
           ((C22280 - C22281 + C22282 - C22283) * C4966 +
            (C22284 - C22285 + C22286 - C22287) * C48618 +
            (C27691 - C27692 + C27693 - C27694) * C4967 +
            (C27695 - C27696 + C27697 - C27698) * C48460) *
               C26140) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C4966 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C48618 +
            (C22083 * C1457 - C22089 * C1453 + C48418 * C1910 -
             C22090 * C1907) *
                C4967 +
            (C22083 * C1465 - C22089 * C1458 + C48418 * C1916 -
             C22090 * C1911) *
                C48460) *
               C48266 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C4966 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C48618 +
            (C22083 * C1459 - C22089 * C1454 + C48418 * C1912 -
             C22090 * C1908) *
                C4967 +
            (C22083 * C1466 - C22089 * C1460 + C48418 * C1917 -
             C22090 * C1913) *
                C48460) *
               C48274 +
           ((C22083 * C589 - C22089 * C582 + C48418 * C1275 - C22090 * C1269) *
                C4966 +
            (C22083 * C597 - C22089 * C590 + C48418 * C1281 - C22090 * C1276) *
                C48618 +
            (C22083 * C1461 - C22089 * C1455 + C48418 * C1914 -
             C22090 * C1909) *
                C4967 +
            (C22083 * C1467 - C22089 * C1462 + C48418 * C1918 -
             C22090 * C1915) *
                C48460) *
               C26140) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C4966 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48618 +
             (C24880 - C24881 + C24882 - C24883) * C4967 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48266 +
            ((C22092 - C22093 + C22094 - C22095) * C4966 +
             (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
             C24921 * C48460) *
                C48274 +
            C27496 * C26140) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C4966 +
             (C24885 - C24884 + C24887 - C24886) * C48618 +
             (C24889 - C24888 + C24891 - C24890) * C4967 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48266 +
            (C24924 * C4966 + C24925 * C48618 + C24926 * C4967 +
             C24927 * C48460) *
                C48274 +
            (C27897 * C4966 + C27898 * C48618 +
             (C24468 - C24469 + C24470 - C24471) * C4967 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C26140) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C4966 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48618 +
             (C25462 - C25463 + C25464 - C25465) * C4967 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48266 +
            ((C22272 - C22273 + C22274 - C22275) * C4966 +
             (C22276 - C22277 + C22278 - C22279) * C48618 +
             (C24670 - C24671 + C24672 - C24673) * C4967 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48274 +
            ((C22280 - C22281 + C22282 - C22283) * C4966 +
             (C22284 - C22285 + C22286 - C22287) * C48618 +
             (C27691 - C27692 + C27693 - C27694) * C4967 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C26140) *
               C386 +
           (((C25463 - C25462 + C25465 - C25464) * C4966 +
             (C25467 - C25466 + C25469 - C25468) * C48618 +
             (C25471 - C25470 + C25473 - C25472) * C4967 +
             (C25475 - C25474 + C25477 - C25476) * C48460) *
                C48266 +
            ((C24671 - C24670 + C24673 - C24672) * C4966 +
             (C24675 - C24674 + C24677 - C24676) * C48618 +
             (C24679 - C24678 + C24681 - C24680) * C4967 +
             (C24683 - C24682 + C24685 - C24684) * C48460) *
                C48274 +
            ((C27692 - C27691 + C27694 - C27693) * C4966 +
             (C27696 - C27695 + C27698 - C27697) * C48618 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C4967 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48460) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C4966 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48618 +
             (C24880 - C24881 + C24882 - C24883) * C4967 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48266 +
            ((C22092 - C22093 + C22094 - C22095) * C4966 +
             (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
             C24921 * C48460) *
                C48274 +
            C27496 * C26140) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C4966 +
             (C24885 - C24884 + C24887 - C24886) * C48618 +
             (C24889 - C24888 + C24891 - C24890) * C4967 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48266 +
            (C24924 * C4966 + C24925 * C48618 + C24926 * C4967 +
             C24927 * C48460) *
                C48274 +
            (C27897 * C4966 + C27898 * C48618 +
             (C24468 - C24469 + C24470 - C24471) * C4967 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C26140) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C4966 +
             (C22097 - C22096 + C22099 - C22098) * C48618 + C24924 * C4967 +
             C24925 * C48460) *
                C48266 +
            ((C22101 - C22100 + C22103 - C22102) * C4966 +
             (C22105 - C22104 + C22107 - C22106) * C48618 + C27897 * C4967 +
             C27898 * C48460) *
                C48274 +
            ((C22109 - C22108 + C22111 - C22110) * C4966 +
             (C22113 - C22112 + C22115 - C22114) * C48618 +
             (C22442 - C22443 + C22444 - C22445) * C4967 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C26140) *
               C784 +
           ((C24920 * C4966 + C24921 * C48618 + C24922 * C4967 +
             C24923 * C48460) *
                C48266 +
            (C27491 * C4966 + C27492 * C48618 +
             (C24469 - C24468 + C24471 - C24470) * C4967 +
             (C24473 - C24472 + C24475 - C24474) * C48460) *
                C48274 +
            ((C22443 - C22442 + C22445 - C22444) * C4966 +
             (C22447 - C22446 + C22449 - C22448) * C48618 +
             (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                 C4967 +
             (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                 C48460) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C4966 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48618 +
             (C24880 - C24881 + C24882 - C24883) * C4967 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48266 +
            ((C22092 - C22093 + C22094 - C22095) * C4966 +
             (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
             C24921 * C48460) *
                C48274 +
            C27496 * C26140) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C4966 +
             (C24885 - C24884 + C24887 - C24886) * C48618 +
             (C24889 - C24888 + C24891 - C24890) * C4967 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48266 +
            (C24924 * C4966 + C24925 * C48618 + C24926 * C4967 +
             C24927 * C48460) *
                C48274 +
            (C27897 * C4966 + C27898 * C48618 +
             (C24468 - C24469 + C24470 - C24471) * C4967 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C26140) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C4966 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48618 +
             (C25462 - C25463 + C25464 - C25465) * C4967 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48266 +
            ((C22272 - C22273 + C22274 - C22275) * C4966 +
             (C22276 - C22277 + C22278 - C22279) * C48618 +
             (C24670 - C24671 + C24672 - C24673) * C4967 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48274 +
            ((C22280 - C22281 + C22282 - C22283) * C4966 +
             (C22284 - C22285 + C22286 - C22287) * C48618 +
             (C27691 - C27692 + C27693 - C27694) * C4967 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C26140) *
               C784 +
           (((C25463 - C25462 + C25465 - C25464) * C4966 +
             (C25467 - C25466 + C25469 - C25468) * C48618 +
             (C25471 - C25470 + C25473 - C25472) * C4967 +
             (C25475 - C25474 + C25477 - C25476) * C48460) *
                C48266 +
            ((C24671 - C24670 + C24673 - C24672) * C4966 +
             (C24675 - C24674 + C24677 - C24676) * C48618 +
             (C24679 - C24678 + C24681 - C24680) * C4967 +
             (C24683 - C24682 + C24685 - C24684) * C48460) *
                C48274 +
            ((C27692 - C27691 + C27694 - C27693) * C4966 +
             (C27696 - C27695 + C27698 - C27697) * C48618 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C4967 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48460) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C4966 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48618 +
            (C24880 - C24881 + C24882 - C24883) * C4967 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48266 +
           ((C22092 - C22093 + C22094 - C22095) * C4966 +
            (C22096 - C22097 + C22098 - C22099) * C48618 + C24920 * C4967 +
            C24921 * C48460) *
               C48274 +
           C27496 * C26140) *
              C930 +
          (((C24881 - C24880 + C24883 - C24882) * C4966 +
            (C24885 - C24884 + C24887 - C24886) * C48618 +
            (C24889 - C24888 + C24891 - C24890) * C4967 +
            (C24893 - C24892 + C24895 - C24894) * C48460) *
               C48266 +
           (C24924 * C4966 + C24925 * C48618 + C24926 * C4967 +
            C24927 * C48460) *
               C48274 +
           (C27897 * C4966 + C27898 * C48618 +
            (C24468 - C24469 + C24470 - C24471) * C4967 +
            (C24472 - C24473 + C24474 - C24475) * C48460) *
               C26140) *
              C931 +
          ((C26024 * C4966 + C26025 * C48618 +
            (C26017 - C26016 + C26019 - C26018) * C4967 +
            (C26021 - C26020 + C26023 - C26022) * C48460) *
               C48266 +
           (C24922 * C4966 + C24923 * C48618 +
            (C24913 - C24912 + C24915 - C24914) * C4967 +
            (C24917 - C24916 + C24919 - C24918) * C48460) *
               C48274 +
           ((C24469 - C24468 + C24471 - C24470) * C4966 +
            (C24473 - C24472 + C24475 - C24474) * C48618 +
            (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
             C22090 * C3248) *
                C4967 +
            (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
             C22090 * C3254) *
                C48460) *
               C26140) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C114 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48373) *
               C48691 +
           ((C22092 - C22093 + C22094 - C22095) * C114 +
            (C22096 - C22097 + C22098 - C22099) * C48373) *
               C48684 +
           C22140 * C48671 + C22141 * C48654) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C114 +
            (C22097 - C22096 + C22099 - C22098) * C48373) *
               C48691 +
           ((C22101 - C22100 + C22103 - C22102) * C114 +
            (C22105 - C22104 + C22107 - C22106) * C48373) *
               C48684 +
           ((C22109 - C22108 + C22111 - C22110) * C114 +
            (C22113 - C22112 + C22115 - C22114) * C48373) *
               C48671 +
           ((C22116 - C22117 + C22118 - C22119) * C114 +
            (C22120 - C22121 + C22122 - C22123) * C48373) *
               C48654) *
              C48345 * C48328 * C111 +
          (C22140 * C48691 + C22141 * C48684 +
           ((C22117 - C22116 + C22119 - C22118) * C114 +
            (C22121 - C22120 + C22123 - C22122) * C48373) *
               C48671 +
           ((C22083 * C132 - C22089 * C120 + C48418 * C280 - C22090 * C269) *
                C114 +
            (C22083 * C141 - C22089 * C133 + C48418 * C287 - C22090 * C281) *
                C48373) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C114 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C48373) *
               C23267 +
           ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C114 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48373) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C114 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C48373) *
               C23267 +
           ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C114 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48373) *
               C48271) *
              C48345 * C48328 * C111 +
          (((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
             C23296) *
                C114 +
            (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
             C23304) *
                C48373) *
               C23267 +
           ((C48692 * C128 - C23269 * C118 + C48688 * C276 - C23270 * C267 +
             C48678 * C591 - C23271 * C583 + C48660 * C1277 - C23272 * C1270) *
                C114 +
            (C48692 * C139 - C23269 * C129 + C48688 * C285 - C23270 * C277 +
             C48678 * C598 - C23271 * C592 + C48660 * C1282 - C23272 * C1278) *
                C48373) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C114 +
             (C22277 - C22276 + C22279 - C22278) * C48373) *
                C48691 +
            ((C22281 - C22280 + C22283 - C22282) * C114 +
             (C22285 - C22284 + C22287 - C22286) * C48373) *
                C48684 +
            ((C22289 - C22288 + C22291 - C22290) * C114 +
             (C22293 - C22292 + C22295 - C22294) * C48373) *
                C48671 +
            ((C22083 * C278 - C22089 * C268 + C48418 * C593 - C22090 * C584) *
                 C114 +
             (C22083 * C286 - C22089 * C279 + C48418 * C599 - C22090 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C114 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48373) *
                C23267 +
            ((C48692 * C274 - C23269 * C266 + C48688 * C589 - C23270 * C582 +
              C48678 * C1275 - C23271 * C1269 + C48660 * C1756 -
              C23272 * C1751) *
                 C114 +
             (C48692 * C284 - C23269 * C275 + C48688 * C597 - C23270 * C590 +
              C48678 * C1281 - C23271 * C1276 + C48660 * C1760 -
              C23272 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C386 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C386 +
           (((C22427 - C22426 + C22429 - C22428) * C114 +
             (C22431 - C22430 + C22433 - C22432) * C48373) *
                C48691 +
            ((C22435 - C22434 + C22437 - C22436) * C114 +
             (C22439 - C22438 + C22441 - C22440) * C48373) *
                C48684 +
            ((C22443 - C22442 + C22445 - C22444) * C114 +
             (C22447 - C22446 + C22449 - C22448) * C48373) *
                C48671 +
            ((C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                 C114 +
             (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C386 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C386 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C114 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48373) *
                C23267 +
            ((C48692 * C398 - C23269 * C390 + C48688 * C691 - C23270 * C684 +
              C48678 * C1461 - C23271 * C1455 + C48660 * C1914 -
              C23272 * C1909) *
                 C114 +
             (C48692 * C408 - C23269 * C399 + C48688 * C699 - C23270 * C692 +
              C48678 * C1467 - C23271 * C1462 + C48660 * C1918 -
              C23272 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C114 +
             (C22277 - C22276 + C22279 - C22278) * C48373) *
                C48691 +
            ((C22281 - C22280 + C22283 - C22282) * C114 +
             (C22285 - C22284 + C22287 - C22286) * C48373) *
                C48684 +
            ((C22289 - C22288 + C22291 - C22290) * C114 +
             (C22293 - C22292 + C22295 - C22294) * C48373) *
                C48671 +
            ((C22083 * C278 - C22089 * C268 + C48418 * C593 - C22090 * C584) *
                 C114 +
             (C22083 * C286 - C22089 * C279 + C48418 * C599 - C22090 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C114 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48373) *
                C23267 +
            ((C48692 * C274 - C23269 * C266 + C48688 * C589 - C23270 * C582 +
              C48678 * C1275 - C23271 * C1269 + C48660 * C1756 -
              C23272 * C1751) *
                 C114 +
             (C48692 * C284 - C23269 * C275 + C48688 * C597 - C23270 * C590 +
              C48678 * C1281 - C23271 * C1276 + C48660 * C1760 -
              C23272 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C114 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48373) *
               C48691 +
           ((C22092 - C22093 + C22094 - C22095) * C114 +
            (C22096 - C22097 + C22098 - C22099) * C48373) *
               C48684 +
           C22140 * C48671 + C22141 * C48654) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C114 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48373) *
               C48691 +
           ((C22272 - C22273 + C22274 - C22275) * C114 +
            (C22276 - C22277 + C22278 - C22279) * C48373) *
               C48684 +
           ((C22280 - C22281 + C22282 - C22283) * C114 +
            (C22284 - C22285 + C22286 - C22287) * C48373) *
               C48671 +
           ((C22288 - C22289 + C22290 - C22291) * C114 +
            (C22292 - C22293 + C22294 - C22295) * C48373) *
               C48654) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C114 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C48373) *
               C48691 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C114 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C48373) *
               C48684 +
           ((C22083 * C589 - C22089 * C582 + C48418 * C1275 - C22090 * C1269) *
                C114 +
            (C22083 * C597 - C22089 * C590 + C48418 * C1281 - C22090 * C1276) *
                C48373) *
               C48671 +
           ((C22083 * C591 - C22089 * C583 + C48418 * C1277 - C22090 * C1270) *
                C114 +
            (C22083 * C598 - C22089 * C592 + C48418 * C1282 - C22090 * C1278) *
                C48373) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C114 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C48373) *
               C23267 +
           ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C114 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48373) *
               C48271) *
              C48345 * C576 +
          (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C114 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C48373) *
               C23267 +
           ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C114 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48373) *
               C48271) *
              C48345 * C577 +
          (((C48692 * C585 - C23269 * C580 + C48688 * C1271 - C23270 * C1267 +
             C48678 * C1752 - C23271 * C1749 + C48660 * C9124 -
             C23272 * C9122) *
                C114 +
            (C48692 * C595 - C23269 * C586 + C48688 * C1279 - C23270 * C1272 +
             C48678 * C1758 - C23271 * C1753 + C48660 * C9128 -
             C23272 * C9125) *
                C48373) *
               C23267 +
           ((C48692 * C587 - C23269 * C581 + C48688 * C1273 - C23270 * C1268 +
             C48678 * C1754 - C23271 * C1750 + C48660 * C9126 -
             C23272 * C9123) *
                C114 +
            (C48692 * C596 - C23269 * C588 + C48688 * C1280 - C23270 * C1274 +
             C48678 * C1759 - C23271 * C1755 + C48660 * C9129 -
             C23272 * C9127) *
                C48373) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C386 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C386 +
           (((C22083 * C687 - C22089 * C682 + C48418 * C1457 - C22090 * C1453) *
                 C114 +
             (C22083 * C697 - C22089 * C688 + C48418 * C1465 - C22090 * C1458) *
                 C48373) *
                C48691 +
            ((C22083 * C689 - C22089 * C683 + C48418 * C1459 - C22090 * C1454) *
                 C114 +
             (C22083 * C698 - C22089 * C690 + C48418 * C1466 - C22090 * C1460) *
                 C48373) *
                C48684 +
            ((C22083 * C691 - C22089 * C684 + C48418 * C1461 - C22090 * C1455) *
                 C114 +
             (C22083 * C699 - C22089 * C692 + C48418 * C1467 - C22090 * C1462) *
                 C48373) *
                C48671 +
            ((C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C114 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C386 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C510 +
          ((((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C386 +
           (((C48692 * C687 - C23269 * C682 + C48688 * C1457 - C23270 * C1453 +
              C48678 * C1910 - C23271 * C1907 + C48660 * C9214 -
              C23272 * C9212) *
                 C114 +
             (C48692 * C697 - C23269 * C688 + C48688 * C1465 - C23270 * C1458 +
              C48678 * C1916 - C23271 * C1911 + C48660 * C9218 -
              C23272 * C9215) *
                 C48373) *
                C23267 +
            ((C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
              C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
              C23272 * C9213) *
                 C114 +
             (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
              C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
              C23272 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C784 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C114 +
             (C22097 - C22096 + C22099 - C22098) * C48373) *
                C48691 +
            ((C22101 - C22100 + C22103 - C22102) * C114 +
             (C22105 - C22104 + C22107 - C22106) * C48373) *
                C48684 +
            ((C22109 - C22108 + C22111 - C22110) * C114 +
             (C22113 - C22112 + C22115 - C22114) * C48373) *
                C48671 +
            ((C22116 - C22117 + C22118 - C22119) * C114 +
             (C22120 - C22121 + C22122 - C22123) * C48373) *
                C48654) *
               C784 +
           (((C22427 - C22426 + C22429 - C22428) * C114 +
             (C22431 - C22430 + C22433 - C22432) * C48373) *
                C48691 +
            ((C22435 - C22434 + C22437 - C22436) * C114 +
             (C22439 - C22438 + C22441 - C22440) * C48373) *
                C48684 +
            ((C22443 - C22442 + C22445 - C22444) * C114 +
             (C22447 - C22446 + C22449 - C22448) * C48373) *
                C48671 +
            ((C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                 C114 +
             (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C784 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C114 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48373) *
                C23267 +
            ((C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
              C23297) *
                 C114 +
             (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
              C23305) *
                 C48373) *
                C48271) *
               C784 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C114 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48373) *
                C23267 +
            ((C48692 * C398 - C23269 * C390 + C48688 * C691 - C23270 * C684 +
              C48678 * C1461 - C23271 * C1455 + C48660 * C1914 -
              C23272 * C1909) *
                 C114 +
             (C48692 * C408 - C23269 * C399 + C48688 * C699 - C23270 * C692 +
              C48678 * C1467 - C23271 * C1462 + C48660 * C1918 -
              C23272 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C114 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48373) *
                C48691 +
            ((C22092 - C22093 + C22094 - C22095) * C114 +
             (C22096 - C22097 + C22098 - C22099) * C48373) *
                C48684 +
            C22140 * C48671 + C22141 * C48654) *
               C784 +
           (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                 C114 +
             (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                 C48373) *
                C48691 +
            ((C22426 - C22427 + C22428 - C22429) * C114 +
             (C22430 - C22431 + C22432 - C22433) * C48373) *
                C48684 +
            ((C22434 - C22435 + C22436 - C22437) * C114 +
             (C22438 - C22439 + C22440 - C22441) * C48373) *
                C48671 +
            ((C22442 - C22443 + C22444 - C22445) * C114 +
             (C22446 - C22447 + C22448 - C22449) * C48373) *
                C48654) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C114 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48373) *
                C48691 +
            ((C22272 - C22273 + C22274 - C22275) * C114 +
             (C22276 - C22277 + C22278 - C22279) * C48373) *
                C48684 +
            ((C22280 - C22281 + C22282 - C22283) * C114 +
             (C22284 - C22285 + C22286 - C22287) * C48373) *
                C48671 +
            ((C22288 - C22289 + C22290 - C22291) * C114 +
             (C22292 - C22293 + C22294 - C22295) * C48373) *
                C48654) *
               C784 +
           (((C22083 * C687 - C22089 * C682 + C48418 * C1457 - C22090 * C1453) *
                 C114 +
             (C22083 * C697 - C22089 * C688 + C48418 * C1465 - C22090 * C1458) *
                 C48373) *
                C48691 +
            ((C22083 * C689 - C22089 * C683 + C48418 * C1459 - C22090 * C1454) *
                 C114 +
             (C22083 * C698 - C22089 * C690 + C48418 * C1466 - C22090 * C1460) *
                 C48373) *
                C48684 +
            ((C22083 * C691 - C22089 * C684 + C48418 * C1461 - C22090 * C1455) *
                 C114 +
             (C22083 * C699 - C22089 * C692 + C48418 * C1467 - C22090 * C1462) *
                 C48373) *
                C48671 +
            ((C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C114 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
              C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                 C114 +
             (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
              C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                 C48373) *
                C23267 +
            ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
              C23281) *
                 C114 +
             (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
              C23289) *
                 C48373) *
                C48271) *
               C784 +
           (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
              C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
              C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C23267 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C114 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48373) *
                C48271) *
               C48647) *
              C260 +
          ((((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
              C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
              C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C23267 +
            ((C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
              C23443) *
                 C114 +
             (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
              C23451) *
                 C48373) *
                C48271) *
               C784 +
           (((C48692 * C687 - C23269 * C682 + C48688 * C1457 - C23270 * C1453 +
              C48678 * C1910 - C23271 * C1907 + C48660 * C9214 -
              C23272 * C9212) *
                 C114 +
             (C48692 * C697 - C23269 * C688 + C48688 * C1465 - C23270 * C1458 +
              C48678 * C1916 - C23271 * C1911 + C48660 * C9218 -
              C23272 * C9215) *
                 C48373) *
                C23267 +
            ((C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
              C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
              C23272 * C9213) *
                 C114 +
             (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
              C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
              C23272 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C114 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48373) *
               C48691 +
           ((C22092 - C22093 + C22094 - C22095) * C114 +
            (C22096 - C22097 + C22098 - C22099) * C48373) *
               C48684 +
           C22140 * C48671 + C22141 * C48654) *
              C930 +
          (((C22089 * C388 - C22083 * C394 + C22090 * C682 - C48418 * C687) *
                C114 +
            (C22089 * C395 - C22083 * C406 + C22090 * C688 - C48418 * C697) *
                C48373) *
               C48691 +
           ((C22426 - C22427 + C22428 - C22429) * C114 +
            (C22430 - C22431 + C22432 - C22433) * C48373) *
               C48684 +
           ((C22434 - C22435 + C22436 - C22437) * C114 +
            (C22438 - C22439 + C22440 - C22441) * C48373) *
               C48671 +
           ((C22442 - C22443 + C22444 - C22445) * C114 +
            (C22446 - C22447 + C22448 - C22449) * C48373) *
               C48654) *
              C931 +
          (((C22083 * C938 - C22089 * C933 + C48418 * C2327 - C22090 * C2321) *
                C114 +
            (C22083 * C948 - C22089 * C939 + C48418 * C2339 - C22090 * C2329) *
                C48373) *
               C48691 +
           ((C22083 * C940 - C22089 * C934 + C48418 * C2331 - C22090 * C2323) *
                C114 +
            (C22083 * C949 - C22089 * C941 + C48418 * C2341 - C22090 * C2333) *
                C48373) *
               C48684 +
           ((C22083 * C942 - C22089 * C935 + C48418 * C2335 - C22090 * C2325) *
                C114 +
            (C22083 * C950 - C22089 * C943 + C48418 * C2343 - C22090 * C2337) *
                C48373) *
               C48671 +
           ((C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                C114 +
            (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                C48373) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C114 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C48373) *
               C23267 +
           ((C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C114 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48373) *
               C48271) *
              C930 +
          (((C23269 * C388 - C48692 * C394 + C23270 * C682 - C48688 * C687 +
             C23271 * C1453 - C48678 * C1457 + C23272 * C1907 -
             C48660 * C1910) *
                C114 +
            (C23269 * C395 - C48692 * C406 + C23270 * C688 - C48688 * C697 +
             C23271 * C1458 - C48678 * C1465 + C23272 * C1911 -
             C48660 * C1916) *
                C48373) *
               C23267 +
           ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C114 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48373) *
               C48271) *
              C931 +
          (((C48692 * C938 - C23269 * C933 + C48688 * C2327 - C23270 * C2321 +
             C48678 * C2328 - C23271 * C2322 + C48660 * C9682 -
             C23272 * C9680) *
                C114 +
            (C48692 * C948 - C23269 * C939 + C48688 * C2339 - C23270 * C2329 +
             C48678 * C2340 - C23271 * C2330 + C48660 * C9686 -
             C23272 * C9684) *
                C48373) *
               C23267 +
           ((C48692 * C940 - C23269 * C934 + C48688 * C2331 - C23270 * C2323 +
             C48678 * C2332 - C23271 * C2324 + C48660 * C9945 -
             C23272 * C9944) *
                C114 +
            (C48692 * C949 - C23269 * C941 + C48688 * C2341 - C23270 * C2333 +
             C48678 * C2342 - C23271 * C2334 + C48660 * C9947 -
             C23272 * C9946) *
                C48373) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C30748 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C30746 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
               C48595 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
            C29553 * C30749 + C29554 * C48460) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C30748 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C30746 +
            C29555 * C30749 + C29556 * C48460) *
               C48595 +
           ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C30748 +
            (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C30746 +
            (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C30749 +
            (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C26189 * C30748 + C26190 * C30746 +
            (C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C30749 +
            (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48460) *
               C48595 +
           ((C26170 - C26169 + C26172 - C26171 + C26174 - C26173) * C30748 +
            (C26176 - C26175 + C26178 - C26177 + C26180 - C26179) * C30746 +
            (C48414 * C400 - C47273 * C391 + C48421 * C693 - C47265 * C685 +
             C26137 * C1463 - C47279 * C1456) *
                C30749 +
            (C48414 * C409 - C47273 * C401 + C48421 * C700 - C47265 * C694 +
             C26137 * C1468 - C47279 * C1464) *
                C48460) *
               C48271) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C30748 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C30746 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C48595 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
             C29553 * C30749 + C29554 * C48460) *
                C48271) *
               C48345 * C260 +
           (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C30748 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C30746 +
             (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C30749 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
                C48595 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C30748 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C30746 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C30749 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C30748 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C30746 +
             C29555 * C30749 + C29556 * C48460) *
                C48595 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C30748 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C30746 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C30749 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C30748 +
             (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C30746 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C30749 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48460) *
                C48595 +
            ((C26353 - C26352 + C26355 - C26354 + C26357 - C26356) * C30748 +
             (C26359 - C26358 + C26361 - C26360 + C26363 - C26362) * C30746 +
             (C48414 * C691 - C47273 * C684 + C48421 * C1461 - C47265 * C1455 +
              C26137 * C1914 - C47279 * C1909) *
                 C30749 +
             (C48414 * C699 - C47273 * C692 + C48421 * C1467 - C47265 * C1462 +
              C26137 * C1918 - C47279 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C30748 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C30746 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C48595 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
             C29553 * C30749 + C29554 * C48460) *
                C48271) *
               C386 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C30748 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C30746 +
             (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C30749 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48460) *
                C48595 +
            (C29555 * C30748 + C29556 * C30746 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C30749 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C30748 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C30746 +
             C29555 * C30749 + C29556 * C48460) *
                C48595 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C30748 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C30746 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C30749 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C386 +
           ((C29553 * C30748 + C29554 * C30746 +
             (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C30749 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48460) *
                C48595 +
            ((C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C30748 +
             (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C30746 +
             (C48414 * C942 - C47273 * C935 + C48421 * C2335 - C47265 * C2325 +
              C26137 * C2336 - C47279 * C2326) *
                 C30749 +
             (C48414 * C950 - C47273 * C943 + C48421 * C2343 - C47265 * C2337 +
              C26137 * C2344 - C47279 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C30748 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C30746 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C48595 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
             C29553 * C30749 + C29554 * C48460) *
                C48271) *
               C48345 * C510 +
           (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C30748 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C30746 +
             (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C30749 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
                C48595 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C30748 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C30746 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C30749 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C30748 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C30746 +
             C29555 * C30749 + C29556 * C48460) *
                C48595 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C30748 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C30746 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C30749 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C48345 * C510 +
           (((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C30748 +
             (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C30746 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C30749 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48460) *
                C48595 +
            ((C26353 - C26352 + C26355 - C26354 + C26357 - C26356) * C30748 +
             (C26359 - C26358 + C26361 - C26360 + C26363 - C26362) * C30746 +
             (C48414 * C691 - C47273 * C684 + C48421 * C1461 - C47265 * C1455 +
              C26137 * C1914 - C47279 * C1909) *
                 C30749 +
             (C48414 * C699 - C47273 * C692 + C48421 * C1467 - C47265 * C1462 +
              C26137 * C1918 - C47279 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C30748 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C30746 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
               C48595 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
            C29553 * C30749 + C29554 * C48460) *
               C48271) *
              C48345 * C576 +
          (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C30748 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C30746 +
            (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C30749 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
               C48595 +
           ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C30748 +
            (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C30746 +
            (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C30749 +
            (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
               C48271) *
              C48345 * C577 +
          (((C48414 * C585 - C47273 * C580 + C48421 * C1271 - C47265 * C1267 +
             C26137 * C1752 - C47279 * C1749) *
                C30748 +
            (C48414 * C595 - C47273 * C586 + C48421 * C1279 - C47265 * C1272 +
             C26137 * C1758 - C47279 * C1753) *
                C30746 +
            (C48414 * C1457 - C47273 * C1453 + C48421 * C1910 - C47265 * C1907 +
             C26137 * C9214 - C47279 * C9212) *
                C30749 +
            (C48414 * C1465 - C47273 * C1458 + C48421 * C1916 - C47265 * C1911 +
             C26137 * C9218 - C47279 * C9215) *
                C48460) *
               C48595 +
           ((C48414 * C587 - C47273 * C581 + C48421 * C1273 - C47265 * C1268 +
             C26137 * C1754 - C47279 * C1750) *
                C30748 +
            (C48414 * C596 - C47273 * C588 + C48421 * C1280 - C47265 * C1274 +
             C26137 * C1759 - C47279 * C1755) *
                C30746 +
            (C48414 * C1459 - C47273 * C1454 + C48421 * C1912 - C47265 * C1908 +
             C26137 * C9216 - C47279 * C9213) *
                C30749 +
            (C48414 * C1466 - C47273 * C1460 + C48421 * C1917 - C47265 * C1913 +
             C26137 * C9219 - C47279 * C9217) *
                C48460) *
               C48271) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C30748 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C30746 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C48595 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
             C29553 * C30749 + C29554 * C48460) *
                C48271) *
               C386 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C30748 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C30746 +
             (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C30749 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48460) *
                C48595 +
            (C29555 * C30748 + C29556 * C30746 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C30749 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C510 +
          ((((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C30748 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C30746 +
             (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C30749 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
                C48595 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C30748 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C30746 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C30749 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C386 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C30748 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C30746 +
             (C48414 * C2327 - C47273 * C2321 + C48421 * C2328 -
              C47265 * C2322 + C26137 * C9682 - C47279 * C9680) *
                 C30749 +
             (C48414 * C2339 - C47273 * C2329 + C48421 * C2340 -
              C47265 * C2330 + C26137 * C9686 - C47279 * C9684) *
                 C48460) *
                C48595 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C30748 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C30746 +
             (C48414 * C2331 - C47273 * C2323 + C48421 * C2332 -
              C47265 * C2324 + C26137 * C9945 - C47279 * C9944) *
                 C30749 +
             (C48414 * C2341 - C47273 * C2333 + C48421 * C2342 -
              C47265 * C2334 + C26137 * C9947 - C47279 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C30748 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C30746 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C48595 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
             C29553 * C30749 + C29554 * C48460) *
                C48271) *
               C784 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C30748 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C30746 +
             (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C30749 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48460) *
                C48595 +
            (C29555 * C30748 + C29556 * C30746 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C30749 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C30748 +
             (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C30746 +
             C29555 * C30749 + C29556 * C48460) *
                C48595 +
            ((C26158 - C26157 + C26160 - C26159 + C26162 - C26161) * C30748 +
             (C26164 - C26163 + C26166 - C26165 + C26168 - C26167) * C30746 +
             (C26522 - C26523 + C26524 - C26525 + C26526 - C26527) * C30749 +
             (C26528 - C26529 + C26530 - C26531 + C26532 - C26533) * C48460) *
                C48271) *
               C784 +
           ((C29553 * C30748 + C29554 * C30746 +
             (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C30749 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48460) *
                C48595 +
            ((C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C30748 +
             (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C30746 +
             (C48414 * C942 - C47273 * C935 + C48421 * C2335 - C47265 * C2325 +
              C26137 * C2336 - C47279 * C2326) *
                 C30749 +
             (C48414 * C950 - C47273 * C943 + C48421 * C2343 - C47265 * C2337 +
              C26137 * C2344 - C47279 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
              C26137 * C585 - C47279 * C580) *
                 C30748 +
             (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
              C26137 * C595 - C47279 * C586) *
                 C30746 +
             (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
                C48595 +
            ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
             (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
             C29553 * C30749 + C29554 * C48460) *
                C48271) *
               C784 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C30748 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C30746 +
             (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C30749 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48460) *
                C48595 +
            (C29555 * C30748 + C29556 * C30746 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C30749 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
                C48271) *
               C48647) *
              C260 +
          ((((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
              C47279 * C1267 - C26137 * C1271) *
                 C30748 +
             (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
              C47279 * C1272 - C26137 * C1279) *
                 C30746 +
             (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C30749 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48460) *
                C48595 +
            ((C26340 - C26341 + C26342 - C26343 + C26344 - C26345) * C30748 +
             (C26346 - C26347 + C26348 - C26349 + C26350 - C26351) * C30746 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C30749 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48460) *
                C48271) *
               C784 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C30748 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C30746 +
             (C48414 * C2327 - C47273 * C2321 + C48421 * C2328 -
              C47265 * C2322 + C26137 * C9682 - C47279 * C9680) *
                 C30749 +
             (C48414 * C2339 - C47273 * C2329 + C48421 * C2340 -
              C47265 * C2330 + C26137 * C9686 - C47279 * C9684) *
                 C48460) *
                C48595 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C30748 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C30746 +
             (C48414 * C2331 - C47273 * C2323 + C48421 * C2332 -
              C47265 * C2324 + C26137 * C9945 - C47279 * C9944) *
                 C30749 +
             (C48414 * C2341 - C47273 * C2333 + C48421 * C2342 -
              C47265 * C2334 + C26137 * C9947 - C47279 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C30748 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C30746 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C30749 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48460) *
               C48595 +
           ((C26145 - C26146 + C26147 - C26148 + C26149 - C26150) * C30748 +
            (C26151 - C26152 + C26153 - C26154 + C26155 - C26156) * C30746 +
            C29553 * C30749 + C29554 * C48460) *
               C48271) *
              C930 +
          (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C30748 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C30746 +
            (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C30749 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48460) *
               C48595 +
           (C29555 * C30748 + C29556 * C30746 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C30749 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48460) *
               C48271) *
              C931 +
          (((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C30748 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C30746 +
            (C48414 * C2804 - C47273 * C2800 + C48421 * C3249 - C47265 * C3246 +
             C26137 * C10096 - C47279 * C10094) *
                C30749 +
            (C48414 * C2812 - C47273 * C2805 + C48421 * C3255 - C47265 * C3250 +
             C26137 * C10100 - C47279 * C10097) *
                C48460) *
               C48595 +
           ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C30748 +
            (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C30746 +
            (C48414 * C2806 - C47273 * C2801 + C48421 * C3251 - C47265 * C3247 +
             C26137 * C10098 - C47279 * C10095) *
                C30749 +
            (C48414 * C2813 - C47273 * C2807 + C48421 * C3256 - C47265 * C3252 +
             C26137 * C10101 - C47279 * C10099) *
                C48460) *
               C48271) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
            C26137 * C585 - C47279 * C580) *
               C47360 +
           (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
            C26137 * C595 - C47279 * C586) *
               C48456 +
           (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
           (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
           (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
           (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
              C48261 * C48345 * C48328 * C110 +
          ((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C47360 +
           (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48456 +
           C29555 * C47352 + C29556 * C48463 +
           (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47366 +
           (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C36177) *
              C48261 * C48345 * C48328 * C111 +
          (C26189 * C47360 + C26190 * C48456 +
           (C26523 - C26522 + C26525 - C26524 + C26527 - C26526) * C47352 +
           (C26529 - C26528 + C26531 - C26530 + C26533 - C26532) * C48463 +
           (C48414 * C942 - C47273 * C935 + C48421 * C2335 - C47265 * C2325 +
            C26137 * C2336 - C47279 * C2326) *
               C47366 +
           (C48414 * C950 - C47273 * C943 + C48421 * C2343 - C47265 * C2337 +
            C26137 * C2344 - C47279 * C2338) *
               C36177) *
              C48261 * C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C47360 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48456 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
            (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
               C48261 * C48345 * C260 +
           ((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C47360 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C48456 +
            (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47352 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48463 +
            (C47273 * C2321 - C48414 * C2327 + C47265 * C2322 - C48421 * C2328 +
             C47279 * C9680 - C26137 * C9682) *
                C47366 +
            (C47273 * C2329 - C48414 * C2339 + C47265 * C2330 - C48421 * C2340 +
             C47279 * C9684 - C26137 * C9686) *
                C36177) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C47360 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48456 +
            C29555 * C47352 + C29556 * C48463 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47366 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C36177) *
               C48261 * C48345 * C260 +
           ((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C47360 +
            (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C48456 +
            (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C47352 +
            (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48463 +
            (C48414 * C2331 - C47273 * C2323 + C48421 * C2332 - C47265 * C2324 +
             C26137 * C9945 - C47279 * C9944) *
                C47366 +
            (C48414 * C2341 - C47273 * C2333 + C48421 * C2342 - C47265 * C2334 +
             C26137 * C9947 - C47279 * C9946) *
                C36177) *
               C48261 * C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C47360 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48456 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
            (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
               C48261 * C386 +
           ((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47360 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48456 +
            (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47352 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48463 +
            (C47273 * C2800 - C48414 * C2804 + C47265 * C3246 - C48421 * C3249 +
             C47279 * C10094 - C26137 * C10096) *
                C47366 +
            (C47273 * C2805 - C48414 * C2812 + C47265 * C3250 - C48421 * C3255 +
             C47279 * C10097 - C26137 * C10100) *
                C36177) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C47360 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48456 +
            C29555 * C47352 + C29556 * C48463 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47366 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C36177) *
               C48261 * C386 +
           (C29553 * C47360 + C29554 * C48456 +
            (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C47352 +
            (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48463 +
            (C48414 * C2806 - C47273 * C2801 + C48421 * C3251 - C47265 * C3247 +
             C26137 * C10098 - C47279 * C10095) *
                C47366 +
            (C48414 * C2813 - C47273 * C2807 + C48421 * C3256 - C47265 * C3252 +
             C26137 * C10101 - C47279 * C10099) *
                C36177) *
               C48261 * C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C47360 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48456 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
            (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
               C48261 * C48345 * C510 +
           ((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C47360 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C48456 +
            (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47352 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48463 +
            (C47273 * C2321 - C48414 * C2327 + C47265 * C2322 - C48421 * C2328 +
             C47279 * C9680 - C26137 * C9682) *
                C47366 +
            (C47273 * C2329 - C48414 * C2339 + C47265 * C2330 - C48421 * C2340 +
             C47279 * C9684 - C26137 * C9686) *
                C36177) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C47360 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48456 +
            C29555 * C47352 + C29556 * C48463 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47366 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C36177) *
               C48261 * C48345 * C510 +
           ((C26341 - C26340 + C26343 - C26342 + C26345 - C26344) * C47360 +
            (C26347 - C26346 + C26349 - C26348 + C26351 - C26350) * C48456 +
            (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C47352 +
            (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48463 +
            (C48414 * C2331 - C47273 * C2323 + C48421 * C2332 - C47265 * C2324 +
             C26137 * C9945 - C47279 * C9944) *
                C47366 +
            (C48414 * C2341 - C47273 * C2333 + C48421 * C2342 - C47265 * C2334 +
             C26137 * C9947 - C47279 * C9946) *
                C36177) *
               C48261 * C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
            C26137 * C585 - C47279 * C580) *
               C47360 +
           (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
            C26137 * C595 - C47279 * C586) *
               C48456 +
           (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
           (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
           (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
           (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
              C48261 * C48345 * C576 +
          ((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
            C47279 * C1267 - C26137 * C1271) *
               C47360 +
           (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
            C47279 * C1272 - C26137 * C1279) *
               C48456 +
           (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47352 +
           (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48463 +
           (C47273 * C2321 - C48414 * C2327 + C47265 * C2322 - C48421 * C2328 +
            C47279 * C9680 - C26137 * C9682) *
               C47366 +
           (C47273 * C2329 - C48414 * C2339 + C47265 * C2330 - C48421 * C2340 +
            C47279 * C9684 - C26137 * C9686) *
               C36177) *
              C48261 * C48345 * C577 +
          ((C48414 * C585 - C47273 * C580 + C48421 * C1271 - C47265 * C1267 +
            C26137 * C1752 - C47279 * C1749) *
               C47360 +
           (C48414 * C595 - C47273 * C586 + C48421 * C1279 - C47265 * C1272 +
            C26137 * C1758 - C47279 * C1753) *
               C48456 +
           (C48414 * C1457 - C47273 * C1453 + C48421 * C1910 - C47265 * C1907 +
            C26137 * C9214 - C47279 * C9212) *
               C47352 +
           (C48414 * C1465 - C47273 * C1458 + C48421 * C1916 - C47265 * C1911 +
            C26137 * C9218 - C47279 * C9215) *
               C48463 +
           (C48414 * C2328 - C47273 * C2322 + C48421 * C9682 - C47265 * C9680 +
            C26137 * C9683 - C47279 * C9681) *
               C47366 +
           (C48414 * C2340 - C47273 * C2330 + C48421 * C9686 - C47265 * C9684 +
            C26137 * C9687 - C47279 * C9685) *
               C36177) *
              C48261 * C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C47360 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48456 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
            (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
               C48261 * C386 +
           ((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47360 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48456 +
            (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47352 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48463 +
            (C47273 * C2800 - C48414 * C2804 + C47265 * C3246 - C48421 * C3249 +
             C47279 * C10094 - C26137 * C10096) *
                C47366 +
            (C47273 * C2805 - C48414 * C2812 + C47265 * C3250 - C48421 * C3255 +
             C47279 * C10097 - C26137 * C10100) *
                C36177) *
               C48261 * C48647) *
              C510 +
          (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C47360 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C48456 +
            (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47352 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48463 +
            (C46726 - C46727 + C46728 - C46729 + C46730 - C46731) * C47366 +
            (C46732 - C46733 + C46734 - C46735 + C46736 - C46737) * C36177) *
               C48261 * C386 +
           ((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C47360 +
            (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48456 +
            (C46727 - C46726 + C46729 - C46728 + C46731 - C46730) * C47352 +
            (C46733 - C46732 + C46735 - C46734 + C46737 - C46736) * C48463 +
            (C48414 * C3249 - C47273 * C3246 + C48421 * C10096 -
             C47265 * C10094 + C26137 * C10541 - C47279 * C10540) *
                C47366 +
            (C48414 * C3255 - C47273 * C3250 + C48421 * C10100 -
             C47265 * C10097 + C26137 * C10543 - C47279 * C10542) *
                C36177) *
               C48261 * C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C47360 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48456 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
            (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
               C48261 * C784 +
           ((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47360 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48456 +
            (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47352 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48463 +
            (C47273 * C2800 - C48414 * C2804 + C47265 * C3246 - C48421 * C3249 +
             C47279 * C10094 - C26137 * C10096) *
                C47366 +
            (C47273 * C2805 - C48414 * C2812 + C47265 * C3250 - C48421 * C3255 +
             C47279 * C10097 - C26137 * C10100) *
                C36177) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C26146 - C26145 + C26148 - C26147 + C26150 - C26149) * C47360 +
            (C26152 - C26151 + C26154 - C26153 + C26156 - C26155) * C48456 +
            C29555 * C47352 + C29556 * C48463 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47366 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C36177) *
               C48261 * C784 +
           (C29553 * C47360 + C29554 * C48456 +
            (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C47352 +
            (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48463 +
            (C48414 * C2806 - C47273 * C2801 + C48421 * C3251 - C47265 * C3247 +
             C26137 * C10098 - C47279 * C10095) *
                C47366 +
            (C48414 * C2813 - C47273 * C2807 + C48421 * C3256 - C47265 * C3252 +
             C26137 * C10101 - C47279 * C10099) *
                C36177) *
               C48261 * C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
             C26137 * C585 - C47279 * C580) *
                C47360 +
            (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
             C26137 * C595 - C47279 * C586) *
                C48456 +
            (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
            (C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47366 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C36177) *
               C48261 * C784 +
           ((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47360 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48456 +
            (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47352 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48463 +
            (C47273 * C2800 - C48414 * C2804 + C47265 * C3246 - C48421 * C3249 +
             C47279 * C10094 - C26137 * C10096) *
                C47366 +
            (C47273 * C2805 - C48414 * C2812 + C47265 * C3250 - C48421 * C3255 +
             C47279 * C10097 - C26137 * C10100) *
                C36177) *
               C48261 * C48647) *
              C260 +
          (((C47273 * C264 - C48414 * C270 + C47265 * C580 - C48421 * C585 +
             C47279 * C1267 - C26137 * C1271) *
                C47360 +
            (C47273 * C271 - C48414 * C282 + C47265 * C586 - C48421 * C595 +
             C47279 * C1272 - C26137 * C1279) *
                C48456 +
            (C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47352 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48463 +
            (C46726 - C46727 + C46728 - C46729 + C46730 - C46731) * C47366 +
            (C46732 - C46733 + C46734 - C46735 + C46736 - C46737) * C36177) *
               C48261 * C784 +
           ((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C47360 +
            (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48456 +
            (C46727 - C46726 + C46729 - C46728 + C46731 - C46730) * C47352 +
            (C46733 - C46732 + C46735 - C46734 + C46737 - C46736) * C48463 +
            (C48414 * C3249 - C47273 * C3246 + C48421 * C10096 -
             C47265 * C10094 + C26137 * C10541 - C47279 * C10540) *
                C47366 +
            (C48414 * C3255 - C47273 * C3250 + C48421 * C10100 -
             C47265 * C10097 + C26137 * C10543 - C47279 * C10542) *
                C36177) *
               C48261 * C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48414 * C122 - C47273 * C115 + C48421 * C270 - C47265 * C264 +
            C26137 * C585 - C47279 * C580) *
               C47360 +
           (C48414 * C136 - C47273 * C123 + C48421 * C282 - C47265 * C271 +
            C26137 * C595 - C47279 * C586) *
               C48456 +
           (C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47352 +
           (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48463 +
           C47160 * C47366 + C47161 * C36177) *
              C48261 * C930 +
          ((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47360 +
           (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48456 +
           (C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47352 +
           (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48463 +
           (C47146 - C47147 + C47148 - C47149 + C47150 - C47151) * C47366 +
           (C47152 - C47153 + C47154 - C47155 + C47156 - C47157) * C36177) *
              C48261 * C931 +
          (C47160 * C47360 + C47161 * C48456 +
           (C47147 - C47146 + C47149 - C47148 + C47151 - C47150) * C47352 +
           (C47153 - C47152 + C47155 - C47154 + C47157 - C47156) * C48463 +
           (C48414 * C3671 - C47273 * C3668 + C48421 * C10972 -
            C47265 * C10970 + C26137 * C10973 - C47279 * C10971) *
               C47366 +
           (C48414 * C3677 - C47273 * C3672 + C48421 * C10976 -
            C47265 * C10974 + C26137 * C10977 - C47279 * C10975) *
               C36177) *
              C48261 * C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
            C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
               C30748 +
           (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
            C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
               C30746 +
           (C48692 * C394 - C23269 * C388 + C48688 * C687 - C23270 * C682 +
            C48678 * C1457 - C23271 * C1453 + C48660 * C1910 - C23272 * C1907) *
               C30749 +
           (C48692 * C406 - C23269 * C395 + C48688 * C697 - C23270 * C688 +
            C48678 * C1465 - C23271 * C1458 + C48660 * C1916 - C23272 * C1911) *
               C48460) *
              C48261 * C48345 * C48328 * C110 +
          ((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
            C23280) *
               C30748 +
           (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
            C23288) *
               C30746 +
           (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
            C23589) *
               C30749 +
           (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
            C23597) *
               C48460) *
              C48261 * C48345 * C48328 * C111 +
          ((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
            C23296) *
               C30748 +
           (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
            C23304) *
               C30746 +
           (C48692 * C398 - C23269 * C390 + C48688 * C691 - C23270 * C684 +
            C48678 * C1461 - C23271 * C1455 + C48660 * C1914 - C23272 * C1909) *
               C30749 +
           (C48692 * C408 - C23269 * C399 + C48688 * C699 - C23270 * C692 +
            C48678 * C1467 - C23271 * C1462 + C48660 * C1918 - C23272 * C1915) *
               C48460) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C30748 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C30746 +
            (C24880 - C24881 + C24882 - C24883) * C30749 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48682 +
           ((C22092 - C22093 + C22094 - C22095) * C30748 +
            (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
            C24921 * C48460) *
               C48669 +
           C39043 * C48637) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C30748 +
            (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
            C24925 * C48460) *
               C48682 +
           ((C22101 - C22100 + C22103 - C22102) * C30748 +
            (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
            C27898 * C48460) *
               C48669 +
           ((C22109 - C22108 + C22111 - C22110) * C30748 +
            (C22113 - C22112 + C22115 - C22114) * C30746 +
            (C22442 - C22443 + C22444 - C22445) * C30749 +
            (C22446 - C22447 + C22448 - C22449) * C48460) *
               C48637) *
              C48345 * C48328 * C111 +
          (C39043 * C48682 +
           (C22134 * C30748 + C22135 * C30746 +
            (C22443 - C22442 + C22445 - C22444) * C30749 +
            (C22447 - C22446 + C22449 - C22448) * C48460) *
               C48669 +
           ((C22117 - C22116 + C22119 - C22118) * C30748 +
            (C22121 - C22120 + C22123 - C22122) * C30746 +
            (C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                C30749 +
            (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                C48460) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
               C33476 +
           (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
               C48693 +
           (C24880 - C24881 + C24882 - C24883) * C33477 +
           (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
           C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
           (C26021 - C26020 + C26023 - C26022) * C48666) *
              C48261 * C48345 * C48328 * C110 +
          ((C22093 - C22092 + C22095 - C22094) * C33476 +
           (C22097 - C22096 + C22099 - C22098) * C48693 + C24924 * C33477 +
           C24925 * C48690 + C24926 * C33478 + C24927 * C48681 +
           (C24912 - C24913 + C24914 - C24915) * C33479 +
           (C24916 - C24917 + C24918 - C24919) * C48666) *
              C48261 * C48345 * C48328 * C111 +
          (C22132 * C33476 + C22133 * C48693 + C27491 * C33477 +
           C27492 * C48690 + (C24469 - C24468 + C24471 - C24470) * C33478 +
           (C24473 - C24472 + C24475 - C24474) * C48681 +
           (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 - C22090 * C3248) *
               C33479 +
           (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 - C22090 * C3254) *
               C48666) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C48692 * C394 - C23269 * C388 + C48688 * C687 - C23270 * C682 +
             C48678 * C1457 - C23271 * C1453 + C48660 * C1910 -
             C23272 * C1907) *
                C30749 +
            (C48692 * C406 - C23269 * C395 + C48688 * C697 - C23270 * C688 +
             C48678 * C1465 - C23271 * C1458 + C48660 * C1916 -
             C23272 * C1911) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C23269 * C682 - C48692 * C687 + C23270 * C1453 - C48688 * C1457 +
             C23271 * C1907 - C48678 * C1910 + C23272 * C9212 -
             C48660 * C9214) *
                C30749 +
            (C23269 * C688 - C48692 * C697 + C23270 * C1458 - C48688 * C1465 +
             C23271 * C1911 - C48678 * C1916 + C23272 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C30748 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C30746 +
            (C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
             C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
             C23272 * C9213) *
                C30749 +
            (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
             C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
             C23272 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C30748 +
             (C22277 - C22276 + C22279 - C22278) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48460) *
                C48682 +
            ((C22281 - C22280 + C22283 - C22282) * C30748 +
             (C22285 - C22284 + C22287 - C22286) * C30746 +
             (C27692 - C27691 + C27694 - C27693) * C30749 +
             (C27696 - C27695 + C27698 - C27697) * C48460) *
                C48669 +
            ((C22289 - C22288 + C22291 - C22290) * C30748 +
             (C22293 - C22292 + C22295 - C22294) * C30746 +
             (C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C30749 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C33476 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48693 +
            (C24880 - C24881 + C24882 - C24883) * C33477 +
            (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
            C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
            (C26021 - C26020 + C26023 - C26022) * C48666) *
               C48261 * C48345 * C260 +
           ((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C33476 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48693 +
            (C25462 - C25463 + C25464 - C25465) * C33477 +
            (C25466 - C25467 + C25468 - C25469) * C48690 +
            (C25470 - C25471 + C25472 - C25473) * C33478 +
            (C25474 - C25475 + C25476 - C25477) * C48681 +
            (C22089 * C3246 - C22083 * C3249 + C22090 * C10094 -
             C48418 * C10096) *
                C33479 +
            (C22089 * C3250 - C22083 * C3255 + C22090 * C10097 -
             C48418 * C10100) *
                C48666) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C22093 - C22092 + C22095 - C22094) * C33476 +
            (C22097 - C22096 + C22099 - C22098) * C48693 + C24924 * C33477 +
            C24925 * C48690 + C24926 * C33478 + C24927 * C48681 +
            (C24912 - C24913 + C24914 - C24915) * C33479 +
            (C24916 - C24917 + C24918 - C24919) * C48666) *
               C48261 * C48345 * C260 +
           ((C22273 - C22272 + C22275 - C22274) * C33476 +
            (C22277 - C22276 + C22279 - C22278) * C48693 +
            (C24671 - C24670 + C24673 - C24672) * C33477 +
            (C24675 - C24674 + C24677 - C24676) * C48690 +
            (C24679 - C24678 + C24681 - C24680) * C33478 +
            (C24683 - C24682 + C24685 - C24684) * C48681 +
            (C22083 * C3251 - C22089 * C3247 + C48418 * C10098 -
             C22090 * C10095) *
                C33479 +
            (C22083 * C3256 - C22089 * C3252 + C48418 * C10101 -
             C22090 * C10099) *
                C48666) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C386 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C386 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C30748 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C30746 +
            (C48692 * C940 - C23269 * C934 + C48688 * C2331 - C23270 * C2323 +
             C48678 * C2332 - C23271 * C2324 + C48660 * C9945 -
             C23272 * C9944) *
                C30749 +
            (C48692 * C949 - C23269 * C941 + C48688 * C2341 - C23270 * C2333 +
             C48678 * C2342 - C23271 * C2334 + C48660 * C9947 -
             C23272 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C386 +
           ((C24920 * C30748 + C24921 * C30746 + C24922 * C30749 +
             C24923 * C48460) *
                C48682 +
            (C27491 * C30748 + C27492 * C30746 +
             (C24469 - C24468 + C24471 - C24470) * C30749 +
             (C24473 - C24472 + C24475 - C24474) * C48460) *
                C48669 +
            ((C22443 - C22442 + C22445 - C22444) * C30748 +
             (C22447 - C22446 + C22449 - C22448) * C30746 +
             (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                 C30749 +
             (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C33476 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48693 +
            (C24880 - C24881 + C24882 - C24883) * C33477 +
            (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
            C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
            (C26021 - C26020 + C26023 - C26022) * C48666) *
               C48261 * C386 +
           ((C24881 - C24880 + C24883 - C24882) * C33476 +
            (C24885 - C24884 + C24887 - C24886) * C48693 +
            (C24889 - C24888 + C24891 - C24890) * C33477 +
            (C24893 - C24892 + C24895 - C24894) * C48690 +
            (C26016 - C26017 + C26018 - C26019) * C33478 +
            (C26020 - C26021 + C26022 - C26023) * C48681 +
            (C22089 * C3668 - C22083 * C3671 + C22090 * C10970 -
             C48418 * C10972) *
                C33479 +
            (C22089 * C3672 - C22083 * C3677 + C22090 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C22093 - C22092 + C22095 - C22094) * C33476 +
            (C22097 - C22096 + C22099 - C22098) * C48693 + C24924 * C33477 +
            C24925 * C48690 + C24926 * C33478 + C24927 * C48681 +
            (C24912 - C24913 + C24914 - C24915) * C33479 +
            (C24916 - C24917 + C24918 - C24919) * C48666) *
               C48261 * C386 +
           (C24920 * C33476 + C24921 * C48693 + C24922 * C33477 +
            C24923 * C48690 + (C24913 - C24912 + C24915 - C24914) * C33478 +
            (C24917 - C24916 + C24919 - C24918) * C48681 +
            (C22083 * C3673 - C22089 * C3669 + C48418 * C17570 -
             C22090 * C17569) *
                C33479 +
            (C22083 * C3678 - C22089 * C3674 + C48418 * C17572 -
             C22090 * C17571) *
                C48666) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C23269 * C682 - C48692 * C687 + C23270 * C1453 - C48688 * C1457 +
             C23271 * C1907 - C48678 * C1910 + C23272 * C9212 -
             C48660 * C9214) *
                C30749 +
            (C23269 * C688 - C48692 * C697 + C23270 * C1458 - C48688 * C1465 +
             C23271 * C1911 - C48678 * C1916 + C23272 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C30748 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C30746 +
            (C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
             C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
             C23272 * C9213) *
                C30749 +
            (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
             C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
             C23272 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C30748 +
             (C22277 - C22276 + C22279 - C22278) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48460) *
                C48682 +
            ((C22281 - C22280 + C22283 - C22282) * C30748 +
             (C22285 - C22284 + C22287 - C22286) * C30746 +
             (C27692 - C27691 + C27694 - C27693) * C30749 +
             (C27696 - C27695 + C27698 - C27697) * C48460) *
                C48669 +
            ((C22289 - C22288 + C22291 - C22290) * C30748 +
             (C22293 - C22292 + C22295 - C22294) * C30746 +
             (C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C30749 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C33476 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48693 +
            (C24880 - C24881 + C24882 - C24883) * C33477 +
            (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
            C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
            (C26021 - C26020 + C26023 - C26022) * C48666) *
               C48261 * C48345 * C510 +
           ((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C33476 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48693 +
            (C25462 - C25463 + C25464 - C25465) * C33477 +
            (C25466 - C25467 + C25468 - C25469) * C48690 +
            (C25470 - C25471 + C25472 - C25473) * C33478 +
            (C25474 - C25475 + C25476 - C25477) * C48681 +
            (C22089 * C3246 - C22083 * C3249 + C22090 * C10094 -
             C48418 * C10096) *
                C33479 +
            (C22089 * C3250 - C22083 * C3255 + C22090 * C10097 -
             C48418 * C10100) *
                C48666) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C22093 - C22092 + C22095 - C22094) * C33476 +
            (C22097 - C22096 + C22099 - C22098) * C48693 + C24924 * C33477 +
            C24925 * C48690 + C24926 * C33478 + C24927 * C48681 +
            (C24912 - C24913 + C24914 - C24915) * C33479 +
            (C24916 - C24917 + C24918 - C24919) * C48666) *
               C48261 * C48345 * C510 +
           ((C22273 - C22272 + C22275 - C22274) * C33476 +
            (C22277 - C22276 + C22279 - C22278) * C48693 +
            (C24671 - C24670 + C24673 - C24672) * C33477 +
            (C24675 - C24674 + C24677 - C24676) * C48690 +
            (C24679 - C24678 + C24681 - C24680) * C33478 +
            (C24683 - C24682 + C24685 - C24684) * C48681 +
            (C22083 * C3251 - C22089 * C3247 + C48418 * C10098 -
             C22090 * C10095) *
                C33479 +
            (C22083 * C3256 - C22089 * C3252 + C48418 * C10101 -
             C22090 * C10099) *
                C48666) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
            C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
               C30748 +
           (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
            C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
               C30746 +
           (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
            C40865) *
               C30749 +
           (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
            C40873) *
               C48460) *
              C48261 * C48345 * C576 +
          ((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
            C23271 * C1267 - C48678 * C1271 + C23272 * C1749 - C48660 * C1752) *
               C30748 +
           (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
            C23271 * C1272 - C48678 * C1279 + C23272 * C1753 - C48660 * C1758) *
               C30746 +
           (C23269 * C682 - C48692 * C687 + C23270 * C1453 - C48688 * C1457 +
            C23271 * C1907 - C48678 * C1910 + C23272 * C9212 - C48660 * C9214) *
               C30749 +
           (C23269 * C688 - C48692 * C697 + C23270 * C1458 - C48688 * C1465 +
            C23271 * C1911 - C48678 * C1916 + C23272 * C9215 - C48660 * C9218) *
               C48460) *
              C48261 * C48345 * C577 +
          ((C48692 * C585 - C23269 * C580 + C48688 * C1271 - C23270 * C1267 +
            C48678 * C1752 - C23271 * C1749 + C48660 * C9124 - C23272 * C9122) *
               C30748 +
           (C48692 * C595 - C23269 * C586 + C48688 * C1279 - C23270 * C1272 +
            C48678 * C1758 - C23271 * C1753 + C48660 * C9128 - C23272 * C9125) *
               C30746 +
           (C48692 * C1457 - C23269 * C1453 + C48688 * C1910 - C23270 * C1907 +
            C48678 * C9214 - C23271 * C9212 + C48660 * C9451 - C23272 * C9450) *
               C30749 +
           (C48692 * C1465 - C23269 * C1458 + C48688 * C1916 - C23270 * C1911 +
            C48678 * C9218 - C23271 * C9215 + C48660 * C9453 - C23272 * C9452) *
               C48460) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C30748 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C30746 +
            (C24880 - C24881 + C24882 - C24883) * C30749 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48682 +
           ((C22092 - C22093 + C22094 - C22095) * C30748 +
            (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
            C24921 * C48460) *
               C48669 +
           C39043 * C48637) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C30748 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C30746 +
            (C25462 - C25463 + C25464 - C25465) * C30749 +
            (C25466 - C25467 + C25468 - C25469) * C48460) *
               C48682 +
           ((C22272 - C22273 + C22274 - C22275) * C30748 +
            (C22276 - C22277 + C22278 - C22279) * C30746 +
            (C24670 - C24671 + C24672 - C24673) * C30749 +
            (C24674 - C24675 + C24676 - C24677) * C48460) *
               C48669 +
           ((C22280 - C22281 + C22282 - C22283) * C30748 +
            (C22284 - C22285 + C22286 - C22287) * C30746 +
            (C27691 - C27692 + C27693 - C27694) * C30749 +
            (C27695 - C27696 + C27697 - C27698) * C48460) *
               C48637) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C30748 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C30746 +
            (C22083 * C1457 - C22089 * C1453 + C48418 * C1910 -
             C22090 * C1907) *
                C30749 +
            (C22083 * C1465 - C22089 * C1458 + C48418 * C1916 -
             C22090 * C1911) *
                C48460) *
               C48682 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C30748 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C30746 +
            (C22083 * C1459 - C22089 * C1454 + C48418 * C1912 -
             C22090 * C1908) *
                C30749 +
            (C22083 * C1466 - C22089 * C1460 + C48418 * C1917 -
             C22090 * C1913) *
                C48460) *
               C48669 +
           ((C22083 * C589 - C22089 * C582 + C48418 * C1275 - C22090 * C1269) *
                C30748 +
            (C22083 * C597 - C22089 * C590 + C48418 * C1281 - C22090 * C1276) *
                C30746 +
            (C22083 * C1461 - C22089 * C1455 + C48418 * C1914 -
             C22090 * C1909) *
                C30749 +
            (C22083 * C1467 - C22089 * C1462 + C48418 * C1918 -
             C22090 * C1915) *
                C48460) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
               C33476 +
           (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
               C48693 +
           (C24880 - C24881 + C24882 - C24883) * C33477 +
           (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
           C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
           (C26021 - C26020 + C26023 - C26022) * C48666) *
              C48261 * C48345 * C576 +
          ((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
               C33476 +
           (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
               C48693 +
           (C25462 - C25463 + C25464 - C25465) * C33477 +
           (C25466 - C25467 + C25468 - C25469) * C48690 +
           (C25470 - C25471 + C25472 - C25473) * C33478 +
           (C25474 - C25475 + C25476 - C25477) * C48681 +
           (C22089 * C3246 - C22083 * C3249 + C22090 * C10094 -
            C48418 * C10096) *
               C33479 +
           (C22089 * C3250 - C22083 * C3255 + C22090 * C10097 -
            C48418 * C10100) *
               C48666) *
              C48261 * C48345 * C577 +
          ((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
               C33476 +
           (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
               C48693 +
           (C22083 * C1457 - C22089 * C1453 + C48418 * C1910 - C22090 * C1907) *
               C33477 +
           (C22083 * C1465 - C22089 * C1458 + C48418 * C1916 - C22090 * C1911) *
               C48690 +
           (C22083 * C2328 - C22089 * C2322 + C48418 * C9682 - C22090 * C9680) *
               C33478 +
           (C22083 * C2340 - C22089 * C2330 + C48418 * C9686 - C22090 * C9684) *
               C48681 +
           (C22083 * C10096 - C22089 * C10094 + C48418 * C10541 -
            C22090 * C10540) *
               C33479 +
           (C22083 * C10100 - C22089 * C10097 + C48418 * C10543 -
            C22090 * C10542) *
               C48666) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C386 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C510 +
          (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C41232 - C41233 + C41234 - C41235 + C41236 - C41237 + C41238 -
             C41239) *
                C30749 +
            (C41240 - C41241 + C41242 - C41243 + C41244 - C41245 + C41246 -
             C41247) *
                C48460) *
               C48261 * C386 +
           ((C41233 - C41232 + C41235 - C41234 + C41237 - C41236 + C41239 -
             C41238) *
                C30748 +
            (C41241 - C41240 + C41243 - C41242 + C41245 - C41244 + C41247 -
             C41246) *
                C30746 +
            (C48692 * C2327 - C23269 * C2321 + C48688 * C2328 - C23270 * C2322 +
             C48678 * C9682 - C23271 * C9680 + C48660 * C9683 -
             C23272 * C9681) *
                C30749 +
            (C48692 * C2339 - C23269 * C2329 + C48688 * C2340 - C23270 * C2330 +
             C48678 * C9686 - C23271 * C9684 + C48660 * C9687 -
             C23272 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C386 +
           (((C25463 - C25462 + C25465 - C25464) * C30748 +
             (C25467 - C25466 + C25469 - C25468) * C30746 +
             (C25471 - C25470 + C25473 - C25472) * C30749 +
             (C25475 - C25474 + C25477 - C25476) * C48460) *
                C48682 +
            ((C24671 - C24670 + C24673 - C24672) * C30748 +
             (C24675 - C24674 + C24677 - C24676) * C30746 +
             (C24679 - C24678 + C24681 - C24680) * C30749 +
             (C24683 - C24682 + C24685 - C24684) * C48460) *
                C48669 +
            ((C27692 - C27691 + C27694 - C27693) * C30748 +
             (C27696 - C27695 + C27698 - C27697) * C30746 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C30749 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C33476 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48693 +
            (C24880 - C24881 + C24882 - C24883) * C33477 +
            (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
            C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
            (C26021 - C26020 + C26023 - C26022) * C48666) *
               C48261 * C386 +
           ((C24881 - C24880 + C24883 - C24882) * C33476 +
            (C24885 - C24884 + C24887 - C24886) * C48693 +
            (C24889 - C24888 + C24891 - C24890) * C33477 +
            (C24893 - C24892 + C24895 - C24894) * C48690 +
            (C26016 - C26017 + C26018 - C26019) * C33478 +
            (C26020 - C26021 + C26022 - C26023) * C48681 +
            (C22089 * C3668 - C22083 * C3671 + C22090 * C10970 -
             C48418 * C10972) *
                C33479 +
            (C22089 * C3672 - C22083 * C3677 + C22090 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C510 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C33476 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48693 +
            (C25462 - C25463 + C25464 - C25465) * C33477 +
            (C25466 - C25467 + C25468 - C25469) * C48690 +
            (C25470 - C25471 + C25472 - C25473) * C33478 +
            (C25474 - C25475 + C25476 - C25477) * C48681 +
            (C42338 - C42339 + C42340 - C42341) * C33479 +
            (C42342 - C42343 + C42344 - C42345) * C48666) *
               C48261 * C386 +
           ((C25463 - C25462 + C25465 - C25464) * C33476 +
            (C25467 - C25466 + C25469 - C25468) * C48693 +
            (C25471 - C25470 + C25473 - C25472) * C33477 +
            (C25475 - C25474 + C25477 - C25476) * C48690 +
            (C42339 - C42338 + C42341 - C42340) * C33478 +
            (C42343 - C42342 + C42345 - C42344) * C48681 +
            (C22083 * C10972 - C22089 * C10970 + C48418 * C10973 -
             C22090 * C10971) *
                C33479 +
            (C22083 * C10976 - C22089 * C10974 + C48418 * C10977 -
             C22090 * C10975) *
                C48666) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C784 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C784 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C30748 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C30746 +
            (C48692 * C940 - C23269 * C934 + C48688 * C2331 - C23270 * C2323 +
             C48678 * C2332 - C23271 * C2324 + C48660 * C9945 -
             C23272 * C9944) *
                C30749 +
            (C48692 * C949 - C23269 * C941 + C48688 * C2341 - C23270 * C2333 +
             C48678 * C2342 - C23271 * C2334 + C48660 * C9947 -
             C23272 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C784 +
           ((C24920 * C30748 + C24921 * C30746 + C24922 * C30749 +
             C24923 * C48460) *
                C48682 +
            (C27491 * C30748 + C27492 * C30746 +
             (C24469 - C24468 + C24471 - C24470) * C30749 +
             (C24473 - C24472 + C24475 - C24474) * C48460) *
                C48669 +
            ((C22443 - C22442 + C22445 - C22444) * C30748 +
             (C22447 - C22446 + C22449 - C22448) * C30746 +
             (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                 C30749 +
             (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C33476 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48693 +
            (C24880 - C24881 + C24882 - C24883) * C33477 +
            (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
            C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
            (C26021 - C26020 + C26023 - C26022) * C48666) *
               C48261 * C784 +
           ((C24881 - C24880 + C24883 - C24882) * C33476 +
            (C24885 - C24884 + C24887 - C24886) * C48693 +
            (C24889 - C24888 + C24891 - C24890) * C33477 +
            (C24893 - C24892 + C24895 - C24894) * C48690 +
            (C26016 - C26017 + C26018 - C26019) * C33478 +
            (C26020 - C26021 + C26022 - C26023) * C48681 +
            (C22089 * C3668 - C22083 * C3671 + C22090 * C10970 -
             C48418 * C10972) *
                C33479 +
            (C22089 * C3672 - C22083 * C3677 + C22090 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C22093 - C22092 + C22095 - C22094) * C33476 +
            (C22097 - C22096 + C22099 - C22098) * C48693 + C24924 * C33477 +
            C24925 * C48690 + C24926 * C33478 + C24927 * C48681 +
            (C24912 - C24913 + C24914 - C24915) * C33479 +
            (C24916 - C24917 + C24918 - C24919) * C48666) *
               C48261 * C784 +
           (C24920 * C33476 + C24921 * C48693 + C24922 * C33477 +
            C24923 * C48690 + (C24913 - C24912 + C24915 - C24914) * C33478 +
            (C24917 - C24916 + C24919 - C24918) * C48681 +
            (C22083 * C3673 - C22089 * C3669 + C48418 * C17570 -
             C22090 * C17569) *
                C33479 +
            (C22083 * C3678 - C22089 * C3674 + C48418 * C17572 -
             C22090 * C17571) *
                C48666) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C784 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C260 +
          (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C41232 - C41233 + C41234 - C41235 + C41236 - C41237 + C41238 -
             C41239) *
                C30749 +
            (C41240 - C41241 + C41242 - C41243 + C41244 - C41245 + C41246 -
             C41247) *
                C48460) *
               C48261 * C784 +
           ((C41233 - C41232 + C41235 - C41234 + C41237 - C41236 + C41239 -
             C41238) *
                C30748 +
            (C41241 - C41240 + C41243 - C41242 + C41245 - C41244 + C41247 -
             C41246) *
                C30746 +
            (C48692 * C2327 - C23269 * C2321 + C48688 * C2328 - C23270 * C2322 +
             C48678 * C9682 - C23271 * C9680 + C48660 * C9683 -
             C23272 * C9681) *
                C30749 +
            (C48692 * C2339 - C23269 * C2329 + C48688 * C2340 - C23270 * C2330 +
             C48678 * C9686 - C23271 * C9684 + C48660 * C9687 -
             C23272 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C784 +
           (((C25463 - C25462 + C25465 - C25464) * C30748 +
             (C25467 - C25466 + C25469 - C25468) * C30746 +
             (C25471 - C25470 + C25473 - C25472) * C30749 +
             (C25475 - C25474 + C25477 - C25476) * C48460) *
                C48682 +
            ((C24671 - C24670 + C24673 - C24672) * C30748 +
             (C24675 - C24674 + C24677 - C24676) * C30746 +
             (C24679 - C24678 + C24681 - C24680) * C30749 +
             (C24683 - C24682 + C24685 - C24684) * C48460) *
                C48669 +
            ((C27692 - C27691 + C27694 - C27693) * C30748 +
             (C27696 - C27695 + C27698 - C27697) * C30746 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C30749 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C33476 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48693 +
            (C24880 - C24881 + C24882 - C24883) * C33477 +
            (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
            C26025 * C48681 + (C26017 - C26016 + C26019 - C26018) * C33479 +
            (C26021 - C26020 + C26023 - C26022) * C48666) *
               C48261 * C784 +
           ((C24881 - C24880 + C24883 - C24882) * C33476 +
            (C24885 - C24884 + C24887 - C24886) * C48693 +
            (C24889 - C24888 + C24891 - C24890) * C33477 +
            (C24893 - C24892 + C24895 - C24894) * C48690 +
            (C26016 - C26017 + C26018 - C26019) * C33478 +
            (C26020 - C26021 + C26022 - C26023) * C48681 +
            (C22089 * C3668 - C22083 * C3671 + C22090 * C10970 -
             C48418 * C10972) *
                C33479 +
            (C22089 * C3672 - C22083 * C3677 + C22090 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C260 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C33476 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48693 +
            (C25462 - C25463 + C25464 - C25465) * C33477 +
            (C25466 - C25467 + C25468 - C25469) * C48690 +
            (C25470 - C25471 + C25472 - C25473) * C33478 +
            (C25474 - C25475 + C25476 - C25477) * C48681 +
            (C42338 - C42339 + C42340 - C42341) * C33479 +
            (C42342 - C42343 + C42344 - C42345) * C48666) *
               C48261 * C784 +
           ((C25463 - C25462 + C25465 - C25464) * C33476 +
            (C25467 - C25466 + C25469 - C25468) * C48693 +
            (C25471 - C25470 + C25473 - C25472) * C33477 +
            (C25475 - C25474 + C25477 - C25476) * C48690 +
            (C42339 - C42338 + C42341 - C42340) * C33478 +
            (C42343 - C42342 + C42345 - C42344) * C48681 +
            (C22083 * C10972 - C22089 * C10970 + C48418 * C10973 -
             C22090 * C10971) *
                C33479 +
            (C22083 * C10976 - C22089 * C10974 + C48418 * C10977 -
             C22090 * C10975) *
                C48666) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
            C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
               C30748 +
           (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
            C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
               C30746 +
           (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
            C40865) *
               C30749 +
           (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
            C40873) *
               C48460) *
              C48261 * C930 +
          ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
            C40864) *
               C30748 +
           (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
            C40872) *
               C30746 +
           (C41606 - C41607 + C41608 - C41609 + C41610 - C41611 + C41612 -
            C41613) *
               C30749 +
           (C41614 - C41615 + C41616 - C41617 + C41618 - C41619 + C41620 -
            C41621) *
               C48460) *
              C48261 * C931 +
          ((C41607 - C41606 + C41609 - C41608 + C41611 - C41610 + C41613 -
            C41612) *
               C30748 +
           (C41615 - C41614 + C41617 - C41616 + C41619 - C41618 + C41621 -
            C41620) *
               C30746 +
           (C48692 * C2804 - C23269 * C2800 + C48688 * C3249 - C23270 * C3246 +
            C48678 * C10096 - C23271 * C10094 + C48660 * C10541 -
            C23272 * C10540) *
               C30749 +
           (C48692 * C2812 - C23269 * C2805 + C48688 * C3255 - C23270 * C3250 +
            C48678 * C10100 - C23271 * C10097 + C48660 * C10543 -
            C23272 * C10542) *
               C48460) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C30748 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C30746 +
            (C24880 - C24881 + C24882 - C24883) * C30749 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48682 +
           ((C22092 - C22093 + C22094 - C22095) * C30748 +
            (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
            C24921 * C48460) *
               C48669 +
           C39043 * C48637) *
              C930 +
          (((C24881 - C24880 + C24883 - C24882) * C30748 +
            (C24885 - C24884 + C24887 - C24886) * C30746 +
            (C24889 - C24888 + C24891 - C24890) * C30749 +
            (C24893 - C24892 + C24895 - C24894) * C48460) *
               C48682 +
           (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
            C24927 * C48460) *
               C48669 +
           (C27897 * C30748 + C27898 * C30746 +
            (C24468 - C24469 + C24470 - C24471) * C30749 +
            (C24472 - C24473 + C24474 - C24475) * C48460) *
               C48637) *
              C931 +
          ((C26024 * C30748 + C26025 * C30746 +
            (C26017 - C26016 + C26019 - C26018) * C30749 +
            (C26021 - C26020 + C26023 - C26022) * C48460) *
               C48682 +
           (C24922 * C30748 + C24923 * C30746 +
            (C24913 - C24912 + C24915 - C24914) * C30749 +
            (C24917 - C24916 + C24919 - C24918) * C48460) *
               C48669 +
           ((C24469 - C24468 + C24471 - C24470) * C30748 +
            (C24473 - C24472 + C24475 - C24474) * C30746 +
            (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
             C22090 * C3248) *
                C30749 +
            (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
             C22090 * C3254) *
                C48460) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
               C33476 +
           (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
               C48693 +
           (C24880 - C24881 + C24882 - C24883) * C33477 +
           (C24884 - C24885 + C24886 - C24887) * C48690 + C26024 * C33478 +
           C26025 * C48681 + C42716 * C33479 + C42717 * C48666) *
              C48261 * C930 +
          ((C24881 - C24880 + C24883 - C24882) * C33476 +
           (C24885 - C24884 + C24887 - C24886) * C48693 +
           (C24889 - C24888 + C24891 - C24890) * C33477 +
           (C24893 - C24892 + C24895 - C24894) * C48690 +
           (C26016 - C26017 + C26018 - C26019) * C33478 +
           (C26020 - C26021 + C26022 - C26023) * C48681 +
           (C42708 - C42709 + C42710 - C42711) * C33479 +
           (C42712 - C42713 + C42714 - C42715) * C48666) *
              C48261 * C931 +
          (C26024 * C33476 + C26025 * C48693 + C42716 * C33477 +
           C42717 * C48690 + (C42709 - C42708 + C42711 - C42710) * C33478 +
           (C42713 - C42712 + C42715 - C42714) * C48681 +
           (C22083 * C17657 - C22089 * C17655 + C48418 * C17898 -
            C22090 * C17897) *
               C33479 +
           (C22083 * C17661 - C22089 * C17658 + C48418 * C17900 -
            C22090 * C17899) *
               C48666) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C47360 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48456 +
            (C24880 - C24881 + C24882 - C24883) * C47352 +
            (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
            C26025 * C36177) *
               C48595 +
           ((C22092 - C22093 + C22094 - C22095) * C47360 +
            (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
            C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C47360 +
            (C22097 - C22096 + C22099 - C22098) * C48456 + C24924 * C47352 +
            C24925 * C48463 + C24926 * C47366 + C24927 * C36177) *
               C48595 +
           ((C22101 - C22100 + C22103 - C22102) * C47360 +
            (C22105 - C22104 + C22107 - C22106) * C48456 + C27897 * C47352 +
            C27898 * C48463 + (C24468 - C24469 + C24470 - C24471) * C47366 +
            (C24472 - C24473 + C24474 - C24475) * C36177) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C22132 * C47360 + C22133 * C48456 + C27491 * C47352 +
            C27492 * C48463 + (C24469 - C24468 + C24471 - C24470) * C47366 +
            (C24473 - C24472 + C24475 - C24474) * C36177) *
               C48595 +
           (C22134 * C47360 + C22135 * C48456 +
            (C22443 - C22442 + C22445 - C22444) * C47352 +
            (C22447 - C22446 + C22449 - C22448) * C48463 +
            (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                C47366 +
            (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                C36177) *
               C48271) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C47360 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48456 +
             (C24880 - C24881 + C24882 - C24883) * C47352 +
             (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
             C26025 * C36177) *
                C48595 +
            ((C22092 - C22093 + C22094 - C22095) * C47360 +
             (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
             C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
                C48271) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C47360 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48456 +
             (C25462 - C25463 + C25464 - C25465) * C47352 +
             (C25466 - C25467 + C25468 - C25469) * C48463 +
             (C25470 - C25471 + C25472 - C25473) * C47366 +
             (C25474 - C25475 + C25476 - C25477) * C36177) *
                C48595 +
            ((C22272 - C22273 + C22274 - C22275) * C47360 +
             (C22276 - C22277 + C22278 - C22279) * C48456 +
             (C24670 - C24671 + C24672 - C24673) * C47352 +
             (C24674 - C24675 + C24676 - C24677) * C48463 +
             (C24678 - C24679 + C24680 - C24681) * C47366 +
             (C24682 - C24683 + C24684 - C24685) * C36177) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C47360 +
             (C22097 - C22096 + C22099 - C22098) * C48456 + C24924 * C47352 +
             C24925 * C48463 + C24926 * C47366 + C24927 * C36177) *
                C48595 +
            ((C22101 - C22100 + C22103 - C22102) * C47360 +
             (C22105 - C22104 + C22107 - C22106) * C48456 + C27897 * C47352 +
             C27898 * C48463 + (C24468 - C24469 + C24470 - C24471) * C47366 +
             (C24472 - C24473 + C24474 - C24475) * C36177) *
                C48271) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C47360 +
             (C22277 - C22276 + C22279 - C22278) * C48456 +
             (C24671 - C24670 + C24673 - C24672) * C47352 +
             (C24675 - C24674 + C24677 - C24676) * C48463 +
             (C24679 - C24678 + C24681 - C24680) * C47366 +
             (C24683 - C24682 + C24685 - C24684) * C36177) *
                C48595 +
            ((C22281 - C22280 + C22283 - C22282) * C47360 +
             (C22285 - C22284 + C22287 - C22286) * C48456 +
             (C27692 - C27691 + C27694 - C27693) * C47352 +
             (C27696 - C27695 + C27698 - C27697) * C48463 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C47366 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C36177) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C47360 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48456 +
             (C24880 - C24881 + C24882 - C24883) * C47352 +
             (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
             C26025 * C36177) *
                C48595 +
            ((C22092 - C22093 + C22094 - C22095) * C47360 +
             (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
             C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
                C48271) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C47360 +
             (C24885 - C24884 + C24887 - C24886) * C48456 +
             (C24889 - C24888 + C24891 - C24890) * C47352 +
             (C24893 - C24892 + C24895 - C24894) * C48463 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36177) *
                C48595 +
            (C24924 * C47360 + C24925 * C48456 + C24926 * C47352 +
             C24927 * C48463 + (C24912 - C24913 + C24914 - C24915) * C47366 +
             (C24916 - C24917 + C24918 - C24919) * C36177) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C47360 +
             (C22097 - C22096 + C22099 - C22098) * C48456 + C24924 * C47352 +
             C24925 * C48463 + C24926 * C47366 + C24927 * C36177) *
                C48595 +
            ((C22101 - C22100 + C22103 - C22102) * C47360 +
             (C22105 - C22104 + C22107 - C22106) * C48456 + C27897 * C47352 +
             C27898 * C48463 + (C24468 - C24469 + C24470 - C24471) * C47366 +
             (C24472 - C24473 + C24474 - C24475) * C36177) *
                C48271) *
               C386 +
           ((C24920 * C47360 + C24921 * C48456 + C24922 * C47352 +
             C24923 * C48463 + (C24913 - C24912 + C24915 - C24914) * C47366 +
             (C24917 - C24916 + C24919 - C24918) * C36177) *
                C48595 +
            (C27491 * C47360 + C27492 * C48456 +
             (C24469 - C24468 + C24471 - C24470) * C47352 +
             (C24473 - C24472 + C24475 - C24474) * C48463 +
             (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
              C22090 * C3248) *
                 C47366 +
             (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
              C22090 * C3254) *
                 C36177) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C47360 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48456 +
             (C24880 - C24881 + C24882 - C24883) * C47352 +
             (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
             C26025 * C36177) *
                C48595 +
            ((C22092 - C22093 + C22094 - C22095) * C47360 +
             (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
             C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
                C48271) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C47360 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48456 +
             (C25462 - C25463 + C25464 - C25465) * C47352 +
             (C25466 - C25467 + C25468 - C25469) * C48463 +
             (C25470 - C25471 + C25472 - C25473) * C47366 +
             (C25474 - C25475 + C25476 - C25477) * C36177) *
                C48595 +
            ((C22272 - C22273 + C22274 - C22275) * C47360 +
             (C22276 - C22277 + C22278 - C22279) * C48456 +
             (C24670 - C24671 + C24672 - C24673) * C47352 +
             (C24674 - C24675 + C24676 - C24677) * C48463 +
             (C24678 - C24679 + C24680 - C24681) * C47366 +
             (C24682 - C24683 + C24684 - C24685) * C36177) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C47360 +
             (C22097 - C22096 + C22099 - C22098) * C48456 + C24924 * C47352 +
             C24925 * C48463 + C24926 * C47366 + C24927 * C36177) *
                C48595 +
            ((C22101 - C22100 + C22103 - C22102) * C47360 +
             (C22105 - C22104 + C22107 - C22106) * C48456 + C27897 * C47352 +
             C27898 * C48463 + (C24468 - C24469 + C24470 - C24471) * C47366 +
             (C24472 - C24473 + C24474 - C24475) * C36177) *
                C48271) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C47360 +
             (C22277 - C22276 + C22279 - C22278) * C48456 +
             (C24671 - C24670 + C24673 - C24672) * C47352 +
             (C24675 - C24674 + C24677 - C24676) * C48463 +
             (C24679 - C24678 + C24681 - C24680) * C47366 +
             (C24683 - C24682 + C24685 - C24684) * C36177) *
                C48595 +
            ((C22281 - C22280 + C22283 - C22282) * C47360 +
             (C22285 - C22284 + C22287 - C22286) * C48456 +
             (C27692 - C27691 + C27694 - C27693) * C47352 +
             (C27696 - C27695 + C27698 - C27697) * C48463 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C47366 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C36177) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C47360 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48456 +
            (C24880 - C24881 + C24882 - C24883) * C47352 +
            (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
            C26025 * C36177) *
               C48595 +
           ((C22092 - C22093 + C22094 - C22095) * C47360 +
            (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
            C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
               C48271) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C47360 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C48456 +
            (C25462 - C25463 + C25464 - C25465) * C47352 +
            (C25466 - C25467 + C25468 - C25469) * C48463 +
            (C25470 - C25471 + C25472 - C25473) * C47366 +
            (C25474 - C25475 + C25476 - C25477) * C36177) *
               C48595 +
           ((C22272 - C22273 + C22274 - C22275) * C47360 +
            (C22276 - C22277 + C22278 - C22279) * C48456 +
            (C24670 - C24671 + C24672 - C24673) * C47352 +
            (C24674 - C24675 + C24676 - C24677) * C48463 +
            (C24678 - C24679 + C24680 - C24681) * C47366 +
            (C24682 - C24683 + C24684 - C24685) * C36177) *
               C48271) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C47360 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C48456 +
            (C22083 * C1457 - C22089 * C1453 + C48418 * C1910 -
             C22090 * C1907) *
                C47352 +
            (C22083 * C1465 - C22089 * C1458 + C48418 * C1916 -
             C22090 * C1911) *
                C48463 +
            (C22083 * C2328 - C22089 * C2322 + C48418 * C9682 -
             C22090 * C9680) *
                C47366 +
            (C22083 * C2340 - C22089 * C2330 + C48418 * C9686 -
             C22090 * C9684) *
                C36177) *
               C48595 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C47360 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C48456 +
            (C22083 * C1459 - C22089 * C1454 + C48418 * C1912 -
             C22090 * C1908) *
                C47352 +
            (C22083 * C1466 - C22089 * C1460 + C48418 * C1917 -
             C22090 * C1913) *
                C48463 +
            (C22083 * C2332 - C22089 * C2324 + C48418 * C9945 -
             C22090 * C9944) *
                C47366 +
            (C22083 * C2342 - C22089 * C2334 + C48418 * C9947 -
             C22090 * C9946) *
                C36177) *
               C48271) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C47360 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48456 +
             (C24880 - C24881 + C24882 - C24883) * C47352 +
             (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
             C26025 * C36177) *
                C48595 +
            ((C22092 - C22093 + C22094 - C22095) * C47360 +
             (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
             C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
                C48271) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C47360 +
             (C24885 - C24884 + C24887 - C24886) * C48456 +
             (C24889 - C24888 + C24891 - C24890) * C47352 +
             (C24893 - C24892 + C24895 - C24894) * C48463 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36177) *
                C48595 +
            (C24924 * C47360 + C24925 * C48456 + C24926 * C47352 +
             C24927 * C48463 + (C24912 - C24913 + C24914 - C24915) * C47366 +
             (C24916 - C24917 + C24918 - C24919) * C36177) *
                C48271) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C47360 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48456 +
             (C25462 - C25463 + C25464 - C25465) * C47352 +
             (C25466 - C25467 + C25468 - C25469) * C48463 +
             (C25470 - C25471 + C25472 - C25473) * C47366 +
             (C25474 - C25475 + C25476 - C25477) * C36177) *
                C48595 +
            ((C22272 - C22273 + C22274 - C22275) * C47360 +
             (C22276 - C22277 + C22278 - C22279) * C48456 +
             (C24670 - C24671 + C24672 - C24673) * C47352 +
             (C24674 - C24675 + C24676 - C24677) * C48463 +
             (C24678 - C24679 + C24680 - C24681) * C47366 +
             (C24682 - C24683 + C24684 - C24685) * C36177) *
                C48271) *
               C386 +
           (((C25463 - C25462 + C25465 - C25464) * C47360 +
             (C25467 - C25466 + C25469 - C25468) * C48456 +
             (C25471 - C25470 + C25473 - C25472) * C47352 +
             (C25475 - C25474 + C25477 - C25476) * C48463 +
             (C42339 - C42338 + C42341 - C42340) * C47366 +
             (C42343 - C42342 + C42345 - C42344) * C36177) *
                C48595 +
            ((C24671 - C24670 + C24673 - C24672) * C47360 +
             (C24675 - C24674 + C24677 - C24676) * C48456 +
             (C24679 - C24678 + C24681 - C24680) * C47352 +
             (C24683 - C24682 + C24685 - C24684) * C48463 +
             (C22083 * C3251 - C22089 * C3247 + C48418 * C10098 -
              C22090 * C10095) *
                 C47366 +
             (C22083 * C3256 - C22089 * C3252 + C48418 * C10101 -
              C22090 * C10099) *
                 C36177) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C47360 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48456 +
             (C24880 - C24881 + C24882 - C24883) * C47352 +
             (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
             C26025 * C36177) *
                C48595 +
            ((C22092 - C22093 + C22094 - C22095) * C47360 +
             (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
             C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
                C48271) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C47360 +
             (C24885 - C24884 + C24887 - C24886) * C48456 +
             (C24889 - C24888 + C24891 - C24890) * C47352 +
             (C24893 - C24892 + C24895 - C24894) * C48463 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36177) *
                C48595 +
            (C24924 * C47360 + C24925 * C48456 + C24926 * C47352 +
             C24927 * C48463 + (C24912 - C24913 + C24914 - C24915) * C47366 +
             (C24916 - C24917 + C24918 - C24919) * C36177) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C47360 +
             (C22097 - C22096 + C22099 - C22098) * C48456 + C24924 * C47352 +
             C24925 * C48463 + C24926 * C47366 + C24927 * C36177) *
                C48595 +
            ((C22101 - C22100 + C22103 - C22102) * C47360 +
             (C22105 - C22104 + C22107 - C22106) * C48456 + C27897 * C47352 +
             C27898 * C48463 + (C24468 - C24469 + C24470 - C24471) * C47366 +
             (C24472 - C24473 + C24474 - C24475) * C36177) *
                C48271) *
               C784 +
           ((C24920 * C47360 + C24921 * C48456 + C24922 * C47352 +
             C24923 * C48463 + (C24913 - C24912 + C24915 - C24914) * C47366 +
             (C24917 - C24916 + C24919 - C24918) * C36177) *
                C48595 +
            (C27491 * C47360 + C27492 * C48456 +
             (C24469 - C24468 + C24471 - C24470) * C47352 +
             (C24473 - C24472 + C24475 - C24474) * C48463 +
             (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
              C22090 * C3248) *
                 C47366 +
             (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
              C22090 * C3254) *
                 C36177) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C47360 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C48456 +
             (C24880 - C24881 + C24882 - C24883) * C47352 +
             (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
             C26025 * C36177) *
                C48595 +
            ((C22092 - C22093 + C22094 - C22095) * C47360 +
             (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
             C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
                C48271) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C47360 +
             (C24885 - C24884 + C24887 - C24886) * C48456 +
             (C24889 - C24888 + C24891 - C24890) * C47352 +
             (C24893 - C24892 + C24895 - C24894) * C48463 +
             (C26016 - C26017 + C26018 - C26019) * C47366 +
             (C26020 - C26021 + C26022 - C26023) * C36177) *
                C48595 +
            (C24924 * C47360 + C24925 * C48456 + C24926 * C47352 +
             C24927 * C48463 + (C24912 - C24913 + C24914 - C24915) * C47366 +
             (C24916 - C24917 + C24918 - C24919) * C36177) *
                C48271) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C47360 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C48456 +
             (C25462 - C25463 + C25464 - C25465) * C47352 +
             (C25466 - C25467 + C25468 - C25469) * C48463 +
             (C25470 - C25471 + C25472 - C25473) * C47366 +
             (C25474 - C25475 + C25476 - C25477) * C36177) *
                C48595 +
            ((C22272 - C22273 + C22274 - C22275) * C47360 +
             (C22276 - C22277 + C22278 - C22279) * C48456 +
             (C24670 - C24671 + C24672 - C24673) * C47352 +
             (C24674 - C24675 + C24676 - C24677) * C48463 +
             (C24678 - C24679 + C24680 - C24681) * C47366 +
             (C24682 - C24683 + C24684 - C24685) * C36177) *
                C48271) *
               C784 +
           (((C25463 - C25462 + C25465 - C25464) * C47360 +
             (C25467 - C25466 + C25469 - C25468) * C48456 +
             (C25471 - C25470 + C25473 - C25472) * C47352 +
             (C25475 - C25474 + C25477 - C25476) * C48463 +
             (C42339 - C42338 + C42341 - C42340) * C47366 +
             (C42343 - C42342 + C42345 - C42344) * C36177) *
                C48595 +
            ((C24671 - C24670 + C24673 - C24672) * C47360 +
             (C24675 - C24674 + C24677 - C24676) * C48456 +
             (C24679 - C24678 + C24681 - C24680) * C47352 +
             (C24683 - C24682 + C24685 - C24684) * C48463 +
             (C22083 * C3251 - C22089 * C3247 + C48418 * C10098 -
              C22090 * C10095) *
                 C47366 +
             (C22083 * C3256 - C22089 * C3252 + C48418 * C10101 -
              C22090 * C10099) *
                 C36177) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C47360 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C48456 +
            (C24880 - C24881 + C24882 - C24883) * C47352 +
            (C24884 - C24885 + C24886 - C24887) * C48463 + C26024 * C47366 +
            C26025 * C36177) *
               C48595 +
           ((C22092 - C22093 + C22094 - C22095) * C47360 +
            (C22096 - C22097 + C22098 - C22099) * C48456 + C24920 * C47352 +
            C24921 * C48463 + C24922 * C47366 + C24923 * C36177) *
               C48271) *
              C930 +
          (((C24881 - C24880 + C24883 - C24882) * C47360 +
            (C24885 - C24884 + C24887 - C24886) * C48456 +
            (C24889 - C24888 + C24891 - C24890) * C47352 +
            (C24893 - C24892 + C24895 - C24894) * C48463 +
            (C26016 - C26017 + C26018 - C26019) * C47366 +
            (C26020 - C26021 + C26022 - C26023) * C36177) *
               C48595 +
           (C24924 * C47360 + C24925 * C48456 + C24926 * C47352 +
            C24927 * C48463 + (C24912 - C24913 + C24914 - C24915) * C47366 +
            (C24916 - C24917 + C24918 - C24919) * C36177) *
               C48271) *
              C931 +
          ((C26024 * C47360 + C26025 * C48456 + C42716 * C47352 +
            C42717 * C48463 + (C42709 - C42708 + C42711 - C42710) * C47366 +
            (C42713 - C42712 + C42715 - C42714) * C36177) *
               C48595 +
           (C24922 * C47360 + C24923 * C48456 +
            (C24913 - C24912 + C24915 - C24914) * C47352 +
            (C24917 - C24916 + C24919 - C24918) * C48463 +
            (C22083 * C3673 - C22089 * C3669 + C48418 * C17570 -
             C22090 * C17569) *
                C47366 +
            (C22083 * C3678 - C22089 * C3674 + C48418 * C17572 -
             C22090 * C17571) *
                C36177) *
               C48271) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C30748 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C30746 +
            (C24880 - C24881 + C24882 - C24883) * C30749 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48682 +
           ((C22092 - C22093 + C22094 - C22095) * C30748 +
            (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
            C24921 * C48460) *
               C48669 +
           C39043 * C48637) *
              C48345 * C48328 * C110 +
          (((C22093 - C22092 + C22095 - C22094) * C30748 +
            (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
            C24925 * C48460) *
               C48682 +
           ((C22101 - C22100 + C22103 - C22102) * C30748 +
            (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
            C27898 * C48460) *
               C48669 +
           ((C22109 - C22108 + C22111 - C22110) * C30748 +
            (C22113 - C22112 + C22115 - C22114) * C30746 +
            (C22442 - C22443 + C22444 - C22445) * C30749 +
            (C22446 - C22447 + C22448 - C22449) * C48460) *
               C48637) *
              C48345 * C48328 * C111 +
          (C39043 * C48682 +
           (C22134 * C30748 + C22135 * C30746 +
            (C22443 - C22442 + C22445 - C22444) * C30749 +
            (C22447 - C22446 + C22449 - C22448) * C48460) *
               C48669 +
           ((C22117 - C22116 + C22119 - C22118) * C30748 +
            (C22121 - C22120 + C22123 - C22122) * C30746 +
            (C22083 * C402 - C22089 * C392 + C48418 * C695 - C22090 * C686) *
                C30749 +
            (C22083 * C410 - C22089 * C403 + C48418 * C701 - C22090 * C696) *
                C48460) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
            C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
               C30748 +
           (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
            C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
               C30746 +
           (C48692 * C394 - C23269 * C388 + C48688 * C687 - C23270 * C682 +
            C48678 * C1457 - C23271 * C1453 + C48660 * C1910 - C23272 * C1907) *
               C30749 +
           (C48692 * C406 - C23269 * C395 + C48688 * C697 - C23270 * C688 +
            C48678 * C1465 - C23271 * C1458 + C48660 * C1916 - C23272 * C1911) *
               C48460) *
              C48261 * C48345 * C48328 * C110 +
          ((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
            C23280) *
               C30748 +
           (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
            C23288) *
               C30746 +
           (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
            C23589) *
               C30749 +
           (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
            C23597) *
               C48460) *
              C48261 * C48345 * C48328 * C111 +
          ((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
            C23296) *
               C30748 +
           (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
            C23304) *
               C30746 +
           (C48692 * C398 - C23269 * C390 + C48688 * C691 - C23270 * C684 +
            C48678 * C1461 - C23271 * C1455 + C48660 * C1914 - C23272 * C1909) *
               C30749 +
           (C48692 * C408 - C23269 * C399 + C48688 * C699 - C23270 * C692 +
            C48678 * C1467 - C23271 * C1462 + C48660 * C1918 - C23272 * C1915) *
               C48460) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C48345 * C260 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C48345 * C260 +
           (((C22273 - C22272 + C22275 - C22274) * C30748 +
             (C22277 - C22276 + C22279 - C22278) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48460) *
                C48682 +
            ((C22281 - C22280 + C22283 - C22282) * C30748 +
             (C22285 - C22284 + C22287 - C22286) * C30746 +
             (C27692 - C27691 + C27694 - C27693) * C30749 +
             (C27696 - C27695 + C27698 - C27697) * C48460) *
                C48669 +
            ((C22289 - C22288 + C22291 - C22290) * C30748 +
             (C22293 - C22292 + C22295 - C22294) * C30746 +
             (C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C30749 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C48692 * C394 - C23269 * C388 + C48688 * C687 - C23270 * C682 +
             C48678 * C1457 - C23271 * C1453 + C48660 * C1910 -
             C23272 * C1907) *
                C30749 +
            (C48692 * C406 - C23269 * C395 + C48688 * C697 - C23270 * C688 +
             C48678 * C1465 - C23271 * C1458 + C48660 * C1916 -
             C23272 * C1911) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C23269 * C682 - C48692 * C687 + C23270 * C1453 - C48688 * C1457 +
             C23271 * C1907 - C48678 * C1910 + C23272 * C9212 -
             C48660 * C9214) *
                C30749 +
            (C23269 * C688 - C48692 * C697 + C23270 * C1458 - C48688 * C1465 +
             C23271 * C1911 - C48678 * C1916 + C23272 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C30748 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C30746 +
            (C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
             C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
             C23272 * C9213) *
                C30749 +
            (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
             C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
             C23272 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C386 +
           ((C24920 * C30748 + C24921 * C30746 + C24922 * C30749 +
             C24923 * C48460) *
                C48682 +
            (C27491 * C30748 + C27492 * C30746 +
             (C24469 - C24468 + C24471 - C24470) * C30749 +
             (C24473 - C24472 + C24475 - C24474) * C48460) *
                C48669 +
            ((C22443 - C22442 + C22445 - C22444) * C30748 +
             (C22447 - C22446 + C22449 - C22448) * C30746 +
             (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                 C30749 +
             (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C386 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C386 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C30748 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C30746 +
            (C48692 * C940 - C23269 * C934 + C48688 * C2331 - C23270 * C2323 +
             C48678 * C2332 - C23271 * C2324 + C48660 * C9945 -
             C23272 * C9944) *
                C30749 +
            (C48692 * C949 - C23269 * C941 + C48688 * C2341 - C23270 * C2333 +
             C48678 * C2342 - C23271 * C2334 + C48660 * C9947 -
             C23272 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C48345 * C510 +
           (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C48345 * C510 +
           (((C22273 - C22272 + C22275 - C22274) * C30748 +
             (C22277 - C22276 + C22279 - C22278) * C30746 +
             (C24671 - C24670 + C24673 - C24672) * C30749 +
             (C24675 - C24674 + C24677 - C24676) * C48460) *
                C48682 +
            ((C22281 - C22280 + C22283 - C22282) * C30748 +
             (C22285 - C22284 + C22287 - C22286) * C30746 +
             (C27692 - C27691 + C27694 - C27693) * C30749 +
             (C27696 - C27695 + C27698 - C27697) * C48460) *
                C48669 +
            ((C22289 - C22288 + C22291 - C22290) * C30748 +
             (C22293 - C22292 + C22295 - C22294) * C30746 +
             (C22083 * C693 - C22089 * C685 + C48418 * C1463 - C22090 * C1456) *
                 C30749 +
             (C22083 * C700 - C22089 * C694 + C48418 * C1468 - C22090 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C23269 * C682 - C48692 * C687 + C23270 * C1453 - C48688 * C1457 +
             C23271 * C1907 - C48678 * C1910 + C23272 * C9212 -
             C48660 * C9214) *
                C30749 +
            (C23269 * C688 - C48692 * C697 + C23270 * C1458 - C48688 * C1465 +
             C23271 * C1911 - C48678 * C1916 + C23272 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C30748 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C30746 +
            (C48692 * C689 - C23269 * C683 + C48688 * C1459 - C23270 * C1454 +
             C48678 * C1912 - C23271 * C1908 + C48660 * C9216 -
             C23272 * C9213) *
                C30749 +
            (C48692 * C698 - C23269 * C690 + C48688 * C1466 - C23270 * C1460 +
             C48678 * C1917 - C23271 * C1913 + C48660 * C9219 -
             C23272 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C30748 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C30746 +
            (C24880 - C24881 + C24882 - C24883) * C30749 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48682 +
           ((C22092 - C22093 + C22094 - C22095) * C30748 +
            (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
            C24921 * C48460) *
               C48669 +
           C39043 * C48637) *
              C48345 * C576 +
          (((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                C30748 +
            (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                C30746 +
            (C25462 - C25463 + C25464 - C25465) * C30749 +
            (C25466 - C25467 + C25468 - C25469) * C48460) *
               C48682 +
           ((C22272 - C22273 + C22274 - C22275) * C30748 +
            (C22276 - C22277 + C22278 - C22279) * C30746 +
            (C24670 - C24671 + C24672 - C24673) * C30749 +
            (C24674 - C24675 + C24676 - C24677) * C48460) *
               C48669 +
           ((C22280 - C22281 + C22282 - C22283) * C30748 +
            (C22284 - C22285 + C22286 - C22287) * C30746 +
            (C27691 - C27692 + C27693 - C27694) * C30749 +
            (C27695 - C27696 + C27697 - C27698) * C48460) *
               C48637) *
              C48345 * C577 +
          (((C22083 * C585 - C22089 * C580 + C48418 * C1271 - C22090 * C1267) *
                C30748 +
            (C22083 * C595 - C22089 * C586 + C48418 * C1279 - C22090 * C1272) *
                C30746 +
            (C22083 * C1457 - C22089 * C1453 + C48418 * C1910 -
             C22090 * C1907) *
                C30749 +
            (C22083 * C1465 - C22089 * C1458 + C48418 * C1916 -
             C22090 * C1911) *
                C48460) *
               C48682 +
           ((C22083 * C587 - C22089 * C581 + C48418 * C1273 - C22090 * C1268) *
                C30748 +
            (C22083 * C596 - C22089 * C588 + C48418 * C1280 - C22090 * C1274) *
                C30746 +
            (C22083 * C1459 - C22089 * C1454 + C48418 * C1912 -
             C22090 * C1908) *
                C30749 +
            (C22083 * C1466 - C22089 * C1460 + C48418 * C1917 -
             C22090 * C1913) *
                C48460) *
               C48669 +
           ((C22083 * C589 - C22089 * C582 + C48418 * C1275 - C22090 * C1269) *
                C30748 +
            (C22083 * C597 - C22089 * C590 + C48418 * C1281 - C22090 * C1276) *
                C30746 +
            (C22083 * C1461 - C22089 * C1455 + C48418 * C1914 -
             C22090 * C1909) *
                C30749 +
            (C22083 * C1467 - C22089 * C1462 + C48418 * C1918 -
             C22090 * C1915) *
                C48460) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
            C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
               C30748 +
           (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
            C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
               C30746 +
           (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
            C40865) *
               C30749 +
           (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
            C40873) *
               C48460) *
              C48261 * C48345 * C576 +
          ((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
            C23271 * C1267 - C48678 * C1271 + C23272 * C1749 - C48660 * C1752) *
               C30748 +
           (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
            C23271 * C1272 - C48678 * C1279 + C23272 * C1753 - C48660 * C1758) *
               C30746 +
           (C23269 * C682 - C48692 * C687 + C23270 * C1453 - C48688 * C1457 +
            C23271 * C1907 - C48678 * C1910 + C23272 * C9212 - C48660 * C9214) *
               C30749 +
           (C23269 * C688 - C48692 * C697 + C23270 * C1458 - C48688 * C1465 +
            C23271 * C1911 - C48678 * C1916 + C23272 * C9215 - C48660 * C9218) *
               C48460) *
              C48261 * C48345 * C577 +
          ((C48692 * C585 - C23269 * C580 + C48688 * C1271 - C23270 * C1267 +
            C48678 * C1752 - C23271 * C1749 + C48660 * C9124 - C23272 * C9122) *
               C30748 +
           (C48692 * C595 - C23269 * C586 + C48688 * C1279 - C23270 * C1272 +
            C48678 * C1758 - C23271 * C1753 + C48660 * C9128 - C23272 * C9125) *
               C30746 +
           (C48692 * C1457 - C23269 * C1453 + C48688 * C1910 - C23270 * C1907 +
            C48678 * C9214 - C23271 * C9212 + C48660 * C9451 - C23272 * C9450) *
               C30749 +
           (C48692 * C1465 - C23269 * C1458 + C48688 * C1916 - C23270 * C1911 +
            C48678 * C9218 - C23271 * C9215 + C48660 * C9453 - C23272 * C9452) *
               C48460) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C386 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C510 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C386 +
           (((C25463 - C25462 + C25465 - C25464) * C30748 +
             (C25467 - C25466 + C25469 - C25468) * C30746 +
             (C25471 - C25470 + C25473 - C25472) * C30749 +
             (C25475 - C25474 + C25477 - C25476) * C48460) *
                C48682 +
            ((C24671 - C24670 + C24673 - C24672) * C30748 +
             (C24675 - C24674 + C24677 - C24676) * C30746 +
             (C24679 - C24678 + C24681 - C24680) * C30749 +
             (C24683 - C24682 + C24685 - C24684) * C48460) *
                C48669 +
            ((C27692 - C27691 + C27694 - C27693) * C30748 +
             (C27696 - C27695 + C27698 - C27697) * C30746 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C30749 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C386 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C510 +
          (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C41232 - C41233 + C41234 - C41235 + C41236 - C41237 + C41238 -
             C41239) *
                C30749 +
            (C41240 - C41241 + C41242 - C41243 + C41244 - C41245 + C41246 -
             C41247) *
                C48460) *
               C48261 * C386 +
           ((C41233 - C41232 + C41235 - C41234 + C41237 - C41236 + C41239 -
             C41238) *
                C30748 +
            (C41241 - C41240 + C41243 - C41242 + C41245 - C41244 + C41247 -
             C41246) *
                C30746 +
            (C48692 * C2327 - C23269 * C2321 + C48688 * C2328 - C23270 * C2322 +
             C48678 * C9682 - C23271 * C9680 + C48660 * C9683 -
             C23272 * C9681) *
                C30749 +
            (C48692 * C2339 - C23269 * C2329 + C48688 * C2340 - C23270 * C2330 +
             C48678 * C9686 - C23271 * C9684 + C48660 * C9687 -
             C23272 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C22093 - C22092 + C22095 - C22094) * C30748 +
             (C22097 - C22096 + C22099 - C22098) * C30746 + C24924 * C30749 +
             C24925 * C48460) *
                C48682 +
            ((C22101 - C22100 + C22103 - C22102) * C30748 +
             (C22105 - C22104 + C22107 - C22106) * C30746 + C27897 * C30749 +
             C27898 * C48460) *
                C48669 +
            ((C22109 - C22108 + C22111 - C22110) * C30748 +
             (C22113 - C22112 + C22115 - C22114) * C30746 +
             (C22442 - C22443 + C22444 - C22445) * C30749 +
             (C22446 - C22447 + C22448 - C22449) * C48460) *
                C48637) *
               C784 +
           ((C24920 * C30748 + C24921 * C30746 + C24922 * C30749 +
             C24923 * C48460) *
                C48682 +
            (C27491 * C30748 + C27492 * C30746 +
             (C24469 - C24468 + C24471 - C24470) * C30749 +
             (C24473 - C24472 + C24475 - C24474) * C48460) *
                C48669 +
            ((C22443 - C22442 + C22445 - C22444) * C30748 +
             (C22447 - C22446 + C22449 - C22448) * C30746 +
             (C22083 * C944 - C22089 * C936 + C48418 * C2635 - C22090 * C2634) *
                 C30749 +
             (C22083 * C951 - C22089 * C945 + C48418 * C2637 - C22090 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C784 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C30748 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C30746 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C30749 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48460) *
               C48261 * C784 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C30748 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C30746 +
            (C48692 * C940 - C23269 * C934 + C48688 * C2331 - C23270 * C2323 +
             C48678 * C2332 - C23271 * C2324 + C48660 * C9945 -
             C23272 * C9944) *
                C30749 +
            (C48692 * C949 - C23269 * C941 + C48688 * C2341 - C23270 * C2333 +
             C48678 * C2342 - C23271 * C2334 + C48660 * C9947 -
             C23272 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                 C30748 +
             (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                 C30746 +
             (C24880 - C24881 + C24882 - C24883) * C30749 +
             (C24884 - C24885 + C24886 - C24887) * C48460) *
                C48682 +
            ((C22092 - C22093 + C22094 - C22095) * C30748 +
             (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
             C24921 * C48460) *
                C48669 +
            C39043 * C48637) *
               C784 +
           (((C24881 - C24880 + C24883 - C24882) * C30748 +
             (C24885 - C24884 + C24887 - C24886) * C30746 +
             (C24889 - C24888 + C24891 - C24890) * C30749 +
             (C24893 - C24892 + C24895 - C24894) * C48460) *
                C48682 +
            (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
             C24927 * C48460) *
                C48669 +
            (C27897 * C30748 + C27898 * C30746 +
             (C24468 - C24469 + C24470 - C24471) * C30749 +
             (C24472 - C24473 + C24474 - C24475) * C48460) *
                C48637) *
               C48647) *
              C260 +
          ((((C22089 * C264 - C22083 * C270 + C22090 * C580 - C48418 * C585) *
                 C30748 +
             (C22089 * C271 - C22083 * C282 + C22090 * C586 - C48418 * C595) *
                 C30746 +
             (C25462 - C25463 + C25464 - C25465) * C30749 +
             (C25466 - C25467 + C25468 - C25469) * C48460) *
                C48682 +
            ((C22272 - C22273 + C22274 - C22275) * C30748 +
             (C22276 - C22277 + C22278 - C22279) * C30746 +
             (C24670 - C24671 + C24672 - C24673) * C30749 +
             (C24674 - C24675 + C24676 - C24677) * C48460) *
                C48669 +
            ((C22280 - C22281 + C22282 - C22283) * C30748 +
             (C22284 - C22285 + C22286 - C22287) * C30746 +
             (C27691 - C27692 + C27693 - C27694) * C30749 +
             (C27695 - C27696 + C27697 - C27698) * C48460) *
                C48637) *
               C784 +
           (((C25463 - C25462 + C25465 - C25464) * C30748 +
             (C25467 - C25466 + C25469 - C25468) * C30746 +
             (C25471 - C25470 + C25473 - C25472) * C30749 +
             (C25475 - C25474 + C25477 - C25476) * C48460) *
                C48682 +
            ((C24671 - C24670 + C24673 - C24672) * C30748 +
             (C24675 - C24674 + C24677 - C24676) * C30746 +
             (C24679 - C24678 + C24681 - C24680) * C30749 +
             (C24683 - C24682 + C24685 - C24684) * C48460) *
                C48669 +
            ((C27692 - C27691 + C27694 - C27693) * C30748 +
             (C27696 - C27695 + C27698 - C27697) * C30746 +
             (C22083 * C2335 - C22089 * C2325 + C48418 * C2336 -
              C22090 * C2326) *
                 C30749 +
             (C22083 * C2343 - C22089 * C2337 + C48418 * C2344 -
              C22090 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
             C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
                C30748 +
            (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
             C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
                C30746 +
            (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
             C40865) *
                C30749 +
            (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
             C40873) *
                C48460) *
               C48261 * C784 +
           ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
             C40864) *
                C30748 +
            (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
             C40872) *
                C30746 +
            (C23269 * C933 - C48692 * C938 + C23270 * C2321 - C48688 * C2327 +
             C23271 * C2322 - C48678 * C2328 + C23272 * C9680 -
             C48660 * C9682) *
                C30749 +
            (C23269 * C939 - C48692 * C948 + C23270 * C2329 - C48688 * C2339 +
             C23271 * C2330 - C48678 * C2340 + C23272 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C260 +
          (((C23269 * C264 - C48692 * C270 + C23270 * C580 - C48688 * C585 +
             C23271 * C1267 - C48678 * C1271 + C23272 * C1749 -
             C48660 * C1752) *
                C30748 +
            (C23269 * C271 - C48692 * C282 + C23270 * C586 - C48688 * C595 +
             C23271 * C1272 - C48678 * C1279 + C23272 * C1753 -
             C48660 * C1758) *
                C30746 +
            (C41232 - C41233 + C41234 - C41235 + C41236 - C41237 + C41238 -
             C41239) *
                C30749 +
            (C41240 - C41241 + C41242 - C41243 + C41244 - C41245 + C41246 -
             C41247) *
                C48460) *
               C48261 * C784 +
           ((C41233 - C41232 + C41235 - C41234 + C41237 - C41236 + C41239 -
             C41238) *
                C30748 +
            (C41241 - C41240 + C41243 - C41242 + C41245 - C41244 + C41247 -
             C41246) *
                C30746 +
            (C48692 * C2327 - C23269 * C2321 + C48688 * C2328 - C23270 * C2322 +
             C48678 * C9682 - C23271 * C9680 + C48660 * C9683 -
             C23272 * C9681) *
                C30749 +
            (C48692 * C2339 - C23269 * C2329 + C48688 * C2340 - C23270 * C2330 +
             C48678 * C9686 - C23271 * C9684 + C48660 * C9687 -
             C23272 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C122 - C22089 * C115 + C48418 * C270 - C22090 * C264) *
                C30748 +
            (C22083 * C136 - C22089 * C123 + C48418 * C282 - C22090 * C271) *
                C30746 +
            (C24880 - C24881 + C24882 - C24883) * C30749 +
            (C24884 - C24885 + C24886 - C24887) * C48460) *
               C48682 +
           ((C22092 - C22093 + C22094 - C22095) * C30748 +
            (C22096 - C22097 + C22098 - C22099) * C30746 + C24920 * C30749 +
            C24921 * C48460) *
               C48669 +
           C39043 * C48637) *
              C930 +
          (((C24881 - C24880 + C24883 - C24882) * C30748 +
            (C24885 - C24884 + C24887 - C24886) * C30746 +
            (C24889 - C24888 + C24891 - C24890) * C30749 +
            (C24893 - C24892 + C24895 - C24894) * C48460) *
               C48682 +
           (C24924 * C30748 + C24925 * C30746 + C24926 * C30749 +
            C24927 * C48460) *
               C48669 +
           (C27897 * C30748 + C27898 * C30746 +
            (C24468 - C24469 + C24470 - C24471) * C30749 +
            (C24472 - C24473 + C24474 - C24475) * C48460) *
               C48637) *
              C931 +
          ((C26024 * C30748 + C26025 * C30746 +
            (C26017 - C26016 + C26019 - C26018) * C30749 +
            (C26021 - C26020 + C26023 - C26022) * C48460) *
               C48682 +
           (C24922 * C30748 + C24923 * C30746 +
            (C24913 - C24912 + C24915 - C24914) * C30749 +
            (C24917 - C24916 + C24919 - C24918) * C48460) *
               C48669 +
           ((C24469 - C24468 + C24471 - C24470) * C30748 +
            (C24473 - C24472 + C24475 - C24474) * C30746 +
            (C22083 * C2808 - C22089 * C2802 + C48418 * C3253 -
             C22090 * C3248) *
                C30749 +
            (C22083 * C2814 - C22089 * C2809 + C48418 * C3257 -
             C22090 * C3254) *
                C48460) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48692 * C122 - C23269 * C115 + C48688 * C270 - C23270 * C264 +
            C48678 * C585 - C23271 * C580 + C48660 * C1271 - C23272 * C1267) *
               C30748 +
           (C48692 * C136 - C23269 * C123 + C48688 * C282 - C23270 * C271 +
            C48678 * C595 - C23271 * C586 + C48660 * C1279 - C23272 * C1272) *
               C30746 +
           (C40858 - C40859 + C40860 - C40861 + C40862 - C40863 + C40864 -
            C40865) *
               C30749 +
           (C40866 - C40867 + C40868 - C40869 + C40870 - C40871 + C40872 -
            C40873) *
               C48460) *
              C48261 * C930 +
          ((C40859 - C40858 + C40861 - C40860 + C40863 - C40862 + C40865 -
            C40864) *
               C30748 +
           (C40867 - C40866 + C40869 - C40868 + C40871 - C40870 + C40873 -
            C40872) *
               C30746 +
           (C41606 - C41607 + C41608 - C41609 + C41610 - C41611 + C41612 -
            C41613) *
               C30749 +
           (C41614 - C41615 + C41616 - C41617 + C41618 - C41619 + C41620 -
            C41621) *
               C48460) *
              C48261 * C931 +
          ((C41607 - C41606 + C41609 - C41608 + C41611 - C41610 + C41613 -
            C41612) *
               C30748 +
           (C41615 - C41614 + C41617 - C41616 + C41619 - C41618 + C41621 -
            C41620) *
               C30746 +
           (C48692 * C2804 - C23269 * C2800 + C48688 * C3249 - C23270 * C3246 +
            C48678 * C10096 - C23271 * C10094 + C48660 * C10541 -
            C23272 * C10540) *
               C30749 +
           (C48692 * C2812 - C23269 * C2805 + C48688 * C3255 - C23270 * C3250 +
            C48678 * C10100 - C23271 * C10097 + C48660 * C10543 -
            C23272 * C10542) *
               C48460) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C114 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48373) *
               C48595 +
           ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
             C11116) *
                C114 +
            (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
             C11124) *
                C48373) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C114 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48373) *
               C48595 +
           ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
             C11132) *
                C114 +
            (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
             C11140) *
                C48373) *
               C48271) *
              C48345 * C48328 * C111 +
          (((C11126 - C11125 + C11128 - C11127 + C11130 - C11129 + C11132 -
             C11131) *
                C114 +
            (C11134 - C11133 + C11136 - C11135 + C11138 - C11137 + C11140 -
             C11139) *
                C48373) *
               C48595 +
           ((C11098 * C128 - C11104 * C118 + C11099 * C276 - C11105 * C267 +
             C11100 * C591 - C11106 * C583 + C48660 * C1277 - C11107 * C1270) *
                C114 +
            (C11098 * C139 - C11104 * C129 + C11099 * C285 - C11105 * C277 +
             C11100 * C598 - C11106 * C592 + C48660 * C1282 - C11107 * C1278) *
                C48373) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C114 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48373) *
               C3786 +
           ((C3793 - C3794 + C3795 - C3796) * C114 +
            (C3797 - C3798 + C3799 - C3800) * C48373) *
               C3787 +
           C3841 * C3788 + C3842 * C48654) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C114 +
            (C3798 - C3797 + C3800 - C3799) * C48373) *
               C3786 +
           ((C3802 - C3801 + C3804 - C3803) * C114 +
            (C3806 - C3805 + C3808 - C3807) * C48373) *
               C3787 +
           ((C3810 - C3809 + C3812 - C3811) * C114 +
            (C3814 - C3813 + C3816 - C3815) * C48373) *
               C3788 +
           ((C3817 - C3818 + C3819 - C3820) * C114 +
            (C3821 - C3822 + C3823 - C3824) * C48373) *
               C48654) *
              C48345 * C48328 * C111 +
          (C3841 * C3786 + C3842 * C3787 +
           ((C3818 - C3817 + C3820 - C3819) * C114 +
            (C3822 - C3821 + C3824 - C3823) * C48373) *
               C3788 +
           ((C48617 * C132 - C3790 * C120 + C48418 * C280 - C3791 * C269) *
                C114 +
            (C48617 * C141 - C3790 * C133 + C48418 * C287 - C3791 * C281) *
                C48373) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C15017 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C15014 +
            (C6530 - C6531 + C6532 - C6533) * C15018 +
            (C6534 - C6535 + C6536 - C6537) * C15015 +
            (C7649 - C7648 + C7651 - C7650) * C15019 +
            (C7653 - C7652 + C7655 - C7654) * C48653) *
               C48595 +
           ((C3793 - C3794 + C3795 - C3796) * C15017 +
            (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
            C6567 * C15015 + (C6547 - C6546 + C6549 - C6548) * C15019 +
            (C6551 - C6550 + C6553 - C6552) * C48653) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C15017 +
            (C3798 - C3797 + C3800 - C3799) * C15014 + C6568 * C15018 +
            C6569 * C15015 + (C6546 - C6547 + C6548 - C6549) * C15019 +
            (C6550 - C6551 + C6552 - C6553) * C48653) *
               C48595 +
           ((C3802 - C3801 + C3804 - C3803) * C15017 +
            (C3806 - C3805 + C3808 - C3807) * C15014 + C6570 * C15018 +
            C6571 * C15015 + (C6558 - C6559 + C6560 - C6561) * C15019 +
            (C6562 - C6563 + C6564 - C6565) * C48653) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C3833 * C15017 + C3834 * C15014 + C6120 * C15018 + C6121 * C15015 +
            (C6559 - C6558 + C6561 - C6560) * C15019 +
            (C6563 - C6562 + C6565 - C6564) * C48653) *
               C48595 +
           (C3835 * C15017 + C3836 * C15014 +
            (C4144 - C4143 + C4146 - C4145) * C15018 +
            (C4148 - C4147 + C4150 - C4149) * C15015 +
            (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                C15019 +
            (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                C48653) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
              C11277) *
                 C114 +
             (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
              C11285) *
                 C48373) *
                C48595 +
            ((C11098 * C274 - C11104 * C266 + C11099 * C589 - C11105 * C582 +
              C11100 * C1275 - C11106 * C1269 + C48660 * C1756 -
              C11107 * C1751) *
                 C114 +
             (C11098 * C284 - C11104 * C275 + C11099 * C597 - C11105 * C590 +
              C11100 * C1281 - C11106 * C1276 + C48660 * C1760 -
              C11107 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C114 +
             (C3978 - C3977 + C3980 - C3979) * C48373) *
                C3786 +
            ((C3982 - C3981 + C3984 - C3983) * C114 +
             (C3986 - C3985 + C3988 - C3987) * C48373) *
                C3787 +
            ((C3990 - C3989 + C3992 - C3991) * C114 +
             (C3994 - C3993 + C3996 - C3995) * C48373) *
                C3788 +
            ((C48617 * C278 - C3790 * C268 + C48418 * C593 - C3791 * C584) *
                 C114 +
             (C48617 * C286 - C3790 * C279 + C48418 * C599 - C3791 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C15017 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C15014 +
             (C6530 - C6531 + C6532 - C6533) * C15018 +
             (C6534 - C6535 + C6536 - C6537) * C15015 +
             (C7649 - C7648 + C7651 - C7650) * C15019 +
             (C7653 - C7652 + C7655 - C7654) * C48653) *
                C48595 +
            ((C3793 - C3794 + C3795 - C3796) * C15017 +
             (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
             C6567 * C15015 + (C6547 - C6546 + C6549 - C6548) * C15019 +
             (C6551 - C6550 + C6553 - C6552) * C48653) *
                C48271) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C15017 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C15014 +
             (C7106 - C7107 + C7108 - C7109) * C15018 +
             (C7110 - C7111 + C7112 - C7113) * C15015 +
             (C3790 * C2321 - C48617 * C2327 + C3791 * C2322 - C48418 * C2328) *
                 C15019 +
             (C3790 * C2329 - C48617 * C2339 + C3791 * C2330 - C48418 * C2340) *
                 C48653) *
                C48595 +
            ((C3973 - C3974 + C3975 - C3976) * C15017 +
             (C3977 - C3978 + C3979 - C3980) * C15014 +
             (C6320 - C6321 + C6322 - C6323) * C15018 +
             (C6324 - C6325 + C6326 - C6327) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48653) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C15017 +
             (C3798 - C3797 + C3800 - C3799) * C15014 + C6568 * C15018 +
             C6569 * C15015 + (C6546 - C6547 + C6548 - C6549) * C15019 +
             (C6550 - C6551 + C6552 - C6553) * C48653) *
                C48595 +
            ((C3802 - C3801 + C3804 - C3803) * C15017 +
             (C3806 - C3805 + C3808 - C3807) * C15014 + C6570 * C15018 +
             C6571 * C15015 + (C6558 - C6559 + C6560 - C6561) * C15019 +
             (C6562 - C6563 + C6564 - C6565) * C48653) *
                C48271) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C15017 +
             (C3978 - C3977 + C3980 - C3979) * C15014 +
             (C6321 - C6320 + C6323 - C6322) * C15018 +
             (C6325 - C6324 + C6327 - C6326) * C15015 +
             (C18489 - C18488 + C18491 - C18490) * C15019 +
             (C18493 - C18492 + C18495 - C18494) * C48653) *
                C48595 +
            ((C3982 - C3981 + C3984 - C3983) * C15017 +
             (C3986 - C3985 + C3988 - C3987) * C15014 +
             (C6329 - C6328 + C6331 - C6330) * C15018 +
             (C6333 - C6332 + C6335 - C6334) * C15015 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C15019 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48653) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C386 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C386 +
           (((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
              C11423) *
                 C114 +
             (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
              C11431) *
                 C48373) *
                C48595 +
            ((C11098 * C398 - C11104 * C390 + C11099 * C691 - C11105 * C684 +
              C11100 * C1461 - C11106 * C1455 + C48660 * C1914 -
              C11107 * C1909) *
                 C114 +
             (C11098 * C408 - C11104 * C399 + C11099 * C699 - C11105 * C692 +
              C11100 * C1467 - C11106 * C1462 + C48660 * C1918 -
              C11107 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C386 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C386 +
           (((C4128 - C4127 + C4130 - C4129) * C114 +
             (C4132 - C4131 + C4134 - C4133) * C48373) *
                C3786 +
            ((C4136 - C4135 + C4138 - C4137) * C114 +
             (C4140 - C4139 + C4142 - C4141) * C48373) *
                C3787 +
            ((C4144 - C4143 + C4146 - C4145) * C114 +
             (C4148 - C4147 + C4150 - C4149) * C48373) *
                C3788 +
            ((C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                 C114 +
             (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C15017 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C15014 +
             (C6530 - C6531 + C6532 - C6533) * C15018 +
             (C6534 - C6535 + C6536 - C6537) * C15015 +
             (C7649 - C7648 + C7651 - C7650) * C15019 +
             (C7653 - C7652 + C7655 - C7654) * C48653) *
                C48595 +
            ((C3793 - C3794 + C3795 - C3796) * C15017 +
             (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
             C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
                C48271) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C15017 +
             (C6535 - C6534 + C6537 - C6536) * C15014 +
             (C7648 - C7649 + C7650 - C7651) * C15018 +
             (C7652 - C7653 + C7654 - C7655) * C15015 +
             (C3790 * C2800 - C48617 * C2804 + C3791 * C3246 - C48418 * C3249) *
                 C15019 +
             (C3790 * C2805 - C48617 * C2812 + C3791 * C3250 - C48418 * C3255) *
                 C48653) *
                C48595 +
            (C6568 * C15017 + C6569 * C15014 + C18708 * C15018 +
             C18709 * C15015 + (C18698 - C18699 + C18700 - C18701) * C15019 +
             (C18702 - C18703 + C18704 - C18705) * C48653) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C15017 +
             (C3798 - C3797 + C3800 - C3799) * C15014 + C6568 * C15018 +
             C6569 * C15015 + C18708 * C15019 + C18709 * C48653) *
                C48595 +
            ((C3802 - C3801 + C3804 - C3803) * C15017 +
             (C3806 - C3805 + C3808 - C3807) * C15014 + C6570 * C15018 +
             C6571 * C15015 + (C6558 - C6559 + C6560 - C6561) * C15019 +
             (C6562 - C6563 + C6564 - C6565) * C48653) *
                C48271) *
               C386 +
           ((C6566 * C15017 + C6567 * C15014 + C18706 * C15018 +
             C18707 * C15015 + (C18699 - C18698 + C18701 - C18700) * C15019 +
             (C18703 - C18702 + C18705 - C18704) * C48653) *
                C48595 +
            (C6120 * C15017 + C6121 * C15014 +
             (C6559 - C6558 + C6561 - C6560) * C15018 +
             (C6563 - C6562 + C6565 - C6564) * C15015 +
             (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                 C15019 +
             (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                 C48653) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
              C11277) *
                 C114 +
             (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
              C11285) *
                 C48373) *
                C48595 +
            ((C11098 * C274 - C11104 * C266 + C11099 * C589 - C11105 * C582 +
              C11100 * C1275 - C11106 * C1269 + C48660 * C1756 -
              C11107 * C1751) *
                 C114 +
             (C11098 * C284 - C11104 * C275 + C11099 * C597 - C11105 * C590 +
              C11100 * C1281 - C11106 * C1276 + C48660 * C1760 -
              C11107 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C114 +
             (C3978 - C3977 + C3980 - C3979) * C48373) *
                C3786 +
            ((C3982 - C3981 + C3984 - C3983) * C114 +
             (C3986 - C3985 + C3988 - C3987) * C48373) *
                C3787 +
            ((C3990 - C3989 + C3992 - C3991) * C114 +
             (C3994 - C3993 + C3996 - C3995) * C48373) *
                C3788 +
            ((C48617 * C278 - C3790 * C268 + C48418 * C593 - C3791 * C584) *
                 C114 +
             (C48617 * C286 - C3790 * C279 + C48418 * C599 - C3791 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C15017 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C15014 +
             (C6530 - C6531 + C6532 - C6533) * C15018 +
             (C6534 - C6535 + C6536 - C6537) * C15015 +
             (C7649 - C7648 + C7651 - C7650) * C15019 +
             (C7653 - C7652 + C7655 - C7654) * C48653) *
                C48595 +
            ((C3793 - C3794 + C3795 - C3796) * C15017 +
             (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
             C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
                C48271) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C15017 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C15014 +
             (C7106 - C7107 + C7108 - C7109) * C15018 +
             (C7110 - C7111 + C7112 - C7113) * C15015 +
             (C3790 * C2321 - C48617 * C2327 + C3791 * C2322 - C48418 * C2328) *
                 C15019 +
             (C3790 * C2329 - C48617 * C2339 + C3791 * C2330 - C48418 * C2340) *
                 C48653) *
                C48595 +
            ((C3973 - C3974 + C3975 - C3976) * C15017 +
             (C3977 - C3978 + C3979 - C3980) * C15014 +
             (C6320 - C6321 + C6322 - C6323) * C15018 +
             (C6324 - C6325 + C6326 - C6327) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48653) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C15017 +
             (C3798 - C3797 + C3800 - C3799) * C15014 + C6568 * C15018 +
             C6569 * C15015 + C18708 * C15019 + C18709 * C48653) *
                C48595 +
            ((C3802 - C3801 + C3804 - C3803) * C15017 +
             (C3806 - C3805 + C3808 - C3807) * C15014 + C6570 * C15018 +
             C6571 * C15015 + (C6558 - C6559 + C6560 - C6561) * C15019 +
             (C6562 - C6563 + C6564 - C6565) * C48653) *
                C48271) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C15017 +
             (C3978 - C3977 + C3980 - C3979) * C15014 +
             (C6321 - C6320 + C6323 - C6322) * C15018 +
             (C6325 - C6324 + C6327 - C6326) * C15015 +
             (C18489 - C18488 + C18491 - C18490) * C15019 +
             (C18493 - C18492 + C18495 - C18494) * C48653) *
                C48595 +
            ((C3982 - C3981 + C3984 - C3983) * C15017 +
             (C3986 - C3985 + C3988 - C3987) * C15014 +
             (C6329 - C6328 + C6331 - C6330) * C15018 +
             (C6333 - C6332 + C6335 - C6334) * C15015 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C15019 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48653) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C114 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48373) *
               C48595 +
           ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
             C11116) *
                C114 +
            (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
             C11124) *
                C48373) *
               C48271) *
              C48345 * C576 +
          (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C114 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48373) *
               C48595 +
           ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
             C11278) *
                C114 +
            (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
             C11286) *
                C48373) *
               C48271) *
              C48345 * C577 +
          (((C11098 * C585 - C11104 * C580 + C11099 * C1271 - C11105 * C1267 +
             C11100 * C1752 - C11106 * C1749 + C48660 * C9124 -
             C11107 * C9122) *
                C114 +
            (C11098 * C595 - C11104 * C586 + C11099 * C1279 - C11105 * C1272 +
             C11100 * C1758 - C11106 * C1753 + C48660 * C9128 -
             C11107 * C9125) *
                C48373) *
               C48595 +
           ((C11098 * C587 - C11104 * C581 + C11099 * C1273 - C11105 * C1268 +
             C11100 * C1754 - C11106 * C1750 + C48660 * C9126 -
             C11107 * C9123) *
                C114 +
            (C11098 * C596 - C11104 * C588 + C11099 * C1280 - C11105 * C1274 +
             C11100 * C1759 - C11106 * C1755 + C48660 * C9129 -
             C11107 * C9127) *
                C48373) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C114 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48373) *
               C3786 +
           ((C3793 - C3794 + C3795 - C3796) * C114 +
            (C3797 - C3798 + C3799 - C3800) * C48373) *
               C3787 +
           C3841 * C3788 + C3842 * C48654) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C114 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C48373) *
               C3786 +
           ((C3973 - C3974 + C3975 - C3976) * C114 +
            (C3977 - C3978 + C3979 - C3980) * C48373) *
               C3787 +
           ((C3981 - C3982 + C3983 - C3984) * C114 +
            (C3985 - C3986 + C3987 - C3988) * C48373) *
               C3788 +
           ((C3989 - C3990 + C3991 - C3992) * C114 +
            (C3993 - C3994 + C3995 - C3996) * C48373) *
               C48654) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C114 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C48373) *
               C3786 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C114 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C48373) *
               C3787 +
           ((C48617 * C589 - C3790 * C582 + C48418 * C1275 - C3791 * C1269) *
                C114 +
            (C48617 * C597 - C3790 * C590 + C48418 * C1281 - C3791 * C1276) *
                C48373) *
               C3788 +
           ((C48617 * C591 - C3790 * C583 + C48418 * C1277 - C3791 * C1270) *
                C114 +
            (C48617 * C598 - C3790 * C592 + C48418 * C1282 - C3791 * C1278) *
                C48373) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C15017 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C15014 +
            (C6530 - C6531 + C6532 - C6533) * C15018 +
            (C6534 - C6535 + C6536 - C6537) * C15015 +
            (C7649 - C7648 + C7651 - C7650) * C15019 +
            (C7653 - C7652 + C7655 - C7654) * C48653) *
               C48595 +
           ((C3793 - C3794 + C3795 - C3796) * C15017 +
            (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
            C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
               C48271) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C15017 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C15014 +
            (C7106 - C7107 + C7108 - C7109) * C15018 +
            (C7110 - C7111 + C7112 - C7113) * C15015 +
            (C3790 * C2321 - C48617 * C2327 + C3791 * C2322 - C48418 * C2328) *
                C15019 +
            (C3790 * C2329 - C48617 * C2339 + C3791 * C2330 - C48418 * C2340) *
                C48653) *
               C48595 +
           ((C3973 - C3974 + C3975 - C3976) * C15017 +
            (C3977 - C3978 + C3979 - C3980) * C15014 +
            (C6320 - C6321 + C6322 - C6323) * C15018 +
            (C6324 - C6325 + C6326 - C6327) * C15015 +
            (C18488 - C18489 + C18490 - C18491) * C15019 +
            (C18492 - C18493 + C18494 - C18495) * C48653) *
               C48271) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C15017 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C15014 +
            (C48617 * C1457 - C3790 * C1453 + C48418 * C1910 - C3791 * C1907) *
                C15018 +
            (C48617 * C1465 - C3790 * C1458 + C48418 * C1916 - C3791 * C1911) *
                C15015 +
            (C48617 * C2328 - C3790 * C2322 + C48418 * C9682 - C3791 * C9680) *
                C15019 +
            (C48617 * C2340 - C3790 * C2330 + C48418 * C9686 - C3791 * C9684) *
                C48653) *
               C48595 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C15017 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C15014 +
            (C48617 * C1459 - C3790 * C1454 + C48418 * C1912 - C3791 * C1908) *
                C15018 +
            (C48617 * C1466 - C3790 * C1460 + C48418 * C1917 - C3791 * C1913) *
                C15015 +
            (C48617 * C2332 - C3790 * C2324 + C48418 * C9945 - C3791 * C9944) *
                C15019 +
            (C48617 * C2342 - C3790 * C2334 + C48418 * C9947 - C3791 * C9946) *
                C48653) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C386 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C510 +
          ((((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C386 +
           (((C11098 * C687 - C11104 * C682 + C11099 * C1457 - C11105 * C1453 +
              C11100 * C1910 - C11106 * C1907 + C48660 * C9214 -
              C11107 * C9212) *
                 C114 +
             (C11098 * C697 - C11104 * C688 + C11099 * C1465 - C11105 * C1458 +
              C11100 * C1916 - C11106 * C1911 + C48660 * C9218 -
              C11107 * C9215) *
                 C48373) *
                C48595 +
            ((C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
              C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
              C11107 * C9213) *
                 C114 +
             (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
              C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
              C11107 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C386 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C386 +
           (((C48617 * C687 - C3790 * C682 + C48418 * C1457 - C3791 * C1453) *
                 C114 +
             (C48617 * C697 - C3790 * C688 + C48418 * C1465 - C3791 * C1458) *
                 C48373) *
                C3786 +
            ((C48617 * C689 - C3790 * C683 + C48418 * C1459 - C3791 * C1454) *
                 C114 +
             (C48617 * C698 - C3790 * C690 + C48418 * C1466 - C3791 * C1460) *
                 C48373) *
                C3787 +
            ((C48617 * C691 - C3790 * C684 + C48418 * C1461 - C3791 * C1455) *
                 C114 +
             (C48617 * C699 - C3790 * C692 + C48418 * C1467 - C3791 * C1462) *
                 C48373) *
                C3788 +
            ((C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C114 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C15017 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C15014 +
             (C6530 - C6531 + C6532 - C6533) * C15018 +
             (C6534 - C6535 + C6536 - C6537) * C15015 +
             (C7649 - C7648 + C7651 - C7650) * C15019 +
             (C7653 - C7652 + C7655 - C7654) * C48653) *
                C48595 +
            ((C3793 - C3794 + C3795 - C3796) * C15017 +
             (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
             C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
                C48271) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C15017 +
             (C6535 - C6534 + C6537 - C6536) * C15014 +
             (C7648 - C7649 + C7650 - C7651) * C15018 +
             (C7652 - C7653 + C7654 - C7655) * C15015 +
             (C3790 * C2800 - C48617 * C2804 + C3791 * C3246 - C48418 * C3249) *
                 C15019 +
             (C3790 * C2805 - C48617 * C2812 + C3791 * C3250 - C48418 * C3255) *
                 C48653) *
                C48595 +
            (C6568 * C15017 + C6569 * C15014 + C18708 * C15018 +
             C18709 * C15015 + (C18698 - C18699 + C18700 - C18701) * C15019 +
             (C18702 - C18703 + C18704 - C18705) * C48653) *
                C48271) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C15017 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C15014 +
             (C7106 - C7107 + C7108 - C7109) * C15018 +
             (C7110 - C7111 + C7112 - C7113) * C15015 +
             (C19244 - C19245 + C19246 - C19247) * C15019 +
             (C19248 - C19249 + C19250 - C19251) * C48653) *
                C48595 +
            ((C3973 - C3974 + C3975 - C3976) * C15017 +
             (C3977 - C3978 + C3979 - C3980) * C15014 +
             (C6320 - C6321 + C6322 - C6323) * C15018 +
             (C6324 - C6325 + C6326 - C6327) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48653) *
                C48271) *
               C386 +
           (((C7107 - C7106 + C7109 - C7108) * C15017 +
             (C7111 - C7110 + C7113 - C7112) * C15014 +
             (C19245 - C19244 + C19247 - C19246) * C15018 +
             (C19249 - C19248 + C19251 - C19250) * C15015 +
             (C48617 * C3249 - C3790 * C3246 + C48418 * C10096 -
              C3791 * C10094) *
                 C15019 +
             (C48617 * C3255 - C3790 * C3250 + C48418 * C10100 -
              C3791 * C10097) *
                 C48653) *
                C48595 +
            ((C6321 - C6320 + C6323 - C6322) * C15017 +
             (C6325 - C6324 + C6327 - C6326) * C15014 +
             (C18489 - C18488 + C18491 - C18490) * C15018 +
             (C18493 - C18492 + C18495 - C18494) * C15015 +
             (C48617 * C3251 - C3790 * C3247 + C48418 * C10098 -
              C3791 * C10095) *
                 C15019 +
             (C48617 * C3256 - C3790 * C3252 + C48418 * C10101 -
              C3791 * C10099) *
                 C48653) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C784 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C784 +
           (((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
              C11423) *
                 C114 +
             (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
              C11431) *
                 C48373) *
                C48595 +
            ((C11098 * C398 - C11104 * C390 + C11099 * C691 - C11105 * C684 +
              C11100 * C1461 - C11106 * C1455 + C48660 * C1914 -
              C11107 * C1909) *
                 C114 +
             (C11098 * C408 - C11104 * C399 + C11099 * C699 - C11105 * C692 +
              C11100 * C1467 - C11106 * C1462 + C48660 * C1918 -
              C11107 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C784 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C784 +
           (((C4128 - C4127 + C4130 - C4129) * C114 +
             (C4132 - C4131 + C4134 - C4133) * C48373) *
                C3786 +
            ((C4136 - C4135 + C4138 - C4137) * C114 +
             (C4140 - C4139 + C4142 - C4141) * C48373) *
                C3787 +
            ((C4144 - C4143 + C4146 - C4145) * C114 +
             (C4148 - C4147 + C4150 - C4149) * C48373) *
                C3788 +
            ((C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                 C114 +
             (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C15017 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C15014 +
             (C6530 - C6531 + C6532 - C6533) * C15018 +
             (C6534 - C6535 + C6536 - C6537) * C15015 +
             (C7649 - C7648 + C7651 - C7650) * C15019 +
             (C7653 - C7652 + C7655 - C7654) * C48653) *
                C48595 +
            ((C3793 - C3794 + C3795 - C3796) * C15017 +
             (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
             C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
                C48271) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C15017 +
             (C6535 - C6534 + C6537 - C6536) * C15014 +
             (C7648 - C7649 + C7650 - C7651) * C15018 +
             (C7652 - C7653 + C7654 - C7655) * C15015 +
             (C3790 * C2800 - C48617 * C2804 + C3791 * C3246 - C48418 * C3249) *
                 C15019 +
             (C3790 * C2805 - C48617 * C2812 + C3791 * C3250 - C48418 * C3255) *
                 C48653) *
                C48595 +
            (C6568 * C15017 + C6569 * C15014 + C18708 * C15018 +
             C18709 * C15015 + (C18698 - C18699 + C18700 - C18701) * C15019 +
             (C18702 - C18703 + C18704 - C18705) * C48653) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C15017 +
             (C3798 - C3797 + C3800 - C3799) * C15014 + C6568 * C15018 +
             C6569 * C15015 + C18708 * C15019 + C18709 * C48653) *
                C48595 +
            ((C3802 - C3801 + C3804 - C3803) * C15017 +
             (C3806 - C3805 + C3808 - C3807) * C15014 + C6570 * C15018 +
             C6571 * C15015 + (C6558 - C6559 + C6560 - C6561) * C15019 +
             (C6562 - C6563 + C6564 - C6565) * C48653) *
                C48271) *
               C784 +
           ((C6566 * C15017 + C6567 * C15014 + C18706 * C15018 +
             C18707 * C15015 + (C18699 - C18698 + C18701 - C18700) * C15019 +
             (C18703 - C18702 + C18705 - C18704) * C48653) *
                C48595 +
            (C6120 * C15017 + C6121 * C15014 +
             (C6559 - C6558 + C6561 - C6560) * C15018 +
             (C6563 - C6562 + C6565 - C6564) * C15015 +
             (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                 C15019 +
             (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                 C48653) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C784 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C260 +
          ((((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C784 +
           (((C11098 * C687 - C11104 * C682 + C11099 * C1457 - C11105 * C1453 +
              C11100 * C1910 - C11106 * C1907 + C48660 * C9214 -
              C11107 * C9212) *
                 C114 +
             (C11098 * C697 - C11104 * C688 + C11099 * C1465 - C11105 * C1458 +
              C11100 * C1916 - C11106 * C1911 + C48660 * C9218 -
              C11107 * C9215) *
                 C48373) *
                C48595 +
            ((C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
              C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
              C11107 * C9213) *
                 C114 +
             (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
              C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
              C11107 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C784 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C784 +
           (((C48617 * C687 - C3790 * C682 + C48418 * C1457 - C3791 * C1453) *
                 C114 +
             (C48617 * C697 - C3790 * C688 + C48418 * C1465 - C3791 * C1458) *
                 C48373) *
                C3786 +
            ((C48617 * C689 - C3790 * C683 + C48418 * C1459 - C3791 * C1454) *
                 C114 +
             (C48617 * C698 - C3790 * C690 + C48418 * C1466 - C3791 * C1460) *
                 C48373) *
                C3787 +
            ((C48617 * C691 - C3790 * C684 + C48418 * C1461 - C3791 * C1455) *
                 C114 +
             (C48617 * C699 - C3790 * C692 + C48418 * C1467 - C3791 * C1462) *
                 C48373) *
                C3788 +
            ((C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C114 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C15017 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C15014 +
             (C6530 - C6531 + C6532 - C6533) * C15018 +
             (C6534 - C6535 + C6536 - C6537) * C15015 +
             (C7649 - C7648 + C7651 - C7650) * C15019 +
             (C7653 - C7652 + C7655 - C7654) * C48653) *
                C48595 +
            ((C3793 - C3794 + C3795 - C3796) * C15017 +
             (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
             C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
                C48271) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C15017 +
             (C6535 - C6534 + C6537 - C6536) * C15014 +
             (C7648 - C7649 + C7650 - C7651) * C15018 +
             (C7652 - C7653 + C7654 - C7655) * C15015 +
             (C3790 * C2800 - C48617 * C2804 + C3791 * C3246 - C48418 * C3249) *
                 C15019 +
             (C3790 * C2805 - C48617 * C2812 + C3791 * C3250 - C48418 * C3255) *
                 C48653) *
                C48595 +
            (C6568 * C15017 + C6569 * C15014 + C18708 * C15018 +
             C18709 * C15015 + (C18698 - C18699 + C18700 - C18701) * C15019 +
             (C18702 - C18703 + C18704 - C18705) * C48653) *
                C48271) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C15017 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C15014 +
             (C7106 - C7107 + C7108 - C7109) * C15018 +
             (C7110 - C7111 + C7112 - C7113) * C15015 +
             (C19244 - C19245 + C19246 - C19247) * C15019 +
             (C19248 - C19249 + C19250 - C19251) * C48653) *
                C48595 +
            ((C3973 - C3974 + C3975 - C3976) * C15017 +
             (C3977 - C3978 + C3979 - C3980) * C15014 +
             (C6320 - C6321 + C6322 - C6323) * C15018 +
             (C6324 - C6325 + C6326 - C6327) * C15015 +
             (C18488 - C18489 + C18490 - C18491) * C15019 +
             (C18492 - C18493 + C18494 - C18495) * C48653) *
                C48271) *
               C784 +
           (((C7107 - C7106 + C7109 - C7108) * C15017 +
             (C7111 - C7110 + C7113 - C7112) * C15014 +
             (C19245 - C19244 + C19247 - C19246) * C15018 +
             (C19249 - C19248 + C19251 - C19250) * C15015 +
             (C48617 * C3249 - C3790 * C3246 + C48418 * C10096 -
              C3791 * C10094) *
                 C15019 +
             (C48617 * C3255 - C3790 * C3250 + C48418 * C10100 -
              C3791 * C10097) *
                 C48653) *
                C48595 +
            ((C6321 - C6320 + C6323 - C6322) * C15017 +
             (C6325 - C6324 + C6327 - C6326) * C15014 +
             (C18489 - C18488 + C18491 - C18490) * C15018 +
             (C18493 - C18492 + C18495 - C18494) * C15015 +
             (C48617 * C3251 - C3790 * C3247 + C48418 * C10098 -
              C3791 * C10095) *
                 C15019 +
             (C48617 * C3256 - C3790 * C3252 + C48418 * C10101 -
              C3791 * C10099) *
                 C48653) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C114 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48373) *
               C48595 +
           ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
             C11116) *
                C114 +
            (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
             C11124) *
                C48373) *
               C48271) *
              C930 +
          (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
             C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
             C48660 * C1910) *
                C114 +
            (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
             C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
             C48660 * C1916) *
                C48373) *
               C48595 +
           ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C114 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48373) *
               C48271) *
              C931 +
          (((C11098 * C938 - C11104 * C933 + C11099 * C2327 - C11105 * C2321 +
             C11100 * C2328 - C11106 * C2322 + C48660 * C9682 -
             C11107 * C9680) *
                C114 +
            (C11098 * C948 - C11104 * C939 + C11099 * C2339 - C11105 * C2329 +
             C11100 * C2340 - C11106 * C2330 + C48660 * C9686 -
             C11107 * C9684) *
                C48373) *
               C48595 +
           ((C11098 * C940 - C11104 * C934 + C11099 * C2331 - C11105 * C2323 +
             C11100 * C2332 - C11106 * C2324 + C48660 * C9945 -
             C11107 * C9944) *
                C114 +
            (C11098 * C949 - C11104 * C941 + C11099 * C2341 - C11105 * C2333 +
             C11100 * C2342 - C11106 * C2334 + C48660 * C9947 -
             C11107 * C9946) *
                C48373) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C114 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48373) *
               C3786 +
           ((C3793 - C3794 + C3795 - C3796) * C114 +
            (C3797 - C3798 + C3799 - C3800) * C48373) *
               C3787 +
           C3841 * C3788 + C3842 * C48654) *
              C930 +
          (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                C114 +
            (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                C48373) *
               C3786 +
           ((C4127 - C4128 + C4129 - C4130) * C114 +
            (C4131 - C4132 + C4133 - C4134) * C48373) *
               C3787 +
           ((C4135 - C4136 + C4137 - C4138) * C114 +
            (C4139 - C4140 + C4141 - C4142) * C48373) *
               C3788 +
           ((C4143 - C4144 + C4145 - C4146) * C114 +
            (C4147 - C4148 + C4149 - C4150) * C48373) *
               C48654) *
              C931 +
          (((C48617 * C938 - C3790 * C933 + C48418 * C2327 - C3791 * C2321) *
                C114 +
            (C48617 * C948 - C3790 * C939 + C48418 * C2339 - C3791 * C2329) *
                C48373) *
               C3786 +
           ((C48617 * C940 - C3790 * C934 + C48418 * C2331 - C3791 * C2323) *
                C114 +
            (C48617 * C949 - C3790 * C941 + C48418 * C2341 - C3791 * C2333) *
                C48373) *
               C3787 +
           ((C48617 * C942 - C3790 * C935 + C48418 * C2335 - C3791 * C2325) *
                C114 +
            (C48617 * C950 - C3790 * C943 + C48418 * C2343 - C3791 * C2337) *
                C48373) *
               C3788 +
           ((C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                C114 +
            (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                C48373) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C15017 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C15014 +
            (C6530 - C6531 + C6532 - C6533) * C15018 +
            (C6534 - C6535 + C6536 - C6537) * C15015 + C19798 * C15019 +
            C19799 * C48653) *
               C48595 +
           ((C3793 - C3794 + C3795 - C3796) * C15017 +
            (C3797 - C3798 + C3799 - C3800) * C15014 + C6566 * C15018 +
            C6567 * C15015 + C18706 * C15019 + C18707 * C48653) *
               C48271) *
              C930 +
          (((C6531 - C6530 + C6533 - C6532) * C15017 +
            (C6535 - C6534 + C6537 - C6536) * C15014 +
            (C7648 - C7649 + C7650 - C7651) * C15018 +
            (C7652 - C7653 + C7654 - C7655) * C15015 +
            (C19790 - C19791 + C19792 - C19793) * C15019 +
            (C19794 - C19795 + C19796 - C19797) * C48653) *
               C48595 +
           (C6568 * C15017 + C6569 * C15014 + C18708 * C15018 +
            C18709 * C15015 + (C18698 - C18699 + C18700 - C18701) * C15019 +
            (C18702 - C18703 + C18704 - C18705) * C48653) *
               C48271) *
              C931 +
          ((C19798 * C15017 + C19799 * C15014 +
            (C19791 - C19790 + C19793 - C19792) * C15018 +
            (C19795 - C19794 + C19797 - C19796) * C15015 +
            (C48617 * C3671 - C3790 * C3668 + C48418 * C10972 -
             C3791 * C10970) *
                C15019 +
            (C48617 * C3677 - C3790 * C3672 + C48418 * C10976 -
             C3791 * C10974) *
                C48653) *
               C48595 +
           (C18706 * C15017 + C18707 * C15014 +
            (C18699 - C18698 + C18701 - C18700) * C15018 +
            (C18703 - C18702 + C18705 - C18704) * C15015 +
            (C48617 * C3673 - C3790 * C3669 + C48418 * C17570 -
             C3791 * C17569) *
                C15019 +
            (C48617 * C3678 - C3790 * C3674 + C48418 * C17572 -
             C3791 * C17571) *
                C48653) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
            C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
               C4966 +
           (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
            C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
               C48618 +
           (C11098 * C394 - C11104 * C388 + C11099 * C687 - C11105 * C682 +
            C11100 * C1457 - C11106 * C1453 + C48660 * C1910 - C11107 * C1907) *
               C4967 +
           (C11098 * C406 - C11104 * C395 + C11099 * C697 - C11105 * C688 +
            C11100 * C1465 - C11106 * C1458 + C48660 * C1916 - C11107 * C1911) *
               C48460) *
              C48261 * C48345 * C48328 * C110 +
          ((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
            C11115) *
               C4966 +
           (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
            C11123) *
               C48618 +
           (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
            C11424) *
               C4967 +
           (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
            C11432) *
               C48460) *
              C48261 * C48345 * C48328 * C111 +
          ((C11126 - C11125 + C11128 - C11127 + C11130 - C11129 + C11132 -
            C11131) *
               C4966 +
           (C11134 - C11133 + C11136 - C11135 + C11138 - C11137 + C11140 -
            C11139) *
               C48618 +
           (C11098 * C398 - C11104 * C390 + C11099 * C691 - C11105 * C684 +
            C11100 * C1461 - C11106 * C1455 + C48660 * C1914 - C11107 * C1909) *
               C4967 +
           (C11098 * C408 - C11104 * C399 + C11099 * C699 - C11105 * C692 +
            C11100 * C1467 - C11106 * C1462 + C48660 * C1918 - C11107 * C1915) *
               C48460) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C4966 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48618 +
            (C48617 * C394 - C3790 * C388 + C48418 * C687 - C3791 * C682) *
                C4967 +
            (C48617 * C406 - C3790 * C395 + C48418 * C697 - C3791 * C688) *
                C48460) *
               C1066 +
           ((C3793 - C3794 + C3795 - C3796) * C4966 +
            (C3797 - C3798 + C3799 - C3800) * C48618 +
            (C4128 - C4127 + C4130 - C4129) * C4967 +
            (C4132 - C4131 + C4134 - C4133) * C48460) *
               C1067 +
           C6125 * C48637) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C4966 +
            (C3798 - C3797 + C3800 - C3799) * C48618 +
            (C4127 - C4128 + C4129 - C4130) * C4967 +
            (C4131 - C4132 + C4133 - C4134) * C48460) *
               C1066 +
           ((C3802 - C3801 + C3804 - C3803) * C4966 +
            (C3806 - C3805 + C3808 - C3807) * C48618 +
            (C4135 - C4136 + C4137 - C4138) * C4967 +
            (C4139 - C4140 + C4141 - C4142) * C48460) *
               C1067 +
           ((C3810 - C3809 + C3812 - C3811) * C4966 +
            (C3814 - C3813 + C3816 - C3815) * C48618 +
            (C4143 - C4144 + C4145 - C4146) * C4967 +
            (C4147 - C4148 + C4149 - C4150) * C48460) *
               C48637) *
              C48345 * C48328 * C111 +
          (C6125 * C1066 +
           (C3835 * C4966 + C3836 * C48618 +
            (C4144 - C4143 + C4146 - C4145) * C4967 +
            (C4148 - C4147 + C4150 - C4149) * C48460) *
               C1067 +
           ((C3818 - C3817 + C3820 - C3819) * C4966 +
            (C3822 - C3821 + C3824 - C3823) * C48618 +
            (C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                C4967 +
            (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                C48460) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
               C19901 +
           (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
               C19897 +
           (C6530 - C6531 + C6532 - C6533) * C19902 +
           (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
           C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
           (C19795 - C19794 + C19797 - C19796) * C48666) *
              C48261 * C48345 * C48328 * C110 +
          ((C3794 - C3793 + C3796 - C3795) * C19901 +
           (C3798 - C3797 + C3800 - C3799) * C19897 + C6568 * C19902 +
           C6569 * C19898 + C18708 * C19903 + C18709 * C19899 +
           (C18698 - C18699 + C18700 - C18701) * C19904 +
           (C18702 - C18703 + C18704 - C18705) * C48666) *
              C48261 * C48345 * C48328 * C111 +
          (C3833 * C19901 + C3834 * C19897 + C6120 * C19902 + C6121 * C19898 +
           (C6559 - C6558 + C6561 - C6560) * C19903 +
           (C6563 - C6562 + C6565 - C6564) * C19899 +
           (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
               C19904 +
           (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
               C48666) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C11098 * C394 - C11104 * C388 + C11099 * C687 - C11105 * C682 +
             C11100 * C1457 - C11106 * C1453 + C48660 * C1910 -
             C11107 * C1907) *
                C4967 +
            (C11098 * C406 - C11104 * C395 + C11099 * C697 - C11105 * C688 +
             C11100 * C1465 - C11106 * C1458 + C48660 * C1916 -
             C11107 * C1911) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C11104 * C682 - C11098 * C687 + C11105 * C1453 - C11099 * C1457 +
             C11106 * C1907 - C11100 * C1910 + C11107 * C9212 -
             C48660 * C9214) *
                C4967 +
            (C11104 * C688 - C11098 * C697 + C11105 * C1458 - C11099 * C1465 +
             C11106 * C1911 - C11100 * C1916 + C11107 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
             C11277) *
                C4966 +
            (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
             C11285) *
                C48618 +
            (C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
             C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
             C11107 * C9213) *
                C4967 +
            (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
             C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
             C11107 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C48617 * C394 - C3790 * C388 + C48418 * C687 - C3791 * C682) *
                 C4967 +
             (C48617 * C406 - C3790 * C395 + C48418 * C697 - C3791 * C688) *
                 C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 +
             (C4128 - C4127 + C4130 - C4129) * C4967 +
             (C4132 - C4131 + C4134 - C4133) * C48460) *
                C1067 +
            C6125 * C48637) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C3790 * C682 - C48617 * C687 + C3791 * C1453 - C48418 * C1457) *
                 C4967 +
             (C3790 * C688 - C48617 * C697 + C3791 * C1458 - C48418 * C1465) *
                 C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 +
             (C4127 - C4128 + C4129 - C4130) * C4967 +
             (C4131 - C4132 + C4133 - C4134) * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 +
             (C4135 - C4136 + C4137 - C4138) * C4967 +
             (C4139 - C4140 + C4141 - C4142) * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C4966 +
             (C3978 - C3977 + C3980 - C3979) * C48618 +
             (C6321 - C6320 + C6323 - C6322) * C4967 +
             (C6325 - C6324 + C6327 - C6326) * C48460) *
                C1066 +
            ((C3982 - C3981 + C3984 - C3983) * C4966 +
             (C3986 - C3985 + C3988 - C3987) * C48618 +
             (C6329 - C6328 + C6331 - C6330) * C4967 +
             (C6333 - C6332 + C6335 - C6334) * C48460) *
                C1067 +
            ((C3990 - C3989 + C3992 - C3991) * C4966 +
             (C3994 - C3993 + C3996 - C3995) * C48618 +
             (C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C4967 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C19901 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C19897 +
            (C6530 - C6531 + C6532 - C6533) * C19902 +
            (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48666) *
               C48261 * C48345 * C260 +
           ((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C19901 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C19897 +
            (C7106 - C7107 + C7108 - C7109) * C19902 +
            (C7110 - C7111 + C7112 - C7113) * C19898 +
            (C19244 - C19245 + C19246 - C19247) * C19903 +
            (C19248 - C19249 + C19250 - C19251) * C19899 +
            (C3790 * C3246 - C48617 * C3249 + C3791 * C10094 -
             C48418 * C10096) *
                C19904 +
            (C3790 * C3250 - C48617 * C3255 + C3791 * C10097 -
             C48418 * C10100) *
                C48666) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C3794 - C3793 + C3796 - C3795) * C19901 +
            (C3798 - C3797 + C3800 - C3799) * C19897 + C6568 * C19902 +
            C6569 * C19898 + C18708 * C19903 + C18709 * C19899 +
            (C18698 - C18699 + C18700 - C18701) * C19904 +
            (C18702 - C18703 + C18704 - C18705) * C48666) *
               C48261 * C48345 * C260 +
           ((C3974 - C3973 + C3976 - C3975) * C19901 +
            (C3978 - C3977 + C3980 - C3979) * C19897 +
            (C6321 - C6320 + C6323 - C6322) * C19902 +
            (C6325 - C6324 + C6327 - C6326) * C19898 +
            (C18489 - C18488 + C18491 - C18490) * C19903 +
            (C18493 - C18492 + C18495 - C18494) * C19899 +
            (C48617 * C3251 - C3790 * C3247 + C48418 * C10098 -
             C3791 * C10095) *
                C19904 +
            (C48617 * C3256 - C3790 * C3252 + C48418 * C10101 -
             C3791 * C10099) *
                C48666) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C386 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C386 +
           ((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
             C11423) *
                C4966 +
            (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
             C11431) *
                C48618 +
            (C11098 * C940 - C11104 * C934 + C11099 * C2331 - C11105 * C2323 +
             C11100 * C2332 - C11106 * C2324 + C48660 * C9945 -
             C11107 * C9944) *
                C4967 +
            (C11098 * C949 - C11104 * C941 + C11099 * C2341 - C11105 * C2333 +
             C11100 * C2342 - C11106 * C2334 + C48660 * C9947 -
             C11107 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 + C6568 * C4967 +
             C6569 * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 + C6570 * C4967 +
             C6571 * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C386 +
           ((C6566 * C4966 + C6567 * C48618 +
             (C6547 - C6546 + C6549 - C6548) * C4967 +
             (C6551 - C6550 + C6553 - C6552) * C48460) *
                C1066 +
            (C6120 * C4966 + C6121 * C48618 +
             (C6559 - C6558 + C6561 - C6560) * C4967 +
             (C6563 - C6562 + C6565 - C6564) * C48460) *
                C1067 +
            ((C4144 - C4143 + C4146 - C4145) * C4966 +
             (C4148 - C4147 + C4150 - C4149) * C48618 +
             (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                 C4967 +
             (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C19901 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C19897 +
            (C6530 - C6531 + C6532 - C6533) * C19902 +
            (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48666) *
               C48261 * C386 +
           ((C6531 - C6530 + C6533 - C6532) * C19901 +
            (C6535 - C6534 + C6537 - C6536) * C19897 +
            (C7648 - C7649 + C7650 - C7651) * C19902 +
            (C7652 - C7653 + C7654 - C7655) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C3790 * C3668 - C48617 * C3671 + C3791 * C10970 -
             C48418 * C10972) *
                C19904 +
            (C3790 * C3672 - C48617 * C3677 + C3791 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C3794 - C3793 + C3796 - C3795) * C19901 +
            (C3798 - C3797 + C3800 - C3799) * C19897 + C6568 * C19902 +
            C6569 * C19898 + C18708 * C19903 + C18709 * C19899 +
            (C18698 - C18699 + C18700 - C18701) * C19904 +
            (C18702 - C18703 + C18704 - C18705) * C48666) *
               C48261 * C386 +
           (C6566 * C19901 + C6567 * C19897 + C18706 * C19902 +
            C18707 * C19898 + (C18699 - C18698 + C18701 - C18700) * C19903 +
            (C18703 - C18702 + C18705 - C18704) * C19899 +
            (C48617 * C3673 - C3790 * C3669 + C48418 * C17570 -
             C3791 * C17569) *
                C19904 +
            (C48617 * C3678 - C3790 * C3674 + C48418 * C17572 -
             C3791 * C17571) *
                C48666) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C11104 * C682 - C11098 * C687 + C11105 * C1453 - C11099 * C1457 +
             C11106 * C1907 - C11100 * C1910 + C11107 * C9212 -
             C48660 * C9214) *
                C4967 +
            (C11104 * C688 - C11098 * C697 + C11105 * C1458 - C11099 * C1465 +
             C11106 * C1911 - C11100 * C1916 + C11107 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
             C11277) *
                C4966 +
            (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
             C11285) *
                C48618 +
            (C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
             C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
             C11107 * C9213) *
                C4967 +
            (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
             C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
             C11107 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C3790 * C682 - C48617 * C687 + C3791 * C1453 - C48418 * C1457) *
                 C4967 +
             (C3790 * C688 - C48617 * C697 + C3791 * C1458 - C48418 * C1465) *
                 C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 + C6568 * C4967 +
             C6569 * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 + C6570 * C4967 +
             C6571 * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C4966 +
             (C3978 - C3977 + C3980 - C3979) * C48618 +
             (C6321 - C6320 + C6323 - C6322) * C4967 +
             (C6325 - C6324 + C6327 - C6326) * C48460) *
                C1066 +
            ((C3982 - C3981 + C3984 - C3983) * C4966 +
             (C3986 - C3985 + C3988 - C3987) * C48618 +
             (C6329 - C6328 + C6331 - C6330) * C4967 +
             (C6333 - C6332 + C6335 - C6334) * C48460) *
                C1067 +
            ((C3990 - C3989 + C3992 - C3991) * C4966 +
             (C3994 - C3993 + C3996 - C3995) * C48618 +
             (C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C4967 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C19901 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C19897 +
            (C6530 - C6531 + C6532 - C6533) * C19902 +
            (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48666) *
               C48261 * C48345 * C510 +
           ((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C19901 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C19897 +
            (C7106 - C7107 + C7108 - C7109) * C19902 +
            (C7110 - C7111 + C7112 - C7113) * C19898 +
            (C19244 - C19245 + C19246 - C19247) * C19903 +
            (C19248 - C19249 + C19250 - C19251) * C19899 +
            (C3790 * C3246 - C48617 * C3249 + C3791 * C10094 -
             C48418 * C10096) *
                C19904 +
            (C3790 * C3250 - C48617 * C3255 + C3791 * C10097 -
             C48418 * C10100) *
                C48666) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C3794 - C3793 + C3796 - C3795) * C19901 +
            (C3798 - C3797 + C3800 - C3799) * C19897 + C6568 * C19902 +
            C6569 * C19898 + C18708 * C19903 + C18709 * C19899 +
            (C18698 - C18699 + C18700 - C18701) * C19904 +
            (C18702 - C18703 + C18704 - C18705) * C48666) *
               C48261 * C48345 * C510 +
           ((C3974 - C3973 + C3976 - C3975) * C19901 +
            (C3978 - C3977 + C3980 - C3979) * C19897 +
            (C6321 - C6320 + C6323 - C6322) * C19902 +
            (C6325 - C6324 + C6327 - C6326) * C19898 +
            (C18489 - C18488 + C18491 - C18490) * C19903 +
            (C18493 - C18492 + C18495 - C18494) * C19899 +
            (C48617 * C3251 - C3790 * C3247 + C48418 * C10098 -
             C3791 * C10095) *
                C19904 +
            (C48617 * C3256 - C3790 * C3252 + C48418 * C10101 -
             C3791 * C10099) *
                C48666) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
            C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
               C4966 +
           (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
            C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
               C48618 +
           (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
            C14148) *
               C4967 +
           (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
            C14156) *
               C48460) *
              C48261 * C48345 * C576 +
          ((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
            C11106 * C1267 - C11100 * C1271 + C11107 * C1749 - C48660 * C1752) *
               C4966 +
           (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
            C11106 * C1272 - C11100 * C1279 + C11107 * C1753 - C48660 * C1758) *
               C48618 +
           (C11104 * C682 - C11098 * C687 + C11105 * C1453 - C11099 * C1457 +
            C11106 * C1907 - C11100 * C1910 + C11107 * C9212 - C48660 * C9214) *
               C4967 +
           (C11104 * C688 - C11098 * C697 + C11105 * C1458 - C11099 * C1465 +
            C11106 * C1911 - C11100 * C1916 + C11107 * C9215 - C48660 * C9218) *
               C48460) *
              C48261 * C48345 * C577 +
          ((C11098 * C585 - C11104 * C580 + C11099 * C1271 - C11105 * C1267 +
            C11100 * C1752 - C11106 * C1749 + C48660 * C9124 - C11107 * C9122) *
               C4966 +
           (C11098 * C595 - C11104 * C586 + C11099 * C1279 - C11105 * C1272 +
            C11100 * C1758 - C11106 * C1753 + C48660 * C9128 - C11107 * C9125) *
               C48618 +
           (C11098 * C1457 - C11104 * C1453 + C11099 * C1910 - C11105 * C1907 +
            C11100 * C9214 - C11106 * C9212 + C48660 * C9451 - C11107 * C9450) *
               C4967 +
           (C11098 * C1465 - C11104 * C1458 + C11099 * C1916 - C11105 * C1911 +
            C11100 * C9218 - C11106 * C9215 + C48660 * C9453 - C11107 * C9452) *
               C48460) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C4966 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48618 +
            (C6530 - C6531 + C6532 - C6533) * C4967 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C1066 +
           ((C3793 - C3794 + C3795 - C3796) * C4966 +
            (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
            C6567 * C48460) *
               C1067 +
           C6125 * C48637) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C4966 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C48618 +
            (C3790 * C682 - C48617 * C687 + C3791 * C1453 - C48418 * C1457) *
                C4967 +
            (C3790 * C688 - C48617 * C697 + C3791 * C1458 - C48418 * C1465) *
                C48460) *
               C1066 +
           ((C3973 - C3974 + C3975 - C3976) * C4966 +
            (C3977 - C3978 + C3979 - C3980) * C48618 +
            (C6320 - C6321 + C6322 - C6323) * C4967 +
            (C6324 - C6325 + C6326 - C6327) * C48460) *
               C1067 +
           ((C3981 - C3982 + C3983 - C3984) * C4966 +
            (C3985 - C3986 + C3987 - C3988) * C48618 +
            (C6328 - C6329 + C6330 - C6331) * C4967 +
            (C6332 - C6333 + C6334 - C6335) * C48460) *
               C48637) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C4966 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C48618 +
            (C48617 * C1457 - C3790 * C1453 + C48418 * C1910 - C3791 * C1907) *
                C4967 +
            (C48617 * C1465 - C3790 * C1458 + C48418 * C1916 - C3791 * C1911) *
                C48460) *
               C1066 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C4966 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C48618 +
            (C48617 * C1459 - C3790 * C1454 + C48418 * C1912 - C3791 * C1908) *
                C4967 +
            (C48617 * C1466 - C3790 * C1460 + C48418 * C1917 - C3791 * C1913) *
                C48460) *
               C1067 +
           ((C48617 * C589 - C3790 * C582 + C48418 * C1275 - C3791 * C1269) *
                C4966 +
            (C48617 * C597 - C3790 * C590 + C48418 * C1281 - C3791 * C1276) *
                C48618 +
            (C48617 * C1461 - C3790 * C1455 + C48418 * C1914 - C3791 * C1909) *
                C4967 +
            (C48617 * C1467 - C3790 * C1462 + C48418 * C1918 - C3791 * C1915) *
                C48460) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
               C19901 +
           (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
               C19897 +
           (C6530 - C6531 + C6532 - C6533) * C19902 +
           (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
           C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
           (C19795 - C19794 + C19797 - C19796) * C48666) *
              C48261 * C48345 * C576 +
          ((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
               C19901 +
           (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
               C19897 +
           (C7106 - C7107 + C7108 - C7109) * C19902 +
           (C7110 - C7111 + C7112 - C7113) * C19898 +
           (C19244 - C19245 + C19246 - C19247) * C19903 +
           (C19248 - C19249 + C19250 - C19251) * C19899 +
           (C3790 * C3246 - C48617 * C3249 + C3791 * C10094 - C48418 * C10096) *
               C19904 +
           (C3790 * C3250 - C48617 * C3255 + C3791 * C10097 - C48418 * C10100) *
               C48666) *
              C48261 * C48345 * C577 +
          ((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
               C19901 +
           (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
               C19897 +
           (C48617 * C1457 - C3790 * C1453 + C48418 * C1910 - C3791 * C1907) *
               C19902 +
           (C48617 * C1465 - C3790 * C1458 + C48418 * C1916 - C3791 * C1911) *
               C19898 +
           (C48617 * C2328 - C3790 * C2322 + C48418 * C9682 - C3791 * C9680) *
               C19903 +
           (C48617 * C2340 - C3790 * C2330 + C48418 * C9686 - C3791 * C9684) *
               C19899 +
           (C48617 * C10096 - C3790 * C10094 + C48418 * C10541 -
            C3791 * C10540) *
               C19904 +
           (C48617 * C10100 - C3790 * C10097 + C48418 * C10543 -
            C3791 * C10542) *
               C48666) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C386 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C510 +
          (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C14515 - C14516 + C14517 - C14518 + C14519 - C14520 + C14521 -
             C14522) *
                C4967 +
            (C14523 - C14524 + C14525 - C14526 + C14527 - C14528 + C14529 -
             C14530) *
                C48460) *
               C48261 * C386 +
           ((C14516 - C14515 + C14518 - C14517 + C14520 - C14519 + C14522 -
             C14521) *
                C4966 +
            (C14524 - C14523 + C14526 - C14525 + C14528 - C14527 + C14530 -
             C14529) *
                C48618 +
            (C11098 * C2327 - C11104 * C2321 + C11099 * C2328 - C11105 * C2322 +
             C11100 * C9682 - C11106 * C9680 + C48660 * C9683 -
             C11107 * C9681) *
                C4967 +
            (C11098 * C2339 - C11104 * C2329 + C11099 * C2340 - C11105 * C2330 +
             C11100 * C9686 - C11106 * C9684 + C48660 * C9687 -
             C11107 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C7106 - C7107 + C7108 - C7109) * C4967 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C386 +
           (((C7107 - C7106 + C7109 - C7108) * C4966 +
             (C7111 - C7110 + C7113 - C7112) * C48618 +
             (C48617 * C2327 - C3790 * C2321 + C48418 * C2328 - C3791 * C2322) *
                 C4967 +
             (C48617 * C2339 - C3790 * C2329 + C48418 * C2340 - C3791 * C2330) *
                 C48460) *
                C1066 +
            ((C6321 - C6320 + C6323 - C6322) * C4966 +
             (C6325 - C6324 + C6327 - C6326) * C48618 +
             (C48617 * C2331 - C3790 * C2323 + C48418 * C2332 - C3791 * C2324) *
                 C4967 +
             (C48617 * C2341 - C3790 * C2333 + C48418 * C2342 - C3791 * C2334) *
                 C48460) *
                C1067 +
            ((C6329 - C6328 + C6331 - C6330) * C4966 +
             (C6333 - C6332 + C6335 - C6334) * C48618 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C4967 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C19901 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C19897 +
            (C6530 - C6531 + C6532 - C6533) * C19902 +
            (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48666) *
               C48261 * C386 +
           ((C6531 - C6530 + C6533 - C6532) * C19901 +
            (C6535 - C6534 + C6537 - C6536) * C19897 +
            (C7648 - C7649 + C7650 - C7651) * C19902 +
            (C7652 - C7653 + C7654 - C7655) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C3790 * C3668 - C48617 * C3671 + C3791 * C10970 -
             C48418 * C10972) *
                C19904 +
            (C3790 * C3672 - C48617 * C3677 + C3791 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C510 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C19901 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C19897 +
            (C7106 - C7107 + C7108 - C7109) * C19902 +
            (C7110 - C7111 + C7112 - C7113) * C19898 +
            (C19244 - C19245 + C19246 - C19247) * C19903 +
            (C19248 - C19249 + C19250 - C19251) * C19899 +
            (C21606 - C21607 + C21608 - C21609) * C19904 +
            (C21610 - C21611 + C21612 - C21613) * C48666) *
               C48261 * C386 +
           ((C7107 - C7106 + C7109 - C7108) * C19901 +
            (C7111 - C7110 + C7113 - C7112) * C19897 +
            (C19245 - C19244 + C19247 - C19246) * C19902 +
            (C19249 - C19248 + C19251 - C19250) * C19898 +
            (C21607 - C21606 + C21609 - C21608) * C19903 +
            (C21611 - C21610 + C21613 - C21612) * C19899 +
            (C48617 * C10972 - C3790 * C10970 + C48418 * C10973 -
             C3791 * C10971) *
                C19904 +
            (C48617 * C10976 - C3790 * C10974 + C48418 * C10977 -
             C3791 * C10975) *
                C48666) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C784 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C784 +
           ((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
             C11423) *
                C4966 +
            (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
             C11431) *
                C48618 +
            (C11098 * C940 - C11104 * C934 + C11099 * C2331 - C11105 * C2323 +
             C11100 * C2332 - C11106 * C2324 + C48660 * C9945 -
             C11107 * C9944) *
                C4967 +
            (C11098 * C949 - C11104 * C941 + C11099 * C2341 - C11105 * C2333 +
             C11100 * C2342 - C11106 * C2334 + C48660 * C9947 -
             C11107 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 + C6568 * C4967 +
             C6569 * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 + C6570 * C4967 +
             C6571 * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C784 +
           ((C6566 * C4966 + C6567 * C48618 +
             (C6547 - C6546 + C6549 - C6548) * C4967 +
             (C6551 - C6550 + C6553 - C6552) * C48460) *
                C1066 +
            (C6120 * C4966 + C6121 * C48618 +
             (C6559 - C6558 + C6561 - C6560) * C4967 +
             (C6563 - C6562 + C6565 - C6564) * C48460) *
                C1067 +
            ((C4144 - C4143 + C4146 - C4145) * C4966 +
             (C4148 - C4147 + C4150 - C4149) * C48618 +
             (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                 C4967 +
             (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C19901 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C19897 +
            (C6530 - C6531 + C6532 - C6533) * C19902 +
            (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48666) *
               C48261 * C784 +
           ((C6531 - C6530 + C6533 - C6532) * C19901 +
            (C6535 - C6534 + C6537 - C6536) * C19897 +
            (C7648 - C7649 + C7650 - C7651) * C19902 +
            (C7652 - C7653 + C7654 - C7655) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C3790 * C3668 - C48617 * C3671 + C3791 * C10970 -
             C48418 * C10972) *
                C19904 +
            (C3790 * C3672 - C48617 * C3677 + C3791 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C3794 - C3793 + C3796 - C3795) * C19901 +
            (C3798 - C3797 + C3800 - C3799) * C19897 + C6568 * C19902 +
            C6569 * C19898 + C18708 * C19903 + C18709 * C19899 +
            (C18698 - C18699 + C18700 - C18701) * C19904 +
            (C18702 - C18703 + C18704 - C18705) * C48666) *
               C48261 * C784 +
           (C6566 * C19901 + C6567 * C19897 + C18706 * C19902 +
            C18707 * C19898 + (C18699 - C18698 + C18701 - C18700) * C19903 +
            (C18703 - C18702 + C18705 - C18704) * C19899 +
            (C48617 * C3673 - C3790 * C3669 + C48418 * C17570 -
             C3791 * C17569) *
                C19904 +
            (C48617 * C3678 - C3790 * C3674 + C48418 * C17572 -
             C3791 * C17571) *
                C48666) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C784 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C260 +
          (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C14515 - C14516 + C14517 - C14518 + C14519 - C14520 + C14521 -
             C14522) *
                C4967 +
            (C14523 - C14524 + C14525 - C14526 + C14527 - C14528 + C14529 -
             C14530) *
                C48460) *
               C48261 * C784 +
           ((C14516 - C14515 + C14518 - C14517 + C14520 - C14519 + C14522 -
             C14521) *
                C4966 +
            (C14524 - C14523 + C14526 - C14525 + C14528 - C14527 + C14530 -
             C14529) *
                C48618 +
            (C11098 * C2327 - C11104 * C2321 + C11099 * C2328 - C11105 * C2322 +
             C11100 * C9682 - C11106 * C9680 + C48660 * C9683 -
             C11107 * C9681) *
                C4967 +
            (C11098 * C2339 - C11104 * C2329 + C11099 * C2340 - C11105 * C2330 +
             C11100 * C9686 - C11106 * C9684 + C48660 * C9687 -
             C11107 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C7106 - C7107 + C7108 - C7109) * C4967 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C784 +
           (((C7107 - C7106 + C7109 - C7108) * C4966 +
             (C7111 - C7110 + C7113 - C7112) * C48618 +
             (C48617 * C2327 - C3790 * C2321 + C48418 * C2328 - C3791 * C2322) *
                 C4967 +
             (C48617 * C2339 - C3790 * C2329 + C48418 * C2340 - C3791 * C2330) *
                 C48460) *
                C1066 +
            ((C6321 - C6320 + C6323 - C6322) * C4966 +
             (C6325 - C6324 + C6327 - C6326) * C48618 +
             (C48617 * C2331 - C3790 * C2323 + C48418 * C2332 - C3791 * C2324) *
                 C4967 +
             (C48617 * C2341 - C3790 * C2333 + C48418 * C2342 - C3791 * C2334) *
                 C48460) *
                C1067 +
            ((C6329 - C6328 + C6331 - C6330) * C4966 +
             (C6333 - C6332 + C6335 - C6334) * C48618 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C4967 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C19901 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C19897 +
            (C6530 - C6531 + C6532 - C6533) * C19902 +
            (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
            C19799 * C19899 + (C19791 - C19790 + C19793 - C19792) * C19904 +
            (C19795 - C19794 + C19797 - C19796) * C48666) *
               C48261 * C784 +
           ((C6531 - C6530 + C6533 - C6532) * C19901 +
            (C6535 - C6534 + C6537 - C6536) * C19897 +
            (C7648 - C7649 + C7650 - C7651) * C19902 +
            (C7652 - C7653 + C7654 - C7655) * C19898 +
            (C19790 - C19791 + C19792 - C19793) * C19903 +
            (C19794 - C19795 + C19796 - C19797) * C19899 +
            (C3790 * C3668 - C48617 * C3671 + C3791 * C10970 -
             C48418 * C10972) *
                C19904 +
            (C3790 * C3672 - C48617 * C3677 + C3791 * C10974 -
             C48418 * C10976) *
                C48666) *
               C48261 * C48647) *
              C260 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C19901 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C19897 +
            (C7106 - C7107 + C7108 - C7109) * C19902 +
            (C7110 - C7111 + C7112 - C7113) * C19898 +
            (C19244 - C19245 + C19246 - C19247) * C19903 +
            (C19248 - C19249 + C19250 - C19251) * C19899 +
            (C21606 - C21607 + C21608 - C21609) * C19904 +
            (C21610 - C21611 + C21612 - C21613) * C48666) *
               C48261 * C784 +
           ((C7107 - C7106 + C7109 - C7108) * C19901 +
            (C7111 - C7110 + C7113 - C7112) * C19897 +
            (C19245 - C19244 + C19247 - C19246) * C19902 +
            (C19249 - C19248 + C19251 - C19250) * C19898 +
            (C21607 - C21606 + C21609 - C21608) * C19903 +
            (C21611 - C21610 + C21613 - C21612) * C19899 +
            (C48617 * C10972 - C3790 * C10970 + C48418 * C10973 -
             C3791 * C10971) *
                C19904 +
            (C48617 * C10976 - C3790 * C10974 + C48418 * C10977 -
             C3791 * C10975) *
                C48666) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
            C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
               C4966 +
           (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
            C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
               C48618 +
           (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
            C14148) *
               C4967 +
           (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
            C14156) *
               C48460) *
              C48261 * C930 +
          ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
            C14147) *
               C4966 +
           (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
            C14155) *
               C48618 +
           (C14889 - C14890 + C14891 - C14892 + C14893 - C14894 + C14895 -
            C14896) *
               C4967 +
           (C14897 - C14898 + C14899 - C14900 + C14901 - C14902 + C14903 -
            C14904) *
               C48460) *
              C48261 * C931 +
          ((C14890 - C14889 + C14892 - C14891 + C14894 - C14893 + C14896 -
            C14895) *
               C4966 +
           (C14898 - C14897 + C14900 - C14899 + C14902 - C14901 + C14904 -
            C14903) *
               C48618 +
           (C11098 * C2804 - C11104 * C2800 + C11099 * C3249 - C11105 * C3246 +
            C11100 * C10096 - C11106 * C10094 + C48660 * C10541 -
            C11107 * C10540) *
               C4967 +
           (C11098 * C2812 - C11104 * C2805 + C11099 * C3255 - C11105 * C3250 +
            C11100 * C10100 - C11106 * C10097 + C48660 * C10543 -
            C11107 * C10542) *
               C48460) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C4966 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48618 +
            (C6530 - C6531 + C6532 - C6533) * C4967 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C1066 +
           ((C3793 - C3794 + C3795 - C3796) * C4966 +
            (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
            C6567 * C48460) *
               C1067 +
           C6125 * C48637) *
              C930 +
          (((C6531 - C6530 + C6533 - C6532) * C4966 +
            (C6535 - C6534 + C6537 - C6536) * C48618 +
            (C7648 - C7649 + C7650 - C7651) * C4967 +
            (C7652 - C7653 + C7654 - C7655) * C48460) *
               C1066 +
           (C6568 * C4966 + C6569 * C48618 +
            (C6546 - C6547 + C6548 - C6549) * C4967 +
            (C6550 - C6551 + C6552 - C6553) * C48460) *
               C1067 +
           (C6570 * C4966 + C6571 * C48618 +
            (C6558 - C6559 + C6560 - C6561) * C4967 +
            (C6562 - C6563 + C6564 - C6565) * C48460) *
               C48637) *
              C931 +
          (((C7649 - C7648 + C7651 - C7650) * C4966 +
            (C7653 - C7652 + C7655 - C7654) * C48618 +
            (C48617 * C2804 - C3790 * C2800 + C48418 * C3249 - C3791 * C3246) *
                C4967 +
            (C48617 * C2812 - C3790 * C2805 + C48418 * C3255 - C3791 * C3250) *
                C48460) *
               C1066 +
           ((C6547 - C6546 + C6549 - C6548) * C4966 +
            (C6551 - C6550 + C6553 - C6552) * C48618 +
            (C48617 * C2806 - C3790 * C2801 + C48418 * C3251 - C3791 * C3247) *
                C4967 +
            (C48617 * C2813 - C3790 * C2807 + C48418 * C3256 - C3791 * C3252) *
                C48460) *
               C1067 +
           ((C6559 - C6558 + C6561 - C6560) * C4966 +
            (C6563 - C6562 + C6565 - C6564) * C48618 +
            (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                C4967 +
            (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                C48460) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
               C19901 +
           (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
               C19897 +
           (C6530 - C6531 + C6532 - C6533) * C19902 +
           (C6534 - C6535 + C6536 - C6537) * C19898 + C19798 * C19903 +
           C19799 * C19899 + C21984 * C19904 + C21985 * C48666) *
              C48261 * C930 +
          ((C6531 - C6530 + C6533 - C6532) * C19901 +
           (C6535 - C6534 + C6537 - C6536) * C19897 +
           (C7648 - C7649 + C7650 - C7651) * C19902 +
           (C7652 - C7653 + C7654 - C7655) * C19898 +
           (C19790 - C19791 + C19792 - C19793) * C19903 +
           (C19794 - C19795 + C19796 - C19797) * C19899 +
           (C21976 - C21977 + C21978 - C21979) * C19904 +
           (C21980 - C21981 + C21982 - C21983) * C48666) *
              C48261 * C931 +
          (C19798 * C19901 + C19799 * C19897 + C21984 * C19902 +
           C21985 * C19898 + (C21977 - C21976 + C21979 - C21978) * C19903 +
           (C21981 - C21980 + C21983 - C21982) * C19899 +
           (C48617 * C17657 - C3790 * C17655 + C48418 * C17898 -
            C3791 * C17897) *
               C19904 +
           (C48617 * C17661 - C3790 * C17658 + C48418 * C17900 -
            C3791 * C17899) *
               C48666) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48356 * C122 - C113 * C115) * C114 +
                (C48356 * C136 - C113 * C123) * C48373) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C48345 * C48328 * C110 +
              (((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
               ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
               ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
               ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
                  C48345 * C48328 * C111 +
              (C176 * C103 + C177 * C104 + C178 * C105 +
               ((C161 - C160) * C114 + (C163 - C162) * C48373) * C106 +
               ((C48356 * C134 - C113 * C121) * C114 +
                (C48356 * C142 - C113 * C135) * C48373) *
                   C107) *
                  C48345 * C48328 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                 C48650 * C585 - C1071 * C580) *
                    C114 +
                (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                 C48650 * C595 - C1071 * C586) *
                    C48373) *
                   C1066 +
               ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                   C1067 +
               C1121 * C48637) *
                  C48345 * C48328 * C110 +
              (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
                (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                   C1066 +
               ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
                (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                   C1067 +
               ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
                (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                   C48637) *
                  C48345 * C48328 * C111 +
              (C1121 * C1066 +
               ((C1098 - C1097 + C1100 - C1099 + C1102 - C1101) * C114 +
                (C1104 - C1103 + C1106 - C1105 + C1108 - C1107) * C48373) *
                   C1067 +
               ((C48685 * C130 - C1069 * C119 + C48673 * C278 - C1070 * C268 +
                 C48650 * C593 - C1071 * C584) *
                    C114 +
                (C48685 * C140 - C1069 * C131 + C48673 * C286 - C1070 * C279 +
                 C48650 * C599 - C1071 * C594) *
                    C48373) *
                   C48637) *
                  C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C2458 +
            (C48356 * C136 - C113 * C123) * C48686 +
            (C48356 * C394 - C113 * C388) * C2459 +
            (C48356 * C406 - C113 * C395) * C48675 +
            (C48356 * C938 - C113 * C933) * C2460 +
            (C48356 * C948 - C113 * C939) * C48653) *
               C1066 +
           ((C144 - C145) * C2458 + (C146 - C147) * C48686 +
            (C414 - C413) * C2459 + (C416 - C415) * C48675 +
            (C2462 - C2463) * C2460 + (C2464 - C2465) * C48653) *
               C1067 +
           C2488 * C48637) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C2458 + (C147 - C146) * C48686 +
            (C413 - C414) * C2459 + (C415 - C416) * C48675 +
            (C2463 - C2462) * C2460 + (C2465 - C2464) * C48653) *
               C1066 +
           ((C149 - C148) * C2458 + (C151 - C150) * C48686 +
            (C417 - C418) * C2459 + (C419 - C420) * C48675 +
            (C2471 - C2470) * C2460 + (C2473 - C2472) * C48653) *
               C1067 +
           ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
            (C421 - C422) * C2459 + (C423 - C424) * C48675 +
            (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
               C48637) *
              C48345 * C48328 * C111 +
          (C2488 * C1066 +
           (C166 * C2458 + C167 * C48686 + (C422 - C421) * C2459 +
            (C424 - C423) * C48675 + (C2475 - C2474) * C2460 +
            (C2477 - C2476) * C48653) *
               C1067 +
           (C168 * C2458 + C169 * C48686 + (C426 - C425) * C2459 +
            (C428 - C427) * C48675 + (C48356 * C946 - C113 * C937) * C2460 +
            (C48356 * C952 - C113 * C947) * C48653) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C48328 * C110 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
               C48682 +
           ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
            (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
               C48669 +
           ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
            (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
               C48637) *
              C48345 * C48328 * C111 +
          (C7823 * C48682 +
           ((C7800 - C7799 + C7802 - C7801 + C7804 - C7803) * C114 +
            (C7806 - C7805 + C7808 - C7807 + C7810 - C7809) * C48373) *
               C48669 +
           ((C7765 * C130 - C7771 * C119 + C7766 * C278 - C7772 * C268 +
             C48650 * C593 - C7773 * C584) *
                C114 +
            (C7765 * C140 - C7771 * C131 + C7766 * C286 - C7772 * C279 +
             C48650 * C599 - C7773 * C594) *
                C48373) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C48328 * C110 +
          ((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
            C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
            C9039 * C1750 - C9033 * C1754) *
               C114 +
           (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
            C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
            C9039 * C1755 - C9033 * C1759) *
               C48373) *
              C48261 * C48345 * C48328 * C111 +
          ((C9029 * C126 - C9035 * C117 + C9030 * C274 - C9036 * C266 +
            C9031 * C589 - C9037 * C582 + C9032 * C1275 - C9038 * C1269 +
            C9033 * C1756 - C9039 * C1751) *
               C114 +
           (C9029 * C138 - C9035 * C127 + C9030 * C284 - C9036 * C275 +
            C9031 * C597 - C9037 * C590 + C9032 * C1281 - C9038 * C1276 +
            C9033 * C1760 - C9039 * C1757) *
               C48373) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
            C48650 * C585 - C7773 * C580) *
               C2458 +
           (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
            C48650 * C595 - C7773 * C586) *
               C48686 +
           (C7765 * C394 - C7771 * C388 + C7766 * C687 - C7772 * C682 +
            C48650 * C1457 - C7773 * C1453) *
               C2459 +
           (C7765 * C406 - C7771 * C395 + C7766 * C697 - C7772 * C688 +
            C48650 * C1465 - C7773 * C1458) *
               C48675 +
           (C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
            C48650 * C2328 - C7773 * C2322) *
               C2460 +
           (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
            C48650 * C2340 - C7773 * C2330) *
               C48653) *
              C48261 * C48345 * C48328 * C110 +
          ((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
           (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
           (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
           (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
           (C7771 * C934 - C7765 * C940 + C7772 * C2323 - C7766 * C2331 +
            C7773 * C2324 - C48650 * C2332) *
               C2460 +
           (C7771 * C941 - C7765 * C949 + C7772 * C2333 - C7766 * C2341 +
            C7773 * C2334 - C48650 * C2342) *
               C48653) *
              C48261 * C48345 * C48328 * C111 +
          (C7819 * C2458 + C7820 * C48686 +
           (C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C2459 +
           (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48675 +
           (C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
            C48650 * C2336 - C7773 * C2326) *
               C2460 +
           (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
            C48650 * C2344 - C7773 * C2338) *
               C48653) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C15017 +
            (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
            (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
               C48682 +
           ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
            C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
               C48669 +
           C15031 * C48637) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
            C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
               C48682 +
           ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
            C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
               C48669 +
           ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
            C5250 * C15015 + (C2474 - C2475) * C15019 +
            (C2476 - C2477) * C48653) *
               C48637) *
              C48345 * C48328 * C111 +
          (C15031 * C48682 +
           (C166 * C15017 + C167 * C15014 + C4975 * C15018 + C4976 * C15015 +
            (C2475 - C2474) * C15019 + (C2477 - C2476) * C48653) *
               C48669 +
           (C168 * C15017 + C169 * C15014 + (C426 - C425) * C15018 +
            (C428 - C427) * C15015 + (C48356 * C946 - C113 * C937) * C15019 +
            (C48356 * C952 - C113 * C947) * C48653) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
            C48650 * C585 - C1071 * C580) *
               C15017 +
           (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
            C48650 * C595 - C1071 * C586) *
               C15014 +
           (C48685 * C394 - C1069 * C388 + C48673 * C687 - C1070 * C682 +
            C48650 * C1457 - C1071 * C1453) *
               C15018 +
           (C48685 * C406 - C1069 * C395 + C48673 * C697 - C1070 * C688 +
            C48650 * C1465 - C1071 * C1458) *
               C15015 +
           (C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
            C48650 * C2328 - C1071 * C2322) *
               C15019 +
           (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
            C48650 * C2340 - C1071 * C2330) *
               C48653) *
              C48261 * C48345 * C48328 * C110 +
          ((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
           (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
           (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
           (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
           (C1069 * C934 - C48685 * C940 + C1070 * C2323 - C48673 * C2331 +
            C1071 * C2324 - C48650 * C2332) *
               C15019 +
           (C1069 * C941 - C48685 * C949 + C1070 * C2333 - C48673 * C2341 +
            C1071 * C2334 - C48650 * C2342) *
               C48653) *
              C48261 * C48345 * C48328 * C111 +
          (C1117 * C15017 + C1118 * C15014 +
           (C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C15018 +
           (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C15015 +
           (C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
            C48650 * C2336 - C1071 * C2326) *
               C15019 +
           (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
            C48650 * C2344 - C1071 * C2338) *
               C48653) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48356 * C122 - C113 * C115) * C17482 +
           (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
           (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
           (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
           (C48356 * C3671 - C113 * C3668) * C17486 +
           (C48356 * C3677 - C113 * C3672) * C17481) *
              C48261 * C48345 * C48328 * C110 +
          ((C145 - C144) * C17482 + (C147 - C146) * C17477 + C2829 * C17483 +
           C2830 * C17478 + C2831 * C17484 + C2832 * C17479 +
           (C2833 - C2834) * C17485 + (C2835 - C2836) * C17480 +
           (C113 * C3669 - C48356 * C3673) * C17486 +
           (C113 * C3674 - C48356 * C3678) * C17481) *
              C48261 * C48345 * C48328 * C111 +
          (C164 * C17482 + C165 * C17477 + C2468 * C17483 + C2469 * C17478 +
           C2481 * C17484 + C2482 * C17479 + (C2842 - C2841) * C17485 +
           (C2844 - C2843) * C17480 + (C48356 * C3675 - C113 * C3670) * C17486 +
           (C48356 * C3679 - C113 * C3676) * C17481) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48356 * C122 - C113 * C115) * C114 +
                 (C48356 * C136 - C113 * C123) * C48373) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C48345 * C260 +
               (((C113 * C264 - C48356 * C270) * C114 +
                 (C113 * C271 - C48356 * C282) * C48373) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
                   C48345 * C48645) *
                  C262 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
                   C48345 * C260 +
               (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
                ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
                ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
                ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
                ((C48356 * C280 - C113 * C269) * C114 +
                 (C48356 * C287 - C113 * C281) * C48373) *
                    C107) *
                   C48345 * C48645) *
                  C48643) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                  C48650 * C585 - C1071 * C580) *
                     C114 +
                 (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                  C48650 * C595 - C1071 * C586) *
                     C48373) *
                    C1066 +
                ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                 (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                    C1067 +
                C1121 * C48637) *
                   C48345 * C260 +
               (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
                  C1071 * C1267 - C48650 * C1271) *
                     C114 +
                 (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
                  C1071 * C1272 - C48650 * C1279) *
                     C48373) *
                    C1066 +
                ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
                 (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                    C1067 +
                ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
                 (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                    C48637) *
                   C48345 * C48645) *
                  C262 +
              ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
                 (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                    C1066 +
                ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
                 (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                    C1067 +
                ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
                 (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                    C48637) *
                   C48345 * C260 +
               (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
                 (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                    C1066 +
                ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
                 (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                    C1067 +
                ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
                  C48650 * C1277 - C1071 * C1270) *
                     C114 +
                 (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
                  C48650 * C1282 - C1071 * C1278) *
                     C48373) *
                    C48637) *
                   C48345 * C48645) *
                  C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 +
             (C48356 * C394 - C113 * C388) * C2459 +
             (C48356 * C406 - C113 * C395) * C48675 +
             (C48356 * C938 - C113 * C933) * C2460 +
             (C48356 * C948 - C113 * C939) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 +
             (C414 - C413) * C2459 + (C416 - C415) * C48675 +
             (C2462 - C2463) * C2460 + (C2464 - C2465) * C48653) *
                C1067 +
            C2488 * C48637) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 +
             (C113 * C682 - C48356 * C687) * C2459 +
             (C113 * C688 - C48356 * C697) * C48675 +
             (C113 * C2321 - C48356 * C2327) * C2460 +
             (C113 * C2329 - C48356 * C2339) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 +
             (C413 - C414) * C2459 + (C415 - C416) * C48675 +
             (C2463 - C2462) * C2460 + (C2465 - C2464) * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 +
             (C417 - C418) * C2459 + (C419 - C420) * C48675 +
             (C2471 - C2470) * C2460 + (C2473 - C2472) * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C260 +
           (((C290 - C289) * C2458 + (C292 - C291) * C48686 +
             (C2640 - C2639) * C2459 + (C2642 - C2641) * C48675 +
             (C2644 - C2643) * C2460 + (C2646 - C2645) * C48653) *
                C1066 +
            ((C294 - C293) * C2458 + (C296 - C295) * C48686 +
             (C2648 - C2647) * C2459 + (C2650 - C2649) * C48675 +
             (C2652 - C2651) * C2460 + (C2654 - C2653) * C48653) *
                C1067 +
            ((C298 - C297) * C2458 + (C300 - C299) * C48686 +
             (C48356 * C693 - C113 * C685) * C2459 +
             (C48356 * C700 - C113 * C694) * C48675 +
             (C48356 * C2635 - C113 * C2634) * C2460 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C260 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C7765 * C394 - C7771 * C388 + C7766 * C687 - C7772 * C682 +
             C48650 * C1457 - C7773 * C1453) *
                C2459 +
            (C7765 * C406 - C7771 * C395 + C7766 * C697 - C7772 * C688 +
             C48650 * C1465 - C7773 * C1458) *
                C48675 +
            (C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
             C48650 * C2328 - C7773 * C2322) *
                C2460 +
            (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
             C48650 * C2340 - C7773 * C2330) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C7771 * C682 - C7765 * C687 + C7772 * C1453 - C7766 * C1457 +
             C7773 * C1907 - C48650 * C1910) *
                C2459 +
            (C7771 * C688 - C7765 * C697 + C7772 * C1458 - C7766 * C1465 +
             C7773 * C1911 - C48650 * C1916) *
                C48675 +
            (C7771 * C2321 - C7765 * C2327 + C7772 * C2322 - C7766 * C2328 +
             C7773 * C9680 - C48650 * C9682) *
                C2460 +
            (C7771 * C2329 - C7765 * C2339 + C7772 * C2330 - C7766 * C2340 +
             C7773 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C7771 * C934 - C7765 * C940 + C7772 * C2323 - C7766 * C2331 +
             C7773 * C2324 - C48650 * C2332) *
                C2460 +
            (C7771 * C941 - C7765 * C949 + C7772 * C2333 - C7766 * C2341 +
             C7773 * C2334 - C48650 * C2342) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C2458 +
            (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48686 +
            (C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
             C48650 * C1912 - C7773 * C1908) *
                C2459 +
            (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
             C48650 * C1917 - C7773 * C1913) *
                C48675 +
            (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
             C48650 * C9945 - C7773 * C9944) *
                C2460 +
            (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
             C48650 * C9947 - C7773 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C260 +
           (((C290 - C289) * C15017 + (C292 - C291) * C15014 +
             (C2640 - C2639) * C15018 + (C2642 - C2641) * C15015 +
             (C2644 - C2643) * C15019 + (C2646 - C2645) * C48653) *
                C48682 +
            ((C294 - C293) * C15017 + (C296 - C295) * C15014 +
             (C2648 - C2647) * C15018 + (C2650 - C2649) * C15015 +
             (C2652 - C2651) * C15019 + (C2654 - C2653) * C48653) *
                C48669 +
            ((C298 - C297) * C15017 + (C300 - C299) * C15014 +
             (C5116 - C5115) * C15018 + (C5118 - C5117) * C15015 +
             (C48356 * C2635 - C113 * C2634) * C15019 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C48685 * C394 - C1069 * C388 + C48673 * C687 - C1070 * C682 +
             C48650 * C1457 - C1071 * C1453) *
                C15018 +
            (C48685 * C406 - C1069 * C395 + C48673 * C697 - C1070 * C688 +
             C48650 * C1465 - C1071 * C1458) *
                C15015 +
            (C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
             C48650 * C2328 - C1071 * C2322) *
                C15019 +
            (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
             C48650 * C2340 - C1071 * C2330) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C1069 * C682 - C48685 * C687 + C1070 * C1453 - C48673 * C1457 +
             C1071 * C1907 - C48650 * C1910) *
                C15018 +
            (C1069 * C688 - C48685 * C697 + C1070 * C1458 - C48673 * C1465 +
             C1071 * C1911 - C48650 * C1916) *
                C15015 +
            (C1069 * C2321 - C48685 * C2327 + C1070 * C2322 - C48673 * C2328 +
             C1071 * C9680 - C48650 * C9682) *
                C15019 +
            (C1069 * C2329 - C48685 * C2339 + C1070 * C2330 - C48673 * C2340 +
             C1071 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C1069 * C934 - C48685 * C940 + C1070 * C2323 - C48673 * C2331 +
             C1071 * C2324 - C48650 * C2332) *
                C15019 +
            (C1069 * C941 - C48685 * C949 + C1070 * C2333 - C48673 * C2341 +
             C1071 * C2334 - C48650 * C2342) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C15017 +
            (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C15014 +
            (C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
             C48650 * C1912 - C1071 * C1908) *
                C15018 +
            (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
             C48650 * C1917 - C1071 * C1913) *
                C15015 +
            (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
             C48650 * C9945 - C1071 * C9944) *
                C15019 +
            (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
             C48650 * C9947 - C1071 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C17482 +
            (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
            (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
            (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
            (C48356 * C3671 - C113 * C3668) * C17486 +
            (C48356 * C3677 - C113 * C3672) * C17481) *
               C48261 * C48345 * C260 +
           ((C113 * C264 - C48356 * C270) * C17482 +
            (C113 * C271 - C48356 * C282) * C17477 + (C3259 - C3260) * C17483 +
            (C3261 - C3262) * C17478 + (C3263 - C3264) * C17484 +
            (C3265 - C3266) * C17479 +
            (C113 * C3246 - C48356 * C3249) * C17485 +
            (C113 * C3250 - C48356 * C3255) * C17480 +
            (C113 * C10970 - C48356 * C10972) * C17486 +
            (C113 * C10974 - C48356 * C10976) * C17481) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C145 - C144) * C17482 + (C147 - C146) * C17477 + C2829 * C17483 +
            C2830 * C17478 + C2831 * C17484 + C2832 * C17479 +
            (C2833 - C2834) * C17485 + (C2835 - C2836) * C17480 +
            (C113 * C3669 - C48356 * C3673) * C17486 +
            (C113 * C3674 - C48356 * C3678) * C17481) *
               C48261 * C48345 * C260 +
           ((C290 - C289) * C17482 + (C292 - C291) * C17477 +
            (C2640 - C2639) * C17483 + (C2642 - C2641) * C17478 +
            (C2644 - C2643) * C17484 + (C2646 - C2645) * C17479 +
            (C48356 * C3251 - C113 * C3247) * C17485 +
            (C48356 * C3256 - C113 * C3252) * C17480 +
            (C48356 * C17570 - C113 * C17569) * C17486 +
            (C48356 * C17572 - C113 * C17571) * C17481) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48356 * C122 - C113 * C115) * C114 +
                 (C48356 * C136 - C113 * C123) * C48373) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C386 +
               (((C113 * C388 - C48356 * C394) * C114 +
                 (C113 * C395 - C48356 * C406) * C48373) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
                   C48647) *
                  C48328 * C262 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
                   C386 +
               (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
                ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
                ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
                ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
                ((C48356 * C404 - C113 * C393) * C114 +
                 (C48356 * C411 - C113 * C405) * C48373) *
                    C107) *
                   C48647) *
                  C48328 * C48643) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                  C48650 * C585 - C1071 * C580) *
                     C114 +
                 (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                  C48650 * C595 - C1071 * C586) *
                     C48373) *
                    C1066 +
                ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                 (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                    C1067 +
                C1121 * C48637) *
                   C386 +
               (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
                  C1071 * C1453 - C48650 * C1457) *
                     C114 +
                 (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
                  C1071 * C1458 - C48650 * C1465) *
                     C48373) *
                    C1066 +
                ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
                 (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                    C1067 +
                ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
                 (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                    C48637) *
                   C48647) *
                  C48328 * C262 +
              ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
                 (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                    C1066 +
                ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
                 (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                    C1067 +
                ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
                 (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                    C48637) *
                   C386 +
               (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
                 (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                    C1066 +
                ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
                 (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                    C1067 +
                ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
                  C48650 * C1463 - C1071 * C1456) *
                     C114 +
                 (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
                  C48650 * C1468 - C1071 * C1464) *
                     C48373) *
                    C48637) *
                   C48647) *
                  C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C386 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 + C2829 * C2459 +
             C2830 * C48675 + C2831 * C2460 + C2832 * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 + C2837 * C2459 +
             C2838 * C48675 + C2839 * C2460 + C2840 * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C386 +
           ((C2825 * C2458 + C2826 * C48686 + C2827 * C2459 + C2828 * C48675 +
             (C2834 - C2833) * C2460 + (C2836 - C2835) * C48653) *
                C1066 +
            (C2468 * C2458 + C2469 * C48686 + C2481 * C2459 + C2482 * C48675 +
             (C2842 - C2841) * C2460 + (C2844 - C2843) * C48653) *
                C1067 +
            ((C422 - C421) * C2458 + (C424 - C423) * C48686 +
             (C2475 - C2474) * C2459 + (C2477 - C2476) * C48675 +
             (C48356 * C2810 - C113 * C2803) * C2460 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C386 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C386 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C2460 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48653) *
               C48261 * C386 +
           ((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C2458 +
            (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48686 +
            (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C2459 +
            (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48675 +
            (C7765 * C2806 - C7771 * C2801 + C7766 * C3251 - C7772 * C3247 +
             C48650 * C10098 - C7773 * C10095) *
                C2460 +
            (C7765 * C2813 - C7771 * C2807 + C7766 * C3256 - C7772 * C3252 +
             C48650 * C10101 - C7773 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C386 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C386 +
           ((C2825 * C15017 + C2826 * C15014 + C2827 * C15018 + C2828 * C15015 +
             (C2834 - C2833) * C15019 + (C2836 - C2835) * C48653) *
                C48682 +
            (C2468 * C15017 + C2469 * C15014 + C2481 * C15018 + C2482 * C15015 +
             (C2842 - C2841) * C15019 + (C2844 - C2843) * C48653) *
                C48669 +
            (C4975 * C15017 + C4976 * C15014 + (C2475 - C2474) * C15018 +
             (C2477 - C2476) * C15015 +
             (C48356 * C2810 - C113 * C2803) * C15019 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C386 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C15019 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48653) *
               C48261 * C386 +
           ((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C15017 +
            (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C15014 +
            (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C15018 +
            (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C15015 +
            (C48685 * C2806 - C1069 * C2801 + C48673 * C3251 - C1070 * C3247 +
             C48650 * C10098 - C1071 * C10095) *
                C15019 +
            (C48685 * C2813 - C1069 * C2807 + C48673 * C3256 - C1070 * C3252 +
             C48650 * C10101 - C1071 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C17482 +
            (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
            (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
            (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
            (C17664 - C17665) * C17486 + (C17666 - C17667) * C17481) *
               C48261 * C386 +
           ((C2818 - C2817) * C17482 + (C2820 - C2819) * C17477 +
            (C2822 - C2821) * C17483 + (C2824 - C2823) * C17478 +
            (C3683 - C3684) * C17484 + (C3685 - C3686) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C113 * C17655 - C48356 * C17657) * C17486 +
            (C113 * C17658 - C48356 * C17661) * C17481) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C145 - C144) * C17482 + (C147 - C146) * C17477 + C2829 * C17483 +
            C2830 * C17478 + C2831 * C17484 + C2832 * C17479 +
            (C2833 - C2834) * C17485 + (C2835 - C2836) * C17480 +
            (C17668 - C17669) * C17486 + (C17670 - C17671) * C17481) *
               C48261 * C386 +
           (C2825 * C17482 + C2826 * C17477 + C2827 * C17483 + C2828 * C17478 +
            (C2834 - C2833) * C17484 + (C2836 - C2835) * C17479 +
            (C17669 - C17668) * C17485 + (C17671 - C17670) * C17480 +
            (C48356 * C17659 - C113 * C17656) * C17486 +
            (C48356 * C17662 - C113 * C17660) * C17481) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48356 * C122 - C113 * C115) * C114 +
                 (C48356 * C136 - C113 * C123) * C48373) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C48345 * C510 +
               (((C113 * C264 - C48356 * C270) * C114 +
                 (C113 * C271 - C48356 * C282) * C48373) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
                   C48345 * C48645) *
                  C512 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
                   C48345 * C510 +
               (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
                ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
                ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
                ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
                ((C48356 * C280 - C113 * C269) * C114 +
                 (C48356 * C287 - C113 * C281) * C48373) *
                    C107) *
                   C48345 * C48645) *
                  C48643) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                  C48650 * C585 - C1071 * C580) *
                     C114 +
                 (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                  C48650 * C595 - C1071 * C586) *
                     C48373) *
                    C1066 +
                ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                 (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                    C1067 +
                C1121 * C48637) *
                   C48345 * C510 +
               (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
                  C1071 * C1267 - C48650 * C1271) *
                     C114 +
                 (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
                  C1071 * C1272 - C48650 * C1279) *
                     C48373) *
                    C1066 +
                ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
                 (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                    C1067 +
                ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
                 (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                    C48637) *
                   C48345 * C48645) *
                  C512 +
              ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
                 (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                    C1066 +
                ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
                 (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                    C1067 +
                ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
                 (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                    C48637) *
                   C48345 * C510 +
               (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
                 (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                    C1066 +
                ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
                 (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                    C1067 +
                ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
                  C48650 * C1277 - C1071 * C1270) *
                     C114 +
                 (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
                  C48650 * C1282 - C1071 * C1278) *
                     C48373) *
                    C48637) *
                   C48345 * C48645) *
                  C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 +
             (C113 * C682 - C48356 * C687) * C2459 +
             (C113 * C688 - C48356 * C697) * C48675 +
             (C113 * C2321 - C48356 * C2327) * C2460 +
             (C113 * C2329 - C48356 * C2339) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 + C2829 * C2459 +
             C2830 * C48675 + C2831 * C2460 + C2832 * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 + C2837 * C2459 +
             C2838 * C48675 + C2839 * C2460 + C2840 * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C510 +
           (((C290 - C289) * C2458 + (C292 - C291) * C48686 +
             (C2640 - C2639) * C2459 + (C2642 - C2641) * C48675 +
             (C2644 - C2643) * C2460 + (C2646 - C2645) * C48653) *
                C1066 +
            ((C294 - C293) * C2458 + (C296 - C295) * C48686 +
             (C2648 - C2647) * C2459 + (C2650 - C2649) * C48675 +
             (C2652 - C2651) * C2460 + (C2654 - C2653) * C48653) *
                C1067 +
            ((C298 - C297) * C2458 + (C300 - C299) * C48686 +
             (C48356 * C693 - C113 * C685) * C2459 +
             (C48356 * C700 - C113 * C694) * C48675 +
             (C48356 * C2635 - C113 * C2634) * C2460 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C510 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C48345 * C510 +
           ((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C7771 * C682 - C7765 * C687 + C7772 * C1453 - C7766 * C1457 +
             C7773 * C1907 - C48650 * C1910) *
                C2459 +
            (C7771 * C688 - C7765 * C697 + C7772 * C1458 - C7766 * C1465 +
             C7773 * C1911 - C48650 * C1916) *
                C48675 +
            (C7771 * C2321 - C7765 * C2327 + C7772 * C2322 - C7766 * C2328 +
             C7773 * C9680 - C48650 * C9682) *
                C2460 +
            (C7771 * C2329 - C7765 * C2339 + C7772 * C2330 - C7766 * C2340 +
             C7773 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C2460 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48653) *
               C48261 * C48345 * C510 +
           ((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C2458 +
            (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48686 +
            (C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
             C48650 * C1912 - C7773 * C1908) *
                C2459 +
            (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
             C48650 * C1917 - C7773 * C1913) *
                C48675 +
            (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
             C48650 * C9945 - C7773 * C9944) *
                C2460 +
            (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
             C48650 * C9947 - C7773 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C510 +
           (((C290 - C289) * C15017 + (C292 - C291) * C15014 +
             (C2640 - C2639) * C15018 + (C2642 - C2641) * C15015 +
             (C2644 - C2643) * C15019 + (C2646 - C2645) * C48653) *
                C48682 +
            ((C294 - C293) * C15017 + (C296 - C295) * C15014 +
             (C2648 - C2647) * C15018 + (C2650 - C2649) * C15015 +
             (C2652 - C2651) * C15019 + (C2654 - C2653) * C48653) *
                C48669 +
            ((C298 - C297) * C15017 + (C300 - C299) * C15014 +
             (C5116 - C5115) * C15018 + (C5118 - C5117) * C15015 +
             (C48356 * C2635 - C113 * C2634) * C15019 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C48345 * C510 +
           ((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C1069 * C682 - C48685 * C687 + C1070 * C1453 - C48673 * C1457 +
             C1071 * C1907 - C48650 * C1910) *
                C15018 +
            (C1069 * C688 - C48685 * C697 + C1070 * C1458 - C48673 * C1465 +
             C1071 * C1911 - C48650 * C1916) *
                C15015 +
            (C1069 * C2321 - C48685 * C2327 + C1070 * C2322 - C48673 * C2328 +
             C1071 * C9680 - C48650 * C9682) *
                C15019 +
            (C1069 * C2329 - C48685 * C2339 + C1070 * C2330 - C48673 * C2340 +
             C1071 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C15019 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48653) *
               C48261 * C48345 * C510 +
           ((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C15017 +
            (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C15014 +
            (C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
             C48650 * C1912 - C1071 * C1908) *
                C15018 +
            (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
             C48650 * C1917 - C1071 * C1913) *
                C15015 +
            (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
             C48650 * C9945 - C1071 * C9944) *
                C15019 +
            (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
             C48650 * C9947 - C1071 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C17482 +
            (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
            (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
            (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
            (C17664 - C17665) * C17486 + (C17666 - C17667) * C17481) *
               C48261 * C48345 * C510 +
           ((C113 * C264 - C48356 * C270) * C17482 +
            (C113 * C271 - C48356 * C282) * C17477 + (C3259 - C3260) * C17483 +
            (C3261 - C3262) * C17478 + (C3263 - C3264) * C17484 +
            (C3265 - C3266) * C17479 +
            (C113 * C3246 - C48356 * C3249) * C17485 +
            (C113 * C3250 - C48356 * C3255) * C17480 +
            (C113 * C10970 - C48356 * C10972) * C17486 +
            (C113 * C10974 - C48356 * C10976) * C17481) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C145 - C144) * C17482 + (C147 - C146) * C17477 + C2829 * C17483 +
            C2830 * C17478 + C2831 * C17484 + C2832 * C17479 +
            (C2833 - C2834) * C17485 + (C2835 - C2836) * C17480 +
            (C17668 - C17669) * C17486 + (C17670 - C17671) * C17481) *
               C48261 * C48345 * C510 +
           ((C290 - C289) * C17482 + (C292 - C291) * C17477 +
            (C2640 - C2639) * C17483 + (C2642 - C2641) * C17478 +
            (C2644 - C2643) * C17484 + (C2646 - C2645) * C17479 +
            (C48356 * C3251 - C113 * C3247) * C17485 +
            (C48356 * C3256 - C113 * C3252) * C17480 +
            (C48356 * C17570 - C113 * C17569) * C17486 +
            (C48356 * C17572 - C113 * C17571) * C17481) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48356 * C122 - C113 * C115) * C114 +
                (C48356 * C136 - C113 * C123) * C48373) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C48345 * C576 +
              (((C113 * C264 - C48356 * C270) * C114 +
                (C113 * C271 - C48356 * C282) * C48373) *
                   C103 +
               ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
               ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
               ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
               ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
                  C48345 * C577 +
              (((C48356 * C585 - C113 * C580) * C114 +
                (C48356 * C595 - C113 * C586) * C48373) *
                   C103 +
               ((C48356 * C587 - C113 * C581) * C114 +
                (C48356 * C596 - C113 * C588) * C48373) *
                   C104 +
               ((C48356 * C589 - C113 * C582) * C114 +
                (C48356 * C597 - C113 * C590) * C48373) *
                   C105 +
               ((C48356 * C591 - C113 * C583) * C114 +
                (C48356 * C598 - C113 * C592) * C48373) *
                   C106 +
               ((C48356 * C593 - C113 * C584) * C114 +
                (C48356 * C599 - C113 * C594) * C48373) *
                   C107) *
                  C48345 * C578) *
             C48294 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                 C48650 * C585 - C1071 * C580) *
                    C114 +
                (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                 C48650 * C595 - C1071 * C586) *
                    C48373) *
                   C1066 +
               ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                   C1067 +
               C1121 * C48637) *
                  C48345 * C576 +
              (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
                 C1071 * C1267 - C48650 * C1271) *
                    C114 +
                (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
                 C1071 * C1272 - C48650 * C1279) *
                    C48373) *
                   C1066 +
               ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
                (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                   C1067 +
               ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
                (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                   C48637) *
                  C48345 * C577 +
              (((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
                 C48650 * C1752 - C1071 * C1749) *
                    C114 +
                (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
                 C48650 * C1758 - C1071 * C1753) *
                    C48373) *
                   C1066 +
               ((C48685 * C587 - C1069 * C581 + C48673 * C1273 - C1070 * C1268 +
                 C48650 * C1754 - C1071 * C1750) *
                    C114 +
                (C48685 * C596 - C1069 * C588 + C48673 * C1280 - C1070 * C1274 +
                 C48650 * C1759 - C1071 * C1755) *
                    C48373) *
                   C1067 +
               ((C48685 * C589 - C1069 * C582 + C48673 * C1275 - C1070 * C1269 +
                 C48650 * C1756 - C1071 * C1751) *
                    C114 +
                (C48685 * C597 - C1069 * C590 + C48673 * C1281 - C1070 * C1276 +
                 C48650 * C1760 - C1071 * C1757) *
                    C48373) *
                   C48637) *
                  C48345 * C578) *
             C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C2458 +
            (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
            (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
            (C2823 - C2824) * C48653) *
               C1066 +
           ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
            C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
               C1067 +
           C2488 * C48637) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C2458 +
            (C113 * C271 - C48356 * C282) * C48686 +
            (C113 * C682 - C48356 * C687) * C2459 +
            (C113 * C688 - C48356 * C697) * C48675 +
            (C113 * C2321 - C48356 * C2327) * C2460 +
            (C113 * C2329 - C48356 * C2339) * C48653) *
               C1066 +
           ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
            (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
            (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
               C1067 +
           ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
            (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
            (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
               C48637) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C2458 +
            (C48356 * C595 - C113 * C586) * C48686 +
            (C48356 * C1457 - C113 * C1453) * C2459 +
            (C48356 * C1465 - C113 * C1458) * C48675 +
            (C48356 * C2328 - C113 * C2322) * C2460 +
            (C48356 * C2340 - C113 * C2330) * C48653) *
               C1066 +
           ((C48356 * C587 - C113 * C581) * C2458 +
            (C48356 * C596 - C113 * C588) * C48686 +
            (C48356 * C1459 - C113 * C1454) * C2459 +
            (C48356 * C1466 - C113 * C1460) * C48675 +
            (C48356 * C2332 - C113 * C2324) * C2460 +
            (C48356 * C2342 - C113 * C2334) * C48653) *
               C1067 +
           ((C48356 * C589 - C113 * C582) * C2458 +
            (C48356 * C597 - C113 * C590) * C48686 +
            (C48356 * C1461 - C113 * C1455) * C2459 +
            (C48356 * C1467 - C113 * C1462) * C48675 +
            (C48356 * C2336 - C113 * C2326) * C2460 +
            (C48356 * C2344 - C113 * C2338) * C48653) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C576 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C114 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48373) *
               C48682 +
           ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
            (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
               C48669 +
           ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
            (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
             C48650 * C1752 - C7773 * C1749) *
                C114 +
            (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
             C48650 * C1758 - C7773 * C1753) *
                C48373) *
               C48682 +
           ((C7765 * C587 - C7771 * C581 + C7766 * C1273 - C7772 * C1268 +
             C48650 * C1754 - C7773 * C1750) *
                C114 +
            (C7765 * C596 - C7771 * C588 + C7766 * C1280 - C7772 * C1274 +
             C48650 * C1759 - C7773 * C1755) *
                C48373) *
               C48669 +
           ((C7765 * C589 - C7771 * C582 + C7766 * C1275 - C7772 * C1269 +
             C48650 * C1756 - C7773 * C1751) *
                C114 +
            (C7765 * C597 - C7771 * C590 + C7766 * C1281 - C7772 * C1276 +
             C48650 * C1760 - C7773 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C576 +
          ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
            C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
            C9039 * C9122 - C9033 * C9124) *
               C114 +
           (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
            C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
            C9039 * C9125 - C9033 * C9128) *
               C48373) *
              C48261 * C48345 * C577 +
          ((C9029 * C585 - C9035 * C580 + C9030 * C1271 - C9036 * C1267 +
            C9031 * C1752 - C9037 * C1749 + C9032 * C9124 - C9038 * C9122 +
            C9033 * C9365 - C9039 * C9364) *
               C114 +
           (C9029 * C595 - C9035 * C586 + C9030 * C1279 - C9036 * C1272 +
            C9031 * C1758 - C9037 * C1753 + C9032 * C9128 - C9038 * C9125 +
            C9033 * C9367 - C9039 * C9366) *
               C48373) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
            C48650 * C585 - C7773 * C580) *
               C2458 +
           (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
            C48650 * C595 - C7773 * C586) *
               C48686 +
           (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
           (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
           (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
           (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
              C48261 * C48345 * C576 +
          ((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
            C7773 * C1267 - C48650 * C1271) *
               C2458 +
           (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
            C7773 * C1272 - C48650 * C1279) *
               C48686 +
           (C7771 * C682 - C7765 * C687 + C7772 * C1453 - C7766 * C1457 +
            C7773 * C1907 - C48650 * C1910) *
               C2459 +
           (C7771 * C688 - C7765 * C697 + C7772 * C1458 - C7766 * C1465 +
            C7773 * C1911 - C48650 * C1916) *
               C48675 +
           (C7771 * C2321 - C7765 * C2327 + C7772 * C2322 - C7766 * C2328 +
            C7773 * C9680 - C48650 * C9682) *
               C2460 +
           (C7771 * C2329 - C7765 * C2339 + C7772 * C2330 - C7766 * C2340 +
            C7773 * C9684 - C48650 * C9686) *
               C48653) *
              C48261 * C48345 * C577 +
          ((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
            C48650 * C1752 - C7773 * C1749) *
               C2458 +
           (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
            C48650 * C1758 - C7773 * C1753) *
               C48686 +
           (C7765 * C1457 - C7771 * C1453 + C7766 * C1910 - C7772 * C1907 +
            C48650 * C9214 - C7773 * C9212) *
               C2459 +
           (C7765 * C1465 - C7771 * C1458 + C7766 * C1916 - C7772 * C1911 +
            C48650 * C9218 - C7773 * C9215) *
               C48675 +
           (C7765 * C2328 - C7771 * C2322 + C7766 * C9682 - C7772 * C9680 +
            C48650 * C9683 - C7773 * C9681) *
               C2460 +
           (C7765 * C2340 - C7771 * C2330 + C7766 * C9686 - C7772 * C9684 +
            C48650 * C9687 - C7773 * C9685) *
               C48653) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C15017 +
            (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
            (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
               C48682 +
           ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
            C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
               C48669 +
           C15031 * C48637) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C15017 +
            (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
            (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
            (C3265 - C3266) * C48653) *
               C48682 +
           ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
            (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
            (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
               C48669 +
           ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
            (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
            (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
               C48637) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C15017 +
            (C48356 * C595 - C113 * C586) * C15014 +
            (C48356 * C1457 - C113 * C1453) * C15018 +
            (C48356 * C1465 - C113 * C1458) * C15015 +
            (C48356 * C2328 - C113 * C2322) * C15019 +
            (C48356 * C2340 - C113 * C2330) * C48653) *
               C48682 +
           ((C48356 * C587 - C113 * C581) * C15017 +
            (C48356 * C596 - C113 * C588) * C15014 +
            (C48356 * C1459 - C113 * C1454) * C15018 +
            (C48356 * C1466 - C113 * C1460) * C15015 +
            (C48356 * C2332 - C113 * C2324) * C15019 +
            (C48356 * C2342 - C113 * C2334) * C48653) *
               C48669 +
           ((C48356 * C589 - C113 * C582) * C15017 +
            (C48356 * C597 - C113 * C590) * C15014 +
            (C48356 * C1461 - C113 * C1455) * C15018 +
            (C48356 * C1467 - C113 * C1462) * C15015 +
            (C48356 * C2336 - C113 * C2326) * C15019 +
            (C48356 * C2344 - C113 * C2338) * C48653) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
            C48650 * C585 - C1071 * C580) *
               C15017 +
           (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
            C48650 * C595 - C1071 * C586) *
               C15014 +
           (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
           (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
           (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
           (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
              C48261 * C48345 * C576 +
          ((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
            C1071 * C1267 - C48650 * C1271) *
               C15017 +
           (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
            C1071 * C1272 - C48650 * C1279) *
               C15014 +
           (C1069 * C682 - C48685 * C687 + C1070 * C1453 - C48673 * C1457 +
            C1071 * C1907 - C48650 * C1910) *
               C15018 +
           (C1069 * C688 - C48685 * C697 + C1070 * C1458 - C48673 * C1465 +
            C1071 * C1911 - C48650 * C1916) *
               C15015 +
           (C1069 * C2321 - C48685 * C2327 + C1070 * C2322 - C48673 * C2328 +
            C1071 * C9680 - C48650 * C9682) *
               C15019 +
           (C1069 * C2329 - C48685 * C2339 + C1070 * C2330 - C48673 * C2340 +
            C1071 * C9684 - C48650 * C9686) *
               C48653) *
              C48261 * C48345 * C577 +
          ((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
            C48650 * C1752 - C1071 * C1749) *
               C15017 +
           (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
            C48650 * C1758 - C1071 * C1753) *
               C15014 +
           (C48685 * C1457 - C1069 * C1453 + C48673 * C1910 - C1070 * C1907 +
            C48650 * C9214 - C1071 * C9212) *
               C15018 +
           (C48685 * C1465 - C1069 * C1458 + C48673 * C1916 - C1070 * C1911 +
            C48650 * C9218 - C1071 * C9215) *
               C15015 +
           (C48685 * C2328 - C1069 * C2322 + C48673 * C9682 - C1070 * C9680 +
            C48650 * C9683 - C1071 * C9681) *
               C15019 +
           (C48685 * C2340 - C1069 * C2330 + C48673 * C9686 - C1070 * C9684 +
            C48650 * C9687 - C1071 * C9685) *
               C48653) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48356 * C122 - C113 * C115) * C17482 +
           (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
           (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
           (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
           (C17664 - C17665) * C17486 + (C17666 - C17667) * C17481) *
              C48261 * C48345 * C576 +
          ((C113 * C264 - C48356 * C270) * C17482 +
           (C113 * C271 - C48356 * C282) * C17477 + (C3259 - C3260) * C17483 +
           (C3261 - C3262) * C17478 + (C3263 - C3264) * C17484 +
           (C3265 - C3266) * C17479 + (C113 * C3246 - C48356 * C3249) * C17485 +
           (C113 * C3250 - C48356 * C3255) * C17480 +
           (C113 * C10970 - C48356 * C10972) * C17486 +
           (C113 * C10974 - C48356 * C10976) * C17481) *
              C48261 * C48345 * C577 +
          ((C48356 * C585 - C113 * C580) * C17482 +
           (C48356 * C595 - C113 * C586) * C17477 +
           (C48356 * C1457 - C113 * C1453) * C17483 +
           (C48356 * C1465 - C113 * C1458) * C17478 +
           (C48356 * C2328 - C113 * C2322) * C17484 +
           (C48356 * C2340 - C113 * C2330) * C17479 +
           (C48356 * C10096 - C113 * C10094) * C17485 +
           (C48356 * C10100 - C113 * C10097) * C17480 +
           (C48356 * C10973 - C113 * C10971) * C17486 +
           (C48356 * C10977 - C113 * C10975) * C17481) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48356 * C122 - C113 * C115) * C114 +
                 (C48356 * C136 - C113 * C123) * C48373) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C386 +
               (((C113 * C388 - C48356 * C394) * C114 +
                 (C113 * C395 - C48356 * C406) * C48373) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
                   C48647) *
                  C510 +
              ((((C113 * C264 - C48356 * C270) * C114 +
                 (C113 * C271 - C48356 * C282) * C48373) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
                   C386 +
               (((C48356 * C687 - C113 * C682) * C114 +
                 (C48356 * C697 - C113 * C688) * C48373) *
                    C103 +
                ((C48356 * C689 - C113 * C683) * C114 +
                 (C48356 * C698 - C113 * C690) * C48373) *
                    C104 +
                ((C48356 * C691 - C113 * C684) * C114 +
                 (C48356 * C699 - C113 * C692) * C48373) *
                    C105 +
                ((C48356 * C693 - C113 * C685) * C114 +
                 (C48356 * C700 - C113 * C694) * C48373) *
                    C106 +
                ((C48356 * C695 - C113 * C686) * C114 +
                 (C48356 * C701 - C113 * C696) * C48373) *
                    C107) *
                   C48647) *
                  C48645) *
             C48294 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                  C48650 * C585 - C1071 * C580) *
                     C114 +
                 (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                  C48650 * C595 - C1071 * C586) *
                     C48373) *
                    C1066 +
                ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                 (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                    C1067 +
                C1121 * C48637) *
                   C386 +
               (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
                  C1071 * C1453 - C48650 * C1457) *
                     C114 +
                 (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
                  C1071 * C1458 - C48650 * C1465) *
                     C48373) *
                    C1066 +
                ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
                 (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                    C1067 +
                ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
                 (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                    C48637) *
                   C48647) *
                  C510 +
              ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
                  C1071 * C1267 - C48650 * C1271) *
                     C114 +
                 (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
                  C1071 * C1272 - C48650 * C1279) *
                     C48373) *
                    C1066 +
                ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
                 (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                    C1067 +
                ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
                 (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                    C48637) *
                   C386 +
               (((C48685 * C687 - C1069 * C682 + C48673 * C1457 -
                  C1070 * C1453 + C48650 * C1910 - C1071 * C1907) *
                     C114 +
                 (C48685 * C697 - C1069 * C688 + C48673 * C1465 -
                  C1070 * C1458 + C48650 * C1916 - C1071 * C1911) *
                     C48373) *
                    C1066 +
                ((C48685 * C689 - C1069 * C683 + C48673 * C1459 -
                  C1070 * C1454 + C48650 * C1912 - C1071 * C1908) *
                     C114 +
                 (C48685 * C698 - C1069 * C690 + C48673 * C1466 -
                  C1070 * C1460 + C48650 * C1917 - C1071 * C1913) *
                     C48373) *
                    C1067 +
                ((C48685 * C691 - C1069 * C684 + C48673 * C1461 -
                  C1070 * C1455 + C48650 * C1914 - C1071 * C1909) *
                     C114 +
                 (C48685 * C699 - C1069 * C692 + C48673 * C1467 -
                  C1070 * C1462 + C48650 * C1918 - C1071 * C1915) *
                     C48373) *
                    C48637) *
                   C48647) *
                  C48645) *
             C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C386 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 + (C3259 - C3260) * C2459 +
             (C3261 - C3262) * C48675 + (C3263 - C3264) * C2460 +
             (C3265 - C3266) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C386 +
           (((C3260 - C3259) * C2458 + (C3262 - C3261) * C48686 +
             (C3264 - C3263) * C2459 + (C3266 - C3265) * C48675 +
             (C48356 * C3249 - C113 * C3246) * C2460 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C1066 +
            ((C2640 - C2639) * C2458 + (C2642 - C2641) * C48686 +
             (C2644 - C2643) * C2459 + (C2646 - C2645) * C48675 +
             (C48356 * C3251 - C113 * C3247) * C2460 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C1067 +
            ((C2648 - C2647) * C2458 + (C2650 - C2649) * C48686 +
             (C2652 - C2651) * C2459 + (C2654 - C2653) * C48675 +
             (C48356 * C3253 - C113 * C3248) * C2460 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C386 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C510 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C386 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C510 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C2459 +
            (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48675 +
            (C10557 - C10558 + C10559 - C10560 + C10561 - C10562) * C2460 +
            (C10563 - C10564 + C10565 - C10566 + C10567 - C10568) * C48653) *
               C48261 * C386 +
           ((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C2458 +
            (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48686 +
            (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C2459 +
            (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48675 +
            (C7765 * C3249 - C7771 * C3246 + C7766 * C10096 - C7772 * C10094 +
             C48650 * C10541 - C7773 * C10540) *
                C2460 +
            (C7765 * C3255 - C7771 * C3250 + C7766 * C10100 - C7772 * C10097 +
             C48650 * C10543 - C7773 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C386 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C386 +
           (((C3260 - C3259) * C15017 + (C3262 - C3261) * C15014 +
             (C3264 - C3263) * C15018 + (C3266 - C3265) * C15015 +
             (C48356 * C3249 - C113 * C3246) * C15019 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C48682 +
            ((C2640 - C2639) * C15017 + (C2642 - C2641) * C15014 +
             (C2644 - C2643) * C15018 + (C2646 - C2645) * C15015 +
             (C48356 * C3251 - C113 * C3247) * C15019 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C48669 +
            ((C2648 - C2647) * C15017 + (C2650 - C2649) * C15014 +
             (C2652 - C2651) * C15018 + (C2654 - C2653) * C15015 +
             (C48356 * C3253 - C113 * C3248) * C15019 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C386 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C510 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C15018 +
            (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C15015 +
            (C16980 - C16981 + C16982 - C16983 + C16984 - C16985) * C15019 +
            (C16986 - C16987 + C16988 - C16989 + C16990 - C16991) * C48653) *
               C48261 * C386 +
           ((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C15017 +
            (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C15014 +
            (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C15018 +
            (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C15015 +
            (C48685 * C3249 - C1069 * C3246 + C48673 * C10096 - C1070 * C10094 +
             C48650 * C10541 - C1071 * C10540) *
                C15019 +
            (C48685 * C3255 - C1069 * C3250 + C48673 * C10100 - C1070 * C10097 +
             C48650 * C10543 - C1071 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C17482 +
            (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
            (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
            (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
            (C17664 - C17665) * C17486 + (C17666 - C17667) * C17481) *
               C48261 * C386 +
           ((C2818 - C2817) * C17482 + (C2820 - C2819) * C17477 +
            (C2822 - C2821) * C17483 + (C2824 - C2823) * C17478 +
            (C3683 - C3684) * C17484 + (C3685 - C3686) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C113 * C17655 - C48356 * C17657) * C17486 +
            (C113 * C17658 - C48356 * C17661) * C17481) *
               C48261 * C48647) *
              C510 +
          (((C113 * C264 - C48356 * C270) * C17482 +
            (C113 * C271 - C48356 * C282) * C17477 + (C3259 - C3260) * C17483 +
            (C3261 - C3262) * C17478 + (C3263 - C3264) * C17484 +
            (C3265 - C3266) * C17479 + (C17902 - C17903) * C17485 +
            (C17904 - C17905) * C17480 + (C17906 - C17907) * C17486 +
            (C17908 - C17909) * C17481) *
               C48261 * C386 +
           ((C3260 - C3259) * C17482 + (C3262 - C3261) * C17477 +
            (C3264 - C3263) * C17483 + (C3266 - C3265) * C17478 +
            (C17903 - C17902) * C17484 + (C17905 - C17904) * C17479 +
            (C17907 - C17906) * C17485 + (C17909 - C17908) * C17480 +
            (C48356 * C17898 - C113 * C17897) * C17486 +
            (C48356 * C17900 - C113 * C17899) * C17481) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48356 * C122 - C113 * C115) * C114 +
                 (C48356 * C136 - C113 * C123) * C48373) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C784 +
               (((C113 * C388 - C48356 * C394) * C114 +
                 (C113 * C395 - C48356 * C406) * C48373) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
                   C48647) *
                  C48328 * C512 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
                   C784 +
               (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
                ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
                ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
                ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
                ((C48356 * C404 - C113 * C393) * C114 +
                 (C48356 * C411 - C113 * C405) * C48373) *
                    C107) *
                   C48647) *
                  C48328 * C48643) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                  C48650 * C585 - C1071 * C580) *
                     C114 +
                 (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                  C48650 * C595 - C1071 * C586) *
                     C48373) *
                    C1066 +
                ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                 (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                    C1067 +
                C1121 * C48637) *
                   C784 +
               (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
                  C1071 * C1453 - C48650 * C1457) *
                     C114 +
                 (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
                  C1071 * C1458 - C48650 * C1465) *
                     C48373) *
                    C1066 +
                ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
                 (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                    C1067 +
                ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
                 (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                    C48637) *
                   C48647) *
                  C48328 * C512 +
              ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
                 (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                    C1066 +
                ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
                 (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                    C1067 +
                ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
                 (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                    C48637) *
                   C784 +
               (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
                 (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                    C1066 +
                ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
                 (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                    C1067 +
                ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
                  C48650 * C1463 - C1071 * C1456) *
                     C114 +
                 (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
                  C48650 * C1468 - C1071 * C1464) *
                     C48373) *
                    C48637) *
                   C48647) *
                  C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C784 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 + C2829 * C2459 +
             C2830 * C48675 + C2831 * C2460 + C2832 * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 + C2837 * C2459 +
             C2838 * C48675 + C2839 * C2460 + C2840 * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C784 +
           ((C2825 * C2458 + C2826 * C48686 + C2827 * C2459 + C2828 * C48675 +
             (C2834 - C2833) * C2460 + (C2836 - C2835) * C48653) *
                C1066 +
            (C2468 * C2458 + C2469 * C48686 + C2481 * C2459 + C2482 * C48675 +
             (C2842 - C2841) * C2460 + (C2844 - C2843) * C48653) *
                C1067 +
            ((C422 - C421) * C2458 + (C424 - C423) * C48686 +
             (C2475 - C2474) * C2459 + (C2477 - C2476) * C48675 +
             (C48356 * C2810 - C113 * C2803) * C2460 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C784 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C784 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C2460 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48653) *
               C48261 * C784 +
           ((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C2458 +
            (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48686 +
            (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C2459 +
            (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48675 +
            (C7765 * C2806 - C7771 * C2801 + C7766 * C3251 - C7772 * C3247 +
             C48650 * C10098 - C7773 * C10095) *
                C2460 +
            (C7765 * C2813 - C7771 * C2807 + C7766 * C3256 - C7772 * C3252 +
             C48650 * C10101 - C7773 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C784 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C784 +
           ((C2825 * C15017 + C2826 * C15014 + C2827 * C15018 + C2828 * C15015 +
             (C2834 - C2833) * C15019 + (C2836 - C2835) * C48653) *
                C48682 +
            (C2468 * C15017 + C2469 * C15014 + C2481 * C15018 + C2482 * C15015 +
             (C2842 - C2841) * C15019 + (C2844 - C2843) * C48653) *
                C48669 +
            (C4975 * C15017 + C4976 * C15014 + (C2475 - C2474) * C15018 +
             (C2477 - C2476) * C15015 +
             (C48356 * C2810 - C113 * C2803) * C15019 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C784 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C15019 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48653) *
               C48261 * C784 +
           ((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C15017 +
            (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C15014 +
            (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C15018 +
            (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C15015 +
            (C48685 * C2806 - C1069 * C2801 + C48673 * C3251 - C1070 * C3247 +
             C48650 * C10098 - C1071 * C10095) *
                C15019 +
            (C48685 * C2813 - C1069 * C2807 + C48673 * C3256 - C1070 * C3252 +
             C48650 * C10101 - C1071 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C17482 +
            (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
            (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
            (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
            (C17664 - C17665) * C17486 + (C17666 - C17667) * C17481) *
               C48261 * C784 +
           ((C2818 - C2817) * C17482 + (C2820 - C2819) * C17477 +
            (C2822 - C2821) * C17483 + (C2824 - C2823) * C17478 +
            (C3683 - C3684) * C17484 + (C3685 - C3686) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C113 * C17655 - C48356 * C17657) * C17486 +
            (C113 * C17658 - C48356 * C17661) * C17481) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C145 - C144) * C17482 + (C147 - C146) * C17477 + C2829 * C17483 +
            C2830 * C17478 + C2831 * C17484 + C2832 * C17479 +
            (C2833 - C2834) * C17485 + (C2835 - C2836) * C17480 +
            (C17668 - C17669) * C17486 + (C17670 - C17671) * C17481) *
               C48261 * C784 +
           (C2825 * C17482 + C2826 * C17477 + C2827 * C17483 + C2828 * C17478 +
            (C2834 - C2833) * C17484 + (C2836 - C2835) * C17479 +
            (C17669 - C17668) * C17485 + (C17671 - C17670) * C17480 +
            (C48356 * C17659 - C113 * C17656) * C17486 +
            (C48356 * C17662 - C113 * C17660) * C17481) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48356 * C122 - C113 * C115) * C114 +
                 (C48356 * C136 - C113 * C123) * C48373) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C784 +
               (((C113 * C388 - C48356 * C394) * C114 +
                 (C113 * C395 - C48356 * C406) * C48373) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
                   C48647) *
                  C260 +
              ((((C113 * C264 - C48356 * C270) * C114 +
                 (C113 * C271 - C48356 * C282) * C48373) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
                   C784 +
               (((C48356 * C687 - C113 * C682) * C114 +
                 (C48356 * C697 - C113 * C688) * C48373) *
                    C103 +
                ((C48356 * C689 - C113 * C683) * C114 +
                 (C48356 * C698 - C113 * C690) * C48373) *
                    C104 +
                ((C48356 * C691 - C113 * C684) * C114 +
                 (C48356 * C699 - C113 * C692) * C48373) *
                    C105 +
                ((C48356 * C693 - C113 * C685) * C114 +
                 (C48356 * C700 - C113 * C694) * C48373) *
                    C106 +
                ((C48356 * C695 - C113 * C686) * C114 +
                 (C48356 * C701 - C113 * C696) * C48373) *
                    C107) *
                   C48647) *
                  C48645) *
             C48294 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                  C48650 * C585 - C1071 * C580) *
                     C114 +
                 (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                  C48650 * C595 - C1071 * C586) *
                     C48373) *
                    C1066 +
                ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                 (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                    C1067 +
                C1121 * C48637) *
                   C784 +
               (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
                  C1071 * C1453 - C48650 * C1457) *
                     C114 +
                 (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
                  C1071 * C1458 - C48650 * C1465) *
                     C48373) *
                    C1066 +
                ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
                 (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                    C1067 +
                ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
                 (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                    C48637) *
                   C48647) *
                  C260 +
              ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
                  C1071 * C1267 - C48650 * C1271) *
                     C114 +
                 (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
                  C1071 * C1272 - C48650 * C1279) *
                     C48373) *
                    C1066 +
                ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
                 (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                    C1067 +
                ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
                 (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                    C48637) *
                   C784 +
               (((C48685 * C687 - C1069 * C682 + C48673 * C1457 -
                  C1070 * C1453 + C48650 * C1910 - C1071 * C1907) *
                     C114 +
                 (C48685 * C697 - C1069 * C688 + C48673 * C1465 -
                  C1070 * C1458 + C48650 * C1916 - C1071 * C1911) *
                     C48373) *
                    C1066 +
                ((C48685 * C689 - C1069 * C683 + C48673 * C1459 -
                  C1070 * C1454 + C48650 * C1912 - C1071 * C1908) *
                     C114 +
                 (C48685 * C698 - C1069 * C690 + C48673 * C1466 -
                  C1070 * C1460 + C48650 * C1917 - C1071 * C1913) *
                     C48373) *
                    C1067 +
                ((C48685 * C691 - C1069 * C684 + C48673 * C1461 -
                  C1070 * C1455 + C48650 * C1914 - C1071 * C1909) *
                     C114 +
                 (C48685 * C699 - C1069 * C692 + C48673 * C1467 -
                  C1070 * C1462 + C48650 * C1918 - C1071 * C1915) *
                     C48373) *
                    C48637) *
                   C48647) *
                  C48645) *
             C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C784 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 + (C3259 - C3260) * C2459 +
             (C3261 - C3262) * C48675 + (C3263 - C3264) * C2460 +
             (C3265 - C3266) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C784 +
           (((C3260 - C3259) * C2458 + (C3262 - C3261) * C48686 +
             (C3264 - C3263) * C2459 + (C3266 - C3265) * C48675 +
             (C48356 * C3249 - C113 * C3246) * C2460 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C1066 +
            ((C2640 - C2639) * C2458 + (C2642 - C2641) * C48686 +
             (C2644 - C2643) * C2459 + (C2646 - C2645) * C48675 +
             (C48356 * C3251 - C113 * C3247) * C2460 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C1067 +
            ((C2648 - C2647) * C2458 + (C2650 - C2649) * C48686 +
             (C2652 - C2651) * C2459 + (C2654 - C2653) * C48675 +
             (C48356 * C3253 - C113 * C3248) * C2460 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C784 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C260 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C784 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C260 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C2459 +
            (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48675 +
            (C10557 - C10558 + C10559 - C10560 + C10561 - C10562) * C2460 +
            (C10563 - C10564 + C10565 - C10566 + C10567 - C10568) * C48653) *
               C48261 * C784 +
           ((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C2458 +
            (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48686 +
            (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C2459 +
            (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48675 +
            (C7765 * C3249 - C7771 * C3246 + C7766 * C10096 - C7772 * C10094 +
             C48650 * C10541 - C7773 * C10540) *
                C2460 +
            (C7765 * C3255 - C7771 * C3250 + C7766 * C10100 - C7772 * C10097 +
             C48650 * C10543 - C7773 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C784 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C784 +
           (((C3260 - C3259) * C15017 + (C3262 - C3261) * C15014 +
             (C3264 - C3263) * C15018 + (C3266 - C3265) * C15015 +
             (C48356 * C3249 - C113 * C3246) * C15019 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C48682 +
            ((C2640 - C2639) * C15017 + (C2642 - C2641) * C15014 +
             (C2644 - C2643) * C15018 + (C2646 - C2645) * C15015 +
             (C48356 * C3251 - C113 * C3247) * C15019 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C48669 +
            ((C2648 - C2647) * C15017 + (C2650 - C2649) * C15014 +
             (C2652 - C2651) * C15018 + (C2654 - C2653) * C15015 +
             (C48356 * C3253 - C113 * C3248) * C15019 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C784 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C260 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C15018 +
            (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C15015 +
            (C16980 - C16981 + C16982 - C16983 + C16984 - C16985) * C15019 +
            (C16986 - C16987 + C16988 - C16989 + C16990 - C16991) * C48653) *
               C48261 * C784 +
           ((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C15017 +
            (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C15014 +
            (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C15018 +
            (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C15015 +
            (C48685 * C3249 - C1069 * C3246 + C48673 * C10096 - C1070 * C10094 +
             C48650 * C10541 - C1071 * C10540) *
                C15019 +
            (C48685 * C3255 - C1069 * C3250 + C48673 * C10100 - C1070 * C10097 +
             C48650 * C10543 - C1071 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C17482 +
            (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
            (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
            (C3684 - C3683) * C17485 + (C3686 - C3685) * C17480 +
            (C17664 - C17665) * C17486 + (C17666 - C17667) * C17481) *
               C48261 * C784 +
           ((C2818 - C2817) * C17482 + (C2820 - C2819) * C17477 +
            (C2822 - C2821) * C17483 + (C2824 - C2823) * C17478 +
            (C3683 - C3684) * C17484 + (C3685 - C3686) * C17479 +
            (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
            (C113 * C17655 - C48356 * C17657) * C17486 +
            (C113 * C17658 - C48356 * C17661) * C17481) *
               C48261 * C48647) *
              C260 +
          (((C113 * C264 - C48356 * C270) * C17482 +
            (C113 * C271 - C48356 * C282) * C17477 + (C3259 - C3260) * C17483 +
            (C3261 - C3262) * C17478 + (C3263 - C3264) * C17484 +
            (C3265 - C3266) * C17479 + (C17902 - C17903) * C17485 +
            (C17904 - C17905) * C17480 + (C17906 - C17907) * C17486 +
            (C17908 - C17909) * C17481) *
               C48261 * C784 +
           ((C3260 - C3259) * C17482 + (C3262 - C3261) * C17477 +
            (C3264 - C3263) * C17483 + (C3266 - C3265) * C17478 +
            (C17903 - C17902) * C17484 + (C17905 - C17904) * C17479 +
            (C17907 - C17906) * C17485 + (C17909 - C17908) * C17480 +
            (C48356 * C17898 - C113 * C17897) * C17486 +
            (C48356 * C17900 - C113 * C17899) * C17481) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48356 * C122 - C113 * C115) * C114 +
                (C48356 * C136 - C113 * C123) * C48373) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C930 +
              (((C113 * C388 - C48356 * C394) * C114 +
                (C113 * C395 - C48356 * C406) * C48373) *
                   C103 +
               ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
               ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
               ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
               ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
                  C931 +
              (((C48356 * C938 - C113 * C933) * C114 +
                (C48356 * C948 - C113 * C939) * C48373) *
                   C103 +
               ((C48356 * C940 - C113 * C934) * C114 +
                (C48356 * C949 - C113 * C941) * C48373) *
                   C104 +
               ((C48356 * C942 - C113 * C935) * C114 +
                (C48356 * C950 - C113 * C943) * C48373) *
                   C105 +
               ((C48356 * C944 - C113 * C936) * C114 +
                (C48356 * C951 - C113 * C945) * C48373) *
                   C106 +
               ((C48356 * C946 - C113 * C937) * C114 +
                (C48356 * C952 - C113 * C947) * C48373) *
                   C107) *
                  C932) *
             C48328 * C48294 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
                 C48650 * C585 - C1071 * C580) *
                    C114 +
                (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
                 C48650 * C595 - C1071 * C586) *
                    C48373) *
                   C1066 +
               ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                   C1067 +
               C1121 * C48637) *
                  C930 +
              (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
                 C1071 * C1453 - C48650 * C1457) *
                    C114 +
                (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
                 C1071 * C1458 - C48650 * C1465) *
                    C48373) *
                   C1066 +
               ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
                (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                   C1067 +
               ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
                (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                   C48637) *
                  C931 +
              (((C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
                 C48650 * C2328 - C1071 * C2322) *
                    C114 +
                (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
                 C48650 * C2340 - C1071 * C2330) *
                    C48373) *
                   C1066 +
               ((C48685 * C940 - C1069 * C934 + C48673 * C2331 - C1070 * C2323 +
                 C48650 * C2332 - C1071 * C2324) *
                    C114 +
                (C48685 * C949 - C1069 * C941 + C48673 * C2341 - C1070 * C2333 +
                 C48650 * C2342 - C1071 * C2334) *
                    C48373) *
                   C1067 +
               ((C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
                 C48650 * C2336 - C1071 * C2326) *
                    C114 +
                (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
                 C48650 * C2344 - C1071 * C2338) *
                    C48373) *
                   C48637) *
                  C932) *
             C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C2458 +
            (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
            (C2819 - C2820) * C48675 + C3681 * C2460 + C3682 * C48653) *
               C1066 +
           ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
            C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
               C1067 +
           C2488 * C48637) *
              C930 +
          (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
            (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
            (C3683 - C3684) * C2460 + (C3685 - C3686) * C48653) *
               C1066 +
           (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
            (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
               C1067 +
           (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
            (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
               C48637) *
              C931 +
          ((C3681 * C2458 + C3682 * C48686 + (C3684 - C3683) * C2459 +
            (C3686 - C3685) * C48675 + (C48356 * C3671 - C113 * C3668) * C2460 +
            (C48356 * C3677 - C113 * C3672) * C48653) *
               C1066 +
           (C2827 * C2458 + C2828 * C48686 + (C2834 - C2833) * C2459 +
            (C2836 - C2835) * C48675 + (C48356 * C3673 - C113 * C3669) * C2460 +
            (C48356 * C3678 - C113 * C3674) * C48653) *
               C1067 +
           (C2481 * C2458 + C2482 * C48686 + (C2842 - C2841) * C2459 +
            (C2844 - C2843) * C48675 + (C48356 * C3675 - C113 * C3670) * C2460 +
            (C48356 * C3679 - C113 * C3676) * C48653) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C930 +
          (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
             C7773 * C1453 - C48650 * C1457) *
                C114 +
            (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
             C7773 * C1458 - C48650 * C1465) *
                C48373) *
               C48682 +
           ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
               C48669 +
           ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
            (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
               C48637) *
              C931 +
          (((C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
             C48650 * C2328 - C7773 * C2322) *
                C114 +
            (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
             C48650 * C2340 - C7773 * C2330) *
                C48373) *
               C48682 +
           ((C7765 * C940 - C7771 * C934 + C7766 * C2331 - C7772 * C2323 +
             C48650 * C2332 - C7773 * C2324) *
                C114 +
            (C7765 * C949 - C7771 * C941 + C7766 * C2341 - C7772 * C2333 +
             C48650 * C2342 - C7773 * C2334) *
                C48373) *
               C48669 +
           ((C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
             C48650 * C2336 - C7773 * C2326) *
                C114 +
            (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
             C48650 * C2344 - C7773 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C930 +
          ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
            C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
            C9039 * C9212 - C9033 * C9214) *
               C114 +
           (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
            C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
            C9039 * C9215 - C9033 * C9218) *
               C48373) *
              C48261 * C931 +
          ((C9029 * C938 - C9035 * C933 + C9030 * C2327 - C9036 * C2321 +
            C9031 * C2328 - C9037 * C2322 + C9032 * C9682 - C9038 * C9680 +
            C9033 * C9683 - C9039 * C9681) *
               C114 +
           (C9029 * C948 - C9035 * C939 + C9030 * C2339 - C9036 * C2329 +
            C9031 * C2340 - C9037 * C2330 + C9032 * C9686 - C9038 * C9684 +
            C9033 * C9687 - C9039 * C9685) *
               C48373) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
            C48650 * C585 - C7773 * C580) *
               C2458 +
           (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
            C48650 * C595 - C7773 * C586) *
               C48686 +
           (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
           (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
           C10999 * C2460 + C11000 * C48653) *
              C48261 * C930 +
          ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
           (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
           (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
           (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
           (C10985 - C10986 + C10987 - C10988 + C10989 - C10990) * C2460 +
           (C10991 - C10992 + C10993 - C10994 + C10995 - C10996) * C48653) *
              C48261 * C931 +
          (C10999 * C2458 + C11000 * C48686 +
           (C10986 - C10985 + C10988 - C10987 + C10990 - C10989) * C2459 +
           (C10992 - C10991 + C10994 - C10993 + C10996 - C10995) * C48675 +
           (C7765 * C3671 - C7771 * C3668 + C7766 * C10972 - C7772 * C10970 +
            C48650 * C10973 - C7773 * C10971) *
               C2460 +
           (C7765 * C3677 - C7771 * C3672 + C7766 * C10976 - C7772 * C10974 +
            C48650 * C10977 - C7773 * C10975) *
               C48653) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C15017 +
            (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
            (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
               C48682 +
           ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
            C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
               C48669 +
           C15031 * C48637) *
              C930 +
          (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
            (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
            (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
               C48682 +
           (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
            (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
               C48669 +
           (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
            (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
               C48637) *
              C931 +
          ((C3681 * C15017 + C3682 * C15014 + (C3684 - C3683) * C15018 +
            (C3686 - C3685) * C15015 +
            (C48356 * C3671 - C113 * C3668) * C15019 +
            (C48356 * C3677 - C113 * C3672) * C48653) *
               C48682 +
           (C2827 * C15017 + C2828 * C15014 + (C2834 - C2833) * C15018 +
            (C2836 - C2835) * C15015 +
            (C48356 * C3673 - C113 * C3669) * C15019 +
            (C48356 * C3678 - C113 * C3674) * C48653) *
               C48669 +
           (C2481 * C15017 + C2482 * C15014 + (C2842 - C2841) * C15018 +
            (C2844 - C2843) * C15015 +
            (C48356 * C3675 - C113 * C3670) * C15019 +
            (C48356 * C3679 - C113 * C3676) * C48653) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
            C48650 * C585 - C1071 * C580) *
               C15017 +
           (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
            C48650 * C595 - C1071 * C586) *
               C15014 +
           (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
           (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
           C17414 * C15019 + C17415 * C48653) *
              C48261 * C930 +
          ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
           (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
           (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
           (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
           (C17400 - C17401 + C17402 - C17403 + C17404 - C17405) * C15019 +
           (C17406 - C17407 + C17408 - C17409 + C17410 - C17411) * C48653) *
              C48261 * C931 +
          (C17414 * C15017 + C17415 * C15014 +
           (C17401 - C17400 + C17403 - C17402 + C17405 - C17404) * C15018 +
           (C17407 - C17406 + C17409 - C17408 + C17411 - C17410) * C15015 +
           (C48685 * C3671 - C1069 * C3668 + C48673 * C10972 - C1070 * C10970 +
            C48650 * C10973 - C1071 * C10971) *
               C15019 +
           (C48685 * C3677 - C1069 * C3672 + C48673 * C10976 - C1070 * C10974 +
            C48650 * C10977 - C1071 * C10975) *
               C48653) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C48356 * C122 - C113 * C115) * C17482 +
           (C48356 * C136 - C113 * C123) * C17477 + (C2817 - C2818) * C17483 +
           (C2819 - C2820) * C17478 + C3681 * C17484 + C3682 * C17479 +
           C18140 * C17485 + C18141 * C17480 + C18142 * C17486 +
           C18143 * C17481) *
              C48261 * C930 +
          ((C2818 - C2817) * C17482 + (C2820 - C2819) * C17477 +
           (C2822 - C2821) * C17483 + (C2824 - C2823) * C17478 +
           (C3683 - C3684) * C17484 + (C3685 - C3686) * C17479 +
           (C17665 - C17664) * C17485 + (C17667 - C17666) * C17480 +
           (C18144 - C18145) * C17486 + (C18146 - C18147) * C17481) *
              C48261 * C931 +
          (C3681 * C17482 + C3682 * C17477 + C18140 * C17483 + C18141 * C17478 +
           C18142 * C17484 + C18143 * C17479 + (C18145 - C18144) * C17485 +
           (C18147 - C18146) * C17480 +
           (C48356 * C18136 - C113 * C18135) * C17486 +
           (C48356 * C18138 - C113 * C18137) * C17481) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C4966 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48618 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
               C48595 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
            (C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C4967 +
            (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48460) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C4967 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48460) *
               C48595 +
           ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
            (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
            (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
            (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C7819 * C4966 + C7820 * C48618 +
            (C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C4967 +
            (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48460) *
               C48595 +
           ((C7800 - C7799 + C7802 - C7801 + C7804 - C7803) * C4966 +
            (C7806 - C7805 + C7808 - C7807 + C7810 - C7809) * C48618 +
            (C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
             C48650 * C1463 - C7773 * C1456) *
                C4967 +
            (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
             C48650 * C1468 - C7773 * C1464) *
                C48460) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C4966 +
            (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
            (C2819 - C2820) * C48460) *
               C3786 +
           ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
            C2826 * C48460) *
               C3787 +
           C4983 * C3788 + C4984 * C48654) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
            C2830 * C48460) *
               C3786 +
           ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
            C2838 * C48460) *
               C3787 +
           ((C153 - C152) * C4966 + (C155 - C154) * C48618 +
            (C421 - C422) * C4967 + (C423 - C424) * C48460) *
               C3788 +
           ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
            (C425 - C426) * C4967 + (C427 - C428) * C48460) *
               C48654) *
              C48345 * C48328 * C111 +
          (C4983 * C3786 + C4984 * C3787 +
           (C168 * C4966 + C169 * C48618 + (C426 - C425) * C4967 +
            (C428 - C427) * C48460) *
               C3788 +
           ((C161 - C160) * C4966 + (C163 - C162) * C48618 +
            (C48356 * C404 - C113 * C393) * C4967 +
            (C48356 * C411 - C113 * C405) * C48460) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C19901 +
            (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
            (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
            C18140 * C19904 + C18141 * C48666) *
               C48595 +
           ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
            C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
            (C2834 - C2833) * C19904 + (C2836 - C2835) * C48666) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C19901 + (C147 - C146) * C19897 + C2829 * C19902 +
            C2830 * C19898 + C2831 * C19903 + C2832 * C19899 +
            (C2833 - C2834) * C19904 + (C2835 - C2836) * C48666) *
               C48595 +
           ((C149 - C148) * C19901 + (C151 - C150) * C19897 + C2837 * C19902 +
            C2838 * C19898 + C2839 * C19903 + C2840 * C19899 +
            (C2841 - C2842) * C19904 + (C2843 - C2844) * C48666) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C164 * C19901 + C165 * C19897 + C2468 * C19902 + C2469 * C19898 +
            C2481 * C19903 + C2482 * C19899 + (C2842 - C2841) * C19904 +
            (C2844 - C2843) * C48666) *
               C48595 +
           (C166 * C19901 + C167 * C19897 + C4975 * C19902 + C4976 * C19898 +
            (C2475 - C2474) * C19903 + (C2477 - C2476) * C19899 +
            (C48356 * C2810 - C113 * C2803) * C19904 +
            (C48356 * C2815 - C113 * C2811) * C48666) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             (C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C4967 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C4967 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C4966 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48618 +
             (C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4967 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48460) *
                C48595 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C4966 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48618 +
             (C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C4967 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 +
             (C421 - C422) * C4967 + (C423 - C424) * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C260 +
           (((C290 - C289) * C4966 + (C292 - C291) * C48618 +
             (C2640 - C2639) * C4967 + (C2642 - C2641) * C48460) *
                C3786 +
            ((C294 - C293) * C4966 + (C296 - C295) * C48618 +
             (C2648 - C2647) * C4967 + (C2650 - C2649) * C48460) *
                C3787 +
            ((C298 - C297) * C4966 + (C300 - C299) * C48618 +
             (C5116 - C5115) * C4967 + (C5118 - C5117) * C48460) *
                C3788 +
            ((C302 - C301) * C4966 + (C304 - C303) * C48618 +
             (C48356 * C695 - C113 * C686) * C4967 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C19901 +
             (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
             (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
             C18140 * C19904 + C18141 * C48666) *
                C48595 +
            ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
             C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
             (C2834 - C2833) * C19904 + (C2836 - C2835) * C48666) *
                C48271) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C19901 +
             (C113 * C271 - C48356 * C282) * C19897 + (C3259 - C3260) * C19902 +
             (C3261 - C3262) * C19898 + (C3263 - C3264) * C19903 +
             (C3265 - C3266) * C19899 + (C17902 - C17903) * C19904 +
             (C17904 - C17905) * C48666) *
                C48595 +
            ((C289 - C290) * C19901 + (C291 - C292) * C19897 +
             (C2639 - C2640) * C19902 + (C2641 - C2642) * C19898 +
             (C2643 - C2644) * C19903 + (C2645 - C2646) * C19899 +
             (C20036 - C20037) * C19904 + (C20038 - C20039) * C48666) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C19901 + (C147 - C146) * C19897 + C2829 * C19902 +
             C2830 * C19898 + C2831 * C19903 + C2832 * C19899 +
             (C2833 - C2834) * C19904 + (C2835 - C2836) * C48666) *
                C48595 +
            ((C149 - C148) * C19901 + (C151 - C150) * C19897 + C2837 * C19902 +
             C2838 * C19898 + C2839 * C19903 + C2840 * C19899 +
             (C2841 - C2842) * C19904 + (C2843 - C2844) * C48666) *
                C48271) *
               C48345 * C260 +
           (((C290 - C289) * C19901 + (C292 - C291) * C19897 +
             (C2640 - C2639) * C19902 + (C2642 - C2641) * C19898 +
             (C2644 - C2643) * C19903 + (C2646 - C2645) * C19899 +
             (C20037 - C20036) * C19904 + (C20039 - C20038) * C48666) *
                C48595 +
            ((C294 - C293) * C19901 + (C296 - C295) * C19897 +
             (C2648 - C2647) * C19902 + (C2650 - C2649) * C19898 +
             (C2652 - C2651) * C19903 + (C2654 - C2653) * C19899 +
             (C48356 * C3253 - C113 * C3248) * C19904 +
             (C48356 * C3257 - C113 * C3254) * C48666) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C386 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             C12713 * C4967 + C12714 * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C386 +
           ((C12711 * C4966 + C12712 * C48618 +
             (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C4967 +
             (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48460) *
                C48595 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C4966 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48618 +
             (C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
              C48650 * C2336 - C7773 * C2326) *
                 C4967 +
             (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
              C48650 * C2344 - C7773 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C386 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 + C5249 * C4967 +
             C5250 * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C386 +
           ((C2825 * C4966 + C2826 * C48618 + C2827 * C4967 + C2828 * C48460) *
                C3786 +
            (C2468 * C4966 + C2469 * C48618 + C2481 * C4967 + C2482 * C48460) *
                C3787 +
            (C4975 * C4966 + C4976 * C48618 + (C2475 - C2474) * C4967 +
             (C2477 - C2476) * C48460) *
                C3788 +
            ((C426 - C425) * C4966 + (C428 - C427) * C48618 +
             (C48356 * C946 - C113 * C937) * C4967 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C19901 +
             (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
             (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
             C18140 * C19904 + C18141 * C48666) *
                C48595 +
            ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
             C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
             C20170 * C19904 + C20171 * C48666) *
                C48271) *
               C386 +
           (((C2818 - C2817) * C19901 + (C2820 - C2819) * C19897 +
             (C2822 - C2821) * C19902 + (C2824 - C2823) * C19898 +
             (C3683 - C3684) * C19903 + (C3685 - C3686) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48666) *
                C48595 +
            (C2829 * C19901 + C2830 * C19897 + C2831 * C19902 + C2832 * C19898 +
             C20172 * C19903 + C20173 * C19899 + (C17668 - C17669) * C19904 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C19901 + (C147 - C146) * C19897 + C2829 * C19902 +
             C2830 * C19898 + C2831 * C19903 + C2832 * C19899 +
             C20172 * C19904 + C20173 * C48666) *
                C48595 +
            ((C149 - C148) * C19901 + (C151 - C150) * C19897 + C2837 * C19902 +
             C2838 * C19898 + C2839 * C19903 + C2840 * C19899 +
             (C2841 - C2842) * C19904 + (C2843 - C2844) * C48666) *
                C48271) *
               C386 +
           ((C2825 * C19901 + C2826 * C19897 + C2827 * C19902 + C2828 * C19898 +
             C20170 * C19903 + C20171 * C19899 + (C17669 - C17668) * C19904 +
             (C17671 - C17670) * C48666) *
                C48595 +
            (C2468 * C19901 + C2469 * C19897 + C2481 * C19902 + C2482 * C19898 +
             (C2842 - C2841) * C19903 + (C2844 - C2843) * C19899 +
             (C48356 * C3675 - C113 * C3670) * C19904 +
             (C48356 * C3679 - C113 * C3676) * C48666) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C48345 * C510 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             C12713 * C4967 + C12714 * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C48345 * C510 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C4966 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48618 +
             (C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4967 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48460) *
                C48595 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C4966 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48618 +
             (C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C4967 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 + C5249 * C4967 +
             C5250 * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C510 +
           (((C290 - C289) * C4966 + (C292 - C291) * C48618 +
             (C2640 - C2639) * C4967 + (C2642 - C2641) * C48460) *
                C3786 +
            ((C294 - C293) * C4966 + (C296 - C295) * C48618 +
             (C2648 - C2647) * C4967 + (C2650 - C2649) * C48460) *
                C3787 +
            ((C298 - C297) * C4966 + (C300 - C299) * C48618 +
             (C5116 - C5115) * C4967 + (C5118 - C5117) * C48460) *
                C3788 +
            ((C302 - C301) * C4966 + (C304 - C303) * C48618 +
             (C48356 * C695 - C113 * C686) * C4967 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C19901 +
             (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
             (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
             C18140 * C19904 + C18141 * C48666) *
                C48595 +
            ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
             C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
             C20170 * C19904 + C20171 * C48666) *
                C48271) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C19901 +
             (C113 * C271 - C48356 * C282) * C19897 + (C3259 - C3260) * C19902 +
             (C3261 - C3262) * C19898 + (C3263 - C3264) * C19903 +
             (C3265 - C3266) * C19899 + (C17902 - C17903) * C19904 +
             (C17904 - C17905) * C48666) *
                C48595 +
            ((C289 - C290) * C19901 + (C291 - C292) * C19897 +
             (C2639 - C2640) * C19902 + (C2641 - C2642) * C19898 +
             (C2643 - C2644) * C19903 + (C2645 - C2646) * C19899 +
             (C20036 - C20037) * C19904 + (C20038 - C20039) * C48666) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C19901 + (C147 - C146) * C19897 + C2829 * C19902 +
             C2830 * C19898 + C2831 * C19903 + C2832 * C19899 +
             C20172 * C19904 + C20173 * C48666) *
                C48595 +
            ((C149 - C148) * C19901 + (C151 - C150) * C19897 + C2837 * C19902 +
             C2838 * C19898 + C2839 * C19903 + C2840 * C19899 +
             (C2841 - C2842) * C19904 + (C2843 - C2844) * C48666) *
                C48271) *
               C48345 * C510 +
           (((C290 - C289) * C19901 + (C292 - C291) * C19897 +
             (C2640 - C2639) * C19902 + (C2642 - C2641) * C19898 +
             (C2644 - C2643) * C19903 + (C2646 - C2645) * C19899 +
             (C20037 - C20036) * C19904 + (C20039 - C20038) * C48666) *
                C48595 +
            ((C294 - C293) * C19901 + (C296 - C295) * C19897 +
             (C2648 - C2647) * C19902 + (C2650 - C2649) * C19898 +
             (C2652 - C2651) * C19903 + (C2654 - C2653) * C19899 +
             (C48356 * C3253 - C113 * C3248) * C19904 +
             (C48356 * C3257 - C113 * C3254) * C48666) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C4966 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48618 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
               C48595 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
            C12711 * C4967 + C12712 * C48460) *
               C48271) *
              C48345 * C576 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C4966 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48618 +
            (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
            (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
               C48595 +
           ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
            (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
            (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
            (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
               C48271) *
              C48345 * C577 +
          (((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
             C48650 * C1752 - C7773 * C1749) *
                C4966 +
            (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
             C48650 * C1758 - C7773 * C1753) *
                C48618 +
            (C7765 * C1457 - C7771 * C1453 + C7766 * C1910 - C7772 * C1907 +
             C48650 * C9214 - C7773 * C9212) *
                C4967 +
            (C7765 * C1465 - C7771 * C1458 + C7766 * C1916 - C7772 * C1911 +
             C48650 * C9218 - C7773 * C9215) *
                C48460) *
               C48595 +
           ((C7765 * C587 - C7771 * C581 + C7766 * C1273 - C7772 * C1268 +
             C48650 * C1754 - C7773 * C1750) *
                C4966 +
            (C7765 * C596 - C7771 * C588 + C7766 * C1280 - C7772 * C1274 +
             C48650 * C1759 - C7773 * C1755) *
                C48618 +
            (C7765 * C1459 - C7771 * C1454 + C7766 * C1912 - C7772 * C1908 +
             C48650 * C9216 - C7773 * C9213) *
                C4967 +
            (C7765 * C1466 - C7771 * C1460 + C7766 * C1917 - C7772 * C1913 +
             C48650 * C9219 - C7773 * C9217) *
                C48460) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C4966 +
            (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
            (C2819 - C2820) * C48460) *
               C3786 +
           ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
            C2826 * C48460) *
               C3787 +
           C4983 * C3788 + C4984 * C48654) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C4966 +
            (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
            (C3261 - C3262) * C48460) *
               C3786 +
           ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
            (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
               C3787 +
           ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
            (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
               C3788 +
           ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
            (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
               C48654) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C4966 +
            (C48356 * C595 - C113 * C586) * C48618 +
            (C48356 * C1457 - C113 * C1453) * C4967 +
            (C48356 * C1465 - C113 * C1458) * C48460) *
               C3786 +
           ((C48356 * C587 - C113 * C581) * C4966 +
            (C48356 * C596 - C113 * C588) * C48618 +
            (C48356 * C1459 - C113 * C1454) * C4967 +
            (C48356 * C1466 - C113 * C1460) * C48460) *
               C3787 +
           ((C48356 * C589 - C113 * C582) * C4966 +
            (C48356 * C597 - C113 * C590) * C48618 +
            (C48356 * C1461 - C113 * C1455) * C4967 +
            (C48356 * C1467 - C113 * C1462) * C48460) *
               C3788 +
           ((C48356 * C591 - C113 * C583) * C4966 +
            (C48356 * C598 - C113 * C592) * C48618 +
            (C48356 * C1463 - C113 * C1456) * C4967 +
            (C48356 * C1468 - C113 * C1464) * C48460) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C19901 +
            (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
            (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
            C18140 * C19904 + C18141 * C48666) *
               C48595 +
           ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
            C2826 * C19898 + C2827 * C19903 + C2828 * C19899 + C20170 * C19904 +
            C20171 * C48666) *
               C48271) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C19901 +
            (C113 * C271 - C48356 * C282) * C19897 + (C3259 - C3260) * C19902 +
            (C3261 - C3262) * C19898 + (C3263 - C3264) * C19903 +
            (C3265 - C3266) * C19899 + (C17902 - C17903) * C19904 +
            (C17904 - C17905) * C48666) *
               C48595 +
           ((C289 - C290) * C19901 + (C291 - C292) * C19897 +
            (C2639 - C2640) * C19902 + (C2641 - C2642) * C19898 +
            (C2643 - C2644) * C19903 + (C2645 - C2646) * C19899 +
            (C20036 - C20037) * C19904 + (C20038 - C20039) * C48666) *
               C48271) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C19901 +
            (C48356 * C595 - C113 * C586) * C19897 +
            (C48356 * C1457 - C113 * C1453) * C19902 +
            (C48356 * C1465 - C113 * C1458) * C19898 +
            (C48356 * C2328 - C113 * C2322) * C19903 +
            (C48356 * C2340 - C113 * C2330) * C19899 +
            (C48356 * C10096 - C113 * C10094) * C19904 +
            (C48356 * C10100 - C113 * C10097) * C48666) *
               C48595 +
           ((C48356 * C587 - C113 * C581) * C19901 +
            (C48356 * C596 - C113 * C588) * C19897 +
            (C48356 * C1459 - C113 * C1454) * C19902 +
            (C48356 * C1466 - C113 * C1460) * C19898 +
            (C48356 * C2332 - C113 * C2324) * C19903 +
            (C48356 * C2342 - C113 * C2334) * C19899 +
            (C48356 * C10098 - C113 * C10095) * C19904 +
            (C48356 * C10101 - C113 * C10099) * C48666) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C386 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C510 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C386 +
           (((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C4966 +
             (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48618 +
             (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C4967 +
             (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48460) *
                C48595 +
            ((C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4966 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48618 +
             (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
              C48650 * C9945 - C7773 * C9944) *
                 C4967 +
             (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
              C48650 * C9947 - C7773 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C386 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C386 +
           (((C3260 - C3259) * C4966 + (C3262 - C3261) * C48618 +
             (C3264 - C3263) * C4967 + (C3266 - C3265) * C48460) *
                C3786 +
            ((C2640 - C2639) * C4966 + (C2642 - C2641) * C48618 +
             (C2644 - C2643) * C4967 + (C2646 - C2645) * C48460) *
                C3787 +
            ((C2648 - C2647) * C4966 + (C2650 - C2649) * C48618 +
             (C2652 - C2651) * C4967 + (C2654 - C2653) * C48460) *
                C3788 +
            ((C5116 - C5115) * C4966 + (C5118 - C5117) * C48618 +
             (C48356 * C2635 - C113 * C2634) * C4967 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C19901 +
             (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
             (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
             C18140 * C19904 + C18141 * C48666) *
                C48595 +
            ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
             C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
             C20170 * C19904 + C20171 * C48666) *
                C48271) *
               C386 +
           (((C2818 - C2817) * C19901 + (C2820 - C2819) * C19897 +
             (C2822 - C2821) * C19902 + (C2824 - C2823) * C19898 +
             (C3683 - C3684) * C19903 + (C3685 - C3686) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48666) *
                C48595 +
            (C2829 * C19901 + C2830 * C19897 + C2831 * C19902 + C2832 * C19898 +
             C20172 * C19903 + C20173 * C19899 + (C17668 - C17669) * C19904 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C19901 +
             (C113 * C271 - C48356 * C282) * C19897 + (C3259 - C3260) * C19902 +
             (C3261 - C3262) * C19898 + (C3263 - C3264) * C19903 +
             (C3265 - C3266) * C19899 + (C17902 - C17903) * C19904 +
             (C17904 - C17905) * C48666) *
                C48595 +
            ((C289 - C290) * C19901 + (C291 - C292) * C19897 +
             (C2639 - C2640) * C19902 + (C2641 - C2642) * C19898 +
             (C2643 - C2644) * C19903 + (C2645 - C2646) * C19899 +
             (C20036 - C20037) * C19904 + (C20038 - C20039) * C48666) *
                C48271) *
               C386 +
           (((C3260 - C3259) * C19901 + (C3262 - C3261) * C19897 +
             (C3264 - C3263) * C19902 + (C3266 - C3265) * C19898 +
             (C17903 - C17902) * C19903 + (C17905 - C17904) * C19899 +
             (C17907 - C17906) * C19904 + (C17909 - C17908) * C48666) *
                C48595 +
            ((C2640 - C2639) * C19901 + (C2642 - C2641) * C19897 +
             (C2644 - C2643) * C19902 + (C2646 - C2645) * C19898 +
             (C20037 - C20036) * C19903 + (C20039 - C20038) * C19899 +
             (C48356 * C17570 - C113 * C17569) * C19904 +
             (C48356 * C17572 - C113 * C17571) * C48666) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C784 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             C12713 * C4967 + C12714 * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C784 +
           ((C12711 * C4966 + C12712 * C48618 +
             (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C4967 +
             (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48460) *
                C48595 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C4966 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48618 +
             (C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
              C48650 * C2336 - C7773 * C2326) *
                 C4967 +
             (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
              C48650 * C2344 - C7773 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C784 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 + C5249 * C4967 +
             C5250 * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C784 +
           ((C2825 * C4966 + C2826 * C48618 + C2827 * C4967 + C2828 * C48460) *
                C3786 +
            (C2468 * C4966 + C2469 * C48618 + C2481 * C4967 + C2482 * C48460) *
                C3787 +
            (C4975 * C4966 + C4976 * C48618 + (C2475 - C2474) * C4967 +
             (C2477 - C2476) * C48460) *
                C3788 +
            ((C426 - C425) * C4966 + (C428 - C427) * C48618 +
             (C48356 * C946 - C113 * C937) * C4967 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C19901 +
             (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
             (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
             C18140 * C19904 + C18141 * C48666) *
                C48595 +
            ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
             C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
             C20170 * C19904 + C20171 * C48666) *
                C48271) *
               C784 +
           (((C2818 - C2817) * C19901 + (C2820 - C2819) * C19897 +
             (C2822 - C2821) * C19902 + (C2824 - C2823) * C19898 +
             (C3683 - C3684) * C19903 + (C3685 - C3686) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48666) *
                C48595 +
            (C2829 * C19901 + C2830 * C19897 + C2831 * C19902 + C2832 * C19898 +
             C20172 * C19903 + C20173 * C19899 + (C17668 - C17669) * C19904 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C19901 + (C147 - C146) * C19897 + C2829 * C19902 +
             C2830 * C19898 + C2831 * C19903 + C2832 * C19899 +
             C20172 * C19904 + C20173 * C48666) *
                C48595 +
            ((C149 - C148) * C19901 + (C151 - C150) * C19897 + C2837 * C19902 +
             C2838 * C19898 + C2839 * C19903 + C2840 * C19899 +
             (C2841 - C2842) * C19904 + (C2843 - C2844) * C48666) *
                C48271) *
               C784 +
           ((C2825 * C19901 + C2826 * C19897 + C2827 * C19902 + C2828 * C19898 +
             C20170 * C19903 + C20171 * C19899 + (C17669 - C17668) * C19904 +
             (C17671 - C17670) * C48666) *
                C48595 +
            (C2468 * C19901 + C2469 * C19897 + C2481 * C19902 + C2482 * C19898 +
             (C2842 - C2841) * C19903 + (C2844 - C2843) * C19899 +
             (C48356 * C3675 - C113 * C3670) * C19904 +
             (C48356 * C3679 - C113 * C3676) * C48666) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C784 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C260 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C784 +
           (((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C4966 +
             (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48618 +
             (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C4967 +
             (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48460) *
                C48595 +
            ((C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4966 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48618 +
             (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
              C48650 * C9945 - C7773 * C9944) *
                 C4967 +
             (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
              C48650 * C9947 - C7773 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C784 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C784 +
           (((C3260 - C3259) * C4966 + (C3262 - C3261) * C48618 +
             (C3264 - C3263) * C4967 + (C3266 - C3265) * C48460) *
                C3786 +
            ((C2640 - C2639) * C4966 + (C2642 - C2641) * C48618 +
             (C2644 - C2643) * C4967 + (C2646 - C2645) * C48460) *
                C3787 +
            ((C2648 - C2647) * C4966 + (C2650 - C2649) * C48618 +
             (C2652 - C2651) * C4967 + (C2654 - C2653) * C48460) *
                C3788 +
            ((C5116 - C5115) * C4966 + (C5118 - C5117) * C48618 +
             (C48356 * C2635 - C113 * C2634) * C4967 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C19901 +
             (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
             (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
             C18140 * C19904 + C18141 * C48666) *
                C48595 +
            ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
             C2826 * C19898 + C2827 * C19903 + C2828 * C19899 +
             C20170 * C19904 + C20171 * C48666) *
                C48271) *
               C784 +
           (((C2818 - C2817) * C19901 + (C2820 - C2819) * C19897 +
             (C2822 - C2821) * C19902 + (C2824 - C2823) * C19898 +
             (C3683 - C3684) * C19903 + (C3685 - C3686) * C19899 +
             (C17665 - C17664) * C19904 + (C17667 - C17666) * C48666) *
                C48595 +
            (C2829 * C19901 + C2830 * C19897 + C2831 * C19902 + C2832 * C19898 +
             C20172 * C19903 + C20173 * C19899 + (C17668 - C17669) * C19904 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C19901 +
             (C113 * C271 - C48356 * C282) * C19897 + (C3259 - C3260) * C19902 +
             (C3261 - C3262) * C19898 + (C3263 - C3264) * C19903 +
             (C3265 - C3266) * C19899 + (C17902 - C17903) * C19904 +
             (C17904 - C17905) * C48666) *
                C48595 +
            ((C289 - C290) * C19901 + (C291 - C292) * C19897 +
             (C2639 - C2640) * C19902 + (C2641 - C2642) * C19898 +
             (C2643 - C2644) * C19903 + (C2645 - C2646) * C19899 +
             (C20036 - C20037) * C19904 + (C20038 - C20039) * C48666) *
                C48271) *
               C784 +
           (((C3260 - C3259) * C19901 + (C3262 - C3261) * C19897 +
             (C3264 - C3263) * C19902 + (C3266 - C3265) * C19898 +
             (C17903 - C17902) * C19903 + (C17905 - C17904) * C19899 +
             (C17907 - C17906) * C19904 + (C17909 - C17908) * C48666) *
                C48595 +
            ((C2640 - C2639) * C19901 + (C2642 - C2641) * C19897 +
             (C2644 - C2643) * C19902 + (C2646 - C2645) * C19898 +
             (C20037 - C20036) * C19903 + (C20039 - C20038) * C19899 +
             (C48356 * C17570 - C113 * C17569) * C19904 +
             (C48356 * C17572 - C113 * C17571) * C48666) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C4966 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48618 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
               C48595 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
            C12711 * C4967 + C12712 * C48460) *
               C48271) *
              C930 +
          (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
               C48595 +
           (C12713 * C4966 + C12714 * C48618 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
               C48271) *
              C931 +
          ((C10999 * C4966 + C11000 * C48618 +
            (C10986 - C10985 + C10988 - C10987 + C10990 - C10989) * C4967 +
            (C10992 - C10991 + C10994 - C10993 + C10996 - C10995) * C48460) *
               C48595 +
           ((C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C4966 +
            (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48618 +
            (C7765 * C2806 - C7771 * C2801 + C7766 * C3251 - C7772 * C3247 +
             C48650 * C10098 - C7773 * C10095) *
                C4967 +
            (C7765 * C2813 - C7771 * C2807 + C7766 * C3256 - C7772 * C3252 +
             C48650 * C10101 - C7773 * C10099) *
                C48460) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C4966 +
            (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
            (C2819 - C2820) * C48460) *
               C3786 +
           ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
            C2826 * C48460) *
               C3787 +
           C4983 * C3788 + C4984 * C48654) *
              C930 +
          (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
            (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
               C3786 +
           (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
               C3787 +
           (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
               C3788 +
           (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
            (C2476 - C2477) * C48460) *
               C48654) *
              C931 +
          ((C3681 * C4966 + C3682 * C48618 + (C3684 - C3683) * C4967 +
            (C3686 - C3685) * C48460) *
               C3786 +
           (C2827 * C4966 + C2828 * C48618 + (C2834 - C2833) * C4967 +
            (C2836 - C2835) * C48460) *
               C3787 +
           (C2481 * C4966 + C2482 * C48618 + (C2842 - C2841) * C4967 +
            (C2844 - C2843) * C48460) *
               C3788 +
           ((C2475 - C2474) * C4966 + (C2477 - C2476) * C48618 +
            (C48356 * C2810 - C113 * C2803) * C4967 +
            (C48356 * C2815 - C113 * C2811) * C48460) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C19901 +
            (C48356 * C136 - C113 * C123) * C19897 + (C2817 - C2818) * C19902 +
            (C2819 - C2820) * C19898 + C3681 * C19903 + C3682 * C19899 +
            C18140 * C19904 + C18141 * C48666) *
               C48595 +
           ((C144 - C145) * C19901 + (C146 - C147) * C19897 + C2825 * C19902 +
            C2826 * C19898 + C2827 * C19903 + C2828 * C19899 + C20170 * C19904 +
            C20171 * C48666) *
               C48271) *
              C930 +
          (((C2818 - C2817) * C19901 + (C2820 - C2819) * C19897 +
            (C2822 - C2821) * C19902 + (C2824 - C2823) * C19898 +
            (C3683 - C3684) * C19903 + (C3685 - C3686) * C19899 +
            (C17665 - C17664) * C19904 + (C17667 - C17666) * C48666) *
               C48595 +
           (C2829 * C19901 + C2830 * C19897 + C2831 * C19902 + C2832 * C19898 +
            C20172 * C19903 + C20173 * C19899 + (C17668 - C17669) * C19904 +
            (C17670 - C17671) * C48666) *
               C48271) *
              C931 +
          ((C3681 * C19901 + C3682 * C19897 + C18140 * C19902 +
            C18141 * C19898 + C18142 * C19903 + C18143 * C19899 +
            (C18145 - C18144) * C19904 + (C18147 - C18146) * C48666) *
               C48595 +
           (C2827 * C19901 + C2828 * C19897 + C20170 * C19902 +
            C20171 * C19898 + (C17669 - C17668) * C19903 +
            (C17671 - C17670) * C19899 +
            (C48356 * C17659 - C113 * C17656) * C19904 +
            (C48356 * C17662 - C113 * C17660) * C48666) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C48345 * C48328 * C110 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
               C1066 +
           ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
            (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
               C1067 +
           ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
            (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
               C48637) *
              C48345 * C48328 * C111 +
          (C1121 * C1066 +
           ((C1098 - C1097 + C1100 - C1099 + C1102 - C1101) * C114 +
            (C1104 - C1103 + C1106 - C1105 + C1108 - C1107) * C48373) *
               C1067 +
           ((C48685 * C130 - C1069 * C119 + C48673 * C278 - C1070 * C268 +
             C48650 * C593 - C1071 * C584) *
                C114 +
            (C48685 * C140 - C1069 * C131 + C48673 * C286 - C1070 * C279 +
             C48650 * C599 - C1071 * C594) *
                C48373) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
              C48345 * C48328 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C48373) * C106 +
           ((C48356 * C134 - C113 * C121) * C114 +
            (C48356 * C142 - C113 * C135) * C48373) *
               C107) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C48328 * C110 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
               C48682 +
           ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
            (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
               C48669 +
           ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
            (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
               C48637) *
              C48345 * C48328 * C111 +
          (C7823 * C48682 +
           ((C7800 - C7799 + C7802 - C7801 + C7804 - C7803) * C114 +
            (C7806 - C7805 + C7808 - C7807 + C7810 - C7809) * C48373) *
               C48669 +
           ((C7765 * C130 - C7771 * C119 + C7766 * C278 - C7772 * C268 +
             C48650 * C593 - C7773 * C584) *
                C114 +
            (C7765 * C140 - C7771 * C131 + C7766 * C286 - C7772 * C279 +
             C48650 * C599 - C7773 * C594) *
                C48373) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C48328 * C110 +
          ((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
            C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
            C9039 * C1750 - C9033 * C1754) *
               C114 +
           (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
            C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
            C9039 * C1755 - C9033 * C1759) *
               C48373) *
              C48261 * C48345 * C48328 * C111 +
          ((C9029 * C126 - C9035 * C117 + C9030 * C274 - C9036 * C266 +
            C9031 * C589 - C9037 * C582 + C9032 * C1275 - C9038 * C1269 +
            C9033 * C1756 - C9039 * C1751) *
               C114 +
           (C9029 * C138 - C9035 * C127 + C9030 * C284 - C9036 * C275 +
            C9031 * C597 - C9037 * C590 + C9032 * C1281 - C9038 * C1276 +
            C9033 * C1760 - C9039 * C1757) *
               C48373) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C15017 +
            (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
            (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
               C48682 +
           ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
            C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
               C48669 +
           C15031 * C48637) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
            C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
               C48682 +
           ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
            C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
               C48669 +
           ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
            C5250 * C15015 + (C2474 - C2475) * C15019 +
            (C2476 - C2477) * C48653) *
               C48637) *
              C48345 * C48328 * C111 +
          (C15031 * C48682 +
           (C166 * C15017 + C167 * C15014 + C4975 * C15018 + C4976 * C15015 +
            (C2475 - C2474) * C15019 + (C2477 - C2476) * C48653) *
               C48669 +
           (C168 * C15017 + C169 * C15014 + (C426 - C425) * C15018 +
            (C428 - C427) * C15015 + (C48356 * C946 - C113 * C937) * C15019 +
            (C48356 * C952 - C113 * C947) * C48653) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
            C48650 * C585 - C1071 * C580) *
               C15017 +
           (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
            C48650 * C595 - C1071 * C586) *
               C15014 +
           (C48685 * C394 - C1069 * C388 + C48673 * C687 - C1070 * C682 +
            C48650 * C1457 - C1071 * C1453) *
               C15018 +
           (C48685 * C406 - C1069 * C395 + C48673 * C697 - C1070 * C688 +
            C48650 * C1465 - C1071 * C1458) *
               C15015 +
           (C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
            C48650 * C2328 - C1071 * C2322) *
               C15019 +
           (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
            C48650 * C2340 - C1071 * C2330) *
               C48653) *
              C48261 * C48345 * C48328 * C110 +
          ((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
           (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
           (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
           (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
           (C1069 * C934 - C48685 * C940 + C1070 * C2323 - C48673 * C2331 +
            C1071 * C2324 - C48650 * C2332) *
               C15019 +
           (C1069 * C941 - C48685 * C949 + C1070 * C2333 - C48673 * C2341 +
            C1071 * C2334 - C48650 * C2342) *
               C48653) *
              C48261 * C48345 * C48328 * C111 +
          (C1117 * C15017 + C1118 * C15014 +
           (C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C15018 +
           (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C15015 +
           (C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
            C48650 * C2336 - C1071 * C2326) *
               C15019 +
           (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
            C48650 * C2344 - C1071 * C2338) *
               C48653) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C48345 * C260 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                C1066 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                C1067 +
            ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
              C48650 * C1277 - C1071 * C1270) *
                 C114 +
             (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
              C48650 * C1282 - C1071 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C48345 * C260 +
           (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
            ((C48356 * C280 - C113 * C269) * C114 +
             (C48356 * C287 - C113 * C281) * C48373) *
                C107) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C260 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C260 +
           (((C290 - C289) * C15017 + (C292 - C291) * C15014 +
             (C2640 - C2639) * C15018 + (C2642 - C2641) * C15015 +
             (C2644 - C2643) * C15019 + (C2646 - C2645) * C48653) *
                C48682 +
            ((C294 - C293) * C15017 + (C296 - C295) * C15014 +
             (C2648 - C2647) * C15018 + (C2650 - C2649) * C15015 +
             (C2652 - C2651) * C15019 + (C2654 - C2653) * C48653) *
                C48669 +
            ((C298 - C297) * C15017 + (C300 - C299) * C15014 +
             (C5116 - C5115) * C15018 + (C5118 - C5117) * C15015 +
             (C48356 * C2635 - C113 * C2634) * C15019 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C48685 * C394 - C1069 * C388 + C48673 * C687 - C1070 * C682 +
             C48650 * C1457 - C1071 * C1453) *
                C15018 +
            (C48685 * C406 - C1069 * C395 + C48673 * C697 - C1070 * C688 +
             C48650 * C1465 - C1071 * C1458) *
                C15015 +
            (C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
             C48650 * C2328 - C1071 * C2322) *
                C15019 +
            (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
             C48650 * C2340 - C1071 * C2330) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C1069 * C682 - C48685 * C687 + C1070 * C1453 - C48673 * C1457 +
             C1071 * C1907 - C48650 * C1910) *
                C15018 +
            (C1069 * C688 - C48685 * C697 + C1070 * C1458 - C48673 * C1465 +
             C1071 * C1911 - C48650 * C1916) *
                C15015 +
            (C1069 * C2321 - C48685 * C2327 + C1070 * C2322 - C48673 * C2328 +
             C1071 * C9680 - C48650 * C9682) *
                C15019 +
            (C1069 * C2329 - C48685 * C2339 + C1070 * C2330 - C48673 * C2340 +
             C1071 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C1069 * C934 - C48685 * C940 + C1070 * C2323 - C48673 * C2331 +
             C1071 * C2324 - C48650 * C2332) *
                C15019 +
            (C1069 * C941 - C48685 * C949 + C1070 * C2333 - C48673 * C2341 +
             C1071 * C2334 - C48650 * C2342) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C15017 +
            (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C15014 +
            (C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
             C48650 * C1912 - C1071 * C1908) *
                C15018 +
            (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
             C48650 * C1917 - C1071 * C1913) *
                C15015 +
            (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
             C48650 * C9945 - C1071 * C9944) *
                C15019 +
            (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
             C48650 * C9947 - C1071 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C386 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C386 +
           (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                C1066 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                C1067 +
            ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
              C48650 * C1463 - C1071 * C1456) *
                 C114 +
             (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
              C48650 * C1468 - C1071 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C386 +
           (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
            ((C48356 * C404 - C113 * C393) * C114 +
             (C48356 * C411 - C113 * C405) * C48373) *
                C107) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C386 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C386 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C386 +
           ((C2825 * C15017 + C2826 * C15014 + C2827 * C15018 + C2828 * C15015 +
             (C2834 - C2833) * C15019 + (C2836 - C2835) * C48653) *
                C48682 +
            (C2468 * C15017 + C2469 * C15014 + C2481 * C15018 + C2482 * C15015 +
             (C2842 - C2841) * C15019 + (C2844 - C2843) * C48653) *
                C48669 +
            (C4975 * C15017 + C4976 * C15014 + (C2475 - C2474) * C15018 +
             (C2477 - C2476) * C15015 +
             (C48356 * C2810 - C113 * C2803) * C15019 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C386 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C15019 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48653) *
               C48261 * C386 +
           ((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C15017 +
            (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C15014 +
            (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C15018 +
            (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C15015 +
            (C48685 * C2806 - C1069 * C2801 + C48673 * C3251 - C1070 * C3247 +
             C48650 * C10098 - C1071 * C10095) *
                C15019 +
            (C48685 * C2813 - C1069 * C2807 + C48673 * C3256 - C1070 * C3252 +
             C48650 * C10101 - C1071 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C48345 * C510 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                C1066 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                C1067 +
            ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
              C48650 * C1277 - C1071 * C1270) *
                 C114 +
             (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
              C48650 * C1282 - C1071 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C48345 * C510 +
           (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
            ((C48356 * C280 - C113 * C269) * C114 +
             (C48356 * C287 - C113 * C281) * C48373) *
                C107) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C510 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C510 +
           (((C290 - C289) * C15017 + (C292 - C291) * C15014 +
             (C2640 - C2639) * C15018 + (C2642 - C2641) * C15015 +
             (C2644 - C2643) * C15019 + (C2646 - C2645) * C48653) *
                C48682 +
            ((C294 - C293) * C15017 + (C296 - C295) * C15014 +
             (C2648 - C2647) * C15018 + (C2650 - C2649) * C15015 +
             (C2652 - C2651) * C15019 + (C2654 - C2653) * C48653) *
                C48669 +
            ((C298 - C297) * C15017 + (C300 - C299) * C15014 +
             (C5116 - C5115) * C15018 + (C5118 - C5117) * C15015 +
             (C48356 * C2635 - C113 * C2634) * C15019 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C48345 * C510 +
           ((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C1069 * C682 - C48685 * C687 + C1070 * C1453 - C48673 * C1457 +
             C1071 * C1907 - C48650 * C1910) *
                C15018 +
            (C1069 * C688 - C48685 * C697 + C1070 * C1458 - C48673 * C1465 +
             C1071 * C1911 - C48650 * C1916) *
                C15015 +
            (C1069 * C2321 - C48685 * C2327 + C1070 * C2322 - C48673 * C2328 +
             C1071 * C9680 - C48650 * C9682) *
                C15019 +
            (C1069 * C2329 - C48685 * C2339 + C1070 * C2330 - C48673 * C2340 +
             C1071 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C15019 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48653) *
               C48261 * C48345 * C510 +
           ((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C15017 +
            (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C15014 +
            (C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
             C48650 * C1912 - C1071 * C1908) *
                C15018 +
            (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
             C48650 * C1917 - C1071 * C1913) *
                C15015 +
            (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
             C48650 * C9945 - C1071 * C9944) *
                C15019 +
            (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
             C48650 * C9947 - C1071 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C48345 * C576 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C114 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C48373) *
               C1066 +
           ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
            (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
               C1067 +
           ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
            (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
             C48650 * C1752 - C1071 * C1749) *
                C114 +
            (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
             C48650 * C1758 - C1071 * C1753) *
                C48373) *
               C1066 +
           ((C48685 * C587 - C1069 * C581 + C48673 * C1273 - C1070 * C1268 +
             C48650 * C1754 - C1071 * C1750) *
                C114 +
            (C48685 * C596 - C1069 * C588 + C48673 * C1280 - C1070 * C1274 +
             C48650 * C1759 - C1071 * C1755) *
                C48373) *
               C1067 +
           ((C48685 * C589 - C1069 * C582 + C48673 * C1275 - C1070 * C1269 +
             C48650 * C1756 - C1071 * C1751) *
                C114 +
            (C48685 * C597 - C1069 * C590 + C48673 * C1281 - C1070 * C1276 +
             C48650 * C1760 - C1071 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C114 +
            (C113 * C271 - C48356 * C282) * C48373) *
               C103 +
           ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
           ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
           ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
           ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C114 +
            (C48356 * C595 - C113 * C586) * C48373) *
               C103 +
           ((C48356 * C587 - C113 * C581) * C114 +
            (C48356 * C596 - C113 * C588) * C48373) *
               C104 +
           ((C48356 * C589 - C113 * C582) * C114 +
            (C48356 * C597 - C113 * C590) * C48373) *
               C105 +
           ((C48356 * C591 - C113 * C583) * C114 +
            (C48356 * C598 - C113 * C592) * C48373) *
               C106 +
           ((C48356 * C593 - C113 * C584) * C114 +
            (C48356 * C599 - C113 * C594) * C48373) *
               C107) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C576 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C114 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48373) *
               C48682 +
           ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
            (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
               C48669 +
           ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
            (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
             C48650 * C1752 - C7773 * C1749) *
                C114 +
            (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
             C48650 * C1758 - C7773 * C1753) *
                C48373) *
               C48682 +
           ((C7765 * C587 - C7771 * C581 + C7766 * C1273 - C7772 * C1268 +
             C48650 * C1754 - C7773 * C1750) *
                C114 +
            (C7765 * C596 - C7771 * C588 + C7766 * C1280 - C7772 * C1274 +
             C48650 * C1759 - C7773 * C1755) *
                C48373) *
               C48669 +
           ((C7765 * C589 - C7771 * C582 + C7766 * C1275 - C7772 * C1269 +
             C48650 * C1756 - C7773 * C1751) *
                C114 +
            (C7765 * C597 - C7771 * C590 + C7766 * C1281 - C7772 * C1276 +
             C48650 * C1760 - C7773 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C576 +
          ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
            C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
            C9039 * C9122 - C9033 * C9124) *
               C114 +
           (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
            C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
            C9039 * C9125 - C9033 * C9128) *
               C48373) *
              C48261 * C48345 * C577 +
          ((C9029 * C585 - C9035 * C580 + C9030 * C1271 - C9036 * C1267 +
            C9031 * C1752 - C9037 * C1749 + C9032 * C9124 - C9038 * C9122 +
            C9033 * C9365 - C9039 * C9364) *
               C114 +
           (C9029 * C595 - C9035 * C586 + C9030 * C1279 - C9036 * C1272 +
            C9031 * C1758 - C9037 * C1753 + C9032 * C9128 - C9038 * C9125 +
            C9033 * C9367 - C9039 * C9366) *
               C48373) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C15017 +
            (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
            (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
               C48682 +
           ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
            C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
               C48669 +
           C15031 * C48637) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C15017 +
            (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
            (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
            (C3265 - C3266) * C48653) *
               C48682 +
           ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
            (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
            (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
               C48669 +
           ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
            (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
            (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
               C48637) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C15017 +
            (C48356 * C595 - C113 * C586) * C15014 +
            (C48356 * C1457 - C113 * C1453) * C15018 +
            (C48356 * C1465 - C113 * C1458) * C15015 +
            (C48356 * C2328 - C113 * C2322) * C15019 +
            (C48356 * C2340 - C113 * C2330) * C48653) *
               C48682 +
           ((C48356 * C587 - C113 * C581) * C15017 +
            (C48356 * C596 - C113 * C588) * C15014 +
            (C48356 * C1459 - C113 * C1454) * C15018 +
            (C48356 * C1466 - C113 * C1460) * C15015 +
            (C48356 * C2332 - C113 * C2324) * C15019 +
            (C48356 * C2342 - C113 * C2334) * C48653) *
               C48669 +
           ((C48356 * C589 - C113 * C582) * C15017 +
            (C48356 * C597 - C113 * C590) * C15014 +
            (C48356 * C1461 - C113 * C1455) * C15018 +
            (C48356 * C1467 - C113 * C1462) * C15015 +
            (C48356 * C2336 - C113 * C2326) * C15019 +
            (C48356 * C2344 - C113 * C2338) * C48653) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
            C48650 * C585 - C1071 * C580) *
               C15017 +
           (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
            C48650 * C595 - C1071 * C586) *
               C15014 +
           (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
           (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
           (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
           (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
              C48261 * C48345 * C576 +
          ((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
            C1071 * C1267 - C48650 * C1271) *
               C15017 +
           (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
            C1071 * C1272 - C48650 * C1279) *
               C15014 +
           (C1069 * C682 - C48685 * C687 + C1070 * C1453 - C48673 * C1457 +
            C1071 * C1907 - C48650 * C1910) *
               C15018 +
           (C1069 * C688 - C48685 * C697 + C1070 * C1458 - C48673 * C1465 +
            C1071 * C1911 - C48650 * C1916) *
               C15015 +
           (C1069 * C2321 - C48685 * C2327 + C1070 * C2322 - C48673 * C2328 +
            C1071 * C9680 - C48650 * C9682) *
               C15019 +
           (C1069 * C2329 - C48685 * C2339 + C1070 * C2330 - C48673 * C2340 +
            C1071 * C9684 - C48650 * C9686) *
               C48653) *
              C48261 * C48345 * C577 +
          ((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
            C48650 * C1752 - C1071 * C1749) *
               C15017 +
           (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
            C48650 * C1758 - C1071 * C1753) *
               C15014 +
           (C48685 * C1457 - C1069 * C1453 + C48673 * C1910 - C1070 * C1907 +
            C48650 * C9214 - C1071 * C9212) *
               C15018 +
           (C48685 * C1465 - C1069 * C1458 + C48673 * C1916 - C1070 * C1911 +
            C48650 * C9218 - C1071 * C9215) *
               C15015 +
           (C48685 * C2328 - C1069 * C2322 + C48673 * C9682 - C1070 * C9680 +
            C48650 * C9683 - C1071 * C9681) *
               C15019 +
           (C48685 * C2340 - C1069 * C2330 + C48673 * C9686 - C1070 * C9684 +
            C48650 * C9687 - C1071 * C9685) *
               C48653) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C386 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C386 +
           (((C48685 * C687 - C1069 * C682 + C48673 * C1457 - C1070 * C1453 +
              C48650 * C1910 - C1071 * C1907) *
                 C114 +
             (C48685 * C697 - C1069 * C688 + C48673 * C1465 - C1070 * C1458 +
              C48650 * C1916 - C1071 * C1911) *
                 C48373) *
                C1066 +
            ((C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
              C48650 * C1912 - C1071 * C1908) *
                 C114 +
             (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
              C48650 * C1917 - C1071 * C1913) *
                 C48373) *
                C1067 +
            ((C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C114 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C386 +
           (((C48356 * C687 - C113 * C682) * C114 +
             (C48356 * C697 - C113 * C688) * C48373) *
                C103 +
            ((C48356 * C689 - C113 * C683) * C114 +
             (C48356 * C698 - C113 * C690) * C48373) *
                C104 +
            ((C48356 * C691 - C113 * C684) * C114 +
             (C48356 * C699 - C113 * C692) * C48373) *
                C105 +
            ((C48356 * C693 - C113 * C685) * C114 +
             (C48356 * C700 - C113 * C694) * C48373) *
                C106 +
            ((C48356 * C695 - C113 * C686) * C114 +
             (C48356 * C701 - C113 * C696) * C48373) *
                C107) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C386 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C510 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C386 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C386 +
           (((C3260 - C3259) * C15017 + (C3262 - C3261) * C15014 +
             (C3264 - C3263) * C15018 + (C3266 - C3265) * C15015 +
             (C48356 * C3249 - C113 * C3246) * C15019 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C48682 +
            ((C2640 - C2639) * C15017 + (C2642 - C2641) * C15014 +
             (C2644 - C2643) * C15018 + (C2646 - C2645) * C15015 +
             (C48356 * C3251 - C113 * C3247) * C15019 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C48669 +
            ((C2648 - C2647) * C15017 + (C2650 - C2649) * C15014 +
             (C2652 - C2651) * C15018 + (C2654 - C2653) * C15015 +
             (C48356 * C3253 - C113 * C3248) * C15019 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C386 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C510 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C15018 +
            (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C15015 +
            (C16980 - C16981 + C16982 - C16983 + C16984 - C16985) * C15019 +
            (C16986 - C16987 + C16988 - C16989 + C16990 - C16991) * C48653) *
               C48261 * C386 +
           ((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C15017 +
            (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C15014 +
            (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C15018 +
            (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C15015 +
            (C48685 * C3249 - C1069 * C3246 + C48673 * C10096 - C1070 * C10094 +
             C48650 * C10541 - C1071 * C10540) *
                C15019 +
            (C48685 * C3255 - C1069 * C3250 + C48673 * C10100 - C1070 * C10097 +
             C48650 * C10543 - C1071 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C784 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C784 +
           (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                C1066 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                C1067 +
            ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
              C48650 * C1463 - C1071 * C1456) *
                 C114 +
             (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
              C48650 * C1468 - C1071 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C784 +
           (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
            ((C48356 * C404 - C113 * C393) * C114 +
             (C48356 * C411 - C113 * C405) * C48373) *
                C107) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C784 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C784 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C15017 + (C147 - C146) * C15014 + C2829 * C15018 +
             C2830 * C15015 + C2831 * C15019 + C2832 * C48653) *
                C48682 +
            ((C149 - C148) * C15017 + (C151 - C150) * C15014 + C2837 * C15018 +
             C2838 * C15015 + C2839 * C15019 + C2840 * C48653) *
                C48669 +
            ((C153 - C152) * C15017 + (C155 - C154) * C15014 + C5249 * C15018 +
             C5250 * C15015 + (C2474 - C2475) * C15019 +
             (C2476 - C2477) * C48653) *
                C48637) *
               C784 +
           ((C2825 * C15017 + C2826 * C15014 + C2827 * C15018 + C2828 * C15015 +
             (C2834 - C2833) * C15019 + (C2836 - C2835) * C48653) *
                C48682 +
            (C2468 * C15017 + C2469 * C15014 + C2481 * C15018 + C2482 * C15015 +
             (C2842 - C2841) * C15019 + (C2844 - C2843) * C48653) *
                C48669 +
            (C4975 * C15017 + C4976 * C15014 + (C2475 - C2474) * C15018 +
             (C2477 - C2476) * C15015 +
             (C48356 * C2810 - C113 * C2803) * C15019 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C784 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C15017 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C15014 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C15018 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C15015 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C15019 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48653) *
               C48261 * C784 +
           ((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C15017 +
            (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C15014 +
            (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C15018 +
            (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C15015 +
            (C48685 * C2806 - C1069 * C2801 + C48673 * C3251 - C1070 * C3247 +
             C48650 * C10098 - C1071 * C10095) *
                C15019 +
            (C48685 * C2813 - C1069 * C2807 + C48673 * C3256 - C1070 * C3252 +
             C48650 * C10101 - C1071 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C784 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C784 +
           (((C48685 * C687 - C1069 * C682 + C48673 * C1457 - C1070 * C1453 +
              C48650 * C1910 - C1071 * C1907) *
                 C114 +
             (C48685 * C697 - C1069 * C688 + C48673 * C1465 - C1070 * C1458 +
              C48650 * C1916 - C1071 * C1911) *
                 C48373) *
                C1066 +
            ((C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
              C48650 * C1912 - C1071 * C1908) *
                 C114 +
             (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
              C48650 * C1917 - C1071 * C1913) *
                 C48373) *
                C1067 +
            ((C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C114 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C784 +
           (((C48356 * C687 - C113 * C682) * C114 +
             (C48356 * C697 - C113 * C688) * C48373) *
                C103 +
            ((C48356 * C689 - C113 * C683) * C114 +
             (C48356 * C698 - C113 * C690) * C48373) *
                C104 +
            ((C48356 * C691 - C113 * C684) * C114 +
             (C48356 * C699 - C113 * C692) * C48373) *
                C105 +
            ((C48356 * C693 - C113 * C685) * C114 +
             (C48356 * C700 - C113 * C694) * C48373) *
                C106 +
            ((C48356 * C695 - C113 * C686) * C114 +
             (C48356 * C701 - C113 * C696) * C48373) *
                C107) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C784 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C260 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C15017 +
             (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
             (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
                C48682 +
            ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
             C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
                C48669 +
            C15031 * C48637) *
               C784 +
           (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
             (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
             (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
                C48682 +
            (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
             (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
                C48669 +
            (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
             (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C15017 +
             (C113 * C271 - C48356 * C282) * C15014 + (C3259 - C3260) * C15018 +
             (C3261 - C3262) * C15015 + (C3263 - C3264) * C15019 +
             (C3265 - C3266) * C48653) *
                C48682 +
            ((C289 - C290) * C15017 + (C291 - C292) * C15014 +
             (C2639 - C2640) * C15018 + (C2641 - C2642) * C15015 +
             (C2643 - C2644) * C15019 + (C2645 - C2646) * C48653) *
                C48669 +
            ((C293 - C294) * C15017 + (C295 - C296) * C15014 +
             (C2647 - C2648) * C15018 + (C2649 - C2650) * C15015 +
             (C2651 - C2652) * C15019 + (C2653 - C2654) * C48653) *
                C48637) *
               C784 +
           (((C3260 - C3259) * C15017 + (C3262 - C3261) * C15014 +
             (C3264 - C3263) * C15018 + (C3266 - C3265) * C15015 +
             (C48356 * C3249 - C113 * C3246) * C15019 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C48682 +
            ((C2640 - C2639) * C15017 + (C2642 - C2641) * C15014 +
             (C2644 - C2643) * C15018 + (C2646 - C2645) * C15015 +
             (C48356 * C3251 - C113 * C3247) * C15019 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C48669 +
            ((C2648 - C2647) * C15017 + (C2650 - C2649) * C15014 +
             (C2652 - C2651) * C15018 + (C2654 - C2653) * C15015 +
             (C48356 * C3253 - C113 * C3248) * C15019 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C15017 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C15014 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
            (C16542 - C16543 + C16544 - C16545 + C16546 - C16547) * C15019 +
            (C16548 - C16549 + C16550 - C16551 + C16552 - C16553) * C48653) *
               C48261 * C784 +
           ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
            (C1069 * C2800 - C48685 * C2804 + C1070 * C3246 - C48673 * C3249 +
             C1071 * C10094 - C48650 * C10096) *
                C15019 +
            (C1069 * C2805 - C48685 * C2812 + C1070 * C3250 - C48673 * C3255 +
             C1071 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C260 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C15017 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C15014 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C15018 +
            (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C15015 +
            (C16980 - C16981 + C16982 - C16983 + C16984 - C16985) * C15019 +
            (C16986 - C16987 + C16988 - C16989 + C16990 - C16991) * C48653) *
               C48261 * C784 +
           ((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C15017 +
            (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C15014 +
            (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C15018 +
            (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C15015 +
            (C48685 * C3249 - C1069 * C3246 + C48673 * C10096 - C1070 * C10094 +
             C48650 * C10541 - C1071 * C10540) *
                C15019 +
            (C48685 * C3255 - C1069 * C3250 + C48673 * C10100 - C1070 * C10097 +
             C48650 * C10543 - C1071 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C930 +
          (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
             C1071 * C1453 - C48650 * C1457) *
                C114 +
            (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
             C1071 * C1458 - C48650 * C1465) *
                C48373) *
               C1066 +
           ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
               C1067 +
           ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
            (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
               C48637) *
              C931 +
          (((C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
             C48650 * C2328 - C1071 * C2322) *
                C114 +
            (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
             C48650 * C2340 - C1071 * C2330) *
                C48373) *
               C1066 +
           ((C48685 * C940 - C1069 * C934 + C48673 * C2331 - C1070 * C2323 +
             C48650 * C2332 - C1071 * C2324) *
                C114 +
            (C48685 * C949 - C1069 * C941 + C48673 * C2341 - C1070 * C2333 +
             C48650 * C2342 - C1071 * C2334) *
                C48373) *
               C1067 +
           ((C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
             C48650 * C2336 - C1071 * C2326) *
                C114 +
            (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
             C48650 * C2344 - C1071 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C930 +
          (((C113 * C388 - C48356 * C394) * C114 +
            (C113 * C395 - C48356 * C406) * C48373) *
               C103 +
           ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
           ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
           ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
           ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
              C931 +
          (((C48356 * C938 - C113 * C933) * C114 +
            (C48356 * C948 - C113 * C939) * C48373) *
               C103 +
           ((C48356 * C940 - C113 * C934) * C114 +
            (C48356 * C949 - C113 * C941) * C48373) *
               C104 +
           ((C48356 * C942 - C113 * C935) * C114 +
            (C48356 * C950 - C113 * C943) * C48373) *
               C105 +
           ((C48356 * C944 - C113 * C936) * C114 +
            (C48356 * C951 - C113 * C945) * C48373) *
               C106 +
           ((C48356 * C946 - C113 * C937) * C114 +
            (C48356 * C952 - C113 * C947) * C48373) *
               C107) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C930 +
          (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
             C7773 * C1453 - C48650 * C1457) *
                C114 +
            (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
             C7773 * C1458 - C48650 * C1465) *
                C48373) *
               C48682 +
           ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
               C48669 +
           ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
            (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
               C48637) *
              C931 +
          (((C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
             C48650 * C2328 - C7773 * C2322) *
                C114 +
            (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
             C48650 * C2340 - C7773 * C2330) *
                C48373) *
               C48682 +
           ((C7765 * C940 - C7771 * C934 + C7766 * C2331 - C7772 * C2323 +
             C48650 * C2332 - C7773 * C2324) *
                C114 +
            (C7765 * C949 - C7771 * C941 + C7766 * C2341 - C7772 * C2333 +
             C48650 * C2342 - C7773 * C2334) *
                C48373) *
               C48669 +
           ((C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
             C48650 * C2336 - C7773 * C2326) *
                C114 +
            (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
             C48650 * C2344 - C7773 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C930 +
          ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
            C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
            C9039 * C9212 - C9033 * C9214) *
               C114 +
           (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
            C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
            C9039 * C9215 - C9033 * C9218) *
               C48373) *
              C48261 * C931 +
          ((C9029 * C938 - C9035 * C933 + C9030 * C2327 - C9036 * C2321 +
            C9031 * C2328 - C9037 * C2322 + C9032 * C9682 - C9038 * C9680 +
            C9033 * C9683 - C9039 * C9681) *
               C114 +
           (C9029 * C948 - C9035 * C939 + C9030 * C2339 - C9036 * C2329 +
            C9031 * C2340 - C9037 * C2330 + C9032 * C9686 - C9038 * C9684 +
            C9033 * C9687 - C9039 * C9685) *
               C48373) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C15017 +
            (C48356 * C136 - C113 * C123) * C15014 + (C2817 - C2818) * C15018 +
            (C2819 - C2820) * C15015 + C3681 * C15019 + C3682 * C48653) *
               C48682 +
           ((C144 - C145) * C15017 + (C146 - C147) * C15014 + C2825 * C15018 +
            C2826 * C15015 + C2827 * C15019 + C2828 * C48653) *
               C48669 +
           C15031 * C48637) *
              C930 +
          (((C2818 - C2817) * C15017 + (C2820 - C2819) * C15014 +
            (C2822 - C2821) * C15018 + (C2824 - C2823) * C15015 +
            (C3683 - C3684) * C15019 + (C3685 - C3686) * C48653) *
               C48682 +
           (C2829 * C15017 + C2830 * C15014 + C2831 * C15018 + C2832 * C15015 +
            (C2833 - C2834) * C15019 + (C2835 - C2836) * C48653) *
               C48669 +
           (C2837 * C15017 + C2838 * C15014 + C2839 * C15018 + C2840 * C15015 +
            (C2841 - C2842) * C15019 + (C2843 - C2844) * C48653) *
               C48637) *
              C931 +
          ((C3681 * C15017 + C3682 * C15014 + (C3684 - C3683) * C15018 +
            (C3686 - C3685) * C15015 +
            (C48356 * C3671 - C113 * C3668) * C15019 +
            (C48356 * C3677 - C113 * C3672) * C48653) *
               C48682 +
           (C2827 * C15017 + C2828 * C15014 + (C2834 - C2833) * C15018 +
            (C2836 - C2835) * C15015 +
            (C48356 * C3673 - C113 * C3669) * C15019 +
            (C48356 * C3678 - C113 * C3674) * C48653) *
               C48669 +
           (C2481 * C15017 + C2482 * C15014 + (C2842 - C2841) * C15018 +
            (C2844 - C2843) * C15015 +
            (C48356 * C3675 - C113 * C3670) * C15019 +
            (C48356 * C3679 - C113 * C3676) * C48653) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
            C48650 * C585 - C1071 * C580) *
               C15017 +
           (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
            C48650 * C595 - C1071 * C586) *
               C15014 +
           (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C15018 +
           (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C15015 +
           C17414 * C15019 + C17415 * C48653) *
              C48261 * C930 +
          ((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C15017 +
           (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C15014 +
           (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C15018 +
           (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C15015 +
           (C17400 - C17401 + C17402 - C17403 + C17404 - C17405) * C15019 +
           (C17406 - C17407 + C17408 - C17409 + C17410 - C17411) * C48653) *
              C48261 * C931 +
          (C17414 * C15017 + C17415 * C15014 +
           (C17401 - C17400 + C17403 - C17402 + C17405 - C17404) * C15018 +
           (C17407 - C17406 + C17409 - C17408 + C17411 - C17410) * C15015 +
           (C48685 * C3671 - C1069 * C3668 + C48673 * C10972 - C1070 * C10970 +
            C48650 * C10973 - C1071 * C10971) *
               C15019 +
           (C48685 * C3677 - C1069 * C3672 + C48673 * C10976 - C1070 * C10974 +
            C48650 * C10977 - C1071 * C10975) *
               C48653) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C30748 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C30746 +
            (C6530 - C6531 + C6532 - C6533) * C30749 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C48266 +
           ((C3793 - C3794 + C3795 - C3796) * C30748 +
            (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
            C6567 * C48460) *
               C48274 +
           C34609 * C26140) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C30748 +
            (C3798 - C3797 + C3800 - C3799) * C30746 + C6568 * C30749 +
            C6569 * C48460) *
               C48266 +
           ((C3802 - C3801 + C3804 - C3803) * C30748 +
            (C3806 - C3805 + C3808 - C3807) * C30746 + C6570 * C30749 +
            C6571 * C48460) *
               C48274 +
           ((C3810 - C3809 + C3812 - C3811) * C30748 +
            (C3814 - C3813 + C3816 - C3815) * C30746 +
            (C4143 - C4144 + C4145 - C4146) * C30749 +
            (C4147 - C4148 + C4149 - C4150) * C48460) *
               C26140) *
              C48345 * C48328 * C111 +
          (C34609 * C48266 +
           (C3835 * C30748 + C3836 * C30746 +
            (C4144 - C4143 + C4146 - C4145) * C30749 +
            (C4148 - C4147 + C4150 - C4149) * C48460) *
               C48274 +
           ((C3818 - C3817 + C3820 - C3819) * C30748 +
            (C3822 - C3821 + C3824 - C3823) * C30746 +
            (C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                C30749 +
            (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                C48460) *
               C26140) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C30748 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C30746 +
             (C6530 - C6531 + C6532 - C6533) * C30749 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C48266 +
            ((C3793 - C3794 + C3795 - C3796) * C30748 +
             (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
             C6567 * C48460) *
                C48274 +
            C34609 * C26140) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C30748 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C30746 +
             (C7106 - C7107 + C7108 - C7109) * C30749 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C48266 +
            ((C3973 - C3974 + C3975 - C3976) * C30748 +
             (C3977 - C3978 + C3979 - C3980) * C30746 +
             (C6320 - C6321 + C6322 - C6323) * C30749 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C48274 +
            ((C3981 - C3982 + C3983 - C3984) * C30748 +
             (C3985 - C3986 + C3987 - C3988) * C30746 +
             (C6328 - C6329 + C6330 - C6331) * C30749 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C26140) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C30748 +
             (C3798 - C3797 + C3800 - C3799) * C30746 + C6568 * C30749 +
             C6569 * C48460) *
                C48266 +
            ((C3802 - C3801 + C3804 - C3803) * C30748 +
             (C3806 - C3805 + C3808 - C3807) * C30746 + C6570 * C30749 +
             C6571 * C48460) *
                C48274 +
            ((C3810 - C3809 + C3812 - C3811) * C30748 +
             (C3814 - C3813 + C3816 - C3815) * C30746 +
             (C4143 - C4144 + C4145 - C4146) * C30749 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C26140) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C30748 +
             (C3978 - C3977 + C3980 - C3979) * C30746 +
             (C6321 - C6320 + C6323 - C6322) * C30749 +
             (C6325 - C6324 + C6327 - C6326) * C48460) *
                C48266 +
            ((C3982 - C3981 + C3984 - C3983) * C30748 +
             (C3986 - C3985 + C3988 - C3987) * C30746 +
             (C6329 - C6328 + C6331 - C6330) * C30749 +
             (C6333 - C6332 + C6335 - C6334) * C48460) *
                C48274 +
            ((C3990 - C3989 + C3992 - C3991) * C30748 +
             (C3994 - C3993 + C3996 - C3995) * C30746 +
             (C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C30749 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48460) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C30748 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C30746 +
             (C6530 - C6531 + C6532 - C6533) * C30749 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C48266 +
            ((C3793 - C3794 + C3795 - C3796) * C30748 +
             (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
             C6567 * C48460) *
                C48274 +
            C34609 * C26140) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C30748 +
             (C6535 - C6534 + C6537 - C6536) * C30746 +
             (C7648 - C7649 + C7650 - C7651) * C30749 +
             (C7652 - C7653 + C7654 - C7655) * C48460) *
                C48266 +
            (C6568 * C30748 + C6569 * C30746 + C18708 * C30749 +
             C18709 * C48460) *
                C48274 +
            (C6570 * C30748 + C6571 * C30746 +
             (C6558 - C6559 + C6560 - C6561) * C30749 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C26140) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C30748 +
             (C3798 - C3797 + C3800 - C3799) * C30746 + C6568 * C30749 +
             C6569 * C48460) *
                C48266 +
            ((C3802 - C3801 + C3804 - C3803) * C30748 +
             (C3806 - C3805 + C3808 - C3807) * C30746 + C6570 * C30749 +
             C6571 * C48460) *
                C48274 +
            ((C3810 - C3809 + C3812 - C3811) * C30748 +
             (C3814 - C3813 + C3816 - C3815) * C30746 +
             (C4143 - C4144 + C4145 - C4146) * C30749 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C26140) *
               C386 +
           ((C6566 * C30748 + C6567 * C30746 + C18706 * C30749 +
             C18707 * C48460) *
                C48266 +
            (C6120 * C30748 + C6121 * C30746 +
             (C6559 - C6558 + C6561 - C6560) * C30749 +
             (C6563 - C6562 + C6565 - C6564) * C48460) *
                C48274 +
            ((C4144 - C4143 + C4146 - C4145) * C30748 +
             (C4148 - C4147 + C4150 - C4149) * C30746 +
             (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                 C30749 +
             (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                 C48460) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C30748 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C30746 +
             (C6530 - C6531 + C6532 - C6533) * C30749 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C48266 +
            ((C3793 - C3794 + C3795 - C3796) * C30748 +
             (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
             C6567 * C48460) *
                C48274 +
            C34609 * C26140) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C30748 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C30746 +
             (C7106 - C7107 + C7108 - C7109) * C30749 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C48266 +
            ((C3973 - C3974 + C3975 - C3976) * C30748 +
             (C3977 - C3978 + C3979 - C3980) * C30746 +
             (C6320 - C6321 + C6322 - C6323) * C30749 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C48274 +
            ((C3981 - C3982 + C3983 - C3984) * C30748 +
             (C3985 - C3986 + C3987 - C3988) * C30746 +
             (C6328 - C6329 + C6330 - C6331) * C30749 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C26140) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C30748 +
             (C3798 - C3797 + C3800 - C3799) * C30746 + C6568 * C30749 +
             C6569 * C48460) *
                C48266 +
            ((C3802 - C3801 + C3804 - C3803) * C30748 +
             (C3806 - C3805 + C3808 - C3807) * C30746 + C6570 * C30749 +
             C6571 * C48460) *
                C48274 +
            ((C3810 - C3809 + C3812 - C3811) * C30748 +
             (C3814 - C3813 + C3816 - C3815) * C30746 +
             (C4143 - C4144 + C4145 - C4146) * C30749 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C26140) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C30748 +
             (C3978 - C3977 + C3980 - C3979) * C30746 +
             (C6321 - C6320 + C6323 - C6322) * C30749 +
             (C6325 - C6324 + C6327 - C6326) * C48460) *
                C48266 +
            ((C3982 - C3981 + C3984 - C3983) * C30748 +
             (C3986 - C3985 + C3988 - C3987) * C30746 +
             (C6329 - C6328 + C6331 - C6330) * C30749 +
             (C6333 - C6332 + C6335 - C6334) * C48460) *
                C48274 +
            ((C3990 - C3989 + C3992 - C3991) * C30748 +
             (C3994 - C3993 + C3996 - C3995) * C30746 +
             (C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C30749 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48460) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C30748 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C30746 +
            (C6530 - C6531 + C6532 - C6533) * C30749 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C48266 +
           ((C3793 - C3794 + C3795 - C3796) * C30748 +
            (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
            C6567 * C48460) *
               C48274 +
           C34609 * C26140) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C30748 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C30746 +
            (C7106 - C7107 + C7108 - C7109) * C30749 +
            (C7110 - C7111 + C7112 - C7113) * C48460) *
               C48266 +
           ((C3973 - C3974 + C3975 - C3976) * C30748 +
            (C3977 - C3978 + C3979 - C3980) * C30746 +
            (C6320 - C6321 + C6322 - C6323) * C30749 +
            (C6324 - C6325 + C6326 - C6327) * C48460) *
               C48274 +
           ((C3981 - C3982 + C3983 - C3984) * C30748 +
            (C3985 - C3986 + C3987 - C3988) * C30746 +
            (C6328 - C6329 + C6330 - C6331) * C30749 +
            (C6332 - C6333 + C6334 - C6335) * C48460) *
               C26140) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C30748 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C30746 +
            (C48617 * C1457 - C3790 * C1453 + C48418 * C1910 - C3791 * C1907) *
                C30749 +
            (C48617 * C1465 - C3790 * C1458 + C48418 * C1916 - C3791 * C1911) *
                C48460) *
               C48266 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C30748 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C30746 +
            (C48617 * C1459 - C3790 * C1454 + C48418 * C1912 - C3791 * C1908) *
                C30749 +
            (C48617 * C1466 - C3790 * C1460 + C48418 * C1917 - C3791 * C1913) *
                C48460) *
               C48274 +
           ((C48617 * C589 - C3790 * C582 + C48418 * C1275 - C3791 * C1269) *
                C30748 +
            (C48617 * C597 - C3790 * C590 + C48418 * C1281 - C3791 * C1276) *
                C30746 +
            (C48617 * C1461 - C3790 * C1455 + C48418 * C1914 - C3791 * C1909) *
                C30749 +
            (C48617 * C1467 - C3790 * C1462 + C48418 * C1918 - C3791 * C1915) *
                C48460) *
               C26140) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C30748 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C30746 +
             (C6530 - C6531 + C6532 - C6533) * C30749 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C48266 +
            ((C3793 - C3794 + C3795 - C3796) * C30748 +
             (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
             C6567 * C48460) *
                C48274 +
            C34609 * C26140) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C30748 +
             (C6535 - C6534 + C6537 - C6536) * C30746 +
             (C7648 - C7649 + C7650 - C7651) * C30749 +
             (C7652 - C7653 + C7654 - C7655) * C48460) *
                C48266 +
            (C6568 * C30748 + C6569 * C30746 + C18708 * C30749 +
             C18709 * C48460) *
                C48274 +
            (C6570 * C30748 + C6571 * C30746 +
             (C6558 - C6559 + C6560 - C6561) * C30749 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C26140) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C30748 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C30746 +
             (C7106 - C7107 + C7108 - C7109) * C30749 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C48266 +
            ((C3973 - C3974 + C3975 - C3976) * C30748 +
             (C3977 - C3978 + C3979 - C3980) * C30746 +
             (C6320 - C6321 + C6322 - C6323) * C30749 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C48274 +
            ((C3981 - C3982 + C3983 - C3984) * C30748 +
             (C3985 - C3986 + C3987 - C3988) * C30746 +
             (C6328 - C6329 + C6330 - C6331) * C30749 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C26140) *
               C386 +
           (((C7107 - C7106 + C7109 - C7108) * C30748 +
             (C7111 - C7110 + C7113 - C7112) * C30746 +
             (C19245 - C19244 + C19247 - C19246) * C30749 +
             (C19249 - C19248 + C19251 - C19250) * C48460) *
                C48266 +
            ((C6321 - C6320 + C6323 - C6322) * C30748 +
             (C6325 - C6324 + C6327 - C6326) * C30746 +
             (C18489 - C18488 + C18491 - C18490) * C30749 +
             (C18493 - C18492 + C18495 - C18494) * C48460) *
                C48274 +
            ((C6329 - C6328 + C6331 - C6330) * C30748 +
             (C6333 - C6332 + C6335 - C6334) * C30746 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C30749 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48460) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C30748 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C30746 +
             (C6530 - C6531 + C6532 - C6533) * C30749 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C48266 +
            ((C3793 - C3794 + C3795 - C3796) * C30748 +
             (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
             C6567 * C48460) *
                C48274 +
            C34609 * C26140) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C30748 +
             (C6535 - C6534 + C6537 - C6536) * C30746 +
             (C7648 - C7649 + C7650 - C7651) * C30749 +
             (C7652 - C7653 + C7654 - C7655) * C48460) *
                C48266 +
            (C6568 * C30748 + C6569 * C30746 + C18708 * C30749 +
             C18709 * C48460) *
                C48274 +
            (C6570 * C30748 + C6571 * C30746 +
             (C6558 - C6559 + C6560 - C6561) * C30749 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C26140) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C30748 +
             (C3798 - C3797 + C3800 - C3799) * C30746 + C6568 * C30749 +
             C6569 * C48460) *
                C48266 +
            ((C3802 - C3801 + C3804 - C3803) * C30748 +
             (C3806 - C3805 + C3808 - C3807) * C30746 + C6570 * C30749 +
             C6571 * C48460) *
                C48274 +
            ((C3810 - C3809 + C3812 - C3811) * C30748 +
             (C3814 - C3813 + C3816 - C3815) * C30746 +
             (C4143 - C4144 + C4145 - C4146) * C30749 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C26140) *
               C784 +
           ((C6566 * C30748 + C6567 * C30746 + C18706 * C30749 +
             C18707 * C48460) *
                C48266 +
            (C6120 * C30748 + C6121 * C30746 +
             (C6559 - C6558 + C6561 - C6560) * C30749 +
             (C6563 - C6562 + C6565 - C6564) * C48460) *
                C48274 +
            ((C4144 - C4143 + C4146 - C4145) * C30748 +
             (C4148 - C4147 + C4150 - C4149) * C30746 +
             (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                 C30749 +
             (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                 C48460) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C30748 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C30746 +
             (C6530 - C6531 + C6532 - C6533) * C30749 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C48266 +
            ((C3793 - C3794 + C3795 - C3796) * C30748 +
             (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
             C6567 * C48460) *
                C48274 +
            C34609 * C26140) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C30748 +
             (C6535 - C6534 + C6537 - C6536) * C30746 +
             (C7648 - C7649 + C7650 - C7651) * C30749 +
             (C7652 - C7653 + C7654 - C7655) * C48460) *
                C48266 +
            (C6568 * C30748 + C6569 * C30746 + C18708 * C30749 +
             C18709 * C48460) *
                C48274 +
            (C6570 * C30748 + C6571 * C30746 +
             (C6558 - C6559 + C6560 - C6561) * C30749 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C26140) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C30748 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C30746 +
             (C7106 - C7107 + C7108 - C7109) * C30749 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C48266 +
            ((C3973 - C3974 + C3975 - C3976) * C30748 +
             (C3977 - C3978 + C3979 - C3980) * C30746 +
             (C6320 - C6321 + C6322 - C6323) * C30749 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C48274 +
            ((C3981 - C3982 + C3983 - C3984) * C30748 +
             (C3985 - C3986 + C3987 - C3988) * C30746 +
             (C6328 - C6329 + C6330 - C6331) * C30749 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C26140) *
               C784 +
           (((C7107 - C7106 + C7109 - C7108) * C30748 +
             (C7111 - C7110 + C7113 - C7112) * C30746 +
             (C19245 - C19244 + C19247 - C19246) * C30749 +
             (C19249 - C19248 + C19251 - C19250) * C48460) *
                C48266 +
            ((C6321 - C6320 + C6323 - C6322) * C30748 +
             (C6325 - C6324 + C6327 - C6326) * C30746 +
             (C18489 - C18488 + C18491 - C18490) * C30749 +
             (C18493 - C18492 + C18495 - C18494) * C48460) *
                C48274 +
            ((C6329 - C6328 + C6331 - C6330) * C30748 +
             (C6333 - C6332 + C6335 - C6334) * C30746 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C30749 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48460) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C30748 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C30746 +
            (C6530 - C6531 + C6532 - C6533) * C30749 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C48266 +
           ((C3793 - C3794 + C3795 - C3796) * C30748 +
            (C3797 - C3798 + C3799 - C3800) * C30746 + C6566 * C30749 +
            C6567 * C48460) *
               C48274 +
           C34609 * C26140) *
              C930 +
          (((C6531 - C6530 + C6533 - C6532) * C30748 +
            (C6535 - C6534 + C6537 - C6536) * C30746 +
            (C7648 - C7649 + C7650 - C7651) * C30749 +
            (C7652 - C7653 + C7654 - C7655) * C48460) *
               C48266 +
           (C6568 * C30748 + C6569 * C30746 + C18708 * C30749 +
            C18709 * C48460) *
               C48274 +
           (C6570 * C30748 + C6571 * C30746 +
            (C6558 - C6559 + C6560 - C6561) * C30749 +
            (C6562 - C6563 + C6564 - C6565) * C48460) *
               C26140) *
              C931 +
          ((C19798 * C30748 + C19799 * C30746 + C21984 * C30749 +
            C21985 * C48460) *
               C48266 +
           (C18706 * C30748 + C18707 * C30746 +
            (C18699 - C18698 + C18701 - C18700) * C30749 +
            (C18703 - C18702 + C18705 - C18704) * C48460) *
               C48274 +
           ((C6559 - C6558 + C6561 - C6560) * C30748 +
            (C6563 - C6562 + C6565 - C6564) * C30746 +
            (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                C30749 +
            (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                C48460) *
               C26140) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C47360 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48456 +
            (C6530 - C6531 + C6532 - C6533) * C47352 +
            (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
            C19799 * C36177) *
               C23267 +
           ((C3793 - C3794 + C3795 - C3796) * C47360 +
            (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
            C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C47360 +
            (C3798 - C3797 + C3800 - C3799) * C48456 + C6568 * C47352 +
            C6569 * C48463 + C18708 * C47366 + C18709 * C36177) *
               C23267 +
           ((C3802 - C3801 + C3804 - C3803) * C47360 +
            (C3806 - C3805 + C3808 - C3807) * C48456 + C6570 * C47352 +
            C6571 * C48463 + (C6558 - C6559 + C6560 - C6561) * C47366 +
            (C6562 - C6563 + C6564 - C6565) * C36177) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C3833 * C47360 + C3834 * C48456 + C6120 * C47352 + C6121 * C48463 +
            (C6559 - C6558 + C6561 - C6560) * C47366 +
            (C6563 - C6562 + C6565 - C6564) * C36177) *
               C23267 +
           (C3835 * C47360 + C3836 * C48456 +
            (C4144 - C4143 + C4146 - C4145) * C47352 +
            (C4148 - C4147 + C4150 - C4149) * C48463 +
            (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                C47366 +
            (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                C36177) *
               C48271) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C47360 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48456 +
             (C6530 - C6531 + C6532 - C6533) * C47352 +
             (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
             C19799 * C36177) *
                C23267 +
            ((C3793 - C3794 + C3795 - C3796) * C47360 +
             (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
             C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
                C48271) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C47360 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48456 +
             (C7106 - C7107 + C7108 - C7109) * C47352 +
             (C7110 - C7111 + C7112 - C7113) * C48463 +
             (C19244 - C19245 + C19246 - C19247) * C47366 +
             (C19248 - C19249 + C19250 - C19251) * C36177) *
                C23267 +
            ((C3973 - C3974 + C3975 - C3976) * C47360 +
             (C3977 - C3978 + C3979 - C3980) * C48456 +
             (C6320 - C6321 + C6322 - C6323) * C47352 +
             (C6324 - C6325 + C6326 - C6327) * C48463 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36177) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C47360 +
             (C3798 - C3797 + C3800 - C3799) * C48456 + C6568 * C47352 +
             C6569 * C48463 + C18708 * C47366 + C18709 * C36177) *
                C23267 +
            ((C3802 - C3801 + C3804 - C3803) * C47360 +
             (C3806 - C3805 + C3808 - C3807) * C48456 + C6570 * C47352 +
             C6571 * C48463 + (C6558 - C6559 + C6560 - C6561) * C47366 +
             (C6562 - C6563 + C6564 - C6565) * C36177) *
                C48271) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C47360 +
             (C3978 - C3977 + C3980 - C3979) * C48456 +
             (C6321 - C6320 + C6323 - C6322) * C47352 +
             (C6325 - C6324 + C6327 - C6326) * C48463 +
             (C18489 - C18488 + C18491 - C18490) * C47366 +
             (C18493 - C18492 + C18495 - C18494) * C36177) *
                C23267 +
            ((C3982 - C3981 + C3984 - C3983) * C47360 +
             (C3986 - C3985 + C3988 - C3987) * C48456 +
             (C6329 - C6328 + C6331 - C6330) * C47352 +
             (C6333 - C6332 + C6335 - C6334) * C48463 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C47366 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C36177) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C47360 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48456 +
             (C6530 - C6531 + C6532 - C6533) * C47352 +
             (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
             C19799 * C36177) *
                C23267 +
            ((C3793 - C3794 + C3795 - C3796) * C47360 +
             (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
             C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
                C48271) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C47360 +
             (C6535 - C6534 + C6537 - C6536) * C48456 +
             (C7648 - C7649 + C7650 - C7651) * C47352 +
             (C7652 - C7653 + C7654 - C7655) * C48463 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36177) *
                C23267 +
            (C6568 * C47360 + C6569 * C48456 + C18708 * C47352 +
             C18709 * C48463 + (C18698 - C18699 + C18700 - C18701) * C47366 +
             (C18702 - C18703 + C18704 - C18705) * C36177) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C47360 +
             (C3798 - C3797 + C3800 - C3799) * C48456 + C6568 * C47352 +
             C6569 * C48463 + C18708 * C47366 + C18709 * C36177) *
                C23267 +
            ((C3802 - C3801 + C3804 - C3803) * C47360 +
             (C3806 - C3805 + C3808 - C3807) * C48456 + C6570 * C47352 +
             C6571 * C48463 + (C6558 - C6559 + C6560 - C6561) * C47366 +
             (C6562 - C6563 + C6564 - C6565) * C36177) *
                C48271) *
               C386 +
           ((C6566 * C47360 + C6567 * C48456 + C18706 * C47352 +
             C18707 * C48463 + (C18699 - C18698 + C18701 - C18700) * C47366 +
             (C18703 - C18702 + C18705 - C18704) * C36177) *
                C23267 +
            (C6120 * C47360 + C6121 * C48456 +
             (C6559 - C6558 + C6561 - C6560) * C47352 +
             (C6563 - C6562 + C6565 - C6564) * C48463 +
             (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                 C47366 +
             (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                 C36177) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C47360 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48456 +
             (C6530 - C6531 + C6532 - C6533) * C47352 +
             (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
             C19799 * C36177) *
                C23267 +
            ((C3793 - C3794 + C3795 - C3796) * C47360 +
             (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
             C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
                C48271) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C47360 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48456 +
             (C7106 - C7107 + C7108 - C7109) * C47352 +
             (C7110 - C7111 + C7112 - C7113) * C48463 +
             (C19244 - C19245 + C19246 - C19247) * C47366 +
             (C19248 - C19249 + C19250 - C19251) * C36177) *
                C23267 +
            ((C3973 - C3974 + C3975 - C3976) * C47360 +
             (C3977 - C3978 + C3979 - C3980) * C48456 +
             (C6320 - C6321 + C6322 - C6323) * C47352 +
             (C6324 - C6325 + C6326 - C6327) * C48463 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36177) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C47360 +
             (C3798 - C3797 + C3800 - C3799) * C48456 + C6568 * C47352 +
             C6569 * C48463 + C18708 * C47366 + C18709 * C36177) *
                C23267 +
            ((C3802 - C3801 + C3804 - C3803) * C47360 +
             (C3806 - C3805 + C3808 - C3807) * C48456 + C6570 * C47352 +
             C6571 * C48463 + (C6558 - C6559 + C6560 - C6561) * C47366 +
             (C6562 - C6563 + C6564 - C6565) * C36177) *
                C48271) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C47360 +
             (C3978 - C3977 + C3980 - C3979) * C48456 +
             (C6321 - C6320 + C6323 - C6322) * C47352 +
             (C6325 - C6324 + C6327 - C6326) * C48463 +
             (C18489 - C18488 + C18491 - C18490) * C47366 +
             (C18493 - C18492 + C18495 - C18494) * C36177) *
                C23267 +
            ((C3982 - C3981 + C3984 - C3983) * C47360 +
             (C3986 - C3985 + C3988 - C3987) * C48456 +
             (C6329 - C6328 + C6331 - C6330) * C47352 +
             (C6333 - C6332 + C6335 - C6334) * C48463 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C47366 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C36177) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C47360 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48456 +
            (C6530 - C6531 + C6532 - C6533) * C47352 +
            (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
            C19799 * C36177) *
               C23267 +
           ((C3793 - C3794 + C3795 - C3796) * C47360 +
            (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
            C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
               C48271) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C47360 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C48456 +
            (C7106 - C7107 + C7108 - C7109) * C47352 +
            (C7110 - C7111 + C7112 - C7113) * C48463 +
            (C19244 - C19245 + C19246 - C19247) * C47366 +
            (C19248 - C19249 + C19250 - C19251) * C36177) *
               C23267 +
           ((C3973 - C3974 + C3975 - C3976) * C47360 +
            (C3977 - C3978 + C3979 - C3980) * C48456 +
            (C6320 - C6321 + C6322 - C6323) * C47352 +
            (C6324 - C6325 + C6326 - C6327) * C48463 +
            (C18488 - C18489 + C18490 - C18491) * C47366 +
            (C18492 - C18493 + C18494 - C18495) * C36177) *
               C48271) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C47360 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C48456 +
            (C48617 * C1457 - C3790 * C1453 + C48418 * C1910 - C3791 * C1907) *
                C47352 +
            (C48617 * C1465 - C3790 * C1458 + C48418 * C1916 - C3791 * C1911) *
                C48463 +
            (C48617 * C2328 - C3790 * C2322 + C48418 * C9682 - C3791 * C9680) *
                C47366 +
            (C48617 * C2340 - C3790 * C2330 + C48418 * C9686 - C3791 * C9684) *
                C36177) *
               C23267 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C47360 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C48456 +
            (C48617 * C1459 - C3790 * C1454 + C48418 * C1912 - C3791 * C1908) *
                C47352 +
            (C48617 * C1466 - C3790 * C1460 + C48418 * C1917 - C3791 * C1913) *
                C48463 +
            (C48617 * C2332 - C3790 * C2324 + C48418 * C9945 - C3791 * C9944) *
                C47366 +
            (C48617 * C2342 - C3790 * C2334 + C48418 * C9947 - C3791 * C9946) *
                C36177) *
               C48271) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C47360 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48456 +
             (C6530 - C6531 + C6532 - C6533) * C47352 +
             (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
             C19799 * C36177) *
                C23267 +
            ((C3793 - C3794 + C3795 - C3796) * C47360 +
             (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
             C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
                C48271) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C47360 +
             (C6535 - C6534 + C6537 - C6536) * C48456 +
             (C7648 - C7649 + C7650 - C7651) * C47352 +
             (C7652 - C7653 + C7654 - C7655) * C48463 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36177) *
                C23267 +
            (C6568 * C47360 + C6569 * C48456 + C18708 * C47352 +
             C18709 * C48463 + (C18698 - C18699 + C18700 - C18701) * C47366 +
             (C18702 - C18703 + C18704 - C18705) * C36177) *
                C48271) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C47360 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48456 +
             (C7106 - C7107 + C7108 - C7109) * C47352 +
             (C7110 - C7111 + C7112 - C7113) * C48463 +
             (C19244 - C19245 + C19246 - C19247) * C47366 +
             (C19248 - C19249 + C19250 - C19251) * C36177) *
                C23267 +
            ((C3973 - C3974 + C3975 - C3976) * C47360 +
             (C3977 - C3978 + C3979 - C3980) * C48456 +
             (C6320 - C6321 + C6322 - C6323) * C47352 +
             (C6324 - C6325 + C6326 - C6327) * C48463 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36177) *
                C48271) *
               C386 +
           (((C7107 - C7106 + C7109 - C7108) * C47360 +
             (C7111 - C7110 + C7113 - C7112) * C48456 +
             (C19245 - C19244 + C19247 - C19246) * C47352 +
             (C19249 - C19248 + C19251 - C19250) * C48463 +
             (C21607 - C21606 + C21609 - C21608) * C47366 +
             (C21611 - C21610 + C21613 - C21612) * C36177) *
                C23267 +
            ((C6321 - C6320 + C6323 - C6322) * C47360 +
             (C6325 - C6324 + C6327 - C6326) * C48456 +
             (C18489 - C18488 + C18491 - C18490) * C47352 +
             (C18493 - C18492 + C18495 - C18494) * C48463 +
             (C48617 * C3251 - C3790 * C3247 + C48418 * C10098 -
              C3791 * C10095) *
                 C47366 +
             (C48617 * C3256 - C3790 * C3252 + C48418 * C10101 -
              C3791 * C10099) *
                 C36177) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C47360 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48456 +
             (C6530 - C6531 + C6532 - C6533) * C47352 +
             (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
             C19799 * C36177) *
                C23267 +
            ((C3793 - C3794 + C3795 - C3796) * C47360 +
             (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
             C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
                C48271) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C47360 +
             (C6535 - C6534 + C6537 - C6536) * C48456 +
             (C7648 - C7649 + C7650 - C7651) * C47352 +
             (C7652 - C7653 + C7654 - C7655) * C48463 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36177) *
                C23267 +
            (C6568 * C47360 + C6569 * C48456 + C18708 * C47352 +
             C18709 * C48463 + (C18698 - C18699 + C18700 - C18701) * C47366 +
             (C18702 - C18703 + C18704 - C18705) * C36177) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C47360 +
             (C3798 - C3797 + C3800 - C3799) * C48456 + C6568 * C47352 +
             C6569 * C48463 + C18708 * C47366 + C18709 * C36177) *
                C23267 +
            ((C3802 - C3801 + C3804 - C3803) * C47360 +
             (C3806 - C3805 + C3808 - C3807) * C48456 + C6570 * C47352 +
             C6571 * C48463 + (C6558 - C6559 + C6560 - C6561) * C47366 +
             (C6562 - C6563 + C6564 - C6565) * C36177) *
                C48271) *
               C784 +
           ((C6566 * C47360 + C6567 * C48456 + C18706 * C47352 +
             C18707 * C48463 + (C18699 - C18698 + C18701 - C18700) * C47366 +
             (C18703 - C18702 + C18705 - C18704) * C36177) *
                C23267 +
            (C6120 * C47360 + C6121 * C48456 +
             (C6559 - C6558 + C6561 - C6560) * C47352 +
             (C6563 - C6562 + C6565 - C6564) * C48463 +
             (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                 C47366 +
             (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                 C36177) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C47360 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48456 +
             (C6530 - C6531 + C6532 - C6533) * C47352 +
             (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
             C19799 * C36177) *
                C23267 +
            ((C3793 - C3794 + C3795 - C3796) * C47360 +
             (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
             C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
                C48271) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C47360 +
             (C6535 - C6534 + C6537 - C6536) * C48456 +
             (C7648 - C7649 + C7650 - C7651) * C47352 +
             (C7652 - C7653 + C7654 - C7655) * C48463 +
             (C19790 - C19791 + C19792 - C19793) * C47366 +
             (C19794 - C19795 + C19796 - C19797) * C36177) *
                C23267 +
            (C6568 * C47360 + C6569 * C48456 + C18708 * C47352 +
             C18709 * C48463 + (C18698 - C18699 + C18700 - C18701) * C47366 +
             (C18702 - C18703 + C18704 - C18705) * C36177) *
                C48271) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C47360 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48456 +
             (C7106 - C7107 + C7108 - C7109) * C47352 +
             (C7110 - C7111 + C7112 - C7113) * C48463 +
             (C19244 - C19245 + C19246 - C19247) * C47366 +
             (C19248 - C19249 + C19250 - C19251) * C36177) *
                C23267 +
            ((C3973 - C3974 + C3975 - C3976) * C47360 +
             (C3977 - C3978 + C3979 - C3980) * C48456 +
             (C6320 - C6321 + C6322 - C6323) * C47352 +
             (C6324 - C6325 + C6326 - C6327) * C48463 +
             (C18488 - C18489 + C18490 - C18491) * C47366 +
             (C18492 - C18493 + C18494 - C18495) * C36177) *
                C48271) *
               C784 +
           (((C7107 - C7106 + C7109 - C7108) * C47360 +
             (C7111 - C7110 + C7113 - C7112) * C48456 +
             (C19245 - C19244 + C19247 - C19246) * C47352 +
             (C19249 - C19248 + C19251 - C19250) * C48463 +
             (C21607 - C21606 + C21609 - C21608) * C47366 +
             (C21611 - C21610 + C21613 - C21612) * C36177) *
                C23267 +
            ((C6321 - C6320 + C6323 - C6322) * C47360 +
             (C6325 - C6324 + C6327 - C6326) * C48456 +
             (C18489 - C18488 + C18491 - C18490) * C47352 +
             (C18493 - C18492 + C18495 - C18494) * C48463 +
             (C48617 * C3251 - C3790 * C3247 + C48418 * C10098 -
              C3791 * C10095) *
                 C47366 +
             (C48617 * C3256 - C3790 * C3252 + C48418 * C10101 -
              C3791 * C10099) *
                 C36177) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C47360 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48456 +
            (C6530 - C6531 + C6532 - C6533) * C47352 +
            (C6534 - C6535 + C6536 - C6537) * C48463 + C19798 * C47366 +
            C19799 * C36177) *
               C23267 +
           ((C3793 - C3794 + C3795 - C3796) * C47360 +
            (C3797 - C3798 + C3799 - C3800) * C48456 + C6566 * C47352 +
            C6567 * C48463 + C18706 * C47366 + C18707 * C36177) *
               C48271) *
              C930 +
          (((C6531 - C6530 + C6533 - C6532) * C47360 +
            (C6535 - C6534 + C6537 - C6536) * C48456 +
            (C7648 - C7649 + C7650 - C7651) * C47352 +
            (C7652 - C7653 + C7654 - C7655) * C48463 +
            (C19790 - C19791 + C19792 - C19793) * C47366 +
            (C19794 - C19795 + C19796 - C19797) * C36177) *
               C23267 +
           (C6568 * C47360 + C6569 * C48456 + C18708 * C47352 +
            C18709 * C48463 + (C18698 - C18699 + C18700 - C18701) * C47366 +
            (C18702 - C18703 + C18704 - C18705) * C36177) *
               C48271) *
              C931 +
          ((C19798 * C47360 + C19799 * C48456 + C21984 * C47352 +
            C21985 * C48463 + (C21977 - C21976 + C21979 - C21978) * C47366 +
            (C21981 - C21980 + C21983 - C21982) * C36177) *
               C23267 +
           (C18706 * C47360 + C18707 * C48456 +
            (C18699 - C18698 + C18701 - C18700) * C47352 +
            (C18703 - C18702 + C18705 - C18704) * C48463 +
            (C48617 * C3673 - C3790 * C3669 + C48418 * C17570 -
             C3791 * C17569) *
                C47366 +
            (C48617 * C3678 - C3790 * C3674 + C48418 * C17572 -
             C3791 * C17571) *
                C36177) *
               C48271) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C30748 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C30746 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
               C23267 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
            (C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C30749 +
            (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48460) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C30749 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48460) *
               C23267 +
           ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
            (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
            (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
            (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C1117 * C30748 + C1118 * C30746 +
            (C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C30749 +
            (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48460) *
               C23267 +
           ((C1098 - C1097 + C1100 - C1099 + C1102 - C1101) * C30748 +
            (C1104 - C1103 + C1106 - C1105 + C1108 - C1107) * C30746 +
            (C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
             C48650 * C1463 - C1071 * C1456) *
                C30749 +
            (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
             C48650 * C1468 - C1071 * C1464) *
                C48460) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C30748 +
            (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
            (C2819 - C2820) * C48460) *
               C48691 +
           ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
            C2826 * C48460) *
               C48684 +
           C30763 * C48671 + C30764 * C48654) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
            C2830 * C48460) *
               C48691 +
           ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
            C2838 * C48460) *
               C48684 +
           ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
            C5250 * C48460) *
               C48671 +
           ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
            (C425 - C426) * C30749 + (C427 - C428) * C48460) *
               C48654) *
              C48345 * C48328 * C111 +
          (C30763 * C48691 + C30764 * C48684 +
           (C168 * C30748 + C169 * C30746 + (C426 - C425) * C30749 +
            (C428 - C427) * C48460) *
               C48671 +
           ((C161 - C160) * C30748 + (C163 - C162) * C30746 +
            (C48356 * C404 - C113 * C393) * C30749 +
            (C48356 * C411 - C113 * C405) * C48460) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C33476 +
            (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
            (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
            C18140 * C33479 + C18141 * C48666) *
               C23267 +
           ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
            C2826 * C48690 + C2827 * C33478 + C2828 * C48681 + C20170 * C33479 +
            C20171 * C48666) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C33476 + (C147 - C146) * C48693 + C2829 * C33477 +
            C2830 * C48690 + C2831 * C33478 + C2832 * C48681 + C20172 * C33479 +
            C20173 * C48666) *
               C23267 +
           ((C149 - C148) * C33476 + (C151 - C150) * C48693 + C2837 * C33477 +
            C2838 * C48690 + C2839 * C33478 + C2840 * C48681 +
            (C2841 - C2842) * C33479 + (C2843 - C2844) * C48666) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C164 * C33476 + C165 * C48693 + C2468 * C33477 + C2469 * C48690 +
            C2481 * C33478 + C2482 * C48681 + (C2842 - C2841) * C33479 +
            (C2844 - C2843) * C48666) *
               C23267 +
           (C166 * C33476 + C167 * C48693 + C4975 * C33477 + C4976 * C48690 +
            (C2475 - C2474) * C33478 + (C2477 - C2476) * C48681 +
            (C48356 * C2810 - C113 * C2803) * C33479 +
            (C48356 * C2815 - C113 * C2811) * C48666) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             (C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C30749 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C30749 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C30748 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C30746 +
             (C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30749 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C48460) *
                C23267 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C30748 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C30746 +
             (C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C30749 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C260 +
           (((C290 - C289) * C30748 + (C292 - C291) * C30746 +
             (C2640 - C2639) * C30749 + (C2642 - C2641) * C48460) *
                C48691 +
            ((C294 - C293) * C30748 + (C296 - C295) * C30746 +
             (C2648 - C2647) * C30749 + (C2650 - C2649) * C48460) *
                C48684 +
            ((C298 - C297) * C30748 + (C300 - C299) * C30746 +
             (C5116 - C5115) * C30749 + (C5118 - C5117) * C48460) *
                C48671 +
            ((C302 - C301) * C30748 + (C304 - C303) * C30746 +
             (C48356 * C695 - C113 * C686) * C30749 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C33476 +
             (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
             (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
             C18140 * C33479 + C18141 * C48666) *
                C23267 +
            ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
             C2826 * C48690 + C2827 * C33478 + C2828 * C48681 +
             C20170 * C33479 + C20171 * C48666) *
                C48271) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C33476 +
             (C113 * C271 - C48356 * C282) * C48693 + (C3259 - C3260) * C33477 +
             (C3261 - C3262) * C48690 + (C3263 - C3264) * C33478 +
             (C3265 - C3266) * C48681 + (C17902 - C17903) * C33479 +
             (C17904 - C17905) * C48666) *
                C23267 +
            ((C289 - C290) * C33476 + (C291 - C292) * C48693 +
             (C2639 - C2640) * C33477 + (C2641 - C2642) * C48690 +
             (C2643 - C2644) * C33478 + (C2645 - C2646) * C48681 +
             (C20036 - C20037) * C33479 + (C20038 - C20039) * C48666) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C33476 + (C147 - C146) * C48693 + C2829 * C33477 +
             C2830 * C48690 + C2831 * C33478 + C2832 * C48681 +
             C20172 * C33479 + C20173 * C48666) *
                C23267 +
            ((C149 - C148) * C33476 + (C151 - C150) * C48693 + C2837 * C33477 +
             C2838 * C48690 + C2839 * C33478 + C2840 * C48681 +
             (C2841 - C2842) * C33479 + (C2843 - C2844) * C48666) *
                C48271) *
               C48345 * C260 +
           (((C290 - C289) * C33476 + (C292 - C291) * C48693 +
             (C2640 - C2639) * C33477 + (C2642 - C2641) * C48690 +
             (C2644 - C2643) * C33478 + (C2646 - C2645) * C48681 +
             (C20037 - C20036) * C33479 + (C20039 - C20038) * C48666) *
                C23267 +
            ((C294 - C293) * C33476 + (C296 - C295) * C48693 +
             (C2648 - C2647) * C33477 + (C2650 - C2649) * C48690 +
             (C2652 - C2651) * C33478 + (C2654 - C2653) * C48681 +
             (C48356 * C3253 - C113 * C3248) * C33479 +
             (C48356 * C3257 - C113 * C3254) * C48666) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C386 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             C32305 * C30749 + C32306 * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C386 +
           ((C32303 * C30748 + C32304 * C30746 +
             (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C30749 +
             (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C48460) *
                C23267 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C30748 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C30746 +
             (C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
              C48650 * C2336 - C1071 * C2326) *
                 C30749 +
             (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
              C48650 * C2344 - C1071 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C386 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C386 +
           ((C2825 * C30748 + C2826 * C30746 + C2827 * C30749 +
             C2828 * C48460) *
                C48691 +
            (C2468 * C30748 + C2469 * C30746 + C2481 * C30749 +
             C2482 * C48460) *
                C48684 +
            (C4975 * C30748 + C4976 * C30746 + (C2475 - C2474) * C30749 +
             (C2477 - C2476) * C48460) *
                C48671 +
            ((C426 - C425) * C30748 + (C428 - C427) * C30746 +
             (C48356 * C946 - C113 * C937) * C30749 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C33476 +
             (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
             (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
             C18140 * C33479 + C18141 * C48666) *
                C23267 +
            ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
             C2826 * C48690 + C2827 * C33478 + C2828 * C48681 +
             C20170 * C33479 + C20171 * C48666) *
                C48271) *
               C386 +
           (((C2818 - C2817) * C33476 + (C2820 - C2819) * C48693 +
             (C2822 - C2821) * C33477 + (C2824 - C2823) * C48690 +
             (C3683 - C3684) * C33478 + (C3685 - C3686) * C48681 +
             (C17665 - C17664) * C33479 + (C17667 - C17666) * C48666) *
                C23267 +
            (C2829 * C33476 + C2830 * C48693 + C2831 * C33477 + C2832 * C48690 +
             C20172 * C33478 + C20173 * C48681 + (C17668 - C17669) * C33479 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C33476 + (C147 - C146) * C48693 + C2829 * C33477 +
             C2830 * C48690 + C2831 * C33478 + C2832 * C48681 +
             C20172 * C33479 + C20173 * C48666) *
                C23267 +
            ((C149 - C148) * C33476 + (C151 - C150) * C48693 + C2837 * C33477 +
             C2838 * C48690 + C2839 * C33478 + C2840 * C48681 +
             (C2841 - C2842) * C33479 + (C2843 - C2844) * C48666) *
                C48271) *
               C386 +
           ((C2825 * C33476 + C2826 * C48693 + C2827 * C33477 + C2828 * C48690 +
             C20170 * C33478 + C20171 * C48681 + (C17669 - C17668) * C33479 +
             (C17671 - C17670) * C48666) *
                C23267 +
            (C2468 * C33476 + C2469 * C48693 + C2481 * C33477 + C2482 * C48690 +
             (C2842 - C2841) * C33478 + (C2844 - C2843) * C48681 +
             (C48356 * C3675 - C113 * C3670) * C33479 +
             (C48356 * C3679 - C113 * C3676) * C48666) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C48345 * C510 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             C32305 * C30749 + C32306 * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C48345 * C510 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C30748 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C30746 +
             (C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30749 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C48460) *
                C23267 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C30748 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C30746 +
             (C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C30749 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C510 +
           (((C290 - C289) * C30748 + (C292 - C291) * C30746 +
             (C2640 - C2639) * C30749 + (C2642 - C2641) * C48460) *
                C48691 +
            ((C294 - C293) * C30748 + (C296 - C295) * C30746 +
             (C2648 - C2647) * C30749 + (C2650 - C2649) * C48460) *
                C48684 +
            ((C298 - C297) * C30748 + (C300 - C299) * C30746 +
             (C5116 - C5115) * C30749 + (C5118 - C5117) * C48460) *
                C48671 +
            ((C302 - C301) * C30748 + (C304 - C303) * C30746 +
             (C48356 * C695 - C113 * C686) * C30749 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C33476 +
             (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
             (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
             C18140 * C33479 + C18141 * C48666) *
                C23267 +
            ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
             C2826 * C48690 + C2827 * C33478 + C2828 * C48681 +
             C20170 * C33479 + C20171 * C48666) *
                C48271) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C33476 +
             (C113 * C271 - C48356 * C282) * C48693 + (C3259 - C3260) * C33477 +
             (C3261 - C3262) * C48690 + (C3263 - C3264) * C33478 +
             (C3265 - C3266) * C48681 + (C17902 - C17903) * C33479 +
             (C17904 - C17905) * C48666) *
                C23267 +
            ((C289 - C290) * C33476 + (C291 - C292) * C48693 +
             (C2639 - C2640) * C33477 + (C2641 - C2642) * C48690 +
             (C2643 - C2644) * C33478 + (C2645 - C2646) * C48681 +
             (C20036 - C20037) * C33479 + (C20038 - C20039) * C48666) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C33476 + (C147 - C146) * C48693 + C2829 * C33477 +
             C2830 * C48690 + C2831 * C33478 + C2832 * C48681 +
             C20172 * C33479 + C20173 * C48666) *
                C23267 +
            ((C149 - C148) * C33476 + (C151 - C150) * C48693 + C2837 * C33477 +
             C2838 * C48690 + C2839 * C33478 + C2840 * C48681 +
             (C2841 - C2842) * C33479 + (C2843 - C2844) * C48666) *
                C48271) *
               C48345 * C510 +
           (((C290 - C289) * C33476 + (C292 - C291) * C48693 +
             (C2640 - C2639) * C33477 + (C2642 - C2641) * C48690 +
             (C2644 - C2643) * C33478 + (C2646 - C2645) * C48681 +
             (C20037 - C20036) * C33479 + (C20039 - C20038) * C48666) *
                C23267 +
            ((C294 - C293) * C33476 + (C296 - C295) * C48693 +
             (C2648 - C2647) * C33477 + (C2650 - C2649) * C48690 +
             (C2652 - C2651) * C33478 + (C2654 - C2653) * C48681 +
             (C48356 * C3253 - C113 * C3248) * C33479 +
             (C48356 * C3257 - C113 * C3254) * C48666) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C30748 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C30746 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
               C23267 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
            C32303 * C30749 + C32304 * C48460) *
               C48271) *
              C48345 * C576 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C30748 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C30746 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
            (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
               C23267 +
           ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
            (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
            (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
            (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
               C48271) *
              C48345 * C577 +
          (((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
             C48650 * C1752 - C1071 * C1749) *
                C30748 +
            (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
             C48650 * C1758 - C1071 * C1753) *
                C30746 +
            (C48685 * C1457 - C1069 * C1453 + C48673 * C1910 - C1070 * C1907 +
             C48650 * C9214 - C1071 * C9212) *
                C30749 +
            (C48685 * C1465 - C1069 * C1458 + C48673 * C1916 - C1070 * C1911 +
             C48650 * C9218 - C1071 * C9215) *
                C48460) *
               C23267 +
           ((C48685 * C587 - C1069 * C581 + C48673 * C1273 - C1070 * C1268 +
             C48650 * C1754 - C1071 * C1750) *
                C30748 +
            (C48685 * C596 - C1069 * C588 + C48673 * C1280 - C1070 * C1274 +
             C48650 * C1759 - C1071 * C1755) *
                C30746 +
            (C48685 * C1459 - C1069 * C1454 + C48673 * C1912 - C1070 * C1908 +
             C48650 * C9216 - C1071 * C9213) *
                C30749 +
            (C48685 * C1466 - C1069 * C1460 + C48673 * C1917 - C1070 * C1913 +
             C48650 * C9219 - C1071 * C9217) *
                C48460) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C30748 +
            (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
            (C2819 - C2820) * C48460) *
               C48691 +
           ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
            C2826 * C48460) *
               C48684 +
           C30763 * C48671 + C30764 * C48654) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C30748 +
            (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
            (C3261 - C3262) * C48460) *
               C48691 +
           ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
            (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
               C48684 +
           ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
            (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
               C48671 +
           ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
            (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
               C48654) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C30748 +
            (C48356 * C595 - C113 * C586) * C30746 +
            (C48356 * C1457 - C113 * C1453) * C30749 +
            (C48356 * C1465 - C113 * C1458) * C48460) *
               C48691 +
           ((C48356 * C587 - C113 * C581) * C30748 +
            (C48356 * C596 - C113 * C588) * C30746 +
            (C48356 * C1459 - C113 * C1454) * C30749 +
            (C48356 * C1466 - C113 * C1460) * C48460) *
               C48684 +
           ((C48356 * C589 - C113 * C582) * C30748 +
            (C48356 * C597 - C113 * C590) * C30746 +
            (C48356 * C1461 - C113 * C1455) * C30749 +
            (C48356 * C1467 - C113 * C1462) * C48460) *
               C48671 +
           ((C48356 * C591 - C113 * C583) * C30748 +
            (C48356 * C598 - C113 * C592) * C30746 +
            (C48356 * C1463 - C113 * C1456) * C30749 +
            (C48356 * C1468 - C113 * C1464) * C48460) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C33476 +
            (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
            (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
            C18140 * C33479 + C18141 * C48666) *
               C23267 +
           ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
            C2826 * C48690 + C2827 * C33478 + C2828 * C48681 + C20170 * C33479 +
            C20171 * C48666) *
               C48271) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C33476 +
            (C113 * C271 - C48356 * C282) * C48693 + (C3259 - C3260) * C33477 +
            (C3261 - C3262) * C48690 + (C3263 - C3264) * C33478 +
            (C3265 - C3266) * C48681 + (C17902 - C17903) * C33479 +
            (C17904 - C17905) * C48666) *
               C23267 +
           ((C289 - C290) * C33476 + (C291 - C292) * C48693 +
            (C2639 - C2640) * C33477 + (C2641 - C2642) * C48690 +
            (C2643 - C2644) * C33478 + (C2645 - C2646) * C48681 +
            (C20036 - C20037) * C33479 + (C20038 - C20039) * C48666) *
               C48271) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C33476 +
            (C48356 * C595 - C113 * C586) * C48693 +
            (C48356 * C1457 - C113 * C1453) * C33477 +
            (C48356 * C1465 - C113 * C1458) * C48690 +
            (C48356 * C2328 - C113 * C2322) * C33478 +
            (C48356 * C2340 - C113 * C2330) * C48681 +
            (C48356 * C10096 - C113 * C10094) * C33479 +
            (C48356 * C10100 - C113 * C10097) * C48666) *
               C23267 +
           ((C48356 * C587 - C113 * C581) * C33476 +
            (C48356 * C596 - C113 * C588) * C48693 +
            (C48356 * C1459 - C113 * C1454) * C33477 +
            (C48356 * C1466 - C113 * C1460) * C48690 +
            (C48356 * C2332 - C113 * C2324) * C33478 +
            (C48356 * C2342 - C113 * C2334) * C48681 +
            (C48356 * C10098 - C113 * C10095) * C33479 +
            (C48356 * C10101 - C113 * C10099) * C48666) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C386 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C510 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C386 +
           (((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C30748 +
             (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C30746 +
             (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C30749 +
             (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C48460) *
                C23267 +
            ((C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30748 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C30746 +
             (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
              C48650 * C9945 - C1071 * C9944) *
                 C30749 +
             (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
              C48650 * C9947 - C1071 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C386 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C386 +
           (((C3260 - C3259) * C30748 + (C3262 - C3261) * C30746 +
             (C3264 - C3263) * C30749 + (C3266 - C3265) * C48460) *
                C48691 +
            ((C2640 - C2639) * C30748 + (C2642 - C2641) * C30746 +
             (C2644 - C2643) * C30749 + (C2646 - C2645) * C48460) *
                C48684 +
            ((C2648 - C2647) * C30748 + (C2650 - C2649) * C30746 +
             (C2652 - C2651) * C30749 + (C2654 - C2653) * C48460) *
                C48671 +
            ((C5116 - C5115) * C30748 + (C5118 - C5117) * C30746 +
             (C48356 * C2635 - C113 * C2634) * C30749 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C33476 +
             (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
             (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
             C18140 * C33479 + C18141 * C48666) *
                C23267 +
            ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
             C2826 * C48690 + C2827 * C33478 + C2828 * C48681 +
             C20170 * C33479 + C20171 * C48666) *
                C48271) *
               C386 +
           (((C2818 - C2817) * C33476 + (C2820 - C2819) * C48693 +
             (C2822 - C2821) * C33477 + (C2824 - C2823) * C48690 +
             (C3683 - C3684) * C33478 + (C3685 - C3686) * C48681 +
             (C17665 - C17664) * C33479 + (C17667 - C17666) * C48666) *
                C23267 +
            (C2829 * C33476 + C2830 * C48693 + C2831 * C33477 + C2832 * C48690 +
             C20172 * C33478 + C20173 * C48681 + (C17668 - C17669) * C33479 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C33476 +
             (C113 * C271 - C48356 * C282) * C48693 + (C3259 - C3260) * C33477 +
             (C3261 - C3262) * C48690 + (C3263 - C3264) * C33478 +
             (C3265 - C3266) * C48681 + (C17902 - C17903) * C33479 +
             (C17904 - C17905) * C48666) *
                C23267 +
            ((C289 - C290) * C33476 + (C291 - C292) * C48693 +
             (C2639 - C2640) * C33477 + (C2641 - C2642) * C48690 +
             (C2643 - C2644) * C33478 + (C2645 - C2646) * C48681 +
             (C20036 - C20037) * C33479 + (C20038 - C20039) * C48666) *
                C48271) *
               C386 +
           (((C3260 - C3259) * C33476 + (C3262 - C3261) * C48693 +
             (C3264 - C3263) * C33477 + (C3266 - C3265) * C48690 +
             (C17903 - C17902) * C33478 + (C17905 - C17904) * C48681 +
             (C17907 - C17906) * C33479 + (C17909 - C17908) * C48666) *
                C23267 +
            ((C2640 - C2639) * C33476 + (C2642 - C2641) * C48693 +
             (C2644 - C2643) * C33477 + (C2646 - C2645) * C48690 +
             (C20037 - C20036) * C33478 + (C20039 - C20038) * C48681 +
             (C48356 * C17570 - C113 * C17569) * C33479 +
             (C48356 * C17572 - C113 * C17571) * C48666) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C784 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             C32305 * C30749 + C32306 * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C784 +
           ((C32303 * C30748 + C32304 * C30746 +
             (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C30749 +
             (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C48460) *
                C23267 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C30748 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C30746 +
             (C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
              C48650 * C2336 - C1071 * C2326) *
                 C30749 +
             (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
              C48650 * C2344 - C1071 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C784 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C784 +
           ((C2825 * C30748 + C2826 * C30746 + C2827 * C30749 +
             C2828 * C48460) *
                C48691 +
            (C2468 * C30748 + C2469 * C30746 + C2481 * C30749 +
             C2482 * C48460) *
                C48684 +
            (C4975 * C30748 + C4976 * C30746 + (C2475 - C2474) * C30749 +
             (C2477 - C2476) * C48460) *
                C48671 +
            ((C426 - C425) * C30748 + (C428 - C427) * C30746 +
             (C48356 * C946 - C113 * C937) * C30749 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C33476 +
             (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
             (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
             C18140 * C33479 + C18141 * C48666) *
                C23267 +
            ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
             C2826 * C48690 + C2827 * C33478 + C2828 * C48681 +
             C20170 * C33479 + C20171 * C48666) *
                C48271) *
               C784 +
           (((C2818 - C2817) * C33476 + (C2820 - C2819) * C48693 +
             (C2822 - C2821) * C33477 + (C2824 - C2823) * C48690 +
             (C3683 - C3684) * C33478 + (C3685 - C3686) * C48681 +
             (C17665 - C17664) * C33479 + (C17667 - C17666) * C48666) *
                C23267 +
            (C2829 * C33476 + C2830 * C48693 + C2831 * C33477 + C2832 * C48690 +
             C20172 * C33478 + C20173 * C48681 + (C17668 - C17669) * C33479 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C33476 + (C147 - C146) * C48693 + C2829 * C33477 +
             C2830 * C48690 + C2831 * C33478 + C2832 * C48681 +
             C20172 * C33479 + C20173 * C48666) *
                C23267 +
            ((C149 - C148) * C33476 + (C151 - C150) * C48693 + C2837 * C33477 +
             C2838 * C48690 + C2839 * C33478 + C2840 * C48681 +
             (C2841 - C2842) * C33479 + (C2843 - C2844) * C48666) *
                C48271) *
               C784 +
           ((C2825 * C33476 + C2826 * C48693 + C2827 * C33477 + C2828 * C48690 +
             C20170 * C33478 + C20171 * C48681 + (C17669 - C17668) * C33479 +
             (C17671 - C17670) * C48666) *
                C23267 +
            (C2468 * C33476 + C2469 * C48693 + C2481 * C33477 + C2482 * C48690 +
             (C2842 - C2841) * C33478 + (C2844 - C2843) * C48681 +
             (C48356 * C3675 - C113 * C3670) * C33479 +
             (C48356 * C3679 - C113 * C3676) * C48666) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C784 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C260 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C784 +
           (((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C30748 +
             (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C30746 +
             (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C30749 +
             (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C48460) *
                C23267 +
            ((C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30748 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C30746 +
             (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
              C48650 * C9945 - C1071 * C9944) *
                 C30749 +
             (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
              C48650 * C9947 - C1071 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C784 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C784 +
           (((C3260 - C3259) * C30748 + (C3262 - C3261) * C30746 +
             (C3264 - C3263) * C30749 + (C3266 - C3265) * C48460) *
                C48691 +
            ((C2640 - C2639) * C30748 + (C2642 - C2641) * C30746 +
             (C2644 - C2643) * C30749 + (C2646 - C2645) * C48460) *
                C48684 +
            ((C2648 - C2647) * C30748 + (C2650 - C2649) * C30746 +
             (C2652 - C2651) * C30749 + (C2654 - C2653) * C48460) *
                C48671 +
            ((C5116 - C5115) * C30748 + (C5118 - C5117) * C30746 +
             (C48356 * C2635 - C113 * C2634) * C30749 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C33476 +
             (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
             (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
             C18140 * C33479 + C18141 * C48666) *
                C23267 +
            ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
             C2826 * C48690 + C2827 * C33478 + C2828 * C48681 +
             C20170 * C33479 + C20171 * C48666) *
                C48271) *
               C784 +
           (((C2818 - C2817) * C33476 + (C2820 - C2819) * C48693 +
             (C2822 - C2821) * C33477 + (C2824 - C2823) * C48690 +
             (C3683 - C3684) * C33478 + (C3685 - C3686) * C48681 +
             (C17665 - C17664) * C33479 + (C17667 - C17666) * C48666) *
                C23267 +
            (C2829 * C33476 + C2830 * C48693 + C2831 * C33477 + C2832 * C48690 +
             C20172 * C33478 + C20173 * C48681 + (C17668 - C17669) * C33479 +
             (C17670 - C17671) * C48666) *
                C48271) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C33476 +
             (C113 * C271 - C48356 * C282) * C48693 + (C3259 - C3260) * C33477 +
             (C3261 - C3262) * C48690 + (C3263 - C3264) * C33478 +
             (C3265 - C3266) * C48681 + (C17902 - C17903) * C33479 +
             (C17904 - C17905) * C48666) *
                C23267 +
            ((C289 - C290) * C33476 + (C291 - C292) * C48693 +
             (C2639 - C2640) * C33477 + (C2641 - C2642) * C48690 +
             (C2643 - C2644) * C33478 + (C2645 - C2646) * C48681 +
             (C20036 - C20037) * C33479 + (C20038 - C20039) * C48666) *
                C48271) *
               C784 +
           (((C3260 - C3259) * C33476 + (C3262 - C3261) * C48693 +
             (C3264 - C3263) * C33477 + (C3266 - C3265) * C48690 +
             (C17903 - C17902) * C33478 + (C17905 - C17904) * C48681 +
             (C17907 - C17906) * C33479 + (C17909 - C17908) * C48666) *
                C23267 +
            ((C2640 - C2639) * C33476 + (C2642 - C2641) * C48693 +
             (C2644 - C2643) * C33477 + (C2646 - C2645) * C48690 +
             (C20037 - C20036) * C33478 + (C20039 - C20038) * C48681 +
             (C48356 * C17570 - C113 * C17569) * C33479 +
             (C48356 * C17572 - C113 * C17571) * C48666) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C30748 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C30746 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
               C23267 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
            C32303 * C30749 + C32304 * C48460) *
               C48271) *
              C930 +
          (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
               C23267 +
           (C32305 * C30748 + C32306 * C30746 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
               C48271) *
              C931 +
          ((C17414 * C30748 + C17415 * C30746 +
            (C17401 - C17400 + C17403 - C17402 + C17405 - C17404) * C30749 +
            (C17407 - C17406 + C17409 - C17408 + C17411 - C17410) * C48460) *
               C23267 +
           ((C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C30748 +
            (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C30746 +
            (C48685 * C2806 - C1069 * C2801 + C48673 * C3251 - C1070 * C3247 +
             C48650 * C10098 - C1071 * C10095) *
                C30749 +
            (C48685 * C2813 - C1069 * C2807 + C48673 * C3256 - C1070 * C3252 +
             C48650 * C10101 - C1071 * C10099) *
                C48460) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C30748 +
            (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
            (C2819 - C2820) * C48460) *
               C48691 +
           ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
            C2826 * C48460) *
               C48684 +
           C30763 * C48671 + C30764 * C48654) *
              C930 +
          (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
            (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
               C48691 +
           (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 + C2832 * C48460) *
               C48684 +
           (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 + C2840 * C48460) *
               C48671 +
           (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
            (C2476 - C2477) * C48460) *
               C48654) *
              C931 +
          ((C3681 * C30748 + C3682 * C30746 + C18140 * C30749 +
            C18141 * C48460) *
               C48691 +
           (C2827 * C30748 + C2828 * C30746 + C20170 * C30749 +
            C20171 * C48460) *
               C48684 +
           (C2481 * C30748 + C2482 * C30746 + (C2842 - C2841) * C30749 +
            (C2844 - C2843) * C48460) *
               C48671 +
           ((C2475 - C2474) * C30748 + (C2477 - C2476) * C30746 +
            (C48356 * C2810 - C113 * C2803) * C30749 +
            (C48356 * C2815 - C113 * C2811) * C48460) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C33476 +
            (C48356 * C136 - C113 * C123) * C48693 + (C2817 - C2818) * C33477 +
            (C2819 - C2820) * C48690 + C3681 * C33478 + C3682 * C48681 +
            C18140 * C33479 + C18141 * C48666) *
               C23267 +
           ((C144 - C145) * C33476 + (C146 - C147) * C48693 + C2825 * C33477 +
            C2826 * C48690 + C2827 * C33478 + C2828 * C48681 + C20170 * C33479 +
            C20171 * C48666) *
               C48271) *
              C930 +
          (((C2818 - C2817) * C33476 + (C2820 - C2819) * C48693 +
            (C2822 - C2821) * C33477 + (C2824 - C2823) * C48690 +
            (C3683 - C3684) * C33478 + (C3685 - C3686) * C48681 +
            (C17665 - C17664) * C33479 + (C17667 - C17666) * C48666) *
               C23267 +
           (C2829 * C33476 + C2830 * C48693 + C2831 * C33477 + C2832 * C48690 +
            C20172 * C33478 + C20173 * C48681 + (C17668 - C17669) * C33479 +
            (C17670 - C17671) * C48666) *
               C48271) *
              C931 +
          ((C3681 * C33476 + C3682 * C48693 + C18140 * C33477 +
            C18141 * C48690 + C18142 * C33478 + C18143 * C48681 +
            (C18145 - C18144) * C33479 + (C18147 - C18146) * C48666) *
               C23267 +
           (C2827 * C33476 + C2828 * C48693 + C20170 * C33477 +
            C20171 * C48690 + (C17669 - C17668) * C33478 +
            (C17671 - C17670) * C48681 +
            (C48356 * C17659 - C113 * C17656) * C33479 +
            (C48356 * C17662 - C113 * C17660) * C48666) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C47360 +
            (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
            (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
               C48266 +
           ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
            C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
               C48274 +
           C36192 * C26140) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C47360 + (C147 - C146) * C48456 + C2829 * C47352 +
            C2830 * C48463 + C2831 * C47366 + C2832 * C36177) *
               C48266 +
           ((C149 - C148) * C47360 + (C151 - C150) * C48456 + C2837 * C47352 +
            C2838 * C48463 + C2839 * C47366 + C2840 * C36177) *
               C48274 +
           ((C153 - C152) * C47360 + (C155 - C154) * C48456 + C5249 * C47352 +
            C5250 * C48463 + (C2474 - C2475) * C47366 +
            (C2476 - C2477) * C36177) *
               C26140) *
              C48345 * C48328 * C111 +
          (C36192 * C48266 +
           (C166 * C47360 + C167 * C48456 + C4975 * C47352 + C4976 * C48463 +
            (C2475 - C2474) * C47366 + (C2477 - C2476) * C36177) *
               C48274 +
           (C168 * C47360 + C169 * C48456 + (C426 - C425) * C47352 +
            (C428 - C427) * C48463 + (C48356 * C946 - C113 * C937) * C47366 +
            (C48356 * C952 - C113 * C947) * C36177) *
               C26140) *
              C48345 * C48328 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C47360 +
             (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
             (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
                C48266 +
            ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
             C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
                C48274 +
            C36192 * C26140) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C47360 +
             (C113 * C271 - C48356 * C282) * C48456 + (C3259 - C3260) * C47352 +
             (C3261 - C3262) * C48463 + (C3263 - C3264) * C47366 +
             (C3265 - C3266) * C36177) *
                C48266 +
            ((C289 - C290) * C47360 + (C291 - C292) * C48456 +
             (C2639 - C2640) * C47352 + (C2641 - C2642) * C48463 +
             (C2643 - C2644) * C47366 + (C2645 - C2646) * C36177) *
                C48274 +
            ((C293 - C294) * C47360 + (C295 - C296) * C48456 +
             (C2647 - C2648) * C47352 + (C2649 - C2650) * C48463 +
             (C2651 - C2652) * C47366 + (C2653 - C2654) * C36177) *
                C26140) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C47360 + (C147 - C146) * C48456 + C2829 * C47352 +
             C2830 * C48463 + C2831 * C47366 + C2832 * C36177) *
                C48266 +
            ((C149 - C148) * C47360 + (C151 - C150) * C48456 + C2837 * C47352 +
             C2838 * C48463 + C2839 * C47366 + C2840 * C36177) *
                C48274 +
            ((C153 - C152) * C47360 + (C155 - C154) * C48456 + C5249 * C47352 +
             C5250 * C48463 + (C2474 - C2475) * C47366 +
             (C2476 - C2477) * C36177) *
                C26140) *
               C48345 * C260 +
           (((C290 - C289) * C47360 + (C292 - C291) * C48456 +
             (C2640 - C2639) * C47352 + (C2642 - C2641) * C48463 +
             (C2644 - C2643) * C47366 + (C2646 - C2645) * C36177) *
                C48266 +
            ((C294 - C293) * C47360 + (C296 - C295) * C48456 +
             (C2648 - C2647) * C47352 + (C2650 - C2649) * C48463 +
             (C2652 - C2651) * C47366 + (C2654 - C2653) * C36177) *
                C48274 +
            ((C298 - C297) * C47360 + (C300 - C299) * C48456 +
             (C5116 - C5115) * C47352 + (C5118 - C5117) * C48463 +
             (C48356 * C2635 - C113 * C2634) * C47366 +
             (C48356 * C2637 - C113 * C2636) * C36177) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C47360 +
             (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
             (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
                C48266 +
            ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
             C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
                C48274 +
            C36192 * C26140) *
               C386 +
           (((C2818 - C2817) * C47360 + (C2820 - C2819) * C48456 +
             (C2822 - C2821) * C47352 + (C2824 - C2823) * C48463 +
             (C3683 - C3684) * C47366 + (C3685 - C3686) * C36177) *
                C48266 +
            (C2829 * C47360 + C2830 * C48456 + C2831 * C47352 + C2832 * C48463 +
             C20172 * C47366 + C20173 * C36177) *
                C48274 +
            (C2837 * C47360 + C2838 * C48456 + C2839 * C47352 + C2840 * C48463 +
             (C2841 - C2842) * C47366 + (C2843 - C2844) * C36177) *
                C26140) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C47360 + (C147 - C146) * C48456 + C2829 * C47352 +
             C2830 * C48463 + C2831 * C47366 + C2832 * C36177) *
                C48266 +
            ((C149 - C148) * C47360 + (C151 - C150) * C48456 + C2837 * C47352 +
             C2838 * C48463 + C2839 * C47366 + C2840 * C36177) *
                C48274 +
            ((C153 - C152) * C47360 + (C155 - C154) * C48456 + C5249 * C47352 +
             C5250 * C48463 + (C2474 - C2475) * C47366 +
             (C2476 - C2477) * C36177) *
                C26140) *
               C386 +
           ((C2825 * C47360 + C2826 * C48456 + C2827 * C47352 + C2828 * C48463 +
             C20170 * C47366 + C20171 * C36177) *
                C48266 +
            (C2468 * C47360 + C2469 * C48456 + C2481 * C47352 + C2482 * C48463 +
             (C2842 - C2841) * C47366 + (C2844 - C2843) * C36177) *
                C48274 +
            (C4975 * C47360 + C4976 * C48456 + (C2475 - C2474) * C47352 +
             (C2477 - C2476) * C48463 +
             (C48356 * C2810 - C113 * C2803) * C47366 +
             (C48356 * C2815 - C113 * C2811) * C36177) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C47360 +
             (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
             (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
                C48266 +
            ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
             C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
                C48274 +
            C36192 * C26140) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C47360 +
             (C113 * C271 - C48356 * C282) * C48456 + (C3259 - C3260) * C47352 +
             (C3261 - C3262) * C48463 + (C3263 - C3264) * C47366 +
             (C3265 - C3266) * C36177) *
                C48266 +
            ((C289 - C290) * C47360 + (C291 - C292) * C48456 +
             (C2639 - C2640) * C47352 + (C2641 - C2642) * C48463 +
             (C2643 - C2644) * C47366 + (C2645 - C2646) * C36177) *
                C48274 +
            ((C293 - C294) * C47360 + (C295 - C296) * C48456 +
             (C2647 - C2648) * C47352 + (C2649 - C2650) * C48463 +
             (C2651 - C2652) * C47366 + (C2653 - C2654) * C36177) *
                C26140) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C47360 + (C147 - C146) * C48456 + C2829 * C47352 +
             C2830 * C48463 + C2831 * C47366 + C2832 * C36177) *
                C48266 +
            ((C149 - C148) * C47360 + (C151 - C150) * C48456 + C2837 * C47352 +
             C2838 * C48463 + C2839 * C47366 + C2840 * C36177) *
                C48274 +
            ((C153 - C152) * C47360 + (C155 - C154) * C48456 + C5249 * C47352 +
             C5250 * C48463 + (C2474 - C2475) * C47366 +
             (C2476 - C2477) * C36177) *
                C26140) *
               C48345 * C510 +
           (((C290 - C289) * C47360 + (C292 - C291) * C48456 +
             (C2640 - C2639) * C47352 + (C2642 - C2641) * C48463 +
             (C2644 - C2643) * C47366 + (C2646 - C2645) * C36177) *
                C48266 +
            ((C294 - C293) * C47360 + (C296 - C295) * C48456 +
             (C2648 - C2647) * C47352 + (C2650 - C2649) * C48463 +
             (C2652 - C2651) * C47366 + (C2654 - C2653) * C36177) *
                C48274 +
            ((C298 - C297) * C47360 + (C300 - C299) * C48456 +
             (C5116 - C5115) * C47352 + (C5118 - C5117) * C48463 +
             (C48356 * C2635 - C113 * C2634) * C47366 +
             (C48356 * C2637 - C113 * C2636) * C36177) *
                C26140) *
               C48345 * C48645) *
              C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C47360 +
            (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
            (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
               C48266 +
           ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
            C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
               C48274 +
           C36192 * C26140) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C47360 +
            (C113 * C271 - C48356 * C282) * C48456 + (C3259 - C3260) * C47352 +
            (C3261 - C3262) * C48463 + (C3263 - C3264) * C47366 +
            (C3265 - C3266) * C36177) *
               C48266 +
           ((C289 - C290) * C47360 + (C291 - C292) * C48456 +
            (C2639 - C2640) * C47352 + (C2641 - C2642) * C48463 +
            (C2643 - C2644) * C47366 + (C2645 - C2646) * C36177) *
               C48274 +
           ((C293 - C294) * C47360 + (C295 - C296) * C48456 +
            (C2647 - C2648) * C47352 + (C2649 - C2650) * C48463 +
            (C2651 - C2652) * C47366 + (C2653 - C2654) * C36177) *
               C26140) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C47360 +
            (C48356 * C595 - C113 * C586) * C48456 +
            (C48356 * C1457 - C113 * C1453) * C47352 +
            (C48356 * C1465 - C113 * C1458) * C48463 +
            (C48356 * C2328 - C113 * C2322) * C47366 +
            (C48356 * C2340 - C113 * C2330) * C36177) *
               C48266 +
           ((C48356 * C587 - C113 * C581) * C47360 +
            (C48356 * C596 - C113 * C588) * C48456 +
            (C48356 * C1459 - C113 * C1454) * C47352 +
            (C48356 * C1466 - C113 * C1460) * C48463 +
            (C48356 * C2332 - C113 * C2324) * C47366 +
            (C48356 * C2342 - C113 * C2334) * C36177) *
               C48274 +
           ((C48356 * C589 - C113 * C582) * C47360 +
            (C48356 * C597 - C113 * C590) * C48456 +
            (C48356 * C1461 - C113 * C1455) * C47352 +
            (C48356 * C1467 - C113 * C1462) * C48463 +
            (C48356 * C2336 - C113 * C2326) * C47366 +
            (C48356 * C2344 - C113 * C2338) * C36177) *
               C26140) *
              C48345 * C578) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C47360 +
             (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
             (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
                C48266 +
            ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
             C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
                C48274 +
            C36192 * C26140) *
               C386 +
           (((C2818 - C2817) * C47360 + (C2820 - C2819) * C48456 +
             (C2822 - C2821) * C47352 + (C2824 - C2823) * C48463 +
             (C3683 - C3684) * C47366 + (C3685 - C3686) * C36177) *
                C48266 +
            (C2829 * C47360 + C2830 * C48456 + C2831 * C47352 + C2832 * C48463 +
             C20172 * C47366 + C20173 * C36177) *
                C48274 +
            (C2837 * C47360 + C2838 * C48456 + C2839 * C47352 + C2840 * C48463 +
             (C2841 - C2842) * C47366 + (C2843 - C2844) * C36177) *
                C26140) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C47360 +
             (C113 * C271 - C48356 * C282) * C48456 + (C3259 - C3260) * C47352 +
             (C3261 - C3262) * C48463 + (C3263 - C3264) * C47366 +
             (C3265 - C3266) * C36177) *
                C48266 +
            ((C289 - C290) * C47360 + (C291 - C292) * C48456 +
             (C2639 - C2640) * C47352 + (C2641 - C2642) * C48463 +
             (C2643 - C2644) * C47366 + (C2645 - C2646) * C36177) *
                C48274 +
            ((C293 - C294) * C47360 + (C295 - C296) * C48456 +
             (C2647 - C2648) * C47352 + (C2649 - C2650) * C48463 +
             (C2651 - C2652) * C47366 + (C2653 - C2654) * C36177) *
                C26140) *
               C386 +
           (((C3260 - C3259) * C47360 + (C3262 - C3261) * C48456 +
             (C3264 - C3263) * C47352 + (C3266 - C3265) * C48463 +
             (C17903 - C17902) * C47366 + (C17905 - C17904) * C36177) *
                C48266 +
            ((C2640 - C2639) * C47360 + (C2642 - C2641) * C48456 +
             (C2644 - C2643) * C47352 + (C2646 - C2645) * C48463 +
             (C20037 - C20036) * C47366 + (C20039 - C20038) * C36177) *
                C48274 +
            ((C2648 - C2647) * C47360 + (C2650 - C2649) * C48456 +
             (C2652 - C2651) * C47352 + (C2654 - C2653) * C48463 +
             (C48356 * C3253 - C113 * C3248) * C47366 +
             (C48356 * C3257 - C113 * C3254) * C36177) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C47360 +
             (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
             (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
                C48266 +
            ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
             C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
                C48274 +
            C36192 * C26140) *
               C784 +
           (((C2818 - C2817) * C47360 + (C2820 - C2819) * C48456 +
             (C2822 - C2821) * C47352 + (C2824 - C2823) * C48463 +
             (C3683 - C3684) * C47366 + (C3685 - C3686) * C36177) *
                C48266 +
            (C2829 * C47360 + C2830 * C48456 + C2831 * C47352 + C2832 * C48463 +
             C20172 * C47366 + C20173 * C36177) *
                C48274 +
            (C2837 * C47360 + C2838 * C48456 + C2839 * C47352 + C2840 * C48463 +
             (C2841 - C2842) * C47366 + (C2843 - C2844) * C36177) *
                C26140) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C47360 + (C147 - C146) * C48456 + C2829 * C47352 +
             C2830 * C48463 + C2831 * C47366 + C2832 * C36177) *
                C48266 +
            ((C149 - C148) * C47360 + (C151 - C150) * C48456 + C2837 * C47352 +
             C2838 * C48463 + C2839 * C47366 + C2840 * C36177) *
                C48274 +
            ((C153 - C152) * C47360 + (C155 - C154) * C48456 + C5249 * C47352 +
             C5250 * C48463 + (C2474 - C2475) * C47366 +
             (C2476 - C2477) * C36177) *
                C26140) *
               C784 +
           ((C2825 * C47360 + C2826 * C48456 + C2827 * C47352 + C2828 * C48463 +
             C20170 * C47366 + C20171 * C36177) *
                C48266 +
            (C2468 * C47360 + C2469 * C48456 + C2481 * C47352 + C2482 * C48463 +
             (C2842 - C2841) * C47366 + (C2844 - C2843) * C36177) *
                C48274 +
            (C4975 * C47360 + C4976 * C48456 + (C2475 - C2474) * C47352 +
             (C2477 - C2476) * C48463 +
             (C48356 * C2810 - C113 * C2803) * C47366 +
             (C48356 * C2815 - C113 * C2811) * C36177) *
                C26140) *
               C48647) *
              C48328 * C48643)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C47360 +
             (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
             (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
                C48266 +
            ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
             C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
                C48274 +
            C36192 * C26140) *
               C784 +
           (((C2818 - C2817) * C47360 + (C2820 - C2819) * C48456 +
             (C2822 - C2821) * C47352 + (C2824 - C2823) * C48463 +
             (C3683 - C3684) * C47366 + (C3685 - C3686) * C36177) *
                C48266 +
            (C2829 * C47360 + C2830 * C48456 + C2831 * C47352 + C2832 * C48463 +
             C20172 * C47366 + C20173 * C36177) *
                C48274 +
            (C2837 * C47360 + C2838 * C48456 + C2839 * C47352 + C2840 * C48463 +
             (C2841 - C2842) * C47366 + (C2843 - C2844) * C36177) *
                C26140) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C47360 +
             (C113 * C271 - C48356 * C282) * C48456 + (C3259 - C3260) * C47352 +
             (C3261 - C3262) * C48463 + (C3263 - C3264) * C47366 +
             (C3265 - C3266) * C36177) *
                C48266 +
            ((C289 - C290) * C47360 + (C291 - C292) * C48456 +
             (C2639 - C2640) * C47352 + (C2641 - C2642) * C48463 +
             (C2643 - C2644) * C47366 + (C2645 - C2646) * C36177) *
                C48274 +
            ((C293 - C294) * C47360 + (C295 - C296) * C48456 +
             (C2647 - C2648) * C47352 + (C2649 - C2650) * C48463 +
             (C2651 - C2652) * C47366 + (C2653 - C2654) * C36177) *
                C26140) *
               C784 +
           (((C3260 - C3259) * C47360 + (C3262 - C3261) * C48456 +
             (C3264 - C3263) * C47352 + (C3266 - C3265) * C48463 +
             (C17903 - C17902) * C47366 + (C17905 - C17904) * C36177) *
                C48266 +
            ((C2640 - C2639) * C47360 + (C2642 - C2641) * C48456 +
             (C2644 - C2643) * C47352 + (C2646 - C2645) * C48463 +
             (C20037 - C20036) * C47366 + (C20039 - C20038) * C36177) *
                C48274 +
            ((C2648 - C2647) * C47360 + (C2650 - C2649) * C48456 +
             (C2652 - C2651) * C47352 + (C2654 - C2653) * C48463 +
             (C48356 * C3253 - C113 * C3248) * C47366 +
             (C48356 * C3257 - C113 * C3254) * C36177) *
                C26140) *
               C48647) *
              C48645) *
         C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C47360 +
            (C48356 * C136 - C113 * C123) * C48456 + (C2817 - C2818) * C47352 +
            (C2819 - C2820) * C48463 + C3681 * C47366 + C3682 * C36177) *
               C48266 +
           ((C144 - C145) * C47360 + (C146 - C147) * C48456 + C2825 * C47352 +
            C2826 * C48463 + C2827 * C47366 + C2828 * C36177) *
               C48274 +
           C36192 * C26140) *
              C930 +
          (((C2818 - C2817) * C47360 + (C2820 - C2819) * C48456 +
            (C2822 - C2821) * C47352 + (C2824 - C2823) * C48463 +
            (C3683 - C3684) * C47366 + (C3685 - C3686) * C36177) *
               C48266 +
           (C2829 * C47360 + C2830 * C48456 + C2831 * C47352 + C2832 * C48463 +
            C20172 * C47366 + C20173 * C36177) *
               C48274 +
           (C2837 * C47360 + C2838 * C48456 + C2839 * C47352 + C2840 * C48463 +
            (C2841 - C2842) * C47366 + (C2843 - C2844) * C36177) *
               C26140) *
              C931 +
          ((C3681 * C47360 + C3682 * C48456 + C18140 * C47352 +
            C18141 * C48463 + C18142 * C47366 + C18143 * C36177) *
               C48266 +
           (C2827 * C47360 + C2828 * C48456 + C20170 * C47352 +
            C20171 * C48463 + (C17669 - C17668) * C47366 +
            (C17671 - C17670) * C36177) *
               C48274 +
           (C2481 * C47360 + C2482 * C48456 + (C2842 - C2841) * C47352 +
            (C2844 - C2843) * C48463 +
            (C48356 * C3675 - C113 * C3670) * C47366 +
            (C48356 * C3679 - C113 * C3676) * C36177) *
               C26140) *
              C932) *
         C48328 * C48294) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C30748 +
            (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
            (C2819 - C2820) * C48460) *
               C48691 +
           ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
            C2826 * C48460) *
               C48684 +
           C30763 * C48671 + C30764 * C48654) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
            C2830 * C48460) *
               C48691 +
           ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
            C2838 * C48460) *
               C48684 +
           ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
            C5250 * C48460) *
               C48671 +
           ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
            (C425 - C426) * C30749 + (C427 - C428) * C48460) *
               C48654) *
              C48345 * C48328 * C111 +
          (C30763 * C48691 + C30764 * C48684 +
           (C168 * C30748 + C169 * C30746 + (C426 - C425) * C30749 +
            (C428 - C427) * C48460) *
               C48671 +
           ((C161 - C160) * C30748 + (C163 - C162) * C30746 +
            (C48356 * C404 - C113 * C393) * C30749 +
            (C48356 * C411 - C113 * C405) * C48460) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C30748 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C30746 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
               C23267 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
            (C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C30749 +
            (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48460) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
            (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C30749 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48460) *
               C23267 +
           ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
            (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
            (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
            (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C1117 * C30748 + C1118 * C30746 +
            (C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C30749 +
            (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48460) *
               C23267 +
           ((C1098 - C1097 + C1100 - C1099 + C1102 - C1101) * C30748 +
            (C1104 - C1103 + C1106 - C1105 + C1108 - C1107) * C30746 +
            (C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
             C48650 * C1463 - C1071 * C1456) *
                C30749 +
            (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
             C48650 * C1468 - C1071 * C1464) *
                C48460) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C260 +
           (((C290 - C289) * C30748 + (C292 - C291) * C30746 +
             (C2640 - C2639) * C30749 + (C2642 - C2641) * C48460) *
                C48691 +
            ((C294 - C293) * C30748 + (C296 - C295) * C30746 +
             (C2648 - C2647) * C30749 + (C2650 - C2649) * C48460) *
                C48684 +
            ((C298 - C297) * C30748 + (C300 - C299) * C30746 +
             (C5116 - C5115) * C30749 + (C5118 - C5117) * C48460) *
                C48671 +
            ((C302 - C301) * C30748 + (C304 - C303) * C30746 +
             (C48356 * C695 - C113 * C686) * C30749 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             (C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C30749 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             (C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C30749 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C30748 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C30746 +
             (C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30749 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C48460) *
                C23267 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C30748 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C30746 +
             (C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C30749 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C386 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C386 +
           ((C2825 * C30748 + C2826 * C30746 + C2827 * C30749 +
             C2828 * C48460) *
                C48691 +
            (C2468 * C30748 + C2469 * C30746 + C2481 * C30749 +
             C2482 * C48460) *
                C48684 +
            (C4975 * C30748 + C4976 * C30746 + (C2475 - C2474) * C30749 +
             (C2477 - C2476) * C48460) *
                C48671 +
            ((C426 - C425) * C30748 + (C428 - C427) * C30746 +
             (C48356 * C946 - C113 * C937) * C30749 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C386 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             C32305 * C30749 + C32306 * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C386 +
           ((C32303 * C30748 + C32304 * C30746 +
             (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C30749 +
             (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C48460) *
                C23267 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C30748 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C30746 +
             (C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
              C48650 * C2336 - C1071 * C2326) *
                 C30749 +
             (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
              C48650 * C2344 - C1071 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C510 +
           (((C290 - C289) * C30748 + (C292 - C291) * C30746 +
             (C2640 - C2639) * C30749 + (C2642 - C2641) * C48460) *
                C48691 +
            ((C294 - C293) * C30748 + (C296 - C295) * C30746 +
             (C2648 - C2647) * C30749 + (C2650 - C2649) * C48460) *
                C48684 +
            ((C298 - C297) * C30748 + (C300 - C299) * C30746 +
             (C5116 - C5115) * C30749 + (C5118 - C5117) * C48460) *
                C48671 +
            ((C302 - C301) * C30748 + (C304 - C303) * C30746 +
             (C48356 * C695 - C113 * C686) * C30749 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C48345 * C510 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             C32305 * C30749 + C32306 * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C48345 * C510 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C30748 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C30746 +
             (C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30749 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C48460) *
                C23267 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C30748 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C30746 +
             (C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C30749 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C30748 +
            (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
            (C2819 - C2820) * C48460) *
               C48691 +
           ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
            C2826 * C48460) *
               C48684 +
           C30763 * C48671 + C30764 * C48654) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C30748 +
            (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
            (C3261 - C3262) * C48460) *
               C48691 +
           ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
            (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
               C48684 +
           ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
            (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
               C48671 +
           ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
            (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
               C48654) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C30748 +
            (C48356 * C595 - C113 * C586) * C30746 +
            (C48356 * C1457 - C113 * C1453) * C30749 +
            (C48356 * C1465 - C113 * C1458) * C48460) *
               C48691 +
           ((C48356 * C587 - C113 * C581) * C30748 +
            (C48356 * C596 - C113 * C588) * C30746 +
            (C48356 * C1459 - C113 * C1454) * C30749 +
            (C48356 * C1466 - C113 * C1460) * C48460) *
               C48684 +
           ((C48356 * C589 - C113 * C582) * C30748 +
            (C48356 * C597 - C113 * C590) * C30746 +
            (C48356 * C1461 - C113 * C1455) * C30749 +
            (C48356 * C1467 - C113 * C1462) * C48460) *
               C48671 +
           ((C48356 * C591 - C113 * C583) * C30748 +
            (C48356 * C598 - C113 * C592) * C30746 +
            (C48356 * C1463 - C113 * C1456) * C30749 +
            (C48356 * C1468 - C113 * C1464) * C48460) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C30748 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C30746 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
               C23267 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
            C32303 * C30749 + C32304 * C48460) *
               C48271) *
              C48345 * C576 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C30748 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C30746 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
            (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
               C23267 +
           ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
            (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
            (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
            (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
               C48271) *
              C48345 * C577 +
          (((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
             C48650 * C1752 - C1071 * C1749) *
                C30748 +
            (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
             C48650 * C1758 - C1071 * C1753) *
                C30746 +
            (C48685 * C1457 - C1069 * C1453 + C48673 * C1910 - C1070 * C1907 +
             C48650 * C9214 - C1071 * C9212) *
                C30749 +
            (C48685 * C1465 - C1069 * C1458 + C48673 * C1916 - C1070 * C1911 +
             C48650 * C9218 - C1071 * C9215) *
                C48460) *
               C23267 +
           ((C48685 * C587 - C1069 * C581 + C48673 * C1273 - C1070 * C1268 +
             C48650 * C1754 - C1071 * C1750) *
                C30748 +
            (C48685 * C596 - C1069 * C588 + C48673 * C1280 - C1070 * C1274 +
             C48650 * C1759 - C1071 * C1755) *
                C30746 +
            (C48685 * C1459 - C1069 * C1454 + C48673 * C1912 - C1070 * C1908 +
             C48650 * C9216 - C1071 * C9213) *
                C30749 +
            (C48685 * C1466 - C1069 * C1460 + C48673 * C1917 - C1070 * C1913 +
             C48650 * C9219 - C1071 * C9217) *
                C48460) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C386 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C386 +
           (((C3260 - C3259) * C30748 + (C3262 - C3261) * C30746 +
             (C3264 - C3263) * C30749 + (C3266 - C3265) * C48460) *
                C48691 +
            ((C2640 - C2639) * C30748 + (C2642 - C2641) * C30746 +
             (C2644 - C2643) * C30749 + (C2646 - C2645) * C48460) *
                C48684 +
            ((C2648 - C2647) * C30748 + (C2650 - C2649) * C30746 +
             (C2652 - C2651) * C30749 + (C2654 - C2653) * C48460) *
                C48671 +
            ((C5116 - C5115) * C30748 + (C5118 - C5117) * C30746 +
             (C48356 * C2635 - C113 * C2634) * C30749 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C386 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C510 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C386 +
           (((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C30748 +
             (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C30746 +
             (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C30749 +
             (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C48460) *
                C23267 +
            ((C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30748 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C30746 +
             (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
              C48650 * C9945 - C1071 * C9944) *
                 C30749 +
             (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
              C48650 * C9947 - C1071 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C784 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C30748 + (C147 - C146) * C30746 + C2829 * C30749 +
             C2830 * C48460) *
                C48691 +
            ((C149 - C148) * C30748 + (C151 - C150) * C30746 + C2837 * C30749 +
             C2838 * C48460) *
                C48684 +
            ((C153 - C152) * C30748 + (C155 - C154) * C30746 + C5249 * C30749 +
             C5250 * C48460) *
                C48671 +
            ((C157 - C156) * C30748 + (C159 - C158) * C30746 +
             (C425 - C426) * C30749 + (C427 - C428) * C48460) *
                C48654) *
               C784 +
           ((C2825 * C30748 + C2826 * C30746 + C2827 * C30749 +
             C2828 * C48460) *
                C48691 +
            (C2468 * C30748 + C2469 * C30746 + C2481 * C30749 +
             C2482 * C48460) *
                C48684 +
            (C4975 * C30748 + C4976 * C30746 + (C2475 - C2474) * C30749 +
             (C2477 - C2476) * C48460) *
                C48671 +
            ((C426 - C425) * C30748 + (C428 - C427) * C30746 +
             (C48356 * C946 - C113 * C937) * C30749 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C784 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C30748 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C30746 +
             C32305 * C30749 + C32306 * C48460) *
                C23267 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C30748 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C30746 +
             (C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C30749 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48460) *
                C48271) *
               C784 +
           ((C32303 * C30748 + C32304 * C30746 +
             (C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C30749 +
             (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C48460) *
                C23267 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C30748 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C30746 +
             (C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
              C48650 * C2336 - C1071 * C2326) *
                 C30749 +
             (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
              C48650 * C2344 - C1071 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C30748 +
             (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
             (C2819 - C2820) * C48460) *
                C48691 +
            ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
             C2826 * C48460) *
                C48684 +
            C30763 * C48671 + C30764 * C48654) *
               C784 +
           (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
             (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
                C48691 +
            (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 +
             C2832 * C48460) *
                C48684 +
            (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 +
             C2840 * C48460) *
                C48671 +
            (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C30748 +
             (C113 * C271 - C48356 * C282) * C30746 + (C3259 - C3260) * C30749 +
             (C3261 - C3262) * C48460) *
                C48691 +
            ((C289 - C290) * C30748 + (C291 - C292) * C30746 +
             (C2639 - C2640) * C30749 + (C2641 - C2642) * C48460) *
                C48684 +
            ((C293 - C294) * C30748 + (C295 - C296) * C30746 +
             (C2647 - C2648) * C30749 + (C2649 - C2650) * C48460) *
                C48671 +
            ((C297 - C298) * C30748 + (C299 - C300) * C30746 +
             (C5115 - C5116) * C30749 + (C5117 - C5118) * C48460) *
                C48654) *
               C784 +
           (((C3260 - C3259) * C30748 + (C3262 - C3261) * C30746 +
             (C3264 - C3263) * C30749 + (C3266 - C3265) * C48460) *
                C48691 +
            ((C2640 - C2639) * C30748 + (C2642 - C2641) * C30746 +
             (C2644 - C2643) * C30749 + (C2646 - C2645) * C48460) *
                C48684 +
            ((C2648 - C2647) * C30748 + (C2650 - C2649) * C30746 +
             (C2652 - C2651) * C30749 + (C2654 - C2653) * C48460) *
                C48671 +
            ((C5116 - C5115) * C30748 + (C5118 - C5117) * C30746 +
             (C48356 * C2635 - C113 * C2634) * C30749 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C30748 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C30746 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
             (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
                C23267 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
             C32303 * C30749 + C32304 * C48460) *
                C48271) *
               C784 +
           (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
             (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
             (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
             (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
                C23267 +
            (C32305 * C30748 + C32306 * C30746 +
             (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
             (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
                C48271) *
               C48647) *
              C260 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C30748 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C30746 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C30749 +
             (C16974 - C16975 + C16976 - C16977 + C16978 - C16979) * C48460) *
                C23267 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C30748 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C30746 +
             (C32081 - C32082 + C32083 - C32084 + C32085 - C32086) * C30749 +
             (C32087 - C32088 + C32089 - C32090 + C32091 - C32092) * C48460) *
                C48271) *
               C784 +
           (((C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C30748 +
             (C16975 - C16974 + C16977 - C16976 + C16979 - C16978) * C30746 +
             (C16981 - C16980 + C16983 - C16982 + C16985 - C16984) * C30749 +
             (C16987 - C16986 + C16989 - C16988 + C16991 - C16990) * C48460) *
                C23267 +
            ((C32082 - C32081 + C32084 - C32083 + C32086 - C32085) * C30748 +
             (C32088 - C32087 + C32090 - C32089 + C32092 - C32091) * C30746 +
             (C48685 * C2331 - C1069 * C2323 + C48673 * C2332 - C1070 * C2324 +
              C48650 * C9945 - C1071 * C9944) *
                 C30749 +
             (C48685 * C2341 - C1069 * C2333 + C48673 * C2342 - C1070 * C2334 +
              C48650 * C9947 - C1071 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C30748 +
            (C48356 * C136 - C113 * C123) * C30746 + (C2817 - C2818) * C30749 +
            (C2819 - C2820) * C48460) *
               C48691 +
           ((C144 - C145) * C30748 + (C146 - C147) * C30746 + C2825 * C30749 +
            C2826 * C48460) *
               C48684 +
           C30763 * C48671 + C30764 * C48654) *
              C930 +
          (((C2818 - C2817) * C30748 + (C2820 - C2819) * C30746 +
            (C2822 - C2821) * C30749 + (C2824 - C2823) * C48460) *
               C48691 +
           (C2829 * C30748 + C2830 * C30746 + C2831 * C30749 + C2832 * C48460) *
               C48684 +
           (C2837 * C30748 + C2838 * C30746 + C2839 * C30749 + C2840 * C48460) *
               C48671 +
           (C5249 * C30748 + C5250 * C30746 + (C2474 - C2475) * C30749 +
            (C2476 - C2477) * C48460) *
               C48654) *
              C931 +
          ((C3681 * C30748 + C3682 * C30746 + C18140 * C30749 +
            C18141 * C48460) *
               C48691 +
           (C2827 * C30748 + C2828 * C30746 + C20170 * C30749 +
            C20171 * C48460) *
               C48684 +
           (C2481 * C30748 + C2482 * C30746 + (C2842 - C2841) * C30749 +
            (C2844 - C2843) * C48460) *
               C48671 +
           ((C2475 - C2474) * C30748 + (C2477 - C2476) * C30746 +
            (C48356 * C2810 - C113 * C2803) * C30749 +
            (C48356 * C2815 - C113 * C2811) * C48460) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C30748 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C30746 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C30749 +
            (C16536 - C16537 + C16538 - C16539 + C16540 - C16541) * C48460) *
               C23267 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C30748 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C30746 +
            C32303 * C30749 + C32304 * C48460) *
               C48271) *
              C930 +
          (((C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C30748 +
            (C16537 - C16536 + C16539 - C16538 + C16541 - C16540) * C30746 +
            (C16543 - C16542 + C16545 - C16544 + C16547 - C16546) * C30749 +
            (C16549 - C16548 + C16551 - C16550 + C16553 - C16552) * C48460) *
               C23267 +
           (C32305 * C30748 + C32306 * C30746 +
            (C16554 - C16555 + C16556 - C16557 + C16558 - C16559) * C30749 +
            (C16560 - C16561 + C16562 - C16563 + C16564 - C16565) * C48460) *
               C48271) *
              C931 +
          ((C17414 * C30748 + C17415 * C30746 +
            (C17401 - C17400 + C17403 - C17402 + C17405 - C17404) * C30749 +
            (C17407 - C17406 + C17409 - C17408 + C17411 - C17410) * C48460) *
               C23267 +
           ((C16555 - C16554 + C16557 - C16556 + C16559 - C16558) * C30748 +
            (C16561 - C16560 + C16563 - C16562 + C16565 - C16564) * C30746 +
            (C48685 * C2806 - C1069 * C2801 + C48673 * C3251 - C1070 * C3247 +
             C48650 * C10098 - C1071 * C10095) *
                C30749 +
            (C48685 * C2813 - C1069 * C2807 + C48673 * C3256 - C1070 * C3252 +
             C48650 * C10101 - C1071 * C10099) *
                C48460) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C114 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48373) *
               C3786 +
           ((C3793 - C3794 + C3795 - C3796) * C114 +
            (C3797 - C3798 + C3799 - C3800) * C48373) *
               C3787 +
           C3841 * C3788 + C3842 * C48654) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C114 +
            (C3798 - C3797 + C3800 - C3799) * C48373) *
               C3786 +
           ((C3802 - C3801 + C3804 - C3803) * C114 +
            (C3806 - C3805 + C3808 - C3807) * C48373) *
               C3787 +
           ((C3810 - C3809 + C3812 - C3811) * C114 +
            (C3814 - C3813 + C3816 - C3815) * C48373) *
               C3788 +
           ((C3817 - C3818 + C3819 - C3820) * C114 +
            (C3821 - C3822 + C3823 - C3824) * C48373) *
               C48654) *
              C48345 * C48328 * C111 +
          (C3841 * C3786 + C3842 * C3787 +
           ((C3818 - C3817 + C3820 - C3819) * C114 +
            (C3822 - C3821 + C3824 - C3823) * C48373) *
               C3788 +
           ((C48617 * C132 - C3790 * C120 + C48418 * C280 - C3791 * C269) *
                C114 +
            (C48617 * C141 - C3790 * C133 + C48418 * C287 - C3791 * C281) *
                C48373) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C114 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48373) *
               C48595 +
           ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
             C11116) *
                C114 +
            (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
             C11124) *
                C48373) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C114 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48373) *
               C48595 +
           ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
             C11132) *
                C114 +
            (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
             C11140) *
                C48373) *
               C48271) *
              C48345 * C48328 * C111 +
          (((C11126 - C11125 + C11128 - C11127 + C11130 - C11129 + C11132 -
             C11131) *
                C114 +
            (C11134 - C11133 + C11136 - C11135 + C11138 - C11137 + C11140 -
             C11139) *
                C48373) *
               C48595 +
           ((C11098 * C128 - C11104 * C118 + C11099 * C276 - C11105 * C267 +
             C11100 * C591 - C11106 * C583 + C48660 * C1277 - C11107 * C1270) *
                C114 +
            (C11098 * C139 - C11104 * C129 + C11099 * C285 - C11105 * C277 +
             C11100 * C598 - C11106 * C592 + C48660 * C1282 - C11107 * C1278) *
                C48373) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C114 +
             (C3978 - C3977 + C3980 - C3979) * C48373) *
                C3786 +
            ((C3982 - C3981 + C3984 - C3983) * C114 +
             (C3986 - C3985 + C3988 - C3987) * C48373) *
                C3787 +
            ((C3990 - C3989 + C3992 - C3991) * C114 +
             (C3994 - C3993 + C3996 - C3995) * C48373) *
                C3788 +
            ((C48617 * C278 - C3790 * C268 + C48418 * C593 - C3791 * C584) *
                 C114 +
             (C48617 * C286 - C3790 * C279 + C48418 * C599 - C3791 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C48345 * C260 +
           (((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
              C11277) *
                 C114 +
             (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
              C11285) *
                 C48373) *
                C48595 +
            ((C11098 * C274 - C11104 * C266 + C11099 * C589 - C11105 * C582 +
              C11100 * C1275 - C11106 * C1269 + C48660 * C1756 -
              C11107 * C1751) *
                 C114 +
             (C11098 * C284 - C11104 * C275 + C11099 * C597 - C11105 * C590 +
              C11100 * C1281 - C11106 * C1276 + C48660 * C1760 -
              C11107 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C386 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C386 +
           (((C4128 - C4127 + C4130 - C4129) * C114 +
             (C4132 - C4131 + C4134 - C4133) * C48373) *
                C3786 +
            ((C4136 - C4135 + C4138 - C4137) * C114 +
             (C4140 - C4139 + C4142 - C4141) * C48373) *
                C3787 +
            ((C4144 - C4143 + C4146 - C4145) * C114 +
             (C4148 - C4147 + C4150 - C4149) * C48373) *
                C3788 +
            ((C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                 C114 +
             (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C386 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C386 +
           (((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
              C11423) *
                 C114 +
             (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
              C11431) *
                 C48373) *
                C48595 +
            ((C11098 * C398 - C11104 * C390 + C11099 * C691 - C11105 * C684 +
              C11100 * C1461 - C11106 * C1455 + C48660 * C1914 -
              C11107 * C1909) *
                 C114 +
             (C11098 * C408 - C11104 * C399 + C11099 * C699 - C11105 * C692 +
              C11100 * C1467 - C11106 * C1462 + C48660 * C1918 -
              C11107 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C114 +
             (C3978 - C3977 + C3980 - C3979) * C48373) *
                C3786 +
            ((C3982 - C3981 + C3984 - C3983) * C114 +
             (C3986 - C3985 + C3988 - C3987) * C48373) *
                C3787 +
            ((C3990 - C3989 + C3992 - C3991) * C114 +
             (C3994 - C3993 + C3996 - C3995) * C48373) *
                C3788 +
            ((C48617 * C278 - C3790 * C268 + C48418 * C593 - C3791 * C584) *
                 C114 +
             (C48617 * C286 - C3790 * C279 + C48418 * C599 - C3791 * C594) *
                 C48373) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C48345 * C510 +
           (((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
              C11277) *
                 C114 +
             (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
              C11285) *
                 C48373) *
                C48595 +
            ((C11098 * C274 - C11104 * C266 + C11099 * C589 - C11105 * C582 +
              C11100 * C1275 - C11106 * C1269 + C48660 * C1756 -
              C11107 * C1751) *
                 C114 +
             (C11098 * C284 - C11104 * C275 + C11099 * C597 - C11105 * C590 +
              C11100 * C1281 - C11106 * C1276 + C48660 * C1760 -
              C11107 * C1757) *
                 C48373) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C114 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48373) *
               C3786 +
           ((C3793 - C3794 + C3795 - C3796) * C114 +
            (C3797 - C3798 + C3799 - C3800) * C48373) *
               C3787 +
           C3841 * C3788 + C3842 * C48654) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C114 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C48373) *
               C3786 +
           ((C3973 - C3974 + C3975 - C3976) * C114 +
            (C3977 - C3978 + C3979 - C3980) * C48373) *
               C3787 +
           ((C3981 - C3982 + C3983 - C3984) * C114 +
            (C3985 - C3986 + C3987 - C3988) * C48373) *
               C3788 +
           ((C3989 - C3990 + C3991 - C3992) * C114 +
            (C3993 - C3994 + C3995 - C3996) * C48373) *
               C48654) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C114 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C48373) *
               C3786 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C114 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C48373) *
               C3787 +
           ((C48617 * C589 - C3790 * C582 + C48418 * C1275 - C3791 * C1269) *
                C114 +
            (C48617 * C597 - C3790 * C590 + C48418 * C1281 - C3791 * C1276) *
                C48373) *
               C3788 +
           ((C48617 * C591 - C3790 * C583 + C48418 * C1277 - C3791 * C1270) *
                C114 +
            (C48617 * C598 - C3790 * C592 + C48418 * C1282 - C3791 * C1278) *
                C48373) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C114 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48373) *
               C48595 +
           ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
             C11116) *
                C114 +
            (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
             C11124) *
                C48373) *
               C48271) *
              C48345 * C576 +
          (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C114 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48373) *
               C48595 +
           ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
             C11278) *
                C114 +
            (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
             C11286) *
                C48373) *
               C48271) *
              C48345 * C577 +
          (((C11098 * C585 - C11104 * C580 + C11099 * C1271 - C11105 * C1267 +
             C11100 * C1752 - C11106 * C1749 + C48660 * C9124 -
             C11107 * C9122) *
                C114 +
            (C11098 * C595 - C11104 * C586 + C11099 * C1279 - C11105 * C1272 +
             C11100 * C1758 - C11106 * C1753 + C48660 * C9128 -
             C11107 * C9125) *
                C48373) *
               C48595 +
           ((C11098 * C587 - C11104 * C581 + C11099 * C1273 - C11105 * C1268 +
             C11100 * C1754 - C11106 * C1750 + C48660 * C9126 -
             C11107 * C9123) *
                C114 +
            (C11098 * C596 - C11104 * C588 + C11099 * C1280 - C11105 * C1274 +
             C11100 * C1759 - C11106 * C1755 + C48660 * C9129 -
             C11107 * C9127) *
                C48373) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C386 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C386 +
           (((C48617 * C687 - C3790 * C682 + C48418 * C1457 - C3791 * C1453) *
                 C114 +
             (C48617 * C697 - C3790 * C688 + C48418 * C1465 - C3791 * C1458) *
                 C48373) *
                C3786 +
            ((C48617 * C689 - C3790 * C683 + C48418 * C1459 - C3791 * C1454) *
                 C114 +
             (C48617 * C698 - C3790 * C690 + C48418 * C1466 - C3791 * C1460) *
                 C48373) *
                C3787 +
            ((C48617 * C691 - C3790 * C684 + C48418 * C1461 - C3791 * C1455) *
                 C114 +
             (C48617 * C699 - C3790 * C692 + C48418 * C1467 - C3791 * C1462) *
                 C48373) *
                C3788 +
            ((C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C114 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C386 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C510 +
          ((((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C386 +
           (((C11098 * C687 - C11104 * C682 + C11099 * C1457 - C11105 * C1453 +
              C11100 * C1910 - C11106 * C1907 + C48660 * C9214 -
              C11107 * C9212) *
                 C114 +
             (C11098 * C697 - C11104 * C688 + C11099 * C1465 - C11105 * C1458 +
              C11100 * C1916 - C11106 * C1911 + C48660 * C9218 -
              C11107 * C9215) *
                 C48373) *
                C48595 +
            ((C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
              C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
              C11107 * C9213) *
                 C114 +
             (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
              C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
              C11107 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C784 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C114 +
             (C3798 - C3797 + C3800 - C3799) * C48373) *
                C3786 +
            ((C3802 - C3801 + C3804 - C3803) * C114 +
             (C3806 - C3805 + C3808 - C3807) * C48373) *
                C3787 +
            ((C3810 - C3809 + C3812 - C3811) * C114 +
             (C3814 - C3813 + C3816 - C3815) * C48373) *
                C3788 +
            ((C3817 - C3818 + C3819 - C3820) * C114 +
             (C3821 - C3822 + C3823 - C3824) * C48373) *
                C48654) *
               C784 +
           (((C4128 - C4127 + C4130 - C4129) * C114 +
             (C4132 - C4131 + C4134 - C4133) * C48373) *
                C3786 +
            ((C4136 - C4135 + C4138 - C4137) * C114 +
             (C4140 - C4139 + C4142 - C4141) * C48373) *
                C3787 +
            ((C4144 - C4143 + C4146 - C4145) * C114 +
             (C4148 - C4147 + C4150 - C4149) * C48373) *
                C3788 +
            ((C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                 C114 +
             (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                 C48373) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C784 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
              C11115) *
                 C114 +
             (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
              C11123) *
                 C48373) *
                C48595 +
            ((C11125 - C11126 + C11127 - C11128 + C11129 - C11130 + C11131 -
              C11132) *
                 C114 +
             (C11133 - C11134 + C11135 - C11136 + C11137 - C11138 + C11139 -
              C11140) *
                 C48373) *
                C48271) *
               C784 +
           (((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
              C11423) *
                 C114 +
             (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
              C11431) *
                 C48373) *
                C48595 +
            ((C11098 * C398 - C11104 * C390 + C11099 * C691 - C11105 * C684 +
              C11100 * C1461 - C11106 * C1455 + C48660 * C1914 -
              C11107 * C1909) *
                 C114 +
             (C11098 * C408 - C11104 * C399 + C11099 * C699 - C11105 * C692 +
              C11100 * C1467 - C11106 * C1462 + C48660 * C1918 -
              C11107 * C1915) *
                 C48373) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C114 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48373) *
                C3786 +
            ((C3793 - C3794 + C3795 - C3796) * C114 +
             (C3797 - C3798 + C3799 - C3800) * C48373) *
                C3787 +
            C3841 * C3788 + C3842 * C48654) *
               C784 +
           (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                 C114 +
             (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                 C48373) *
                C3786 +
            ((C4127 - C4128 + C4129 - C4130) * C114 +
             (C4131 - C4132 + C4133 - C4134) * C48373) *
                C3787 +
            ((C4135 - C4136 + C4137 - C4138) * C114 +
             (C4139 - C4140 + C4141 - C4142) * C48373) *
                C3788 +
            ((C4143 - C4144 + C4145 - C4146) * C114 +
             (C4147 - C4148 + C4149 - C4150) * C48373) *
                C48654) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C114 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48373) *
                C3786 +
            ((C3973 - C3974 + C3975 - C3976) * C114 +
             (C3977 - C3978 + C3979 - C3980) * C48373) *
                C3787 +
            ((C3981 - C3982 + C3983 - C3984) * C114 +
             (C3985 - C3986 + C3987 - C3988) * C48373) *
                C3788 +
            ((C3989 - C3990 + C3991 - C3992) * C114 +
             (C3993 - C3994 + C3995 - C3996) * C48373) *
                C48654) *
               C784 +
           (((C48617 * C687 - C3790 * C682 + C48418 * C1457 - C3791 * C1453) *
                 C114 +
             (C48617 * C697 - C3790 * C688 + C48418 * C1465 - C3791 * C1458) *
                 C48373) *
                C3786 +
            ((C48617 * C689 - C3790 * C683 + C48418 * C1459 - C3791 * C1454) *
                 C114 +
             (C48617 * C698 - C3790 * C690 + C48418 * C1466 - C3791 * C1460) *
                 C48373) *
                C3787 +
            ((C48617 * C691 - C3790 * C684 + C48418 * C1461 - C3791 * C1455) *
                 C114 +
             (C48617 * C699 - C3790 * C692 + C48418 * C1467 - C3791 * C1462) *
                 C48373) *
                C3788 +
            ((C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C114 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48373) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
              C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                 C114 +
             (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
              C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                 C48373) *
                C48595 +
            ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
              C11116) *
                 C114 +
             (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
              C11124) *
                 C48373) *
                C48271) *
               C784 +
           (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
              C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
              C48660 * C1910) *
                 C114 +
             (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
              C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
              C48660 * C1916) *
                 C48373) *
                C48595 +
            ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
              C11424) *
                 C114 +
             (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
              C11432) *
                 C48373) *
                C48271) *
               C48647) *
              C260 +
          ((((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
              C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
              C48660 * C1752) *
                 C114 +
             (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
              C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
              C48660 * C1758) *
                 C48373) *
                C48595 +
            ((C11271 - C11272 + C11273 - C11274 + C11275 - C11276 + C11277 -
              C11278) *
                 C114 +
             (C11279 - C11280 + C11281 - C11282 + C11283 - C11284 + C11285 -
              C11286) *
                 C48373) *
                C48271) *
               C784 +
           (((C11098 * C687 - C11104 * C682 + C11099 * C1457 - C11105 * C1453 +
              C11100 * C1910 - C11106 * C1907 + C48660 * C9214 -
              C11107 * C9212) *
                 C114 +
             (C11098 * C697 - C11104 * C688 + C11099 * C1465 - C11105 * C1458 +
              C11100 * C1916 - C11106 * C1911 + C48660 * C9218 -
              C11107 * C9215) *
                 C48373) *
                C48595 +
            ((C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
              C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
              C11107 * C9213) *
                 C114 +
             (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
              C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
              C11107 * C9217) *
                 C48373) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C114 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48373) *
               C3786 +
           ((C3793 - C3794 + C3795 - C3796) * C114 +
            (C3797 - C3798 + C3799 - C3800) * C48373) *
               C3787 +
           C3841 * C3788 + C3842 * C48654) *
              C930 +
          (((C3790 * C388 - C48617 * C394 + C3791 * C682 - C48418 * C687) *
                C114 +
            (C3790 * C395 - C48617 * C406 + C3791 * C688 - C48418 * C697) *
                C48373) *
               C3786 +
           ((C4127 - C4128 + C4129 - C4130) * C114 +
            (C4131 - C4132 + C4133 - C4134) * C48373) *
               C3787 +
           ((C4135 - C4136 + C4137 - C4138) * C114 +
            (C4139 - C4140 + C4141 - C4142) * C48373) *
               C3788 +
           ((C4143 - C4144 + C4145 - C4146) * C114 +
            (C4147 - C4148 + C4149 - C4150) * C48373) *
               C48654) *
              C931 +
          (((C48617 * C938 - C3790 * C933 + C48418 * C2327 - C3791 * C2321) *
                C114 +
            (C48617 * C948 - C3790 * C939 + C48418 * C2339 - C3791 * C2329) *
                C48373) *
               C3786 +
           ((C48617 * C940 - C3790 * C934 + C48418 * C2331 - C3791 * C2323) *
                C114 +
            (C48617 * C949 - C3790 * C941 + C48418 * C2341 - C3791 * C2333) *
                C48373) *
               C3787 +
           ((C48617 * C942 - C3790 * C935 + C48418 * C2335 - C3791 * C2325) *
                C114 +
            (C48617 * C950 - C3790 * C943 + C48418 * C2343 - C3791 * C2337) *
                C48373) *
               C3788 +
           ((C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                C114 +
            (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                C48373) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C114 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48373) *
               C48595 +
           ((C11109 - C11110 + C11111 - C11112 + C11113 - C11114 + C11115 -
             C11116) *
                C114 +
            (C11117 - C11118 + C11119 - C11120 + C11121 - C11122 + C11123 -
             C11124) *
                C48373) *
               C48271) *
              C930 +
          (((C11104 * C388 - C11098 * C394 + C11105 * C682 - C11099 * C687 +
             C11106 * C1453 - C11100 * C1457 + C11107 * C1907 -
             C48660 * C1910) *
                C114 +
            (C11104 * C395 - C11098 * C406 + C11105 * C688 - C11099 * C697 +
             C11106 * C1458 - C11100 * C1465 + C11107 * C1911 -
             C48660 * C1916) *
                C48373) *
               C48595 +
           ((C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C114 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48373) *
               C48271) *
              C931 +
          (((C11098 * C938 - C11104 * C933 + C11099 * C2327 - C11105 * C2321 +
             C11100 * C2328 - C11106 * C2322 + C48660 * C9682 -
             C11107 * C9680) *
                C114 +
            (C11098 * C948 - C11104 * C939 + C11099 * C2339 - C11105 * C2329 +
             C11100 * C2340 - C11106 * C2330 + C48660 * C9686 -
             C11107 * C9684) *
                C48373) *
               C48595 +
           ((C11098 * C940 - C11104 * C934 + C11099 * C2331 - C11105 * C2323 +
             C11100 * C2332 - C11106 * C2324 + C48660 * C9945 -
             C11107 * C9944) *
                C114 +
            (C11098 * C949 - C11104 * C941 + C11099 * C2341 - C11105 * C2333 +
             C11100 * C2342 - C11106 * C2334 + C48660 * C9947 -
             C11107 * C9946) *
                C48373) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C4966 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48618 +
            (C48617 * C394 - C3790 * C388 + C48418 * C687 - C3791 * C682) *
                C4967 +
            (C48617 * C406 - C3790 * C395 + C48418 * C697 - C3791 * C688) *
                C48460) *
               C1066 +
           ((C3793 - C3794 + C3795 - C3796) * C4966 +
            (C3797 - C3798 + C3799 - C3800) * C48618 +
            (C4128 - C4127 + C4130 - C4129) * C4967 +
            (C4132 - C4131 + C4134 - C4133) * C48460) *
               C1067 +
           C6125 * C48637) *
              C48345 * C48328 * C110 +
          (((C3794 - C3793 + C3796 - C3795) * C4966 +
            (C3798 - C3797 + C3800 - C3799) * C48618 +
            (C4127 - C4128 + C4129 - C4130) * C4967 +
            (C4131 - C4132 + C4133 - C4134) * C48460) *
               C1066 +
           ((C3802 - C3801 + C3804 - C3803) * C4966 +
            (C3806 - C3805 + C3808 - C3807) * C48618 +
            (C4135 - C4136 + C4137 - C4138) * C4967 +
            (C4139 - C4140 + C4141 - C4142) * C48460) *
               C1067 +
           ((C3810 - C3809 + C3812 - C3811) * C4966 +
            (C3814 - C3813 + C3816 - C3815) * C48618 +
            (C4143 - C4144 + C4145 - C4146) * C4967 +
            (C4147 - C4148 + C4149 - C4150) * C48460) *
               C48637) *
              C48345 * C48328 * C111 +
          (C6125 * C1066 +
           (C3835 * C4966 + C3836 * C48618 +
            (C4144 - C4143 + C4146 - C4145) * C4967 +
            (C4148 - C4147 + C4150 - C4149) * C48460) *
               C1067 +
           ((C3818 - C3817 + C3820 - C3819) * C4966 +
            (C3822 - C3821 + C3824 - C3823) * C48618 +
            (C48617 * C402 - C3790 * C392 + C48418 * C695 - C3791 * C686) *
                C4967 +
            (C48617 * C410 - C3790 * C403 + C48418 * C701 - C3791 * C696) *
                C48460) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
            C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
               C4966 +
           (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
            C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
               C48618 +
           (C11098 * C394 - C11104 * C388 + C11099 * C687 - C11105 * C682 +
            C11100 * C1457 - C11106 * C1453 + C48660 * C1910 - C11107 * C1907) *
               C4967 +
           (C11098 * C406 - C11104 * C395 + C11099 * C697 - C11105 * C688 +
            C11100 * C1465 - C11106 * C1458 + C48660 * C1916 - C11107 * C1911) *
               C48460) *
              C48261 * C48345 * C48328 * C110 +
          ((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
            C11115) *
               C4966 +
           (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
            C11123) *
               C48618 +
           (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
            C11424) *
               C4967 +
           (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
            C11432) *
               C48460) *
              C48261 * C48345 * C48328 * C111 +
          ((C11126 - C11125 + C11128 - C11127 + C11130 - C11129 + C11132 -
            C11131) *
               C4966 +
           (C11134 - C11133 + C11136 - C11135 + C11138 - C11137 + C11140 -
            C11139) *
               C48618 +
           (C11098 * C398 - C11104 * C390 + C11099 * C691 - C11105 * C684 +
            C11100 * C1461 - C11106 * C1455 + C48660 * C1914 - C11107 * C1909) *
               C4967 +
           (C11098 * C408 - C11104 * C399 + C11099 * C699 - C11105 * C692 +
            C11100 * C1467 - C11106 * C1462 + C48660 * C1918 - C11107 * C1915) *
               C48460) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C48617 * C394 - C3790 * C388 + C48418 * C687 - C3791 * C682) *
                 C4967 +
             (C48617 * C406 - C3790 * C395 + C48418 * C697 - C3791 * C688) *
                 C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 +
             (C4128 - C4127 + C4130 - C4129) * C4967 +
             (C4132 - C4131 + C4134 - C4133) * C48460) *
                C1067 +
            C6125 * C48637) *
               C48345 * C260 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C3790 * C682 - C48617 * C687 + C3791 * C1453 - C48418 * C1457) *
                 C4967 +
             (C3790 * C688 - C48617 * C697 + C3791 * C1458 - C48418 * C1465) *
                 C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 +
             (C4127 - C4128 + C4129 - C4130) * C4967 +
             (C4131 - C4132 + C4133 - C4134) * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 +
             (C4135 - C4136 + C4137 - C4138) * C4967 +
             (C4139 - C4140 + C4141 - C4142) * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C48345 * C260 +
           (((C3974 - C3973 + C3976 - C3975) * C4966 +
             (C3978 - C3977 + C3980 - C3979) * C48618 +
             (C6321 - C6320 + C6323 - C6322) * C4967 +
             (C6325 - C6324 + C6327 - C6326) * C48460) *
                C1066 +
            ((C3982 - C3981 + C3984 - C3983) * C4966 +
             (C3986 - C3985 + C3988 - C3987) * C48618 +
             (C6329 - C6328 + C6331 - C6330) * C4967 +
             (C6333 - C6332 + C6335 - C6334) * C48460) *
                C1067 +
            ((C3990 - C3989 + C3992 - C3991) * C4966 +
             (C3994 - C3993 + C3996 - C3995) * C48618 +
             (C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C4967 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C11098 * C394 - C11104 * C388 + C11099 * C687 - C11105 * C682 +
             C11100 * C1457 - C11106 * C1453 + C48660 * C1910 -
             C11107 * C1907) *
                C4967 +
            (C11098 * C406 - C11104 * C395 + C11099 * C697 - C11105 * C688 +
             C11100 * C1465 - C11106 * C1458 + C48660 * C1916 -
             C11107 * C1911) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C11104 * C682 - C11098 * C687 + C11105 * C1453 - C11099 * C1457 +
             C11106 * C1907 - C11100 * C1910 + C11107 * C9212 -
             C48660 * C9214) *
                C4967 +
            (C11104 * C688 - C11098 * C697 + C11105 * C1458 - C11099 * C1465 +
             C11106 * C1911 - C11100 * C1916 + C11107 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C48345 * C260 +
           ((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
             C11277) *
                C4966 +
            (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
             C11285) *
                C48618 +
            (C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
             C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
             C11107 * C9213) *
                C4967 +
            (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
             C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
             C11107 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 + C6568 * C4967 +
             C6569 * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 + C6570 * C4967 +
             C6571 * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C386 +
           ((C6566 * C4966 + C6567 * C48618 +
             (C6547 - C6546 + C6549 - C6548) * C4967 +
             (C6551 - C6550 + C6553 - C6552) * C48460) *
                C1066 +
            (C6120 * C4966 + C6121 * C48618 +
             (C6559 - C6558 + C6561 - C6560) * C4967 +
             (C6563 - C6562 + C6565 - C6564) * C48460) *
                C1067 +
            ((C4144 - C4143 + C4146 - C4145) * C4966 +
             (C4148 - C4147 + C4150 - C4149) * C48618 +
             (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                 C4967 +
             (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C386 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C386 +
           ((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
             C11423) *
                C4966 +
            (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
             C11431) *
                C48618 +
            (C11098 * C940 - C11104 * C934 + C11099 * C2331 - C11105 * C2323 +
             C11100 * C2332 - C11106 * C2324 + C48660 * C9945 -
             C11107 * C9944) *
                C4967 +
            (C11098 * C949 - C11104 * C941 + C11099 * C2341 - C11105 * C2333 +
             C11100 * C2342 - C11106 * C2334 + C48660 * C9947 -
             C11107 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C48345 * C510 +
           (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C3790 * C682 - C48617 * C687 + C3791 * C1453 - C48418 * C1457) *
                 C4967 +
             (C3790 * C688 - C48617 * C697 + C3791 * C1458 - C48418 * C1465) *
                 C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 + C6568 * C4967 +
             C6569 * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 + C6570 * C4967 +
             C6571 * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C48345 * C510 +
           (((C3974 - C3973 + C3976 - C3975) * C4966 +
             (C3978 - C3977 + C3980 - C3979) * C48618 +
             (C6321 - C6320 + C6323 - C6322) * C4967 +
             (C6325 - C6324 + C6327 - C6326) * C48460) *
                C1066 +
            ((C3982 - C3981 + C3984 - C3983) * C4966 +
             (C3986 - C3985 + C3988 - C3987) * C48618 +
             (C6329 - C6328 + C6331 - C6330) * C4967 +
             (C6333 - C6332 + C6335 - C6334) * C48460) *
                C1067 +
            ((C3990 - C3989 + C3992 - C3991) * C4966 +
             (C3994 - C3993 + C3996 - C3995) * C48618 +
             (C48617 * C693 - C3790 * C685 + C48418 * C1463 - C3791 * C1456) *
                 C4967 +
             (C48617 * C700 - C3790 * C694 + C48418 * C1468 - C3791 * C1464) *
                 C48460) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C11104 * C682 - C11098 * C687 + C11105 * C1453 - C11099 * C1457 +
             C11106 * C1907 - C11100 * C1910 + C11107 * C9212 -
             C48660 * C9214) *
                C4967 +
            (C11104 * C688 - C11098 * C697 + C11105 * C1458 - C11099 * C1465 +
             C11106 * C1911 - C11100 * C1916 + C11107 * C9215 -
             C48660 * C9218) *
                C48460) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C48345 * C510 +
           ((C11272 - C11271 + C11274 - C11273 + C11276 - C11275 + C11278 -
             C11277) *
                C4966 +
            (C11280 - C11279 + C11282 - C11281 + C11284 - C11283 + C11286 -
             C11285) *
                C48618 +
            (C11098 * C689 - C11104 * C683 + C11099 * C1459 - C11105 * C1454 +
             C11100 * C1912 - C11106 * C1908 + C48660 * C9216 -
             C11107 * C9213) *
                C4967 +
            (C11098 * C698 - C11104 * C690 + C11099 * C1466 - C11105 * C1460 +
             C11100 * C1917 - C11106 * C1913 + C48660 * C9219 -
             C11107 * C9217) *
                C48460) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C4966 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48618 +
            (C6530 - C6531 + C6532 - C6533) * C4967 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C1066 +
           ((C3793 - C3794 + C3795 - C3796) * C4966 +
            (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
            C6567 * C48460) *
               C1067 +
           C6125 * C48637) *
              C48345 * C576 +
          (((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                C4966 +
            (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                C48618 +
            (C3790 * C682 - C48617 * C687 + C3791 * C1453 - C48418 * C1457) *
                C4967 +
            (C3790 * C688 - C48617 * C697 + C3791 * C1458 - C48418 * C1465) *
                C48460) *
               C1066 +
           ((C3973 - C3974 + C3975 - C3976) * C4966 +
            (C3977 - C3978 + C3979 - C3980) * C48618 +
            (C6320 - C6321 + C6322 - C6323) * C4967 +
            (C6324 - C6325 + C6326 - C6327) * C48460) *
               C1067 +
           ((C3981 - C3982 + C3983 - C3984) * C4966 +
            (C3985 - C3986 + C3987 - C3988) * C48618 +
            (C6328 - C6329 + C6330 - C6331) * C4967 +
            (C6332 - C6333 + C6334 - C6335) * C48460) *
               C48637) *
              C48345 * C577 +
          (((C48617 * C585 - C3790 * C580 + C48418 * C1271 - C3791 * C1267) *
                C4966 +
            (C48617 * C595 - C3790 * C586 + C48418 * C1279 - C3791 * C1272) *
                C48618 +
            (C48617 * C1457 - C3790 * C1453 + C48418 * C1910 - C3791 * C1907) *
                C4967 +
            (C48617 * C1465 - C3790 * C1458 + C48418 * C1916 - C3791 * C1911) *
                C48460) *
               C1066 +
           ((C48617 * C587 - C3790 * C581 + C48418 * C1273 - C3791 * C1268) *
                C4966 +
            (C48617 * C596 - C3790 * C588 + C48418 * C1280 - C3791 * C1274) *
                C48618 +
            (C48617 * C1459 - C3790 * C1454 + C48418 * C1912 - C3791 * C1908) *
                C4967 +
            (C48617 * C1466 - C3790 * C1460 + C48418 * C1917 - C3791 * C1913) *
                C48460) *
               C1067 +
           ((C48617 * C589 - C3790 * C582 + C48418 * C1275 - C3791 * C1269) *
                C4966 +
            (C48617 * C597 - C3790 * C590 + C48418 * C1281 - C3791 * C1276) *
                C48618 +
            (C48617 * C1461 - C3790 * C1455 + C48418 * C1914 - C3791 * C1909) *
                C4967 +
            (C48617 * C1467 - C3790 * C1462 + C48418 * C1918 - C3791 * C1915) *
                C48460) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
            C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
               C4966 +
           (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
            C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
               C48618 +
           (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
            C14148) *
               C4967 +
           (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
            C14156) *
               C48460) *
              C48261 * C48345 * C576 +
          ((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
            C11106 * C1267 - C11100 * C1271 + C11107 * C1749 - C48660 * C1752) *
               C4966 +
           (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
            C11106 * C1272 - C11100 * C1279 + C11107 * C1753 - C48660 * C1758) *
               C48618 +
           (C11104 * C682 - C11098 * C687 + C11105 * C1453 - C11099 * C1457 +
            C11106 * C1907 - C11100 * C1910 + C11107 * C9212 - C48660 * C9214) *
               C4967 +
           (C11104 * C688 - C11098 * C697 + C11105 * C1458 - C11099 * C1465 +
            C11106 * C1911 - C11100 * C1916 + C11107 * C9215 - C48660 * C9218) *
               C48460) *
              C48261 * C48345 * C577 +
          ((C11098 * C585 - C11104 * C580 + C11099 * C1271 - C11105 * C1267 +
            C11100 * C1752 - C11106 * C1749 + C48660 * C9124 - C11107 * C9122) *
               C4966 +
           (C11098 * C595 - C11104 * C586 + C11099 * C1279 - C11105 * C1272 +
            C11100 * C1758 - C11106 * C1753 + C48660 * C9128 - C11107 * C9125) *
               C48618 +
           (C11098 * C1457 - C11104 * C1453 + C11099 * C1910 - C11105 * C1907 +
            C11100 * C9214 - C11106 * C9212 + C48660 * C9451 - C11107 * C9450) *
               C4967 +
           (C11098 * C1465 - C11104 * C1458 + C11099 * C1916 - C11105 * C1911 +
            C11100 * C9218 - C11106 * C9215 + C48660 * C9453 - C11107 * C9452) *
               C48460) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C386 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C510 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C7106 - C7107 + C7108 - C7109) * C4967 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C386 +
           (((C7107 - C7106 + C7109 - C7108) * C4966 +
             (C7111 - C7110 + C7113 - C7112) * C48618 +
             (C48617 * C2327 - C3790 * C2321 + C48418 * C2328 - C3791 * C2322) *
                 C4967 +
             (C48617 * C2339 - C3790 * C2329 + C48418 * C2340 - C3791 * C2330) *
                 C48460) *
                C1066 +
            ((C6321 - C6320 + C6323 - C6322) * C4966 +
             (C6325 - C6324 + C6327 - C6326) * C48618 +
             (C48617 * C2331 - C3790 * C2323 + C48418 * C2332 - C3791 * C2324) *
                 C4967 +
             (C48617 * C2341 - C3790 * C2333 + C48418 * C2342 - C3791 * C2334) *
                 C48460) *
                C1067 +
            ((C6329 - C6328 + C6331 - C6330) * C4966 +
             (C6333 - C6332 + C6335 - C6334) * C48618 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C4967 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C386 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C510 +
          (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C14515 - C14516 + C14517 - C14518 + C14519 - C14520 + C14521 -
             C14522) *
                C4967 +
            (C14523 - C14524 + C14525 - C14526 + C14527 - C14528 + C14529 -
             C14530) *
                C48460) *
               C48261 * C386 +
           ((C14516 - C14515 + C14518 - C14517 + C14520 - C14519 + C14522 -
             C14521) *
                C4966 +
            (C14524 - C14523 + C14526 - C14525 + C14528 - C14527 + C14530 -
             C14529) *
                C48618 +
            (C11098 * C2327 - C11104 * C2321 + C11099 * C2328 - C11105 * C2322 +
             C11100 * C9682 - C11106 * C9680 + C48660 * C9683 -
             C11107 * C9681) *
                C4967 +
            (C11098 * C2339 - C11104 * C2329 + C11099 * C2340 - C11105 * C2330 +
             C11100 * C9686 - C11106 * C9684 + C48660 * C9687 -
             C11107 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C3794 - C3793 + C3796 - C3795) * C4966 +
             (C3798 - C3797 + C3800 - C3799) * C48618 + C6568 * C4967 +
             C6569 * C48460) *
                C1066 +
            ((C3802 - C3801 + C3804 - C3803) * C4966 +
             (C3806 - C3805 + C3808 - C3807) * C48618 + C6570 * C4967 +
             C6571 * C48460) *
                C1067 +
            ((C3810 - C3809 + C3812 - C3811) * C4966 +
             (C3814 - C3813 + C3816 - C3815) * C48618 +
             (C4143 - C4144 + C4145 - C4146) * C4967 +
             (C4147 - C4148 + C4149 - C4150) * C48460) *
                C48637) *
               C784 +
           ((C6566 * C4966 + C6567 * C48618 +
             (C6547 - C6546 + C6549 - C6548) * C4967 +
             (C6551 - C6550 + C6553 - C6552) * C48460) *
                C1066 +
            (C6120 * C4966 + C6121 * C48618 +
             (C6559 - C6558 + C6561 - C6560) * C4967 +
             (C6563 - C6562 + C6565 - C6564) * C48460) *
                C1067 +
            ((C4144 - C4143 + C4146 - C4145) * C4966 +
             (C4148 - C4147 + C4150 - C4149) * C48618 +
             (C48617 * C944 - C3790 * C936 + C48418 * C2635 - C3791 * C2634) *
                 C4967 +
             (C48617 * C951 - C3790 * C945 + C48418 * C2637 - C3791 * C2636) *
                 C48460) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C784 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C11110 - C11109 + C11112 - C11111 + C11114 - C11113 + C11116 -
             C11115) *
                C4966 +
            (C11118 - C11117 + C11120 - C11119 + C11122 - C11121 + C11124 -
             C11123) *
                C48618 +
            (C11417 - C11418 + C11419 - C11420 + C11421 - C11422 + C11423 -
             C11424) *
                C4967 +
            (C11425 - C11426 + C11427 - C11428 + C11429 - C11430 + C11431 -
             C11432) *
                C48460) *
               C48261 * C784 +
           ((C11418 - C11417 + C11420 - C11419 + C11422 - C11421 + C11424 -
             C11423) *
                C4966 +
            (C11426 - C11425 + C11428 - C11427 + C11430 - C11429 + C11432 -
             C11431) *
                C48618 +
            (C11098 * C940 - C11104 * C934 + C11099 * C2331 - C11105 * C2323 +
             C11100 * C2332 - C11106 * C2324 + C48660 * C9945 -
             C11107 * C9944) *
                C4967 +
            (C11098 * C949 - C11104 * C941 + C11099 * C2341 - C11105 * C2333 +
             C11100 * C2342 - C11106 * C2334 + C48660 * C9947 -
             C11107 * C9946) *
                C48460) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                 C4966 +
             (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                 C48618 +
             (C6530 - C6531 + C6532 - C6533) * C4967 +
             (C6534 - C6535 + C6536 - C6537) * C48460) *
                C1066 +
            ((C3793 - C3794 + C3795 - C3796) * C4966 +
             (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
             C6567 * C48460) *
                C1067 +
            C6125 * C48637) *
               C784 +
           (((C6531 - C6530 + C6533 - C6532) * C4966 +
             (C6535 - C6534 + C6537 - C6536) * C48618 +
             (C3790 * C933 - C48617 * C938 + C3791 * C2321 - C48418 * C2327) *
                 C4967 +
             (C3790 * C939 - C48617 * C948 + C3791 * C2329 - C48418 * C2339) *
                 C48460) *
                C1066 +
            (C6568 * C4966 + C6569 * C48618 +
             (C6546 - C6547 + C6548 - C6549) * C4967 +
             (C6550 - C6551 + C6552 - C6553) * C48460) *
                C1067 +
            (C6570 * C4966 + C6571 * C48618 +
             (C6558 - C6559 + C6560 - C6561) * C4967 +
             (C6562 - C6563 + C6564 - C6565) * C48460) *
                C48637) *
               C48647) *
              C260 +
          ((((C3790 * C264 - C48617 * C270 + C3791 * C580 - C48418 * C585) *
                 C4966 +
             (C3790 * C271 - C48617 * C282 + C3791 * C586 - C48418 * C595) *
                 C48618 +
             (C7106 - C7107 + C7108 - C7109) * C4967 +
             (C7110 - C7111 + C7112 - C7113) * C48460) *
                C1066 +
            ((C3973 - C3974 + C3975 - C3976) * C4966 +
             (C3977 - C3978 + C3979 - C3980) * C48618 +
             (C6320 - C6321 + C6322 - C6323) * C4967 +
             (C6324 - C6325 + C6326 - C6327) * C48460) *
                C1067 +
            ((C3981 - C3982 + C3983 - C3984) * C4966 +
             (C3985 - C3986 + C3987 - C3988) * C48618 +
             (C6328 - C6329 + C6330 - C6331) * C4967 +
             (C6332 - C6333 + C6334 - C6335) * C48460) *
                C48637) *
               C784 +
           (((C7107 - C7106 + C7109 - C7108) * C4966 +
             (C7111 - C7110 + C7113 - C7112) * C48618 +
             (C48617 * C2327 - C3790 * C2321 + C48418 * C2328 - C3791 * C2322) *
                 C4967 +
             (C48617 * C2339 - C3790 * C2329 + C48418 * C2340 - C3791 * C2330) *
                 C48460) *
                C1066 +
            ((C6321 - C6320 + C6323 - C6322) * C4966 +
             (C6325 - C6324 + C6327 - C6326) * C48618 +
             (C48617 * C2331 - C3790 * C2323 + C48418 * C2332 - C3791 * C2324) *
                 C4967 +
             (C48617 * C2341 - C3790 * C2333 + C48418 * C2342 - C3791 * C2334) *
                 C48460) *
                C1067 +
            ((C6329 - C6328 + C6331 - C6330) * C4966 +
             (C6333 - C6332 + C6335 - C6334) * C48618 +
             (C48617 * C2335 - C3790 * C2325 + C48418 * C2336 - C3791 * C2326) *
                 C4967 +
             (C48617 * C2343 - C3790 * C2337 + C48418 * C2344 - C3791 * C2338) *
                 C48460) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
             C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
                C4966 +
            (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
             C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
                C48618 +
            (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
             C14148) *
                C4967 +
            (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
             C14156) *
                C48460) *
               C48261 * C784 +
           ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
             C14147) *
                C4966 +
            (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
             C14155) *
                C48618 +
            (C11104 * C933 - C11098 * C938 + C11105 * C2321 - C11099 * C2327 +
             C11106 * C2322 - C11100 * C2328 + C11107 * C9680 -
             C48660 * C9682) *
                C4967 +
            (C11104 * C939 - C11098 * C948 + C11105 * C2329 - C11099 * C2339 +
             C11106 * C2330 - C11100 * C2340 + C11107 * C9684 -
             C48660 * C9686) *
                C48460) *
               C48261 * C48647) *
              C260 +
          (((C11104 * C264 - C11098 * C270 + C11105 * C580 - C11099 * C585 +
             C11106 * C1267 - C11100 * C1271 + C11107 * C1749 -
             C48660 * C1752) *
                C4966 +
            (C11104 * C271 - C11098 * C282 + C11105 * C586 - C11099 * C595 +
             C11106 * C1272 - C11100 * C1279 + C11107 * C1753 -
             C48660 * C1758) *
                C48618 +
            (C14515 - C14516 + C14517 - C14518 + C14519 - C14520 + C14521 -
             C14522) *
                C4967 +
            (C14523 - C14524 + C14525 - C14526 + C14527 - C14528 + C14529 -
             C14530) *
                C48460) *
               C48261 * C784 +
           ((C14516 - C14515 + C14518 - C14517 + C14520 - C14519 + C14522 -
             C14521) *
                C4966 +
            (C14524 - C14523 + C14526 - C14525 + C14528 - C14527 + C14530 -
             C14529) *
                C48618 +
            (C11098 * C2327 - C11104 * C2321 + C11099 * C2328 - C11105 * C2322 +
             C11100 * C9682 - C11106 * C9680 + C48660 * C9683 -
             C11107 * C9681) *
                C4967 +
            (C11098 * C2339 - C11104 * C2329 + C11099 * C2340 - C11105 * C2330 +
             C11100 * C9686 - C11106 * C9684 + C48660 * C9687 -
             C11107 * C9685) *
                C48460) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48617 * C122 - C3790 * C115 + C48418 * C270 - C3791 * C264) *
                C4966 +
            (C48617 * C136 - C3790 * C123 + C48418 * C282 - C3791 * C271) *
                C48618 +
            (C6530 - C6531 + C6532 - C6533) * C4967 +
            (C6534 - C6535 + C6536 - C6537) * C48460) *
               C1066 +
           ((C3793 - C3794 + C3795 - C3796) * C4966 +
            (C3797 - C3798 + C3799 - C3800) * C48618 + C6566 * C4967 +
            C6567 * C48460) *
               C1067 +
           C6125 * C48637) *
              C930 +
          (((C6531 - C6530 + C6533 - C6532) * C4966 +
            (C6535 - C6534 + C6537 - C6536) * C48618 +
            (C7648 - C7649 + C7650 - C7651) * C4967 +
            (C7652 - C7653 + C7654 - C7655) * C48460) *
               C1066 +
           (C6568 * C4966 + C6569 * C48618 +
            (C6546 - C6547 + C6548 - C6549) * C4967 +
            (C6550 - C6551 + C6552 - C6553) * C48460) *
               C1067 +
           (C6570 * C4966 + C6571 * C48618 +
            (C6558 - C6559 + C6560 - C6561) * C4967 +
            (C6562 - C6563 + C6564 - C6565) * C48460) *
               C48637) *
              C931 +
          (((C7649 - C7648 + C7651 - C7650) * C4966 +
            (C7653 - C7652 + C7655 - C7654) * C48618 +
            (C48617 * C2804 - C3790 * C2800 + C48418 * C3249 - C3791 * C3246) *
                C4967 +
            (C48617 * C2812 - C3790 * C2805 + C48418 * C3255 - C3791 * C3250) *
                C48460) *
               C1066 +
           ((C6547 - C6546 + C6549 - C6548) * C4966 +
            (C6551 - C6550 + C6553 - C6552) * C48618 +
            (C48617 * C2806 - C3790 * C2801 + C48418 * C3251 - C3791 * C3247) *
                C4967 +
            (C48617 * C2813 - C3790 * C2807 + C48418 * C3256 - C3791 * C3252) *
                C48460) *
               C1067 +
           ((C6559 - C6558 + C6561 - C6560) * C4966 +
            (C6563 - C6562 + C6565 - C6564) * C48618 +
            (C48617 * C2808 - C3790 * C2802 + C48418 * C3253 - C3791 * C3248) *
                C4967 +
            (C48617 * C2814 - C3790 * C2809 + C48418 * C3257 - C3791 * C3254) *
                C48460) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11098 * C122 - C11104 * C115 + C11099 * C270 - C11105 * C264 +
            C11100 * C585 - C11106 * C580 + C48660 * C1271 - C11107 * C1267) *
               C4966 +
           (C11098 * C136 - C11104 * C123 + C11099 * C282 - C11105 * C271 +
            C11100 * C595 - C11106 * C586 + C48660 * C1279 - C11107 * C1272) *
               C48618 +
           (C14141 - C14142 + C14143 - C14144 + C14145 - C14146 + C14147 -
            C14148) *
               C4967 +
           (C14149 - C14150 + C14151 - C14152 + C14153 - C14154 + C14155 -
            C14156) *
               C48460) *
              C48261 * C930 +
          ((C14142 - C14141 + C14144 - C14143 + C14146 - C14145 + C14148 -
            C14147) *
               C4966 +
           (C14150 - C14149 + C14152 - C14151 + C14154 - C14153 + C14156 -
            C14155) *
               C48618 +
           (C14889 - C14890 + C14891 - C14892 + C14893 - C14894 + C14895 -
            C14896) *
               C4967 +
           (C14897 - C14898 + C14899 - C14900 + C14901 - C14902 + C14903 -
            C14904) *
               C48460) *
              C48261 * C931 +
          ((C14890 - C14889 + C14892 - C14891 + C14894 - C14893 + C14896 -
            C14895) *
               C4966 +
           (C14898 - C14897 + C14900 - C14899 + C14902 - C14901 + C14904 -
            C14903) *
               C48618 +
           (C11098 * C2804 - C11104 * C2800 + C11099 * C3249 - C11105 * C3246 +
            C11100 * C10096 - C11106 * C10094 + C48660 * C10541 -
            C11107 * C10540) *
               C4967 +
           (C11098 * C2812 - C11104 * C2805 + C11099 * C3255 - C11105 * C3250 +
            C11100 * C10100 - C11106 * C10097 + C48660 * C10543 -
            C11107 * C10542) *
               C48460) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C48345 * C48328 * C110 +
          (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
            (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
               C1066 +
           ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
            (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
               C1067 +
           ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
            (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
               C48637) *
              C48345 * C48328 * C111 +
          (C1121 * C1066 +
           ((C1098 - C1097 + C1100 - C1099 + C1102 - C1101) * C114 +
            (C1104 - C1103 + C1106 - C1105 + C1108 - C1107) * C48373) *
               C1067 +
           ((C48685 * C130 - C1069 * C119 + C48673 * C278 - C1070 * C268 +
             C48650 * C593 - C1071 * C584) *
                C114 +
            (C48685 * C140 - C1069 * C131 + C48673 * C286 - C1070 * C279 +
             C48650 * C599 - C1071 * C594) *
                C48373) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
              C48345 * C48328 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C48373) * C106 +
           ((C48356 * C134 - C113 * C121) * C114 +
            (C48356 * C142 - C113 * C135) * C48373) *
               C107) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C2458 +
            (C48356 * C136 - C113 * C123) * C48686 +
            (C48356 * C394 - C113 * C388) * C2459 +
            (C48356 * C406 - C113 * C395) * C48675 +
            (C48356 * C938 - C113 * C933) * C2460 +
            (C48356 * C948 - C113 * C939) * C48653) *
               C1066 +
           ((C144 - C145) * C2458 + (C146 - C147) * C48686 +
            (C414 - C413) * C2459 + (C416 - C415) * C48675 +
            (C2462 - C2463) * C2460 + (C2464 - C2465) * C48653) *
               C1067 +
           C2488 * C48637) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C2458 + (C147 - C146) * C48686 +
            (C413 - C414) * C2459 + (C415 - C416) * C48675 +
            (C2463 - C2462) * C2460 + (C2465 - C2464) * C48653) *
               C1066 +
           ((C149 - C148) * C2458 + (C151 - C150) * C48686 +
            (C417 - C418) * C2459 + (C419 - C420) * C48675 +
            (C2471 - C2470) * C2460 + (C2473 - C2472) * C48653) *
               C1067 +
           ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
            (C421 - C422) * C2459 + (C423 - C424) * C48675 +
            (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
               C48637) *
              C48345 * C48328 * C111 +
          (C2488 * C1066 +
           (C166 * C2458 + C167 * C48686 + (C422 - C421) * C2459 +
            (C424 - C423) * C48675 + (C2475 - C2474) * C2460 +
            (C2477 - C2476) * C48653) *
               C1067 +
           (C168 * C2458 + C169 * C48686 + (C426 - C425) * C2459 +
            (C428 - C427) * C48675 + (C48356 * C946 - C113 * C937) * C2460 +
            (C48356 * C952 - C113 * C947) * C48653) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C48328 * C110 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
               C48682 +
           ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
            (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
               C48669 +
           ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
            (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
               C48637) *
              C48345 * C48328 * C111 +
          (C7823 * C48682 +
           ((C7800 - C7799 + C7802 - C7801 + C7804 - C7803) * C114 +
            (C7806 - C7805 + C7808 - C7807 + C7810 - C7809) * C48373) *
               C48669 +
           ((C7765 * C130 - C7771 * C119 + C7766 * C278 - C7772 * C268 +
             C48650 * C593 - C7773 * C584) *
                C114 +
            (C7765 * C140 - C7771 * C131 + C7766 * C286 - C7772 * C279 +
             C48650 * C599 - C7773 * C594) *
                C48373) *
               C48637) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C48328 * C110 +
          ((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
            C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
            C9039 * C1750 - C9033 * C1754) *
               C114 +
           (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
            C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
            C9039 * C1755 - C9033 * C1759) *
               C48373) *
              C48261 * C48345 * C48328 * C111 +
          ((C9029 * C126 - C9035 * C117 + C9030 * C274 - C9036 * C266 +
            C9031 * C589 - C9037 * C582 + C9032 * C1275 - C9038 * C1269 +
            C9033 * C1756 - C9039 * C1751) *
               C114 +
           (C9029 * C138 - C9035 * C127 + C9030 * C284 - C9036 * C275 +
            C9031 * C597 - C9037 * C590 + C9032 * C1281 - C9038 * C1276 +
            C9033 * C1760 - C9039 * C1757) *
               C48373) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
            C48650 * C585 - C7773 * C580) *
               C2458 +
           (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
            C48650 * C595 - C7773 * C586) *
               C48686 +
           (C7765 * C394 - C7771 * C388 + C7766 * C687 - C7772 * C682 +
            C48650 * C1457 - C7773 * C1453) *
               C2459 +
           (C7765 * C406 - C7771 * C395 + C7766 * C697 - C7772 * C688 +
            C48650 * C1465 - C7773 * C1458) *
               C48675 +
           (C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
            C48650 * C2328 - C7773 * C2322) *
               C2460 +
           (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
            C48650 * C2340 - C7773 * C2330) *
               C48653) *
              C48261 * C48345 * C48328 * C110 +
          ((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
           (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
           (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
           (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
           (C7771 * C934 - C7765 * C940 + C7772 * C2323 - C7766 * C2331 +
            C7773 * C2324 - C48650 * C2332) *
               C2460 +
           (C7771 * C941 - C7765 * C949 + C7772 * C2333 - C7766 * C2341 +
            C7773 * C2334 - C48650 * C2342) *
               C48653) *
              C48261 * C48345 * C48328 * C111 +
          (C7819 * C2458 + C7820 * C48686 +
           (C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C2459 +
           (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48675 +
           (C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
            C48650 * C2336 - C7773 * C2326) *
               C2460 +
           (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
            C48650 * C2344 - C7773 * C2338) *
               C48653) *
              C48261 * C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C48345 * C260 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                C1066 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                C1067 +
            ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
              C48650 * C1277 - C1071 * C1270) *
                 C114 +
             (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
              C48650 * C1282 - C1071 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C48345 * C260 +
           (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
            ((C48356 * C280 - C113 * C269) * C114 +
             (C48356 * C287 - C113 * C281) * C48373) *
                C107) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 +
             (C48356 * C394 - C113 * C388) * C2459 +
             (C48356 * C406 - C113 * C395) * C48675 +
             (C48356 * C938 - C113 * C933) * C2460 +
             (C48356 * C948 - C113 * C939) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 +
             (C414 - C413) * C2459 + (C416 - C415) * C48675 +
             (C2462 - C2463) * C2460 + (C2464 - C2465) * C48653) *
                C1067 +
            C2488 * C48637) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 +
             (C113 * C682 - C48356 * C687) * C2459 +
             (C113 * C688 - C48356 * C697) * C48675 +
             (C113 * C2321 - C48356 * C2327) * C2460 +
             (C113 * C2329 - C48356 * C2339) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 +
             (C413 - C414) * C2459 + (C415 - C416) * C48675 +
             (C2463 - C2462) * C2460 + (C2465 - C2464) * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 +
             (C417 - C418) * C2459 + (C419 - C420) * C48675 +
             (C2471 - C2470) * C2460 + (C2473 - C2472) * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C260 +
           (((C290 - C289) * C2458 + (C292 - C291) * C48686 +
             (C2640 - C2639) * C2459 + (C2642 - C2641) * C48675 +
             (C2644 - C2643) * C2460 + (C2646 - C2645) * C48653) *
                C1066 +
            ((C294 - C293) * C2458 + (C296 - C295) * C48686 +
             (C2648 - C2647) * C2459 + (C2650 - C2649) * C48675 +
             (C2652 - C2651) * C2460 + (C2654 - C2653) * C48653) *
                C1067 +
            ((C298 - C297) * C2458 + (C300 - C299) * C48686 +
             (C48356 * C693 - C113 * C685) * C2459 +
             (C48356 * C700 - C113 * C694) * C48675 +
             (C48356 * C2635 - C113 * C2634) * C2460 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C260 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C7765 * C394 - C7771 * C388 + C7766 * C687 - C7772 * C682 +
             C48650 * C1457 - C7773 * C1453) *
                C2459 +
            (C7765 * C406 - C7771 * C395 + C7766 * C697 - C7772 * C688 +
             C48650 * C1465 - C7773 * C1458) *
                C48675 +
            (C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
             C48650 * C2328 - C7773 * C2322) *
                C2460 +
            (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
             C48650 * C2340 - C7773 * C2330) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C7771 * C682 - C7765 * C687 + C7772 * C1453 - C7766 * C1457 +
             C7773 * C1907 - C48650 * C1910) *
                C2459 +
            (C7771 * C688 - C7765 * C697 + C7772 * C1458 - C7766 * C1465 +
             C7773 * C1911 - C48650 * C1916) *
                C48675 +
            (C7771 * C2321 - C7765 * C2327 + C7772 * C2322 - C7766 * C2328 +
             C7773 * C9680 - C48650 * C9682) *
                C2460 +
            (C7771 * C2329 - C7765 * C2339 + C7772 * C2330 - C7766 * C2340 +
             C7773 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C7771 * C934 - C7765 * C940 + C7772 * C2323 - C7766 * C2331 +
             C7773 * C2324 - C48650 * C2332) *
                C2460 +
            (C7771 * C941 - C7765 * C949 + C7772 * C2333 - C7766 * C2341 +
             C7773 * C2334 - C48650 * C2342) *
                C48653) *
               C48261 * C48345 * C260 +
           ((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C2458 +
            (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48686 +
            (C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
             C48650 * C1912 - C7773 * C1908) *
                C2459 +
            (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
             C48650 * C1917 - C7773 * C1913) *
                C48675 +
            (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
             C48650 * C9945 - C7773 * C9944) *
                C2460 +
            (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
             C48650 * C9947 - C7773 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C386 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C386 +
           (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                C1066 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                C1067 +
            ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
              C48650 * C1463 - C1071 * C1456) *
                 C114 +
             (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
              C48650 * C1468 - C1071 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C386 +
           (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
            ((C48356 * C404 - C113 * C393) * C114 +
             (C48356 * C411 - C113 * C405) * C48373) *
                C107) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C386 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 + C2829 * C2459 +
             C2830 * C48675 + C2831 * C2460 + C2832 * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 + C2837 * C2459 +
             C2838 * C48675 + C2839 * C2460 + C2840 * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C386 +
           ((C2825 * C2458 + C2826 * C48686 + C2827 * C2459 + C2828 * C48675 +
             (C2834 - C2833) * C2460 + (C2836 - C2835) * C48653) *
                C1066 +
            (C2468 * C2458 + C2469 * C48686 + C2481 * C2459 + C2482 * C48675 +
             (C2842 - C2841) * C2460 + (C2844 - C2843) * C48653) *
                C1067 +
            ((C422 - C421) * C2458 + (C424 - C423) * C48686 +
             (C2475 - C2474) * C2459 + (C2477 - C2476) * C48675 +
             (C48356 * C2810 - C113 * C2803) * C2460 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C386 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C386 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C2460 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48653) *
               C48261 * C386 +
           ((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C2458 +
            (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48686 +
            (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C2459 +
            (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48675 +
            (C7765 * C2806 - C7771 * C2801 + C7766 * C3251 - C7772 * C3247 +
             C48650 * C10098 - C7773 * C10095) *
                C2460 +
            (C7765 * C2813 - C7771 * C2807 + C7766 * C3256 - C7772 * C3252 +
             C48650 * C10101 - C7773 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C48345 * C510 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                C1066 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                C1067 +
            ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
              C48650 * C1277 - C1071 * C1270) *
                 C114 +
             (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
              C48650 * C1282 - C1071 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C48345 * C510 +
           (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
            ((C48356 * C280 - C113 * C269) * C114 +
             (C48356 * C287 - C113 * C281) * C48373) *
                C107) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 +
             (C113 * C682 - C48356 * C687) * C2459 +
             (C113 * C688 - C48356 * C697) * C48675 +
             (C113 * C2321 - C48356 * C2327) * C2460 +
             (C113 * C2329 - C48356 * C2339) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 + C2829 * C2459 +
             C2830 * C48675 + C2831 * C2460 + C2832 * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 + C2837 * C2459 +
             C2838 * C48675 + C2839 * C2460 + C2840 * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C48345 * C510 +
           (((C290 - C289) * C2458 + (C292 - C291) * C48686 +
             (C2640 - C2639) * C2459 + (C2642 - C2641) * C48675 +
             (C2644 - C2643) * C2460 + (C2646 - C2645) * C48653) *
                C1066 +
            ((C294 - C293) * C2458 + (C296 - C295) * C48686 +
             (C2648 - C2647) * C2459 + (C2650 - C2649) * C48675 +
             (C2652 - C2651) * C2460 + (C2654 - C2653) * C48653) *
                C1067 +
            ((C298 - C297) * C2458 + (C300 - C299) * C48686 +
             (C48356 * C693 - C113 * C685) * C2459 +
             (C48356 * C700 - C113 * C694) * C48675 +
             (C48356 * C2635 - C113 * C2634) * C2460 +
             (C48356 * C2637 - C113 * C2636) * C48653) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C510 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C48345 * C510 +
           ((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C7771 * C682 - C7765 * C687 + C7772 * C1453 - C7766 * C1457 +
             C7773 * C1907 - C48650 * C1910) *
                C2459 +
            (C7771 * C688 - C7765 * C697 + C7772 * C1458 - C7766 * C1465 +
             C7773 * C1911 - C48650 * C1916) *
                C48675 +
            (C7771 * C2321 - C7765 * C2327 + C7772 * C2322 - C7766 * C2328 +
             C7773 * C9680 - C48650 * C9682) *
                C2460 +
            (C7771 * C2329 - C7765 * C2339 + C7772 * C2330 - C7766 * C2340 +
             C7773 * C9684 - C48650 * C9686) *
                C48653) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C2460 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48653) *
               C48261 * C48345 * C510 +
           ((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C2458 +
            (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48686 +
            (C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
             C48650 * C1912 - C7773 * C1908) *
                C2459 +
            (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
             C48650 * C1917 - C7773 * C1913) *
                C48675 +
            (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
             C48650 * C9945 - C7773 * C9944) *
                C2460 +
            (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
             C48650 * C9947 - C7773 * C9946) *
                C48653) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C48345 * C576 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C114 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C48373) *
               C1066 +
           ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
            (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
               C1067 +
           ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
            (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
             C48650 * C1752 - C1071 * C1749) *
                C114 +
            (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
             C48650 * C1758 - C1071 * C1753) *
                C48373) *
               C1066 +
           ((C48685 * C587 - C1069 * C581 + C48673 * C1273 - C1070 * C1268 +
             C48650 * C1754 - C1071 * C1750) *
                C114 +
            (C48685 * C596 - C1069 * C588 + C48673 * C1280 - C1070 * C1274 +
             C48650 * C1759 - C1071 * C1755) *
                C48373) *
               C1067 +
           ((C48685 * C589 - C1069 * C582 + C48673 * C1275 - C1070 * C1269 +
             C48650 * C1756 - C1071 * C1751) *
                C114 +
            (C48685 * C597 - C1069 * C590 + C48673 * C1281 - C1070 * C1276 +
             C48650 * C1760 - C1071 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C114 +
            (C113 * C271 - C48356 * C282) * C48373) *
               C103 +
           ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
           ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
           ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
           ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C114 +
            (C48356 * C595 - C113 * C586) * C48373) *
               C103 +
           ((C48356 * C587 - C113 * C581) * C114 +
            (C48356 * C596 - C113 * C588) * C48373) *
               C104 +
           ((C48356 * C589 - C113 * C582) * C114 +
            (C48356 * C597 - C113 * C590) * C48373) *
               C105 +
           ((C48356 * C591 - C113 * C583) * C114 +
            (C48356 * C598 - C113 * C592) * C48373) *
               C106 +
           ((C48356 * C593 - C113 * C584) * C114 +
            (C48356 * C599 - C113 * C594) * C48373) *
               C107) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C2458 +
            (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
            (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
            (C2823 - C2824) * C48653) *
               C1066 +
           ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
            C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
               C1067 +
           C2488 * C48637) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C2458 +
            (C113 * C271 - C48356 * C282) * C48686 +
            (C113 * C682 - C48356 * C687) * C2459 +
            (C113 * C688 - C48356 * C697) * C48675 +
            (C113 * C2321 - C48356 * C2327) * C2460 +
            (C113 * C2329 - C48356 * C2339) * C48653) *
               C1066 +
           ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
            (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
            (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
               C1067 +
           ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
            (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
            (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
               C48637) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C2458 +
            (C48356 * C595 - C113 * C586) * C48686 +
            (C48356 * C1457 - C113 * C1453) * C2459 +
            (C48356 * C1465 - C113 * C1458) * C48675 +
            (C48356 * C2328 - C113 * C2322) * C2460 +
            (C48356 * C2340 - C113 * C2330) * C48653) *
               C1066 +
           ((C48356 * C587 - C113 * C581) * C2458 +
            (C48356 * C596 - C113 * C588) * C48686 +
            (C48356 * C1459 - C113 * C1454) * C2459 +
            (C48356 * C1466 - C113 * C1460) * C48675 +
            (C48356 * C2332 - C113 * C2324) * C2460 +
            (C48356 * C2342 - C113 * C2334) * C48653) *
               C1067 +
           ((C48356 * C589 - C113 * C582) * C2458 +
            (C48356 * C597 - C113 * C590) * C48686 +
            (C48356 * C1461 - C113 * C1455) * C2459 +
            (C48356 * C1467 - C113 * C1462) * C48675 +
            (C48356 * C2336 - C113 * C2326) * C2460 +
            (C48356 * C2344 - C113 * C2338) * C48653) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C576 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C114 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48373) *
               C48682 +
           ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
            (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
               C48669 +
           ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
            (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
             C48650 * C1752 - C7773 * C1749) *
                C114 +
            (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
             C48650 * C1758 - C7773 * C1753) *
                C48373) *
               C48682 +
           ((C7765 * C587 - C7771 * C581 + C7766 * C1273 - C7772 * C1268 +
             C48650 * C1754 - C7773 * C1750) *
                C114 +
            (C7765 * C596 - C7771 * C588 + C7766 * C1280 - C7772 * C1274 +
             C48650 * C1759 - C7773 * C1755) *
                C48373) *
               C48669 +
           ((C7765 * C589 - C7771 * C582 + C7766 * C1275 - C7772 * C1269 +
             C48650 * C1756 - C7773 * C1751) *
                C114 +
            (C7765 * C597 - C7771 * C590 + C7766 * C1281 - C7772 * C1276 +
             C48650 * C1760 - C7773 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C576 +
          ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
            C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
            C9039 * C9122 - C9033 * C9124) *
               C114 +
           (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
            C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
            C9039 * C9125 - C9033 * C9128) *
               C48373) *
              C48261 * C48345 * C577 +
          ((C9029 * C585 - C9035 * C580 + C9030 * C1271 - C9036 * C1267 +
            C9031 * C1752 - C9037 * C1749 + C9032 * C9124 - C9038 * C9122 +
            C9033 * C9365 - C9039 * C9364) *
               C114 +
           (C9029 * C595 - C9035 * C586 + C9030 * C1279 - C9036 * C1272 +
            C9031 * C1758 - C9037 * C1753 + C9032 * C9128 - C9038 * C9125 +
            C9033 * C9367 - C9039 * C9366) *
               C48373) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
            C48650 * C585 - C7773 * C580) *
               C2458 +
           (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
            C48650 * C595 - C7773 * C586) *
               C48686 +
           (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
           (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
           (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
           (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
              C48261 * C48345 * C576 +
          ((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
            C7773 * C1267 - C48650 * C1271) *
               C2458 +
           (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
            C7773 * C1272 - C48650 * C1279) *
               C48686 +
           (C7771 * C682 - C7765 * C687 + C7772 * C1453 - C7766 * C1457 +
            C7773 * C1907 - C48650 * C1910) *
               C2459 +
           (C7771 * C688 - C7765 * C697 + C7772 * C1458 - C7766 * C1465 +
            C7773 * C1911 - C48650 * C1916) *
               C48675 +
           (C7771 * C2321 - C7765 * C2327 + C7772 * C2322 - C7766 * C2328 +
            C7773 * C9680 - C48650 * C9682) *
               C2460 +
           (C7771 * C2329 - C7765 * C2339 + C7772 * C2330 - C7766 * C2340 +
            C7773 * C9684 - C48650 * C9686) *
               C48653) *
              C48261 * C48345 * C577 +
          ((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
            C48650 * C1752 - C7773 * C1749) *
               C2458 +
           (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
            C48650 * C1758 - C7773 * C1753) *
               C48686 +
           (C7765 * C1457 - C7771 * C1453 + C7766 * C1910 - C7772 * C1907 +
            C48650 * C9214 - C7773 * C9212) *
               C2459 +
           (C7765 * C1465 - C7771 * C1458 + C7766 * C1916 - C7772 * C1911 +
            C48650 * C9218 - C7773 * C9215) *
               C48675 +
           (C7765 * C2328 - C7771 * C2322 + C7766 * C9682 - C7772 * C9680 +
            C48650 * C9683 - C7773 * C9681) *
               C2460 +
           (C7765 * C2340 - C7771 * C2330 + C7766 * C9686 - C7772 * C9684 +
            C48650 * C9687 - C7773 * C9685) *
               C48653) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C386 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C386 +
           (((C48685 * C687 - C1069 * C682 + C48673 * C1457 - C1070 * C1453 +
              C48650 * C1910 - C1071 * C1907) *
                 C114 +
             (C48685 * C697 - C1069 * C688 + C48673 * C1465 - C1070 * C1458 +
              C48650 * C1916 - C1071 * C1911) *
                 C48373) *
                C1066 +
            ((C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
              C48650 * C1912 - C1071 * C1908) *
                 C114 +
             (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
              C48650 * C1917 - C1071 * C1913) *
                 C48373) *
                C1067 +
            ((C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C114 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C386 +
           (((C48356 * C687 - C113 * C682) * C114 +
             (C48356 * C697 - C113 * C688) * C48373) *
                C103 +
            ((C48356 * C689 - C113 * C683) * C114 +
             (C48356 * C698 - C113 * C690) * C48373) *
                C104 +
            ((C48356 * C691 - C113 * C684) * C114 +
             (C48356 * C699 - C113 * C692) * C48373) *
                C105 +
            ((C48356 * C693 - C113 * C685) * C114 +
             (C48356 * C700 - C113 * C694) * C48373) *
                C106 +
            ((C48356 * C695 - C113 * C686) * C114 +
             (C48356 * C701 - C113 * C696) * C48373) *
                C107) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C386 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 + (C3259 - C3260) * C2459 +
             (C3261 - C3262) * C48675 + (C3263 - C3264) * C2460 +
             (C3265 - C3266) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C386 +
           (((C3260 - C3259) * C2458 + (C3262 - C3261) * C48686 +
             (C3264 - C3263) * C2459 + (C3266 - C3265) * C48675 +
             (C48356 * C3249 - C113 * C3246) * C2460 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C1066 +
            ((C2640 - C2639) * C2458 + (C2642 - C2641) * C48686 +
             (C2644 - C2643) * C2459 + (C2646 - C2645) * C48675 +
             (C48356 * C3251 - C113 * C3247) * C2460 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C1067 +
            ((C2648 - C2647) * C2458 + (C2650 - C2649) * C48686 +
             (C2652 - C2651) * C2459 + (C2654 - C2653) * C48675 +
             (C48356 * C3253 - C113 * C3248) * C2460 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C386 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C510 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C386 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C510 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C2459 +
            (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48675 +
            (C10557 - C10558 + C10559 - C10560 + C10561 - C10562) * C2460 +
            (C10563 - C10564 + C10565 - C10566 + C10567 - C10568) * C48653) *
               C48261 * C386 +
           ((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C2458 +
            (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48686 +
            (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C2459 +
            (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48675 +
            (C7765 * C3249 - C7771 * C3246 + C7766 * C10096 - C7772 * C10094 +
             C48650 * C10541 - C7773 * C10540) *
                C2460 +
            (C7765 * C3255 - C7771 * C3250 + C7766 * C10100 - C7772 * C10097 +
             C48650 * C10543 - C7773 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C784 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C784 +
           (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                C1066 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                C1067 +
            ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
              C48650 * C1463 - C1071 * C1456) *
                 C114 +
             (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
              C48650 * C1468 - C1071 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C784 +
           (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
            ((C48356 * C404 - C113 * C393) * C114 +
             (C48356 * C411 - C113 * C405) * C48373) *
                C107) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C784 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C2458 + (C147 - C146) * C48686 + C2829 * C2459 +
             C2830 * C48675 + C2831 * C2460 + C2832 * C48653) *
                C1066 +
            ((C149 - C148) * C2458 + (C151 - C150) * C48686 + C2837 * C2459 +
             C2838 * C48675 + C2839 * C2460 + C2840 * C48653) *
                C1067 +
            ((C153 - C152) * C2458 + (C155 - C154) * C48686 +
             (C421 - C422) * C2459 + (C423 - C424) * C48675 +
             (C2474 - C2475) * C2460 + (C2476 - C2477) * C48653) *
                C48637) *
               C784 +
           ((C2825 * C2458 + C2826 * C48686 + C2827 * C2459 + C2828 * C48675 +
             (C2834 - C2833) * C2460 + (C2836 - C2835) * C48653) *
                C1066 +
            (C2468 * C2458 + C2469 * C48686 + C2481 * C2459 + C2482 * C48675 +
             (C2842 - C2841) * C2460 + (C2844 - C2843) * C48653) *
                C1067 +
            ((C422 - C421) * C2458 + (C424 - C423) * C48686 +
             (C2475 - C2474) * C2459 + (C2477 - C2476) * C48675 +
             (C48356 * C2810 - C113 * C2803) * C2460 +
             (C48356 * C2815 - C113 * C2811) * C48653) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C784 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C784 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C2458 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48686 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C2459 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48675 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C2460 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48653) *
               C48261 * C784 +
           ((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C2458 +
            (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48686 +
            (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C2459 +
            (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48675 +
            (C7765 * C2806 - C7771 * C2801 + C7766 * C3251 - C7772 * C3247 +
             C48650 * C10098 - C7773 * C10095) *
                C2460 +
            (C7765 * C2813 - C7771 * C2807 + C7766 * C3256 - C7772 * C3252 +
             C48650 * C10101 - C7773 * C10099) *
                C48653) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C784 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C784 +
           (((C48685 * C687 - C1069 * C682 + C48673 * C1457 - C1070 * C1453 +
              C48650 * C1910 - C1071 * C1907) *
                 C114 +
             (C48685 * C697 - C1069 * C688 + C48673 * C1465 - C1070 * C1458 +
              C48650 * C1916 - C1071 * C1911) *
                 C48373) *
                C1066 +
            ((C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
              C48650 * C1912 - C1071 * C1908) *
                 C114 +
             (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
              C48650 * C1917 - C1071 * C1913) *
                 C48373) *
                C1067 +
            ((C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C114 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C784 +
           (((C48356 * C687 - C113 * C682) * C114 +
             (C48356 * C697 - C113 * C688) * C48373) *
                C103 +
            ((C48356 * C689 - C113 * C683) * C114 +
             (C48356 * C698 - C113 * C690) * C48373) *
                C104 +
            ((C48356 * C691 - C113 * C684) * C114 +
             (C48356 * C699 - C113 * C692) * C48373) *
                C105 +
            ((C48356 * C693 - C113 * C685) * C114 +
             (C48356 * C700 - C113 * C694) * C48373) *
                C106 +
            ((C48356 * C695 - C113 * C686) * C114 +
             (C48356 * C701 - C113 * C696) * C48373) *
                C107) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C2458 +
             (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
             (C2819 - C2820) * C48675 + (C2821 - C2822) * C2460 +
             (C2823 - C2824) * C48653) *
                C1066 +
            ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
             C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
                C1067 +
            C2488 * C48637) *
               C784 +
           (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
             (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
             (C113 * C2800 - C48356 * C2804) * C2460 +
             (C113 * C2805 - C48356 * C2812) * C48653) *
                C1066 +
            (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
             (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
                C1067 +
            (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
             (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
                C48637) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C2458 +
             (C113 * C271 - C48356 * C282) * C48686 + (C3259 - C3260) * C2459 +
             (C3261 - C3262) * C48675 + (C3263 - C3264) * C2460 +
             (C3265 - C3266) * C48653) *
                C1066 +
            ((C289 - C290) * C2458 + (C291 - C292) * C48686 +
             (C2639 - C2640) * C2459 + (C2641 - C2642) * C48675 +
             (C2643 - C2644) * C2460 + (C2645 - C2646) * C48653) *
                C1067 +
            ((C293 - C294) * C2458 + (C295 - C296) * C48686 +
             (C2647 - C2648) * C2459 + (C2649 - C2650) * C48675 +
             (C2651 - C2652) * C2460 + (C2653 - C2654) * C48653) *
                C48637) *
               C784 +
           (((C3260 - C3259) * C2458 + (C3262 - C3261) * C48686 +
             (C3264 - C3263) * C2459 + (C3266 - C3265) * C48675 +
             (C48356 * C3249 - C113 * C3246) * C2460 +
             (C48356 * C3255 - C113 * C3250) * C48653) *
                C1066 +
            ((C2640 - C2639) * C2458 + (C2642 - C2641) * C48686 +
             (C2644 - C2643) * C2459 + (C2646 - C2645) * C48675 +
             (C48356 * C3251 - C113 * C3247) * C2460 +
             (C48356 * C3256 - C113 * C3252) * C48653) *
                C1067 +
            ((C2648 - C2647) * C2458 + (C2650 - C2649) * C48686 +
             (C2652 - C2651) * C2459 + (C2654 - C2653) * C48675 +
             (C48356 * C3253 - C113 * C3248) * C2460 +
             (C48356 * C3257 - C113 * C3254) * C48653) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C784 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C260 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C2458 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48686 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
            (C10115 - C10116 + C10117 - C10118 + C10119 - C10120) * C2460 +
            (C10121 - C10122 + C10123 - C10124 + C10125 - C10126) * C48653) *
               C48261 * C784 +
           ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
            (C7771 * C2800 - C7765 * C2804 + C7772 * C3246 - C7766 * C3249 +
             C7773 * C10094 - C48650 * C10096) *
                C2460 +
            (C7771 * C2805 - C7765 * C2812 + C7772 * C3250 - C7766 * C3255 +
             C7773 * C10097 - C48650 * C10100) *
                C48653) *
               C48261 * C48647) *
              C260 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C2458 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48686 +
            (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C2459 +
            (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48675 +
            (C10557 - C10558 + C10559 - C10560 + C10561 - C10562) * C2460 +
            (C10563 - C10564 + C10565 - C10566 + C10567 - C10568) * C48653) *
               C48261 * C784 +
           ((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C2458 +
            (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48686 +
            (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C2459 +
            (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48675 +
            (C7765 * C3249 - C7771 * C3246 + C7766 * C10096 - C7772 * C10094 +
             C48650 * C10541 - C7773 * C10540) *
                C2460 +
            (C7765 * C3255 - C7771 * C3250 + C7766 * C10100 - C7772 * C10097 +
             C48650 * C10543 - C7773 * C10542) *
                C48653) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C930 +
          (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
             C1071 * C1453 - C48650 * C1457) *
                C114 +
            (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
             C1071 * C1458 - C48650 * C1465) *
                C48373) *
               C1066 +
           ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
               C1067 +
           ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
            (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
               C48637) *
              C931 +
          (((C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
             C48650 * C2328 - C1071 * C2322) *
                C114 +
            (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
             C48650 * C2340 - C1071 * C2330) *
                C48373) *
               C1066 +
           ((C48685 * C940 - C1069 * C934 + C48673 * C2331 - C1070 * C2323 +
             C48650 * C2332 - C1071 * C2324) *
                C114 +
            (C48685 * C949 - C1069 * C941 + C48673 * C2341 - C1070 * C2333 +
             C48650 * C2342 - C1071 * C2334) *
                C48373) *
               C1067 +
           ((C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
             C48650 * C2336 - C1071 * C2326) *
                C114 +
            (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
             C48650 * C2344 - C1071 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C930 +
          (((C113 * C388 - C48356 * C394) * C114 +
            (C113 * C395 - C48356 * C406) * C48373) *
               C103 +
           ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
           ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
           ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
           ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
              C931 +
          (((C48356 * C938 - C113 * C933) * C114 +
            (C48356 * C948 - C113 * C939) * C48373) *
               C103 +
           ((C48356 * C940 - C113 * C934) * C114 +
            (C48356 * C949 - C113 * C941) * C48373) *
               C104 +
           ((C48356 * C942 - C113 * C935) * C114 +
            (C48356 * C950 - C113 * C943) * C48373) *
               C105 +
           ((C48356 * C944 - C113 * C936) * C114 +
            (C48356 * C951 - C113 * C945) * C48373) *
               C106 +
           ((C48356 * C946 - C113 * C937) * C114 +
            (C48356 * C952 - C113 * C947) * C48373) *
               C107) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C2458 +
            (C48356 * C136 - C113 * C123) * C48686 + (C2817 - C2818) * C2459 +
            (C2819 - C2820) * C48675 + C3681 * C2460 + C3682 * C48653) *
               C1066 +
           ((C144 - C145) * C2458 + (C146 - C147) * C48686 + C2825 * C2459 +
            C2826 * C48675 + C2827 * C2460 + C2828 * C48653) *
               C1067 +
           C2488 * C48637) *
              C930 +
          (((C2818 - C2817) * C2458 + (C2820 - C2819) * C48686 +
            (C2822 - C2821) * C2459 + (C2824 - C2823) * C48675 +
            (C3683 - C3684) * C2460 + (C3685 - C3686) * C48653) *
               C1066 +
           (C2829 * C2458 + C2830 * C48686 + C2831 * C2459 + C2832 * C48675 +
            (C2833 - C2834) * C2460 + (C2835 - C2836) * C48653) *
               C1067 +
           (C2837 * C2458 + C2838 * C48686 + C2839 * C2459 + C2840 * C48675 +
            (C2841 - C2842) * C2460 + (C2843 - C2844) * C48653) *
               C48637) *
              C931 +
          ((C3681 * C2458 + C3682 * C48686 + (C3684 - C3683) * C2459 +
            (C3686 - C3685) * C48675 + (C48356 * C3671 - C113 * C3668) * C2460 +
            (C48356 * C3677 - C113 * C3672) * C48653) *
               C1066 +
           (C2827 * C2458 + C2828 * C48686 + (C2834 - C2833) * C2459 +
            (C2836 - C2835) * C48675 + (C48356 * C3673 - C113 * C3669) * C2460 +
            (C48356 * C3678 - C113 * C3674) * C48653) *
               C1067 +
           (C2481 * C2458 + C2482 * C48686 + (C2842 - C2841) * C2459 +
            (C2844 - C2843) * C48675 + (C48356 * C3675 - C113 * C3670) * C2460 +
            (C48356 * C3679 - C113 * C3676) * C48653) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C930 +
          (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
             C7773 * C1453 - C48650 * C1457) *
                C114 +
            (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
             C7773 * C1458 - C48650 * C1465) *
                C48373) *
               C48682 +
           ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
               C48669 +
           ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
            (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
               C48637) *
              C931 +
          (((C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
             C48650 * C2328 - C7773 * C2322) *
                C114 +
            (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
             C48650 * C2340 - C7773 * C2330) *
                C48373) *
               C48682 +
           ((C7765 * C940 - C7771 * C934 + C7766 * C2331 - C7772 * C2323 +
             C48650 * C2332 - C7773 * C2324) *
                C114 +
            (C7765 * C949 - C7771 * C941 + C7766 * C2341 - C7772 * C2333 +
             C48650 * C2342 - C7773 * C2334) *
                C48373) *
               C48669 +
           ((C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
             C48650 * C2336 - C7773 * C2326) *
                C114 +
            (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
             C48650 * C2344 - C7773 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C930 +
          ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
            C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
            C9039 * C9212 - C9033 * C9214) *
               C114 +
           (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
            C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
            C9039 * C9215 - C9033 * C9218) *
               C48373) *
              C48261 * C931 +
          ((C9029 * C938 - C9035 * C933 + C9030 * C2327 - C9036 * C2321 +
            C9031 * C2328 - C9037 * C2322 + C9032 * C9682 - C9038 * C9680 +
            C9033 * C9683 - C9039 * C9681) *
               C114 +
           (C9029 * C948 - C9035 * C939 + C9030 * C2339 - C9036 * C2329 +
            C9031 * C2340 - C9037 * C2330 + C9032 * C9686 - C9038 * C9684 +
            C9033 * C9687 - C9039 * C9685) *
               C48373) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
            C48650 * C585 - C7773 * C580) *
               C2458 +
           (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
            C48650 * C595 - C7773 * C586) *
               C48686 +
           (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C2459 +
           (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48675 +
           C10999 * C2460 + C11000 * C48653) *
              C48261 * C930 +
          ((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C2458 +
           (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48686 +
           (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C2459 +
           (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48675 +
           (C10985 - C10986 + C10987 - C10988 + C10989 - C10990) * C2460 +
           (C10991 - C10992 + C10993 - C10994 + C10995 - C10996) * C48653) *
              C48261 * C931 +
          (C10999 * C2458 + C11000 * C48686 +
           (C10986 - C10985 + C10988 - C10987 + C10990 - C10989) * C2459 +
           (C10992 - C10991 + C10994 - C10993 + C10996 - C10995) * C48675 +
           (C7765 * C3671 - C7771 * C3668 + C7766 * C10972 - C7772 * C10970 +
            C48650 * C10973 - C7773 * C10971) *
               C2460 +
           (C7765 * C3677 - C7771 * C3672 + C7766 * C10976 - C7772 * C10974 +
            C48650 * C10977 - C7773 * C10975) *
               C48653) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C4966 +
            (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
            (C2819 - C2820) * C48460) *
               C3786 +
           ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
            C2826 * C48460) *
               C3787 +
           C4983 * C3788 + C4984 * C48654) *
              C48345 * C48328 * C110 +
          (((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
            C2830 * C48460) *
               C3786 +
           ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
            C2838 * C48460) *
               C3787 +
           ((C153 - C152) * C4966 + (C155 - C154) * C48618 +
            (C421 - C422) * C4967 + (C423 - C424) * C48460) *
               C3788 +
           ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
            (C425 - C426) * C4967 + (C427 - C428) * C48460) *
               C48654) *
              C48345 * C48328 * C111 +
          (C4983 * C3786 + C4984 * C3787 +
           (C168 * C4966 + C169 * C48618 + (C426 - C425) * C4967 +
            (C428 - C427) * C48460) *
               C3788 +
           ((C161 - C160) * C4966 + (C163 - C162) * C48618 +
            (C48356 * C404 - C113 * C393) * C4967 +
            (C48356 * C411 - C113 * C405) * C48460) *
               C48654) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C4966 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48618 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
               C48595 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
            (C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C4967 +
            (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48460) *
               C48271) *
              C48345 * C48328 * C110 +
          (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
            (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
            (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C4967 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48460) *
               C48595 +
           ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
            (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
            (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
            (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
               C48271) *
              C48345 * C48328 * C111 +
          ((C7819 * C4966 + C7820 * C48618 +
            (C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C4967 +
            (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48460) *
               C48595 +
           ((C7800 - C7799 + C7802 - C7801 + C7804 - C7803) * C4966 +
            (C7806 - C7805 + C7808 - C7807 + C7810 - C7809) * C48618 +
            (C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
             C48650 * C1463 - C7773 * C1456) *
                C4967 +
            (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
             C48650 * C1468 - C7773 * C1464) *
                C48460) *
               C48271) *
              C48345 * C48328 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 +
             (C421 - C422) * C4967 + (C423 - C424) * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C260 +
           (((C290 - C289) * C4966 + (C292 - C291) * C48618 +
             (C2640 - C2639) * C4967 + (C2642 - C2641) * C48460) *
                C3786 +
            ((C294 - C293) * C4966 + (C296 - C295) * C48618 +
             (C2648 - C2647) * C4967 + (C2650 - C2649) * C48460) *
                C3787 +
            ((C298 - C297) * C4966 + (C300 - C299) * C48618 +
             (C5116 - C5115) * C4967 + (C5118 - C5117) * C48460) *
                C3788 +
            ((C302 - C301) * C4966 + (C304 - C303) * C48618 +
             (C48356 * C695 - C113 * C686) * C4967 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             (C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C4967 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C48345 * C48645) *
              C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             (C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C4967 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C48345 * C260 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C4966 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48618 +
             (C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4967 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48460) *
                C48595 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C4966 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48618 +
             (C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C4967 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C386 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 + C5249 * C4967 +
             C5250 * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C386 +
           ((C2825 * C4966 + C2826 * C48618 + C2827 * C4967 + C2828 * C48460) *
                C3786 +
            (C2468 * C4966 + C2469 * C48618 + C2481 * C4967 + C2482 * C48460) *
                C3787 +
            (C4975 * C4966 + C4976 * C48618 + (C2475 - C2474) * C4967 +
             (C2477 - C2476) * C48460) *
                C3788 +
            ((C426 - C425) * C4966 + (C428 - C427) * C48618 +
             (C48356 * C946 - C113 * C937) * C4967 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C386 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C48328 * C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             C12713 * C4967 + C12714 * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C386 +
           ((C12711 * C4966 + C12712 * C48618 +
             (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C4967 +
             (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48460) *
                C48595 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C4966 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48618 +
             (C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
              C48650 * C2336 - C7773 * C2326) *
                 C4967 +
             (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
              C48650 * C2344 - C7773 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 + C5249 * C4967 +
             C5250 * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C48345 * C510 +
           (((C290 - C289) * C4966 + (C292 - C291) * C48618 +
             (C2640 - C2639) * C4967 + (C2642 - C2641) * C48460) *
                C3786 +
            ((C294 - C293) * C4966 + (C296 - C295) * C48618 +
             (C2648 - C2647) * C4967 + (C2650 - C2649) * C48460) *
                C3787 +
            ((C298 - C297) * C4966 + (C300 - C299) * C48618 +
             (C5116 - C5115) * C4967 + (C5118 - C5117) * C48460) *
                C3788 +
            ((C302 - C301) * C4966 + (C304 - C303) * C48618 +
             (C48356 * C695 - C113 * C686) * C4967 +
             (C48356 * C701 - C113 * C696) * C48460) *
                C48654) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C48345 * C510 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C48345 * C48645) *
              C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             C12713 * C4967 + C12714 * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C48345 * C510 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C4966 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48618 +
             (C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4967 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48460) *
                C48595 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C4966 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48618 +
             (C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C4967 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48460) *
                C48271) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C4966 +
            (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
            (C2819 - C2820) * C48460) *
               C3786 +
           ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
            C2826 * C48460) *
               C3787 +
           C4983 * C3788 + C4984 * C48654) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C4966 +
            (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
            (C3261 - C3262) * C48460) *
               C3786 +
           ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
            (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
               C3787 +
           ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
            (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
               C3788 +
           ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
            (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
               C48654) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C4966 +
            (C48356 * C595 - C113 * C586) * C48618 +
            (C48356 * C1457 - C113 * C1453) * C4967 +
            (C48356 * C1465 - C113 * C1458) * C48460) *
               C3786 +
           ((C48356 * C587 - C113 * C581) * C4966 +
            (C48356 * C596 - C113 * C588) * C48618 +
            (C48356 * C1459 - C113 * C1454) * C4967 +
            (C48356 * C1466 - C113 * C1460) * C48460) *
               C3787 +
           ((C48356 * C589 - C113 * C582) * C4966 +
            (C48356 * C597 - C113 * C590) * C48618 +
            (C48356 * C1461 - C113 * C1455) * C4967 +
            (C48356 * C1467 - C113 * C1462) * C48460) *
               C3788 +
           ((C48356 * C591 - C113 * C583) * C4966 +
            (C48356 * C598 - C113 * C592) * C48618 +
            (C48356 * C1463 - C113 * C1456) * C4967 +
            (C48356 * C1468 - C113 * C1464) * C48460) *
               C48654) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C4966 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48618 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
               C48595 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
            C12711 * C4967 + C12712 * C48460) *
               C48271) *
              C48345 * C576 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C4966 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48618 +
            (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
            (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
               C48595 +
           ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
            (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
            (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
            (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
               C48271) *
              C48345 * C577 +
          (((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
             C48650 * C1752 - C7773 * C1749) *
                C4966 +
            (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
             C48650 * C1758 - C7773 * C1753) *
                C48618 +
            (C7765 * C1457 - C7771 * C1453 + C7766 * C1910 - C7772 * C1907 +
             C48650 * C9214 - C7773 * C9212) *
                C4967 +
            (C7765 * C1465 - C7771 * C1458 + C7766 * C1916 - C7772 * C1911 +
             C48650 * C9218 - C7773 * C9215) *
                C48460) *
               C48595 +
           ((C7765 * C587 - C7771 * C581 + C7766 * C1273 - C7772 * C1268 +
             C48650 * C1754 - C7773 * C1750) *
                C4966 +
            (C7765 * C596 - C7771 * C588 + C7766 * C1280 - C7772 * C1274 +
             C48650 * C1759 - C7773 * C1755) *
                C48618 +
            (C7765 * C1459 - C7771 * C1454 + C7766 * C1912 - C7772 * C1908 +
             C48650 * C9216 - C7773 * C9213) *
                C4967 +
            (C7765 * C1466 - C7771 * C1460 + C7766 * C1917 - C7772 * C1913 +
             C48650 * C9219 - C7773 * C9217) *
                C48460) *
               C48271) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C386 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C386 +
           (((C3260 - C3259) * C4966 + (C3262 - C3261) * C48618 +
             (C3264 - C3263) * C4967 + (C3266 - C3265) * C48460) *
                C3786 +
            ((C2640 - C2639) * C4966 + (C2642 - C2641) * C48618 +
             (C2644 - C2643) * C4967 + (C2646 - C2645) * C48460) *
                C3787 +
            ((C2648 - C2647) * C4966 + (C2650 - C2649) * C48618 +
             (C2652 - C2651) * C4967 + (C2654 - C2653) * C48460) *
                C3788 +
            ((C5116 - C5115) * C4966 + (C5118 - C5117) * C48618 +
             (C48356 * C2635 - C113 * C2634) * C4967 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C386 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C510 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C386 +
           (((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C4966 +
             (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48618 +
             (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C4967 +
             (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48460) *
                C48595 +
            ((C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4966 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48618 +
             (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
              C48650 * C9945 - C7773 * C9944) *
                 C4967 +
             (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
              C48650 * C9947 - C7773 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C784 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C4966 + (C147 - C146) * C48618 + C2829 * C4967 +
             C2830 * C48460) *
                C3786 +
            ((C149 - C148) * C4966 + (C151 - C150) * C48618 + C2837 * C4967 +
             C2838 * C48460) *
                C3787 +
            ((C153 - C152) * C4966 + (C155 - C154) * C48618 + C5249 * C4967 +
             C5250 * C48460) *
                C3788 +
            ((C157 - C156) * C4966 + (C159 - C158) * C48618 +
             (C425 - C426) * C4967 + (C427 - C428) * C48460) *
                C48654) *
               C784 +
           ((C2825 * C4966 + C2826 * C48618 + C2827 * C4967 + C2828 * C48460) *
                C3786 +
            (C2468 * C4966 + C2469 * C48618 + C2481 * C4967 + C2482 * C48460) *
                C3787 +
            (C4975 * C4966 + C4976 * C48618 + (C2475 - C2474) * C4967 +
             (C2477 - C2476) * C48460) *
                C3788 +
            ((C426 - C425) * C4966 + (C428 - C427) * C48618 +
             (C48356 * C946 - C113 * C937) * C4967 +
             (C48356 * C952 - C113 * C947) * C48460) *
                C48654) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C784 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C48328 * C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C4966 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48618 +
             C12713 * C4967 + C12714 * C48460) *
                C48595 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C4966 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48618 +
             (C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C4967 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48460) *
                C48271) *
               C784 +
           ((C12711 * C4966 + C12712 * C48618 +
             (C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C4967 +
             (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48460) *
                C48595 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C4966 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48618 +
             (C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
              C48650 * C2336 - C7773 * C2326) *
                 C4967 +
             (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
              C48650 * C2344 - C7773 * C2338) *
                 C48460) *
                C48271) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C4966 +
             (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
             (C2819 - C2820) * C48460) *
                C3786 +
            ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
             C2826 * C48460) *
                C3787 +
            C4983 * C3788 + C4984 * C48654) *
               C784 +
           (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
             (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
                C3786 +
            (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
                C3787 +
            (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
                C3788 +
            (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
             (C2476 - C2477) * C48460) *
                C48654) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C4966 +
             (C113 * C271 - C48356 * C282) * C48618 + (C3259 - C3260) * C4967 +
             (C3261 - C3262) * C48460) *
                C3786 +
            ((C289 - C290) * C4966 + (C291 - C292) * C48618 +
             (C2639 - C2640) * C4967 + (C2641 - C2642) * C48460) *
                C3787 +
            ((C293 - C294) * C4966 + (C295 - C296) * C48618 +
             (C2647 - C2648) * C4967 + (C2649 - C2650) * C48460) *
                C3788 +
            ((C297 - C298) * C4966 + (C299 - C300) * C48618 +
             (C5115 - C5116) * C4967 + (C5117 - C5118) * C48460) *
                C48654) *
               C784 +
           (((C3260 - C3259) * C4966 + (C3262 - C3261) * C48618 +
             (C3264 - C3263) * C4967 + (C3266 - C3265) * C48460) *
                C3786 +
            ((C2640 - C2639) * C4966 + (C2642 - C2641) * C48618 +
             (C2644 - C2643) * C4967 + (C2646 - C2645) * C48460) *
                C3787 +
            ((C2648 - C2647) * C4966 + (C2650 - C2649) * C48618 +
             (C2652 - C2651) * C4967 + (C2654 - C2653) * C48460) *
                C3788 +
            ((C5116 - C5115) * C4966 + (C5118 - C5117) * C48618 +
             (C48356 * C2635 - C113 * C2634) * C4967 +
             (C48356 * C2637 - C113 * C2636) * C48460) *
                C48654) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C4966 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48618 +
             (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
             (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
                C48595 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
             C12711 * C4967 + C12712 * C48460) *
                C48271) *
               C784 +
           (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
             (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
             (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
             (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
                C48595 +
            (C12713 * C4966 + C12714 * C48618 +
             (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
             (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
                C48271) *
               C48647) *
              C260 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C4966 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48618 +
             (C10545 - C10546 + C10547 - C10548 + C10549 - C10550) * C4967 +
             (C10551 - C10552 + C10553 - C10554 + C10555 - C10556) * C48460) *
                C48595 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C4966 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48618 +
             (C12489 - C12490 + C12491 - C12492 + C12493 - C12494) * C4967 +
             (C12495 - C12496 + C12497 - C12498 + C12499 - C12500) * C48460) *
                C48271) *
               C784 +
           (((C10546 - C10545 + C10548 - C10547 + C10550 - C10549) * C4966 +
             (C10552 - C10551 + C10554 - C10553 + C10556 - C10555) * C48618 +
             (C10558 - C10557 + C10560 - C10559 + C10562 - C10561) * C4967 +
             (C10564 - C10563 + C10566 - C10565 + C10568 - C10567) * C48460) *
                C48595 +
            ((C12490 - C12489 + C12492 - C12491 + C12494 - C12493) * C4966 +
             (C12496 - C12495 + C12498 - C12497 + C12500 - C12499) * C48618 +
             (C7765 * C2331 - C7771 * C2323 + C7766 * C2332 - C7772 * C2324 +
              C48650 * C9945 - C7773 * C9944) *
                 C4967 +
             (C7765 * C2341 - C7771 * C2333 + C7766 * C2342 - C7772 * C2334 +
              C48650 * C9947 - C7773 * C9946) *
                 C48460) *
                C48271) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C4966 +
            (C48356 * C136 - C113 * C123) * C48618 + (C2817 - C2818) * C4967 +
            (C2819 - C2820) * C48460) *
               C3786 +
           ((C144 - C145) * C4966 + (C146 - C147) * C48618 + C2825 * C4967 +
            C2826 * C48460) *
               C3787 +
           C4983 * C3788 + C4984 * C48654) *
              C930 +
          (((C2818 - C2817) * C4966 + (C2820 - C2819) * C48618 +
            (C2822 - C2821) * C4967 + (C2824 - C2823) * C48460) *
               C3786 +
           (C2829 * C4966 + C2830 * C48618 + C2831 * C4967 + C2832 * C48460) *
               C3787 +
           (C2837 * C4966 + C2838 * C48618 + C2839 * C4967 + C2840 * C48460) *
               C3788 +
           (C5249 * C4966 + C5250 * C48618 + (C2474 - C2475) * C4967 +
            (C2476 - C2477) * C48460) *
               C48654) *
              C931 +
          ((C3681 * C4966 + C3682 * C48618 + (C3684 - C3683) * C4967 +
            (C3686 - C3685) * C48460) *
               C3786 +
           (C2827 * C4966 + C2828 * C48618 + (C2834 - C2833) * C4967 +
            (C2836 - C2835) * C48460) *
               C3787 +
           (C2481 * C4966 + C2482 * C48618 + (C2842 - C2841) * C4967 +
            (C2844 - C2843) * C48460) *
               C3788 +
           ((C2475 - C2474) * C4966 + (C2477 - C2476) * C48618 +
            (C48356 * C2810 - C113 * C2803) * C4967 +
            (C48356 * C2815 - C113 * C2811) * C48460) *
               C48654) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C4966 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48618 +
            (C10103 - C10104 + C10105 - C10106 + C10107 - C10108) * C4967 +
            (C10109 - C10110 + C10111 - C10112 + C10113 - C10114) * C48460) *
               C48595 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C4966 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48618 +
            C12711 * C4967 + C12712 * C48460) *
               C48271) *
              C930 +
          (((C10104 - C10103 + C10106 - C10105 + C10108 - C10107) * C4966 +
            (C10110 - C10109 + C10112 - C10111 + C10114 - C10113) * C48618 +
            (C10116 - C10115 + C10118 - C10117 + C10120 - C10119) * C4967 +
            (C10122 - C10121 + C10124 - C10123 + C10126 - C10125) * C48460) *
               C48595 +
           (C12713 * C4966 + C12714 * C48618 +
            (C10127 - C10128 + C10129 - C10130 + C10131 - C10132) * C4967 +
            (C10133 - C10134 + C10135 - C10136 + C10137 - C10138) * C48460) *
               C48271) *
              C931 +
          ((C10999 * C4966 + C11000 * C48618 +
            (C10986 - C10985 + C10988 - C10987 + C10990 - C10989) * C4967 +
            (C10992 - C10991 + C10994 - C10993 + C10996 - C10995) * C48460) *
               C48595 +
           ((C10128 - C10127 + C10130 - C10129 + C10132 - C10131) * C4966 +
            (C10134 - C10133 + C10136 - C10135 + C10138 - C10137) * C48618 +
            (C7765 * C2806 - C7771 * C2801 + C7766 * C3251 - C7772 * C3247 +
             C48650 * C10098 - C7773 * C10095) *
                C4967 +
            (C7765 * C2813 - C7771 * C2807 + C7766 * C3256 - C7772 * C3252 +
             C48650 * C10101 - C7773 * C10099) *
                C48460) *
               C48271) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48356 * C122 - C113 * C115) * C114 +
                     (C48356 * C136 - C113 * C123) * C48373) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
                    C176 * C105 + C177 * C106 + C178 * C107) *
                       C48345 * C48328 * C110 +
                   (((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
                    ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
                    ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
                    ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
                       C48345 * C48328 * C111 +
                   (C176 * C103 + C177 * C104 + C178 * C105 +
                    ((C161 - C160) * C114 + (C163 - C162) * C48373) * C106 +
                    ((C48356 * C134 - C113 * C121) * C114 +
                     (C48356 * C142 - C113 * C135) * C48373) *
                        C107) *
                       C48345 * C48328 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48685 * C122 - C1069 * C115 + C48673 * C270 -
                      C1070 * C264 + C48650 * C585 - C1071 * C580) *
                         C114 +
                     (C48685 * C136 - C1069 * C123 + C48673 * C282 -
                      C1070 * C271 + C48650 * C595 - C1071 * C586) *
                         C48373) *
                        C1066 +
                    ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
                     (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                        C1067 +
                    C1121 * C48637) *
                       C48345 * C48328 * C110 +
                   (((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
                     (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                        C1066 +
                    ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
                     (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                        C1067 +
                    ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
                     (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                        C48637) *
                       C48345 * C48328 * C111 +
                   (C1121 * C1066 +
                    ((C1098 - C1097 + C1100 - C1099 + C1102 - C1101) * C114 +
                     (C1104 - C1103 + C1106 - C1105 + C1108 - C1107) * C48373) *
                        C1067 +
                    ((C48685 * C130 - C1069 * C119 + C48673 * C278 -
                      C1070 * C268 + C48650 * C593 - C1071 * C584) *
                         C114 +
                     (C48685 * C140 - C1069 * C131 + C48673 * C286 -
                      C1070 * C279 + C48650 * C599 - C1071 * C594) *
                         C48373) *
                        C48637) *
                       C48345 * C48328 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C7765 * C122 - C7771 * C115 + C7766 * C270 -
                      C7772 * C264 + C48650 * C585 - C7773 * C580) *
                         C114 +
                     (C7765 * C136 - C7771 * C123 + C7766 * C282 -
                      C7772 * C271 + C48650 * C595 - C7773 * C586) *
                         C48373) *
                        C48682 +
                    ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
                     (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                        C48669 +
                    C7823 * C48637) *
                       C48345 * C48328 * C110 +
                   (((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
                     (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                        C48682 +
                    ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
                     (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                        C48669 +
                    ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
                     (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                        C48637) *
                       C48345 * C48328 * C111 +
                   (C7823 * C48682 +
                    ((C7800 - C7799 + C7802 - C7801 + C7804 - C7803) * C114 +
                     (C7806 - C7805 + C7808 - C7807 + C7810 - C7809) * C48373) *
                        C48669 +
                    ((C7765 * C130 - C7771 * C119 + C7766 * C278 -
                      C7772 * C268 + C48650 * C593 - C7773 * C584) *
                         C114 +
                     (C7765 * C140 - C7771 * C131 + C7766 * C286 -
                      C7772 * C279 + C48650 * C599 - C7773 * C594) *
                         C48373) *
                        C48637) *
                       C48345 * C48328 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
                     C9031 * C585 - C9037 * C580 + C9032 * C1271 -
                     C9038 * C1267 + C9033 * C1752 - C9039 * C1749) *
                        C114 +
                    (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
                     C9031 * C595 - C9037 * C586 + C9032 * C1279 -
                     C9038 * C1272 + C9033 * C1758 - C9039 * C1753) *
                        C48373) *
                       C48261 * C48345 * C48328 * C110 +
                   ((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
                     C9037 * C581 - C9031 * C587 + C9038 * C1268 -
                     C9032 * C1273 + C9039 * C1750 - C9033 * C1754) *
                        C114 +
                    (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
                     C9037 * C588 - C9031 * C596 + C9038 * C1274 -
                     C9032 * C1280 + C9039 * C1755 - C9033 * C1759) *
                        C48373) *
                       C48261 * C48345 * C48328 * C111 +
                   ((C9029 * C126 - C9035 * C117 + C9030 * C274 - C9036 * C266 +
                     C9031 * C589 - C9037 * C582 + C9032 * C1275 -
                     C9038 * C1269 + C9033 * C1756 - C9039 * C1751) *
                        C114 +
                    (C9029 * C138 - C9035 * C127 + C9030 * C284 - C9036 * C275 +
                     C9031 * C597 - C9037 * C590 + C9032 * C1281 -
                     C9038 * C1276 + C9033 * C1760 - C9039 * C1757) *
                        C48373) *
                       C48261 * C48345 * C48328 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48345 * C260 +
           (((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C48345 * C48645) *
              C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C48345 * C260 +
           (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
            ((C48356 * C280 - C113 * C269) * C114 +
             (C48356 * C287 - C113 * C281) * C48373) *
                C107) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C48345 * C260 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                C1066 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                C1067 +
            ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
              C48650 * C1277 - C1071 * C1270) *
                 C114 +
             (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
              C48650 * C1282 - C1071 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C260 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C260 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C260 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C48328 * C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C386 +
           (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
            ((C48356 * C404 - C113 * C393) * C114 +
             (C48356 * C411 - C113 * C405) * C48373) *
                C107) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C386 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C386 +
           (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                C1066 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                C1067 +
            ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
              C48650 * C1463 - C1071 * C1456) *
                 C114 +
             (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
              C48650 * C1468 - C1071 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C262 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C386 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C262 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48345 * C510 +
           (((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C48345 * C48645) *
              C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C48345 * C510 +
           (((C290 - C289) * C114 + (C292 - C291) * C48373) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48373) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48373) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48373) * C106 +
            ((C48356 * C280 - C113 * C269) * C114 +
             (C48356 * C287 - C113 * C281) * C48373) *
                C107) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C48345 * C510 +
           (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C1285 - C1284 + C1287 - C1286 + C1289 - C1288) * C114 +
             (C1291 - C1290 + C1293 - C1292 + C1295 - C1294) * C48373) *
                C1066 +
            ((C1297 - C1296 + C1299 - C1298 + C1301 - C1300) * C114 +
             (C1303 - C1302 + C1305 - C1304 + C1307 - C1306) * C48373) *
                C1067 +
            ((C48685 * C276 - C1069 * C267 + C48673 * C591 - C1070 * C583 +
              C48650 * C1277 - C1071 * C1270) *
                 C114 +
             (C48685 * C285 - C1069 * C277 + C48673 * C598 - C1070 * C592 +
              C48650 * C1282 - C1071 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C48345 * C510 +
           (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C48345 * C48645) *
              C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C48345 * C510 +
           (((C7971 - C7970 + C7973 - C7972 + C7975 - C7974) * C114 +
             (C7977 - C7976 + C7979 - C7978 + C7981 - C7980) * C48373) *
                C48682 +
            ((C7983 - C7982 + C7985 - C7984 + C7987 - C7986) * C114 +
             (C7989 - C7988 + C7991 - C7990 + C7993 - C7992) * C48373) *
                C48669 +
            ((C7765 * C276 - C7771 * C267 + C7766 * C591 - C7772 * C583 +
              C48650 * C1277 - C7773 * C1270) *
                 C114 +
             (C7765 * C285 - C7771 * C277 + C7766 * C598 - C7772 * C592 +
              C48650 * C1282 - C7773 * C1278) *
                 C48373) *
                C48637) *
               C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C48345 * C48645) *
              C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C48345 * C510 +
           ((C9029 * C272 - C9035 * C265 + C9030 * C587 - C9036 * C581 +
             C9031 * C1273 - C9037 * C1268 + C9032 * C1754 - C9038 * C1750 +
             C9033 * C9126 - C9039 * C9123) *
                C114 +
            (C9029 * C283 - C9035 * C273 + C9030 * C596 - C9036 * C588 +
             C9031 * C1280 - C9037 * C1274 + C9032 * C1759 - C9038 * C1755 +
             C9033 * C9129 - C9039 * C9127) *
                C48373) *
               C48261 * C48345 * C48645) *
              C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48345 * C576 +
          (((C113 * C264 - C48356 * C270) * C114 +
            (C113 * C271 - C48356 * C282) * C48373) *
               C103 +
           ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
           ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
           ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
           ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
              C48345 * C577 +
          (((C48356 * C585 - C113 * C580) * C114 +
            (C48356 * C595 - C113 * C586) * C48373) *
               C103 +
           ((C48356 * C587 - C113 * C581) * C114 +
            (C48356 * C596 - C113 * C588) * C48373) *
               C104 +
           ((C48356 * C589 - C113 * C582) * C114 +
            (C48356 * C597 - C113 * C590) * C48373) *
               C105 +
           ((C48356 * C591 - C113 * C583) * C114 +
            (C48356 * C598 - C113 * C592) * C48373) *
               C106 +
           ((C48356 * C593 - C113 * C584) * C114 +
            (C48356 * C599 - C113 * C594) * C48373) *
               C107) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C48345 * C576 +
          (((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
             C1071 * C1267 - C48650 * C1271) *
                C114 +
            (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
             C1071 * C1272 - C48650 * C1279) *
                C48373) *
               C1066 +
           ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
            (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
               C1067 +
           ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
            (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C48685 * C585 - C1069 * C580 + C48673 * C1271 - C1070 * C1267 +
             C48650 * C1752 - C1071 * C1749) *
                C114 +
            (C48685 * C595 - C1069 * C586 + C48673 * C1279 - C1070 * C1272 +
             C48650 * C1758 - C1071 * C1753) *
                C48373) *
               C1066 +
           ((C48685 * C587 - C1069 * C581 + C48673 * C1273 - C1070 * C1268 +
             C48650 * C1754 - C1071 * C1750) *
                C114 +
            (C48685 * C596 - C1069 * C588 + C48673 * C1280 - C1070 * C1274 +
             C48650 * C1759 - C1071 * C1755) *
                C48373) *
               C1067 +
           ((C48685 * C589 - C1069 * C582 + C48673 * C1275 - C1070 * C1269 +
             C48650 * C1756 - C1071 * C1751) *
                C114 +
            (C48685 * C597 - C1069 * C590 + C48673 * C1281 - C1070 * C1276 +
             C48650 * C1760 - C1071 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C48345 * C576 +
          (((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
             C7773 * C1267 - C48650 * C1271) *
                C114 +
            (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
             C7773 * C1272 - C48650 * C1279) *
                C48373) *
               C48682 +
           ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
            (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
               C48669 +
           ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
            (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
               C48637) *
              C48345 * C577 +
          (((C7765 * C585 - C7771 * C580 + C7766 * C1271 - C7772 * C1267 +
             C48650 * C1752 - C7773 * C1749) *
                C114 +
            (C7765 * C595 - C7771 * C586 + C7766 * C1279 - C7772 * C1272 +
             C48650 * C1758 - C7773 * C1753) *
                C48373) *
               C48682 +
           ((C7765 * C587 - C7771 * C581 + C7766 * C1273 - C7772 * C1268 +
             C48650 * C1754 - C7773 * C1750) *
                C114 +
            (C7765 * C596 - C7771 * C588 + C7766 * C1280 - C7772 * C1274 +
             C48650 * C1759 - C7773 * C1755) *
                C48373) *
               C48669 +
           ((C7765 * C589 - C7771 * C582 + C7766 * C1275 - C7772 * C1269 +
             C48650 * C1756 - C7773 * C1751) *
                C114 +
            (C7765 * C597 - C7771 * C590 + C7766 * C1281 - C7772 * C1276 +
             C48650 * C1760 - C7773 * C1757) *
                C48373) *
               C48637) *
              C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C48345 * C576 +
          ((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
            C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
            C9039 * C9122 - C9033 * C9124) *
               C114 +
           (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
            C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
            C9039 * C9125 - C9033 * C9128) *
               C48373) *
              C48261 * C48345 * C577 +
          ((C9029 * C585 - C9035 * C580 + C9030 * C1271 - C9036 * C1267 +
            C9031 * C1752 - C9037 * C1749 + C9032 * C9124 - C9038 * C9122 +
            C9033 * C9365 - C9039 * C9364) *
               C114 +
           (C9029 * C595 - C9035 * C586 + C9030 * C1279 - C9036 * C1272 +
            C9031 * C1758 - C9037 * C1753 + C9032 * C9128 - C9038 * C9125 +
            C9033 * C9367 - C9039 * C9366) *
               C48373) *
              C48261 * C48345 * C578) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C510 +
          ((((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C386 +
           (((C48356 * C687 - C113 * C682) * C114 +
             (C48356 * C697 - C113 * C688) * C48373) *
                C103 +
            ((C48356 * C689 - C113 * C683) * C114 +
             (C48356 * C698 - C113 * C690) * C48373) *
                C104 +
            ((C48356 * C691 - C113 * C684) * C114 +
             (C48356 * C699 - C113 * C692) * C48373) *
                C105 +
            ((C48356 * C693 - C113 * C685) * C114 +
             (C48356 * C700 - C113 * C694) * C48373) *
                C106 +
            ((C48356 * C695 - C113 * C686) * C114 +
             (C48356 * C701 - C113 * C696) * C48373) *
                C107) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C386 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C386 +
           (((C48685 * C687 - C1069 * C682 + C48673 * C1457 - C1070 * C1453 +
              C48650 * C1910 - C1071 * C1907) *
                 C114 +
             (C48685 * C697 - C1069 * C688 + C48673 * C1465 - C1070 * C1458 +
              C48650 * C1916 - C1071 * C1911) *
                 C48373) *
                C1066 +
            ((C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
              C48650 * C1912 - C1071 * C1908) *
                 C114 +
             (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
              C48650 * C1917 - C1071 * C1913) *
                 C48373) *
                C1067 +
            ((C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C114 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C386 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C510 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C386 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C386 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C510 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C386 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C48328 * C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48373) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48373) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48373) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48373) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48373) * C107) *
               C784 +
           (((C414 - C413) * C114 + (C416 - C415) * C48373) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48373) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48373) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48373) * C106 +
            ((C48356 * C404 - C113 * C393) * C114 +
             (C48356 * C411 - C113 * C405) * C48373) *
                C107) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C784 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C1074 - C1073 + C1076 - C1075 + C1078 - C1077) * C114 +
             (C1080 - C1079 + C1082 - C1081 + C1084 - C1083) * C48373) *
                C1066 +
            ((C1086 - C1085 + C1088 - C1087 + C1090 - C1089) * C114 +
             (C1092 - C1091 + C1094 - C1093 + C1096 - C1095) * C48373) *
                C1067 +
            ((C1097 - C1098 + C1099 - C1100 + C1101 - C1102) * C114 +
             (C1103 - C1104 + C1105 - C1106 + C1107 - C1108) * C48373) *
                C48637) *
               C784 +
           (((C1471 - C1470 + C1473 - C1472 + C1475 - C1474) * C114 +
             (C1477 - C1476 + C1479 - C1478 + C1481 - C1480) * C48373) *
                C1066 +
            ((C1483 - C1482 + C1485 - C1484 + C1487 - C1486) * C114 +
             (C1489 - C1488 + C1491 - C1490 + C1493 - C1492) * C48373) *
                C1067 +
            ((C48685 * C400 - C1069 * C391 + C48673 * C693 - C1070 * C685 +
              C48650 * C1463 - C1071 * C1456) *
                 C114 +
             (C48685 * C409 - C1069 * C401 + C48673 * C700 - C1070 * C694 +
              C48650 * C1468 - C1071 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C48328 * C512 +
          ((((C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C114 +
             (C7782 - C7781 + C7784 - C7783 + C7786 - C7785) * C48373) *
                C48682 +
            ((C7788 - C7787 + C7790 - C7789 + C7792 - C7791) * C114 +
             (C7794 - C7793 + C7796 - C7795 + C7798 - C7797) * C48373) *
                C48669 +
            ((C7799 - C7800 + C7801 - C7802 + C7803 - C7804) * C114 +
             (C7805 - C7806 + C7807 - C7808 + C7809 - C7810) * C48373) *
                C48637) *
               C784 +
           (((C8141 - C8140 + C8143 - C8142 + C8145 - C8144) * C114 +
             (C8147 - C8146 + C8149 - C8148 + C8151 - C8150) * C48373) *
                C48682 +
            ((C8153 - C8152 + C8155 - C8154 + C8157 - C8156) * C114 +
             (C8159 - C8158 + C8161 - C8160 + C8163 - C8162) * C48373) *
                C48669 +
            ((C7765 * C400 - C7771 * C391 + C7766 * C693 - C7772 * C685 +
              C48650 * C1463 - C7773 * C1456) *
                 C114 +
             (C7765 * C409 - C7771 * C401 + C7766 * C700 - C7772 * C694 +
              C48650 * C1468 - C7773 * C1464) *
                 C48373) *
                C48637) *
               C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C48328 * C512 +
          (((C9035 * C116 - C9029 * C124 + C9036 * C265 - C9030 * C272 +
             C9037 * C581 - C9031 * C587 + C9038 * C1268 - C9032 * C1273 +
             C9039 * C1750 - C9033 * C1754) *
                C114 +
            (C9035 * C125 - C9029 * C137 + C9036 * C273 - C9030 * C283 +
             C9037 * C588 - C9031 * C596 + C9038 * C1274 - C9032 * C1280 +
             C9039 * C1755 - C9033 * C1759) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C396 - C9035 * C389 + C9030 * C689 - C9036 * C683 +
             C9031 * C1459 - C9037 * C1454 + C9032 * C1912 - C9038 * C1908 +
             C9033 * C9216 - C9039 * C9213) *
                C114 +
            (C9029 * C407 - C9035 * C397 + C9030 * C698 - C9036 * C690 +
             C9031 * C1466 - C9037 * C1460 + C9032 * C1917 - C9038 * C1913 +
             C9033 * C9219 - C9039 * C9217) *
                C48373) *
               C48261 * C48647) *
              C48328 * C48643)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48356 * C122 - C113 * C115) * C114 +
             (C48356 * C136 - C113 * C123) * C48373) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48356 * C394) * C114 +
             (C113 * C395 - C48356 * C406) * C48373) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
               C48647) *
              C260 +
          ((((C113 * C264 - C48356 * C270) * C114 +
             (C113 * C271 - C48356 * C282) * C48373) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48373) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48373) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48373) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48373) * C107) *
               C784 +
           (((C48356 * C687 - C113 * C682) * C114 +
             (C48356 * C697 - C113 * C688) * C48373) *
                C103 +
            ((C48356 * C689 - C113 * C683) * C114 +
             (C48356 * C698 - C113 * C690) * C48373) *
                C104 +
            ((C48356 * C691 - C113 * C684) * C114 +
             (C48356 * C699 - C113 * C692) * C48373) *
                C105 +
            ((C48356 * C693 - C113 * C685) * C114 +
             (C48356 * C700 - C113 * C694) * C48373) *
                C106 +
            ((C48356 * C695 - C113 * C686) * C114 +
             (C48356 * C701 - C113 * C696) * C48373) *
                C107) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
              C48650 * C585 - C1071 * C580) *
                 C114 +
             (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
              C48650 * C595 - C1071 * C586) *
                 C48373) *
                C1066 +
            ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
             (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
                C1067 +
            C1121 * C48637) *
               C784 +
           (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
              C1071 * C1453 - C48650 * C1457) *
                 C114 +
             (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
              C1071 * C1458 - C48650 * C1465) *
                 C48373) *
                C1066 +
            ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
             (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
                C1067 +
            ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
             (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C1069 * C264 - C48685 * C270 + C1070 * C580 - C48673 * C585 +
              C1071 * C1267 - C48650 * C1271) *
                 C114 +
             (C1069 * C271 - C48685 * C282 + C1070 * C586 - C48673 * C595 +
              C1071 * C1272 - C48650 * C1279) *
                 C48373) *
                C1066 +
            ((C1284 - C1285 + C1286 - C1287 + C1288 - C1289) * C114 +
             (C1290 - C1291 + C1292 - C1293 + C1294 - C1295) * C48373) *
                C1067 +
            ((C1296 - C1297 + C1298 - C1299 + C1300 - C1301) * C114 +
             (C1302 - C1303 + C1304 - C1305 + C1306 - C1307) * C48373) *
                C48637) *
               C784 +
           (((C48685 * C687 - C1069 * C682 + C48673 * C1457 - C1070 * C1453 +
              C48650 * C1910 - C1071 * C1907) *
                 C114 +
             (C48685 * C697 - C1069 * C688 + C48673 * C1465 - C1070 * C1458 +
              C48650 * C1916 - C1071 * C1911) *
                 C48373) *
                C1066 +
            ((C48685 * C689 - C1069 * C683 + C48673 * C1459 - C1070 * C1454 +
              C48650 * C1912 - C1071 * C1908) *
                 C114 +
             (C48685 * C698 - C1069 * C690 + C48673 * C1466 - C1070 * C1460 +
              C48650 * C1917 - C1071 * C1913) *
                 C48373) *
                C1067 +
            ((C48685 * C691 - C1069 * C684 + C48673 * C1461 - C1070 * C1455 +
              C48650 * C1914 - C1071 * C1909) *
                 C114 +
             (C48685 * C699 - C1069 * C692 + C48673 * C1467 - C1070 * C1462 +
              C48650 * C1918 - C1071 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
              C48650 * C585 - C7773 * C580) *
                 C114 +
             (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
              C48650 * C595 - C7773 * C586) *
                 C48373) *
                C48682 +
            ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
             (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
                C48669 +
            C7823 * C48637) *
               C784 +
           (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
              C7773 * C1453 - C48650 * C1457) *
                 C114 +
             (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
              C7773 * C1458 - C48650 * C1465) *
                 C48373) *
                C48682 +
            ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
             (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
                C48669 +
            ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
             (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
                C48637) *
               C48647) *
              C260 +
          ((((C7771 * C264 - C7765 * C270 + C7772 * C580 - C7766 * C585 +
              C7773 * C1267 - C48650 * C1271) *
                 C114 +
             (C7771 * C271 - C7765 * C282 + C7772 * C586 - C7766 * C595 +
              C7773 * C1272 - C48650 * C1279) *
                 C48373) *
                C48682 +
            ((C7970 - C7971 + C7972 - C7973 + C7974 - C7975) * C114 +
             (C7976 - C7977 + C7978 - C7979 + C7980 - C7981) * C48373) *
                C48669 +
            ((C7982 - C7983 + C7984 - C7985 + C7986 - C7987) * C114 +
             (C7988 - C7989 + C7990 - C7991 + C7992 - C7993) * C48373) *
                C48637) *
               C784 +
           (((C7765 * C687 - C7771 * C682 + C7766 * C1457 - C7772 * C1453 +
              C48650 * C1910 - C7773 * C1907) *
                 C114 +
             (C7765 * C697 - C7771 * C688 + C7766 * C1465 - C7772 * C1458 +
              C48650 * C1916 - C7773 * C1911) *
                 C48373) *
                C48682 +
            ((C7765 * C689 - C7771 * C683 + C7766 * C1459 - C7772 * C1454 +
              C48650 * C1912 - C7773 * C1908) *
                 C114 +
             (C7765 * C698 - C7771 * C690 + C7766 * C1466 - C7772 * C1460 +
              C48650 * C1917 - C7773 * C1913) *
                 C48373) *
                C48669 +
            ((C7765 * C691 - C7771 * C684 + C7766 * C1461 - C7772 * C1455 +
              C48650 * C1914 - C7773 * C1909) *
                 C114 +
             (C7765 * C699 - C7771 * C692 + C7766 * C1467 - C7772 * C1462 +
              C48650 * C1918 - C7773 * C1915) *
                 C48373) *
                C48637) *
               C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
             C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
             C9033 * C1752 - C9039 * C1749) *
                C114 +
            (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
             C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
             C9033 * C1758 - C9039 * C1753) *
                C48373) *
               C48261 * C784 +
           ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
             C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
             C9039 * C9212 - C9033 * C9214) *
                C114 +
            (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
             C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
             C9039 * C9215 - C9033 * C9218) *
                C48373) *
               C48261 * C48647) *
              C260 +
          (((C9035 * C264 - C9029 * C270 + C9036 * C580 - C9030 * C585 +
             C9037 * C1267 - C9031 * C1271 + C9038 * C1749 - C9032 * C1752 +
             C9039 * C9122 - C9033 * C9124) *
                C114 +
            (C9035 * C271 - C9029 * C282 + C9036 * C586 - C9030 * C595 +
             C9037 * C1272 - C9031 * C1279 + C9038 * C1753 - C9032 * C1758 +
             C9039 * C9125 - C9033 * C9128) *
                C48373) *
               C48261 * C784 +
           ((C9029 * C687 - C9035 * C682 + C9030 * C1457 - C9036 * C1453 +
             C9031 * C1910 - C9037 * C1907 + C9032 * C9214 - C9038 * C9212 +
             C9033 * C9451 - C9039 * C9450) *
                C114 +
            (C9029 * C697 - C9035 * C688 + C9030 * C1465 - C9036 * C1458 +
             C9031 * C1916 - C9037 * C1911 + C9032 * C9218 - C9038 * C9215 +
             C9033 * C9453 - C9039 * C9452) *
                C48373) *
               C48261 * C48647) *
              C48645) *
         C48294) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48356 * C122 - C113 * C115) * C114 +
            (C48356 * C136 - C113 * C123) * C48373) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48373) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C930 +
          (((C113 * C388 - C48356 * C394) * C114 +
            (C113 * C395 - C48356 * C406) * C48373) *
               C103 +
           ((C413 - C414) * C114 + (C415 - C416) * C48373) * C104 +
           ((C417 - C418) * C114 + (C419 - C420) * C48373) * C105 +
           ((C421 - C422) * C114 + (C423 - C424) * C48373) * C106 +
           ((C425 - C426) * C114 + (C427 - C428) * C48373) * C107) *
              C931 +
          (((C48356 * C938 - C113 * C933) * C114 +
            (C48356 * C948 - C113 * C939) * C48373) *
               C103 +
           ((C48356 * C940 - C113 * C934) * C114 +
            (C48356 * C949 - C113 * C941) * C48373) *
               C104 +
           ((C48356 * C942 - C113 * C935) * C114 +
            (C48356 * C950 - C113 * C943) * C48373) *
               C105 +
           ((C48356 * C944 - C113 * C936) * C114 +
            (C48356 * C951 - C113 * C945) * C48373) *
               C106 +
           ((C48356 * C946 - C113 * C937) * C114 +
            (C48356 * C952 - C113 * C947) * C48373) *
               C107) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48685 * C122 - C1069 * C115 + C48673 * C270 - C1070 * C264 +
             C48650 * C585 - C1071 * C580) *
                C114 +
            (C48685 * C136 - C1069 * C123 + C48673 * C282 - C1070 * C271 +
             C48650 * C595 - C1071 * C586) *
                C48373) *
               C1066 +
           ((C1073 - C1074 + C1075 - C1076 + C1077 - C1078) * C114 +
            (C1079 - C1080 + C1081 - C1082 + C1083 - C1084) * C48373) *
               C1067 +
           C1121 * C48637) *
              C930 +
          (((C1069 * C388 - C48685 * C394 + C1070 * C682 - C48673 * C687 +
             C1071 * C1453 - C48650 * C1457) *
                C114 +
            (C1069 * C395 - C48685 * C406 + C1070 * C688 - C48673 * C697 +
             C1071 * C1458 - C48650 * C1465) *
                C48373) *
               C1066 +
           ((C1470 - C1471 + C1472 - C1473 + C1474 - C1475) * C114 +
            (C1476 - C1477 + C1478 - C1479 + C1480 - C1481) * C48373) *
               C1067 +
           ((C1482 - C1483 + C1484 - C1485 + C1486 - C1487) * C114 +
            (C1488 - C1489 + C1490 - C1491 + C1492 - C1493) * C48373) *
               C48637) *
              C931 +
          (((C48685 * C938 - C1069 * C933 + C48673 * C2327 - C1070 * C2321 +
             C48650 * C2328 - C1071 * C2322) *
                C114 +
            (C48685 * C948 - C1069 * C939 + C48673 * C2339 - C1070 * C2329 +
             C48650 * C2340 - C1071 * C2330) *
                C48373) *
               C1066 +
           ((C48685 * C940 - C1069 * C934 + C48673 * C2331 - C1070 * C2323 +
             C48650 * C2332 - C1071 * C2324) *
                C114 +
            (C48685 * C949 - C1069 * C941 + C48673 * C2341 - C1070 * C2333 +
             C48650 * C2342 - C1071 * C2334) *
                C48373) *
               C1067 +
           ((C48685 * C942 - C1069 * C935 + C48673 * C2335 - C1070 * C2325 +
             C48650 * C2336 - C1071 * C2326) *
                C114 +
            (C48685 * C950 - C1069 * C943 + C48673 * C2343 - C1070 * C2337 +
             C48650 * C2344 - C1071 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7765 * C122 - C7771 * C115 + C7766 * C270 - C7772 * C264 +
             C48650 * C585 - C7773 * C580) *
                C114 +
            (C7765 * C136 - C7771 * C123 + C7766 * C282 - C7772 * C271 +
             C48650 * C595 - C7773 * C586) *
                C48373) *
               C48682 +
           ((C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C114 +
            (C7781 - C7782 + C7783 - C7784 + C7785 - C7786) * C48373) *
               C48669 +
           C7823 * C48637) *
              C930 +
          (((C7771 * C388 - C7765 * C394 + C7772 * C682 - C7766 * C687 +
             C7773 * C1453 - C48650 * C1457) *
                C114 +
            (C7771 * C395 - C7765 * C406 + C7772 * C688 - C7766 * C697 +
             C7773 * C1458 - C48650 * C1465) *
                C48373) *
               C48682 +
           ((C8140 - C8141 + C8142 - C8143 + C8144 - C8145) * C114 +
            (C8146 - C8147 + C8148 - C8149 + C8150 - C8151) * C48373) *
               C48669 +
           ((C8152 - C8153 + C8154 - C8155 + C8156 - C8157) * C114 +
            (C8158 - C8159 + C8160 - C8161 + C8162 - C8163) * C48373) *
               C48637) *
              C931 +
          (((C7765 * C938 - C7771 * C933 + C7766 * C2327 - C7772 * C2321 +
             C48650 * C2328 - C7773 * C2322) *
                C114 +
            (C7765 * C948 - C7771 * C939 + C7766 * C2339 - C7772 * C2329 +
             C48650 * C2340 - C7773 * C2330) *
                C48373) *
               C48682 +
           ((C7765 * C940 - C7771 * C934 + C7766 * C2331 - C7772 * C2323 +
             C48650 * C2332 - C7773 * C2324) *
                C114 +
            (C7765 * C949 - C7771 * C941 + C7766 * C2341 - C7772 * C2333 +
             C48650 * C2342 - C7773 * C2334) *
                C48373) *
               C48669 +
           ((C7765 * C942 - C7771 * C935 + C7766 * C2335 - C7772 * C2325 +
             C48650 * C2336 - C7773 * C2326) *
                C114 +
            (C7765 * C950 - C7771 * C943 + C7766 * C2343 - C7772 * C2337 +
             C48650 * C2344 - C7773 * C2338) *
                C48373) *
               C48637) *
              C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9029 * C122 - C9035 * C115 + C9030 * C270 - C9036 * C264 +
            C9031 * C585 - C9037 * C580 + C9032 * C1271 - C9038 * C1267 +
            C9033 * C1752 - C9039 * C1749) *
               C114 +
           (C9029 * C136 - C9035 * C123 + C9030 * C282 - C9036 * C271 +
            C9031 * C595 - C9037 * C586 + C9032 * C1279 - C9038 * C1272 +
            C9033 * C1758 - C9039 * C1753) *
               C48373) *
              C48261 * C930 +
          ((C9035 * C388 - C9029 * C394 + C9036 * C682 - C9030 * C687 +
            C9037 * C1453 - C9031 * C1457 + C9038 * C1907 - C9032 * C1910 +
            C9039 * C9212 - C9033 * C9214) *
               C114 +
           (C9035 * C395 - C9029 * C406 + C9036 * C688 - C9030 * C697 +
            C9037 * C1458 - C9031 * C1465 + C9038 * C1911 - C9032 * C1916 +
            C9039 * C9215 - C9033 * C9218) *
               C48373) *
              C48261 * C931 +
          ((C9029 * C938 - C9035 * C933 + C9030 * C2327 - C9036 * C2321 +
            C9031 * C2328 - C9037 * C2322 + C9032 * C9682 - C9038 * C9680 +
            C9033 * C9683 - C9039 * C9681) *
               C114 +
           (C9029 * C948 - C9035 * C939 + C9030 * C2339 - C9036 * C2329 +
            C9031 * C2340 - C9037 * C2330 + C9032 * C9686 - C9038 * C9684 +
            C9033 * C9687 - C9039 * C9685) *
               C48373) *
              C48261 * C932) *
         C48328 * C48294) /
            (p * q * std::sqrt(p + q));
}
