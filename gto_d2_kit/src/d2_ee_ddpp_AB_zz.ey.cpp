/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_zz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_33(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47918 = ae + be;
    const double C47917 = ae * be;
    const double C47916 = zA - zB;
    const double C47925 = 0 * be;
    const double C47985 = 0 * ae;
    const double C47980 = 0 * be;
    const double C47979 = 0 * be;
    const double C48064 = 0 * be;
    const double C48140 = p + q;
    const double C48139 = p * q;
    const double C48146 = bs[3];
    const double C48145 = zP - zQ;
    const double C48153 = bs[4];
    const double C48151 = xP - xQ;
    const double C48161 = bs[5];
    const double C48170 = bs[6];
    const double C48181 = bs[7];
    const double C48214 = bs[2];
    const double C48230 = yP - yQ;
    const double C115 = bs[0];
    const double C49116 = xA - xB;
    const double C49151 = ce + de;
    const double C49150 = ce * de;
    const double C49149 = xC - xD;
    const double C49164 = yC - yD;
    const double C49173 = zC - zD;
    const double C49214 = yA - yB;
    const double C47926 = std::pow(C47918, 2);
    const double C47958 = 2 * C47918;
    const double C47933 = 2 * C47917;
    const double C47927 = C47917 * C47916;
    const double C49232 = std::pow(C47916, 2);
    const double C49315 = C47916 * be;
    const double C49313 = C47916 * ae;
    const double C47982 = C47916 * C47925;
    const double C47981 = C47925 / C47918;
    const double C48028 = -2 * C47925;
    const double C47992 = C47985 / C47918;
    const double C47987 = C47916 * C47980;
    const double C48027 = -2 * C47980;
    const double C48065 = C48064 / C47918;
    const double C48141 = 2 * C48139;
    const double C48148 = std::pow(C48145, 2);
    const double C48200 = C48145 * ae;
    const double C48199 = C48145 * be;
    const double C48163 = std::pow(C48151, 2);
    const double C48305 = std::pow(C48230, 2);
    const double C49119 = C49116 * be;
    const double C49118 = C49116 * ae;
    const double C49117 = std::pow(C49116, 2);
    const double C49161 = 2 * C49151;
    const double C49439 = std::pow(C49151, 2);
    const double C49152 = std::pow(C49149, 2);
    const double C49438 = C49149 * de;
    const double C49437 = C49149 * ce;
    const double C49186 = std::pow(C49164, 2);
    const double C49443 = C49164 * de;
    const double C49441 = C49164 * ce;
    const double C49203 = std::pow(C49173, 2);
    const double C49444 = C49173 * de;
    const double C49442 = C49173 * ce;
    const double C49215 = std::pow(C49214, 2);
    const double C49273 = C49214 * be;
    const double C49271 = C49214 * ae;
    const double C47928 = 2 * C47926;
    const double C48069 = 4 * C47926;
    const double C48026 = C47926 * C47958;
    const double C49131 = std::pow(C47958, -1);
    const double C49433 = std::pow(C47958, -2);
    const double C49233 = C49232 * C47917;
    const double C49447 = std::pow(C49313, 2);
    const double C47990 = C47982 / C47918;
    const double C48037 = ae * C48028;
    const double C47993 = C47987 / C47918;
    const double C48036 = ae * C48027;
    const double C48143 = C48141 / C48140;
    const double C136 =
        ((std::pow(zP - zQ, 2) * bs[2] * std::pow(C48141 / C48140, 2) -
          (bs[1] * C48141) / C48140) *
         C47917) /
        C47926;
    const double C116 = -(C48151 * bs[1] * C48141) / C48140;
    const double C273 = -(C48230 * bs[1] * C48141) / C48140;
    const double C413 = -(C48145 * bs[1] * C48141) / C48140;
    const double C48155 = C48148 * C48153;
    const double C48164 = C48148 * C48161;
    const double C48172 = C48148 * C48170;
    const double C48184 = C48148 * C48181;
    const double C48202 = C48161 * C48200;
    const double C48207 = C48153 * C48200;
    const double C48217 = C48170 * C48200;
    const double C48238 = C48146 * C48200;
    const double C48276 = C48181 * C48200;
    const double C123 = (-(bs[1] * C48200 * C48141) / C48140) / C47918;
    const double C48201 = C48161 * C48199;
    const double C48206 = C48153 * C48199;
    const double C48216 = C48170 * C48199;
    const double C48237 = C48146 * C48199;
    const double C48270 = C48181 * C48199;
    const double C122 = (-(bs[1] * C48199 * C48141) / C48140) / C47918;
    const double C49426 = std::pow(C49118, 2);
    const double C49120 = C49117 * C47917;
    const double C49440 = std::pow(C49161, -1);
    const double C49475 = 2 * C49439;
    const double C49153 = C49152 * C49150;
    const double C49187 = C49186 * C49150;
    const double C49204 = C49203 * C49150;
    const double C49216 = C49215 * C47917;
    const double C49445 = std::pow(C49271, 2);
    const double C47984 = C47925 / C47928;
    const double C47989 = C47980 / C47928;
    const double C47988 = C47979 / C47928;
    const double C48071 = C47918 * C48069;
    const double C49436 = 4 * C48026;
    const double C49234 = C49233 / C47918;
    const double C47994 = 0 - C47990;
    const double C48042 = C48037 / C48026;
    const double C48041 = C47916 * C48037;
    const double C47997 = 0 - C47993;
    const double C48040 = C48036 / C48026;
    const double C48147 = -C48143;
    const double C48154 = std::pow(C48143, 4);
    const double C48171 = std::pow(C48143, 6);
    const double C48213 = std::pow(C48143, 2);
    const double C137 = ((xP - xQ) *
                         (bs[2] * std::pow(C48143, 2) +
                          std::pow(zP - zQ, 2) * bs[3] * std::pow(-C48143, 3)) *
                         C47917) /
                        C47926;
    const double C49121 = C49120 / C47918;
    const double C49154 = C49153 / C49151;
    const double C49188 = C49187 / C49151;
    const double C49205 = C49204 / C49151;
    const double C49217 = C49216 / C47918;
    const double C49235 = -C49234;
    const double C47998 = C47994 * ae;
    const double C48045 = C48041 / C47926;
    const double C48002 = C47997 * ae;
    const double C48149 = std::pow(C48147, 3);
    const double C48162 = std::pow(C48147, 5);
    const double C48182 = std::pow(C48147, 7);
    const double C48156 = C48155 * C48154;
    const double C48160 = C48153 * C48154;
    const double C48209 = C48154 * C48207;
    const double C48208 = C48154 * C48206;
    const double C48173 = C48172 * C48171;
    const double C48180 = C48170 * C48171;
    const double C48219 = C48171 * C48217;
    const double C48218 = C48171 * C48216;
    const double C48236 = C48214 * C48213;
    const double C124 = (C48151 * C48213 * C48214 * C48199) / C47918;
    const double C125 = (C48151 * C48213 * C48214 * C48200) / C47918;
    const double C283 = (C48230 * C48213 * C48214 * C48199) / C47918;
    const double C284 = (C48230 * C48213 * C48214 * C48200) / C47918;
    const double C423 = (C48145 * C48213 * C48214 * C48199) / C47918 -
                        (be * bs[1] * C48141) / (C48140 * C47918);
    const double C424 = (C48145 * C48213 * C48214 * C48200) / C47918 -
                        (ae * bs[1] * C48141) / (C48140 * C47918);
    const double C49122 = -C49121;
    const double C49155 = -C49154;
    const double C49189 = -C49188;
    const double C49206 = -C49205;
    const double C49218 = -C49217;
    const double C49236 = std::exp(C49235);
    const double C48003 = C47998 / C47918;
    const double C48006 = C48002 / C47918;
    const double C48152 = C48146 * C48149;
    const double C48240 = C48149 * C48238;
    const double C48239 = C48149 * C48237;
    const double C138 =
        ((bs[2] * std::pow(C48143, 2) + C48148 * C48146 * C48149) * C47917 +
         (C48146 * C48149 + C48148 * bs[4] * std::pow(C48143, 4)) * C47917 *
             std::pow(xP - xQ, 2)) /
        C47926;
    const double C291 =
        ((yP - yQ) * (bs[2] * std::pow(C48143, 2) + C48148 * C48146 * C48149) *
         C47917) /
        C47926;
    const double C431 =
        (ae * C48213 * C48214 * C48199 + be * C48213 * C48214 * C48200 +
         C48145 * (C48214 * C48213 + C48148 * C48146 * C48149) * C47917) /
        C47926;
    const double C48165 = C48164 * C48162;
    const double C48169 = C48161 * C48162;
    const double C48204 = C48162 * C48202;
    const double C48203 = C48162 * C48201;
    const double C48185 = C48184 * C48182;
    const double C48282 = C48182 * C48276;
    const double C48278 = C48182 * C48270;
    const double C48247 = C48160 * C48163;
    const double C48255 = C48151 * C48160;
    const double C48321 = C48160 * C48305;
    const double C48387 = C48230 * C48160;
    const double C48429 = C48160 * ae;
    const double C48427 = C48160 * C48148;
    const double C48426 = C48145 * C48160;
    const double C48425 = C48160 * be;
    const double C48244 = C48151 * C48209;
    const double C48318 = C48230 * C48209;
    const double C48372 = C48145 * C48209;
    const double C48422 = be * C48209;
    const double C48242 = C48151 * C48208;
    const double C48316 = C48230 * C48208;
    const double C48369 = C48145 * C48208;
    const double C48421 = ae * C48208;
    const double C48273 = C48180 * C48163;
    const double C48528 = C48180 * C48305;
    const double C48554 = C48151 * C48180;
    const double C48758 = C48230 * C48180;
    const double C48816 = C48180 * ae;
    const double C48810 = C48180 * C48148;
    const double C48809 = C48145 * C48180;
    const double C48808 = C48180 * be;
    const double C48221 = C48219 * C48163;
    const double C48275 = C48151 * C48219;
    const double C48507 = C48219 * C48305;
    const double C48530 = C48230 * C48219;
    const double C48679 = C48145 * C48219;
    const double C48803 = be * C48219;
    const double C48220 = C48218 * C48163;
    const double C48269 = C48151 * C48218;
    const double C48506 = C48218 * C48305;
    const double C48524 = C48230 * C48218;
    const double C48673 = C48145 * C48218;
    const double C48802 = ae * C48218;
    const double C117 = C48236 * C48163 - (bs[1] * C48141) / C48140;
    const double C272 = C48230 * C48151 * C48236;
    const double C412 = C48145 * C48151 * C48236;
    const double C617 = C48236 * C48305 - (bs[1] * C48141) / C48140;
    const double C719 = C48145 * C48230 * C48236;
    const double C970 = C48236 * C48148 - (bs[1] * C48141) / C48140;
    const double C49123 = std::exp(C49122);
    const double C49156 = std::exp(C49155);
    const double C49190 = std::exp(C49189);
    const double C49207 = std::exp(C49206);
    const double C49219 = std::exp(C49218);
    const double C147 = C49236 * C137;
    const double C47929 = C47927 * C49236;
    const double C113 = -(2 * ae * be * (zA - zB) * C49236) / (ae + be);
    const double C114 =
        -((C49236 - (C47916 * 2 * C47917 * C47916 * C49236) / C47918) * 2 *
          C47917) /
        C47918;
    const double C49314 = C49236 / C47958;
    const double C49316 = C49236 * C49313;
    const double C49323 = C49131 * C49236;
    const double C49459 = C49236 * C49315;
    const double C49486 = C49433 * C49236;
    const double C49484 = C49236 * C49447;
    const double C48007 = C48003 - C47989;
    const double C48010 = C48006 - C47988;
    const double C48157 = C48152 + C48156;
    const double C48243 = C48151 * C48152;
    const double C48317 = C48230 * C48152;
    const double C48373 = C48152 * ae;
    const double C48371 = C48145 * C48152;
    const double C48370 = C48152 * be;
    const double C118 =
        2 * C48151 * C48236 + C48151 * (C48236 + C48152 * C48163);
    const double C271 = C48230 * (C48236 + C48152 * C48163);
    const double C411 = C48145 * (C48236 + C48152 * C48163);
    const double C1286 =
        2 * C48230 * C48236 + C48230 * (C48236 + C48152 * C48305);
    const double C1482 = C48145 * (C48236 + C48152 * C48305);
    const double C2928 =
        2 * C48145 * C48236 + C48145 * (C48236 + C48152 * C48148);
    const double C127 = (C48213 * C48214 * C48200 + C48240 * C48163) / C47918;
    const double C129 =
        (2 * C48151 * C48240 + C48151 * (C48240 + C48209 * C48163)) / C47918;
    const double C280 = (C48230 * (C48240 + C48209 * C48163)) / C47918;
    const double C282 = (C48230 * C48151 * C48240) / C47918;
    const double C420 = (C48145 * (C48240 + C48209 * C48163) +
                         (C48236 + C48152 * C48163) * ae) /
                        C47918;
    const double C422 =
        (C48145 * C48151 * C48240 + C48151 * C48236 * ae) / C47918;
    const double C623 = (C48213 * C48214 * C48200 + C48240 * C48305) / C47918;
    const double C725 =
        (C48145 * C48230 * C48240 + C48230 * C48236 * ae) / C47918;
    const double C976 =
        (C48213 * C48214 * C48200 + C48145 * (C48145 * C48240 + C48236 * ae) +
         C48145 * C48236 * ae) /
        C47918;
    const double C1293 =
        (2 * C48230 * C48240 + C48230 * (C48240 + C48209 * C48305)) / C47918;
    const double C1489 = (C48145 * (C48240 + C48209 * C48305) +
                          (C48236 + C48152 * C48305) * ae) /
                         C47918;
    const double C126 = (C48213 * C48214 * C48199 + C48239 * C48163) / C47918;
    const double C128 =
        (2 * C48151 * C48239 + C48151 * (C48239 + C48208 * C48163)) / C47918;
    const double C279 = (C48230 * (C48239 + C48208 * C48163)) / C47918;
    const double C281 = (C48230 * C48151 * C48239) / C47918;
    const double C419 = (C48145 * (C48239 + C48208 * C48163) +
                         (C48236 + C48152 * C48163) * be) /
                        C47918;
    const double C421 =
        (C48145 * C48151 * C48239 + C48151 * C48236 * be) / C47918;
    const double C622 = (C48213 * C48214 * C48199 + C48239 * C48305) / C47918;
    const double C724 =
        (C48145 * C48230 * C48239 + C48230 * C48236 * be) / C47918;
    const double C975 =
        (C48213 * C48214 * C48199 + C48145 * (C48145 * C48239 + C48236 * be) +
         C48145 * C48236 * be) /
        C47918;
    const double C1292 =
        (2 * C48230 * C48239 + C48230 * (C48239 + C48208 * C48305)) / C47918;
    const double C1488 = (C48145 * (C48239 + C48208 * C48305) +
                          (C48236 + C48152 * C48305) * be) /
                         C47918;
    const double C151 = C49236 * C138;
    const double C1304 = C49236 * C291;
    const double C48166 = C48160 + C48165;
    const double C48174 = C48169 + C48173;
    const double C48256 = C48169 * C48163;
    const double C48272 = C48151 * C48169;
    const double C48514 = C48169 * C48305;
    const double C48527 = C48230 * C48169;
    const double C48680 = C48169 * ae;
    const double C48676 = C48169 * C48148;
    const double C48675 = C48145 * C48169;
    const double C48674 = C48169 * be;
    const double C48248 = C48204 * C48163;
    const double C48257 = C48151 * C48204;
    const double C48322 = C48204 * C48305;
    const double C48388 = C48230 * C48204;
    const double C48428 = C48145 * C48204;
    const double C48670 = be * C48204;
    const double C48246 = C48203 * C48163;
    const double C48253 = C48151 * C48203;
    const double C48320 = C48203 * C48305;
    const double C48386 = C48230 * C48203;
    const double C48424 = C48145 * C48203;
    const double C48669 = ae * C48203;
    const double C48186 = C48180 + C48185;
    const double C48285 = C48282 * C48163;
    const double C48531 = C48282 * C48305;
    const double C48556 = C48151 * C48282;
    const double C48761 = C48230 * C48282;
    const double C48815 = C48145 * C48282;
    const double C48283 = C48278 * C48163;
    const double C48525 = C48278 * C48305;
    const double C48552 = C48151 * C48278;
    const double C48757 = C48230 * C48278;
    const double C48807 = C48145 * C48278;
    const double C48250 = C48152 + C48247;
    const double C48260 = 2 * C48255;
    const double C48328 = C48230 * C48255;
    const double C48365 = C48255 * ae;
    const double C48363 = C48145 * C48255;
    const double C48362 = C48255 * be;
    const double C48324 = C48152 + C48321;
    const double C48393 = C48387 * ae;
    const double C48391 = C48145 * C48387;
    const double C48390 = C48387 * be;
    const double C48513 = 2 * C48387;
    const double C48433 = C48152 + C48427;
    const double C48435 = C48426 * ae;
    const double C48432 = C48426 * be;
    const double C48677 = 2 * C48426;
    const double C625 = (C48151 * C48240 + C48244 * C48305) / C47918;
    const double C624 = (C48151 * C48239 + C48242 * C48305) / C47918;
    const double C48430 = C48421 + C48422;
    const double C48280 = C48169 + C48273;
    const double C48535 = C48169 + C48528;
    const double C48558 = C48554 * C48305;
    const double C48644 = C48230 * C48554;
    const double C48722 = C48554 * ae;
    const double C48718 = C48554 * C48148;
    const double C48717 = C48145 * C48554;
    const double C48716 = C48554 * be;
    const double C48770 = C48758 * ae;
    const double C48768 = C48758 * C48148;
    const double C48767 = C48145 * C48758;
    const double C48766 = C48758 * be;
    const double C48822 = C48169 + C48810;
    const double C48824 = C48809 * ae;
    const double C48821 = C48809 * be;
    const double C48223 = C48204 + C48221;
    const double C48281 = 2 * C48275;
    const double C48333 = C48275 * C48305;
    const double C48400 = C48230 * C48275;
    const double C48451 = C48145 * C48275;
    const double C48712 = be * C48275;
    const double C48509 = C48204 + C48507;
    const double C48536 = 2 * C48530;
    const double C48601 = C48145 * C48530;
    const double C48754 = be * C48530;
    const double C48222 = C48203 + C48220;
    const double C48277 = 2 * C48269;
    const double C48331 = C48269 * C48305;
    const double C48398 = C48230 * C48269;
    const double C48447 = C48145 * C48269;
    const double C48711 = ae * C48269;
    const double C48508 = C48203 + C48506;
    const double C48532 = 2 * C48524;
    const double C48597 = C48145 * C48524;
    const double C48753 = ae * C48524;
    const double C48819 = C48802 + C48803;
    const double C49125 = C49123 * C49118;
    const double C49124 = C49123 / C47958;
    const double C49133 = C49131 * C49123;
    const double C49429 = C49123 * C49119;
    const double C49472 = C49433 * C49123;
    const double C49466 = C49123 * C49426;
    const double C49476 = C49440 * C49156;
    const double C49474 = C49156 * C49437;
    const double C267 = -(C49156 * C49438) / C49151;
    const double C49478 = C49440 * C49190;
    const double C49477 = C49190 * C49441;
    const double C547 = -(C49190 * C49443) / C49151;
    const double C49480 = C49440 * C49207;
    const double C49479 = C49207 * C49442;
    const double C821 = -(C49207 * C49444) / C49151;
    const double C49272 = C49219 / C47958;
    const double C49274 = C49219 * C49271;
    const double C49281 = C49131 * C49219;
    const double C49452 = C49219 * C49273;
    const double C49483 = C49433 * C49219;
    const double C49481 = C49219 * C49445;
    const double C47932 = 2 * C47929;
    const double C47986 = C47929 / C47926;
    const double C48030 = -4 * C47929;
    const double C2520 = ((0 * ae) / C47918 - C47929 / C47926) / (2 * C47918) +
                         (0 * ae) / C47918;
    const double C5023 = (0 * ae) / C47918 - C47929 / C47926;
    const double C146 = C113 * C125;
    const double C144 = C113 * C124;
    const double C1303 = C113 * C284;
    const double C1301 = C113 * C283;
    const double C149 = C114 * C117;
    const double C145 = C114 * C116;
    const double C307 = C114 * C272;
    const double C447 = C114 * C412;
    const double C1306 = C114 * C617;
    const double C1302 = C114 * C273;
    const double C1969 = C114 * C719;
    const double C15173 = (C49236 * std::pow(C49315, 2)) / C47926 + C49314;
    const double C49317 = C49316 * C49315;
    const double C49322 = C49316 / C47928;
    const double C49451 = C49316 / C47918;
    const double C49448 = C49131 * C49316;
    const double C49324 = C49323 * C49315;
    const double C49465 = C49323 / C48069;
    const double C49463 = C49313 * C49323;
    const double C49462 = 2 * C49323;
    const double C17828 = C49323 / C49436;
    const double C36627 = C49323 / C47958;
    const double C49493 = C49459 / C47918;
    const double C15174 = (-2 * C49131 * C49459) / C47918;
    const double C49504 = C49484 / C47926;
    const double C48012 = C48007 / C47958;
    const double C48011 = C47916 * C48007;
    const double C48029 = 2 * C48007;
    const double C48015 = C48010 + C47981;
    const double C48158 = C48157 * C47917;
    const double C726 =
        (C48145 * C48230 * C48242 + C48230 * C48243 * be) / C47918;
    const double C727 =
        (C48145 * C48230 * C48244 + C48230 * C48243 * ae) / C47918;
    const double C977 =
        (C48151 * C48239 + C48145 * (C48145 * C48242 + C48243 * be) +
         C48145 * C48243 * be) /
        C47918;
    const double C978 =
        (C48151 * C48240 + C48145 * (C48145 * C48244 + C48243 * ae) +
         C48145 * C48243 * ae) /
        C47918;
    const double C618 = C48151 * C48236 + C48243 * C48305;
    const double C720 = C48145 * C48230 * C48243;
    const double C971 = C48151 * C48236 + C48243 * C48148;
    const double C1285 =
        2 * C48230 * C48243 + C48230 * (C48243 + C48255 * C48305);
    const double C1481 = C48145 * (C48243 + C48255 * C48305);
    const double C2927 =
        2 * C48145 * C48243 + C48145 * (C48243 + C48255 * C48148);
    const double C2385 =
        (C48230 * C48239 + C48145 * (C48145 * C48316 + C48317 * be) +
         C48145 * C48317 * be) /
        C47918;
    const double C2386 =
        (C48230 * C48240 + C48145 * (C48145 * C48318 + C48317 * ae) +
         C48145 * C48317 * ae) /
        C47918;
    const double C2379 = C48230 * C48236 + C48317 * C48148;
    const double C3386 =
        2 * C48145 * C48317 + C48145 * (C48317 + C48387 * C48148);
    const double C48375 = C48372 + C48373;
    const double C48374 = C48369 + C48370;
    const double C153 = C114 * C118;
    const double C303 = C114 * C271;
    const double C443 = C114 * C411;
    const double C1800 = C114 * C1286;
    const double C1965 = C114 * C1482;
    const double C150 = C113 * C127;
    const double C154 = C113 * C129;
    const double C304 = C113 * C280;
    const double C308 = C113 * C282;
    const double C444 = C113 * C420;
    const double C448 = C113 * C422;
    const double C1307 = C113 * C623;
    const double C1970 = C113 * C725;
    const double C1801 = C113 * C1293;
    const double C1966 = C113 * C1489;
    const double C148 = C113 * C126;
    const double C152 = C113 * C128;
    const double C302 = C113 * C279;
    const double C306 = C113 * C281;
    const double C442 = C113 * C419;
    const double C446 = C113 * C421;
    const double C1305 = C113 * C622;
    const double C1968 = C113 * C724;
    const double C1799 = C113 * C1292;
    const double C1964 = C113 * C1488;
    const double C48167 = C48166 * C47917;
    const double C48175 = C48174 * C47917;
    const double C48261 = C48160 + C48256;
    const double C48279 = 2 * C48272;
    const double C48332 = C48272 * C48305;
    const double C48399 = C48230 * C48272;
    const double C48452 = C48272 * ae;
    const double C48450 = C48272 * C48148;
    const double C48449 = C48145 * C48272;
    const double C48448 = C48272 * be;
    const double C48518 = C48160 + C48514;
    const double C48534 = 2 * C48527;
    const double C48602 = C48527 * ae;
    const double C48600 = C48527 * C48148;
    const double C48599 = C48145 * C48527;
    const double C48598 = C48527 * be;
    const double C48686 = C48679 + C48680;
    const double C48685 = C48160 + C48676;
    const double C48687 = C48675 * ae;
    const double C48684 = C48675 * be;
    const double C48811 = 2 * C48675;
    const double C48683 = C48673 + C48674;
    const double C48251 = C48209 + C48248;
    const double C48262 = 2 * C48257;
    const double C48329 = C48230 * C48257;
    const double C48364 = C48145 * C48257;
    const double C48445 = be * C48257;
    const double C1291 =
        (2 * C48230 * C48244 + C48230 * (C48244 + C48257 * C48305)) / C47918;
    const double C1487 = (C48145 * (C48244 + C48257 * C48305) +
                          (C48243 + C48255 * C48305) * ae) /
                         C47918;
    const double C48325 = C48209 + C48322;
    const double C48392 = C48145 * C48388;
    const double C48515 = 2 * C48388;
    const double C48595 = be * C48388;
    const double C48434 = C48428 + C48429;
    const double C48249 = C48208 + C48246;
    const double C48259 = 2 * C48253;
    const double C48327 = C48230 * C48253;
    const double C48361 = C48145 * C48253;
    const double C48444 = ae * C48253;
    const double C1290 =
        (2 * C48230 * C48242 + C48230 * (C48242 + C48253 * C48305)) / C47918;
    const double C1486 = (C48145 * (C48242 + C48253 * C48305) +
                          (C48243 + C48255 * C48305) * be) /
                         C47918;
    const double C48323 = C48208 + C48320;
    const double C48389 = C48145 * C48386;
    const double C48511 = 2 * C48386;
    const double C48594 = ae * C48386;
    const double C48431 = C48424 + C48425;
    const double C48682 = C48669 + C48670;
    const double C48187 = C48186 * C47917;
    const double C48288 = C48219 + C48285;
    const double C48537 = C48219 + C48531;
    const double C48559 = C48556 * C48305;
    const double C48645 = C48230 * C48556;
    const double C48721 = C48145 * C48556;
    const double C48769 = C48145 * C48761;
    const double C48823 = C48815 + C48816;
    const double C48286 = C48218 + C48283;
    const double C48533 = C48218 + C48525;
    const double C48557 = C48552 * C48305;
    const double C48643 = C48230 * C48552;
    const double C48715 = C48145 * C48552;
    const double C48765 = C48145 * C48757;
    const double C48820 = C48807 + C48808;
    const double C119 = 3 * (C48236 + C48152 * C48163) +
                        C48151 * (2 * C48243 + C48151 * C48250);
    const double C270 = C48230 * (2 * C48243 + C48151 * C48250);
    const double C410 = C48145 * (2 * C48243 + C48151 * C48250);
    const double C619 = C48236 + C48152 * C48163 + C48250 * C48305;
    const double C721 = C48145 * C48230 * C48250;
    const double C972 = C48236 + C48152 * C48163 + C48250 * C48148;
    const double C2381 = C48230 * C48243 + C48328 * C48148;
    const double C1786 = 3 * (C48236 + C48152 * C48305) +
                         C48230 * (2 * C48317 + C48230 * C48324);
    const double C1951 = C48145 * (2 * C48317 + C48230 * C48324);
    const double C2380 = C48236 + C48152 * C48305 + C48324 * C48148;
    const double C3800 = 3 * (C48236 + C48152 * C48148) +
                         C48145 * (2 * C48371 + C48145 * C48433);
    const double C1111 = C113 * C625;
    const double C1109 = C113 * C624;
    const double C48284 = C48151 * C48280;
    const double C48343 = C48280 * C48305;
    const double C48411 = C48230 * C48280;
    const double C48475 = C48280 * ae;
    const double C48473 = C48280 * C48148;
    const double C48472 = C48145 * C48280;
    const double C48471 = C48280 * be;
    const double C48539 = C48230 * C48535;
    const double C48625 = C48535 * ae;
    const double C48623 = C48535 * C48148;
    const double C48622 = C48145 * C48535;
    const double C48621 = C48535 * be;
    const double C48561 = C48272 + C48558;
    const double C48653 = C48644 * ae;
    const double C48651 = C48644 * C48148;
    const double C48650 = C48145 * C48644;
    const double C48649 = C48644 * be;
    const double C48727 = C48272 + C48718;
    const double C48729 = C48717 * ae;
    const double C48726 = C48717 * be;
    const double C48775 = C48527 + C48768;
    const double C48777 = C48767 * ae;
    const double C48774 = C48767 * be;
    const double C48832 = C48822 * ae;
    const double C48830 = C48145 * C48822;
    const double C48829 = C48822 * be;
    const double C48258 = C48151 * C48223;
    const double C48274 = 3 * C48223;
    const double C48340 = C48230 * C48223;
    const double C48356 = C48145 * C48223;
    const double C48468 = be * C48223;
    const double C48336 = C48257 + C48333;
    const double C48404 = C48145 * C48400;
    const double C48555 = 2 * C48400;
    const double C48641 = be * C48400;
    const double C48516 = C48230 * C48509;
    const double C48529 = 3 * C48509;
    const double C48573 = C48145 * C48509;
    const double C48618 = be * C48509;
    const double C48254 = C48151 * C48222;
    const double C48268 = 3 * C48222;
    const double C48338 = C48230 * C48222;
    const double C48353 = C48145 * C48222;
    const double C48467 = ae * C48222;
    const double C48334 = C48253 + C48331;
    const double C48401 = C48145 * C48398;
    const double C48551 = 2 * C48398;
    const double C48640 = ae * C48398;
    const double C48724 = C48711 + C48712;
    const double C48512 = C48230 * C48508;
    const double C48523 = 3 * C48508;
    const double C48570 = C48145 * C48508;
    const double C48617 = ae * C48508;
    const double C48763 = C48753 + C48754;
    const double C49126 = C49125 * C49119;
    const double C49132 = C49125 / C47928;
    const double C49430 = C49131 * C49125;
    const double C49428 = C49125 / C47918;
    const double C1103 = (C49123 * std::pow(C49119, 2)) / C47926 + C49124;
    const double C49134 = C49133 * C49119;
    const double C49450 = C49133 / C48069;
    const double C49434 = C49118 * C49133;
    const double C49432 = 2 * C49133;
    const double C107 = C49133 / C49436;
    const double C26398 = C49133 / C47958;
    const double C49468 = C49429 / C47918;
    const double C1104 = (-2 * C49131 * C49429) / C47918;
    const double C49497 = C49466 / C47926;
    const double C112 = C49476 / C49161;
    const double C110 = C49156 / C49161 - (C49474 * C49438) / C49439;
    const double C111 = C49474 / C49475 - (C49476 * C49438) / C49151;
    const double C549 = C49474 / C49151;
    const double C615 = C49478 / C49161;
    const double C265 = C49477 / C49151;
    const double C613 = C49190 / C49161 - (C49477 * C49443) / C49439;
    const double C614 = C49477 / C49475 - (C49478 * C49443) / C49151;
    const double C969 = C49480 / C49161;
    const double C407 = C49479 / C49151;
    const double C967 = C49207 / C49161 - (C49479 * C49444) / C49439;
    const double C968 = C49479 / C49475 - (C49480 * C49444) / C49151;
    const double C7962 = (C49219 * std::pow(C49273, 2)) / C47926 + C49272;
    const double C49275 = C49274 * C49273;
    const double C49280 = C49274 / C47928;
    const double C49449 = C49274 / C47918;
    const double C49446 = C49131 * C49274;
    const double C49282 = C49281 * C49273;
    const double C49458 = C49281 / C48069;
    const double C49456 = C49271 * C49281;
    const double C49455 = 2 * C49281;
    const double C9153 = C49281 / C49436;
    const double C26395 = C49281 / C47958;
    const double C49488 = C49452 / C47918;
    const double C7963 = (-2 * C49131 * C49452) / C47918;
    const double C49502 = C49481 / C47926;
    const double C47934 = C47916 * C47932;
    const double C15180 =
        ((-C47932 / C47918) / C47958 - (0 * be) / C47918) / C47958 -
        (0 * be) / C47918;
    const double C30827 = (-C47932 / C47918) / C47958 - (0 * be) / C47918;
    const double C47996 = C47992 - C47986;
    const double C48038 = C48030 / C47918;
    const double C5040 = C5023 * C420;
    const double C5038 = C5023 * C419;
    const double C5032 = C5023 * C422;
    const double C5030 = C5023 * C421;
    const double C6496 = C5023 * C725;
    const double C6494 = C5023 * C724;
    const double C7099 = C5023 * C1489;
    const double C7097 = C5023 * C1488;
    const double C164 = C144 - C145;
    const double C1321 = C1301 - C1302;
    const double C15198 = C15173 * C138;
    const double C15186 = C15173 * C137;
    const double C16688 = C15173 * C291;
    const double C49318 = C49317 / C47926;
    const double C5037 = C49451 * C138;
    const double C5029 = C49451 * C137;
    const double C6493 = C49451 * C291;
    const double C2516 =
        (((0 - (C47916 * C47925) / C47918) * ae) / C47918 - (0 * be) / C47928) /
            (2 * C47918) +
        ((C47916 * (((C49236 - (C47916 * 2 * C47929) / C47918) * ae) / C47918 -
                    C47925 / C47928) +
          C49451) *
         ae) /
            C47918 +
        (0 * ae) / C47918 - C47929 / C47926;
    const double C49485 = 2 * C49448;
    const double C49325 = C49324 / C47918;
    const double C49496 = C49463 / C47928;
    const double C49509 = C49451 - C49493;
    const double C30823 = -C49493;
    const double C49516 = C49504 + C49314;
    const double C48016 = C48011 + 0;
    const double C48048 = C48045 + C48029;
    const double C48019 = C48015 / C47958;
    const double C139 =
        (2 * C48151 * C48158 +
         C48151 * (C48158 +
                   (C48153 * C48154 + C48148 * bs[5] * std::pow(C48147, 5)) *
                       C47917 * std::pow(C48151, 2))) /
        C47926;
    const double C290 = ((yP - yQ) * C48151 * C48158) / C47926;
    const double C430 =
        (ae * C48151 * C48149 * C48146 * C48199 +
         be * C48151 * C48149 * C48146 * C48200 + C48145 * C48151 * C48158) /
        C47926;
    const double C632 = ((C48214 * C48213 + C48148 * C48146 * C48149) * C47917 +
                         C48158 * std::pow(yP - yQ, 2)) /
                        C47926;
    const double C734 =
        (ae * C48230 * C48149 * C48146 * C48199 +
         be * C48230 * C48149 * C48146 * C48200 + C48145 * C48230 * C48158) /
        C47926;
    const double C985 =
        ((C48236 + C48148 * C48146 * C48149) * C47917 +
         ae * (C48145 * C48239 + C48236 * be) +
         be * (C48145 * C48240 + C48236 * ae) +
         C48145 * (ae * C48239 + be * C48240 + C48145 * C48158)) /
        C47926;
    const double C1510 = C113 * C726;
    const double C5232 = C5023 * C726;
    const double C1512 = C113 * C727;
    const double C5234 = C5023 * C727;
    const double C2531 = C2520 * C977;
    const double C5404 = C5023 * C977;
    const double C2533 = C2520 * C978;
    const double C5406 = C5023 * C978;
    const double C1110 = C114 * C618;
    const double C1511 = C114 * C720;
    const double C1316 = C114 * C1285;
    const double C1507 = C114 * C1481;
    const double C7305 = C5023 * C2385;
    const double C10107 = C2520 * C2385;
    const double C7307 = C5023 * C2386;
    const double C10109 = C2520 * C2386;
    const double C2935 = (2 * (C48145 * C48240 + C48236 * ae) +
                          C48145 * (C48240 + C48145 * C48375 + C48371 * ae) +
                          (C48236 + C48152 * C48148) * ae) /
                         C47918;
    const double C2934 = (2 * (C48145 * C48239 + C48236 * be) +
                          C48145 * (C48239 + C48145 * C48374 + C48371 * be) +
                          (C48236 + C48152 * C48148) * be) /
                         C47918;
    const double C165 = C148 - C149;
    const double C166 = C152 - C153;
    const double C312 = C302 - C303;
    const double C313 = C306 - C307;
    const double C452 = C442 - C443;
    const double C453 = C446 - C447;
    const double C1322 = C1305 - C1306;
    const double C1973 = C1968 - C1969;
    const double C1803 = C1799 - C1800;
    const double C1972 = C1964 - C1965;
    const double C48301 = C48151 * C48167;
    const double C48385 = C48230 * C48167;
    const double C48423 = C48145 * C48167;
    const double C140 =
        (3 * (C48158 + C48167 * C48163) +
         C48151 * (2 * C48151 * C48167 +
                   C48151 * (C48167 + (C48161 * C48162 +
                                       C48148 * bs[6] * std::pow(C48143, 6)) *
                                          C47917 * C48163))) /
        C47926;
    const double C289 = ((yP - yQ) * (C48158 + C48167 * C48163)) / C47926;
    const double C429 = (ae * (C48149 * C48146 * C48199 + C48208 * C48163) +
                         be * (C48149 * C48146 * C48200 + C48209 * C48163) +
                         C48145 * (C48158 + C48167 * C48163)) /
                        C47926;
    const double C633 =
        (C48151 * C48158 + C48151 * C48167 * std::pow(yP - yQ, 2)) / C47926;
    const double C735 =
        (ae * C48230 * C48151 * C48208 + be * C48230 * C48151 * C48209 +
         C48145 * C48230 * C48151 * C48167) /
        C47926;
    const double C986 =
        (C48151 * C48158 + ae * (C48145 * C48242 + C48243 * be) +
         be * (C48145 * C48244 + C48243 * ae) +
         C48145 * (ae * C48242 + be * C48244 + C48145 * C48151 * C48167)) /
        C47926;
    const double C1298 = (2 * C48230 * C48158 +
                          C48230 * (C48158 + C48167 * std::pow(C48230, 2))) /
                         C47926;
    const double C1494 =
        (ae * (C48239 + C48208 * C48305) + be * (C48240 + C48209 * C48305) +
         C48145 * (C48158 + C48167 * C48305)) /
        C47926;
    const double C2397 =
        (C48230 * C48158 + ae * (C48145 * C48316 + C48317 * be) +
         be * (C48145 * C48318 + C48317 * ae) +
         C48145 * (ae * C48316 + be * C48318 + C48145 * C48230 * C48167)) /
        C47926;
    const double C2940 =
        (2 * (ae * C48239 + be * C48240 + C48145 * C48158) +
         ae * (C48239 + C48145 * C48374 + C48371 * be) +
         be * (C48240 + C48145 * C48375 + C48371 * ae) +
         C48145 * (C48158 + ae * C48374 + be * C48375 +
                   C48145 * (ae * C48208 + be * C48209 + C48145 * C48167))) /
        C47926;
    const double C48176 = C48175 * C48163;
    const double C48179 = C48151 * C48175;
    const double C48490 = C48175 * C48305;
    const double C48499 = C48230 * C48175;
    const double C48671 = C48145 * C48175;
    const double C1795 =
        (3 * (C48158 + C48167 * C48305) +
         C48230 * (2 * C48230 * C48167 + C48230 * (C48167 + C48175 * C48305))) /
        C47926;
    const double C1960 =
        (ae * (2 * C48230 * C48208 + C48230 * (C48208 + C48203 * C48305)) +
         be * (2 * C48230 * C48209 + C48230 * (C48209 + C48204 * C48305)) +
         C48145 * (2 * C48230 * C48167 + C48230 * (C48167 + C48175 * C48305))) /
        C47926;
    const double C48264 = C48151 * C48261;
    const double C48271 = 3 * C48261;
    const double C48339 = C48230 * C48261;
    const double C48357 = C48261 * ae;
    const double C48355 = C48145 * C48261;
    const double C48354 = C48261 * be;
    const double C1284 =
        2 * C48230 * C48250 + C48230 * (C48250 + C48261 * C48305);
    const double C1480 = C48145 * (C48250 + C48261 * C48305);
    const double C2926 =
        2 * C48145 * C48250 + C48145 * (C48250 + C48261 * C48148);
    const double C48335 = C48255 + C48332;
    const double C48405 = C48399 * ae;
    const double C48403 = C48145 * C48399;
    const double C48402 = C48399 * be;
    const double C48553 = 2 * C48399;
    const double C3387 =
        2 * C48145 * C48328 + C48145 * (C48328 + C48399 * C48148);
    const double C48457 = C48451 + C48452;
    const double C48456 = C48255 + C48450;
    const double C48458 = C48449 * ae;
    const double C48455 = C48449 * be;
    const double C48719 = 2 * C48449;
    const double C48454 = C48447 + C48448;
    const double C48520 = C48230 * C48518;
    const double C48526 = 3 * C48518;
    const double C48574 = C48518 * ae;
    const double C48572 = C48145 * C48518;
    const double C48571 = C48518 * be;
    const double C10307 =
        2 * C48145 * C48324 + C48145 * (C48324 + C48518 * C48148);
    const double C48607 = C48601 + C48602;
    const double C48606 = C48387 + C48600;
    const double C48608 = C48599 * ae;
    const double C48605 = C48599 * be;
    const double C48759 = 2 * C48599;
    const double C48604 = C48597 + C48598;
    const double C48693 = C48145 * C48686;
    const double C48814 = 2 * C48686;
    const double C48801 = be * C48686;
    const double C48694 = C48685 * ae;
    const double C48692 = C48145 * C48685;
    const double C48691 = C48685 * be;
    const double C48812 = 3 * C48685;
    const double C48690 = C48145 * C48683;
    const double C48806 = 2 * C48683;
    const double C48800 = ae * C48683;
    const double C131 = (3 * (C48240 + C48209 * C48163) +
                         C48151 * (2 * C48244 + C48151 * C48251)) /
                        C47918;
    const double C278 = (C48230 * (2 * C48244 + C48151 * C48251)) / C47918;
    const double C418 = (C48145 * (2 * C48244 + C48151 * C48251) +
                         (2 * C48243 + C48151 * C48250) * ae) /
                        C47918;
    const double C627 = (C48240 + C48209 * C48163 + C48251 * C48305) / C47918;
    const double C729 =
        (C48145 * C48230 * C48251 + C48230 * C48250 * ae) / C47918;
    const double C980 =
        (C48240 + C48209 * C48163 + C48145 * (C48145 * C48251 + C48250 * ae) +
         C48145 * C48250 * ae) /
        C47918;
    const double C1289 =
        (2 * C48230 * C48251 + C48230 * (C48251 + C48223 * C48305)) / C47918;
    const double C1485 = (C48145 * (C48251 + C48223 * C48305) +
                          (C48250 + C48261 * C48305) * ae) /
                         C47918;
    const double C2390 =
        (C48230 * C48244 + C48145 * (C48145 * C48329 + C48328 * ae) +
         C48145 * C48328 * ae) /
        C47918;
    const double C48367 = C48364 + C48365;
    const double C1317 = C113 * C1291;
    const double C1508 = C113 * C1487;
    const double C6510 = C5023 * C1487;
    const double C1790 = (3 * (C48240 + C48209 * C48305) +
                          C48230 * (2 * C48318 + C48230 * C48325)) /
                         C47918;
    const double C1955 = (C48145 * (2 * C48318 + C48230 * C48325) +
                          (2 * C48317 + C48230 * C48324) * ae) /
                         C47918;
    const double C2388 =
        (C48240 + C48209 * C48305 + C48145 * (C48145 * C48325 + C48324 * ae) +
         C48145 * C48324 * ae) /
        C47918;
    const double C48395 = C48392 + C48393;
    const double C48438 = C48145 * C48434;
    const double C48678 = 2 * C48434;
    const double C48668 = be * C48434;
    const double C130 = (3 * (C48239 + C48208 * C48163) +
                         C48151 * (2 * C48242 + C48151 * C48249)) /
                        C47918;
    const double C277 = (C48230 * (2 * C48242 + C48151 * C48249)) / C47918;
    const double C417 = (C48145 * (2 * C48242 + C48151 * C48249) +
                         (2 * C48243 + C48151 * C48250) * be) /
                        C47918;
    const double C626 = (C48239 + C48208 * C48163 + C48249 * C48305) / C47918;
    const double C728 =
        (C48145 * C48230 * C48249 + C48230 * C48250 * be) / C47918;
    const double C979 =
        (C48239 + C48208 * C48163 + C48145 * (C48145 * C48249 + C48250 * be) +
         C48145 * C48250 * be) /
        C47918;
    const double C1288 =
        (2 * C48230 * C48249 + C48230 * (C48249 + C48222 * C48305)) / C47918;
    const double C1484 = (C48145 * (C48249 + C48222 * C48305) +
                          (C48250 + C48261 * C48305) * be) /
                         C47918;
    const double C2389 =
        (C48230 * C48242 + C48145 * (C48145 * C48327 + C48328 * be) +
         C48145 * C48328 * be) /
        C47918;
    const double C48366 = C48361 + C48362;
    const double C48453 = C48444 + C48445;
    const double C1315 = C113 * C1290;
    const double C1506 = C113 * C1486;
    const double C6508 = C5023 * C1486;
    const double C2398 =
        (C48158 + C48167 * C48305 + ae * (C48145 * C48323 + C48324 * be) +
         be * (C48145 * C48325 + C48324 * ae) +
         C48145 * (ae * C48323 + be * C48325 +
                   C48145 * (C48167 + C48175 * C48305))) /
        C47926;
    const double C1789 = (3 * (C48239 + C48208 * C48305) +
                          C48230 * (2 * C48316 + C48230 * C48323)) /
                         C47918;
    const double C1954 = (C48145 * (2 * C48316 + C48230 * C48323) +
                          (2 * C48317 + C48230 * C48324) * be) /
                         C47918;
    const double C2387 =
        (C48239 + C48208 * C48305 + C48145 * (C48145 * C48323 + C48324 * be) +
         C48145 * C48324 * be) /
        C47918;
    const double C48394 = C48389 + C48390;
    const double C48603 = C48594 + C48595;
    const double C48437 = C48145 * C48431;
    const double C48672 = 2 * C48431;
    const double C48667 = ae * C48431;
    const double C48188 = C48187 * C48163;
    const double C48493 = C48151 * C48187;
    const double C48500 = C48187 * C48305;
    const double C48755 = C48230 * C48187;
    const double C48804 = C48145 * C48187;
    const double C48291 = C48151 * C48288;
    const double C48344 = C48288 * C48305;
    const double C48412 = C48230 * C48288;
    const double C48474 = C48145 * C48288;
    const double C48540 = C48230 * C48537;
    const double C48624 = C48145 * C48537;
    const double C48562 = C48275 + C48559;
    const double C48652 = C48145 * C48645;
    const double C48728 = C48721 + C48722;
    const double C48776 = C48769 + C48770;
    const double C48831 = C48145 * C48823;
    const double C48289 = C48151 * C48286;
    const double C48342 = C48286 * C48305;
    const double C48410 = C48230 * C48286;
    const double C48470 = C48145 * C48286;
    const double C48538 = C48230 * C48533;
    const double C48620 = C48145 * C48533;
    const double C48560 = C48269 + C48557;
    const double C48648 = C48145 * C48643;
    const double C48725 = C48715 + C48716;
    const double C48773 = C48765 + C48766;
    const double C48828 = C48145 * C48820;
    const double C157 = C114 * C119;
    const double C299 = C114 * C270;
    const double C439 = C114 * C410;
    const double C1116 = C114 * C619;
    const double C1502 = C114 * C721;
    const double C9247 = C114 * C1786;
    const double C9596 = C114 * C1951;
    const double C48287 = C48279 + C48284;
    const double C48346 = C48261 + C48343;
    const double C48417 = C48411 * ae;
    const double C48415 = C48145 * C48411;
    const double C48414 = C48411 * be;
    const double C48479 = C48261 + C48473;
    const double C48481 = C48472 * ae;
    const double C48478 = C48472 * be;
    const double C48542 = C48534 + C48539;
    const double C48629 = C48518 + C48623;
    const double C48631 = C48622 * ae;
    const double C48628 = C48622 * be;
    const double C48564 = C48230 * C48561;
    const double C48582 = C48561 * ae;
    const double C48580 = C48145 * C48561;
    const double C48579 = C48561 * be;
    const double C48657 = C48399 + C48651;
    const double C48659 = C48650 * ae;
    const double C48656 = C48650 * be;
    const double C48736 = C48727 * ae;
    const double C48734 = C48145 * C48727;
    const double C48733 = C48727 * be;
    const double C48783 = C48775 * ae;
    const double C48781 = C48145 * C48775;
    const double C48780 = C48775 * be;
    const double C48835 = C48811 + C48830;
    const double C48265 = C48262 + C48258;
    const double C1792 = (3 * (C48244 + C48257 * C48305) +
                          C48230 * (2 * C48329 + C48230 * C48336)) /
                         C47918;
    const double C48519 = C48515 + C48516;
    const double C48263 = C48259 + C48254;
    const double C48476 = C48467 + C48468;
    const double C1791 = (3 * (C48242 + C48253 * C48305) +
                          C48230 * (2 * C48327 + C48230 * C48334)) /
                         C47918;
    const double C48646 = C48640 + C48641;
    const double C48517 = C48511 + C48512;
    const double C48626 = C48617 + C48618;
    const double C49127 = C49126 / C47926;
    const double C49469 = 2 * C49430;
    const double C49135 = C49134 / C47918;
    const double C49473 = C49434 / C47928;
    const double C49498 = C49428 - C49468;
    const double C23662 = -C49468;
    const double C49512 = C49497 + C49124;
    const double C49276 = C49275 / C47926;
    const double C49482 = 2 * C49446;
    const double C49283 = C49282 / C47918;
    const double C49491 = C49456 / C47928;
    const double C49506 = C49449 - C49488;
    const double C22556 = -C49488;
    const double C49515 = C49502 + C49272;
    const double C47935 = C47934 / C47918;
    const double C15193 = C15180 * C978;
    const double C15191 = C15180 * C977;
    const double C16695 = C15180 * C2386;
    const double C16693 = C15180 * C2385;
    const double C30844 = C30827 * C420;
    const double C30842 = C30827 * C419;
    const double C30836 = C30827 * C422;
    const double C30834 = C30827 * C421;
    const double C31038 = C30827 * C727;
    const double C31036 = C30827 * C726;
    const double C31210 = C30827 * C978;
    const double C31208 = C30827 * C977;
    const double C32102 = C30827 * C1487;
    const double C32100 = C30827 * C1486;
    const double C32332 = C30827 * C1489;
    const double C32330 = C30827 * C1488;
    const double C32324 = C30827 * C725;
    const double C32322 = C30827 * C724;
    const double C33145 = C30827 * C2386;
    const double C33143 = C30827 * C2385;
    const double C48001 = C47916 * C47996;
    const double C48034 = 2 * C47996;
    const double C48063 = C47996 / C47958;
    const double C169 = C164 - C146;
    const double C1325 = C1321 - C1303;
    const double C49319 = C49314 - C49318;
    const double C2557 = C2516 * C129;
    const double C2555 = C2516 * C128;
    const double C2537 = C2516 * C127;
    const double C2535 = C2516 * C126;
    const double C2525 = C2516 * C125;
    const double C2523 = C2516 * C124;
    const double C2761 = C2516 * C282;
    const double C2759 = C2516 * C281;
    const double C2749 = C2516 * C280;
    const double C2747 = C2516 * C279;
    const double C2965 = C2516 * C422;
    const double C2963 = C2516 * C421;
    const double C2953 = C2516 * C420;
    const double C2951 = C2516 * C419;
    const double C10125 = C2516 * C625;
    const double C10123 = C2516 * C624;
    const double C10113 = C2516 * C623;
    const double C10111 = C2516 * C622;
    const double C10101 = C2516 * C284;
    const double C10099 = C2516 * C283;
    const double C10583 = C2516 * C1293;
    const double C10581 = C2516 * C1292;
    const double C10767 = C2516 * C725;
    const double C10765 = C2516 * C724;
    const double C10755 = C2516 * C1489;
    const double C10753 = C2516 * C1488;
    const double C25205 = C2516 * C727;
    const double C25203 = C2516 * C726;
    const double C49505 = C49485 / C47918;
    const double C49326 = C49322 - C49325;
    const double C49519 = C49509 / C47958;
    const double C30841 = C30823 * C138;
    const double C30833 = C30823 * C137;
    const double C32321 = C30823 * C291;
    const double C2538 = C49516 * C138;
    const double C2526 = C49516 * C137;
    const double C10102 = C49516 * C291;
    const double C48020 = C48016 * be;
    const double C48051 = C48048 * be;
    const double C155 = C49236 * C139;
    const double C2558 = C49516 * C139;
    const double C5045 = C49451 * C139;
    const double C15218 = C15173 * C139;
    const double C30849 = C30823 * C139;
    const double C309 = C49236 * C290;
    const double C2762 = C49516 * C290;
    const double C5239 = C49451 * C290;
    const double C15418 = C15173 * C290;
    const double C31043 = C30823 * C290;
    const double C449 = C49236 * C430;
    const double C2966 = C49516 * C430;
    const double C5033 = C49323 * C430;
    const double C5411 = C49451 * C430;
    const double C15190 = C15174 * C430;
    const double C15606 = C15173 * C430;
    const double C30837 = C49323 * C430;
    const double C31215 = C30823 * C430;
    const double C1308 = C49236 * C632;
    const double C7104 = C49451 * C632;
    const double C10114 = C49516 * C632;
    const double C16700 = C15173 * C632;
    const double C32329 = C30823 * C632;
    const double C1971 = C49236 * C734;
    const double C6497 = C49323 * C734;
    const double C7312 = C49451 * C734;
    const double C10768 = C49516 * C734;
    const double C16692 = C15174 * C734;
    const double C17342 = C15173 * C734;
    const double C32325 = C49323 * C734;
    const double C33150 = C30823 * C734;
    const double C1125 = C1109 - C1110;
    const double C1518 = C1510 - C1511;
    const double C170 = C165 - C150;
    const double C171 = C166 - C154;
    const double C316 = C312 - C304;
    const double C317 = C313 - C308;
    const double C456 = C452 - C444;
    const double C457 = C453 - C448;
    const double C1326 = C1322 - C1307;
    const double C1975 = C1973 - C1970;
    const double C1804 = C1803 - C1801;
    const double C1974 = C1972 - C1966;
    const double C48436 = C48430 + C48423;
    const double C159 = C49236 * C140;
    const double C5057 = C49451 * C140;
    const double C30861 = C30823 * C140;
    const double C305 = C49236 * C289;
    const double C2750 = C49516 * C289;
    const double C5231 = C49451 * C289;
    const double C15406 = C15173 * C289;
    const double C31035 = C30823 * C289;
    const double C445 = C49236 * C429;
    const double C2954 = C49516 * C429;
    const double C5041 = C49323 * C429;
    const double C5403 = C49451 * C429;
    const double C15202 = C15174 * C429;
    const double C15594 = C15173 * C429;
    const double C30845 = C49323 * C429;
    const double C31207 = C30823 * C429;
    const double C1112 = C49236 * C633;
    const double C6515 = C49451 * C633;
    const double C10126 = C49516 * C633;
    const double C16712 = C15173 * C633;
    const double C32099 = C30823 * C633;
    const double C1513 = C49236 * C735;
    const double C5235 = C49323 * C735;
    const double C6744 = C49451 * C735;
    const double C15414 = C15174 * C735;
    const double C19025 = C15173 * C735;
    const double C25206 = C49516 * C735;
    const double C31039 = C49323 * C735;
    const double C32573 = C30823 * C735;
    const double C2534 = C49486 * C986;
    const double C5407 = C49323 * C986;
    const double C15194 = C49486 * C986;
    const double C15602 = C15174 * C986;
    const double C31211 = C49323 * C986;
    const double C36646 = C36627 * C986;
    const double C1802 = C49236 * C1298;
    const double C10584 = C49516 * C1298;
    const double C13212 = C49451 * C1298;
    const double C17162 = C15173 * C1298;
    const double C32934 = C30823 * C1298;
    const double C1967 = C49236 * C1494;
    const double C7100 = C49323 * C1494;
    const double C10756 = C49516 * C1494;
    const double C13420 = C49451 * C1494;
    const double C16704 = C15174 * C1494;
    const double C17330 = C15173 * C1494;
    const double C32333 = C49323 * C1494;
    const double C33142 = C30823 * C1494;
    const double C7308 = C49323 * C2397;
    const double C10110 = C49486 * C2397;
    const double C16696 = C49486 * C2397;
    const double C17338 = C15174 * C2397;
    const double C33146 = C49323 * C2397;
    const double C38232 = C36627 * C2397;
    const double C48177 = C48167 + C48176;
    const double C48183 = 2 * C48179;
    const double C48397 = C48230 * C48179;
    const double C48446 = C48145 * C48179;
    const double C1297 = (2 * C48230 * C48301 +
                          C48230 * (C48301 + C48179 * std::pow(C48230, 2))) /
                         C47926;
    const double C1493 =
        (ae * (C48242 + C48253 * C48305) + be * (C48244 + C48257 * C48305) +
         C48145 * (C48301 + C48179 * C48305)) /
        C47926;
    const double C1796 =
        (3 * (C48301 + C48179 * C48305) +
         C48230 * (2 * C48230 * C48179 +
                   C48230 * (C48179 + C48151 * C48187 * C48305))) /
        C47926;
    const double C1961 =
        (ae * (2 * C48230 * C48253 + C48230 * (C48253 + C48269 * C48305)) +
         be * (2 * C48230 * C48257 + C48230 * (C48257 + C48275 * C48305)) +
         C48145 * (2 * C48230 * C48179 +
                   C48230 * (C48179 + C48151 * C48187 * C48305))) /
        C47926;
    const double C2399 =
        (C48230 * C48301 + ae * (C48145 * C48327 + C48328 * be) +
         be * (C48145 * C48329 + C48328 * ae) +
         C48145 * (ae * C48327 + be * C48329 + C48145 * C48230 * C48179)) /
        C47926;
    const double C48491 = C48167 + C48490;
    const double C48501 = 2 * C48499;
    const double C48596 = C48145 * C48499;
    const double C48689 = C48682 + C48671;
    const double C9249 = C49236 * C1795;
    const double C14555 = C49451 * C1795;
    const double C41791 = C30823 * C1795;
    const double C9598 = C49236 * C1960;
    const double C13208 = C49323 * C1960;
    const double C14699 = C49451 * C1960;
    const double C17158 = C15174 * C1960;
    const double C32930 = C49323 * C1960;
    const double C41935 = C30823 * C1960;
    const double C48266 = C48260 + C48264;
    const double C2393 =
        (C48230 * C48249 + C48145 * (C48145 * C48338 + C48339 * be) +
         C48145 * C48339 * be) /
        C47918;
    const double C2394 =
        (C48230 * C48251 + C48145 * (C48145 * C48340 + C48339 * ae) +
         C48145 * C48339 * ae) /
        C47918;
    const double C2383 = C48230 * C48250 + C48339 * C48148;
    const double C3388 =
        2 * C48145 * C48339 + C48145 * (C48339 + C48411 * C48148);
    const double C48359 = C48356 + C48357;
    const double C48358 = C48353 + C48354;
    const double C1310 = C114 * C1284;
    const double C1498 = C114 * C1480;
    const double C2400 =
        (C48301 + C48179 * C48305 + ae * (C48145 * C48334 + C48335 * be) +
         be * (C48145 * C48336 + C48335 * ae) +
         C48145 * (ae * C48334 + be * C48336 +
                   C48145 * (C48179 + C48151 * C48187 * C48305))) /
        C47926;
    const double C1956 = (C48145 * (2 * C48327 + C48230 * C48334) +
                          (2 * C48328 + C48230 * C48335) * be) /
                         C47918;
    const double C1957 = (C48145 * (2 * C48329 + C48230 * C48336) +
                          (2 * C48328 + C48230 * C48335) * ae) /
                         C47918;
    const double C2391 =
        (C48242 + C48253 * C48305 + C48145 * (C48145 * C48334 + C48335 * be) +
         C48145 * C48335 * be) /
        C47918;
    const double C2392 =
        (C48244 + C48257 * C48305 + C48145 * (C48145 * C48336 + C48335 * ae) +
         C48145 * C48335 * ae) /
        C47918;
    const double C1787 = 3 * (C48243 + C48255 * C48305) +
                         C48230 * (2 * C48328 + C48230 * C48335);
    const double C1952 = C48145 * (2 * C48328 + C48230 * C48335);
    const double C2382 = C48243 + C48255 * C48305 + C48335 * C48148;
    const double C10308 =
        2 * C48145 * C48335 + C48145 * (C48335 + C48561 * C48148);
    const double C48407 = C48404 + C48405;
    const double C48406 = C48401 + C48402;
    const double C48461 = C48145 * C48457;
    const double C48720 = 2 * C48457;
    const double C48710 = be * C48457;
    const double C3801 = 3 * (C48243 + C48255 * C48148) +
                         C48145 * (2 * C48363 + C48145 * C48456);
    const double C48460 = C48145 * C48454;
    const double C48714 = 2 * C48454;
    const double C48709 = ae * C48454;
    const double C48521 = C48513 + C48520;
    const double C48576 = C48573 + C48574;
    const double C48575 = C48570 + C48571;
    const double C48611 = C48145 * C48607;
    const double C48760 = 2 * C48607;
    const double C48752 = be * C48607;
    const double C11188 = 3 * (C48317 + C48387 * C48148) +
                          C48145 * (2 * C48391 + C48145 * C48606);
    const double C48610 = C48145 * C48604;
    const double C48756 = 2 * C48604;
    const double C48751 = ae * C48604;
    const double C48698 = C48204 + C48693;
    const double C48697 = C48677 + C48692;
    const double C48696 = C48203 + C48690;
    const double C48818 = C48175 + C48800;
    const double C158 = C113 * C131;
    const double C300 = C113 * C278;
    const double C440 = C113 * C418;
    const double C5048 = C5023 * C418;
    const double C30852 = C30827 * C418;
    const double C1117 = C113 * C627;
    const double C1503 = C113 * C729;
    const double C5226 = C5023 * C729;
    const double C31030 = C30827 * C729;
    const double C2545 = C2520 * C980;
    const double C5398 = C5023 * C980;
    const double C15205 = C15180 * C980;
    const double C31202 = C30827 * C980;
    const double C1311 = C113 * C1289;
    const double C1499 = C113 * C1485;
    const double C6501 = C5023 * C1485;
    const double C32106 = C30827 * C1485;
    const double C2753 = C2520 * C2390;
    const double C6739 = C5023 * C2390;
    const double C15409 = C15180 * C2390;
    const double C32568 = C30827 * C2390;
    const double C2933 = (2 * (C48145 * C48244 + C48243 * ae) +
                          C48145 * (C48244 + C48145 * C48367 + C48363 * ae) +
                          (C48243 + C48255 * C48148) * ae) /
                         C47918;
    const double C9248 = C113 * C1790;
    const double C9597 = C113 * C1955;
    const double C13207 = C5023 * C1955;
    const double C32929 = C30827 * C1955;
    const double C10121 = C2520 * C2388;
    const double C13415 = C5023 * C2388;
    const double C16707 = C15180 * C2388;
    const double C33137 = C30827 * C2388;
    const double C3390 = (2 * (C48145 * C48318 + C48317 * ae) +
                          C48145 * (C48318 + C48145 * C48395 + C48391 * ae) +
                          (C48317 + C48387 * C48148) * ae) /
                         C47918;
    const double C48440 = C48209 + C48438;
    const double C156 = C113 * C130;
    const double C298 = C113 * C277;
    const double C438 = C113 * C417;
    const double C5046 = C5023 * C417;
    const double C30850 = C30827 * C417;
    const double C1115 = C113 * C626;
    const double C1501 = C113 * C728;
    const double C5224 = C5023 * C728;
    const double C31028 = C30827 * C728;
    const double C2543 = C2520 * C979;
    const double C5396 = C5023 * C979;
    const double C15203 = C15180 * C979;
    const double C31200 = C30827 * C979;
    const double C1309 = C113 * C1288;
    const double C1497 = C113 * C1484;
    const double C6499 = C5023 * C1484;
    const double C32104 = C30827 * C1484;
    const double C2751 = C2520 * C2389;
    const double C6737 = C5023 * C2389;
    const double C15407 = C15180 * C2389;
    const double C32566 = C30827 * C2389;
    const double C2939 =
        (2 * (ae * C48242 + be * C48244 + C48145 * C48301) +
         ae * (C48242 + C48145 * C48366 + C48363 * be) +
         be * (C48244 + C48145 * C48367 + C48363 * ae) +
         C48145 * (C48301 + ae * C48366 + be * C48367 +
                   C48145 * (ae * C48253 + be * C48257 + C48145 * C48179))) /
        C47926;
    const double C2932 = (2 * (C48145 * C48242 + C48243 * be) +
                          C48145 * (C48242 + C48145 * C48366 + C48363 * be) +
                          (C48243 + C48255 * C48148) * be) /
                         C47918;
    const double C1324 = C1315 - C1316;
    const double C1517 = C1506 - C1507;
    const double C10122 = C49486 * C2398;
    const double C13416 = C49323 * C2398;
    const double C16708 = C49486 * C2398;
    const double C17326 = C15174 * C2398;
    const double C33138 = C49323 * C2398;
    const double C38825 = C36627 * C2398;
    const double C9246 = C113 * C1789;
    const double C9595 = C113 * C1954;
    const double C13205 = C5023 * C1954;
    const double C32927 = C30827 * C1954;
    const double C10119 = C2520 * C2387;
    const double C13413 = C5023 * C2387;
    const double C16705 = C15180 * C2387;
    const double C33135 = C30827 * C2387;
    const double C3395 = (2 * (ae * C48316 + be * C48318 + C48145 * C48385) +
                          ae * (C48316 + C48145 * C48394 + C48391 * be) +
                          be * (C48318 + C48145 * C48395 + C48391 * ae) +
                          C48145 * (C48385 + ae * C48394 + be * C48395 +
                                    C48145 * (ae * C48386 + be * C48388 +
                                              C48145 * C48230 * C48175))) /
                         C47926;
    const double C3389 = (2 * (C48145 * C48316 + C48317 * be) +
                          C48145 * (C48316 + C48145 * C48394 + C48391 * be) +
                          (C48317 + C48387 * C48148) * be) /
                         C47918;
    const double C48439 = C48208 + C48437;
    const double C48681 = C48167 + C48667;
    const double C48189 = C48175 + C48188;
    const double C48494 = C48493 * C48305;
    const double C48642 = C48230 * C48493;
    const double C48713 = C48145 * C48493;
    const double C48502 = C48175 + C48500;
    const double C48764 = C48145 * C48755;
    const double C48827 = C48819 + C48804;
    const double C48294 = C48281 + C48291;
    const double C48347 = C48223 + C48344;
    const double C48416 = C48145 * C48412;
    const double C48480 = C48474 + C48475;
    const double C48543 = C48536 + C48540;
    const double C48630 = C48624 + C48625;
    const double C48565 = C48230 * C48562;
    const double C48581 = C48145 * C48562;
    const double C48658 = C48652 + C48653;
    const double C48735 = C48145 * C48728;
    const double C48782 = C48145 * C48776;
    const double C48836 = C48219 + C48831;
    const double C48292 = C48277 + C48289;
    const double C48345 = C48222 + C48342;
    const double C48413 = C48145 * C48410;
    const double C48477 = C48470 + C48471;
    const double C48541 = C48532 + C48538;
    const double C48627 = C48620 + C48621;
    const double C48563 = C48230 * C48560;
    const double C48578 = C48145 * C48560;
    const double C48655 = C48648 + C48649;
    const double C48732 = C48145 * C48725;
    const double C48779 = C48145 * C48773;
    const double C48834 = C48218 + C48828;
    const double C48290 = C48151 * C48287;
    const double C48350 = C48230 * C48287;
    const double C48381 = C48287 * ae;
    const double C48379 = C48145 * C48287;
    const double C48378 = C48287 * be;
    const double C1788 = 3 * (C48250 + C48261 * C48305) +
                         C48230 * (2 * C48339 + C48230 * C48346);
    const double C1953 = C48145 * (2 * C48339 + C48230 * C48346);
    const double C2384 = C48250 + C48261 * C48305 + C48346 * C48148;
    const double C3802 = 3 * (C48250 + C48261 * C48148) +
                         C48145 * (2 * C48355 + C48145 * C48479);
    const double C48545 = C48230 * C48542;
    const double C48590 = C48542 * ae;
    const double C48588 = C48145 * C48542;
    const double C48587 = C48542 * be;
    const double C11189 = 3 * (C48324 + C48518 * C48148) +
                          C48145 * (2 * C48572 + C48145 * C48629);
    const double C48567 = C48553 + C48564;
    const double C17921 = 3 * (C48328 + C48399 * C48148) +
                          C48145 * (2 * C48403 + C48145 * C48657);
    const double C48739 = C48719 + C48734;
    const double C48786 = C48759 + C48781;
    const double C48842 = C48835 * ae;
    const double C48840 = C48145 * C48835;
    const double C48839 = C48835 * be;
    const double C133 = (4 * (2 * C48244 + C48151 * C48251) +
                         C48151 * (3 * C48251 + C48151 * C48265)) /
                        C47918;
    const double C276 = (C48230 * (3 * C48251 + C48151 * C48265)) / C47918;
    const double C629 =
        (2 * C48244 + C48151 * C48251 + C48265 * C48305) / C47918;
    const double C9252 = C113 * C1792;
    const double C9240 = (4 * (2 * C48318 + C48230 * C48325) +
                          C48230 * (3 * C48325 + C48230 * C48519)) /
                         C47918;
    const double C132 = (4 * (2 * C48242 + C48151 * C48249) +
                         C48151 * (3 * C48249 + C48151 * C48263)) /
                        C47918;
    const double C275 = (C48230 * (3 * C48249 + C48151 * C48263)) / C47918;
    const double C628 =
        (2 * C48242 + C48151 * C48249 + C48263 * C48305) / C47918;
    const double C9250 = C113 * C1791;
    const double C9239 = (4 * (2 * C48316 + C48230 * C48323) +
                          C48230 * (3 * C48323 + C48230 * C48517)) /
                         C47918;
    const double C49128 = C49124 - C49127;
    const double C49499 = C49469 / C47918;
    const double C49136 = C49132 - C49135;
    const double C49513 = C49498 / C47958;
    const double C49277 = C49272 - C49276;
    const double C49503 = C49482 / C47918;
    const double C49284 = C49280 - C49283;
    const double C49517 = C49506 / C47958;
    const double C47936 = C49236 - C47935;
    const double C48005 = C48001 + C49323;
    const double C48066 = C48063 - C48065;
    const double C174 = C169 + C147;
    const double C1329 = C1325 + C1304;
    const double C36670 = C49319 * C139;
    const double C36650 = C49319 * C138;
    const double C36638 = C49319 * C137;
    const double C36870 = C49319 * C290;
    const double C36858 = C49319 * C289;
    const double C37058 = C49319 * C430;
    const double C37046 = C49319 * C429;
    const double C38245 = C49319 * C633;
    const double C38224 = C49319 * C291;
    const double C38472 = C49319 * C735;
    const double C38833 = C49319 * C632;
    const double C39048 = C49319 * C734;
    const double C47332 = C49319 * C1298;
    const double C47500 = C49319 * C1494;
    const double C49460 = C49319 * C49313;
    const double C49495 = C49462 + C49319;
    const double C2542 = C49505 * C429;
    const double C2530 = C49505 * C430;
    const double C2758 = C49505 * C735;
    const double C2962 = C49505 * C986;
    const double C10118 = C49505 * C1494;
    const double C10106 = C49505 * C734;
    const double C10580 = C49505 * C1960;
    const double C10764 = C49505 * C2397;
    const double C10752 = C49505 * C2398;
    const double C36654 = C49326 * C429;
    const double C36642 = C49326 * C430;
    const double C36866 = C49326 * C735;
    const double C37054 = C49326 * C986;
    const double C38228 = C49326 * C734;
    const double C38829 = C49326 * C1494;
    const double C39044 = C49326 * C2397;
    const double C47328 = C49326 * C1960;
    const double C47496 = C49326 * C2398;
    const double C49464 = C49326 / C47958;
    const double C49461 = C49326 * C49313;
    const double C20200 = C49519 - (C49319 * C49315) / C47918;
    const double C48022 = C48020 / C47918;
    const double C48054 = C48051 / C47918;
    const double C1129 = C1125 - C1111;
    const double C1522 = C1518 - C1512;
    const double C175 = C170 + C151;
    const double C176 = C171 + C155;
    const double C321 = C317 + C309;
    const double C461 = C457 + C449;
    const double C1330 = C1326 + C1308;
    const double C1977 = C1975 + C1971;
    const double C320 = C316 + C305;
    const double C460 = C456 + C445;
    const double C1805 = C1804 + C1802;
    const double C1976 = C1974 + C1967;
    const double C141 =
        (4 * (2 * C48151 * C48167 + C48151 * C48177) +
         C48151 * (3 * C48177 +
                   C48151 * (2 * C48151 * C48175 +
                             C48151 * (C48175 +
                                       (C48170 * C48171 +
                                        C48148 * bs[7] * std::pow(C48147, 7)) *
                                           C47917 * C48163)))) /
        C47926;
    const double C288 =
        ((yP - yQ) * (2 * C48151 * C48167 + C48151 * C48177)) / C47926;
    const double C428 =
        (ae * (2 * C48151 * C48208 + C48151 * (C48208 + C48203 * C48163)) +
         be * (2 * C48151 * C48209 + C48151 * (C48209 + C48204 * C48163)) +
         C48145 * (2 * C48151 * C48167 + C48151 * C48177)) /
        C47926;
    const double C634 =
        (C48158 + C48167 * C48163 + C48177 * std::pow(yP - yQ, 2)) / C47926;
    const double C736 =
        (ae * C48230 * (C48208 + C48203 * C48163) +
         be * C48230 * (C48209 + C48204 * C48163) + C48145 * C48230 * C48177) /
        C47926;
    const double C987 =
        (C48158 + C48167 * C48163 + ae * (C48145 * C48249 + C48250 * be) +
         be * (C48145 * C48251 + C48250 * ae) +
         C48145 * (ae * C48249 + be * C48251 + C48145 * C48177)) /
        C47926;
    const double C48459 = C48453 + C48446;
    const double C1318 = C49236 * C1297;
    const double C12648 = C49451 * C1297;
    const double C32343 = C30823 * C1297;
    const double C1509 = C49236 * C1493;
    const double C6511 = C49323 * C1493;
    const double C10130 = C49505 * C1493;
    const double C12857 = C49451 * C1493;
    const double C16716 = C15174 * C1493;
    const double C32103 = C49323 * C1493;
    const double C32565 = C30823 * C1493;
    const double C38241 = C49326 * C1493;
    const double C9253 = C49236 * C1796;
    const double C11576 = C49236 * C1961;
    const double C12644 = C49323 * C1961;
    const double C32339 = C49323 * C1961;
    const double C2754 = C49486 * C2399;
    const double C6740 = C49323 * C2399;
    const double C15410 = C49486 * C2399;
    const double C19021 = C15174 * C2399;
    const double C25202 = C49505 * C2399;
    const double C32569 = C49323 * C2399;
    const double C36862 = C36627 * C2399;
    const double C38468 = C49326 * C2399;
    const double C9243 =
        (4 * (2 * C48385 + C48230 * C48491) +
         C48230 *
             (3 * C48491 + C48230 * (2 * C48230 * C48175 +
                                     C48230 * (C48175 + C48187 * C48305)))) /
        C47926;
    const double C9347 =
        (ae * (3 * C48323 +
               C48230 * (2 * C48386 + C48230 * (C48203 + C48218 * C48305))) +
         be * (3 * C48325 +
               C48230 * (2 * C48388 + C48230 * (C48204 + C48219 * C48305))) +
         C48145 *
             (3 * C48491 + C48230 * (2 * C48230 * C48175 +
                                     C48230 * (C48175 + C48187 * C48305)))) /
        C47926;
    const double C48609 = C48603 + C48596;
    const double C48695 = C48145 * C48689;
    const double C48797 = 2 * C48689;
    const double C415 = (C48145 * (3 * C48249 + C48151 * C48263) +
                         (3 * C48250 + C48151 * C48266) * be) /
                        C47918;
    const double C416 = (C48145 * (3 * C48251 + C48151 * C48265) +
                         (3 * C48250 + C48151 * C48266) * ae) /
                        C47918;
    const double C730 =
        (C48145 * C48230 * C48263 + C48230 * C48266 * be) / C47918;
    const double C731 =
        (C48145 * C48230 * C48265 + C48230 * C48266 * ae) / C47918;
    const double C981 =
        (2 * C48242 + C48151 * C48249 +
         C48145 * (C48145 * C48263 + C48266 * be) + C48145 * C48266 * be) /
        C47918;
    const double C982 =
        (2 * C48244 + C48151 * C48251 +
         C48145 * (C48145 * C48265 + C48266 * ae) + C48145 * C48266 * ae) /
        C47918;
    const double C120 = 4 * (2 * C48243 + C48151 * C48250) +
                        C48151 * (3 * C48250 + C48151 * C48266);
    const double C269 = C48230 * (3 * C48250 + C48151 * C48266);
    const double C409 = C48145 * (3 * C48250 + C48151 * C48266);
    const double C620 = 2 * C48243 + C48151 * C48250 + C48266 * C48305;
    const double C722 = C48145 * C48230 * C48266;
    const double C973 = 2 * C48243 + C48151 * C48250 + C48266 * C48148;
    const double C1287 =
        2 * C48230 * C48266 + C48230 * (C48266 + C48287 * C48305);
    const double C1483 = C48145 * (C48266 + C48287 * C48305);
    const double C2929 =
        2 * C48145 * C48266 + C48145 * (C48266 + C48287 * C48148);
    const double C2739 = C2520 * C2393;
    const double C6729 = C5023 * C2393;
    const double C15395 = C15180 * C2393;
    const double C35434 = C30827 * C2393;
    const double C2741 = C2520 * C2394;
    const double C6731 = C5023 * C2394;
    const double C15397 = C15180 * C2394;
    const double C35436 = C30827 * C2394;
    const double C2931 = (2 * (C48145 * C48251 + C48250 * ae) +
                          C48145 * (C48251 + C48145 * C48359 + C48355 * ae) +
                          (C48250 + C48261 * C48148) * ae) /
                         C47918;
    const double C2930 = (2 * (C48145 * C48249 + C48250 * be) +
                          C48145 * (C48249 + C48145 * C48358 + C48355 * be) +
                          (C48250 + C48261 * C48148) * be) /
                         C47918;
    const double C10134 = C49486 * C2400;
    const double C12853 = C49323 * C2400;
    const double C16720 = C49486 * C2400;
    const double C32561 = C49323 * C2400;
    const double C38237 = C36627 * C2400;
    const double C11573 = C113 * C1956;
    const double C12641 = C5023 * C1956;
    const double C32336 = C30827 * C1956;
    const double C11575 = C113 * C1957;
    const double C12643 = C5023 * C1957;
    const double C32338 = C30827 * C1957;
    const double C10131 = C2520 * C2391;
    const double C12850 = C5023 * C2391;
    const double C16717 = C15180 * C2391;
    const double C32558 = C30827 * C2391;
    const double C10133 = C2520 * C2392;
    const double C12852 = C5023 * C2392;
    const double C16719 = C15180 * C2392;
    const double C32560 = C30827 * C2392;
    const double C9251 = C114 * C1787;
    const double C11574 = C114 * C1952;
    const double C3392 = (2 * (C48145 * C48329 + C48328 * ae) +
                          C48145 * (C48329 + C48145 * C48407 + C48403 * ae) +
                          (C48328 + C48399 * C48148) * ae) /
                         C47918;
    const double C3396 =
        (2 * (ae * C48327 + be * C48329 + C48145 * C48397) +
         ae * (C48327 + C48145 * C48406 + C48403 * be) +
         be * (C48329 + C48145 * C48407 + C48403 * ae) +
         C48145 * (C48397 + ae * C48406 + be * C48407 +
                   C48145 * (ae * C48398 + be * C48400 +
                             C48145 * C48230 * C48151 * C48187))) /
        C47926;
    const double C3391 = (2 * (C48145 * C48327 + C48328 * be) +
                          C48145 * (C48327 + C48145 * C48406 + C48403 * be) +
                          (C48328 + C48399 * C48148) * be) /
                         C47918;
    const double C48463 = C48257 + C48461;
    const double C48462 = C48253 + C48460;
    const double C48723 = C48179 + C48709;
    const double C9343 = (C48145 * (3 * C48323 + C48230 * C48517) +
                          (3 * C48324 + C48230 * C48521) * be) /
                         C47918;
    const double C9344 = (C48145 * (3 * C48325 + C48230 * C48519) +
                          (3 * C48324 + C48230 * C48521) * ae) /
                         C47918;
    const double C9832 =
        (2 * C48316 + C48230 * C48323 +
         C48145 * (C48145 * C48517 + C48521 * be) + C48145 * C48521 * be) /
        C47918;
    const double C9833 =
        (2 * C48318 + C48230 * C48325 +
         C48145 * (C48145 * C48519 + C48521 * ae) + C48145 * C48521 * ae) /
        C47918;
    const double C9237 = 4 * (2 * C48317 + C48230 * C48324) +
                         C48230 * (3 * C48324 + C48230 * C48521);
    const double C9341 = C48145 * (3 * C48324 + C48230 * C48521);
    const double C9830 = 2 * C48317 + C48230 * C48324 + C48521 * C48148;
    const double C10740 =
        2 * C48145 * C48521 + C48145 * (C48521 + C48542 * C48148);
    const double C10310 = (2 * (C48145 * C48325 + C48324 * ae) +
                           C48145 * (C48325 + C48145 * C48576 + C48572 * ae) +
                           (C48324 + C48518 * C48148) * ae) /
                          C47918;
    const double C10309 = (2 * (C48145 * C48323 + C48324 * be) +
                           C48145 * (C48323 + C48145 * C48575 + C48572 * be) +
                           (C48324 + C48518 * C48148) * be) /
                          C47918;
    const double C48613 = C48388 + C48611;
    const double C48612 = C48386 + C48610;
    const double C48762 = C48499 + C48751;
    const double C48701 = C48698 + C48687;
    const double C18007 = 4 * (2 * C48371 + C48145 * C48433) +
                          C48145 * (3 * C48433 + C48145 * C48697);
    const double C48700 = C48696 + C48684;
    const double C48826 = C48818 + C48801;
    const double C2957 = C2520 * C2933;
    const double C15597 = C15180 * C2933;
    const double C10759 = C2520 * C3390;
    const double C17333 = C15180 * C3390;
    const double C48442 = C48440 + C48435;
    const double C167 = C156 - C157;
    const double C311 = C298 - C299;
    const double C451 = C438 - C439;
    const double C1127 = C1115 - C1116;
    const double C1516 = C1501 - C1502;
    const double C1323 = C1309 - C1310;
    const double C1515 = C1497 - C1498;
    const double C2958 = C49486 * C2939;
    const double C15598 = C49486 * C2939;
    const double C20228 = C49465 * C2939;
    const double C33822 = C49465 * C2939;
    const double C37050 = C36627 * C2939;
    const double C2955 = C2520 * C2932;
    const double C15595 = C15180 * C2932;
    const double C1328 = C1324 - C1317;
    const double C1521 = C1517 - C1508;
    const double C9254 = C9246 - C9247;
    const double C9600 = C9595 - C9596;
    const double C10760 = C49486 * C3395;
    const double C17334 = C49486 * C3395;
    const double C21544 = C49465 * C3395;
    const double C39040 = C36627 * C3395;
    const double C42543 = C49465 * C3395;
    const double C10757 = C2520 * C3389;
    const double C17331 = C15180 * C3389;
    const double C48441 = C48439 + C48432;
    const double C48688 = C48681 + C48668;
    const double C48190 = C48151 * C48189;
    const double C48409 = C48230 * C48189;
    const double C48469 = C48145 * C48189;
    const double C738 =
        (ae * C48230 *
             (3 * C48222 + C48151 * (2 * C48151 * C48218 +
                                     C48151 * (C48218 + C48182 * C48181 *
                                                            C48199 * C48163))) +
         be * C48230 *
             (3 * C48223 + C48151 * (2 * C48151 * C48219 +
                                     C48151 * (C48219 + C48182 * C48181 *
                                                            C48200 * C48163))) +
         C48145 * C48230 *
             (3 * C48189 +
              C48151 *
                  (2 * C48151 * C48187 +
                   C48151 * (C48187 + (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                          C47917 * C48163)))) /
        C47926;
    const double C1296 = (2 * C48230 * C48177 +
                          C48230 * (C48177 + C48189 * std::pow(C48230, 2))) /
                         C47926;
    const double C1492 =
        (ae * (C48249 + C48222 * C48305) + be * (C48251 + C48223 * C48305) +
         C48145 * (C48177 + C48189 * C48305)) /
        C47926;
    const double C1797 =
        (3 * (C48177 + C48189 * C48305) +
         C48230 * (2 * C48230 * C48189 +
                   C48230 * (C48189 +
                             (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163) *
                                 C48305))) /
        C47926;
    const double C1962 =
        (ae * (2 * C48230 * C48222 + C48230 * (C48222 + C48286 * C48305)) +
         be * (2 * C48230 * C48223 + C48230 * (C48223 + C48288 * C48305)) +
         C48145 * (2 * C48230 * C48189 +
                   C48230 * (C48189 +
                             (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163) *
                                 C48305))) /
        C47926;
    const double C2401 =
        (C48230 * C48177 + ae * (C48145 * C48338 + C48339 * be) +
         be * (C48145 * C48340 + C48339 * ae) +
         C48145 * (ae * C48338 + be * C48340 + C48145 * C48230 * C48189)) /
        C47926;
    const double C2938 =
        (2 * (ae * C48249 + be * C48251 + C48145 * C48177) +
         ae * (C48249 + C48145 * C48358 + C48355 * be) +
         be * (C48251 + C48145 * C48359 + C48355 * ae) +
         C48145 * (C48177 + ae * C48358 + be * C48359 +
                   C48145 * (ae * C48222 + be * C48223 + C48145 * C48189))) /
        C47926;
    const double C48495 = C48179 + C48494;
    const double C48647 = C48145 * C48642;
    const double C48731 = C48724 + C48713;
    const double C48503 = C48230 * C48502;
    const double C48619 = C48145 * C48502;
    const double C10313 =
        (2 * (ae * C48323 + be * C48325 + C48145 * C48491) +
         ae * (C48323 + C48145 * C48575 + C48572 * be) +
         be * (C48325 + C48145 * C48576 + C48572 * ae) +
         C48145 * (C48491 + ae * C48575 + be * C48576 +
                   C48145 * (ae * C48508 + be * C48509 + C48145 * C48502))) /
        C47926;
    const double C48772 = C48763 + C48764;
    const double C48833 = C48145 * C48827;
    const double C48296 = C48151 * C48294;
    const double C48351 = C48230 * C48294;
    const double C48380 = C48145 * C48294;
    const double C1295 =
        (2 * C48230 * C48265 + C48230 * (C48265 + C48294 * C48305)) / C47918;
    const double C1491 = (C48145 * (C48265 + C48294 * C48305) +
                          (C48266 + C48287 * C48305) * ae) /
                         C47918;
    const double C1794 = (3 * (C48251 + C48223 * C48305) +
                          C48230 * (2 * C48340 + C48230 * C48347)) /
                         C47918;
    const double C1959 = (C48145 * (2 * C48340 + C48230 * C48347) +
                          (2 * C48339 + C48230 * C48346) * ae) /
                         C47918;
    const double C2396 =
        (C48251 + C48223 * C48305 + C48145 * (C48145 * C48347 + C48346 * ae) +
         C48145 * C48346 * ae) /
        C47918;
    const double C48419 = C48416 + C48417;
    const double C48484 = C48145 * C48480;
    const double C48546 = C48230 * C48543;
    const double C48589 = C48145 * C48543;
    const double C48634 = C48145 * C48630;
    const double C48568 = C48555 + C48565;
    const double C48584 = C48581 + C48582;
    const double C48661 = C48145 * C48658;
    const double C48740 = C48275 + C48735;
    const double C48787 = C48530 + C48782;
    const double C48841 = C48836 + C48824;
    const double C48295 = C48151 * C48292;
    const double C48349 = C48230 * C48292;
    const double C48377 = C48145 * C48292;
    const double C1294 =
        (2 * C48230 * C48263 + C48230 * (C48263 + C48292 * C48305)) / C47918;
    const double C1490 = (C48145 * (C48263 + C48292 * C48305) +
                          (C48266 + C48287 * C48305) * be) /
                         C47918;
    const double C2402 =
        (C48177 + C48189 * C48305 + ae * (C48145 * C48345 + C48346 * be) +
         be * (C48145 * C48347 + C48346 * ae) +
         C48145 * (ae * C48345 + be * C48347 +
                   C48145 * (C48189 +
                             (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163) *
                                 C48305))) /
        C47926;
    const double C1793 = (3 * (C48249 + C48222 * C48305) +
                          C48230 * (2 * C48338 + C48230 * C48345)) /
                         C47918;
    const double C1958 = (C48145 * (2 * C48338 + C48230 * C48345) +
                          (2 * C48339 + C48230 * C48346) * be) /
                         C47918;
    const double C2395 =
        (C48249 + C48222 * C48305 + C48145 * (C48145 * C48345 + C48346 * be) +
         C48145 * C48346 * be) /
        C47918;
    const double C48418 = C48413 + C48414;
    const double C48483 = C48145 * C48477;
    const double C48544 = C48230 * C48541;
    const double C48586 = C48145 * C48541;
    const double C48633 = C48145 * C48627;
    const double C48566 = C48551 + C48563;
    const double C48583 = C48578 + C48579;
    const double C48660 = C48145 * C48655;
    const double C48738 = C48269 + C48732;
    const double C48785 = C48524 + C48779;
    const double C48838 = C48834 + C48821;
    const double C48293 = C48271 + C48290;
    const double C2734 = C48230 * C48266 + C48350 * C48148;
    const double C48548 = C48526 + C48545;
    const double C9238 = 4 * (2 * C48328 + C48230 * C48335) +
                         C48230 * (3 * C48335 + C48230 * C48567);
    const double C9342 = C48145 * (3 * C48335 + C48230 * C48567);
    const double C10094 = 2 * C48328 + C48230 * C48335 + C48567 * C48148;
    const double C18008 = 4 * (2 * C48363 + C48145 * C48456) +
                          C48145 * (3 * C48456 + C48145 * C48739);
    const double C18241 = 4 * (2 * C48391 + C48145 * C48606) +
                          C48145 * (3 * C48606 + C48145 * C48786);
    const double C48845 = C48812 + C48840;
    const double C162 = C113 * C133;
    const double C296 = C113 * C276;
    const double C1121 = C113 * C629;
    const double C9500 = C113 * C9240;
    const double C160 = C113 * C132;
    const double C294 = C113 * C275;
    const double C1119 = C113 * C628;
    const double C9498 = C113 * C9239;
    const double C49427 = C49128 * C49118;
    const double C49471 = C49432 + C49128;
    const double C49435 = C49136 / C47958;
    const double C49431 = C49136 * C49118;
    const double C3912 = C49513 - (C49128 * C49119) / C47918;
    const double C49453 = C49277 * C49271;
    const double C49490 = C49455 + C49277;
    const double C49457 = C49284 / C47958;
    const double C49454 = C49284 * C49271;
    const double C11294 = C49517 - (C49277 * C49273) / C47918;
    const double C47937 = C47936 * C47933;
    const double C47983 = C47936 * ae;
    const double C2518 =
        ((C47936 * ae) / C47918 - C47925 / C47928) / (2 * C47918) +
        ((C47916 * ((0 * ae) / C47918 - C47929 / C47926) + C49323) * ae) /
            C47918;
    const double C5021 = (C47936 * ae) / C47918 - C47925 / C47928;
    const double C15176 =
        ((-(0 * be) / C47918) / C47958 -
         ((0 - (C47916 * C47925) / C47918) * be) / C47918) /
            C47958 -
        ((C47916 * ((-C47925 / C47918) / C47958 - (C47936 * be) / C47918) +
          C30823) *
         be) /
            C47918 +
        (-C47932 / C47918) / C47958 - (0 * be) / C47918;
    const double C15178 =
        ((-C47925 / C47918) / C47958 - (C47936 * be) / C47918) / C47958 -
        ((C47916 * ((-C47932 / C47918) / C47958 - (0 * be) / C47918) + C49323) *
         be) /
            C47918;
    const double C30825 = (-C47981) / C47958 - (C47936 * be) / C47918;
    const double C48009 = C48005 * be;
    const double C36657 = C48066 * C980;
    const double C36655 = C48066 * C979;
    const double C36645 = C48066 * C978;
    const double C36643 = C48066 * C977;
    const double C36861 = C48066 * C2390;
    const double C36859 = C48066 * C2389;
    const double C36849 = C48066 * C2394;
    const double C36847 = C48066 * C2393;
    const double C37049 = C48066 * C2933;
    const double C37047 = C48066 * C2932;
    const double C38236 = C48066 * C2392;
    const double C38234 = C48066 * C2391;
    const double C38231 = C48066 * C2386;
    const double C38229 = C48066 * C2385;
    const double C38824 = C48066 * C2388;
    const double C38822 = C48066 * C2387;
    const double C39039 = C48066 * C3390;
    const double C39037 = C48066 * C3389;
    const double C48070 = 2 * C48066;
    const double C17837 =
        (C48066 / C47958 + (0 * ae) / C47918) / C47958 - (0 * be) / C47918;
    const double C20210 = C48066 / C47958 - (0 * be) / C47918;
    const double C33804 = C48066 / C47958 + (0 * ae) / C47918;
    const double C179 = C174 * C49219;
    const double C1107 = C174 * C49515;
    const double C3917 = C174 * C49449;
    const double C7969 = C174 * C7962;
    const double C22563 = C174 * C22556;
    const double C26400 = C174 * C49277;
    const double C49492 = C49460 / C47918;
    const double C49510 = C49495 / C47958;
    const double C49511 = C49496 + C49464;
    const double C20202 = C49464 - C49324 / C47928;
    const double C49494 = C49461 / C47918;
    const double C20244 = C20200 * C138;
    const double C20216 = C20200 * C137;
    const double C20414 = C20200 * C290;
    const double C20572 = C20200 * C430;
    const double C21532 = C20200 * C291;
    const double C21930 = C20200 * C632;
    const double C22088 = C20200 * C734;
    const double C48023 = C48019 - C48022;
    const double C48056 = C48040 - C48054;
    const double C1132 = C1129 + C1112;
    const double C1526 = C1522 + C1513;
    const double C180 = C175 * C49219;
    const double C1113 = C175 * C49515;
    const double C3919 = C175 * C49449;
    const double C7972 = C175 * C7962;
    const double C22565 = C175 * C22556;
    const double C26403 = C175 * C49277;
    const double C181 = C176 * C49219;
    const double C1124 = C176 * C49515;
    const double C3921 = C176 * C49449;
    const double C7977 = C176 * C7962;
    const double C22567 = C176 * C22556;
    const double C26408 = C176 * C49277;
    const double C325 = C321 * C49219;
    const double C1108 = C321 * C49503;
    const double C1320 = C321 * C49515;
    const double C3918 = C321 * C49281;
    const double C4062 = C321 * C49449;
    const double C7970 = C321 * C7963;
    const double C8131 = C321 * C7962;
    const double C22564 = C321 * C49281;
    const double C22708 = C321 * C22556;
    const double C26401 = C321 * C49284;
    const double C26562 = C321 * C49277;
    const double C465 = C461 * C49219;
    const double C1514 = C461 * C49515;
    const double C4201 = C461 * C49449;
    const double C8283 = C461 * C7962;
    const double C22844 = C461 * C22556;
    const double C26714 = C461 * C49277;
    const double C324 = C320 * C49219;
    const double C1114 = C320 * C49503;
    const double C1314 = C320 * C49515;
    const double C3920 = C320 * C49281;
    const double C4060 = C320 * C49449;
    const double C7973 = C320 * C7963;
    const double C8128 = C320 * C7962;
    const double C22566 = C320 * C49281;
    const double C22706 = C320 * C22556;
    const double C26404 = C320 * C49284;
    const double C26559 = C320 * C49277;
    const double C464 = C460 * C49219;
    const double C1505 = C460 * C49515;
    const double C4199 = C460 * C49449;
    const double C8280 = C460 * C7962;
    const double C22842 = C460 * C22556;
    const double C26711 = C460 * C49277;
    const double C163 = C49236 * C141;
    const double C301 = C49236 * C288;
    const double C5223 = C49451 * C288;
    const double C31027 = C30823 * C288;
    const double C441 = C49236 * C428;
    const double C2554 = C49505 * C428;
    const double C5049 = C49323 * C428;
    const double C5395 = C49451 * C428;
    const double C15214 = C15174 * C428;
    const double C30853 = C49323 * C428;
    const double C31199 = C30823 * C428;
    const double C36666 = C49326 * C428;
    const double C1118 = C49236 * C634;
    const double C6506 = C49451 * C634;
    const double C32111 = C30823 * C634;
    const double C1504 = C49236 * C736;
    const double C2746 = C49505 * C736;
    const double C5227 = C49323 * C736;
    const double C6736 = C49451 * C736;
    const double C15402 = C15174 * C736;
    const double C31031 = C49323 * C736;
    const double C35441 = C30823 * C736;
    const double C36854 = C49326 * C736;
    const double C2546 = C49486 * C987;
    const double C2950 = C49505 * C987;
    const double C5399 = C49323 * C987;
    const double C15206 = C49486 * C987;
    const double C15590 = C15174 * C987;
    const double C31203 = C49323 * C987;
    const double C36658 = C36627 * C987;
    const double C37042 = C49326 * C987;
    const double C9501 = C49236 * C9243;
    const double C9594 = C49236 * C9347;
    const double C14551 = C49323 * C9347;
    const double C41787 = C49323 * C9347;
    const double C434 = C113 * C415;
    const double C5050 = C5023 * C415;
    const double C30854 = C30827 * C415;
    const double C436 = C113 * C416;
    const double C5052 = C5023 * C416;
    const double C30856 = C30827 * C416;
    const double C4193 = C113 * C730;
    const double C5216 = C5023 * C730;
    const double C31020 = C30827 * C730;
    const double C4195 = C113 * C731;
    const double C5218 = C5023 * C731;
    const double C31022 = C30827 * C731;
    const double C2547 = C2520 * C981;
    const double C5388 = C5023 * C981;
    const double C15207 = C15180 * C981;
    const double C31192 = C30827 * C981;
    const double C36659 = C48066 * C981;
    const double C2549 = C2520 * C982;
    const double C5390 = C5023 * C982;
    const double C15209 = C15180 * C982;
    const double C31194 = C30827 * C982;
    const double C36661 = C48066 * C982;
    const double C161 = C114 * C120;
    const double C295 = C114 * C269;
    const double C435 = C114 * C409;
    const double C1120 = C114 * C620;
    const double C4194 = C114 * C722;
    const double C2945 = C2520 * C2931;
    const double C15585 = C15180 * C2931;
    const double C37037 = C48066 * C2931;
    const double C2943 = C2520 * C2930;
    const double C15583 = C15180 * C2930;
    const double C37035 = C48066 * C2930;
    const double C9255 = C9250 - C9251;
    const double C11580 = C11573 - C11574;
    const double C19016 = C15180 * C3392;
    const double C25197 = C2520 * C3392;
    const double C38463 = C48066 * C3392;
    const double C19017 = C49486 * C3396;
    const double C20402 = C49465 * C3396;
    const double C25198 = C49486 * C3396;
    const double C33996 = C49465 * C3396;
    const double C38464 = C36627 * C3396;
    const double C19014 = C15180 * C3391;
    const double C25195 = C2520 * C3391;
    const double C38461 = C48066 * C3391;
    const double C48465 = C48463 + C48458;
    const double C48464 = C48462 + C48455;
    const double C48730 = C48723 + C48710;
    const double C9591 = C113 * C9343;
    const double C14548 = C5023 * C9343;
    const double C41784 = C30827 * C9343;
    const double C9593 = C113 * C9344;
    const double C14550 = C5023 * C9344;
    const double C41786 = C30827 * C9344;
    const double C10573 = C2520 * C9832;
    const double C14692 = C5023 * C9832;
    const double C17151 = C15180 * C9832;
    const double C41928 = C30827 * C9832;
    const double C47321 = C48066 * C9832;
    const double C10575 = C2520 * C9833;
    const double C14694 = C5023 * C9833;
    const double C17153 = C15180 * C9833;
    const double C41930 = C30827 * C9833;
    const double C47323 = C48066 * C9833;
    const double C9499 = C114 * C9237;
    const double C9592 = C114 * C9341;
    const double C10747 = C2520 * C10310;
    const double C17321 = C15180 * C10310;
    const double C47491 = C48066 * C10310;
    const double C10745 = C2520 * C10309;
    const double C17319 = C15180 * C10309;
    const double C47489 = C48066 * C10309;
    const double C48615 = C48613 + C48608;
    const double C48614 = C48612 + C48605;
    const double C48771 = C48762 + C48752;
    const double C48703 = C48145 * C48701;
    const double C48813 = 3 * C48701;
    const double C48799 = be * C48701;
    const double C48702 = C48145 * C48700;
    const double C48805 = 3 * C48700;
    const double C48798 = ae * C48700;
    const double C3804 =
        (3 * (C48240 + C48145 * C48375 + C48371 * ae) +
         C48145 * (2 * C48375 + C48145 * C48442 + C48433 * ae) +
         (2 * C48371 + C48145 * C48433) * ae) /
        C47918;
    const double C172 = C167 - C158;
    const double C315 = C311 - C300;
    const double C455 = C451 - C440;
    const double C1130 = C1127 - C1117;
    const double C1520 = C1516 - C1503;
    const double C1327 = C1323 - C1311;
    const double C1519 = C1515 - C1499;
    const double C1332 = C1328 + C1318;
    const double C1525 = C1521 + C1509;
    const double C9256 = C9254 - C9248;
    const double C9602 = C9600 - C9597;
    const double C3809 =
        (3 * (C48158 + ae * C48374 + be * C48375 + C48145 * C48436) +
         ae * (2 * C48374 + C48145 * C48441 + C48433 * be) +
         be * (2 * C48375 + C48145 * C48442 + C48433 * ae) +
         C48145 * (2 * C48436 + ae * C48441 + be * C48442 +
                   C48145 * (C48167 + ae * C48431 + be * C48434 +
                             C48145 * (ae * C48203 + be * C48204 +
                                       C48145 * C48175)))) /
        C47926;
    const double C3803 =
        (3 * (C48239 + C48145 * C48374 + C48371 * be) +
         C48145 * (2 * C48374 + C48145 * C48441 + C48433 * be) +
         (2 * C48371 + C48145 * C48433) * be) /
        C47918;
    const double C48699 = C48688 + C48695;
    const double C48191 = C48183 + C48190;
    const double C48482 = C48476 + C48469;
    const double C1312 = C49236 * C1296;
    const double C1500 = C49236 * C1492;
    const double C6502 = C49323 * C1492;
    const double C32107 = C49323 * C1492;
    const double C2742 = C49486 * C2401;
    const double C6732 = C49323 * C2401;
    const double C15398 = C49486 * C2401;
    const double C35437 = C49323 * C2401;
    const double C36850 = C36627 * C2401;
    const double C2946 = C49486 * C2938;
    const double C15586 = C49486 * C2938;
    const double C20232 = C49465 * C2938;
    const double C33826 = C49465 * C2938;
    const double C37038 = C36627 * C2938;
    const double C9244 =
        (4 * (2 * C48397 + C48230 * C48495) +
         C48230 * (3 * C48495 +
                   C48230 * (2 * C48230 * C48493 +
                             C48230 * (C48493 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48305)))) /
        C47926;
    const double C9348 =
        (ae * (3 * C48334 +
               C48230 * (2 * C48398 +
                         C48230 * (C48269 + C48151 * C48278 * C48305))) +
         be * (3 * C48336 +
               C48230 * (2 * C48400 +
                         C48230 * (C48275 + C48151 * C48282 * C48305))) +
         C48145 * (3 * C48495 +
                   C48230 * (2 * C48230 * C48493 +
                             C48230 * (C48493 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48305)))) /
        C47926;
    const double C48654 = C48646 + C48647;
    const double C48737 = C48145 * C48731;
    const double C48504 = C48501 + C48503;
    const double C48632 = C48626 + C48619;
    const double C10748 = C49486 * C10313;
    const double C17322 = C49486 * C10313;
    const double C21918 = C49465 * C10313;
    const double C42917 = C49465 * C10313;
    const double C47492 = C36627 * C10313;
    const double C48778 = C48145 * C48772;
    const double C48837 = C48826 + C48833;
    const double C48298 = C48274 + C48296;
    const double C2736 =
        (C48230 * C48265 + C48145 * (C48145 * C48351 + C48350 * ae) +
         C48145 * C48350 * ae) /
        C47918;
    const double C48383 = C48380 + C48381;
    const double C3394 = (2 * (C48145 * C48340 + C48339 * ae) +
                          C48145 * (C48340 + C48145 * C48419 + C48415 * ae) +
                          (C48339 + C48411 * C48148) * ae) /
                         C47918;
    const double C48486 = C48223 + C48484;
    const double C48549 = C48529 + C48546;
    const double C48592 = C48589 + C48590;
    const double C48636 = C48509 + C48634;
    const double C9242 = (4 * (2 * C48329 + C48230 * C48336) +
                          C48230 * (3 * C48336 + C48230 * C48568)) /
                         C47918;
    const double C9346 = (C48145 * (3 * C48336 + C48230 * C48568) +
                          (3 * C48335 + C48230 * C48567) * ae) /
                         C47918;
    const double C10096 =
        (2 * C48329 + C48230 * C48336 +
         C48145 * (C48145 * C48568 + C48567 * ae) + C48145 * C48567 * ae) /
        C47918;
    const double C10312 = (2 * (C48145 * C48336 + C48335 * ae) +
                           C48145 * (C48336 + C48145 * C48584 + C48580 * ae) +
                           (C48335 + C48561 * C48148) * ae) /
                          C47918;
    const double C48663 = C48400 + C48661;
    const double C48743 = C48740 + C48729;
    const double C48789 = C48787 + C48777;
    const double C48846 = C48145 * C48841;
    const double C48297 = C48268 + C48295;
    const double C2735 =
        (C48230 * C48263 + C48145 * (C48145 * C48349 + C48350 * be) +
         C48145 * C48350 * be) /
        C47918;
    const double C48382 = C48377 + C48378;
    const double C3397 =
        (2 * (ae * C48338 + be * C48340 + C48145 * C48409) +
         ae * (C48338 + C48145 * C48418 + C48415 * be) +
         be * (C48340 + C48145 * C48419 + C48415 * ae) +
         C48145 *
             (C48409 + ae * C48418 + be * C48419 +
              C48145 * (ae * C48410 + be * C48412 +
                        C48145 * C48230 *
                            (C48187 + (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                          C47917 * C48163)))) /
        C47926;
    const double C3393 = (2 * (C48145 * C48338 + C48339 * be) +
                          C48145 * (C48338 + C48145 * C48418 + C48415 * be) +
                          (C48339 + C48411 * C48148) * be) /
                         C47918;
    const double C48485 = C48222 + C48483;
    const double C48547 = C48523 + C48544;
    const double C48591 = C48586 + C48587;
    const double C48635 = C48508 + C48633;
    const double C10097 =
        (2 * C48397 + C48230 * C48495 + ae * (C48145 * C48566 + C48567 * be) +
         be * (C48145 * C48568 + C48567 * ae) +
         C48145 * (ae * C48566 + be * C48568 +
                   C48145 * (2 * C48230 * C48493 +
                             C48230 * (C48493 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48305)))) /
        C47926;
    const double C9241 = (4 * (2 * C48327 + C48230 * C48334) +
                          C48230 * (3 * C48334 + C48230 * C48566)) /
                         C47918;
    const double C9345 = (C48145 * (3 * C48334 + C48230 * C48566) +
                          (3 * C48335 + C48230 * C48567) * be) /
                         C47918;
    const double C10095 =
        (2 * C48327 + C48230 * C48334 +
         C48145 * (C48145 * C48566 + C48567 * be) + C48145 * C48567 * be) /
        C47918;
    const double C10314 =
        (2 * (ae * C48334 + be * C48336 + C48145 * C48495) +
         ae * (C48334 + C48145 * C48583 + C48580 * be) +
         be * (C48336 + C48145 * C48584 + C48580 * ae) +
         C48145 * (C48495 + ae * C48583 + be * C48584 +
                   C48145 * (ae * C48560 + be * C48562 +
                             C48145 * (C48493 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48305)))) /
        C47926;
    const double C10311 = (2 * (C48145 * C48334 + C48335 * be) +
                           C48145 * (C48334 + C48145 * C48583 + C48580 * be) +
                           (C48335 + C48561 * C48148) * be) /
                          C47918;
    const double C48662 = C48398 + C48660;
    const double C48742 = C48738 + C48726;
    const double C48788 = C48785 + C48774;
    const double C48844 = C48145 * C48838;
    const double C121 = 5 * (3 * C48250 + C48151 * C48266) +
                        C48151 * (4 * C48266 + C48151 * C48293);
    const double C274 = C48230 * (4 * C48266 + C48151 * C48293);
    const double C414 = C48145 * (4 * C48266 + C48151 * C48293);
    const double C621 = 3 * C48250 + C48151 * C48266 + C48293 * C48305;
    const double C723 = C48145 * C48230 * C48293;
    const double C974 = 3 * C48250 + C48151 * C48266 + C48293 * C48148;
    const double C9493 = 5 * (3 * C48324 + C48230 * C48521) +
                         C48230 * (4 * C48521 + C48230 * C48548);
    const double C9586 = C48145 * (4 * C48521 + C48230 * C48548);
    const double C9831 = 3 * C48324 + C48230 * C48521 + C48548 * C48148;
    const double C18471 = 5 * (3 * C48433 + C48145 * C48697) +
                          C48145 * (4 * C48697 + C48145 * C48845);
    const double C49467 = C49427 / C47918;
    const double C49500 = C49471 / C47958;
    const double C49501 = C49473 + C49435;
    const double C3914 = C49435 - C49134 / C47928;
    const double C49470 = C49431 / C47918;
    const double C49487 = C49453 / C47918;
    const double C49507 = C49490 / C47958;
    const double C49508 = C49491 + C49457;
    const double C11296 = C49457 - C49282 / C47928;
    const double C49489 = C49454 / C47918;
    const double C11308 = C175 * C11294;
    const double C11301 = C174 * C11294;
    const double C11442 = C321 * C11294;
    const double C11579 = C461 * C11294;
    const double C47942 = C47916 * C47937;
    const double C48033 = C47937 / C47928;
    const double C2517 =
        (ae * -2 * C47925) / (C47926 * 2 * C47918) +
        (((C47916 * ((-4 * C47929) / C47918 - (C47916 * C47937) / C47918) *
           ae) /
              C47918 +
          2 * ((C47936 * ae) / C47918 - C47925 / C47928)) *
         ae) /
            C47918 -
        C47937 / C47928;
    const double C2521 = (-C47937 / C47918) / (4 * C47926);
    const double C5024 = (-C47937 / C47918) / (2 * C47918);
    const double C15181 = (-C47937 / C47918) / (4 * C47926);
    const double C17838 =
        (-C47937 / C47918) / (4 * C47926 * std::pow(C47958, 2));
    const double C20211 = (-C47937 / C47918) / (4 * C48026);
    const double C30828 = (-C47937 / C47918) / C47958;
    const double C33805 = (-C47937 / C47918) / (4 * C48026);
    const double C36633 = (-C47937 / C47918) / C48069;
    const double C47991 = C47983 / C47918;
    const double C2553 = C2518 * C418;
    const double C2551 = C2518 * C417;
    const double C2541 = C2518 * C420;
    const double C2539 = C2518 * C419;
    const double C2529 = C2518 * C422;
    const double C2527 = C2518 * C421;
    const double C2757 = C2518 * C727;
    const double C2755 = C2518 * C726;
    const double C2745 = C2518 * C729;
    const double C2743 = C2518 * C728;
    const double C2961 = C2518 * C978;
    const double C2959 = C2518 * C977;
    const double C2949 = C2518 * C980;
    const double C2947 = C2518 * C979;
    const double C10129 = C2518 * C1487;
    const double C10127 = C2518 * C1486;
    const double C10117 = C2518 * C1489;
    const double C10115 = C2518 * C1488;
    const double C10105 = C2518 * C725;
    const double C10103 = C2518 * C724;
    const double C10579 = C2518 * C1955;
    const double C10577 = C2518 * C1954;
    const double C10763 = C2518 * C2386;
    const double C10761 = C2518 * C2385;
    const double C10751 = C2518 * C2388;
    const double C10749 = C2518 * C2387;
    const double C25201 = C2518 * C2390;
    const double C25199 = C2518 * C2389;
    const double C5056 = C5021 * C131;
    const double C5054 = C5021 * C130;
    const double C5044 = C5021 * C129;
    const double C5042 = C5021 * C128;
    const double C5036 = C5021 * C127;
    const double C5034 = C5021 * C126;
    const double C5028 = C5021 * C125;
    const double C5026 = C5021 * C124;
    const double C5238 = C5021 * C282;
    const double C5236 = C5021 * C281;
    const double C5230 = C5021 * C280;
    const double C5228 = C5021 * C279;
    const double C5222 = C5021 * C278;
    const double C5220 = C5021 * C277;
    const double C5410 = C5021 * C422;
    const double C5408 = C5021 * C421;
    const double C5402 = C5021 * C420;
    const double C5400 = C5021 * C419;
    const double C5394 = C5021 * C418;
    const double C5392 = C5021 * C417;
    const double C6514 = C5021 * C625;
    const double C6512 = C5021 * C624;
    const double C6505 = C5021 * C627;
    const double C6503 = C5021 * C626;
    const double C6492 = C5021 * C284;
    const double C6490 = C5021 * C283;
    const double C6743 = C5021 * C727;
    const double C6741 = C5021 * C726;
    const double C6735 = C5021 * C729;
    const double C6733 = C5021 * C728;
    const double C7103 = C5021 * C623;
    const double C7101 = C5021 * C622;
    const double C7311 = C5021 * C725;
    const double C7309 = C5021 * C724;
    const double C12647 = C5021 * C1291;
    const double C12645 = C5021 * C1290;
    const double C12856 = C5021 * C1487;
    const double C12854 = C5021 * C1486;
    const double C13211 = C5021 * C1293;
    const double C13209 = C5021 * C1292;
    const double C13419 = C5021 * C1489;
    const double C13417 = C5021 * C1488;
    const double C14554 = C5021 * C1790;
    const double C14552 = C5021 * C1789;
    const double C14698 = C5021 * C1955;
    const double C14696 = C5021 * C1954;
    const double C15217 = C15176 * C129;
    const double C15215 = C15176 * C128;
    const double C15197 = C15176 * C127;
    const double C15195 = C15176 * C126;
    const double C15185 = C15176 * C125;
    const double C15183 = C15176 * C124;
    const double C15417 = C15176 * C282;
    const double C15415 = C15176 * C281;
    const double C15405 = C15176 * C280;
    const double C15403 = C15176 * C279;
    const double C15605 = C15176 * C422;
    const double C15603 = C15176 * C421;
    const double C15593 = C15176 * C420;
    const double C15591 = C15176 * C419;
    const double C16711 = C15176 * C625;
    const double C16709 = C15176 * C624;
    const double C16699 = C15176 * C623;
    const double C16697 = C15176 * C622;
    const double C16687 = C15176 * C284;
    const double C16685 = C15176 * C283;
    const double C17161 = C15176 * C1293;
    const double C17159 = C15176 * C1292;
    const double C17341 = C15176 * C725;
    const double C17339 = C15176 * C724;
    const double C17329 = C15176 * C1489;
    const double C17327 = C15176 * C1488;
    const double C19024 = C15176 * C727;
    const double C19022 = C15176 * C726;
    const double C15213 = C15178 * C418;
    const double C15211 = C15178 * C417;
    const double C15201 = C15178 * C420;
    const double C15199 = C15178 * C419;
    const double C15189 = C15178 * C422;
    const double C15187 = C15178 * C421;
    const double C15413 = C15178 * C727;
    const double C15411 = C15178 * C726;
    const double C15401 = C15178 * C729;
    const double C15399 = C15178 * C728;
    const double C15601 = C15178 * C978;
    const double C15599 = C15178 * C977;
    const double C15589 = C15178 * C980;
    const double C15587 = C15178 * C979;
    const double C16715 = C15178 * C1487;
    const double C16713 = C15178 * C1486;
    const double C16703 = C15178 * C1489;
    const double C16701 = C15178 * C1488;
    const double C16691 = C15178 * C725;
    const double C16689 = C15178 * C724;
    const double C17157 = C15178 * C1955;
    const double C17155 = C15178 * C1954;
    const double C17337 = C15178 * C2386;
    const double C17335 = C15178 * C2385;
    const double C17325 = C15178 * C2388;
    const double C17323 = C15178 * C2387;
    const double C19020 = C15178 * C2390;
    const double C19018 = C15178 * C2389;
    const double C30860 = C30825 * C131;
    const double C30858 = C30825 * C130;
    const double C30848 = C30825 * C129;
    const double C30846 = C30825 * C128;
    const double C30840 = C30825 * C127;
    const double C30838 = C30825 * C126;
    const double C30832 = C30825 * C125;
    const double C30830 = C30825 * C124;
    const double C31042 = C30825 * C282;
    const double C31040 = C30825 * C281;
    const double C31034 = C30825 * C280;
    const double C31032 = C30825 * C279;
    const double C31026 = C30825 * C278;
    const double C31024 = C30825 * C277;
    const double C31214 = C30825 * C422;
    const double C31212 = C30825 * C421;
    const double C31206 = C30825 * C420;
    const double C31204 = C30825 * C419;
    const double C31198 = C30825 * C418;
    const double C31196 = C30825 * C417;
    const double C32110 = C30825 * C627;
    const double C32108 = C30825 * C626;
    const double C32098 = C30825 * C625;
    const double C32096 = C30825 * C624;
    const double C32342 = C30825 * C1291;
    const double C32340 = C30825 * C1290;
    const double C32328 = C30825 * C623;
    const double C32326 = C30825 * C622;
    const double C32320 = C30825 * C284;
    const double C32318 = C30825 * C283;
    const double C32572 = C30825 * C727;
    const double C32570 = C30825 * C726;
    const double C32564 = C30825 * C1487;
    const double C32562 = C30825 * C1486;
    const double C32933 = C30825 * C1293;
    const double C32931 = C30825 * C1292;
    const double C33149 = C30825 * C725;
    const double C33147 = C30825 * C724;
    const double C33141 = C30825 * C1489;
    const double C33139 = C30825 * C1488;
    const double C35440 = C30825 * C729;
    const double C35438 = C30825 * C728;
    const double C41790 = C30825 * C1790;
    const double C41788 = C30825 * C1789;
    const double C41934 = C30825 * C1955;
    const double C41932 = C30825 * C1954;
    const double C48014 = C48009 / C47918;
    const double C20231 = C20210 * C2931;
    const double C20229 = C20210 * C2930;
    const double C20227 = C20210 * C2933;
    const double C20225 = C20210 * C2932;
    const double C20401 = C20210 * C3392;
    const double C20399 = C20210 * C3391;
    const double C21543 = C20210 * C3390;
    const double C21541 = C20210 * C3389;
    const double C21917 = C20210 * C10310;
    const double C21915 = C20210 * C10309;
    const double C33825 = C33804 * C2931;
    const double C33823 = C33804 * C2930;
    const double C33821 = C33804 * C2933;
    const double C33819 = C33804 * C2932;
    const double C33995 = C33804 * C3392;
    const double C33993 = C33804 * C3391;
    const double C42542 = C33804 * C3390;
    const double C42540 = C33804 * C3389;
    const double C42916 = C33804 * C10310;
    const double C42914 = C33804 * C10309;
    const double C49523 = C49492 + C49519;
    const double C20201 = C49510 - (C49326 * C49315) / C47918;
    const double C33830 = C49511 * C987;
    const double C33818 = C49511 * C986;
    const double C34000 = C49511 * C2399;
    const double C34158 = C49511 * C2939;
    const double C42539 = C49511 * C2397;
    const double C42921 = C49511 * C2398;
    const double C43079 = C49511 * C3395;
    const double C17827 = C49511 / C47958 - C49324 / C48071;
    const double C20236 = C20202 * C987;
    const double C20224 = C20202 * C986;
    const double C20406 = C20202 * C2399;
    const double C20564 = C20202 * C2939;
    const double C21540 = C20202 * C2397;
    const double C21922 = C20202 * C2398;
    const double C22080 = C20202 * C3395;
    const double C49520 = C49494 + C49510;
    const double C1135 = C1132 * C49483;
    const double C1319 = C1132 * C49503;
    const double C4061 = C1132 * C49281;
    const double C7971 = C1132 * C49483;
    const double C8130 = C1132 * C7963;
    const double C22707 = C1132 * C49281;
    const double C26402 = C1132 * C26395;
    const double C26561 = C1132 * C49284;
    const double C1530 = C1526 * C49503;
    const double C4200 = C1526 * C49281;
    const double C8282 = C1526 * C7963;
    const double C22843 = C1526 * C49281;
    const double C26713 = C1526 * C49284;
    const double C1126 = C1113 + C1114;
    const double C3925 = C3919 + C3920;
    const double C7978 = C7972 + C7973;
    const double C22571 = C22565 + C22566;
    const double C26409 = C26403 + C26404;
    const double C168 = C160 - C161;
    const double C310 = C294 - C295;
    const double C450 = C434 - C435;
    const double C1128 = C1119 - C1120;
    const double C4202 = C4193 - C4194;
    const double C9257 = C9255 - C9252;
    const double C11581 = C11580 - C11575;
    const double C3806 =
        (3 * (C48244 + C48145 * C48367 + C48363 * ae) +
         C48145 * (2 * C48367 + C48145 * C48465 + C48456 * ae) +
         (2 * C48363 + C48145 * C48456) * ae) /
        C47918;
    const double C3810 =
        (3 * (C48301 + ae * C48366 + be * C48367 + C48145 * C48459) +
         ae * (2 * C48366 + C48145 * C48464 + C48456 * be) +
         be * (2 * C48367 + C48145 * C48465 + C48456 * ae) +
         C48145 * (2 * C48459 + ae * C48464 + be * C48465 +
                   C48145 * (C48179 + ae * C48454 + be * C48457 +
                             C48145 * (ae * C48269 + be * C48275 +
                                       C48145 * C48151 * C48187)))) /
        C47926;
    const double C3805 =
        (3 * (C48242 + C48145 * C48366 + C48363 * be) +
         C48145 * (2 * C48366 + C48145 * C48464 + C48456 * be) +
         (2 * C48363 + C48145 * C48456) * be) /
        C47918;
    const double C9502 = C9498 - C9499;
    const double C9599 = C9591 - C9592;
    const double C11191 =
        (3 * (C48318 + C48145 * C48395 + C48391 * ae) +
         C48145 * (2 * C48395 + C48145 * C48615 + C48606 * ae) +
         (2 * C48391 + C48145 * C48606) * ae) /
        C47918;
    const double C11194 =
        (3 * (C48385 + ae * C48394 + be * C48395 + C48145 * C48609) +
         ae * (2 * C48394 + C48145 * C48614 + C48606 * be) +
         be * (2 * C48395 + C48145 * C48615 + C48606 * ae) +
         C48145 * (2 * C48609 + ae * C48614 + be * C48615 +
                   C48145 * (C48499 + ae * C48604 + be * C48607 +
                             C48145 * (ae * C48524 + be * C48530 +
                                       C48145 * C48230 * C48187)))) /
        C47926;
    const double C11190 =
        (3 * (C48316 + C48145 * C48394 + C48391 * be) +
         C48145 * (2 * C48394 + C48145 * C48614 + C48606 * be) +
         (2 * C48391 + C48145 * C48606) * be) /
        C47918;
    const double C48705 = C48678 + C48703;
    const double C48704 = C48672 + C48702;
    const double C48817 = C48797 + C48798;
    const double C177 = C172 + C159;
    const double C319 = C315 + C301;
    const double C459 = C455 + C441;
    const double C1133 = C1130 + C1118;
    const double C1524 = C1520 + C1504;
    const double C1334 = C1332 * C49483;
    const double C8129 = C1332 * C49483;
    const double C11304 = C1332 * C49458;
    const double C23668 = C1332 * C49458;
    const double C26560 = C1332 * C26395;
    const double C1529 = C1525 * C49483;
    const double C8281 = C1525 * C49483;
    const double C26712 = C1525 * C26395;
    const double C9258 = C9256 + C9249;
    const double C9604 = C9602 + C9598;
    const double C142 =
        (5 * (3 * C48177 + C48151 * C48191) +
         C48151 *
             (4 * C48191 +
              C48151 * (3 * C48189 +
                        C48151 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C287 = ((yP - yQ) * (3 * C48177 + C48151 * C48191)) / C47926;
    const double C292 =
        ((yP - yQ) *
         (4 * C48191 +
          C48151 * (3 * C48189 +
                    C48151 * (2 * C48151 * C48187 +
                              C48151 * (C48187 +
                                        (C48181 * C48182 +
                                         C48148 * bs[8] * std::pow(C48143, 8)) *
                                            C47917 * C48163))))) /
        C47926;
    const double C427 =
        (ae * (3 * (C48154 * C48153 * C48199 + C48203 * C48163) +
               C48151 *
                   (2 * C48151 * C48203 +
                    C48151 * (C48203 + C48171 * C48170 * C48199 * C48163))) +
         be * (3 * (C48154 * C48153 * C48200 + C48204 * C48163) +
               C48151 *
                   (2 * C48151 * C48204 +
                    C48151 * (C48204 + C48171 * C48170 * C48200 * C48163))) +
         C48145 * (3 * C48177 + C48151 * C48191)) /
        C47926;
    const double C432 =
        (ae * (4 * (2 * C48151 * C48203 + C48151 * C48222) +
               C48151 * (3 * C48222 +
                         C48151 * (2 * C48151 * C48218 +
                                   C48151 * (C48218 + C48182 * C48181 * C48199 *
                                                          C48163)))) +
         be * (4 * (2 * C48151 * C48204 + C48151 * C48223) +
               C48151 * (3 * C48223 +
                         C48151 * (2 * C48151 * C48219 +
                                   C48151 * (C48219 + C48182 * C48181 * C48200 *
                                                          C48163)))) +
         C48145 *
             (4 * C48191 +
              C48151 * (3 * C48189 +
                        C48151 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C635 = (2 * C48151 * C48167 + C48151 * C48177 +
                         C48191 * std::pow(yP - yQ, 2)) /
                        C47926;
    const double C636 =
        (3 * C48177 + C48151 * C48191 +
         (3 * C48189 +
          C48151 * (2 * C48151 * C48187 +
                    C48151 * (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163))) *
             std::pow(yP - yQ, 2)) /
        C47926;
    const double C737 = (ae * C48230 * (2 * C48151 * C48203 + C48151 * C48222) +
                         be * C48230 * (2 * C48151 * C48204 + C48151 * C48223) +
                         C48145 * C48230 * C48191) /
                        C47926;
    const double C988 =
        (2 * C48151 * C48167 + C48151 * C48177 +
         ae * (C48145 * C48263 + C48266 * be) +
         be * (C48145 * C48265 + C48266 * ae) +
         C48145 * (ae * C48263 + be * C48265 + C48145 * C48191)) /
        C47926;
    const double C1299 =
        (2 * C48230 * C48191 +
         C48230 * (C48191 +
                   (2 * C48151 * C48187 +
                    C48151 * (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163)) *
                       std::pow(C48230, 2))) /
        C47926;
    const double C1495 =
        (ae * (C48263 + C48292 * C48305) + be * (C48265 + C48294 * C48305) +
         C48145 * (C48191 +
                   (2 * C48151 * C48187 +
                    C48151 * (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163)) *
                       C48305)) /
        C47926;
    const double C2737 =
        (C48230 * C48191 + ae * (C48145 * C48349 + C48350 * be) +
         be * (C48145 * C48351 + C48350 * ae) +
         C48145 *
             (ae * C48349 + be * C48351 +
              C48145 * C48230 *
                  (2 * C48151 * C48187 +
                   C48151 * (C48187 + (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                          C47917 * C48163)))) /
        C47926;
    const double C1331 = C1327 + C1312;
    const double C1523 = C1519 + C1500;
    const double C48741 = C48730 + C48737;
    const double C9496 =
        (5 * (3 * C48491 + C48230 * C48504) +
         C48230 *
             (4 * C48504 +
              C48230 * (3 * C48502 +
                        C48230 * (2 * C48230 * C48187 +
                                  C48230 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48305))))) /
        C47926;
    const double C9589 =
        (ae * (4 * (2 * C48386 + C48230 * C48508) +
               C48230 * (3 * C48508 +
                         C48230 * (2 * C48230 * C48218 +
                                   C48230 * (C48218 + C48278 * C48305)))) +
         be * (4 * (2 * C48388 + C48230 * C48509) +
               C48230 * (3 * C48509 +
                         C48230 * (2 * C48230 * C48219 +
                                   C48230 * (C48219 + C48282 * C48305)))) +
         C48145 *
             (4 * C48504 +
              C48230 * (3 * C48502 +
                        C48230 * (2 * C48230 * C48187 +
                                  C48230 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48305))))) /
        C47926;
    const double C9836 =
        (2 * C48385 + C48230 * C48491 + ae * (C48145 * C48517 + C48521 * be) +
         be * (C48145 * C48519 + C48521 * ae) +
         C48145 * (ae * C48517 + be * C48519 + C48145 * C48504)) /
        C47926;
    const double C48784 = C48771 + C48778;
    const double C48843 = C48145 * C48837;
    const double C135 = (5 * (3 * C48251 + C48151 * C48265) +
                         C48151 * (4 * C48265 + C48151 * C48298)) /
                        C47918;
    const double C286 = (C48230 * (4 * C48265 + C48151 * C48298)) / C47918;
    const double C426 = (C48145 * (4 * C48265 + C48151 * C48298) +
                         (4 * C48266 + C48151 * C48293) * ae) /
                        C47918;
    const double C631 =
        (3 * C48251 + C48151 * C48265 + C48298 * C48305) / C47918;
    const double C733 =
        (C48145 * C48230 * C48298 + C48230 * C48293 * ae) / C47918;
    const double C984 =
        (3 * C48251 + C48151 * C48265 +
         C48145 * (C48145 * C48298 + C48293 * ae) + C48145 * C48293 * ae) /
        C47918;
    const double C2937 = (2 * (C48145 * C48265 + C48266 * ae) +
                          C48145 * (C48265 + C48145 * C48383 + C48379 * ae) +
                          (C48266 + C48287 * C48148) * ae) /
                         C47918;
    const double C48488 = C48486 + C48481;
    const double C9495 = (5 * (3 * C48325 + C48230 * C48519) +
                          C48230 * (4 * C48519 + C48230 * C48549)) /
                         C47918;
    const double C9588 = (C48145 * (4 * C48519 + C48230 * C48549) +
                          (4 * C48521 + C48230 * C48548) * ae) /
                         C47918;
    const double C9835 =
        (3 * C48325 + C48230 * C48519 +
         C48145 * (C48145 * C48549 + C48548 * ae) + C48145 * C48548 * ae) /
        C47918;
    const double C10742 = (2 * (C48145 * C48519 + C48521 * ae) +
                           C48145 * (C48519 + C48145 * C48592 + C48588 * ae) +
                           (C48521 + C48542 * C48148) * ae) /
                          C47918;
    const double C48638 = C48636 + C48631;
    const double C48665 = C48663 + C48659;
    const double C48745 = C48145 * C48743;
    const double C48791 = C48145 * C48789;
    const double C48849 = C48814 + C48846;
    const double C989 =
        (3 * C48177 + C48151 * C48191 + ae * (C48145 * C48297 + C48293 * be) +
         be * (C48145 * C48298 + C48293 * ae) +
         C48145 *
             (ae * C48297 + be * C48298 +
              C48145 * (3 * C48189 +
                        C48151 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C134 = (5 * (3 * C48249 + C48151 * C48263) +
                         C48151 * (4 * C48263 + C48151 * C48297)) /
                        C47918;
    const double C285 = (C48230 * (4 * C48263 + C48151 * C48297)) / C47918;
    const double C425 = (C48145 * (4 * C48263 + C48151 * C48297) +
                         (4 * C48266 + C48151 * C48293) * be) /
                        C47918;
    const double C630 =
        (3 * C48249 + C48151 * C48263 + C48297 * C48305) / C47918;
    const double C732 =
        (C48145 * C48230 * C48297 + C48230 * C48293 * be) / C47918;
    const double C983 =
        (3 * C48249 + C48151 * C48263 +
         C48145 * (C48145 * C48297 + C48293 * be) + C48145 * C48293 * be) /
        C47918;
    const double C2941 =
        (2 * (ae * C48263 + be * C48265 + C48145 * C48191) +
         ae * (C48263 + C48145 * C48382 + C48379 * be) +
         be * (C48265 + C48145 * C48383 + C48379 * ae) +
         C48145 *
             (C48191 + ae * C48382 + be * C48383 +
              C48145 * (ae * C48292 + be * C48294 +
                        C48145 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C2936 = (2 * (C48145 * C48263 + C48266 * be) +
                          C48145 * (C48263 + C48145 * C48382 + C48379 * be) +
                          (C48266 + C48287 * C48148) * be) /
                         C47918;
    const double C48487 = C48485 + C48478;
    const double C9837 =
        (3 * C48491 + C48230 * C48504 + ae * (C48145 * C48547 + C48548 * be) +
         be * (C48145 * C48549 + C48548 * ae) +
         C48145 *
             (ae * C48547 + be * C48549 +
              C48145 * (3 * C48502 +
                        C48230 * (2 * C48230 * C48187 +
                                  C48230 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48305))))) /
        C47926;
    const double C9494 = (5 * (3 * C48323 + C48230 * C48517) +
                          C48230 * (4 * C48517 + C48230 * C48547)) /
                         C47918;
    const double C9587 = (C48145 * (4 * C48517 + C48230 * C48547) +
                          (4 * C48521 + C48230 * C48548) * be) /
                         C47918;
    const double C9834 =
        (3 * C48323 + C48230 * C48517 +
         C48145 * (C48145 * C48547 + C48548 * be) + C48145 * C48548 * be) /
        C47918;
    const double C10743 =
        (2 * (ae * C48517 + be * C48519 + C48145 * C48504) +
         ae * (C48517 + C48145 * C48591 + C48588 * be) +
         be * (C48519 + C48145 * C48592 + C48588 * ae) +
         C48145 *
             (C48504 + ae * C48591 + be * C48592 +
              C48145 * (ae * C48541 + be * C48543 +
                        C48145 * (2 * C48230 * C48187 +
                                  C48230 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48305))))) /
        C47926;
    const double C10741 = (2 * (C48145 * C48517 + C48521 * be) +
                           C48145 * (C48517 + C48145 * C48591 + C48588 * be) +
                           (C48521 + C48542 * C48148) * be) /
                          C47918;
    const double C48637 = C48635 + C48628;
    const double C48664 = C48662 + C48656;
    const double C48744 = C48145 * C48742;
    const double C48790 = C48145 * C48788;
    const double C48848 = C48806 + C48844;
    const double C49521 = C49467 + C49513;
    const double C3913 = C49500 - (C49136 * C49119) / C47918;
    const double C106 = C49501 / C47958 - C49134 / C48071;
    const double C49514 = C49470 + C49500;
    const double C49522 = C49487 + C49517;
    const double C11295 = C49507 - (C49284 * C49273) / C47918;
    const double C23667 = C1132 * C49508;
    const double C23804 = C1332 * C49508;
    const double C23938 = C1525 * C49508;
    const double C9152 = C49508 / C47958 - C49282 / C48071;
    const double C11303 = C1132 * C11296;
    const double C11440 = C1332 * C11296;
    const double C11577 = C1525 * C11296;
    const double C49518 = C49489 + C49507;
    const double C48035 = C47942 / C47928;
    const double C48031 = C47942 / C47918;
    const double C2519 =
        (((-4 * C47929) / C47918 - C47942 / C47918) * ae) / C47928 +
        ((2 * ((0 * ae) / C47918 - C47929 / C47926) - C47942 / C47928) * ae) /
            C47918;
    const double C5022 =
        (((-4 * C47929) / C47918 - C47942 / C47918) * ae) / C47918;
    const double C15177 =
        (-(be * -2 * C47925) / C47926) / C47958 -
        ((2 * ((-C47925 / C47918) / C47958 - (C47936 * be) / C47918) -
          (C47916 * ((-4 * C47929) / C47918 - C47942 / C47918) * be) / C47918) *
         be) /
            C47918 -
        C47937 / C47928;
    const double C15179 =
        (-(((-4 * C47929) / C47918 - C47942 / C47918) * be) / C47918) / C47958 -
        ((2 * ((-C47932 / C47918) / C47958 - (0 * be) / C47918) -
          C47942 / C47928) *
         be) /
            C47918;
    const double C2556 = C2517 * C118;
    const double C2536 = C2517 * C117;
    const double C2524 = C2517 * C116;
    const double C2760 = C2517 * C272;
    const double C2748 = C2517 * C271;
    const double C2964 = C2517 * C412;
    const double C2952 = C2517 * C411;
    const double C10124 = C2517 * C618;
    const double C10112 = C2517 * C617;
    const double C10100 = C2517 * C273;
    const double C10582 = C2517 * C1286;
    const double C10766 = C2517 * C719;
    const double C10754 = C2517 * C1482;
    const double C25204 = C2517 * C720;
    const double C2548 = C2521 * C973;
    const double C2544 = C2521 * C972;
    const double C2532 = C2521 * C971;
    const double C2752 = C2521 * C2381;
    const double C2740 = C2521 * C2383;
    const double C2956 = C2521 * C2927;
    const double C2944 = C2521 * C2926;
    const double C10132 = C2521 * C2382;
    const double C10120 = C2521 * C2380;
    const double C10108 = C2521 * C2379;
    const double C10574 = C2521 * C9830;
    const double C10758 = C2521 * C3386;
    const double C10746 = C2521 * C10307;
    const double C25196 = C2521 * C3387;
    const double C5051 = C5024 * C409;
    const double C5047 = C5024 * C410;
    const double C5039 = C5024 * C411;
    const double C5031 = C5024 * C412;
    const double C5233 = C5024 * C720;
    const double C5225 = C5024 * C721;
    const double C5217 = C5024 * C722;
    const double C5405 = C5024 * C971;
    const double C5397 = C5024 * C972;
    const double C5389 = C5024 * C973;
    const double C6509 = C5024 * C1481;
    const double C6500 = C5024 * C1480;
    const double C6495 = C5024 * C719;
    const double C6738 = C5024 * C2381;
    const double C6730 = C5024 * C2383;
    const double C7098 = C5024 * C1482;
    const double C7306 = C5024 * C2379;
    const double C12642 = C5024 * C1952;
    const double C12851 = C5024 * C2382;
    const double C13206 = C5024 * C1951;
    const double C13414 = C5024 * C2380;
    const double C14549 = C5024 * C9341;
    const double C14693 = C5024 * C9830;
    const double C15208 = C15181 * C973;
    const double C15204 = C15181 * C972;
    const double C15192 = C15181 * C971;
    const double C15408 = C15181 * C2381;
    const double C15396 = C15181 * C2383;
    const double C15596 = C15181 * C2927;
    const double C15584 = C15181 * C2926;
    const double C16718 = C15181 * C2382;
    const double C16706 = C15181 * C2380;
    const double C16694 = C15181 * C2379;
    const double C17152 = C15181 * C9830;
    const double C17332 = C15181 * C3386;
    const double C17320 = C15181 * C10307;
    const double C19015 = C15181 * C3387;
    const double C20230 = C20211 * C2926;
    const double C20226 = C20211 * C2927;
    const double C20400 = C20211 * C3387;
    const double C20558 = C20211 * C3801;
    const double C21542 = C20211 * C3386;
    const double C21916 = C20211 * C10307;
    const double C22074 = C20211 * C11188;
    const double C30855 = C30828 * C409;
    const double C30851 = C30828 * C410;
    const double C30843 = C30828 * C411;
    const double C30835 = C30828 * C412;
    const double C31037 = C30828 * C720;
    const double C31029 = C30828 * C721;
    const double C31021 = C30828 * C722;
    const double C31209 = C30828 * C971;
    const double C31201 = C30828 * C972;
    const double C31193 = C30828 * C973;
    const double C32105 = C30828 * C1480;
    const double C32101 = C30828 * C1481;
    const double C32337 = C30828 * C1952;
    const double C32331 = C30828 * C1482;
    const double C32323 = C30828 * C719;
    const double C32567 = C30828 * C2381;
    const double C32559 = C30828 * C2382;
    const double C32928 = C30828 * C1951;
    const double C33144 = C30828 * C2379;
    const double C33136 = C30828 * C2380;
    const double C35435 = C30828 * C2383;
    const double C41785 = C30828 * C9341;
    const double C41929 = C30828 * C9830;
    const double C33824 = C33805 * C2926;
    const double C33820 = C33805 * C2927;
    const double C33994 = C33805 * C3387;
    const double C34152 = C33805 * C3801;
    const double C42541 = C33805 * C3386;
    const double C42915 = C33805 * C10307;
    const double C43073 = C33805 * C11188;
    const double C36660 = C36633 * C973;
    const double C36656 = C36633 * C972;
    const double C36644 = C36633 * C971;
    const double C36860 = C36633 * C2381;
    const double C36848 = C36633 * C2383;
    const double C37048 = C36633 * C2927;
    const double C37036 = C36633 * C2926;
    const double C38235 = C36633 * C2382;
    const double C38230 = C36633 * C2379;
    const double C38462 = C36633 * C3387;
    const double C38823 = C36633 * C2380;
    const double C39038 = C36633 * C3386;
    const double C47322 = C36633 * C9830;
    const double C47490 = C36633 * C10307;
    const double C47995 = C47991 - C47984;
    const double C33838 = C49523 * C138;
    const double C33810 = C49523 * C137;
    const double C34008 = C49523 * C290;
    const double C34166 = C49523 * C430;
    const double C42531 = C49523 * C291;
    const double C42929 = C49523 * C632;
    const double C43087 = C49523 * C734;
    const double C17824 =
        (C49516 + 2 * C49319) / C47958 - (C49523 * C49315) / C47918;
    const double C20240 = C20201 * C429;
    const double C20220 = C20201 * C430;
    const double C20410 = C20201 * C735;
    const double C20568 = C20201 * C986;
    const double C21536 = C20201 * C734;
    const double C21926 = C20201 * C1494;
    const double C22084 = C20201 * C2397;
    const double C33834 = C49520 * C429;
    const double C33814 = C49520 * C430;
    const double C34004 = C49520 * C735;
    const double C34162 = C49520 * C986;
    const double C42535 = C49520 * C734;
    const double C42925 = C49520 * C1494;
    const double C43083 = C49520 * C2397;
    const double C17825 =
        (C49505 + 2 * C49326 + C49523) / C47958 - (C49520 * C49315) / C47918;
    const double C17826 = (C49486 + C49323 / C47918 + C49520) / C47958 -
                          (C49511 * C49315) / C47918;
    const double C173 = C168 - C162;
    const double C314 = C310 - C296;
    const double C454 = C450 - C436;
    const double C1131 = C1128 - C1121;
    const double C4203 = C4202 - C4195;
    const double C9259 = C9257 + C9253;
    const double C11582 = C11581 + C11576;
    const double C20559 = C20210 * C3806;
    const double C34153 = C33804 * C3806;
    const double C20560 = C49465 * C3810;
    const double C34154 = C49465 * C3810;
    const double C20557 = C20210 * C3805;
    const double C34151 = C33804 * C3805;
    const double C9503 = C9502 - C9500;
    const double C9601 = C9599 - C9593;
    const double C22075 = C20210 * C11191;
    const double C43074 = C33804 * C11191;
    const double C22076 = C49465 * C11194;
    const double C43075 = C49465 * C11194;
    const double C22073 = C20210 * C11190;
    const double C43072 = C33804 * C11190;
    const double C48707 = C48705 + C48694;
    const double C48706 = C48704 + C48691;
    const double C48825 = C48817 + C48799;
    const double C182 = C177 * C49219;
    const double C3924 = C177 * C49449;
    const double C22570 = C177 * C22556;
    const double C323 = C319 * C49219;
    const double C1123 = C319 * C49503;
    const double C3922 = C319 * C49281;
    const double C4058 = C319 * C49449;
    const double C7976 = C319 * C7963;
    const double C22568 = C319 * C49281;
    const double C22704 = C319 * C22556;
    const double C26407 = C319 * C49284;
    const double C463 = C459 * C49219;
    const double C4197 = C459 * C49449;
    const double C22840 = C459 * C22556;
    const double C1136 = C1133 * C49483;
    const double C1313 = C1133 * C49503;
    const double C4059 = C1133 * C49281;
    const double C7974 = C1133 * C49483;
    const double C8127 = C1133 * C7963;
    const double C11306 = C1133 * C11296;
    const double C22705 = C1133 * C49281;
    const double C23670 = C1133 * C49508;
    const double C26405 = C1133 * C26395;
    const double C26558 = C1133 * C49284;
    const double C1528 = C1524 * C49503;
    const double C4198 = C1524 * C49281;
    const double C8279 = C1524 * C7963;
    const double C22841 = C1524 * C49281;
    const double C26710 = C1524 * C49284;
    const double C297 = C49236 * C287;
    const double C437 = C49236 * C427;
    const double C5053 = C49323 * C427;
    const double C30857 = C49323 * C427;
    const double C1122 = C49236 * C635;
    const double C4196 = C49236 * C737;
    const double C5219 = C49323 * C737;
    const double C31023 = C49323 * C737;
    const double C2550 = C49486 * C988;
    const double C5391 = C49323 * C988;
    const double C15210 = C49486 * C988;
    const double C31195 = C49323 * C988;
    const double C36662 = C36627 * C988;
    const double C1333 = C1331 * C49483;
    const double C8126 = C1331 * C49483;
    const double C11305 = C1331 * C49458;
    const double C23669 = C1331 * C49458;
    const double C26557 = C1331 * C26395;
    const double C1527 = C1523 * C49483;
    const double C8278 = C1523 * C49483;
    const double C26709 = C1523 * C26395;
    const double C10576 = C49486 * C9836;
    const double C14695 = C49323 * C9836;
    const double C17154 = C49486 * C9836;
    const double C41931 = C49323 * C9836;
    const double C47324 = C36627 * C9836;
    const double C3808 =
        (3 * (C48251 + C48145 * C48359 + C48355 * ae) +
         C48145 * (2 * C48359 + C48145 * C48488 + C48479 * ae) +
         (2 * C48355 + C48145 * C48479) * ae) /
        C47918;
    const double C11193 =
        (3 * (C48325 + C48145 * C48576 + C48572 * ae) +
         C48145 * (2 * C48576 + C48145 * C48638 + C48629 * ae) +
         (2 * C48572 + C48145 * C48629) * ae) /
        C47918;
    const double C17923 =
        (3 * (C48329 + C48145 * C48407 + C48403 * ae) +
         C48145 * (2 * C48407 + C48145 * C48665 + C48657 * ae) +
         (2 * C48403 + C48145 * C48657) * ae) /
        C47918;
    const double C48747 = C48720 + C48745;
    const double C48793 = C48760 + C48791;
    const double C48851 = C48849 + C48832;
    const double C3811 =
        (3 * (C48177 + ae * C48358 + be * C48359 + C48145 * C48482) +
         ae * (2 * C48358 + C48145 * C48487 + C48479 * be) +
         be * (2 * C48359 + C48145 * C48488 + C48479 * ae) +
         C48145 *
             (2 * C48482 + ae * C48487 + be * C48488 +
              C48145 * (C48189 + ae * C48477 + be * C48480 +
                        C48145 * (ae * C48286 + be * C48288 +
                                  C48145 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C3807 =
        (3 * (C48249 + C48145 * C48358 + C48355 * be) +
         C48145 * (2 * C48358 + C48145 * C48487 + C48479 * be) +
         (2 * C48355 + C48145 * C48479) * be) /
        C47918;
    const double C11195 =
        (3 * (C48491 + ae * C48575 + be * C48576 + C48145 * C48632) +
         ae * (2 * C48575 + C48145 * C48637 + C48629 * be) +
         be * (2 * C48576 + C48145 * C48638 + C48629 * ae) +
         C48145 *
             (2 * C48632 + ae * C48637 + be * C48638 +
              C48145 * (C48502 + ae * C48627 + be * C48630 +
                        C48145 * (ae * C48533 + be * C48537 +
                                  C48145 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48305))))) /
        C47926;
    const double C11192 =
        (3 * (C48323 + C48145 * C48575 + C48572 * be) +
         C48145 * (2 * C48575 + C48145 * C48637 + C48629 * be) +
         (2 * C48572 + C48145 * C48629) * be) /
        C47918;
    const double C17924 =
        (3 * (C48397 + ae * C48406 + be * C48407 + C48145 * C48654) +
         ae * (2 * C48406 + C48145 * C48664 + C48657 * be) +
         be * (2 * C48407 + C48145 * C48665 + C48657 * ae) +
         C48145 *
             (2 * C48654 + ae * C48664 + be * C48665 +
              C48145 * (C48642 + ae * C48655 + be * C48658 +
                        C48145 * (ae * C48643 + be * C48645 +
                                  C48145 * C48230 * C48151 *
                                      (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                      C47917)))) /
        C47926;
    const double C17922 =
        (3 * (C48327 + C48145 * C48406 + C48403 * be) +
         C48145 * (2 * C48406 + C48145 * C48664 + C48657 * be) +
         (2 * C48403 + C48145 * C48657) * be) /
        C47918;
    const double C48746 = C48714 + C48744;
    const double C48792 = C48756 + C48790;
    const double C48850 = C48848 + C48829;
    const double C103 =
        (C49512 + 2 * C49128) / C47958 - (C49521 * C49119) / C47918;
    const double C104 =
        (C49499 + 2 * C49136 + C49521) / C47958 - (C49514 * C49119) / C47918;
    const double C105 = (C49472 + C49133 / C47918 + C49514) / C47958 -
                        (C49501 * C49119) / C47918;
    const double C23672 = C175 * C49522;
    const double C23665 = C174 * C49522;
    const double C23806 = C321 * C49522;
    const double C23940 = C461 * C49522;
    const double C9149 =
        (C49515 + 2 * C49277) / C47958 - (C49522 * C49273) / C47918;
    const double C11307 = C320 * C11295;
    const double C11302 = C321 * C11295;
    const double C11441 = C1132 * C11295;
    const double C11578 = C1526 * C11295;
    const double C23671 = C320 * C49518;
    const double C23666 = C321 * C49518;
    const double C23805 = C1132 * C49518;
    const double C23939 = C1526 * C49518;
    const double C9150 =
        (C49503 + 2 * C49284 + C49522) / C47958 - (C49518 * C49273) / C47918;
    const double C9151 = (C49483 + C49281 / C47918 + C49518) / C47958 -
                         (C49508 * C49273) / C47918;
    const double C48039 = C48034 - C48035;
    const double C48043 = C48038 - C48031;
    const double C2552 = C2519 * C410;
    const double C2540 = C2519 * C411;
    const double C2528 = C2519 * C412;
    const double C2756 = C2519 * C720;
    const double C2744 = C2519 * C721;
    const double C2960 = C2519 * C971;
    const double C2948 = C2519 * C972;
    const double C10128 = C2519 * C1481;
    const double C10116 = C2519 * C1482;
    const double C10104 = C2519 * C719;
    const double C10578 = C2519 * C1951;
    const double C10762 = C2519 * C2379;
    const double C10750 = C2519 * C2380;
    const double C25200 = C2519 * C2381;
    const double C5055 = C5022 * C119;
    const double C5043 = C5022 * C118;
    const double C5035 = C5022 * C117;
    const double C5027 = C5022 * C116;
    const double C5237 = C5022 * C272;
    const double C5229 = C5022 * C271;
    const double C5221 = C5022 * C270;
    const double C5409 = C5022 * C412;
    const double C5401 = C5022 * C411;
    const double C5393 = C5022 * C410;
    const double C6513 = C5022 * C618;
    const double C6504 = C5022 * C619;
    const double C6491 = C5022 * C273;
    const double C6742 = C5022 * C720;
    const double C6734 = C5022 * C721;
    const double C7102 = C5022 * C617;
    const double C7310 = C5022 * C719;
    const double C12646 = C5022 * C1285;
    const double C12855 = C5022 * C1481;
    const double C13210 = C5022 * C1286;
    const double C13418 = C5022 * C1482;
    const double C14553 = C5022 * C1786;
    const double C14697 = C5022 * C1951;
    const double C15216 = C15177 * C118;
    const double C15196 = C15177 * C117;
    const double C15184 = C15177 * C116;
    const double C15416 = C15177 * C272;
    const double C15404 = C15177 * C271;
    const double C15604 = C15177 * C412;
    const double C15592 = C15177 * C411;
    const double C16710 = C15177 * C618;
    const double C16698 = C15177 * C617;
    const double C16686 = C15177 * C273;
    const double C17160 = C15177 * C1286;
    const double C17340 = C15177 * C719;
    const double C17328 = C15177 * C1482;
    const double C19023 = C15177 * C720;
    const double C15212 = C15179 * C410;
    const double C15200 = C15179 * C411;
    const double C15188 = C15179 * C412;
    const double C15412 = C15179 * C720;
    const double C15400 = C15179 * C721;
    const double C15600 = C15179 * C971;
    const double C15588 = C15179 * C972;
    const double C16714 = C15179 * C1481;
    const double C16702 = C15179 * C1482;
    const double C16690 = C15179 * C719;
    const double C17156 = C15179 * C1951;
    const double C17336 = C15179 * C2379;
    const double C17324 = C15179 * C2380;
    const double C19019 = C15179 * C2381;
    const double C2567 = C2555 - C2556;
    const double C2562 = C2535 - C2536;
    const double C2559 = C2523 - C2524;
    const double C2768 = C2759 - C2760;
    const double C2765 = C2747 - C2748;
    const double C2972 = C2963 - C2964;
    const double C2969 = C2951 - C2952;
    const double C10141 = C10123 - C10124;
    const double C10138 = C10111 - C10112;
    const double C10135 = C10099 - C10100;
    const double C10588 = C10581 - C10582;
    const double C10774 = C10765 - C10766;
    const double C10771 = C10753 - C10754;
    const double C25209 = C25203 - C25204;
    const double C2565 = C2547 - C2548;
    const double C2564 = C2543 - C2544;
    const double C2561 = C2531 - C2532;
    const double C2766 = C2751 - C2752;
    const double C2763 = C2739 - C2740;
    const double C2970 = C2955 - C2956;
    const double C2967 = C2943 - C2944;
    const double C10143 = C10131 - C10132;
    const double C10140 = C10119 - C10120;
    const double C10137 = C10107 - C10108;
    const double C10586 = C10573 - C10574;
    const double C10772 = C10757 - C10758;
    const double C10769 = C10745 - C10746;
    const double C25207 = C25195 - C25196;
    const double C5064 = C5050 - C5051;
    const double C5063 = C5046 - C5047;
    const double C5061 = C5038 - C5039;
    const double C5059 = C5030 - C5031;
    const double C5244 = C5232 - C5233;
    const double C5242 = C5224 - C5225;
    const double C5240 = C5216 - C5217;
    const double C5416 = C5404 - C5405;
    const double C5414 = C5396 - C5397;
    const double C5412 = C5388 - C5389;
    const double C6521 = C6508 - C6509;
    const double C6519 = C6499 - C6500;
    const double C6518 = C6494 - C6495;
    const double C6747 = C6737 - C6738;
    const double C6745 = C6729 - C6730;
    const double C7105 = C7097 - C7098;
    const double C7313 = C7305 - C7306;
    const double C12650 = C12641 - C12642;
    const double C12858 = C12850 - C12851;
    const double C13213 = C13205 - C13206;
    const double C13421 = C13413 - C13414;
    const double C14556 = C14548 - C14549;
    const double C14700 = C14692 - C14693;
    const double C15225 = C15207 - C15208;
    const double C15224 = C15203 - C15204;
    const double C15221 = C15191 - C15192;
    const double C15422 = C15407 - C15408;
    const double C15419 = C15395 - C15396;
    const double C15610 = C15595 - C15596;
    const double C15607 = C15583 - C15584;
    const double C16729 = C16717 - C16718;
    const double C16726 = C16705 - C16706;
    const double C16723 = C16693 - C16694;
    const double C17164 = C17151 - C17152;
    const double C17346 = C17331 - C17332;
    const double C17343 = C17319 - C17320;
    const double C19026 = C19014 - C19015;
    const double C20249 = C20229 - C20230;
    const double C20248 = C20225 - C20226;
    const double C20415 = C20399 - C20400;
    const double C21548 = C21541 - C21542;
    const double C21931 = C21915 - C21916;
    const double C30868 = C30854 - C30855;
    const double C30867 = C30850 - C30851;
    const double C30865 = C30842 - C30843;
    const double C30863 = C30834 - C30835;
    const double C31048 = C31036 - C31037;
    const double C31046 = C31028 - C31029;
    const double C31044 = C31020 - C31021;
    const double C31220 = C31208 - C31209;
    const double C31218 = C31200 - C31201;
    const double C31216 = C31192 - C31193;
    const double C32114 = C32104 - C32105;
    const double C32113 = C32100 - C32101;
    const double C32350 = C32336 - C32337;
    const double C32349 = C32330 - C32331;
    const double C32347 = C32322 - C32323;
    const double C32576 = C32566 - C32567;
    const double C32574 = C32558 - C32559;
    const double C32935 = C32927 - C32928;
    const double C33153 = C33143 - C33144;
    const double C33151 = C33135 - C33136;
    const double C35442 = C35434 - C35435;
    const double C41792 = C41784 - C41785;
    const double C41936 = C41928 - C41929;
    const double C33843 = C33823 - C33824;
    const double C33842 = C33819 - C33820;
    const double C34009 = C33993 - C33994;
    const double C42547 = C42540 - C42541;
    const double C42930 = C42914 - C42915;
    const double C36677 = C36659 - C36660;
    const double C36676 = C36655 - C36656;
    const double C36673 = C36643 - C36644;
    const double C36874 = C36859 - C36860;
    const double C36871 = C36847 - C36848;
    const double C37062 = C37047 - C37048;
    const double C37059 = C37035 - C37036;
    const double C38251 = C38234 - C38235;
    const double C38249 = C38229 - C38230;
    const double C38473 = C38461 - C38462;
    const double C38834 = C38822 - C38823;
    const double C39049 = C39037 - C39038;
    const double C47334 = C47321 - C47322;
    const double C47501 = C47489 - C47490;
    const double C48000 = C47995 / C47958;
    const double C47999 = C47916 * C47995;
    const double C48032 = 2 * C47995;
    const double C178 = C173 + C163;
    const double C11439 = C9259 * C49458;
    const double C23803 = C9259 * C49458;
    const double C11583 = C11582 * C49458;
    const double C23937 = C11582 * C49458;
    const double C20573 = C20557 - C20558;
    const double C34167 = C34151 - C34152;
    const double C9504 = C9503 + C9501;
    const double C9603 = C9601 + C9594;
    const double C22089 = C22073 - C22074;
    const double C43088 = C43072 - C43073;
    const double C18010 =
        (4 * (2 * C48375 + C48145 * C48442 + C48433 * ae) +
         C48145 * (3 * C48442 + C48145 * C48707 + C48697 * ae) +
         (3 * C48433 + C48145 * C48697) * ae) /
        C47918;
    const double C18013 =
        (4 * (2 * C48436 + ae * C48441 + be * C48442 + C48145 * C48699) +
         ae * (3 * C48441 + C48145 * C48706 + C48697 * be) +
         be * (3 * C48442 + C48145 * C48707 + C48697 * ae) +
         C48145 * (3 * C48699 + ae * C48706 + be * C48707 +
                   C48145 * (2 * C48689 + ae * C48700 + be * C48701 +
                             C48145 * (C48175 + ae * C48683 + be * C48686 +
                                       C48145 * (ae * C48218 + be * C48219 +
                                                 C48145 * C48187))))) /
        C47926;
    const double C18009 =
        (4 * (2 * C48374 + C48145 * C48441 + C48433 * be) +
         C48145 * (3 * C48441 + C48145 * C48706 + C48697 * be) +
         (3 * C48433 + C48145 * C48697) * be) /
        C47918;
    const double C48847 = C48825 + C48843;
    const double C3926 = C3921 + C3922;
    const double C22572 = C22567 + C22568;
    const double C1138 = C1126 + C1136;
    const double C7979 = C7978 + C7974;
    const double C26410 = C26409 + C26405;
    const double C318 = C314 + C297;
    const double C458 = C454 + C437;
    const double C1134 = C1131 + C1122;
    const double C4204 = C4203 + C4196;
    const double C48749 = C48747 + C48736;
    const double C48795 = C48793 + C48783;
    const double C48853 = C48145 * C48851;
    const double C48748 = C48746 + C48733;
    const double C48794 = C48792 + C48780;
    const double C48852 = C48145 * C48850;
    const double C48044 = C48039 * be;
    const double C48046 = C48043 * ae;
    const double C30826 = -(C48043 * be) / C47918;
    const double C2566 = C2551 - C2552;
    const double C2563 = C2539 - C2540;
    const double C2560 = C2527 - C2528;
    const double C2767 = C2755 - C2756;
    const double C2764 = C2743 - C2744;
    const double C2971 = C2959 - C2960;
    const double C2968 = C2947 - C2948;
    const double C10142 = C10127 - C10128;
    const double C10139 = C10115 - C10116;
    const double C10136 = C10103 - C10104;
    const double C10587 = C10577 - C10578;
    const double C10773 = C10761 - C10762;
    const double C10770 = C10749 - C10750;
    const double C25208 = C25199 - C25200;
    const double C5065 = C5054 - C5055;
    const double C5062 = C5042 - C5043;
    const double C5060 = C5034 - C5035;
    const double C5058 = C5026 - C5027;
    const double C5245 = C5236 - C5237;
    const double C5243 = C5228 - C5229;
    const double C5241 = C5220 - C5221;
    const double C5417 = C5408 - C5409;
    const double C5415 = C5400 - C5401;
    const double C5413 = C5392 - C5393;
    const double C6522 = C6512 - C6513;
    const double C6520 = C6503 - C6504;
    const double C6517 = C6490 - C6491;
    const double C6748 = C6741 - C6742;
    const double C6746 = C6733 - C6734;
    const double C7106 = C7101 - C7102;
    const double C7314 = C7309 - C7310;
    const double C12651 = C12645 - C12646;
    const double C12859 = C12854 - C12855;
    const double C13214 = C13209 - C13210;
    const double C13422 = C13417 - C13418;
    const double C14557 = C14552 - C14553;
    const double C14701 = C14696 - C14697;
    const double C15227 = C15215 - C15216;
    const double C15222 = C15195 - C15196;
    const double C15219 = C15183 - C15184;
    const double C15424 = C15415 - C15416;
    const double C15421 = C15403 - C15404;
    const double C15612 = C15603 - C15604;
    const double C15609 = C15591 - C15592;
    const double C16727 = C16709 - C16710;
    const double C16724 = C16697 - C16698;
    const double C16721 = C16685 - C16686;
    const double C17166 = C17159 - C17160;
    const double C17348 = C17339 - C17340;
    const double C17345 = C17327 - C17328;
    const double C19028 = C19022 - C19023;
    const double C15226 = C15211 - C15212;
    const double C15223 = C15199 - C15200;
    const double C15220 = C15187 - C15188;
    const double C15423 = C15411 - C15412;
    const double C15420 = C15399 - C15400;
    const double C15611 = C15599 - C15600;
    const double C15608 = C15587 - C15588;
    const double C16728 = C16713 - C16714;
    const double C16725 = C16701 - C16702;
    const double C16722 = C16689 - C16690;
    const double C17165 = C17155 - C17156;
    const double C17347 = C17335 - C17336;
    const double C17344 = C17323 - C17324;
    const double C19027 = C19018 - C19019;
    const double C2576 = C2567 - C2557;
    const double C2571 = C2562 - C2537;
    const double C2568 = C2559 - C2525;
    const double C2774 = C2768 - C2761;
    const double C2771 = C2765 - C2749;
    const double C2978 = C2972 - C2965;
    const double C2975 = C2969 - C2953;
    const double C10150 = C10141 - C10125;
    const double C10147 = C10138 - C10113;
    const double C10144 = C10135 - C10101;
    const double C10591 = C10588 - C10583;
    const double C10780 = C10774 - C10767;
    const double C10777 = C10771 - C10755;
    const double C25212 = C25209 - C25205;
    const double C2574 = C2565 - C2549;
    const double C2573 = C2564 - C2545;
    const double C2570 = C2561 - C2533;
    const double C2772 = C2766 - C2753;
    const double C2769 = C2763 - C2741;
    const double C2976 = C2970 - C2957;
    const double C2973 = C2967 - C2945;
    const double C10152 = C10143 - C10133;
    const double C10149 = C10140 - C10121;
    const double C10146 = C10137 - C10109;
    const double C10589 = C10586 - C10575;
    const double C10778 = C10772 - C10759;
    const double C10775 = C10769 - C10747;
    const double C25210 = C25207 - C25197;
    const double C5072 = C5064 - C5052;
    const double C5071 = C5063 - C5048;
    const double C5069 = C5061 - C5040;
    const double C5067 = C5059 - C5032;
    const double C5250 = C5244 - C5234;
    const double C5248 = C5242 - C5226;
    const double C5246 = C5240 - C5218;
    const double C5422 = C5416 - C5406;
    const double C5420 = C5414 - C5398;
    const double C5418 = C5412 - C5390;
    const double C6527 = C6521 - C6510;
    const double C6525 = C6519 - C6501;
    const double C6524 = C6518 - C6496;
    const double C6751 = C6747 - C6739;
    const double C6749 = C6745 - C6731;
    const double C7107 = C7105 - C7099;
    const double C7315 = C7313 - C7307;
    const double C12652 = C12650 - C12643;
    const double C12860 = C12858 - C12852;
    const double C13215 = C13213 - C13207;
    const double C13423 = C13421 - C13415;
    const double C14558 = C14556 - C14550;
    const double C14702 = C14700 - C14694;
    const double C15234 = C15225 - C15209;
    const double C15233 = C15224 - C15205;
    const double C15230 = C15221 - C15193;
    const double C15428 = C15422 - C15409;
    const double C15425 = C15419 - C15397;
    const double C15616 = C15610 - C15597;
    const double C15613 = C15607 - C15585;
    const double C16738 = C16729 - C16719;
    const double C16735 = C16726 - C16707;
    const double C16732 = C16723 - C16695;
    const double C17167 = C17164 - C17153;
    const double C17352 = C17346 - C17333;
    const double C17349 = C17343 - C17321;
    const double C19029 = C19026 - C19016;
    const double C20257 = C20249 - C20231;
    const double C20256 = C20248 - C20227;
    const double C20419 = C20415 - C20401;
    const double C21552 = C21548 - C21543;
    const double C21935 = C21931 - C21917;
    const double C30876 = C30868 - C30856;
    const double C30875 = C30867 - C30852;
    const double C30873 = C30865 - C30844;
    const double C30871 = C30863 - C30836;
    const double C31054 = C31048 - C31038;
    const double C31052 = C31046 - C31030;
    const double C31050 = C31044 - C31022;
    const double C31226 = C31220 - C31210;
    const double C31224 = C31218 - C31202;
    const double C31222 = C31216 - C31194;
    const double C32118 = C32114 - C32106;
    const double C32117 = C32113 - C32102;
    const double C32356 = C32350 - C32338;
    const double C32355 = C32349 - C32332;
    const double C32353 = C32347 - C32324;
    const double C32580 = C32576 - C32568;
    const double C32578 = C32574 - C32560;
    const double C32937 = C32935 - C32929;
    const double C33157 = C33153 - C33145;
    const double C33155 = C33151 - C33137;
    const double C35444 = C35442 - C35436;
    const double C41794 = C41792 - C41786;
    const double C41938 = C41936 - C41930;
    const double C33851 = C33843 - C33825;
    const double C33850 = C33842 - C33821;
    const double C34013 = C34009 - C33995;
    const double C42551 = C42547 - C42542;
    const double C42934 = C42930 - C42916;
    const double C36686 = C36677 - C36661;
    const double C36685 = C36676 - C36657;
    const double C36682 = C36673 - C36645;
    const double C36880 = C36874 - C36861;
    const double C36877 = C36871 - C36849;
    const double C37068 = C37062 - C37049;
    const double C37065 = C37059 - C37037;
    const double C38258 = C38251 - C38236;
    const double C38257 = C38249 - C38231;
    const double C38476 = C38473 - C38463;
    const double C38837 = C38834 - C38824;
    const double C39052 = C39049 - C39039;
    const double C47337 = C47334 - C47323;
    const double C47504 = C47501 - C47491;
    const double C48018 = C48000 - C48014;
    const double C48004 = C47999 + C49451;
    const double C183 = C178 * C49219;
    const double C20577 = C20573 - C20559;
    const double C34171 = C34167 - C34153;
    const double C22093 = C22089 - C22075;
    const double C43092 = C43088 - C43074;
    const double C322 = C318 * C49219;
    const double C3923 = C318 * C49281;
    const double C22569 = C318 * C49281;
    const double C462 = C458 * C49219;
    const double C1137 = C1134 * C49483;
    const double C4057 = C1134 * C49281;
    const double C7975 = C1134 * C49483;
    const double C22703 = C1134 * C49281;
    const double C26406 = C1134 * C26395;
    const double C4205 = C4204 * C49281;
    const double C22839 = C4204 * C49281;
    const double C18012 =
        (4 * (2 * C48367 + C48145 * C48465 + C48456 * ae) +
         C48145 * (3 * C48465 + C48145 * C48749 + C48739 * ae) +
         (3 * C48456 + C48145 * C48739) * ae) /
        C47918;
    const double C18243 =
        (4 * (2 * C48395 + C48145 * C48615 + C48606 * ae) +
         C48145 * (3 * C48615 + C48145 * C48795 + C48786 * ae) +
         (3 * C48606 + C48145 * C48786) * ae) /
        C47918;
    const double C48855 = C48813 + C48853;
    const double C18014 =
        (4 * (2 * C48459 + ae * C48464 + be * C48465 + C48145 * C48741) +
         ae * (3 * C48464 + C48145 * C48748 + C48739 * be) +
         be * (3 * C48465 + C48145 * C48749 + C48739 * ae) +
         C48145 * (3 * C48741 + ae * C48748 + be * C48749 +
                   C48145 * (2 * C48731 + ae * C48742 + be * C48743 +
                             C48145 * (C48493 + ae * C48725 + be * C48728 +
                                       C48145 * (ae * C48552 + be * C48556 +
                                                 C48145 * C48151 *
                                                     (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                     C47917))))) /
        C47926;
    const double C18011 =
        (4 * (2 * C48366 + C48145 * C48464 + C48456 * be) +
         C48145 * (3 * C48464 + C48145 * C48748 + C48739 * be) +
         (3 * C48456 + C48145 * C48739) * be) /
        C47918;
    const double C18244 =
        (4 * (2 * C48609 + ae * C48614 + be * C48615 + C48145 * C48784) +
         ae * (3 * C48614 + C48145 * C48794 + C48786 * be) +
         be * (3 * C48615 + C48145 * C48795 + C48786 * ae) +
         C48145 * (3 * C48784 + ae * C48794 + be * C48795 +
                   C48145 * (2 * C48772 + ae * C48788 + be * C48789 +
                             C48145 * (C48755 + ae * C48773 + be * C48776 +
                                       C48145 * (ae * C48757 + be * C48761 +
                                                 C48145 * C48230 *
                                                     (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                     C47917))))) /
        C47926;
    const double C18242 =
        (4 * (2 * C48394 + C48145 * C48614 + C48606 * be) +
         C48145 * (3 * C48614 + C48145 * C48794 + C48786 * be) +
         (3 * C48606 + C48145 * C48786) * be) /
        C47918;
    const double C48854 = C48805 + C48852;
    const double C48047 = C48044 / C47918;
    const double C48050 = C48046 / C47928;
    const double C48049 = C47916 * C48046;
    const double C30859 = C30826 * C119;
    const double C30847 = C30826 * C118;
    const double C30839 = C30826 * C117;
    const double C30831 = C30826 * C116;
    const double C31041 = C30826 * C272;
    const double C31033 = C30826 * C271;
    const double C31025 = C30826 * C270;
    const double C31213 = C30826 * C412;
    const double C31205 = C30826 * C411;
    const double C31197 = C30826 * C410;
    const double C32109 = C30826 * C619;
    const double C32097 = C30826 * C618;
    const double C32341 = C30826 * C1285;
    const double C32327 = C30826 * C617;
    const double C32319 = C30826 * C273;
    const double C32571 = C30826 * C720;
    const double C32563 = C30826 * C1481;
    const double C32932 = C30826 * C1286;
    const double C33148 = C30826 * C719;
    const double C33140 = C30826 * C1482;
    const double C35439 = C30826 * C721;
    const double C41789 = C30826 * C1786;
    const double C41933 = C30826 * C1951;
    const double C2575 = C2566 - C2553;
    const double C2572 = C2563 - C2541;
    const double C2569 = C2560 - C2529;
    const double C2773 = C2767 - C2757;
    const double C2770 = C2764 - C2745;
    const double C2977 = C2971 - C2961;
    const double C2974 = C2968 - C2949;
    const double C10151 = C10142 - C10129;
    const double C10148 = C10139 - C10117;
    const double C10145 = C10136 - C10105;
    const double C10590 = C10587 - C10579;
    const double C10779 = C10773 - C10763;
    const double C10776 = C10770 - C10751;
    const double C25211 = C25208 - C25201;
    const double C5073 = C5065 - C5056;
    const double C5070 = C5062 - C5044;
    const double C5068 = C5060 - C5036;
    const double C5066 = C5058 - C5028;
    const double C5251 = C5245 - C5238;
    const double C5249 = C5243 - C5230;
    const double C5247 = C5241 - C5222;
    const double C5423 = C5417 - C5410;
    const double C5421 = C5415 - C5402;
    const double C5419 = C5413 - C5394;
    const double C6528 = C6522 - C6514;
    const double C6526 = C6520 - C6505;
    const double C6523 = C6517 - C6492;
    const double C6752 = C6748 - C6743;
    const double C6750 = C6746 - C6735;
    const double C7108 = C7106 - C7103;
    const double C7316 = C7314 - C7311;
    const double C12653 = C12651 - C12647;
    const double C12861 = C12859 - C12856;
    const double C13216 = C13214 - C13211;
    const double C13424 = C13422 - C13419;
    const double C14559 = C14557 - C14554;
    const double C14703 = C14701 - C14698;
    const double C15236 = C15227 - C15217;
    const double C15231 = C15222 - C15197;
    const double C15228 = C15219 - C15185;
    const double C15430 = C15424 - C15417;
    const double C15427 = C15421 - C15405;
    const double C15618 = C15612 - C15605;
    const double C15615 = C15609 - C15593;
    const double C16736 = C16727 - C16711;
    const double C16733 = C16724 - C16699;
    const double C16730 = C16721 - C16687;
    const double C17169 = C17166 - C17161;
    const double C17354 = C17348 - C17341;
    const double C17351 = C17345 - C17329;
    const double C19031 = C19028 - C19024;
    const double C15235 = C15226 - C15213;
    const double C15232 = C15223 - C15201;
    const double C15229 = C15220 - C15189;
    const double C15429 = C15423 - C15413;
    const double C15426 = C15420 - C15401;
    const double C15617 = C15611 - C15601;
    const double C15614 = C15608 - C15589;
    const double C16737 = C16728 - C16715;
    const double C16734 = C16725 - C16703;
    const double C16731 = C16722 - C16691;
    const double C17168 = C17165 - C17157;
    const double C17353 = C17347 - C17337;
    const double C17350 = C17344 - C17325;
    const double C19030 = C19027 - C19020;
    const double C2585 = C2576 + C2558;
    const double C2580 = C2571 + C2538;
    const double C2577 = C2568 + C2526;
    const double C2780 = C2774 + C2762;
    const double C2777 = C2771 + C2750;
    const double C2984 = C2978 + C2966;
    const double C2981 = C2975 + C2954;
    const double C10159 = C10150 + C10126;
    const double C10156 = C10147 + C10114;
    const double C10153 = C10144 + C10102;
    const double C10594 = C10591 + C10584;
    const double C10786 = C10780 + C10768;
    const double C10783 = C10777 + C10756;
    const double C25215 = C25212 + C25206;
    const double C2583 = C2574 + C2550;
    const double C2582 = C2573 + C2546;
    const double C2579 = C2570 + C2534;
    const double C2778 = C2772 + C2754;
    const double C2775 = C2769 + C2742;
    const double C2982 = C2976 + C2958;
    const double C2979 = C2973 + C2946;
    const double C10161 = C10152 + C10134;
    const double C10158 = C10149 + C10122;
    const double C10155 = C10146 + C10110;
    const double C10592 = C10589 + C10576;
    const double C10784 = C10778 + C10760;
    const double C10781 = C10775 + C10748;
    const double C25213 = C25210 + C25198;
    const double C5080 = C5072 + C5053;
    const double C5079 = C5071 + C5049;
    const double C5077 = C5069 + C5041;
    const double C5075 = C5067 + C5033;
    const double C5256 = C5250 + C5235;
    const double C5254 = C5248 + C5227;
    const double C5252 = C5246 + C5219;
    const double C5428 = C5422 + C5407;
    const double C5426 = C5420 + C5399;
    const double C5424 = C5418 + C5391;
    const double C6533 = C6527 + C6511;
    const double C6531 = C6525 + C6502;
    const double C6530 = C6524 + C6497;
    const double C6755 = C6751 + C6740;
    const double C6753 = C6749 + C6732;
    const double C7109 = C7107 + C7100;
    const double C7317 = C7315 + C7308;
    const double C12654 = C12652 + C12644;
    const double C12862 = C12860 + C12853;
    const double C13217 = C13215 + C13208;
    const double C13425 = C13423 + C13416;
    const double C14560 = C14558 + C14551;
    const double C14704 = C14702 + C14695;
    const double C15243 = C15234 + C15210;
    const double C15242 = C15233 + C15206;
    const double C15239 = C15230 + C15194;
    const double C15434 = C15428 + C15410;
    const double C15431 = C15425 + C15398;
    const double C15622 = C15616 + C15598;
    const double C15619 = C15613 + C15586;
    const double C16747 = C16738 + C16720;
    const double C16744 = C16735 + C16708;
    const double C16741 = C16732 + C16696;
    const double C17170 = C17167 + C17154;
    const double C17358 = C17352 + C17334;
    const double C17355 = C17349 + C17322;
    const double C19032 = C19029 + C19017;
    const double C20265 = C20257 + C20232;
    const double C20264 = C20256 + C20228;
    const double C20423 = C20419 + C20402;
    const double C21556 = C21552 + C21544;
    const double C21939 = C21935 + C21918;
    const double C30884 = C30876 + C30857;
    const double C30883 = C30875 + C30853;
    const double C30881 = C30873 + C30845;
    const double C30879 = C30871 + C30837;
    const double C31060 = C31054 + C31039;
    const double C31058 = C31052 + C31031;
    const double C31056 = C31050 + C31023;
    const double C31232 = C31226 + C31211;
    const double C31230 = C31224 + C31203;
    const double C31228 = C31222 + C31195;
    const double C32122 = C32118 + C32107;
    const double C32121 = C32117 + C32103;
    const double C32362 = C32356 + C32339;
    const double C32361 = C32355 + C32333;
    const double C32359 = C32353 + C32325;
    const double C32584 = C32580 + C32569;
    const double C32582 = C32578 + C32561;
    const double C32939 = C32937 + C32930;
    const double C33161 = C33157 + C33146;
    const double C33159 = C33155 + C33138;
    const double C35446 = C35444 + C35437;
    const double C41796 = C41794 + C41787;
    const double C41940 = C41938 + C41931;
    const double C33859 = C33851 + C33826;
    const double C33858 = C33850 + C33822;
    const double C34017 = C34013 + C33996;
    const double C42555 = C42551 + C42543;
    const double C42938 = C42934 + C42917;
    const double C36695 = C36686 + C36662;
    const double C36694 = C36685 + C36658;
    const double C36691 = C36682 + C36646;
    const double C36886 = C36880 + C36862;
    const double C36883 = C36877 + C36850;
    const double C37074 = C37068 + C37050;
    const double C37071 = C37065 + C37038;
    const double C38264 = C38258 + C38237;
    const double C38263 = C38257 + C38232;
    const double C38479 = C38476 + C38464;
    const double C38840 = C38837 + C38825;
    const double C39055 = C39052 + C39040;
    const double C47340 = C47337 + C47324;
    const double C47507 = C47504 + C47492;
    const double C36665 = C48018 * C418;
    const double C36663 = C48018 * C417;
    const double C36653 = C48018 * C420;
    const double C36651 = C48018 * C419;
    const double C36641 = C48018 * C422;
    const double C36639 = C48018 * C421;
    const double C36865 = C48018 * C727;
    const double C36863 = C48018 * C726;
    const double C36853 = C48018 * C729;
    const double C36851 = C48018 * C728;
    const double C37053 = C48018 * C978;
    const double C37051 = C48018 * C977;
    const double C37041 = C48018 * C980;
    const double C37039 = C48018 * C979;
    const double C38240 = C48018 * C1487;
    const double C38238 = C48018 * C1486;
    const double C38227 = C48018 * C725;
    const double C38225 = C48018 * C724;
    const double C38467 = C48018 * C2390;
    const double C38465 = C48018 * C2389;
    const double C38828 = C48018 * C1489;
    const double C38826 = C48018 * C1488;
    const double C39043 = C48018 * C2386;
    const double C39041 = C48018 * C2385;
    const double C47327 = C48018 * C1955;
    const double C47325 = C48018 * C1954;
    const double C47495 = C48018 * C2388;
    const double C47493 = C48018 * C2387;
    const double C17835 =
        (C48018 / C47958 + ((C47916 * C48066 + C36627) * ae) / C47918) /
            C47958 -
        ((C47916 * (C48066 / C47958 + (0 * ae) / C47918) + C49465) * be) /
            C47918;
    const double C20208 =
        C48018 / C47958 - ((C47916 * C48066 + C36627) * be) / C47918;
    const double C33802 =
        C48018 / C47958 + ((C47916 * C48066 + C36627) * ae) / C47918;
    const double C48008 = C48004 * be;
    const double C20581 = C20577 + C20560;
    const double C34175 = C34171 + C34154;
    const double C22097 = C22093 + C22076;
    const double C43096 = C43092 + C43075;
    const double C48857 = C48855 + C48842;
    const double C48856 = C48854 + C48839;
    const double C48053 = C48050 - C48047;
    const double C48052 = C48049 / C47918;
    const double C30869 = C30858 - C30859;
    const double C30866 = C30846 - C30847;
    const double C30864 = C30838 - C30839;
    const double C30862 = C30830 - C30831;
    const double C31049 = C31040 - C31041;
    const double C31047 = C31032 - C31033;
    const double C31045 = C31024 - C31025;
    const double C31221 = C31212 - C31213;
    const double C31219 = C31204 - C31205;
    const double C31217 = C31196 - C31197;
    const double C32115 = C32108 - C32109;
    const double C32112 = C32096 - C32097;
    const double C32351 = C32340 - C32341;
    const double C32348 = C32326 - C32327;
    const double C32346 = C32318 - C32319;
    const double C32577 = C32570 - C32571;
    const double C32575 = C32562 - C32563;
    const double C32936 = C32931 - C32932;
    const double C33154 = C33147 - C33148;
    const double C33152 = C33139 - C33140;
    const double C35443 = C35438 - C35439;
    const double C41793 = C41788 - C41789;
    const double C41937 = C41932 - C41933;
    const double C2584 = C2575 + C2554;
    const double C2581 = C2572 + C2542;
    const double C2578 = C2569 + C2530;
    const double C2779 = C2773 + C2758;
    const double C2776 = C2770 + C2746;
    const double C2983 = C2977 + C2962;
    const double C2980 = C2974 + C2950;
    const double C10160 = C10151 + C10130;
    const double C10157 = C10148 + C10118;
    const double C10154 = C10145 + C10106;
    const double C10593 = C10590 + C10580;
    const double C10785 = C10779 + C10764;
    const double C10782 = C10776 + C10752;
    const double C25214 = C25211 + C25202;
    const double C5081 = C5073 + C5057;
    const double C5078 = C5070 + C5045;
    const double C5076 = C5068 + C5037;
    const double C5074 = C5066 + C5029;
    const double C5257 = C5251 + C5239;
    const double C5255 = C5249 + C5231;
    const double C5253 = C5247 + C5223;
    const double C5429 = C5423 + C5411;
    const double C5427 = C5421 + C5403;
    const double C5425 = C5419 + C5395;
    const double C6534 = C6528 + C6515;
    const double C6532 = C6526 + C6506;
    const double C6529 = C6523 + C6493;
    const double C6756 = C6752 + C6744;
    const double C6754 = C6750 + C6736;
    const double C7110 = C7108 + C7104;
    const double C7318 = C7316 + C7312;
    const double C12655 = C12653 + C12648;
    const double C12863 = C12861 + C12857;
    const double C13218 = C13216 + C13212;
    const double C13426 = C13424 + C13420;
    const double C14561 = C14559 + C14555;
    const double C14705 = C14703 + C14699;
    const double C15245 = C15236 + C15218;
    const double C15240 = C15231 + C15198;
    const double C15237 = C15228 + C15186;
    const double C15436 = C15430 + C15418;
    const double C15433 = C15427 + C15406;
    const double C15624 = C15618 + C15606;
    const double C15621 = C15615 + C15594;
    const double C16745 = C16736 + C16712;
    const double C16742 = C16733 + C16700;
    const double C16739 = C16730 + C16688;
    const double C17172 = C17169 + C17162;
    const double C17360 = C17354 + C17342;
    const double C17357 = C17351 + C17330;
    const double C19034 = C19031 + C19025;
    const double C15244 = C15235 + C15214;
    const double C15241 = C15232 + C15202;
    const double C15238 = C15229 + C15190;
    const double C15435 = C15429 + C15414;
    const double C15432 = C15426 + C15402;
    const double C15623 = C15617 + C15602;
    const double C15620 = C15614 + C15590;
    const double C16746 = C16737 + C16716;
    const double C16743 = C16734 + C16704;
    const double C16740 = C16731 + C16692;
    const double C17171 = C17168 + C17158;
    const double C17359 = C17353 + C17338;
    const double C17356 = C17350 + C17326;
    const double C19033 = C19030 + C19021;
    const double C20235 = C20208 * C980;
    const double C20233 = C20208 * C979;
    const double C20223 = C20208 * C978;
    const double C20221 = C20208 * C977;
    const double C20405 = C20208 * C2390;
    const double C20403 = C20208 * C2389;
    const double C20563 = C20208 * C2933;
    const double C20561 = C20208 * C2932;
    const double C21539 = C20208 * C2386;
    const double C21537 = C20208 * C2385;
    const double C21921 = C20208 * C2388;
    const double C21919 = C20208 * C2387;
    const double C22079 = C20208 * C3390;
    const double C22077 = C20208 * C3389;
    const double C33829 = C33802 * C980;
    const double C33827 = C33802 * C979;
    const double C33817 = C33802 * C978;
    const double C33815 = C33802 * C977;
    const double C33999 = C33802 * C2390;
    const double C33997 = C33802 * C2389;
    const double C34157 = C33802 * C2933;
    const double C34155 = C33802 * C2932;
    const double C42538 = C33802 * C2386;
    const double C42536 = C33802 * C2385;
    const double C42920 = C33802 * C2388;
    const double C42918 = C33802 * C2387;
    const double C43078 = C33802 * C3390;
    const double C43076 = C33802 * C3389;
    const double C48013 = C48008 / C47918;
    const double C18473 =
        (5 * (3 * C48442 + C48145 * C48707 + C48697 * ae) +
         C48145 * (4 * C48707 + C48145 * C48857 + C48845 * ae) +
         (4 * C48697 + C48145 * C48845) * ae) /
        C47918;
    const double C18474 =
        (5 * (3 * C48699 + ae * C48706 + be * C48707 + C48145 * C48847) +
         ae * (4 * C48706 + C48145 * C48856 + C48845 * be) +
         be * (4 * C48707 + C48145 * C48857 + C48845 * ae) +
         C48145 *
             (4 * C48847 + ae * C48856 + be * C48857 +
              C48145 *
                  (3 * C48837 + ae * C48850 + be * C48851 +
                   C48145 * (2 * C48827 + ae * C48838 + be * C48841 +
                             C48145 * (C48187 + ae * C48820 + be * C48823 +
                                       C48145 * (ae * C48278 + be * C48282 +
                                                 C48145 *
                                                     (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                     C47917)))))) /
        C47926;
    const double C18472 =
        (5 * (3 * C48441 + C48145 * C48706 + C48697 * be) +
         C48145 * (4 * C48706 + C48145 * C48856 + C48845 * be) +
         (4 * C48697 + C48145 * C48845) * be) /
        C47918;
    const double C36664 = C48053 * C410;
    const double C36652 = C48053 * C411;
    const double C36640 = C48053 * C412;
    const double C36864 = C48053 * C720;
    const double C36852 = C48053 * C721;
    const double C37052 = C48053 * C971;
    const double C37040 = C48053 * C972;
    const double C38239 = C48053 * C1481;
    const double C38226 = C48053 * C719;
    const double C38466 = C48053 * C2381;
    const double C38827 = C48053 * C1482;
    const double C39042 = C48053 * C2379;
    const double C47326 = C48053 * C1951;
    const double C47494 = C48053 * C2380;
    const double C17836 =
        (C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918) /
            C47958 -
        ((2 * (C48066 / C47958 + (0 * ae) / C47918) -
          C47942 / (C47918 * 4 * C48026)) *
         be) /
            C47918;
    const double C20209 =
        C48053 / C47958 - ((C48070 - C47942 / C48071) * be) / C47918;
    const double C33803 =
        C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918;
    const double C48055 = C48052 + C48032;
    const double C30877 = C30869 - C30860;
    const double C30874 = C30866 - C30848;
    const double C30872 = C30864 - C30840;
    const double C30870 = C30862 - C30832;
    const double C31055 = C31049 - C31042;
    const double C31053 = C31047 - C31034;
    const double C31051 = C31045 - C31026;
    const double C31227 = C31221 - C31214;
    const double C31225 = C31219 - C31206;
    const double C31223 = C31217 - C31198;
    const double C32119 = C32115 - C32110;
    const double C32116 = C32112 - C32098;
    const double C32357 = C32351 - C32342;
    const double C32354 = C32348 - C32328;
    const double C32352 = C32346 - C32320;
    const double C32581 = C32577 - C32572;
    const double C32579 = C32575 - C32564;
    const double C32938 = C32936 - C32933;
    const double C33158 = C33154 - C33149;
    const double C33156 = C33152 - C33141;
    const double C35445 = C35443 - C35440;
    const double C41795 = C41793 - C41790;
    const double C41939 = C41937 - C41934;
    const double C2586 = C2580 + C2581;
    const double C24998 = C2779 + C2780;
    const double C24997 = C2780 + C2779;
    const double C10572 = C10156 + C10157;
    const double C5083 = C5078 + C5079;
    const double C5082 = C5076 + C5077;
    const double C6516 = C5256 + C5257;
    const double C6498 = C5257 + C5256;
    const double C6293 = C5255 + C5254;
    const double C6507 = C5254 + C5255;
    const double C12649 = C6533 + C6534;
    const double C12640 = C6534 + C6533;
    const double C13204 = C7110 + C7109;
    const double C14547 = C13218 + C13217;
    const double C15246 = C15240 + C15241;
    const double C18817 = C15435 + C15436;
    const double C18816 = C15436 + C15435;
    const double C17150 = C16742 + C16743;
    const double C48017 = C48012 - C48013;
    const double C36678 = C36663 - C36664;
    const double C36675 = C36651 - C36652;
    const double C36672 = C36639 - C36640;
    const double C36875 = C36863 - C36864;
    const double C36872 = C36851 - C36852;
    const double C37063 = C37051 - C37052;
    const double C37060 = C37039 - C37040;
    const double C38252 = C38238 - C38239;
    const double C38248 = C38225 - C38226;
    const double C38474 = C38465 - C38466;
    const double C38835 = C38826 - C38827;
    const double C39050 = C39041 - C39042;
    const double C47335 = C47325 - C47326;
    const double C47502 = C47493 - C47494;
    const double C20234 = C20209 * C972;
    const double C20222 = C20209 * C971;
    const double C20404 = C20209 * C2381;
    const double C20562 = C20209 * C2927;
    const double C21538 = C20209 * C2379;
    const double C21920 = C20209 * C2380;
    const double C22078 = C20209 * C3386;
    const double C33828 = C33803 * C972;
    const double C33816 = C33803 * C971;
    const double C33998 = C33803 * C2381;
    const double C34156 = C33803 * C2927;
    const double C42537 = C33803 * C2379;
    const double C42919 = C33803 * C2380;
    const double C43077 = C33803 * C3386;
    const double C48057 = C48055 * be;
    const double C30885 = C30877 + C30861;
    const double C30882 = C30874 + C30849;
    const double C30880 = C30872 + C30841;
    const double C30878 = C30870 + C30833;
    const double C31061 = C31055 + C31043;
    const double C31059 = C31053 + C31035;
    const double C31057 = C31051 + C31027;
    const double C31233 = C31227 + C31215;
    const double C31231 = C31225 + C31207;
    const double C31229 = C31223 + C31199;
    const double C32123 = C32119 + C32111;
    const double C32120 = C32116 + C32099;
    const double C32363 = C32357 + C32343;
    const double C32360 = C32354 + C32329;
    const double C32358 = C32352 + C32321;
    const double C32585 = C32581 + C32573;
    const double C32583 = C32579 + C32565;
    const double C32940 = C32938 + C32934;
    const double C33162 = C33158 + C33150;
    const double C33160 = C33156 + C33142;
    const double C35447 = C35445 + C35441;
    const double C41797 = C41795 + C41791;
    const double C41941 = C41939 + C41935;
    const double C2587 = C2586 + C2582;
    const double C25000 = C2778 + C24998;
    const double C24999 = C24997 + C2778;
    const double C10585 = C10572 + C10158;
    const double C5085 = C5083 * C49219;
    const double C5084 = C5082 * C49219;
    const double C6292 = C5082 * C49449;
    const double C27665 = C5082 * C22556;
    const double C6294 = C6293 * C49281;
    const double C27666 = C6293 * C49281;
    const double C15247 = C15246 + C15242;
    const double C18819 = C15434 + C18817;
    const double C18818 = C18816 + C15434;
    const double C17163 = C17150 + C16744;
    const double C48021 = C48017 + C47996;
    const double C36687 = C36678 - C36665;
    const double C36684 = C36675 - C36653;
    const double C36681 = C36672 - C36641;
    const double C36881 = C36875 - C36865;
    const double C36878 = C36872 - C36853;
    const double C37069 = C37063 - C37053;
    const double C37066 = C37060 - C37041;
    const double C38259 = C38252 - C38240;
    const double C38256 = C38248 - C38227;
    const double C38477 = C38474 - C38467;
    const double C38838 = C38835 - C38828;
    const double C39053 = C39050 - C39043;
    const double C47338 = C47335 - C47327;
    const double C47505 = C47502 - C47495;
    const double C20250 = C20233 - C20234;
    const double C20247 = C20221 - C20222;
    const double C20416 = C20403 - C20404;
    const double C20574 = C20561 - C20562;
    const double C21547 = C21537 - C21538;
    const double C21932 = C21919 - C21920;
    const double C22090 = C22077 - C22078;
    const double C33844 = C33827 - C33828;
    const double C33841 = C33815 - C33816;
    const double C34010 = C33997 - C33998;
    const double C34168 = C34155 - C34156;
    const double C42546 = C42536 - C42537;
    const double C42931 = C42918 - C42919;
    const double C43089 = C43076 - C43077;
    const double C48058 = C48057 / C47918;
    const double C30887 = C30882 + C30883;
    const double C30886 = C30880 + C30881;
    const double C32345 = C31060 + C31061;
    const double C32334 = C31061 + C31060;
    const double C35042 = C31059 + C31058;
    const double C35239 = C31058 + C31059;
    const double C32344 = C32121 + C32120;
    const double C32335 = C32120 + C32121;
    const double C32926 = C32360 + C32361;
    const double C41783 = C32940 + C32939;
    const double C2588 = C2587 * C49219;
    const double C6295 = C6292 + C6294;
    const double C27667 = C27665 + C27666;
    const double C15248 = C15247 * C49219;
    const double C36669 = C48021 * C129;
    const double C36667 = C48021 * C128;
    const double C36649 = C48021 * C127;
    const double C36647 = C48021 * C126;
    const double C36637 = C48021 * C125;
    const double C36635 = C48021 * C124;
    const double C36869 = C48021 * C282;
    const double C36867 = C48021 * C281;
    const double C36857 = C48021 * C280;
    const double C36855 = C48021 * C279;
    const double C37057 = C48021 * C422;
    const double C37055 = C48021 * C421;
    const double C37045 = C48021 * C420;
    const double C37043 = C48021 * C419;
    const double C38244 = C48021 * C625;
    const double C38242 = C48021 * C624;
    const double C38223 = C48021 * C284;
    const double C38221 = C48021 * C283;
    const double C38471 = C48021 * C727;
    const double C38469 = C48021 * C726;
    const double C38832 = C48021 * C623;
    const double C38830 = C48021 * C622;
    const double C39047 = C48021 * C725;
    const double C39045 = C48021 * C724;
    const double C47331 = C48021 * C1293;
    const double C47329 = C48021 * C1292;
    const double C47499 = C48021 * C1489;
    const double C47497 = C48021 * C1488;
    const double C17829 =
        (((((0 - (C47916 * C47979) / C47918) * ae) / C47918 -
           (0 * be) / C47928 + (2 * C47980) / C47918) /
              C47958 -
          ((C47916 * C48015 + 0) * be) / C47918 + C47989 - C48003) /
             C47958 +
         ((C47916 * C48023 + 0) * ae) / C47918) /
            C47958 -
        ((C47916 * (C48023 / C47958 +
                    ((C47916 * C48021 + C49319) * ae) / C47918 + C48018) +
          C49523) *
         be) /
            C47918 +
        C48021 / C47958 + ((C47916 * C48018 + C49326) * ae) / C47918 +
        2 * (C47996 / C47958 - (0 * be) / C47918);
    const double C17831 =
        (C48023 / C47958 + ((C47916 * C48021 + C49319) * ae) / C47918 +
         C48018) /
            C47958 -
        ((C47916 * (C48021 / C47958 +
                    ((C47916 * C48018 + C49326) * ae) / C47918 + 2 * C48066) +
          C49520) *
         be) /
            C47918 +
        2 * (C48018 / C47958 + ((C47916 * C48066 + C36627) * ae) / C47918);
    const double C17833 =
        (C48021 / C47958 + ((C47916 * C48018 + C49326) * ae) / C47918 +
         C48070) /
            C47958 -
        ((C47916 *
              (C48018 / C47958 + ((C47916 * C48066 + C36627) * ae) / C47918) +
          C49511) *
         be) /
            C47918 +
        3 * (C48066 / C47958 + (0 * ae) / C47918);
    const double C20204 =
        C48023 / C47958 - ((C47916 * C48021 + C49319) * be) / C47918 + C48018;
    const double C20206 =
        C48021 / C47958 - ((C47916 * C48018 + C49326) * be) / C47918 + C48070;
    const double C33798 =
        C48023 / C47958 + ((C47916 * C48021 + C49319) * ae) / C47918 + C48018;
    const double C33800 =
        C48021 / C47958 + ((C47916 * C48018 + C49326) * ae) / C47918 + C48070;
    const double C36696 = C36687 + C36666;
    const double C36693 = C36684 + C36654;
    const double C36690 = C36681 + C36642;
    const double C36887 = C36881 + C36866;
    const double C36884 = C36878 + C36854;
    const double C37075 = C37069 + C37054;
    const double C37072 = C37066 + C37042;
    const double C38265 = C38259 + C38241;
    const double C38262 = C38256 + C38228;
    const double C38480 = C38477 + C38468;
    const double C38841 = C38838 + C38829;
    const double C39056 = C39053 + C39044;
    const double C47341 = C47338 + C47328;
    const double C47508 = C47505 + C47496;
    const double C20258 = C20250 - C20235;
    const double C20255 = C20247 - C20223;
    const double C20420 = C20416 - C20405;
    const double C20578 = C20574 - C20563;
    const double C21551 = C21547 - C21539;
    const double C21936 = C21932 - C21921;
    const double C22094 = C22090 - C22079;
    const double C33852 = C33844 - C33829;
    const double C33849 = C33841 - C33817;
    const double C34014 = C34010 - C33999;
    const double C34172 = C34168 - C34157;
    const double C42550 = C42546 - C42538;
    const double C42935 = C42931 - C42920;
    const double C43093 = C43089 - C43078;
    const double C48059 = C48042 - C48058;
    const double C30889 = C30887 * C49219;
    const double C30888 = C30886 * C49219;
    const double C35041 = C30886 * C49449;
    const double C39738 = C30886 * C22556;
    const double C35043 = C35042 * C49281;
    const double C39739 = C35042 * C49281;
    const double C20243 = C20204 * C127;
    const double C20241 = C20204 * C126;
    const double C20215 = C20204 * C125;
    const double C20213 = C20204 * C124;
    const double C20413 = C20204 * C282;
    const double C20411 = C20204 * C281;
    const double C20571 = C20204 * C422;
    const double C20569 = C20204 * C421;
    const double C21531 = C20204 * C284;
    const double C21529 = C20204 * C283;
    const double C21929 = C20204 * C623;
    const double C21927 = C20204 * C622;
    const double C22087 = C20204 * C725;
    const double C22085 = C20204 * C724;
    const double C20239 = C20206 * C420;
    const double C20237 = C20206 * C419;
    const double C20219 = C20206 * C422;
    const double C20217 = C20206 * C421;
    const double C20409 = C20206 * C727;
    const double C20407 = C20206 * C726;
    const double C20567 = C20206 * C978;
    const double C20565 = C20206 * C977;
    const double C21535 = C20206 * C725;
    const double C21533 = C20206 * C724;
    const double C21925 = C20206 * C1489;
    const double C21923 = C20206 * C1488;
    const double C22083 = C20206 * C2386;
    const double C22081 = C20206 * C2385;
    const double C33837 = C33798 * C127;
    const double C33835 = C33798 * C126;
    const double C33809 = C33798 * C125;
    const double C33807 = C33798 * C124;
    const double C34007 = C33798 * C282;
    const double C34005 = C33798 * C281;
    const double C34165 = C33798 * C422;
    const double C34163 = C33798 * C421;
    const double C42530 = C33798 * C284;
    const double C42528 = C33798 * C283;
    const double C42928 = C33798 * C623;
    const double C42926 = C33798 * C622;
    const double C43086 = C33798 * C725;
    const double C43084 = C33798 * C724;
    const double C33833 = C33800 * C420;
    const double C33831 = C33800 * C419;
    const double C33813 = C33800 * C422;
    const double C33811 = C33800 * C421;
    const double C34003 = C33800 * C727;
    const double C34001 = C33800 * C726;
    const double C34161 = C33800 * C978;
    const double C34159 = C33800 * C977;
    const double C42534 = C33800 * C725;
    const double C42532 = C33800 * C724;
    const double C42924 = C33800 * C1489;
    const double C42922 = C33800 * C1488;
    const double C43082 = C33800 * C2386;
    const double C43080 = C33800 * C2385;
    const double C20266 = C20258 + C20236;
    const double C20263 = C20255 + C20224;
    const double C20424 = C20420 + C20406;
    const double C20582 = C20578 + C20564;
    const double C21555 = C21551 + C21540;
    const double C21940 = C21936 + C21922;
    const double C22098 = C22094 + C22080;
    const double C33860 = C33852 + C33830;
    const double C33857 = C33849 + C33818;
    const double C34018 = C34014 + C34000;
    const double C34176 = C34172 + C34158;
    const double C42554 = C42550 + C42539;
    const double C42939 = C42935 + C42921;
    const double C43097 = C43093 + C43079;
    const double C48060 = C48059 - C48033;
    const double C35044 = C35041 + C35043;
    const double C39740 = C39738 + C39739;
    const double C36668 = C48060 * C118;
    const double C36648 = C48060 * C117;
    const double C36636 = C48060 * C116;
    const double C36868 = C48060 * C272;
    const double C36856 = C48060 * C271;
    const double C37056 = C48060 * C412;
    const double C37044 = C48060 * C411;
    const double C38243 = C48060 * C618;
    const double C38222 = C48060 * C273;
    const double C38470 = C48060 * C720;
    const double C38831 = C48060 * C617;
    const double C39046 = C48060 * C719;
    const double C47330 = C48060 * C1286;
    const double C47498 = C48060 * C1482;
    const double C17830 =
        (((ae * -2 * C47979) / C48026 -
          (((C47916 * C48036) / C47926 + 2 * C48015) * be) / C47918 -
          C48037 / C47926) /
             C47958 +
         ((C47916 * C48056 + 2 * C48023) * ae) / C47918) /
            C47958 -
        ((C47916 * (C48056 / C47958 +
                    ((C47916 * C48060 + 2 * C48021) * ae) / C47918 + C48053) +
          2 * (C48023 / C47958 + ((C47916 * C48021 + C49319) * ae) / C47918 +
               C48018)) *
         be) /
            C47918 +
        C48060 / C47958 + ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
        (-2 * C47937) / (C47918 * 4 * C47926);
    const double C17832 =
        (C48056 / C47958 + ((C47916 * C48060 + 2 * C48021) * ae) / C47918 +
         C48053) /
            C47958 -
        ((C47916 * (C48060 / C47958 +
                    ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
                    (-2 * C47937) / C48071) +
          2 * (C48021 / C47958 + ((C47916 * C48018 + C49326) * ae) / C47918 +
               C48070)) *
         be) /
            C47918 +
        2 * (C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918);
    const double C17834 =
        (C48060 / C47958 + ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
         (-2 * C47937) / C48071) /
            C47958 -
        ((C47916 *
              (C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918) +
          2 * (C48018 / C47958 + ((C47916 * C48066 + C36627) * ae) / C47918)) *
         be) /
            C47918 +
        (-3 * C47937) / (C47918 * 4 * C48026);
    const double C20205 = C48056 / C47958 -
                          ((C47916 * C48060 + 2 * C48021) * be) / C47918 +
                          C48053;
    const double C20207 = C48060 / C47958 -
                          ((C47916 * C48053 + 2 * C48018) * be) / C47918 +
                          (-2 * C47937) / C48071;
    const double C33799 = C48056 / C47958 +
                          ((C47916 * C48060 + 2 * C48021) * ae) / C47918 +
                          C48053;
    const double C33801 = C48060 / C47958 +
                          ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
                          (-2 * C47937) / C48071;
    const double C36679 = C36667 - C36668;
    const double C36674 = C36647 - C36648;
    const double C36671 = C36635 - C36636;
    const double C36876 = C36867 - C36868;
    const double C36873 = C36855 - C36856;
    const double C37064 = C37055 - C37056;
    const double C37061 = C37043 - C37044;
    const double C38253 = C38242 - C38243;
    const double C38247 = C38221 - C38222;
    const double C38475 = C38469 - C38470;
    const double C38836 = C38830 - C38831;
    const double C39051 = C39045 - C39046;
    const double C47336 = C47329 - C47330;
    const double C47503 = C47497 - C47498;
    const double C20242 = C20205 * C117;
    const double C20214 = C20205 * C116;
    const double C20412 = C20205 * C272;
    const double C20570 = C20205 * C412;
    const double C21530 = C20205 * C273;
    const double C21928 = C20205 * C617;
    const double C22086 = C20205 * C719;
    const double C20238 = C20207 * C411;
    const double C20218 = C20207 * C412;
    const double C20408 = C20207 * C720;
    const double C20566 = C20207 * C971;
    const double C21534 = C20207 * C719;
    const double C21924 = C20207 * C1482;
    const double C22082 = C20207 * C2379;
    const double C33836 = C33799 * C117;
    const double C33808 = C33799 * C116;
    const double C34006 = C33799 * C272;
    const double C34164 = C33799 * C412;
    const double C42529 = C33799 * C273;
    const double C42927 = C33799 * C617;
    const double C43085 = C33799 * C719;
    const double C33832 = C33801 * C411;
    const double C33812 = C33801 * C412;
    const double C34002 = C33801 * C720;
    const double C34160 = C33801 * C971;
    const double C42533 = C33801 * C719;
    const double C42923 = C33801 * C1482;
    const double C43081 = C33801 * C2379;
    const double C36688 = C36679 - C36669;
    const double C36683 = C36674 - C36649;
    const double C36680 = C36671 - C36637;
    const double C36882 = C36876 - C36869;
    const double C36879 = C36873 - C36857;
    const double C37070 = C37064 - C37057;
    const double C37067 = C37061 - C37045;
    const double C38260 = C38253 - C38244;
    const double C38255 = C38247 - C38223;
    const double C38478 = C38475 - C38471;
    const double C38839 = C38836 - C38832;
    const double C39054 = C39051 - C39047;
    const double C47339 = C47336 - C47331;
    const double C47506 = C47503 - C47499;
    const double C20252 = C20241 - C20242;
    const double C20245 = C20213 - C20214;
    const double C20418 = C20411 - C20412;
    const double C20576 = C20569 - C20570;
    const double C21545 = C21529 - C21530;
    const double C21934 = C21927 - C21928;
    const double C22092 = C22085 - C22086;
    const double C20251 = C20237 - C20238;
    const double C20246 = C20217 - C20218;
    const double C20417 = C20407 - C20408;
    const double C20575 = C20565 - C20566;
    const double C21546 = C21533 - C21534;
    const double C21933 = C21923 - C21924;
    const double C22091 = C22081 - C22082;
    const double C33846 = C33835 - C33836;
    const double C33839 = C33807 - C33808;
    const double C34012 = C34005 - C34006;
    const double C34170 = C34163 - C34164;
    const double C42544 = C42528 - C42529;
    const double C42933 = C42926 - C42927;
    const double C43091 = C43084 - C43085;
    const double C33845 = C33831 - C33832;
    const double C33840 = C33811 - C33812;
    const double C34011 = C34001 - C34002;
    const double C34169 = C34159 - C34160;
    const double C42545 = C42532 - C42533;
    const double C42932 = C42922 - C42923;
    const double C43090 = C43080 - C43081;
    const double C36697 = C36688 + C36670;
    const double C36692 = C36683 + C36650;
    const double C36689 = C36680 + C36638;
    const double C36888 = C36882 + C36870;
    const double C36885 = C36879 + C36858;
    const double C37076 = C37070 + C37058;
    const double C37073 = C37067 + C37046;
    const double C38266 = C38260 + C38245;
    const double C38261 = C38255 + C38224;
    const double C38481 = C38478 + C38472;
    const double C38842 = C38839 + C38833;
    const double C39057 = C39054 + C39048;
    const double C47342 = C47339 + C47332;
    const double C47509 = C47506 + C47500;
    const double C20260 = C20252 - C20243;
    const double C20253 = C20245 - C20215;
    const double C20422 = C20418 - C20413;
    const double C20580 = C20576 - C20571;
    const double C21549 = C21545 - C21531;
    const double C21938 = C21934 - C21929;
    const double C22096 = C22092 - C22087;
    const double C20259 = C20251 - C20239;
    const double C20254 = C20246 - C20219;
    const double C20421 = C20417 - C20409;
    const double C20579 = C20575 - C20567;
    const double C21550 = C21546 - C21535;
    const double C21937 = C21933 - C21925;
    const double C22095 = C22091 - C22083;
    const double C33854 = C33846 - C33837;
    const double C33847 = C33839 - C33809;
    const double C34016 = C34012 - C34007;
    const double C34174 = C34170 - C34165;
    const double C42548 = C42544 - C42530;
    const double C42937 = C42933 - C42928;
    const double C43095 = C43091 - C43086;
    const double C33853 = C33845 - C33833;
    const double C33848 = C33840 - C33813;
    const double C34015 = C34011 - C34003;
    const double C34173 = C34169 - C34161;
    const double C42549 = C42545 - C42534;
    const double C42936 = C42932 - C42924;
    const double C43094 = C43090 - C43082;
    const double C36698 = C36692 + C36693;
    const double C38246 = C36887 + C36888;
    const double C38233 = C36888 + C36887;
    const double C47320 = C38842 + C38841;
    const double C20268 = C20260 + C20244;
    const double C20261 = C20253 + C20216;
    const double C20426 = C20422 + C20414;
    const double C20584 = C20580 + C20572;
    const double C21553 = C21549 + C21532;
    const double C21942 = C21938 + C21930;
    const double C22100 = C22096 + C22088;
    const double C20267 = C20259 + C20240;
    const double C20262 = C20254 + C20220;
    const double C20425 = C20421 + C20410;
    const double C20583 = C20579 + C20568;
    const double C21554 = C21550 + C21536;
    const double C21941 = C21937 + C21926;
    const double C22099 = C22095 + C22084;
    const double C33862 = C33854 + C33838;
    const double C33855 = C33847 + C33810;
    const double C34020 = C34016 + C34008;
    const double C34178 = C34174 + C34166;
    const double C42552 = C42548 + C42531;
    const double C42941 = C42937 + C42929;
    const double C43099 = C43095 + C43087;
    const double C33861 = C33853 + C33834;
    const double C33856 = C33848 + C33814;
    const double C34019 = C34015 + C34004;
    const double C34177 = C34173 + C34162;
    const double C42553 = C42549 + C42535;
    const double C42940 = C42936 + C42925;
    const double C43098 = C43094 + C43083;
    const double C36699 = C36698 + C36694;
    const double C38254 = C36886 + C38246;
    const double C38250 = C38233 + C36886;
    const double C47333 = C47320 + C38840;
    const double C36700 = C36699 * C49219;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49277 +
            C1329 * C49284 + C1330 * C26395) *
               C49128 +
           (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
              C49207 * C49190 * C110 -
          ((C26406 + C26407 + C26408) * C26398 +
           (C26405 + C26404 + C26403) * C49136 +
           (C26402 + C26401 + C26400) * C49128) *
              C49207 * C49190 * C111 +
          (C26410 * C49128 + (C26408 + C26407 + C26406) * C49136 +
           (C177 * C49277 + C318 * C49284 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C26395) *
               C26398) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49277 +
             C1329 * C49284 + C1330 * C26395) *
                C49128 +
            (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
               C49207 * C265 -
           ((C26557 + C26558 + C26559) * C26398 +
            (C26560 + C26561 + C26562) * C49136 +
            (C1805 * C26395 + C1330 * C49284 + C1329 * C49277) * C49128) *
               C49207 * C49478) *
              C267 +
          (((C26562 + C26561 + C26560) * C49128 +
            (C26559 + C26558 + C26557) * C49136 +
            (C319 * C49277 + C1134 * C49284 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C26395) *
                C26398) *
               C49207 * C49478 -
           ((C26406 + C26407 + C26408) * C26398 +
            (C26405 + C26404 + C26403) * C49136 +
            (C26402 + C26401 + C26400) * C49128) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49277 +
             C1329 * C49284 + C1330 * C26395) *
                C49128 +
            (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
               C407 -
           ((C26709 + C26710 + C26711) * C26398 +
            (C26712 + C26713 + C26714) * C49136 +
            (C1976 * C26395 + C1977 * C49284 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49277) *
                C49128) *
               C49480) *
              C49190 * C267 +
          (((C26714 + C26713 + C26712) * C49128 +
            (C26711 + C26710 + C26709) * C49136 +
            (C459 * C49277 + C4204 * C49284 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C26395) *
                C26398) *
               C49480 -
           ((C26406 + C26407 + C26408) * C26398 +
            (C26405 + C26404 + C26403) * C49136 +
            (C26402 + C26401 + C26400) * C49128) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49277 +
             C1329 * C49284 + C1330 * C26395) *
                C49128 +
            (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
               C49207 * C547 -
           ((C26557 + C26558 + C26559) * C26398 +
            (C26560 + C26561 + C26562) * C49136 +
            (C1805 * C26395 + C1330 * C49284 + C1329 * C49277) * C49128) *
               C49207 * C49478) *
              C549 +
          (((C26562 + C26561 + C26560) * C49128 +
            (C26559 + C26558 + C26557) * C49136 +
            (C319 * C49277 + C1134 * C49284 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C26395) *
                C26398) *
               C49207 * C49478 -
           ((C26406 + C26407 + C26408) * C26398 +
            (C26405 + C26404 + C26403) * C49136 +
            (C26402 + C26401 + C26400) * C49128) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49277 +
            C1329 * C49284 + C1330 * C26395) *
               C49128 +
           (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
              C49207 * C613 -
          ((C26557 + C26558 + C26559) * C26398 +
           (C26560 + C26561 + C26562) * C49136 +
           (C1805 * C26395 + C1330 * C49284 + C1329 * C49277) * C49128) *
              C49207 * C614 +
          ((C1330 * C49277 + C1805 * C49284 + C9258 * C26395) * C49128 +
           (C1132 * C49277 + C1332 * C49284 + C9259 * C26395) * C49136 +
           (C1133 * C49277 + C1331 * C49284 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C26395) *
               C26398) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49277 +
             C1329 * C49284 + C1330 * C26395) *
                C49128 +
            (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
               C407 -
           ((C26709 + C26710 + C26711) * C26398 +
            (C26712 + C26713 + C26714) * C49136 +
            (C1976 * C26395 + C1977 * C49284 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49277) *
                C49128) *
               C49480) *
              C547 +
          (((C1977 * C49277 + C1976 * C49284 + C9604 * C26395) * C49128 +
            (C1526 * C49277 + C1525 * C49284 + C11582 * C26395) * C49136 +
            (C1524 * C49277 + C1523 * C49284 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C26395) *
                C26398) *
               C49480 -
           ((C26557 + C26558 + C26559) * C26398 +
            (C26560 + C26561 + C26562) * C49136 +
            (C1805 * C26395 + C1330 * C49284 + C1329 * C49277) * C49128) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49277 +
             C1329 * C49284 + C1330 * C26395) *
                C49128 +
            (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
               C821 -
           ((C26709 + C26710 + C26711) * C26398 +
            (C26712 + C26713 + C26714) * C49136 +
            (C1976 * C26395 + C1977 * C49284 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49277) *
                C49128) *
               C49480) *
              C49190 * C549 +
          (((C26714 + C26713 + C26712) * C49128 +
            (C26711 + C26710 + C26709) * C49136 +
            (C459 * C49277 + C4204 * C49284 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C26395) *
                C26398) *
               C49480 -
           ((C26406 + C26407 + C26408) * C26398 +
            (C26405 + C26404 + C26403) * C49136 +
            (C26402 + C26401 + C26400) * C49128) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49277 +
             C1329 * C49284 + C1330 * C26395) *
                C49128 +
            (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
               C821 -
           ((C26709 + C26710 + C26711) * C26398 +
            (C26712 + C26713 + C26714) * C49136 +
            (C1976 * C26395 + C1977 * C49284 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49277) *
                C49128) *
               C49480) *
              C265 +
          (((C1977 * C49277 + C1976 * C49284 + C9604 * C26395) * C49128 +
            (C1526 * C49277 + C1525 * C49284 + C11582 * C26395) * C49136 +
            (C1524 * C49277 + C1523 * C49284 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C26395) *
                C26398) *
               C49480 -
           ((C26557 + C26558 + C26559) * C26398 +
            (C26560 + C26561 + C26562) * C49136 +
            (C1805 * C26395 + C1330 * C49284 + C1329 * C49277) * C49128) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49277 +
            C1329 * C49284 + C1330 * C26395) *
               C49128 +
           (C26400 + C26401 + C26402) * C49136 + C26410 * C26398) *
              C967 -
          ((C26709 + C26710 + C26711) * C26398 +
           (C26712 + C26713 + C26714) * C49136 +
           (C1976 * C26395 + C1977 * C49284 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49277) *
               C49128) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49277 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49284 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C26395) *
               C49128 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49277 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49284 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C26395) *
               C49136 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49277 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49284 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C26395) *
               C26398) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49277 +
            (C6529 + C6530) * C49284 + C13204 * C26395) *
               C23662 +
           ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C6531 + C6532) * C26395 + C6507 * C49284 +
            (C5077 + C5076) * C49277) *
               C49133 +
           (C12649 * C26395 + C6516 * C49284 + (C5075 + C5074) * C49277) *
               C23662) *
              C49207 * C49190 * C111 +
          ((C5082 * C49277 + C6293 * C49284 + (C6532 + C6531) * C26395) *
               C23662 +
           (C5083 * C49277 + (C5253 + C5252) * C49284 +
            (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
             C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                C26395) *
               C49133) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49277 +
             (C6529 + C6530) * C49284 + C13204 * C26395) *
                C23662 +
            ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
                C49133) *
               C49207 * C265 -
           (((C12654 + C12655) * C26395 + C12649 * C49284 + C6516 * C49277) *
                C49133 +
            ((C13217 + C13218) * C26395 + (C7109 + C7110) * C49284 +
             (C6530 + C6529) * C49277) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C6498 * C49277 + C12640 * C49284 + (C12655 + C12654) * C26395) *
                C23662 +
            (C6293 * C49277 + (C6532 + C6531) * C49284 +
             (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
              C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                 C26395) *
                C49133) *
               C49207 * C49478 -
           (((C6531 + C6532) * C26395 + C6507 * C49284 +
             (C5077 + C5076) * C49277) *
                C49133 +
            (C12649 * C26395 + C6516 * C49284 + (C5075 + C5074) * C49277) *
                C23662) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49277 +
             (C6529 + C6530) * C49284 + C13204 * C26395) *
                C23662 +
            ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
                C49133) *
               C407 -
           (((C12862 + C12863) * C26395 + (C6755 + C6756) * C49284 +
             (C5428 + C5429) * C49277) *
                C49133 +
            ((C13425 + C13426) * C26395 + (C7317 + C7318) * C49284 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49277) *
                C23662) *
               C49480) *
              C49190 * C267 +
          ((((C5429 + C5428) * C49277 + (C6756 + C6755) * C49284 +
             (C12863 + C12862) * C26395) *
                C23662 +
            ((C5427 + C5426) * C49277 + (C6754 + C6753) * C49284 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C26395) *
                C49133) *
               C49480 -
           (((C6531 + C6532) * C26395 + C6507 * C49284 +
             (C5077 + C5076) * C49277) *
                C49133 +
            (C12649 * C26395 + C6516 * C49284 + (C5075 + C5074) * C49277) *
                C23662) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49277 +
             (C6529 + C6530) * C49284 + C13204 * C26395) *
                C23662 +
            ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
                C49133) *
               C49207 * C547 -
           (((C12654 + C12655) * C26395 + C12649 * C49284 + C6516 * C49277) *
                C49133 +
            ((C13217 + C13218) * C26395 + (C7109 + C7110) * C49284 +
             (C6530 + C6529) * C49277) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C6498 * C49277 + C12640 * C49284 + (C12655 + C12654) * C26395) *
                C23662 +
            (C6293 * C49277 + (C6532 + C6531) * C49284 +
             (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
              C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                 C26395) *
                C49133) *
               C49207 * C49478 -
           (((C6531 + C6532) * C26395 + C6507 * C49284 +
             (C5077 + C5076) * C49277) *
                C49133 +
            (C12649 * C26395 + C6516 * C49284 + (C5075 + C5074) * C49277) *
                C23662) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49277 +
            (C6529 + C6530) * C49284 + C13204 * C26395) *
               C23662 +
           ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
               C49133) *
              C49207 * C613 -
          (((C12654 + C12655) * C26395 + C12649 * C49284 + C6516 * C49277) *
               C49133 +
           ((C13217 + C13218) * C26395 + (C7109 + C7110) * C49284 +
            (C6530 + C6529) * C49277) *
               C23662) *
              C49207 * C614 +
          ((C13204 * C49277 + C14547 * C49284 + (C14561 + C14560) * C26395) *
               C23662 +
           (C12640 * C49277 + (C12655 + C12654) * C49284 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C26395) *
               C49133) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49277 +
             (C6529 + C6530) * C49284 + C13204 * C26395) *
                C23662 +
            ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
                C49133) *
               C407 -
           (((C12862 + C12863) * C26395 + (C6755 + C6756) * C49284 +
             (C5428 + C5429) * C49277) *
                C49133 +
            ((C13425 + C13426) * C26395 + (C7317 + C7318) * C49284 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49277) *
                C23662) *
               C49480) *
              C547 +
          ((((C7318 + C7317) * C49277 + (C13426 + C13425) * C49284 +
             (C14705 + C14704) * C26395) *
                C23662 +
            ((C6756 + C6755) * C49277 + (C12863 + C12862) * C49284 +
             (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
              C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
              C49323 * C10097) *
                 C26395) *
                C49133) *
               C49480 -
           (((C12654 + C12655) * C26395 + C12649 * C49284 + C6516 * C49277) *
                C49133 +
            ((C13217 + C13218) * C26395 + (C7109 + C7110) * C49284 +
             (C6530 + C6529) * C49277) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49277 +
             (C6529 + C6530) * C49284 + C13204 * C26395) *
                C23662 +
            ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
                C49133) *
               C821 -
           (((C12862 + C12863) * C26395 + (C6755 + C6756) * C49284 +
             (C5428 + C5429) * C49277) *
                C49133 +
            ((C13425 + C13426) * C26395 + (C7317 + C7318) * C49284 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49277) *
                C23662) *
               C49480) *
              C49190 * C549 +
          ((((C5429 + C5428) * C49277 + (C6756 + C6755) * C49284 +
             (C12863 + C12862) * C26395) *
                C23662 +
            ((C5427 + C5426) * C49277 + (C6754 + C6753) * C49284 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C26395) *
                C49133) *
               C49480 -
           (((C6531 + C6532) * C26395 + C6507 * C49284 +
             (C5077 + C5076) * C49277) *
                C49133 +
            (C12649 * C26395 + C6516 * C49284 + (C5075 + C5074) * C49277) *
                C23662) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49277 +
             (C6529 + C6530) * C49284 + C13204 * C26395) *
                C23662 +
            ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
                C49133) *
               C821 -
           (((C12862 + C12863) * C26395 + (C6755 + C6756) * C49284 +
             (C5428 + C5429) * C49277) *
                C49133 +
            ((C13425 + C13426) * C26395 + (C7317 + C7318) * C49284 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49277) *
                C23662) *
               C49480) *
              C265 +
          ((((C7318 + C7317) * C49277 + (C13426 + C13425) * C49284 +
             (C14705 + C14704) * C26395) *
                C23662 +
            ((C6756 + C6755) * C49277 + (C12863 + C12862) * C49284 +
             (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
              C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
              C49323 * C10097) *
                 C26395) *
                C49133) *
               C49480 -
           (((C12654 + C12655) * C26395 + C12649 * C49284 + C6516 * C49277) *
                C49133 +
            ((C13217 + C13218) * C26395 + (C7109 + C7110) * C49284 +
             (C6530 + C6529) * C49277) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49277 +
            (C6529 + C6530) * C49284 + C13204 * C26395) *
               C23662 +
           ((C5074 + C5075) * C49277 + C6498 * C49284 + C12640 * C26395) *
               C49133) *
              C967 -
          (((C12862 + C12863) * C26395 + (C6755 + C6756) * C49284 +
            (C5428 + C5429) * C49277) *
               C49133 +
           ((C13425 + C13426) * C26395 + (C7317 + C7318) * C49284 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49277) *
               C23662) *
              C968 +
          (((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
             C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
                C49277 +
            (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
             C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
                C49284 +
            (C5021 * C2387 - C5022 * C2380 - C5021 * C2388 + C49451 * C2398 +
             C5023 * C10309 - C5024 * C10307 - C5023 * C10310 +
             C49323 * C10313) *
                C26395) *
               C23662 +
           ((C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
             C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
                C49277 +
            (C5021 * C2389 - C5022 * C2381 - C5021 * C2390 + C49451 * C2399 +
             C5023 * C3391 - C5024 * C3387 - C5023 * C3392 + C49323 * C3396) *
                C49284 +
            (C5021 * C2391 - C5022 * C2382 - C5021 * C2392 + C49451 * C2400 +
             C5023 * C10311 - C5024 * C10308 - C5023 * C10312 +
             C49323 * C10314) *
                C26395) *
               C49133) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49522 +
            C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
               C23662 +
           (C23665 + C23666 + C23667 + C23668) * C49133) *
              C49207 * C49190 * C110 -
          ((C23669 + C23670 + C23671 + C23672) * C49133 +
           (C23668 + C23667 + C23666 + C23665) * C23662) *
              C49207 * C49190 * C111 +
          ((C23672 + C23671 + C23670 + C23669) * C23662 +
           (C176 * C49522 + C319 * C49518 + C1134 * C49508 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49458) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C22556 +
            C1329 * C49281) *
               C49521 +
           (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
              C49207 * C49190 * C110 -
          ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
           (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
              C49207 * C49190 * C111 +
          (C22571 * C49521 + C22572 * C49514 + (C22570 + C22569) * C49501 +
           (C178 * C22556 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) *
                C49281) *
               C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C22556 +
            (C10153 + C10154 + C10155) * C49281) *
               C23662 +
           ((C2577 + C2578 + C2579) * C22556 +
            (C2780 + C2779 + C2778) * C49281) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C2775 + C2776 + C2777) * C49281 +
            (C2582 + C2581 + C2580) * C22556) *
               C49133 +
           ((C2778 + C2779 + C2780) * C49281 +
            (C2579 + C2578 + C2577) * C22556) *
               C23662) *
              C49207 * C49190 * C111 +
          ((C2587 * C22556 + (C2777 + C2776 + C2775) * C49281) * C23662 +
           ((C2585 + C2584 + C2583) * C22556 +
            (C2516 * C277 - C2517 * C270 - C2516 * C278 + C49516 * C288 +
             C2518 * C730 - C2519 * C722 - C2518 * C731 + C49505 * C737 +
             C2520 * C2735 - C2521 * C2734 - C2520 * C2736 + C49486 * C2737) *
                C49281) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C49207 * C265 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C23806 + C23805 + C23804 + C23803) * C23662 +
            (C320 * C49522 + C1133 * C49518 + C1331 * C49508 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C49207 * C265 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C49207 * C49478) *
              C267 +
          (((C22708 + C22707) * C49521 + (C22706 + C22705) * C49514 +
            (C22704 + C22703) * C49501 +
            (C318 * C22556 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
              C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
              C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                 C22556 +
             (C10153 + C10154 + C10155) * C49281) *
                C23662 +
            ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
               C49207 * C265 -
           (((C10161 + C10160 + C10159) * C49281 + C25000 * C22556) * C49133 +
            ((C10158 + C10157 + C10156) * C49281 +
             (C10155 + C10154 + C10153) * C22556) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C24999 * C22556 + (C10159 + C10160 + C10161) * C49281) * C23662 +
            ((C2777 + C2776 + C2775) * C22556 +
             (C2516 * C626 - C2517 * C619 - C2516 * C627 + C49516 * C634 +
              C2518 * C1484 - C2519 * C1480 - C2518 * C1485 + C49505 * C1492 +
              C2520 * C2395 - C2521 * C2384 - C2520 * C2396 + C49486 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C2775 + C2776 + C2777) * C49281 +
             (C2582 + C2581 + C2580) * C22556) *
                C49133 +
            (C25000 * C49281 + (C2579 + C2578 + C2577) * C22556) * C23662) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C407 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C49190 * C267 +
          (((C23940 + C23939 + C23938 + C23937) * C23662 +
            (C460 * C49522 + C1524 * C49518 + C1523 * C49508 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C407 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C49190 * C267 +
          (((C22844 + C22843) * C49521 + (C22842 + C22841) * C49514 +
            (C22840 + C22839) * C49501 +
            (C458 * C22556 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
              C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
              C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                 C22556 +
             (C10153 + C10154 + C10155) * C49281) *
                C23662 +
            ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
               C407 -
           (((C25213 + C25214 + C25215) * C49281 +
             (C2982 + C2983 + C2984) * C22556) *
                C49133 +
            ((C10784 + C10785 + C10786) * C49281 +
             (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
              C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
              C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                 C22556) *
                C23662) *
               C49480) *
              C49190 * C267 +
          ((((C2984 + C2983 + C2982) * C22556 +
             (C25215 + C25214 + C25213) * C49281) *
                C23662 +
            ((C2981 + C2980 + C2979) * C22556 +
             (C2516 * C728 - C2517 * C721 - C2516 * C729 + C49516 * C736 +
              C2518 * C2393 - C2519 * C2383 - C2518 * C2394 + C49505 * C2401 +
              C2520 * C3393 - C2521 * C3388 - C2520 * C3394 + C49486 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C2775 + C2776 + C2777) * C49281 +
             (C2582 + C2581 + C2580) * C22556) *
                C49133 +
            (C25000 * C49281 + (C2579 + C2578 + C2577) * C22556) * C23662) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C49207 * C547 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C23806 + C23805 + C23804 + C23803) * C23662 +
            (C320 * C49522 + C1133 * C49518 + C1331 * C49508 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C49207 * C547 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C49207 * C49478) *
              C549 +
          (((C22708 + C22707) * C49521 + (C22706 + C22705) * C49514 +
            (C22704 + C22703) * C49501 +
            (C318 * C22556 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
              C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
              C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                 C22556 +
             (C10153 + C10154 + C10155) * C49281) *
                C23662 +
            ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
               C49207 * C547 -
           (((C10161 + C10160 + C10159) * C49281 + C25000 * C22556) * C49133 +
            ((C10158 + C10157 + C10156) * C49281 +
             (C10155 + C10154 + C10153) * C22556) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C24999 * C22556 + (C10159 + C10160 + C10161) * C49281) * C23662 +
            ((C2777 + C2776 + C2775) * C22556 +
             (C2516 * C626 - C2517 * C619 - C2516 * C627 + C49516 * C634 +
              C2518 * C1484 - C2519 * C1480 - C2518 * C1485 + C49505 * C1492 +
              C2520 * C2395 - C2521 * C2384 - C2520 * C2396 + C49486 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C2775 + C2776 + C2777) * C49281 +
             (C2582 + C2581 + C2580) * C22556) *
                C49133 +
            (C25000 * C49281 + (C2579 + C2578 + C2577) * C22556) * C23662) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49522 +
            C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
               C23662 +
           (C23665 + C23666 + C23667 + C23668) * C49133) *
              C49207 * C613 -
          ((C23803 + C23804 + C23805 + C23806) * C49133 +
           (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 + C1329 * C49522) *
               C23662) *
              C49207 * C614 +
          ((C1330 * C49522 + C1805 * C49518 + C9258 * C49508 + C9504 * C49458) *
               C23662 +
           (C1132 * C49522 + C1332 * C49518 + C9259 * C49508 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C49458) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C22556 +
            C1329 * C49281) *
               C49521 +
           (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
              C49207 * C613 -
          ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
           (C22707 + C22708) * C49514 +
           (C1330 * C49281 + C1329 * C22556) * C49521) *
              C49207 * C614 +
          ((C1330 * C22556 + C1805 * C49281) * C49521 +
           (C1132 * C22556 + C1332 * C49281) * C49514 +
           (C1133 * C22556 + C1331 * C49281) * C49501 +
           (C1134 * C22556 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49281) *
               C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C22556 +
            (C10153 + C10154 + C10155) * C49281) *
               C23662 +
           ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
              C49207 * C613 -
          (((C10161 + C10160 + C10159) * C49281 + C25000 * C22556) * C49133 +
           ((C10158 + C10157 + C10156) * C49281 +
            (C10155 + C10154 + C10153) * C22556) *
               C23662) *
              C49207 * C614 +
          ((C10585 * C22556 + (C10594 + C10593 + C10592) * C49281) * C23662 +
           ((C10159 + C10160 + C10161) * C22556 +
            (C2516 * C1290 - C2517 * C1285 - C2516 * C1291 + C49516 * C1297 +
             C2518 * C1956 - C2519 * C1952 - C2518 * C1957 + C49505 * C1961 +
             C2520 * C10095 - C2521 * C10094 - C2520 * C10096 +
             C49486 * C10097) *
                C49281) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C407 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C547 +
          (((C1977 * C49522 + C1976 * C49518 + C9604 * C49508 +
             C9603 * C49458) *
                C23662 +
            (C1526 * C49522 + C1525 * C49518 + C11582 * C49508 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C407 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C547 +
          (((C1977 * C22556 + C1976 * C49281) * C49521 +
            (C1526 * C22556 + C1525 * C49281) * C49514 +
            (C1524 * C22556 + C1523 * C49281) * C49501 +
            (C4204 * C22556 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
              C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
              C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                 C22556 +
             (C10153 + C10154 + C10155) * C49281) *
                C23662 +
            ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
               C407 -
           (((C25213 + C25214 + C25215) * C49281 +
             (C2982 + C2983 + C2984) * C22556) *
                C49133 +
            ((C10784 + C10785 + C10786) * C49281 +
             (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
              C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
              C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                 C22556) *
                C23662) *
               C49480) *
              C547 +
          ((((C10786 + C10785 + C10784) * C22556 +
             (C10783 + C10782 + C10781) * C49281) *
                C23662 +
            ((C25215 + C25214 + C25213) * C22556 +
             (C2516 * C1486 - C2517 * C1481 - C2516 * C1487 + C49516 * C1493 +
              C2518 * C2391 - C2519 * C2382 - C2518 * C2392 + C49505 * C2400 +
              C2520 * C10311 - C2521 * C10308 - C2520 * C10312 +
              C49486 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C10161 + C10160 + C10159) * C49281 + C25000 * C22556) * C49133 +
            ((C10158 + C10157 + C10156) * C49281 +
             (C10155 + C10154 + C10153) * C22556) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C821 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C49190 * C549 +
          (((C23940 + C23939 + C23938 + C23937) * C23662 +
            (C460 * C49522 + C1524 * C49518 + C1523 * C49508 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C821 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C49190 * C549 +
          (((C22844 + C22843) * C49521 + (C22842 + C22841) * C49514 +
            (C22840 + C22839) * C49501 +
            (C458 * C22556 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
              C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
              C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                 C22556 +
             (C10153 + C10154 + C10155) * C49281) *
                C23662 +
            ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
               C821 -
           (((C25213 + C25214 + C25215) * C49281 +
             (C2982 + C2983 + C2984) * C22556) *
                C49133 +
            ((C10784 + C10785 + C10786) * C49281 +
             (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
              C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
              C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                 C22556) *
                C23662) *
               C49480) *
              C49190 * C549 +
          ((((C2984 + C2983 + C2982) * C22556 +
             (C25215 + C25214 + C25213) * C49281) *
                C23662 +
            ((C2981 + C2980 + C2979) * C22556 +
             (C2516 * C728 - C2517 * C721 - C2516 * C729 + C49516 * C736 +
              C2518 * C2393 - C2519 * C2383 - C2518 * C2394 + C49505 * C2401 +
              C2520 * C3393 - C2521 * C3388 - C2520 * C3394 + C49486 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C2775 + C2776 + C2777) * C49281 +
             (C2582 + C2581 + C2580) * C22556) *
                C49133 +
            (C25000 * C49281 + (C2579 + C2578 + C2577) * C22556) * C23662) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C821 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C265 +
          (((C1977 * C49522 + C1976 * C49518 + C9604 * C49508 +
             C9603 * C49458) *
                C23662 +
            (C1526 * C49522 + C1525 * C49518 + C11582 * C49508 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C821 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C265 +
          (((C1977 * C22556 + C1976 * C49281) * C49521 +
            (C1526 * C22556 + C1525 * C49281) * C49514 +
            (C1524 * C22556 + C1523 * C49281) * C49501 +
            (C4204 * C22556 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
              C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
              C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                 C22556 +
             (C10153 + C10154 + C10155) * C49281) *
                C23662 +
            ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
               C821 -
           (((C25213 + C25214 + C25215) * C49281 +
             (C2982 + C2983 + C2984) * C22556) *
                C49133 +
            ((C10784 + C10785 + C10786) * C49281 +
             (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
              C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
              C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                 C22556) *
                C23662) *
               C49480) *
              C265 +
          ((((C10786 + C10785 + C10784) * C22556 +
             (C10783 + C10782 + C10781) * C49281) *
                C23662 +
            ((C25215 + C25214 + C25213) * C22556 +
             (C2516 * C1486 - C2517 * C1481 - C2516 * C1487 + C49516 * C1493 +
              C2518 * C2391 - C2519 * C2382 - C2518 * C2392 + C49505 * C2400 +
              C2520 * C10311 - C2521 * C10308 - C2520 * C10312 +
              C49486 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C10161 + C10160 + C10159) * C49281 + C25000 * C22556) * C49133 +
            ((C10158 + C10157 + C10156) * C49281 +
             (C10155 + C10154 + C10153) * C22556) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49522 +
            C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
               C23662 +
           (C23665 + C23666 + C23667 + C23668) * C49133) *
              C967 -
          ((C23937 + C23938 + C23939 + C23940) * C49133 +
           (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49522) *
               C23662) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49522 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49518 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49508 +
            (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
                C49458) *
               C23662 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49522 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49518 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49508 +
            (C113 * C10095 - C114 * C10094 - C113 * C10096 + C49236 * C10097) *
                C49458) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C22556 +
            C1329 * C49281) *
               C49521 +
           (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
              C967 -
          ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
           (C22843 + C22844) * C49514 +
           (C1977 * C49281 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C22556) *
               C49521) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C22556 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49281) *
               C49521 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C22556 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49281) *
               C49514 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C22556 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49281) *
               C49501 +
           ((C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C22556 +
            (C113 * C2735 - C114 * C2734 - C113 * C2736 + C49236 * C2737) *
                C49281) *
               C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C22556 +
            (C10153 + C10154 + C10155) * C49281) *
               C23662 +
           ((C2577 + C2578 + C2579) * C22556 + C24999 * C49281) * C49133) *
              C967 -
          (((C25213 + C25214 + C25215) * C49281 +
            (C2982 + C2983 + C2984) * C22556) *
               C49133 +
           ((C10784 + C10785 + C10786) * C49281 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C22556) *
               C23662) *
              C968 +
          (((C2516 * C975 - C2517 * C970 - C2516 * C976 + C49516 * C985 +
             C2518 * C2934 - C2519 * C2928 - C2518 * C2935 + C49505 * C2940 +
             C2520 * C3803 - C2521 * C3800 - C2520 * C3804 + C49486 * C3809) *
                C22556 +
            (C2516 * C2385 - C2517 * C2379 - C2516 * C2386 + C49516 * C2397 +
             C2518 * C3389 - C2519 * C3386 - C2518 * C3390 + C49505 * C3395 +
             C2520 * C11190 - C2521 * C11188 - C2520 * C11191 +
             C49486 * C11194) *
                C49281) *
               C23662 +
           ((C2516 * C977 - C2517 * C971 - C2516 * C978 + C49516 * C986 +
             C2518 * C2932 - C2519 * C2927 - C2518 * C2933 + C49505 * C2939 +
             C2520 * C3805 - C2521 * C3801 - C2520 * C3806 + C49486 * C3810) *
                C22556 +
            (C2516 * C2389 - C2517 * C2381 - C2516 * C2390 + C49516 * C2399 +
             C2518 * C3391 - C2519 * C3387 - C2518 * C3392 + C49505 * C3396 +
             C2520 * C17922 - C2521 * C17921 - C2520 * C17923 +
             C49486 * C17924) *
                C49281) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C22556 +
            (C6529 + C6530) * C49281) *
               C49128 +
           ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
           C27667 * C26398) *
              C49207 * C49190 * C110 -
          (((C5252 + C5253) * C49281 + (C5079 + C5078) * C22556) * C26398 +
           (C6507 * C49281 + (C5077 + C5076) * C22556) * C49136 +
           (C6516 * C49281 + (C5075 + C5074) * C22556) * C49128) *
              C49207 * C49190 * C111 +
          (C27667 * C49128 +
           (C5083 * C22556 + (C5253 + C5252) * C49281) * C49136 +
           ((C5081 + C5080) * C22556 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49281) *
               C26398) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C22556 +
             (C6529 + C6530) * C49281) *
                C49128 +
            ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
            C27667 * C26398) *
               C49207 * C265 -
           (((C6531 + C6532) * C49281 + C6507 * C22556) * C26398 +
            (C12649 * C49281 + C6516 * C22556) * C49136 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C22556) * C49128) *
               C49207 * C49478) *
              C267 +
          (((C6498 * C22556 + C12640 * C49281) * C49128 +
            (C6293 * C22556 + (C6532 + C6531) * C49281) * C49136 +
            ((C5253 + C5252) * C22556 +
             (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
              C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                 C49281) *
                C26398) *
               C49207 * C49478 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C22556) * C26398 +
            (C6507 * C49281 + (C5077 + C5076) * C22556) * C49136 +
            (C6516 * C49281 + (C5075 + C5074) * C22556) * C49128) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C22556 +
             (C6529 + C6530) * C49281) *
                C49128 +
            ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
            C27667 * C26398) *
               C407 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C22556) * C26398 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C22556) * C49136 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C22556) *
                C49128) *
               C49480) *
              C49190 * C267 +
          ((((C5429 + C5428) * C22556 + (C6756 + C6755) * C49281) * C49128 +
            ((C5427 + C5426) * C22556 + (C6754 + C6753) * C49281) * C49136 +
            ((C5425 + C5424) * C22556 +
             (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
              C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                 C49281) *
                C26398) *
               C49480 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C22556) * C26398 +
            (C6507 * C49281 + (C5077 + C5076) * C22556) * C49136 +
            (C6516 * C49281 + (C5075 + C5074) * C22556) * C49128) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C22556 +
             (C6529 + C6530) * C49281) *
                C49128 +
            ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
            C27667 * C26398) *
               C49207 * C547 -
           (((C6531 + C6532) * C49281 + C6507 * C22556) * C26398 +
            (C12649 * C49281 + C6516 * C22556) * C49136 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C22556) * C49128) *
               C49207 * C49478) *
              C549 +
          (((C6498 * C22556 + C12640 * C49281) * C49128 +
            (C6293 * C22556 + (C6532 + C6531) * C49281) * C49136 +
            ((C5253 + C5252) * C22556 +
             (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
              C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                 C49281) *
                C26398) *
               C49207 * C49478 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C22556) * C26398 +
            (C6507 * C49281 + (C5077 + C5076) * C22556) * C49136 +
            (C6516 * C49281 + (C5075 + C5074) * C22556) * C49128) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C22556 +
            (C6529 + C6530) * C49281) *
               C49128 +
           ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
           C27667 * C26398) *
              C49207 * C613 -
          (((C6531 + C6532) * C49281 + C6507 * C22556) * C26398 +
           (C12649 * C49281 + C6516 * C22556) * C49136 +
           ((C7109 + C7110) * C49281 + (C6530 + C6529) * C22556) * C49128) *
              C49207 * C614 +
          ((C13204 * C22556 + C14547 * C49281) * C49128 +
           (C12640 * C22556 + (C12655 + C12654) * C49281) * C49136 +
           ((C6532 + C6531) * C22556 +
            (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
             C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                C49281) *
               C26398) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C22556 +
             (C6529 + C6530) * C49281) *
                C49128 +
            ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
            C27667 * C26398) *
               C407 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C22556) * C26398 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C22556) * C49136 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C22556) *
                C49128) *
               C49480) *
              C547 +
          ((((C7318 + C7317) * C22556 + (C13426 + C13425) * C49281) * C49128 +
            ((C6756 + C6755) * C22556 + (C12863 + C12862) * C49281) * C49136 +
            ((C6754 + C6753) * C22556 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49281) *
                C26398) *
               C49480 -
           (((C6531 + C6532) * C49281 + C6507 * C22556) * C26398 +
            (C12649 * C49281 + C6516 * C22556) * C49136 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C22556) * C49128) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C22556 +
             (C6529 + C6530) * C49281) *
                C49128 +
            ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
            C27667 * C26398) *
               C821 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C22556) * C26398 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C22556) * C49136 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C22556) *
                C49128) *
               C49480) *
              C49190 * C549 +
          ((((C5429 + C5428) * C22556 + (C6756 + C6755) * C49281) * C49128 +
            ((C5427 + C5426) * C22556 + (C6754 + C6753) * C49281) * C49136 +
            ((C5425 + C5424) * C22556 +
             (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
              C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                 C49281) *
                C26398) *
               C49480 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C22556) * C26398 +
            (C6507 * C49281 + (C5077 + C5076) * C22556) * C49136 +
            (C6516 * C49281 + (C5075 + C5074) * C22556) * C49128) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C22556 +
             (C6529 + C6530) * C49281) *
                C49128 +
            ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
            C27667 * C26398) *
               C821 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C22556) * C26398 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C22556) * C49136 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C22556) *
                C49128) *
               C49480) *
              C265 +
          ((((C7318 + C7317) * C22556 + (C13426 + C13425) * C49281) * C49128 +
            ((C6756 + C6755) * C22556 + (C12863 + C12862) * C49281) * C49136 +
            ((C6754 + C6753) * C22556 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49281) *
                C26398) *
               C49480 -
           (((C6531 + C6532) * C49281 + C6507 * C22556) * C26398 +
            (C12649 * C49281 + C6516 * C22556) * C49136 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C22556) * C49128) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C22556 +
            (C6529 + C6530) * C49281) *
               C49128 +
           ((C5074 + C5075) * C22556 + C6498 * C49281) * C49136 +
           C27667 * C26398) *
              C967 -
          (((C6753 + C6754) * C49281 + (C5426 + C5427) * C22556) * C26398 +
           ((C6755 + C6756) * C49281 + (C5428 + C5429) * C22556) * C49136 +
           ((C7317 + C7318) * C49281 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C22556) *
               C49128) *
              C968 +
          (((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
             C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
                C22556 +
            (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
             C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
                C49281) *
               C49128 +
           ((C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
             C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
                C22556 +
            (C5021 * C2389 - C5022 * C2381 - C5021 * C2390 + C49451 * C2399 +
             C5023 * C3391 - C5024 * C3387 - C5023 * C3392 + C49323 * C3396) *
                C49281) *
               C49136 +
           ((C5021 * C979 - C5022 * C972 - C5021 * C980 + C49451 * C987 +
             C5023 * C2930 - C5024 * C2926 - C5023 * C2931 + C49323 * C2938) *
                C22556 +
            (C5021 * C2393 - C5022 * C2383 - C5021 * C2394 + C49451 * C2401 +
             C5023 * C3393 - C5024 * C3388 - C5023 * C3394 + C49323 * C3397) *
                C49281) *
               C26398) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C22556 +
            C1329 * C49281) *
               C49521 +
           (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
              C49207 * C49190 * C110 -
          ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
           (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
              C49207 * C49190 * C111 +
          (C22571 * C49521 + C22572 * C49514 + (C22570 + C22569) * C49501 +
           (C178 * C22556 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) *
                C49281) *
               C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49522 +
            C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
               C23662 +
           (C23665 + C23666 + C23667 + C23668) * C49133) *
              C49207 * C49190 * C110 -
          ((C23669 + C23670 + C23671 + C23672) * C49133 +
           (C23668 + C23667 + C23666 + C23665) * C23662) *
              C49207 * C49190 * C111 +
          ((C23672 + C23671 + C23670 + C23669) * C23662 +
           (C176 * C49522 + C319 * C49518 + C1134 * C49508 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49458) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C49207 * C265 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C49207 * C49478) *
              C267 +
          (((C22708 + C22707) * C49521 + (C22706 + C22705) * C49514 +
            (C22704 + C22703) * C49501 +
            (C318 * C22556 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C49207 * C265 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C23806 + C23805 + C23804 + C23803) * C23662 +
            (C320 * C49522 + C1133 * C49518 + C1331 * C49508 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C407 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C49190 * C267 +
          (((C22844 + C22843) * C49521 + (C22842 + C22841) * C49514 +
            (C22840 + C22839) * C49501 +
            (C458 * C22556 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C407 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C49190 * C267 +
          (((C23940 + C23939 + C23938 + C23937) * C23662 +
            (C460 * C49522 + C1524 * C49518 + C1523 * C49508 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C49207 * C547 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C49207 * C49478) *
              C549 +
          (((C22708 + C22707) * C49521 + (C22706 + C22705) * C49514 +
            (C22704 + C22703) * C49501 +
            (C318 * C22556 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C49207 * C547 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C23806 + C23805 + C23804 + C23803) * C23662 +
            (C320 * C49522 + C1133 * C49518 + C1331 * C49508 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C22556 +
            C1329 * C49281) *
               C49521 +
           (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
              C49207 * C613 -
          ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
           (C22707 + C22708) * C49514 +
           (C1330 * C49281 + C1329 * C22556) * C49521) *
              C49207 * C614 +
          ((C1330 * C22556 + C1805 * C49281) * C49521 +
           (C1132 * C22556 + C1332 * C49281) * C49514 +
           (C1133 * C22556 + C1331 * C49281) * C49501 +
           (C1134 * C22556 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49281) *
               C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49522 +
            C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
               C23662 +
           (C23665 + C23666 + C23667 + C23668) * C49133) *
              C49207 * C613 -
          ((C23803 + C23804 + C23805 + C23806) * C49133 +
           (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 + C1329 * C49522) *
               C23662) *
              C49207 * C614 +
          ((C1330 * C49522 + C1805 * C49518 + C9258 * C49508 + C9504 * C49458) *
               C23662 +
           (C1132 * C49522 + C1332 * C49518 + C9259 * C49508 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C49458) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C407 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C547 +
          (((C1977 * C22556 + C1976 * C49281) * C49521 +
            (C1526 * C22556 + C1525 * C49281) * C49514 +
            (C1524 * C22556 + C1523 * C49281) * C49501 +
            (C4204 * C22556 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C407 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C547 +
          (((C1977 * C49522 + C1976 * C49518 + C9604 * C49508 +
             C9603 * C49458) *
                C23662 +
            (C1526 * C49522 + C1525 * C49518 + C11582 * C49508 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C821 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C49190 * C549 +
          (((C22844 + C22843) * C49521 + (C22842 + C22841) * C49514 +
            (C22840 + C22839) * C49501 +
            (C458 * C22556 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22569 + C22570) * C49450 + (C22568 + C22567) * C49501 +
            (C22566 + C22565) * C49514 + (C22564 + C22563) * C49521) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C821 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C49190 * C549 +
          (((C23940 + C23939 + C23938 + C23937) * C23662 +
            (C460 * C49522 + C1524 * C49518 + C1523 * C49508 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23669 + C23670 + C23671 + C23672) * C49133 +
            (C23668 + C23667 + C23666 + C23665) * C23662) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C22556 +
             C1329 * C49281) *
                C49521 +
            (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
               C821 -
           ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
            (C22843 + C22844) * C49514 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C22556) *
                C49521) *
               C49480) *
              C265 +
          (((C1977 * C22556 + C1976 * C49281) * C49521 +
            (C1526 * C22556 + C1525 * C49281) * C49514 +
            (C1524 * C22556 + C1523 * C49281) * C49501 +
            (C4204 * C22556 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C22703 + C22704) * C49450 + (C22705 + C22706) * C49501 +
            (C22707 + C22708) * C49514 +
            (C1330 * C49281 + C1329 * C22556) * C49521) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49522 +
             C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
                C23662 +
            (C23665 + C23666 + C23667 + C23668) * C49133) *
               C821 -
           ((C23937 + C23938 + C23939 + C23940) * C49133 +
            (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49522) *
                C23662) *
               C49480) *
              C265 +
          (((C1977 * C49522 + C1976 * C49518 + C9604 * C49508 +
             C9603 * C49458) *
                C23662 +
            (C1526 * C49522 + C1525 * C49518 + C11582 * C49508 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C23803 + C23804 + C23805 + C23806) * C49133 +
            (C9258 * C49458 + C1805 * C49508 + C1330 * C49518 +
             C1329 * C49522) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C22556 +
            C1329 * C49281) *
               C49521 +
           (C22563 + C22564) * C49514 + C22571 * C49501 + C22572 * C49450) *
              C967 -
          ((C22839 + C22840) * C49450 + (C22841 + C22842) * C49501 +
           (C22843 + C22844) * C49514 +
           (C1977 * C49281 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C22556) *
               C49521) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C22556 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49281) *
               C49521 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C22556 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49281) *
               C49514 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C22556 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49281) *
               C49501 +
           ((C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C22556 +
            (C113 * C2735 - C114 * C2734 - C113 * C2736 + C49236 * C2737) *
                C49281) *
               C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49522 +
            C1329 * C49518 + C1330 * C49508 + C1805 * C49458) *
               C23662 +
           (C23665 + C23666 + C23667 + C23668) * C49133) *
              C967 -
          ((C23937 + C23938 + C23939 + C23940) * C49133 +
           (C9604 * C49458 + C1976 * C49508 + C1977 * C49518 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49522) *
               C23662) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49522 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49518 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49508 +
            (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
                C49458) *
               C23662 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49522 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49518 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49508 +
            (C113 * C10095 - C114 * C10094 - C113 * C10096 + C49236 * C10097) *
                C49458) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49277 +
            (C32358 + C32359) * C49284 + C32926 * C26395) *
               C49428 +
           ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C32122 + C32123) * C26395 + C35239 * C49284 +
            (C30881 + C30880) * C49277) *
               C49133 +
           (C32344 * C26395 + C32345 * C49284 + (C30879 + C30878) * C49277) *
               C49428) *
              C49207 * C49190 * C111 +
          ((C30886 * C49277 + C35042 * C49284 + (C32123 + C32122) * C26395) *
               C49428 +
           (C30887 * C49277 + (C31057 + C31056) * C49284 +
            (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
             C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
             C49323 * C1495) *
                C26395) *
               C49133) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49277 +
             (C32358 + C32359) * C49284 + C32926 * C26395) *
                C49428 +
            ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
                C49133) *
               C49207 * C265 -
           (((C32362 + C32363) * C26395 + C32344 * C49284 + C32345 * C49277) *
                C49133 +
            ((C32939 + C32940) * C26395 + (C32361 + C32360) * C49284 +
             (C32359 + C32358) * C49277) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C32334 * C49277 + C32335 * C49284 + (C32363 + C32362) * C26395) *
                C49428 +
            (C35042 * C49277 + (C32123 + C32122) * C49284 +
             (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 +
              C30823 * C1296 + C30827 * C1958 - C30828 * C1953 -
              C30827 * C1959 + C49323 * C1962) *
                 C26395) *
                C49133) *
               C49207 * C49478 -
           (((C32122 + C32123) * C26395 + C35239 * C49284 +
             (C30881 + C30880) * C49277) *
                C49133 +
            (C32344 * C26395 + C32345 * C49284 + (C30879 + C30878) * C49277) *
                C49428) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49277 +
             (C32358 + C32359) * C49284 + C32926 * C26395) *
                C49428 +
            ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
                C49133) *
               C407 -
           (((C32582 + C32583) * C26395 + (C32584 + C32585) * C49284 +
             (C31232 + C31233) * C49277) *
                C49133 +
            ((C33159 + C33160) * C26395 + (C33161 + C33162) * C49284 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49277) *
                C49428) *
               C49480) *
              C49190 * C267 +
          ((((C31233 + C31232) * C49277 + (C32585 + C32584) * C49284 +
             (C32583 + C32582) * C26395) *
                C49428 +
            ((C31231 + C31230) * C49277 + (C35447 + C35446) * C49284 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C26395) *
                C49133) *
               C49480 -
           (((C32122 + C32123) * C26395 + C35239 * C49284 +
             (C30881 + C30880) * C49277) *
                C49133 +
            (C32344 * C26395 + C32345 * C49284 + (C30879 + C30878) * C49277) *
                C49428) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49277 +
             (C32358 + C32359) * C49284 + C32926 * C26395) *
                C49428 +
            ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
                C49133) *
               C49207 * C547 -
           (((C32362 + C32363) * C26395 + C32344 * C49284 + C32345 * C49277) *
                C49133 +
            ((C32939 + C32940) * C26395 + (C32361 + C32360) * C49284 +
             (C32359 + C32358) * C49277) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C32334 * C49277 + C32335 * C49284 + (C32363 + C32362) * C26395) *
                C49428 +
            (C35042 * C49277 + (C32123 + C32122) * C49284 +
             (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 +
              C30823 * C1296 + C30827 * C1958 - C30828 * C1953 -
              C30827 * C1959 + C49323 * C1962) *
                 C26395) *
                C49133) *
               C49207 * C49478 -
           (((C32122 + C32123) * C26395 + C35239 * C49284 +
             (C30881 + C30880) * C49277) *
                C49133 +
            (C32344 * C26395 + C32345 * C49284 + (C30879 + C30878) * C49277) *
                C49428) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49277 +
            (C32358 + C32359) * C49284 + C32926 * C26395) *
               C49428 +
           ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
               C49133) *
              C49207 * C613 -
          (((C32362 + C32363) * C26395 + C32344 * C49284 + C32345 * C49277) *
               C49133 +
           ((C32939 + C32940) * C26395 + (C32361 + C32360) * C49284 +
            (C32359 + C32358) * C49277) *
               C49428) *
              C49207 * C614 +
          ((C32926 * C49277 + C41783 * C49284 + (C41797 + C41796) * C26395) *
               C49428 +
           (C32335 * C49277 + (C32363 + C32362) * C49284 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C26395) *
               C49133) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49277 +
             (C32358 + C32359) * C49284 + C32926 * C26395) *
                C49428 +
            ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
                C49133) *
               C407 -
           (((C32582 + C32583) * C26395 + (C32584 + C32585) * C49284 +
             (C31232 + C31233) * C49277) *
                C49133 +
            ((C33159 + C33160) * C26395 + (C33161 + C33162) * C49284 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49277) *
                C49428) *
               C49480) *
              C547 +
          ((((C33162 + C33161) * C49277 + (C33160 + C33159) * C49284 +
             (C41941 + C41940) * C26395) *
                C49428 +
            ((C32585 + C32584) * C49277 + (C32583 + C32582) * C49284 +
             (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 +
              C30823 * C1961 + C30827 * C10095 - C30828 * C10094 -
              C30827 * C10096 + C49323 * C10097) *
                 C26395) *
                C49133) *
               C49480 -
           (((C32362 + C32363) * C26395 + C32344 * C49284 + C32345 * C49277) *
                C49133 +
            ((C32939 + C32940) * C26395 + (C32361 + C32360) * C49284 +
             (C32359 + C32358) * C49277) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49277 +
             (C32358 + C32359) * C49284 + C32926 * C26395) *
                C49428 +
            ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
                C49133) *
               C821 -
           (((C32582 + C32583) * C26395 + (C32584 + C32585) * C49284 +
             (C31232 + C31233) * C49277) *
                C49133 +
            ((C33159 + C33160) * C26395 + (C33161 + C33162) * C49284 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49277) *
                C49428) *
               C49480) *
              C49190 * C549 +
          ((((C31233 + C31232) * C49277 + (C32585 + C32584) * C49284 +
             (C32583 + C32582) * C26395) *
                C49428 +
            ((C31231 + C31230) * C49277 + (C35447 + C35446) * C49284 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C26395) *
                C49133) *
               C49480 -
           (((C32122 + C32123) * C26395 + C35239 * C49284 +
             (C30881 + C30880) * C49277) *
                C49133 +
            (C32344 * C26395 + C32345 * C49284 + (C30879 + C30878) * C49277) *
                C49428) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49277 +
             (C32358 + C32359) * C49284 + C32926 * C26395) *
                C49428 +
            ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
                C49133) *
               C821 -
           (((C32582 + C32583) * C26395 + (C32584 + C32585) * C49284 +
             (C31232 + C31233) * C49277) *
                C49133 +
            ((C33159 + C33160) * C26395 + (C33161 + C33162) * C49284 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49277) *
                C49428) *
               C49480) *
              C265 +
          ((((C33162 + C33161) * C49277 + (C33160 + C33159) * C49284 +
             (C41941 + C41940) * C26395) *
                C49428 +
            ((C32585 + C32584) * C49277 + (C32583 + C32582) * C49284 +
             (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 +
              C30823 * C1961 + C30827 * C10095 - C30828 * C10094 -
              C30827 * C10096 + C49323 * C10097) *
                 C26395) *
                C49133) *
               C49480 -
           (((C32362 + C32363) * C26395 + C32344 * C49284 + C32345 * C49277) *
                C49133 +
            ((C32939 + C32940) * C26395 + (C32361 + C32360) * C49284 +
             (C32359 + C32358) * C49277) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49277 +
            (C32358 + C32359) * C49284 + C32926 * C26395) *
               C49428 +
           ((C30878 + C30879) * C49277 + C32334 * C49284 + C32335 * C26395) *
               C49133) *
              C967 -
          (((C32582 + C32583) * C26395 + (C32584 + C32585) * C49284 +
            (C31232 + C31233) * C49277) *
               C49133 +
           ((C33159 + C33160) * C26395 + (C33161 + C33162) * C49284 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49277) *
               C49428) *
              C968 +
          (((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
             C30827 * C2934 - C30828 * C2928 - C30827 * C2935 +
             C49323 * C2940) *
                C49277 +
            (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
             C30827 * C3389 - C30828 * C3386 - C30827 * C3390 +
             C49323 * C3395) *
                C49284 +
            (C30825 * C2387 - C30826 * C2380 - C30825 * C2388 + C30823 * C2398 +
             C30827 * C10309 - C30828 * C10307 - C30827 * C10310 +
             C49323 * C10313) *
                C26395) *
               C49428 +
           ((C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
             C30827 * C2932 - C30828 * C2927 - C30827 * C2933 +
             C49323 * C2939) *
                C49277 +
            (C30825 * C2389 - C30826 * C2381 - C30825 * C2390 + C30823 * C2399 +
             C30827 * C3391 - C30828 * C3387 - C30827 * C3392 +
             C49323 * C3396) *
                C49284 +
            (C30825 * C2391 - C30826 * C2382 - C30825 * C2392 + C30823 * C2400 +
             C30827 * C10311 - C30828 * C10308 - C30827 * C10312 +
             C49323 * C10314) *
                C26395) *
               C49133) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
            C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
            C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
               C49277 +
           (C38261 + C38262 + C38263) * C49284 +
           (C38842 + C38841 + C38840) * C26395) *
              C49123 * C49207 * C49190 * C110 -
          ((C38264 + C38265 + C38266) * C26395 + C38254 * C49284 +
           (C36691 + C36690 + C36689) * C49277) *
              C49123 * C49207 * C49190 * C111 +
          (C36699 * C49277 + (C36885 + C36884 + C36883) * C49284 +
           (C48021 * C626 - C48060 * C619 - C48021 * C627 + C49319 * C634 +
            C48018 * C1484 - C48053 * C1480 - C48018 * C1485 + C49326 * C1492 +
            C48066 * C2395 - C36633 * C2384 - C48066 * C2396 + C36627 * C2402) *
               C26395) *
              C49123 * C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49277 +
            (C38261 + C38262 + C38263) * C49284 +
            (C38842 + C38841 + C38840) * C26395) *
               C49123 * C49207 * C265 -
           ((C48066 * C9832 - C36633 * C9830 - C48066 * C9833 + C36627 * C9836 +
             C48018 * C1954 - C48053 * C1951 - C48018 * C1955 + C49326 * C1960 +
             C48021 * C1292 - C48060 * C1286 - C48021 * C1293 +
             C49319 * C1298) *
                C26395 +
            (C38840 + C38841 + C38842) * C49284 +
            (C38263 + C38262 + C38261) * C49277) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C38250 * C49277 + (C38266 + C38265 + C38264) * C49284 +
            (C48021 * C1290 - C48060 * C1285 - C48021 * C1291 + C49319 * C1297 +
             C48018 * C1956 - C48053 * C1952 - C48018 * C1957 + C49326 * C1961 +
             C48066 * C10095 - C36633 * C10094 - C48066 * C10096 +
             C36627 * C10097) *
                C26395) *
               C49123 * C49207 * C49478 -
           ((C38264 + C38265 + C38266) * C26395 + C38254 * C49284 +
            (C36691 + C36690 + C36689) * C49277) *
               C49123 * C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49277 +
            (C38261 + C38262 + C38263) * C49284 +
            (C38842 + C38841 + C38840) * C26395) *
               C49123 * C407 -
           ((C48066 * C10309 - C36633 * C10307 - C48066 * C10310 +
             C36627 * C10313 + C48018 * C2387 - C48053 * C2380 -
             C48018 * C2388 + C49326 * C2398 + C48021 * C1488 - C48060 * C1482 -
             C48021 * C1489 + C49319 * C1494) *
                C26395 +
            (C39055 + C39056 + C39057) * C49284 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49277) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C37076 + C37075 + C37074) * C49277 +
            (C38481 + C38480 + C38479) * C49284 +
            (C48021 * C1486 - C48060 * C1481 - C48021 * C1487 + C49319 * C1493 +
             C48018 * C2391 - C48053 * C2382 - C48018 * C2392 + C49326 * C2400 +
             C48066 * C10311 - C36633 * C10308 - C48066 * C10312 +
             C36627 * C10314) *
                C26395) *
               C49123 * C49480 -
           ((C38264 + C38265 + C38266) * C26395 + C38254 * C49284 +
            (C36691 + C36690 + C36689) * C49277) *
               C49123 * C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49277 +
            (C38261 + C38262 + C38263) * C49284 +
            (C38842 + C38841 + C38840) * C26395) *
               C49123 * C49207 * C547 -
           ((C48066 * C9832 - C36633 * C9830 - C48066 * C9833 + C36627 * C9836 +
             C48018 * C1954 - C48053 * C1951 - C48018 * C1955 + C49326 * C1960 +
             C48021 * C1292 - C48060 * C1286 - C48021 * C1293 +
             C49319 * C1298) *
                C26395 +
            (C38840 + C38841 + C38842) * C49284 +
            (C38263 + C38262 + C38261) * C49277) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C38250 * C49277 + (C38266 + C38265 + C38264) * C49284 +
            (C48021 * C1290 - C48060 * C1285 - C48021 * C1291 + C49319 * C1297 +
             C48018 * C1956 - C48053 * C1952 - C48018 * C1957 + C49326 * C1961 +
             C48066 * C10095 - C36633 * C10094 - C48066 * C10096 +
             C36627 * C10097) *
                C26395) *
               C49123 * C49207 * C49478 -
           ((C38264 + C38265 + C38266) * C26395 + C38254 * C49284 +
            (C36691 + C36690 + C36689) * C49277) *
               C49123 * C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
            C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
            C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
               C49277 +
           (C38261 + C38262 + C38263) * C49284 + C47333 * C26395) *
              C49123 * C49207 * C613 -
          ((C47340 + C47341 + C47342) * C26395 +
           (C38840 + C38841 + C38842) * C49284 +
           (C38263 + C38262 + C38261) * C49277) *
              C49123 * C49207 * C614 +
          (C47333 * C49277 + (C47342 + C47341 + C47340) * C49284 +
           (C48021 * C1789 - C48060 * C1786 - C48021 * C1790 + C49319 * C1795 +
            C48018 * C9343 - C48053 * C9341 - C48018 * C9344 + C49326 * C9347 +
            C48066 * C9834 - C36633 * C9831 - C48066 * C9835 + C36627 * C9837) *
               C26395) *
              C49123 * C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49277 +
            (C38261 + C38262 + C38263) * C49284 + C47333 * C26395) *
               C49123 * C407 -
           ((C47507 + C47508 + C47509) * C26395 +
            (C39055 + C39056 + C39057) * C49284 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49277) *
               C49123 * C49480) *
              C547 +
          (((C39057 + C39056 + C39055) * C49277 +
            (C47509 + C47508 + C47507) * C49284 +
            (C48021 * C1954 - C48060 * C1951 - C48021 * C1955 + C49319 * C1960 +
             C48018 * C9832 - C48053 * C9830 - C48018 * C9833 + C49326 * C9836 +
             C48066 * C10741 - C36633 * C10740 - C48066 * C10742 +
             C36627 * C10743) *
                C26395) *
               C49123 * C49480 -
           ((C47340 + C47341 + C47342) * C26395 +
            (C38840 + C38841 + C38842) * C49284 +
            (C38263 + C38262 + C38261) * C49277) *
               C49123 * C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49277 +
            (C38261 + C38262 + C38263) * C49284 + C47333 * C26395) *
               C49123 * C821 -
           ((C47507 + C47508 + C47509) * C26395 +
            (C39055 + C39056 + C39057) * C49284 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49277) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C37076 + C37075 + C37074) * C49277 +
            (C38481 + C38480 + C38479) * C49284 +
            (C48021 * C1486 - C48060 * C1481 - C48021 * C1487 + C49319 * C1493 +
             C48018 * C2391 - C48053 * C2382 - C48018 * C2392 + C49326 * C2400 +
             C48066 * C10311 - C36633 * C10308 - C48066 * C10312 +
             C36627 * C10314) *
                C26395) *
               C49123 * C49480 -
           ((C38264 + C38265 + C38266) * C26395 + C38254 * C49284 +
            (C36691 + C36690 + C36689) * C49277) *
               C49123 * C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49277 +
            (C38261 + C38262 + C38263) * C49284 + C47333 * C26395) *
               C49123 * C821 -
           ((C47507 + C47508 + C47509) * C26395 +
            (C39055 + C39056 + C39057) * C49284 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49277) *
               C49123 * C49480) *
              C265 +
          (((C39057 + C39056 + C39055) * C49277 +
            (C47509 + C47508 + C47507) * C49284 +
            (C48021 * C1954 - C48060 * C1951 - C48021 * C1955 + C49319 * C1960 +
             C48018 * C9832 - C48053 * C9830 - C48018 * C9833 + C49326 * C9836 +
             C48066 * C10741 - C36633 * C10740 - C48066 * C10742 +
             C36627 * C10743) *
                C26395) *
               C49123 * C49480 -
           ((C47340 + C47341 + C47342) * C26395 +
            (C38840 + C38841 + C38842) * C49284 +
            (C38263 + C38262 + C38261) * C49277) *
               C49123 * C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
            C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
            C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
               C49277 +
           (C38261 + C38262 + C38263) * C49284 + C47333 * C26395) *
              C49123 * C967 -
          ((C47507 + C47508 + C47509) * C26395 +
           (C39055 + C39056 + C39057) * C49284 +
           (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
            C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
            C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
               C49277) *
              C49123 * C968 +
          ((C48021 * C975 - C48060 * C970 - C48021 * C976 + C49319 * C985 +
            C48018 * C2934 - C48053 * C2928 - C48018 * C2935 + C49326 * C2940 +
            C48066 * C3803 - C36633 * C3800 - C48066 * C3804 + C36627 * C3809) *
               C49277 +
           (C48021 * C2385 - C48060 * C2379 - C48021 * C2386 + C49319 * C2397 +
            C48018 * C3389 - C48053 * C3386 - C48018 * C3390 + C49326 * C3395 +
            C48066 * C11190 - C36633 * C11188 - C48066 * C11191 +
            C36627 * C11194) *
               C49284 +
           (C48021 * C2387 - C48060 * C2380 - C48021 * C2388 + C49319 * C2398 +
            C48018 * C10309 - C48053 * C10307 - C48018 * C10310 +
            C49326 * C10313 + C48066 * C11192 - C36633 * C11189 -
            C48066 * C11193 + C36627 * C11195) *
               C26395) *
              C49123 * C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49522 +
           (C32358 + C32359) * C49518 + C32926 * C49508 +
           (C32940 + C32939) * C49458) *
              C49123 * C49207 * C49190 * C110 -
          ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
           (C30879 + C30878) * C49522) *
              C49123 * C49207 * C49190 * C111 +
          (C30886 * C49522 + C35042 * C49518 + (C32123 + C32122) * C49508 +
           (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 + C30823 * C1296 +
            C30827 * C1958 - C30828 * C1953 - C30827 * C1959 + C49323 * C1962) *
               C49458) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C22556 +
            (C32358 + C32359) * C49281) *
               C49512 +
           ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
           C39740 * C49472) *
              C49207 * C49190 * C110 -
          (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
           (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
           (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
              C49207 * C49190 * C111 +
          (C39740 * C49512 +
           (C30887 * C22556 + (C31057 + C31056) * C49281) * C49499 +
           ((C30885 + C30884) * C22556 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49281) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
            C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
            C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
            C33804 * C2934 - C33805 * C2928 - C33804 * C2935 + C49465 * C2940) *
               C22556 +
           (C33798 * C283 - C33799 * C273 - C33798 * C284 + C49523 * C291 +
            C33800 * C724 - C33801 * C719 - C33800 * C725 + C49520 * C734 +
            C33802 * C2385 - C33803 * C2379 - C33802 * C2386 + C49511 * C2397 +
            C33804 * C3389 - C33805 * C3386 - C33804 * C3390 + C49465 * C3395) *
               C49281) *
              C49123 * C49207 * C49190 * C110 -
          ((C34017 + C34018 + C34019 + C34020) * C49281 +
           (C33858 + C33857 + C33856 + C33855) * C22556) *
              C49123 * C49207 * C49190 * C111 +
          ((C33862 + C33861 + C33860 + C33859) * C22556 +
           (C33798 * C279 - C33799 * C271 - C33798 * C280 + C49523 * C289 +
            C33800 * C728 - C33801 * C721 - C33800 * C729 + C49520 * C736 +
            C33802 * C2393 - C33803 * C2383 - C33802 * C2394 + C49511 * C2401 +
            C33804 * C3393 - C33805 * C3388 - C33804 * C3394 + C49465 * C3397) *
               C49281) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 +
            (C32940 + C32939) * C49458) *
               C49123 * C49207 * C265 -
           ((C30827 * C9343 - C30828 * C9341 - C30827 * C9344 + C49323 * C9347 +
             C30825 * C1789 - C30826 * C1786 - C30825 * C1790 +
             C30823 * C1795) *
                C49458 +
            (C32939 + C32940) * C49508 + (C32361 + C32360) * C49518 +
            (C32359 + C32358) * C49522) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C32334 * C49522 + C32335 * C49518 + (C32363 + C32362) * C49508 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C49207 * C265 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C49207 * C49478) *
              C267 +
          (((C32334 * C22556 + C32335 * C49281) * C49512 +
            (C35042 * C22556 + (C32123 + C32122) * C49281) * C49499 +
            ((C31057 + C31056) * C22556 +
             (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
              C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
              C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C22556 +
            (C42552 + C42553 + C42554 + C42555) * C49281) *
               C49123 * C49207 * C265 -
           ((C33804 * C10309 - C33805 * C10307 - C33804 * C10310 +
             C49465 * C10313 + C33802 * C2387 - C33803 * C2380 -
             C33802 * C2388 + C49511 * C2398 + C33800 * C1488 - C33801 * C1482 -
             C33800 * C1489 + C49520 * C1494 + C33798 * C622 - C33799 * C617 -
             C33798 * C623 + C49523 * C632) *
                C49281 +
            (C42555 + C42554 + C42553 + C42552) * C22556) *
               C49123 * C49207 * C49478) *
              C267 +
          (((C34020 + C34019 + C34018 + C34017) * C22556 +
            (C33798 * C624 - C33799 * C618 - C33798 * C625 + C49523 * C633 +
             C33800 * C1486 - C33801 * C1481 - C33800 * C1487 + C49520 * C1493 +
             C33802 * C2391 - C33803 * C2382 - C33802 * C2392 + C49511 * C2400 +
             C33804 * C10311 - C33805 * C10308 - C33804 * C10312 +
             C49465 * C10314) *
                C49281) *
               C49123 * C49207 * C49478 -
           ((C34017 + C34018 + C34019 + C34020) * C49281 +
            (C33858 + C33857 + C33856 + C33855) * C22556) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 +
            (C32940 + C32939) * C49458) *
               C49123 * C407 -
           ((C30827 * C9832 - C30828 * C9830 - C30827 * C9833 + C49323 * C9836 +
             C30825 * C1954 - C30826 * C1951 - C30825 * C1955 +
             C30823 * C1960) *
                C49458 +
            (C33159 + C33160) * C49508 + (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C31233 + C31232) * C49522 + (C32585 + C32584) * C49518 +
            (C32583 + C32582) * C49508 +
            (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 + C30823 * C1961 +
             C30827 * C10095 - C30828 * C10094 - C30827 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C407 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C49190 * C267 +
          ((((C31233 + C31232) * C22556 + (C32585 + C32584) * C49281) * C49512 +
            ((C31231 + C31230) * C22556 + (C35447 + C35446) * C49281) * C49499 +
            ((C31229 + C31228) * C22556 +
             (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
              C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
              C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C22556 +
            (C42552 + C42553 + C42554 + C42555) * C49281) *
               C49123 * C407 -
           ((C33804 * C11190 - C33805 * C11188 - C33804 * C11191 +
             C49465 * C11194 + C33802 * C3389 - C33803 * C3386 -
             C33802 * C3390 + C49511 * C3395 + C33800 * C2385 - C33801 * C2379 -
             C33800 * C2386 + C49520 * C2397 + C33798 * C724 - C33799 * C719 -
             C33798 * C725 + C49523 * C734) *
                C49281 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C22556) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C34178 + C34177 + C34176 + C34175) * C22556 +
            (C33798 * C726 - C33799 * C720 - C33798 * C727 + C49523 * C735 +
             C33800 * C2389 - C33801 * C2381 - C33800 * C2390 + C49520 * C2399 +
             C33802 * C3391 - C33803 * C3387 - C33802 * C3392 + C49511 * C3396 +
             C33804 * C17922 - C33805 * C17921 - C33804 * C17923 +
             C49465 * C17924) *
                C49281) *
               C49123 * C49480 -
           ((C34017 + C34018 + C34019 + C34020) * C49281 +
            (C33858 + C33857 + C33856 + C33855) * C22556) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 +
            (C32940 + C32939) * C49458) *
               C49123 * C49207 * C547 -
           ((C30827 * C9343 - C30828 * C9341 - C30827 * C9344 + C49323 * C9347 +
             C30825 * C1789 - C30826 * C1786 - C30825 * C1790 +
             C30823 * C1795) *
                C49458 +
            (C32939 + C32940) * C49508 + (C32361 + C32360) * C49518 +
            (C32359 + C32358) * C49522) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C32334 * C49522 + C32335 * C49518 + (C32363 + C32362) * C49508 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C49207 * C547 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C49207 * C49478) *
              C549 +
          (((C32334 * C22556 + C32335 * C49281) * C49512 +
            (C35042 * C22556 + (C32123 + C32122) * C49281) * C49499 +
            ((C31057 + C31056) * C22556 +
             (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
              C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
              C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C22556 +
            (C42552 + C42553 + C42554 + C42555) * C49281) *
               C49123 * C49207 * C547 -
           ((C33804 * C10309 - C33805 * C10307 - C33804 * C10310 +
             C49465 * C10313 + C33802 * C2387 - C33803 * C2380 -
             C33802 * C2388 + C49511 * C2398 + C33800 * C1488 - C33801 * C1482 -
             C33800 * C1489 + C49520 * C1494 + C33798 * C622 - C33799 * C617 -
             C33798 * C623 + C49523 * C632) *
                C49281 +
            (C42555 + C42554 + C42553 + C42552) * C22556) *
               C49123 * C49207 * C49478) *
              C549 +
          (((C34020 + C34019 + C34018 + C34017) * C22556 +
            (C33798 * C624 - C33799 * C618 - C33798 * C625 + C49523 * C633 +
             C33800 * C1486 - C33801 * C1481 - C33800 * C1487 + C49520 * C1493 +
             C33802 * C2391 - C33803 * C2382 - C33802 * C2392 + C49511 * C2400 +
             C33804 * C10311 - C33805 * C10308 - C33804 * C10312 +
             C49465 * C10314) *
                C49281) *
               C49123 * C49207 * C49478 -
           ((C34017 + C34018 + C34019 + C34020) * C49281 +
            (C33858 + C33857 + C33856 + C33855) * C22556) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49522 +
           (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
              C49123 * C49207 * C613 -
          ((C41796 + C41797) * C49458 + (C32939 + C32940) * C49508 +
           (C32361 + C32360) * C49518 + (C32359 + C32358) * C49522) *
              C49123 * C49207 * C614 +
          (C32926 * C49522 + C41783 * C49518 + (C41797 + C41796) * C49508 +
           (C30825 * C9239 - C30826 * C9237 - C30825 * C9240 + C30823 * C9243 +
            C30827 * C9587 - C30828 * C9586 - C30827 * C9588 + C49323 * C9589) *
               C49458) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C22556 +
            (C32358 + C32359) * C49281) *
               C49512 +
           ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
           C39740 * C49472) *
              C49207 * C613 -
          (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
           (C32344 * C49281 + C32345 * C22556) * C49499 +
           ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) * C49512) *
              C49207 * C614 +
          ((C32926 * C22556 + (C32940 + C32939) * C49281) * C49512 +
           (C32335 * C22556 + (C32363 + C32362) * C49281) * C49499 +
           ((C32123 + C32122) * C22556 +
            (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 + C30823 * C1296 +
             C30827 * C1958 - C30828 * C1953 - C30827 * C1959 +
             C49323 * C1962) *
                C49281) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
            C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
            C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
            C33804 * C2934 - C33805 * C2928 - C33804 * C2935 + C49465 * C2940) *
               C22556 +
           (C42552 + C42553 + C42554 + C42555) * C49281) *
              C49123 * C49207 * C613 -
          ((C42938 + C42939 + C42940 + C42941) * C49281 +
           (C42555 + C42554 + C42553 + C42552) * C22556) *
              C49123 * C49207 * C614 +
          ((C42941 + C42940 + C42939 + C42938) * C22556 +
           (C33798 * C1292 - C33799 * C1286 - C33798 * C1293 + C49523 * C1298 +
            C33800 * C1954 - C33801 * C1951 - C33800 * C1955 + C49520 * C1960 +
            C33802 * C9832 - C33803 * C9830 - C33802 * C9833 + C49511 * C9836 +
            C33804 * C10741 - C33805 * C10740 - C33804 * C10742 +
            C49465 * C10743) *
               C49281) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
               C49123 * C407 -
           ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
            (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C547 +
          (((C33162 + C33161) * C49522 + (C33160 + C33159) * C49518 +
            (C41941 + C41940) * C49508 +
            (C30825 * C9343 - C30826 * C9341 - C30825 * C9344 + C30823 * C9347 +
             C30827 * C9834 - C30828 * C9831 - C30827 * C9835 +
             C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C41796 + C41797) * C49458 + (C32939 + C32940) * C49508 +
            (C32361 + C32360) * C49518 + (C32359 + C32358) * C49522) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C407 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C547 +
          ((((C33162 + C33161) * C22556 + (C33160 + C33159) * C49281) * C49512 +
            ((C32585 + C32584) * C22556 + (C32583 + C32582) * C49281) * C49499 +
            ((C35447 + C35446) * C22556 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C22556 +
            (C42552 + C42553 + C42554 + C42555) * C49281) *
               C49123 * C407 -
           ((C43096 + C43097 + C43098 + C43099) * C49281 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C22556) *
               C49123 * C49480) *
              C547 +
          (((C43099 + C43098 + C43097 + C43096) * C22556 +
            (C33798 * C1488 - C33799 * C1482 - C33798 * C1489 + C49523 * C1494 +
             C33800 * C2387 - C33801 * C2380 - C33800 * C2388 + C49520 * C2398 +
             C33802 * C10309 - C33803 * C10307 - C33802 * C10310 +
             C49511 * C10313 + C33804 * C11192 - C33805 * C11189 -
             C33804 * C11193 + C49465 * C11195) *
                C49281) *
               C49123 * C49480 -
           ((C42938 + C42939 + C42940 + C42941) * C49281 +
            (C42555 + C42554 + C42553 + C42552) * C22556) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
               C49123 * C821 -
           ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
            (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C31233 + C31232) * C49522 + (C32585 + C32584) * C49518 +
            (C32583 + C32582) * C49508 +
            (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 + C30823 * C1961 +
             C30827 * C10095 - C30828 * C10094 - C30827 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C821 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C49190 * C549 +
          ((((C31233 + C31232) * C22556 + (C32585 + C32584) * C49281) * C49512 +
            ((C31231 + C31230) * C22556 + (C35447 + C35446) * C49281) * C49499 +
            ((C31229 + C31228) * C22556 +
             (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
              C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
              C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C22556 +
            (C42552 + C42553 + C42554 + C42555) * C49281) *
               C49123 * C821 -
           ((C43096 + C43097 + C43098 + C43099) * C49281 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C22556) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C34178 + C34177 + C34176 + C34175) * C22556 +
            (C33798 * C726 - C33799 * C720 - C33798 * C727 + C49523 * C735 +
             C33800 * C2389 - C33801 * C2381 - C33800 * C2390 + C49520 * C2399 +
             C33802 * C3391 - C33803 * C3387 - C33802 * C3392 + C49511 * C3396 +
             C33804 * C17922 - C33805 * C17921 - C33804 * C17923 +
             C49465 * C17924) *
                C49281) *
               C49123 * C49480 -
           ((C34017 + C34018 + C34019 + C34020) * C49281 +
            (C33858 + C33857 + C33856 + C33855) * C22556) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
               C49123 * C821 -
           ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
            (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C265 +
          (((C33162 + C33161) * C49522 + (C33160 + C33159) * C49518 +
            (C41941 + C41940) * C49508 +
            (C30825 * C9343 - C30826 * C9341 - C30825 * C9344 + C30823 * C9347 +
             C30827 * C9834 - C30828 * C9831 - C30827 * C9835 +
             C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C41796 + C41797) * C49458 + (C32939 + C32940) * C49508 +
            (C32361 + C32360) * C49518 + (C32359 + C32358) * C49522) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C821 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C265 +
          ((((C33162 + C33161) * C22556 + (C33160 + C33159) * C49281) * C49512 +
            ((C32585 + C32584) * C22556 + (C32583 + C32582) * C49281) * C49499 +
            ((C35447 + C35446) * C22556 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C22556 +
            (C42552 + C42553 + C42554 + C42555) * C49281) *
               C49123 * C821 -
           ((C43096 + C43097 + C43098 + C43099) * C49281 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C22556) *
               C49123 * C49480) *
              C265 +
          (((C43099 + C43098 + C43097 + C43096) * C22556 +
            (C33798 * C1488 - C33799 * C1482 - C33798 * C1489 + C49523 * C1494 +
             C33800 * C2387 - C33801 * C2380 - C33800 * C2388 + C49520 * C2398 +
             C33802 * C10309 - C33803 * C10307 - C33802 * C10310 +
             C49511 * C10313 + C33804 * C11192 - C33805 * C11189 -
             C33804 * C11193 + C49465 * C11195) *
                C49281) *
               C49123 * C49480 -
           ((C42938 + C42939 + C42940 + C42941) * C49281 +
            (C42555 + C42554 + C42553 + C42552) * C22556) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49522 +
           (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
              C49123 * C967 -
          ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
           (C33161 + C33162) * C49518 +
           (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
            C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
               C49522) *
              C49123 * C968 +
          ((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
            C30827 * C2934 - C30828 * C2928 - C30827 * C2935 + C49323 * C2940) *
               C49522 +
           (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
            C30827 * C3389 - C30828 * C3386 - C30827 * C3390 + C49323 * C3395) *
               C49518 +
           (C30825 * C2387 - C30826 * C2380 - C30825 * C2388 + C30823 * C2398 +
            C30827 * C10309 - C30828 * C10307 - C30827 * C10310 +
            C49323 * C10313) *
               C49508 +
           (C30825 * C9832 - C30826 * C9830 - C30825 * C9833 + C30823 * C9836 +
            C30827 * C10741 - C30828 * C10740 - C30827 * C10742 +
            C49323 * C10743) *
               C49458) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C22556 +
            (C32358 + C32359) * C49281) *
               C49512 +
           ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
           C39740 * C49472) *
              C967 -
          (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
           ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
           ((C33161 + C33162) * C49281 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C22556) *
               C49512) *
              C968 +
          (((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
             C30827 * C2934 - C30828 * C2928 - C30827 * C2935 +
             C49323 * C2940) *
                C22556 +
            (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
             C30827 * C3389 - C30828 * C3386 - C30827 * C3390 +
             C49323 * C3395) *
                C49281) *
               C49512 +
           ((C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
             C30827 * C2932 - C30828 * C2927 - C30827 * C2933 +
             C49323 * C2939) *
                C22556 +
            (C30825 * C2389 - C30826 * C2381 - C30825 * C2390 + C30823 * C2399 +
             C30827 * C3391 - C30828 * C3387 - C30827 * C3392 +
             C49323 * C3396) *
                C49281) *
               C49499 +
           ((C30825 * C979 - C30826 * C972 - C30825 * C980 + C30823 * C987 +
             C30827 * C2930 - C30828 * C2926 - C30827 * C2931 +
             C49323 * C2938) *
                C22556 +
            (C30825 * C2393 - C30826 * C2383 - C30825 * C2394 + C30823 * C2401 +
             C30827 * C3393 - C30828 * C3388 - C30827 * C3394 +
             C49323 * C3397) *
                C49281) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
            C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
            C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
            C33804 * C2934 - C33805 * C2928 - C33804 * C2935 + C49465 * C2940) *
               C22556 +
           (C42552 + C42553 + C42554 + C42555) * C49281) *
              C49123 * C967 -
          ((C43096 + C43097 + C43098 + C43099) * C49281 +
           (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
            C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
            C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
            C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
               C22556) *
              C49123 * C968 +
          ((C33798 * C975 - C33799 * C970 - C33798 * C976 + C49523 * C985 +
            C33800 * C2934 - C33801 * C2928 - C33800 * C2935 + C49520 * C2940 +
            C33802 * C3803 - C33803 * C3800 - C33802 * C3804 + C49511 * C3809 +
            C33804 * C18009 - C33805 * C18007 - C33804 * C18010 +
            C49465 * C18013) *
               C22556 +
           (C33798 * C2385 - C33799 * C2379 - C33798 * C2386 + C49523 * C2397 +
            C33800 * C3389 - C33801 * C3386 - C33800 * C3390 + C49520 * C3395 +
            C33802 * C11190 - C33803 * C11188 - C33802 * C11191 +
            C49511 * C11194 + C33804 * C18242 - C33805 * C18241 -
            C33804 * C18243 + C49465 * C18244) *
               C49281) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C22556 +
            (C38261 + C38262 + C38263) * C49281) *
               C49428 +
           ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
              C49207 * C49190 * C110 -
          (((C36883 + C36884 + C36885) * C49281 +
            (C36694 + C36693 + C36692) * C22556) *
               C49133 +
           (C38254 * C49281 + (C36691 + C36690 + C36689) * C22556) * C49428) *
              C49207 * C49190 * C111 +
          ((C36699 * C22556 + (C36885 + C36884 + C36883) * C49281) * C49428 +
           ((C36697 + C36696 + C36695) * C22556 +
            (C48021 * C277 - C48060 * C270 - C48021 * C278 + C49319 * C288 +
             C48018 * C730 - C48053 * C722 - C48018 * C731 + C49326 * C737 +
             C48066 * C2735 - C36633 * C2734 - C48066 * C2736 +
             C36627 * C2737) *
                C49281) *
               C49133) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C22556 +
             (C38261 + C38262 + C38263) * C49281) *
                C49428 +
            ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
               C49207 * C265 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C22556) * C49133 +
            ((C38840 + C38841 + C38842) * C49281 +
             (C38263 + C38262 + C38261) * C22556) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C38250 * C22556 + (C38266 + C38265 + C38264) * C49281) * C49428 +
            ((C36885 + C36884 + C36883) * C22556 +
             (C48021 * C626 - C48060 * C619 - C48021 * C627 + C49319 * C634 +
              C48018 * C1484 - C48053 * C1480 - C48018 * C1485 +
              C49326 * C1492 + C48066 * C2395 - C36633 * C2384 -
              C48066 * C2396 + C36627 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C22556) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C22556) * C49428) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C22556 +
             (C38261 + C38262 + C38263) * C49281) *
                C49428 +
            ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
               C407 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C22556) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C22556) *
                C49428) *
               C49480) *
              C49190 * C267 +
          ((((C37076 + C37075 + C37074) * C22556 +
             (C38481 + C38480 + C38479) * C49281) *
                C49428 +
            ((C37073 + C37072 + C37071) * C22556 +
             (C48021 * C728 - C48060 * C721 - C48021 * C729 + C49319 * C736 +
              C48018 * C2393 - C48053 * C2383 - C48018 * C2394 +
              C49326 * C2401 + C48066 * C3393 - C36633 * C3388 -
              C48066 * C3394 + C36627 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C22556) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C22556) * C49428) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C22556 +
             (C38261 + C38262 + C38263) * C49281) *
                C49428 +
            ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
               C49207 * C547 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C22556) * C49133 +
            ((C38840 + C38841 + C38842) * C49281 +
             (C38263 + C38262 + C38261) * C22556) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C38250 * C22556 + (C38266 + C38265 + C38264) * C49281) * C49428 +
            ((C36885 + C36884 + C36883) * C22556 +
             (C48021 * C626 - C48060 * C619 - C48021 * C627 + C49319 * C634 +
              C48018 * C1484 - C48053 * C1480 - C48018 * C1485 +
              C49326 * C1492 + C48066 * C2395 - C36633 * C2384 -
              C48066 * C2396 + C36627 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C22556) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C22556) * C49428) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C22556 +
            (C38261 + C38262 + C38263) * C49281) *
               C49428 +
           ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
              C49207 * C613 -
          (((C38264 + C38265 + C38266) * C49281 + C38254 * C22556) * C49133 +
           ((C38840 + C38841 + C38842) * C49281 +
            (C38263 + C38262 + C38261) * C22556) *
               C49428) *
              C49207 * C614 +
          (((C38842 + C38841 + C38840) * C22556 +
            (C48021 * C1292 - C48060 * C1286 - C48021 * C1293 + C49319 * C1298 +
             C48018 * C1954 - C48053 * C1951 - C48018 * C1955 + C49326 * C1960 +
             C48066 * C9832 - C36633 * C9830 - C48066 * C9833 +
             C36627 * C9836) *
                C49281) *
               C49428 +
           ((C38266 + C38265 + C38264) * C22556 +
            (C48021 * C1290 - C48060 * C1285 - C48021 * C1291 + C49319 * C1297 +
             C48018 * C1956 - C48053 * C1952 - C48018 * C1957 + C49326 * C1961 +
             C48066 * C10095 - C36633 * C10094 - C48066 * C10096 +
             C36627 * C10097) *
                C49281) *
               C49133) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C22556 +
             (C38261 + C38262 + C38263) * C49281) *
                C49428 +
            ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
               C407 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C22556) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C22556) *
                C49428) *
               C49480) *
              C547 +
          ((((C39057 + C39056 + C39055) * C22556 +
             (C48021 * C1488 - C48060 * C1482 - C48021 * C1489 +
              C49319 * C1494 + C48018 * C2387 - C48053 * C2380 -
              C48018 * C2388 + C49326 * C2398 + C48066 * C10309 -
              C36633 * C10307 - C48066 * C10310 + C36627 * C10313) *
                 C49281) *
                C49428 +
            ((C38481 + C38480 + C38479) * C22556 +
             (C48021 * C1486 - C48060 * C1481 - C48021 * C1487 +
              C49319 * C1493 + C48018 * C2391 - C48053 * C2382 -
              C48018 * C2392 + C49326 * C2400 + C48066 * C10311 -
              C36633 * C10308 - C48066 * C10312 + C36627 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C22556) * C49133 +
            ((C38840 + C38841 + C38842) * C49281 +
             (C38263 + C38262 + C38261) * C22556) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C22556 +
             (C38261 + C38262 + C38263) * C49281) *
                C49428 +
            ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
               C821 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C22556) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C22556) *
                C49428) *
               C49480) *
              C49190 * C549 +
          ((((C37076 + C37075 + C37074) * C22556 +
             (C38481 + C38480 + C38479) * C49281) *
                C49428 +
            ((C37073 + C37072 + C37071) * C22556 +
             (C48021 * C728 - C48060 * C721 - C48021 * C729 + C49319 * C736 +
              C48018 * C2393 - C48053 * C2383 - C48018 * C2394 +
              C49326 * C2401 + C48066 * C3393 - C36633 * C3388 -
              C48066 * C3394 + C36627 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C22556) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C22556) * C49428) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C22556 +
             (C38261 + C38262 + C38263) * C49281) *
                C49428 +
            ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
               C821 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C22556) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C22556) *
                C49428) *
               C49480) *
              C265 +
          ((((C39057 + C39056 + C39055) * C22556 +
             (C48021 * C1488 - C48060 * C1482 - C48021 * C1489 +
              C49319 * C1494 + C48018 * C2387 - C48053 * C2380 -
              C48018 * C2388 + C49326 * C2398 + C48066 * C10309 -
              C36633 * C10307 - C48066 * C10310 + C36627 * C10313) *
                 C49281) *
                C49428 +
            ((C38481 + C38480 + C38479) * C22556 +
             (C48021 * C1486 - C48060 * C1481 - C48021 * C1487 +
              C49319 * C1493 + C48018 * C2391 - C48053 * C2382 -
              C48018 * C2392 + C49326 * C2400 + C48066 * C10311 -
              C36633 * C10308 - C48066 * C10312 + C36627 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C22556) * C49133 +
            ((C38840 + C38841 + C38842) * C49281 +
             (C38263 + C38262 + C38261) * C22556) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C22556 +
            (C38261 + C38262 + C38263) * C49281) *
               C49428 +
           ((C36689 + C36690 + C36691) * C22556 + C38250 * C49281) * C49133) *
              C967 -
          (((C38479 + C38480 + C38481) * C49281 +
            (C37074 + C37075 + C37076) * C22556) *
               C49133 +
           ((C39055 + C39056 + C39057) * C49281 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C22556) *
               C49428) *
              C968 +
          (((C48021 * C975 - C48060 * C970 - C48021 * C976 + C49319 * C985 +
             C48018 * C2934 - C48053 * C2928 - C48018 * C2935 + C49326 * C2940 +
             C48066 * C3803 - C36633 * C3800 - C48066 * C3804 +
             C36627 * C3809) *
                C22556 +
            (C48021 * C2385 - C48060 * C2379 - C48021 * C2386 + C49319 * C2397 +
             C48018 * C3389 - C48053 * C3386 - C48018 * C3390 + C49326 * C3395 +
             C48066 * C11190 - C36633 * C11188 - C48066 * C11191 +
             C36627 * C11194) *
                C49281) *
               C49428 +
           ((C48021 * C977 - C48060 * C971 - C48021 * C978 + C49319 * C986 +
             C48018 * C2932 - C48053 * C2927 - C48018 * C2933 + C49326 * C2939 +
             C48066 * C3805 - C36633 * C3801 - C48066 * C3806 +
             C36627 * C3810) *
                C22556 +
            (C48021 * C2389 - C48060 * C2381 - C48021 * C2390 + C49319 * C2399 +
             C48018 * C3391 - C48053 * C3387 - C48018 * C3392 + C49326 * C3396 +
             C48066 * C17922 - C36633 * C17921 - C48066 * C17923 +
             C36627 * C17924) *
                C49281) *
               C49133) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C22556 +
            (C32358 + C32359) * C49281) *
               C49512 +
           ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
           C39740 * C49472) *
              C49207 * C49190 * C110 -
          (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
           (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
           (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
              C49207 * C49190 * C111 +
          (C39740 * C49512 +
           (C30887 * C22556 + (C31057 + C31056) * C49281) * C49499 +
           ((C30885 + C30884) * C22556 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49281) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49522 +
           (C32358 + C32359) * C49518 + C32926 * C49508 +
           (C32940 + C32939) * C49458) *
              C49123 * C49207 * C49190 * C110 -
          ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
           (C30879 + C30878) * C49522) *
              C49123 * C49207 * C49190 * C111 +
          (C30886 * C49522 + C35042 * C49518 + (C32123 + C32122) * C49508 +
           (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 + C30823 * C1296 +
            C30827 * C1958 - C30828 * C1953 - C30827 * C1959 + C49323 * C1962) *
               C49458) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C49207 * C265 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C49207 * C49478) *
              C267 +
          (((C32334 * C22556 + C32335 * C49281) * C49512 +
            (C35042 * C22556 + (C32123 + C32122) * C49281) * C49499 +
            ((C31057 + C31056) * C22556 +
             (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
              C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
              C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 +
            (C32940 + C32939) * C49458) *
               C49123 * C49207 * C265 -
           ((C30827 * C9343 - C30828 * C9341 - C30827 * C9344 + C49323 * C9347 +
             C30825 * C1789 - C30826 * C1786 - C30825 * C1790 +
             C30823 * C1795) *
                C49458 +
            (C32939 + C32940) * C49508 + (C32361 + C32360) * C49518 +
            (C32359 + C32358) * C49522) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C32334 * C49522 + C32335 * C49518 + (C32363 + C32362) * C49508 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C407 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C49190 * C267 +
          ((((C31233 + C31232) * C22556 + (C32585 + C32584) * C49281) * C49512 +
            ((C31231 + C31230) * C22556 + (C35447 + C35446) * C49281) * C49499 +
            ((C31229 + C31228) * C22556 +
             (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
              C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
              C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 +
            (C32940 + C32939) * C49458) *
               C49123 * C407 -
           ((C30827 * C9832 - C30828 * C9830 - C30827 * C9833 + C49323 * C9836 +
             C30825 * C1954 - C30826 * C1951 - C30825 * C1955 +
             C30823 * C1960) *
                C49458 +
            (C33159 + C33160) * C49508 + (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C31233 + C31232) * C49522 + (C32585 + C32584) * C49518 +
            (C32583 + C32582) * C49508 +
            (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 + C30823 * C1961 +
             C30827 * C10095 - C30828 * C10094 - C30827 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C49207 * C547 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C49207 * C49478) *
              C549 +
          (((C32334 * C22556 + C32335 * C49281) * C49512 +
            (C35042 * C22556 + (C32123 + C32122) * C49281) * C49499 +
            ((C31057 + C31056) * C22556 +
             (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
              C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
              C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 +
            (C32940 + C32939) * C49458) *
               C49123 * C49207 * C547 -
           ((C30827 * C9343 - C30828 * C9341 - C30827 * C9344 + C49323 * C9347 +
             C30825 * C1789 - C30826 * C1786 - C30825 * C1790 +
             C30823 * C1795) *
                C49458 +
            (C32939 + C32940) * C49508 + (C32361 + C32360) * C49518 +
            (C32359 + C32358) * C49522) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C32334 * C49522 + C32335 * C49518 + (C32363 + C32362) * C49508 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C22556 +
            (C32358 + C32359) * C49281) *
               C49512 +
           ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
           C39740 * C49472) *
              C49207 * C613 -
          (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
           (C32344 * C49281 + C32345 * C22556) * C49499 +
           ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) * C49512) *
              C49207 * C614 +
          ((C32926 * C22556 + (C32940 + C32939) * C49281) * C49512 +
           (C32335 * C22556 + (C32363 + C32362) * C49281) * C49499 +
           ((C32123 + C32122) * C22556 +
            (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 + C30823 * C1296 +
             C30827 * C1958 - C30828 * C1953 - C30827 * C1959 +
             C49323 * C1962) *
                C49281) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49522 +
           (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
              C49123 * C49207 * C613 -
          ((C41796 + C41797) * C49458 + (C32939 + C32940) * C49508 +
           (C32361 + C32360) * C49518 + (C32359 + C32358) * C49522) *
              C49123 * C49207 * C614 +
          (C32926 * C49522 + C41783 * C49518 + (C41797 + C41796) * C49508 +
           (C30825 * C9239 - C30826 * C9237 - C30825 * C9240 + C30823 * C9243 +
            C30827 * C9587 - C30828 * C9586 - C30827 * C9588 + C49323 * C9589) *
               C49458) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C407 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C547 +
          ((((C33162 + C33161) * C22556 + (C33160 + C33159) * C49281) * C49512 +
            ((C32585 + C32584) * C22556 + (C32583 + C32582) * C49281) * C49499 +
            ((C35447 + C35446) * C22556 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
               C49123 * C407 -
           ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
            (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C547 +
          (((C33162 + C33161) * C49522 + (C33160 + C33159) * C49518 +
            (C41941 + C41940) * C49508 +
            (C30825 * C9343 - C30826 * C9341 - C30825 * C9344 + C30823 * C9347 +
             C30827 * C9834 - C30828 * C9831 - C30827 * C9835 +
             C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C41796 + C41797) * C49458 + (C32939 + C32940) * C49508 +
            (C32361 + C32360) * C49518 + (C32359 + C32358) * C49522) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C821 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C49190 * C549 +
          ((((C31233 + C31232) * C22556 + (C32585 + C32584) * C49281) * C49512 +
            ((C31231 + C31230) * C22556 + (C35447 + C35446) * C49281) * C49499 +
            ((C31229 + C31228) * C22556 +
             (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
              C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
              C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C22556) * C49472 +
            (C35239 * C49281 + (C30881 + C30880) * C22556) * C49499 +
            (C32345 * C49281 + (C30879 + C30878) * C22556) * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
               C49123 * C821 -
           ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
            (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C31233 + C31232) * C49522 + (C32585 + C32584) * C49518 +
            (C32583 + C32582) * C49508 +
            (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 + C30823 * C1961 +
             C30827 * C10095 - C30828 * C10094 - C30827 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C32362 + C32363) * C49458 + C32344 * C49508 + C32345 * C49518 +
            (C30879 + C30878) * C49522) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C22556 +
             (C32358 + C32359) * C49281) *
                C49512 +
            ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
            C39740 * C49472) *
               C821 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C22556) *
                C49512) *
               C49480) *
              C265 +
          ((((C33162 + C33161) * C22556 + (C33160 + C33159) * C49281) * C49512 +
            ((C32585 + C32584) * C22556 + (C32583 + C32582) * C49281) * C49499 +
            ((C35447 + C35446) * C22556 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C32122 + C32123) * C49281 + C35239 * C22556) * C49472 +
            (C32344 * C49281 + C32345 * C22556) * C49499 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C22556) *
                C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49522 +
            (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
               C49123 * C821 -
           ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
            (C33161 + C33162) * C49518 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49522) *
               C49123 * C49480) *
              C265 +
          (((C33162 + C33161) * C49522 + (C33160 + C33159) * C49518 +
            (C41941 + C41940) * C49508 +
            (C30825 * C9343 - C30826 * C9341 - C30825 * C9344 + C30823 * C9347 +
             C30827 * C9834 - C30828 * C9831 - C30827 * C9835 +
             C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C41796 + C41797) * C49458 + (C32939 + C32940) * C49508 +
            (C32361 + C32360) * C49518 + (C32359 + C32358) * C49522) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C22556 +
            (C32358 + C32359) * C49281) *
               C49512 +
           ((C30878 + C30879) * C22556 + C32334 * C49281) * C49499 +
           C39740 * C49472) *
              C967 -
          (((C35446 + C35447) * C49281 + (C31230 + C31231) * C22556) * C49472 +
           ((C32584 + C32585) * C49281 + (C31232 + C31233) * C22556) * C49499 +
           ((C33161 + C33162) * C49281 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C22556) *
               C49512) *
              C968 +
          (((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
             C30827 * C2934 - C30828 * C2928 - C30827 * C2935 +
             C49323 * C2940) *
                C22556 +
            (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
             C30827 * C3389 - C30828 * C3386 - C30827 * C3390 +
             C49323 * C3395) *
                C49281) *
               C49512 +
           ((C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
             C30827 * C2932 - C30828 * C2927 - C30827 * C2933 +
             C49323 * C2939) *
                C22556 +
            (C30825 * C2389 - C30826 * C2381 - C30825 * C2390 + C30823 * C2399 +
             C30827 * C3391 - C30828 * C3387 - C30827 * C3392 +
             C49323 * C3396) *
                C49281) *
               C49499 +
           ((C30825 * C979 - C30826 * C972 - C30825 * C980 + C30823 * C987 +
             C30827 * C2930 - C30828 * C2926 - C30827 * C2931 +
             C49323 * C2938) *
                C22556 +
            (C30825 * C2393 - C30826 * C2383 - C30825 * C2394 + C30823 * C2401 +
             C30827 * C3393 - C30828 * C3388 - C30827 * C3394 +
             C49323 * C3397) *
                C49281) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49522 +
           (C32358 + C32359) * C49518 + C32926 * C49508 + C41783 * C49458) *
              C49123 * C967 -
          ((C41940 + C41941) * C49458 + (C33159 + C33160) * C49508 +
           (C33161 + C33162) * C49518 +
           (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
            C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
               C49522) *
              C49123 * C968 +
          ((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
            C30827 * C2934 - C30828 * C2928 - C30827 * C2935 + C49323 * C2940) *
               C49522 +
           (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
            C30827 * C3389 - C30828 * C3386 - C30827 * C3390 + C49323 * C3395) *
               C49518 +
           (C30825 * C2387 - C30826 * C2380 - C30825 * C2388 + C30823 * C2398 +
            C30827 * C10309 - C30828 * C10307 - C30827 * C10310 +
            C49323 * C10313) *
               C49508 +
           (C30825 * C9832 - C30826 * C9830 - C30825 * C9833 + C30823 * C9836 +
            C30827 * C10741 - C30828 * C10740 - C30827 * C10742 +
            C49323 * C10743) *
               C49458) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C11294 +
            C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
               C49428 +
           (C11301 + C11302 + C11303 + C11304) * C49133) *
              C49207 * C49190 * C110 -
          ((C11305 + C11306 + C11307 + C11308) * C49133 +
           (C11304 + C11303 + C11302 + C11301) * C49428) *
              C49207 * C49190 * C111 +
          ((C11308 + C11307 + C11306 + C11305) * C49428 +
           (C176 * C11294 + C319 * C11295 + C1134 * C11296 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49458) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49449 +
            C1329 * C49281) *
               C3912 +
           (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
              C49207 * C49190 * C110 -
          ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
           (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
              C49207 * C49190 * C111 +
          (C3925 * C3912 + C3926 * C3913 + (C3924 + C3923) * C3914 +
           (C178 * C49449 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) *
                C49281) *
               C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49449 +
            (C16739 + C16740 + C16741) * C49281) *
               C49428 +
           ((C15237 + C15238 + C15239) * C49449 +
            (C15436 + C15435 + C15434) * C49281) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C15431 + C15432 + C15433) * C49281 +
            (C15242 + C15241 + C15240) * C49449) *
               C49133 +
           ((C15434 + C15435 + C15436) * C49281 +
            (C15239 + C15238 + C15237) * C49449) *
               C49428) *
              C49207 * C49190 * C111 +
          ((C15247 * C49449 + (C15433 + C15432 + C15431) * C49281) * C49428 +
           ((C15245 + C15244 + C15243) * C49449 +
            (C15176 * C277 - C15177 * C270 - C15176 * C278 + C15173 * C288 +
             C15178 * C730 - C15179 * C722 - C15178 * C731 + C15174 * C737 +
             C15180 * C2735 - C15181 * C2734 - C15180 * C2736 +
             C49486 * C2737) *
                C49281) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C49207 * C265 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C11442 + C11441 + C11440 + C11439) * C49428 +
            (C320 * C11294 + C1133 * C11295 + C1331 * C11296 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C49207 * C265 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C49207 * C49478) *
              C267 +
          (((C4062 + C4061) * C3912 + (C4060 + C4059) * C3913 +
            (C4058 + C4057) * C3914 +
            (C318 * C49449 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
              C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
              C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                 C49449 +
             (C16739 + C16740 + C16741) * C49281) *
                C49428 +
            ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
               C49207 * C265 -
           (((C16747 + C16746 + C16745) * C49281 + C18819 * C49449) * C49133 +
            ((C16744 + C16743 + C16742) * C49281 +
             (C16741 + C16740 + C16739) * C49449) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C18818 * C49449 + (C16745 + C16746 + C16747) * C49281) * C49428 +
            ((C15433 + C15432 + C15431) * C49449 +
             (C15176 * C626 - C15177 * C619 - C15176 * C627 + C15173 * C634 +
              C15178 * C1484 - C15179 * C1480 - C15178 * C1485 +
              C15174 * C1492 + C15180 * C2395 - C15181 * C2384 -
              C15180 * C2396 + C49486 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C15431 + C15432 + C15433) * C49281 +
             (C15242 + C15241 + C15240) * C49449) *
                C49133 +
            (C18819 * C49281 + (C15239 + C15238 + C15237) * C49449) * C49428) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C407 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C49190 * C267 +
          (((C11579 + C11578 + C11577 + C11583) * C49428 +
            (C460 * C11294 + C1524 * C11295 + C1523 * C11296 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C407 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C49190 * C267 +
          (((C4201 + C4200) * C3912 + (C4199 + C4198) * C3913 +
            (C4197 + C4205) * C3914 +
            (C458 * C49449 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
              C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
              C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                 C49449 +
             (C16739 + C16740 + C16741) * C49281) *
                C49428 +
            ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
               C407 -
           (((C19032 + C19033 + C19034) * C49281 +
             (C15622 + C15623 + C15624) * C49449) *
                C49133 +
            ((C17358 + C17359 + C17360) * C49281 +
             (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 +
              C49486 * C2940 + C15178 * C975 - C15179 * C970 - C15178 * C976 +
              C15174 * C985 + C15176 * C423 - C15177 * C413 - C15176 * C424 +
              C15173 * C431) *
                 C49449) *
                C49428) *
               C49480) *
              C49190 * C267 +
          ((((C15624 + C15623 + C15622) * C49449 +
             (C19034 + C19033 + C19032) * C49281) *
                C49428 +
            ((C15621 + C15620 + C15619) * C49449 +
             (C15176 * C728 - C15177 * C721 - C15176 * C729 + C15173 * C736 +
              C15178 * C2393 - C15179 * C2383 - C15178 * C2394 +
              C15174 * C2401 + C15180 * C3393 - C15181 * C3388 -
              C15180 * C3394 + C49486 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C15431 + C15432 + C15433) * C49281 +
             (C15242 + C15241 + C15240) * C49449) *
                C49133 +
            (C18819 * C49281 + (C15239 + C15238 + C15237) * C49449) * C49428) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C49207 * C547 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C11442 + C11441 + C11440 + C11439) * C49428 +
            (C320 * C11294 + C1133 * C11295 + C1331 * C11296 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C49207 * C547 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C49207 * C49478) *
              C549 +
          (((C4062 + C4061) * C3912 + (C4060 + C4059) * C3913 +
            (C4058 + C4057) * C3914 +
            (C318 * C49449 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
              C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
              C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                 C49449 +
             (C16739 + C16740 + C16741) * C49281) *
                C49428 +
            ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
               C49207 * C547 -
           (((C16747 + C16746 + C16745) * C49281 + C18819 * C49449) * C49133 +
            ((C16744 + C16743 + C16742) * C49281 +
             (C16741 + C16740 + C16739) * C49449) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C18818 * C49449 + (C16745 + C16746 + C16747) * C49281) * C49428 +
            ((C15433 + C15432 + C15431) * C49449 +
             (C15176 * C626 - C15177 * C619 - C15176 * C627 + C15173 * C634 +
              C15178 * C1484 - C15179 * C1480 - C15178 * C1485 +
              C15174 * C1492 + C15180 * C2395 - C15181 * C2384 -
              C15180 * C2396 + C49486 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C15431 + C15432 + C15433) * C49281 +
             (C15242 + C15241 + C15240) * C49449) *
                C49133 +
            (C18819 * C49281 + (C15239 + C15238 + C15237) * C49449) * C49428) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C11294 +
            C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
               C49428 +
           (C11301 + C11302 + C11303 + C11304) * C49133) *
              C49207 * C613 -
          ((C11439 + C11440 + C11441 + C11442) * C49133 +
           (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 + C1329 * C11294) *
               C49428) *
              C49207 * C614 +
          ((C1330 * C11294 + C1805 * C11295 + C9258 * C11296 + C9504 * C49458) *
               C49428 +
           (C1132 * C11294 + C1332 * C11295 + C9259 * C11296 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C49458) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49449 +
            C1329 * C49281) *
               C3912 +
           (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
              C49207 * C613 -
          ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
           (C4061 + C4062) * C3913 +
           (C1330 * C49281 + C1329 * C49449) * C3912) *
              C49207 * C614 +
          ((C1330 * C49449 + C1805 * C49281) * C3912 +
           (C1132 * C49449 + C1332 * C49281) * C3913 +
           (C1133 * C49449 + C1331 * C49281) * C3914 +
           (C1134 * C49449 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49281) *
               C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49449 +
            (C16739 + C16740 + C16741) * C49281) *
               C49428 +
           ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
              C49207 * C613 -
          (((C16747 + C16746 + C16745) * C49281 + C18819 * C49449) * C49133 +
           ((C16744 + C16743 + C16742) * C49281 +
            (C16741 + C16740 + C16739) * C49449) *
               C49428) *
              C49207 * C614 +
          ((C17163 * C49449 + (C17172 + C17171 + C17170) * C49281) * C49428 +
           ((C16745 + C16746 + C16747) * C49449 +
            (C15176 * C1290 - C15177 * C1285 - C15176 * C1291 + C15173 * C1297 +
             C15178 * C1956 - C15179 * C1952 - C15178 * C1957 + C15174 * C1961 +
             C15180 * C10095 - C15181 * C10094 - C15180 * C10096 +
             C49486 * C10097) *
                C49281) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C407 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C547 +
          (((C1977 * C11294 + C1976 * C11295 + C9604 * C11296 +
             C9603 * C49458) *
                C49428 +
            (C1526 * C11294 + C1525 * C11295 + C11582 * C11296 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C407 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C547 +
          (((C1977 * C49449 + C1976 * C49281) * C3912 +
            (C1526 * C49449 + C1525 * C49281) * C3913 +
            (C1524 * C49449 + C1523 * C49281) * C3914 +
            (C4204 * C49449 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
              C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
              C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                 C49449 +
             (C16739 + C16740 + C16741) * C49281) *
                C49428 +
            ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
               C407 -
           (((C19032 + C19033 + C19034) * C49281 +
             (C15622 + C15623 + C15624) * C49449) *
                C49133 +
            ((C17358 + C17359 + C17360) * C49281 +
             (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 +
              C49486 * C2940 + C15178 * C975 - C15179 * C970 - C15178 * C976 +
              C15174 * C985 + C15176 * C423 - C15177 * C413 - C15176 * C424 +
              C15173 * C431) *
                 C49449) *
                C49428) *
               C49480) *
              C547 +
          ((((C17360 + C17359 + C17358) * C49449 +
             (C17357 + C17356 + C17355) * C49281) *
                C49428 +
            ((C19034 + C19033 + C19032) * C49449 +
             (C15176 * C1486 - C15177 * C1481 - C15176 * C1487 +
              C15173 * C1493 + C15178 * C2391 - C15179 * C2382 -
              C15178 * C2392 + C15174 * C2400 + C15180 * C10311 -
              C15181 * C10308 - C15180 * C10312 + C49486 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C16747 + C16746 + C16745) * C49281 + C18819 * C49449) * C49133 +
            ((C16744 + C16743 + C16742) * C49281 +
             (C16741 + C16740 + C16739) * C49449) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C821 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C49190 * C549 +
          (((C11579 + C11578 + C11577 + C11583) * C49428 +
            (C460 * C11294 + C1524 * C11295 + C1523 * C11296 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C821 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C49190 * C549 +
          (((C4201 + C4200) * C3912 + (C4199 + C4198) * C3913 +
            (C4197 + C4205) * C3914 +
            (C458 * C49449 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
              C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
              C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                 C49449 +
             (C16739 + C16740 + C16741) * C49281) *
                C49428 +
            ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
               C821 -
           (((C19032 + C19033 + C19034) * C49281 +
             (C15622 + C15623 + C15624) * C49449) *
                C49133 +
            ((C17358 + C17359 + C17360) * C49281 +
             (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 +
              C49486 * C2940 + C15178 * C975 - C15179 * C970 - C15178 * C976 +
              C15174 * C985 + C15176 * C423 - C15177 * C413 - C15176 * C424 +
              C15173 * C431) *
                 C49449) *
                C49428) *
               C49480) *
              C49190 * C549 +
          ((((C15624 + C15623 + C15622) * C49449 +
             (C19034 + C19033 + C19032) * C49281) *
                C49428 +
            ((C15621 + C15620 + C15619) * C49449 +
             (C15176 * C728 - C15177 * C721 - C15176 * C729 + C15173 * C736 +
              C15178 * C2393 - C15179 * C2383 - C15178 * C2394 +
              C15174 * C2401 + C15180 * C3393 - C15181 * C3388 -
              C15180 * C3394 + C49486 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C15431 + C15432 + C15433) * C49281 +
             (C15242 + C15241 + C15240) * C49449) *
                C49133 +
            (C18819 * C49281 + (C15239 + C15238 + C15237) * C49449) * C49428) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C821 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C265 +
          (((C1977 * C11294 + C1976 * C11295 + C9604 * C11296 +
             C9603 * C49458) *
                C49428 +
            (C1526 * C11294 + C1525 * C11295 + C11582 * C11296 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C821 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C265 +
          (((C1977 * C49449 + C1976 * C49281) * C3912 +
            (C1526 * C49449 + C1525 * C49281) * C3913 +
            (C1524 * C49449 + C1523 * C49281) * C3914 +
            (C4204 * C49449 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
              C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
              C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                 C49449 +
             (C16739 + C16740 + C16741) * C49281) *
                C49428 +
            ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
               C821 -
           (((C19032 + C19033 + C19034) * C49281 +
             (C15622 + C15623 + C15624) * C49449) *
                C49133 +
            ((C17358 + C17359 + C17360) * C49281 +
             (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 +
              C49486 * C2940 + C15178 * C975 - C15179 * C970 - C15178 * C976 +
              C15174 * C985 + C15176 * C423 - C15177 * C413 - C15176 * C424 +
              C15173 * C431) *
                 C49449) *
                C49428) *
               C49480) *
              C265 +
          ((((C17360 + C17359 + C17358) * C49449 +
             (C17357 + C17356 + C17355) * C49281) *
                C49428 +
            ((C19034 + C19033 + C19032) * C49449 +
             (C15176 * C1486 - C15177 * C1481 - C15176 * C1487 +
              C15173 * C1493 + C15178 * C2391 - C15179 * C2382 -
              C15178 * C2392 + C15174 * C2400 + C15180 * C10311 -
              C15181 * C10308 - C15180 * C10312 + C49486 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C16747 + C16746 + C16745) * C49281 + C18819 * C49449) * C49133 +
            ((C16744 + C16743 + C16742) * C49281 +
             (C16741 + C16740 + C16739) * C49449) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C11294 +
            C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
               C49428 +
           (C11301 + C11302 + C11303 + C11304) * C49133) *
              C967 -
          ((C11583 + C11577 + C11578 + C11579) * C49133 +
           (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C11294) *
               C49428) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C11294 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C11295 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C11296 +
            (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
                C49458) *
               C49428 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C11294 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C11295 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C11296 +
            (C113 * C10095 - C114 * C10094 - C113 * C10096 + C49236 * C10097) *
                C49458) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49449 +
            C1329 * C49281) *
               C3912 +
           (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
              C967 -
          ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
           (C4200 + C4201) * C3913 +
           (C1977 * C49281 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49449) *
               C3912) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49449 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49281) *
               C3912 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49449 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49281) *
               C3913 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49449 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49281) *
               C3914 +
           ((C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C49449 +
            (C113 * C2735 - C114 * C2734 - C113 * C2736 + C49236 * C2737) *
                C49281) *
               C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49449 +
            (C16739 + C16740 + C16741) * C49281) *
               C49428 +
           ((C15237 + C15238 + C15239) * C49449 + C18818 * C49281) * C49133) *
              C967 -
          (((C19032 + C19033 + C19034) * C49281 +
            (C15622 + C15623 + C15624) * C49449) *
               C49133 +
           ((C17358 + C17359 + C17360) * C49281 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49449) *
               C49428) *
              C968 +
          (((C15176 * C975 - C15177 * C970 - C15176 * C976 + C15173 * C985 +
             C15178 * C2934 - C15179 * C2928 - C15178 * C2935 + C15174 * C2940 +
             C15180 * C3803 - C15181 * C3800 - C15180 * C3804 +
             C49486 * C3809) *
                C49449 +
            (C15176 * C2385 - C15177 * C2379 - C15176 * C2386 + C15173 * C2397 +
             C15178 * C3389 - C15179 * C3386 - C15178 * C3390 + C15174 * C3395 +
             C15180 * C11190 - C15181 * C11188 - C15180 * C11191 +
             C49486 * C11194) *
                C49281) *
               C49428 +
           ((C15176 * C977 - C15177 * C971 - C15176 * C978 + C15173 * C986 +
             C15178 * C2932 - C15179 * C2927 - C15178 * C2933 + C15174 * C2939 +
             C15180 * C3805 - C15181 * C3801 - C15180 * C3806 +
             C49486 * C3810) *
                C49449 +
            (C15176 * C2389 - C15177 * C2381 - C15176 * C2390 + C15173 * C2399 +
             C15178 * C3391 - C15179 * C3387 - C15178 * C3392 + C15174 * C3396 +
             C15180 * C17922 - C15181 * C17921 - C15180 * C17923 +
             C49486 * C17924) *
                C49281) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C11294 +
           (C6529 + C6530) * C11295 + C13204 * C11296 +
           (C13218 + C13217) * C49458) *
              C49123 * C49207 * C49190 * C110 -
          ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
           (C5075 + C5074) * C11294) *
              C49123 * C49207 * C49190 * C111 +
          (C5082 * C11294 + C6293 * C11295 + (C6532 + C6531) * C11296 +
           (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
            C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
               C49458) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49449 +
            (C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291 +
             C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734) *
                C49281) *
               C1103 +
           ((C5074 + C5075) * C49449 + (C5257 + C5256) * C49281) * C1104 +
           C6295 * C49472) *
              C49207 * C49190 * C110 -
          (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
           ((C5254 + C5255) * C49281 + (C5077 + C5076) * C49449) * C1104 +
           ((C5256 + C5257) * C49281 + (C5075 + C5074) * C49449) * C1103) *
              C49207 * C49190 * C111 +
          (C6295 * C1103 + (C5083 * C49449 + (C5253 + C5252) * C49281) * C1104 +
           ((C5081 + C5080) * C49449 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49281) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
            C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
            C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
            C20210 * C2934 - C20211 * C2928 - C20210 * C2935 + C49465 * C2940) *
               C49449 +
           (C20204 * C283 - C20205 * C273 - C20204 * C284 + C20200 * C291 +
            C20206 * C724 - C20207 * C719 - C20206 * C725 + C20201 * C734 +
            C20208 * C2385 - C20209 * C2379 - C20208 * C2386 + C20202 * C2397 +
            C20210 * C3389 - C20211 * C3386 - C20210 * C3390 + C49465 * C3395) *
               C49281) *
              C49123 * C49207 * C49190 * C110 -
          ((C20423 + C20424 + C20425 + C20426) * C49281 +
           (C20264 + C20263 + C20262 + C20261) * C49449) *
              C49123 * C49207 * C49190 * C111 +
          ((C20268 + C20267 + C20266 + C20265) * C49449 +
           (C20204 * C279 - C20205 * C271 - C20204 * C280 + C20200 * C289 +
            C20206 * C728 - C20207 * C721 - C20206 * C729 + C20201 * C736 +
            C20208 * C2393 - C20209 * C2383 - C20208 * C2394 + C20202 * C2401 +
            C20210 * C3393 - C20211 * C3388 - C20210 * C3394 + C49465 * C3397) *
               C49281) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 +
            (C13218 + C13217) * C49458) *
               C49123 * C49207 * C265 -
           ((C5023 * C9343 - C5024 * C9341 - C5023 * C9344 + C49323 * C9347 +
             C5021 * C1789 - C5022 * C1786 - C5021 * C1790 + C49451 * C1795) *
                C49458 +
            (C13217 + C13218) * C11296 + (C7109 + C7110) * C11295 +
            (C6530 + C6529) * C11294) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C6498 * C11294 + C12640 * C11295 + (C12655 + C12654) * C11296 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C49207 * C265 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C5023 * C1488 - C5024 * C1482 - C5023 * C1489 + C49323 * C1494 +
              C5021 * C622 - C5022 * C617 - C5021 * C623 + C49451 * C632) *
                 C49281 +
             (C6530 + C6529) * C49449) *
                C1103) *
               C49207 * C49478) *
              C267 +
          (((C6498 * C49449 + (C6534 + C6533) * C49281) * C1103 +
            (C6293 * C49449 + (C6532 + C6531) * C49281) * C1104 +
            ((C5253 + C5252) * C49449 +
             (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
              C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49449 +
            (C21553 + C21554 + C21555 + C21556) * C49281) *
               C49123 * C49207 * C265 -
           ((C20210 * C10309 - C20211 * C10307 - C20210 * C10310 +
             C49465 * C10313 + C20208 * C2387 - C20209 * C2380 -
             C20208 * C2388 + C20202 * C2398 + C20206 * C1488 - C20207 * C1482 -
             C20206 * C1489 + C20201 * C1494 + C20204 * C622 - C20205 * C617 -
             C20204 * C623 + C20200 * C632) *
                C49281 +
            (C21556 + C21555 + C21554 + C21553) * C49449) *
               C49123 * C49207 * C49478) *
              C267 +
          (((C20426 + C20425 + C20424 + C20423) * C49449 +
            (C20204 * C624 - C20205 * C618 - C20204 * C625 + C20200 * C633 +
             C20206 * C1486 - C20207 * C1481 - C20206 * C1487 + C20201 * C1493 +
             C20208 * C2391 - C20209 * C2382 - C20208 * C2392 + C20202 * C2400 +
             C20210 * C10311 - C20211 * C10308 - C20210 * C10312 +
             C49465 * C10314) *
                C49281) *
               C49123 * C49207 * C49478 -
           ((C20423 + C20424 + C20425 + C20426) * C49281 +
            (C20264 + C20263 + C20262 + C20261) * C49449) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 +
            (C13218 + C13217) * C49458) *
               C49123 * C407 -
           ((C5023 * C9832 - C5024 * C9830 - C5023 * C9833 + C49323 * C9836 +
             C5021 * C1954 - C5022 * C1951 - C5021 * C1955 + C49451 * C1960) *
                C49458 +
            (C13425 + C13426) * C11296 + (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C5429 + C5428) * C11294 + (C6756 + C6755) * C11295 +
            (C12863 + C12862) * C11296 +
            (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
             C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C407 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C5023 * C2385 - C5024 * C2379 - C5023 * C2386 + C49323 * C2397 +
              C5021 * C724 - C5022 * C719 - C5021 * C725 + C49451 * C734) *
                 C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C49190 * C267 +
          ((((C5429 + C5428) * C49449 + (C6756 + C6755) * C49281) * C1103 +
            ((C5427 + C5426) * C49449 + (C6754 + C6753) * C49281) * C1104 +
            ((C5425 + C5424) * C49449 +
             (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
              C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49449 +
            (C21553 + C21554 + C21555 + C21556) * C49281) *
               C49123 * C407 -
           ((C20210 * C11190 - C20211 * C11188 - C20210 * C11191 +
             C49465 * C11194 + C20208 * C3389 - C20209 * C3386 -
             C20208 * C3390 + C20202 * C3395 + C20206 * C2385 - C20207 * C2379 -
             C20206 * C2386 + C20201 * C2397 + C20204 * C724 - C20205 * C719 -
             C20204 * C725 + C20200 * C734) *
                C49281 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49449) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C20584 + C20583 + C20582 + C20581) * C49449 +
            (C20204 * C726 - C20205 * C720 - C20204 * C727 + C20200 * C735 +
             C20206 * C2389 - C20207 * C2381 - C20206 * C2390 + C20201 * C2399 +
             C20208 * C3391 - C20209 * C3387 - C20208 * C3392 + C20202 * C3396 +
             C20210 * C17922 - C20211 * C17921 - C20210 * C17923 +
             C49465 * C17924) *
                C49281) *
               C49123 * C49480 -
           ((C20423 + C20424 + C20425 + C20426) * C49281 +
            (C20264 + C20263 + C20262 + C20261) * C49449) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 +
            (C13218 + C13217) * C49458) *
               C49123 * C49207 * C547 -
           ((C5023 * C9343 - C5024 * C9341 - C5023 * C9344 + C49323 * C9347 +
             C5021 * C1789 - C5022 * C1786 - C5021 * C1790 + C49451 * C1795) *
                C49458 +
            (C13217 + C13218) * C11296 + (C7109 + C7110) * C11295 +
            (C6530 + C6529) * C11294) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C6498 * C11294 + C12640 * C11295 + (C12655 + C12654) * C11296 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C49207 * C547 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C5023 * C1488 - C5024 * C1482 - C5023 * C1489 + C49323 * C1494 +
              C5021 * C622 - C5022 * C617 - C5021 * C623 + C49451 * C632) *
                 C49281 +
             (C6530 + C6529) * C49449) *
                C1103) *
               C49207 * C49478) *
              C549 +
          (((C6498 * C49449 + (C6534 + C6533) * C49281) * C1103 +
            (C6293 * C49449 + (C6532 + C6531) * C49281) * C1104 +
            ((C5253 + C5252) * C49449 +
             (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
              C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49449 +
            (C21553 + C21554 + C21555 + C21556) * C49281) *
               C49123 * C49207 * C547 -
           ((C20210 * C10309 - C20211 * C10307 - C20210 * C10310 +
             C49465 * C10313 + C20208 * C2387 - C20209 * C2380 -
             C20208 * C2388 + C20202 * C2398 + C20206 * C1488 - C20207 * C1482 -
             C20206 * C1489 + C20201 * C1494 + C20204 * C622 - C20205 * C617 -
             C20204 * C623 + C20200 * C632) *
                C49281 +
            (C21556 + C21555 + C21554 + C21553) * C49449) *
               C49123 * C49207 * C49478) *
              C549 +
          (((C20426 + C20425 + C20424 + C20423) * C49449 +
            (C20204 * C624 - C20205 * C618 - C20204 * C625 + C20200 * C633 +
             C20206 * C1486 - C20207 * C1481 - C20206 * C1487 + C20201 * C1493 +
             C20208 * C2391 - C20209 * C2382 - C20208 * C2392 + C20202 * C2400 +
             C20210 * C10311 - C20211 * C10308 - C20210 * C10312 +
             C49465 * C10314) *
                C49281) *
               C49123 * C49207 * C49478 -
           ((C20423 + C20424 + C20425 + C20426) * C49281 +
            (C20264 + C20263 + C20262 + C20261) * C49449) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C11294 +
           (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
              C49123 * C49207 * C613 -
          ((C14560 + C14561) * C49458 + (C13217 + C13218) * C11296 +
           (C7109 + C7110) * C11295 + (C6530 + C6529) * C11294) *
              C49123 * C49207 * C614 +
          (C13204 * C11294 + C14547 * C11295 + (C14561 + C14560) * C11296 +
           (C5021 * C9239 - C5022 * C9237 - C5021 * C9240 + C49451 * C9243 +
            C5023 * C9587 - C5024 * C9586 - C5023 * C9588 + C49323 * C9589) *
               C49458) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49449 +
            (C6529 + C6530) * C49281) *
               C1103 +
           ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
           C6295 * C49472) *
              C49207 * C613 -
          (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
           ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
           ((C7109 + C7110) * C49281 + (C6530 + C6529) * C49449) * C1103) *
              C49207 * C614 +
          (((C7110 + C7109) * C49449 +
            (C5021 * C1292 - C5022 * C1286 - C5021 * C1293 + C49451 * C1298 +
             C5023 * C1954 - C5024 * C1951 - C5023 * C1955 + C49323 * C1960) *
                C49281) *
               C1103 +
           ((C6534 + C6533) * C49449 +
            (C5021 * C1290 - C5022 * C1285 - C5021 * C1291 + C49451 * C1297 +
             C5023 * C1956 - C5024 * C1952 - C5023 * C1957 + C49323 * C1961) *
                C49281) *
               C1104 +
           ((C6532 + C6531) * C49449 +
            (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
             C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                C49281) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
            C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
            C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
            C20210 * C2934 - C20211 * C2928 - C20210 * C2935 + C49465 * C2940) *
               C49449 +
           (C21553 + C21554 + C21555 + C21556) * C49281) *
              C49123 * C49207 * C613 -
          ((C21939 + C21940 + C21941 + C21942) * C49281 +
           (C21556 + C21555 + C21554 + C21553) * C49449) *
              C49123 * C49207 * C614 +
          ((C21942 + C21941 + C21940 + C21939) * C49449 +
           (C20204 * C1292 - C20205 * C1286 - C20204 * C1293 + C20200 * C1298 +
            C20206 * C1954 - C20207 * C1951 - C20206 * C1955 + C20201 * C1960 +
            C20208 * C9832 - C20209 * C9830 - C20208 * C9833 + C20202 * C9836 +
            C20210 * C10741 - C20211 * C10740 - C20210 * C10742 +
            C49465 * C10743) *
               C49281) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
               C49123 * C407 -
           ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
            (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C547 +
          (((C7318 + C7317) * C11294 + (C13426 + C13425) * C11295 +
            (C14705 + C14704) * C11296 +
            (C5021 * C9343 - C5022 * C9341 - C5021 * C9344 + C49451 * C9347 +
             C5023 * C9834 - C5024 * C9831 - C5023 * C9835 + C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C14560 + C14561) * C49458 + (C13217 + C13218) * C11296 +
            (C7109 + C7110) * C11295 + (C6530 + C6529) * C11294) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C407 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C547 +
          ((((C7318 + C7317) * C49449 +
             (C5021 * C1488 - C5022 * C1482 - C5021 * C1489 + C49451 * C1494 +
              C5023 * C2387 - C5024 * C2380 - C5023 * C2388 + C49323 * C2398) *
                 C49281) *
                C1103 +
            ((C6756 + C6755) * C49449 +
             (C5021 * C1486 - C5022 * C1481 - C5021 * C1487 + C49451 * C1493 +
              C5023 * C2391 - C5024 * C2382 - C5023 * C2392 + C49323 * C2400) *
                 C49281) *
                C1104 +
            ((C6754 + C6753) * C49449 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C49449) * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49449 +
            (C21553 + C21554 + C21555 + C21556) * C49281) *
               C49123 * C407 -
           ((C22097 + C22098 + C22099 + C22100) * C49281 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49449) *
               C49123 * C49480) *
              C547 +
          (((C22100 + C22099 + C22098 + C22097) * C49449 +
            (C20204 * C1488 - C20205 * C1482 - C20204 * C1489 + C20200 * C1494 +
             C20206 * C2387 - C20207 * C2380 - C20206 * C2388 + C20201 * C2398 +
             C20208 * C10309 - C20209 * C10307 - C20208 * C10310 +
             C20202 * C10313 + C20210 * C11192 - C20211 * C11189 -
             C20210 * C11193 + C49465 * C11195) *
                C49281) *
               C49123 * C49480 -
           ((C21939 + C21940 + C21941 + C21942) * C49281 +
            (C21556 + C21555 + C21554 + C21553) * C49449) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
               C49123 * C821 -
           ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
            (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C5429 + C5428) * C11294 + (C6756 + C6755) * C11295 +
            (C12863 + C12862) * C11296 +
            (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
             C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C821 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C49190 * C549 +
          ((((C5429 + C5428) * C49449 + (C6756 + C6755) * C49281) * C1103 +
            ((C5427 + C5426) * C49449 + (C6754 + C6753) * C49281) * C1104 +
            ((C5425 + C5424) * C49449 +
             (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
              C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49449 +
            (C21553 + C21554 + C21555 + C21556) * C49281) *
               C49123 * C821 -
           ((C22097 + C22098 + C22099 + C22100) * C49281 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49449) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C20584 + C20583 + C20582 + C20581) * C49449 +
            (C20204 * C726 - C20205 * C720 - C20204 * C727 + C20200 * C735 +
             C20206 * C2389 - C20207 * C2381 - C20206 * C2390 + C20201 * C2399 +
             C20208 * C3391 - C20209 * C3387 - C20208 * C3392 + C20202 * C3396 +
             C20210 * C17922 - C20211 * C17921 - C20210 * C17923 +
             C49465 * C17924) *
                C49281) *
               C49123 * C49480 -
           ((C20423 + C20424 + C20425 + C20426) * C49281 +
            (C20264 + C20263 + C20262 + C20261) * C49449) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
               C49123 * C821 -
           ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
            (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C265 +
          (((C7318 + C7317) * C11294 + (C13426 + C13425) * C11295 +
            (C14705 + C14704) * C11296 +
            (C5021 * C9343 - C5022 * C9341 - C5021 * C9344 + C49451 * C9347 +
             C5023 * C9834 - C5024 * C9831 - C5023 * C9835 + C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C14560 + C14561) * C49458 + (C13217 + C13218) * C11296 +
            (C7109 + C7110) * C11295 + (C6530 + C6529) * C11294) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C821 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C265 +
          ((((C7318 + C7317) * C49449 +
             (C5021 * C1488 - C5022 * C1482 - C5021 * C1489 + C49451 * C1494 +
              C5023 * C2387 - C5024 * C2380 - C5023 * C2388 + C49323 * C2398) *
                 C49281) *
                C1103 +
            ((C6756 + C6755) * C49449 +
             (C5021 * C1486 - C5022 * C1481 - C5021 * C1487 + C49451 * C1493 +
              C5023 * C2391 - C5024 * C2382 - C5023 * C2392 + C49323 * C2400) *
                 C49281) *
                C1104 +
            ((C6754 + C6753) * C49449 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C49449) * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49449 +
            (C21553 + C21554 + C21555 + C21556) * C49281) *
               C49123 * C821 -
           ((C22097 + C22098 + C22099 + C22100) * C49281 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49449) *
               C49123 * C49480) *
              C265 +
          (((C22100 + C22099 + C22098 + C22097) * C49449 +
            (C20204 * C1488 - C20205 * C1482 - C20204 * C1489 + C20200 * C1494 +
             C20206 * C2387 - C20207 * C2380 - C20206 * C2388 + C20201 * C2398 +
             C20208 * C10309 - C20209 * C10307 - C20208 * C10310 +
             C20202 * C10313 + C20210 * C11192 - C20211 * C11189 -
             C20210 * C11193 + C49465 * C11195) *
                C49281) *
               C49123 * C49480 -
           ((C21939 + C21940 + C21941 + C21942) * C49281 +
            (C21556 + C21555 + C21554 + C21553) * C49449) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C11294 +
           (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
              C49123 * C967 -
          ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
           (C7317 + C7318) * C11295 +
           (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
            C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
               C11294) *
              C49123 * C968 +
          ((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
            C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
               C11294 +
           (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
            C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
               C11295 +
           (C5021 * C2387 - C5022 * C2380 - C5021 * C2388 + C49451 * C2398 +
            C5023 * C10309 - C5024 * C10307 - C5023 * C10310 +
            C49323 * C10313) *
               C11296 +
           (C5021 * C9832 - C5022 * C9830 - C5021 * C9833 + C49451 * C9836 +
            C5023 * C10741 - C5024 * C10740 - C5023 * C10742 +
            C49323 * C10743) *
               C49458) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49449 +
            (C6529 + C6530) * C49281) *
               C1103 +
           ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
           C6295 * C49472) *
              C967 -
          (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
           ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
           ((C7317 + C7318) * C49281 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49449) *
               C1103) *
              C968 +
          (((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
             C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
                C49449 +
            (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
             C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
                C49281) *
               C1103 +
           ((C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
             C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
                C49449 +
            (C5021 * C2389 - C5022 * C2381 - C5021 * C2390 + C49451 * C2399 +
             C5023 * C3391 - C5024 * C3387 - C5023 * C3392 + C49323 * C3396) *
                C49281) *
               C1104 +
           ((C5021 * C979 - C5022 * C972 - C5021 * C980 + C49451 * C987 +
             C5023 * C2930 - C5024 * C2926 - C5023 * C2931 + C49323 * C2938) *
                C49449 +
            (C5021 * C2393 - C5022 * C2383 - C5021 * C2394 + C49451 * C2401 +
             C5023 * C3393 - C5024 * C3388 - C5023 * C3394 + C49323 * C3397) *
                C49281) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
            C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
            C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
            C20210 * C2934 - C20211 * C2928 - C20210 * C2935 + C49465 * C2940) *
               C49449 +
           (C21553 + C21554 + C21555 + C21556) * C49281) *
              C49123 * C967 -
          ((C22097 + C22098 + C22099 + C22100) * C49281 +
           (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
            C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
            C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
            C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
               C49449) *
              C49123 * C968 +
          ((C20204 * C975 - C20205 * C970 - C20204 * C976 + C20200 * C985 +
            C20206 * C2934 - C20207 * C2928 - C20206 * C2935 + C20201 * C2940 +
            C20208 * C3803 - C20209 * C3800 - C20208 * C3804 + C20202 * C3809 +
            C20210 * C18009 - C20211 * C18007 - C20210 * C18010 +
            C49465 * C18013) *
               C49449 +
           (C20204 * C2385 - C20205 * C2379 - C20204 * C2386 + C20200 * C2397 +
            C20206 * C3389 - C20207 * C3386 - C20206 * C3390 + C20201 * C3395 +
            C20208 * C11190 - C20209 * C11188 - C20208 * C11191 +
            C20202 * C11194 + C20210 * C18242 - C20211 * C18241 -
            C20210 * C18243 + C49465 * C18244) *
               C49281) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                   C49219 * C103 +
               C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                  C49207 * C49190 * C110 -
              (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
               C179 * C103) *
                  C49207 * C49190 * C111 +
              (C180 * C103 + C181 * C104 + C182 * C105 + C183 * C106 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C49236 * C142) *
                   C49219 * C107) *
                  C49207 * C49190 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49515 +
                (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) *
                    C49503 +
                (C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) *
                    C49483) *
                   C1103 +
               (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                  C49207 * C49190 * C110 -
              ((C1137 + C1123 + C1124) * C49472 +
               (C1136 + C1114 + C1113) * C1104 +
               (C1135 + C1108 + C1107) * C1103) *
                  C49207 * C49190 * C111 +
              (C1138 * C1103 + (C1124 + C1123 + C1137) * C1104 +
               (C177 * C49515 + C318 * C49503 +
                (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                    C49483) *
                   C49472) *
                  C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C49219 * C1103 +
           (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
              C49207 * C49190 * C110 -
          ((C2583 + C2584 + C2585) * C49219 * C49472 +
           (C2582 + C2581 + C2580) * C49219 * C1104 +
           (C2579 + C2578 + C2577) * C49219 * C1103) *
              C49207 * C49190 * C111 +
          (C2588 * C1103 + (C2585 + C2584 + C2583) * C49219 * C1104 +
           (C2516 * C130 - C2517 * C119 - C2516 * C131 + C49516 * C140 +
            C2518 * C415 - C2519 * C409 - C2518 * C416 + C49505 * C427 +
            C2520 * C983 - C2521 * C974 - C2520 * C984 + C49486 * C989) *
               C49219 * C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C49190 * C110 -
          ((C7975 + C7976 + C7977) * C49472 + (C7974 + C7973 + C7972) * C49499 +
           (C7971 + C7970 + C7969) * C49512) *
              C49207 * C49190 * C111 +
          (C7979 * C49512 + (C7977 + C7976 + C7975) * C49499 +
           (C177 * C7962 + C318 * C7963 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 +
           (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
               C9153) *
              C49123 * C49207 * C49190 * C110 -
          ((C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
               C9153 +
           C1332 * C9152 + C1132 * C9151 + C321 * C9150 + C174 * C9149) *
              C49123 * C49207 * C49190 * C111 +
          (C175 * C9149 + C320 * C9150 + C1133 * C9151 + C1331 * C9152 +
           (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
               C9153) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C7962 +
           (C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291 +
            C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
            C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397) *
               C7963 +
           (C2516 * C622 - C2517 * C617 - C2516 * C623 + C49516 * C632 +
            C2518 * C1488 - C2519 * C1482 - C2518 * C1489 + C49505 * C1494 +
            C2520 * C2387 - C2521 * C2380 - C2520 * C2388 + C49486 * C2398) *
               C49483) *
              C49123 * C49207 * C49190 * C110 -
          ((C2520 * C2391 - C2521 * C2382 - C2520 * C2392 + C49486 * C2400 +
            C2518 * C1486 - C2519 * C1481 - C2518 * C1487 + C49505 * C1493 +
            C2516 * C624 - C2517 * C618 - C2516 * C625 + C49516 * C633) *
               C49483 +
           (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
              C49123 * C49207 * C49190 * C111 +
          (C2587 * C7962 + (C2777 + C2776 + C2775) * C7963 +
           (C2516 * C626 - C2517 * C619 - C2516 * C627 + C49516 * C634 +
            C2518 * C1484 - C2519 * C1480 - C2518 * C1485 + C49505 * C1492 +
            C2520 * C2395 - C2521 * C2384 - C2520 * C2396 + C49486 * C2402) *
               C49483) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49219 * C49512 +
           (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
              C49207 * C49190 * C110 -
          ((C15243 + C15244 + C15245) * C49219 * C49472 +
           (C15242 + C15241 + C15240) * C49219 * C49499 +
           (C15239 + C15238 + C15237) * C49219 * C49512) *
              C49207 * C49190 * C111 +
          (C15248 * C49512 + (C15245 + C15244 + C15243) * C49219 * C49499 +
           (C15176 * C130 - C15177 * C119 - C15176 * C131 + C15173 * C140 +
            C15178 * C415 - C15179 * C409 - C15178 * C416 + C15174 * C427 +
            C15180 * C983 - C15181 * C974 - C15180 * C984 + C49486 * C989) *
               C49219 * C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49515 +
           (C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291 +
            C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
            C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397) *
               C49503 +
           (C15176 * C622 - C15177 * C617 - C15176 * C623 + C15173 * C632 +
            C15178 * C1488 - C15179 * C1482 - C15178 * C1489 + C15174 * C1494 +
            C15180 * C2387 - C15181 * C2380 - C15180 * C2388 + C49486 * C2398) *
               C49483) *
              C49123 * C49207 * C49190 * C110 -
          ((C15180 * C2391 - C15181 * C2382 - C15180 * C2392 + C49486 * C2400 +
            C15178 * C1486 - C15179 * C1481 - C15178 * C1487 + C15174 * C1493 +
            C15176 * C624 - C15177 * C618 - C15176 * C625 + C15173 * C633) *
               C49483 +
           (C15434 + C15435 + C15436) * C49503 +
           (C15239 + C15238 + C15237) * C49515) *
              C49123 * C49207 * C49190 * C111 +
          (C15247 * C49515 + (C15433 + C15432 + C15431) * C49503 +
           (C15176 * C626 - C15177 * C619 - C15176 * C627 + C15173 * C634 +
            C15178 * C1484 - C15179 * C1480 - C15178 * C1485 + C15174 * C1492 +
            C15180 * C2395 - C15181 * C2384 - C15180 * C2396 + C49486 * C2402) *
               C49483) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
           C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
           C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
           C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
           C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
              C49219 * C49123 * C49207 * C49190 * C110 -
          (C17837 * C3805 - C17838 * C3801 - C17837 * C3806 + C17828 * C3810 +
           C17835 * C2932 - C17836 * C2927 - C17835 * C2933 + C17827 * C2939 +
           C17833 * C977 - C17834 * C971 - C17833 * C978 + C17826 * C986 +
           C17831 * C421 - C17832 * C412 - C17831 * C422 + C17825 * C430 +
           C17829 * C124 - C17830 * C116 - C17829 * C125 + C17824 * C137) *
              C49219 * C49123 * C49207 * C49190 * C111 +
          (C17829 * C126 - C17830 * C117 - C17829 * C127 + C17824 * C138 +
           C17831 * C419 - C17832 * C411 - C17831 * C420 + C17825 * C429 +
           C17833 * C979 - C17834 * C972 - C17833 * C980 + C17826 * C987 +
           C17835 * C2930 - C17836 * C2926 - C17835 * C2931 + C17827 * C2938 +
           C17837 * C3807 - C17838 * C3802 - C17837 * C3808 + C17828 * C3811) *
              C49219 * C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49219 * C103 +
                C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                   C49207 * C265 -
               (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
                (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) *
                    C49219 * C103) *
                   C49207 * C49478) *
                  C267 +
              ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
                (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) *
                    C49219 * C107) *
                   C49207 * C49478 -
               (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
                C179 * C103) *
                   C49207 * C265) *
                  C49476) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                     C49515 +
                 C1329 * C49503 + C1330 * C49483) *
                    C1103 +
                (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                   C49207 * C265 -
               ((C1333 + C1313 + C1314) * C49472 +
                (C1334 + C1319 + C1320) * C1104 +
                ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                     C49483 +
                 C1330 * C49503 + C1329 * C49515) *
                    C1103) *
                   C49207 * C49478) *
                  C267 +
              (((C1320 + C1319 + C1334) * C1103 +
                (C1314 + C1313 + C1333) * C1104 +
                (C319 * C49515 + C1134 * C49503 +
                 (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                     C49483) *
                    C49472) *
                   C49207 * C49478 -
               ((C1137 + C1123 + C1124) * C49472 +
                (C1136 + C1114 + C1113) * C1104 +
                (C1135 + C1108 + C1107) * C1103) *
                   C49207 * C265) *
                  C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C49207 * C265 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C49207 * C49478) *
              C267 +
          (((C2780 + C2779 + C2778) * C49219 * C1103 +
            (C2777 + C2776 + C2775) * C49219 * C1104 +
            (C2516 * C277 - C2517 * C270 - C2516 * C278 + C49516 * C288 +
             C2518 * C730 - C2519 * C722 - C2518 * C731 + C49505 * C737 +
             C2520 * C2735 - C2521 * C2734 - C2520 * C2736 + C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C265 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C267 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C265 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 +
            (C10156 + C10157 + C10158) * C49483) *
               C49123 * C49207 * C265 -
           ((C2520 * C9832 - C2521 * C9830 - C2520 * C9833 + C49486 * C9836 +
             C2518 * C1954 - C2519 * C1951 - C2518 * C1955 + C49505 * C1960 +
             C2516 * C1292 - C2517 * C1286 - C2516 * C1293 + C49516 * C1298) *
                C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C49207 * C49478) *
              C267 +
          (((C2780 + C2779 + C2778) * C7962 +
            (C10159 + C10160 + C10161) * C7963 +
            (C2516 * C1290 - C2517 * C1285 - C2516 * C1291 + C49516 * C1297 +
             C2518 * C1956 - C2519 * C1952 - C2518 * C1957 + C49505 * C1961 +
             C2520 * C10095 - C2521 * C10094 - C2520 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C49207 * C265 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C49207 * C49478) *
              C267 +
          (((C15436 + C15435 + C15434) * C49219 * C49512 +
            (C15433 + C15432 + C15431) * C49219 * C49499 +
            (C15176 * C277 - C15177 * C270 - C15176 * C278 + C15173 * C288 +
             C15178 * C730 - C15179 * C722 - C15178 * C731 + C15174 * C737 +
             C15180 * C2735 - C15181 * C2734 - C15180 * C2736 +
             C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 +
            (C16742 + C16743 + C16744) * C49483) *
               C49123 * C49207 * C265 -
           ((C15180 * C9832 - C15181 * C9830 - C15180 * C9833 + C49486 * C9836 +
             C15178 * C1954 - C15179 * C1951 - C15178 * C1955 + C15174 * C1960 +
             C15176 * C1292 - C15177 * C1286 - C15176 * C1293 +
             C15173 * C1298) *
                C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C49207 * C49478) *
              C267 +
          (((C15436 + C15435 + C15434) * C49515 +
            (C16745 + C16746 + C16747) * C49503 +
            (C15176 * C1290 - C15177 * C1285 - C15176 * C1291 + C15173 * C1297 +
             C15178 * C1956 - C15179 * C1952 - C15178 * C1957 + C15174 * C1961 +
             C15180 * C10095 - C15181 * C10094 - C15180 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
            C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
            C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
            C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
            C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
               C49219 * C49123 * C49207 * C265 -
           (C17837 * C11190 - C17838 * C11188 - C17837 * C11191 +
            C17828 * C11194 + C17835 * C3389 - C17836 * C3386 - C17835 * C3390 +
            C17827 * C3395 + C17833 * C2385 - C17834 * C2379 - C17833 * C2386 +
            C17826 * C2397 + C17831 * C724 - C17832 * C719 - C17831 * C725 +
            C17825 * C734 + C17829 * C283 - C17830 * C273 - C17829 * C284 +
            C17824 * C291) *
               C49219 * C49123 * C49207 * C49478) *
              C267 +
          ((C17829 * C281 - C17830 * C272 - C17829 * C282 + C17824 * C290 +
            C17831 * C726 - C17832 * C720 - C17831 * C727 + C17825 * C735 +
            C17833 * C2389 - C17834 * C2381 - C17833 * C2390 + C17826 * C2399 +
            C17835 * C3391 - C17836 * C3387 - C17835 * C3392 + C17827 * C3396 +
            C17837 * C17922 - C17838 * C17921 - C17837 * C17923 +
            C17828 * C17924) *
               C49219 * C49123 * C49207 * C49478 -
           (C17837 * C3805 - C17838 * C3801 - C17837 * C3806 + C17828 * C3810 +
            C17835 * C2932 - C17836 * C2927 - C17835 * C2933 + C17827 * C2939 +
            C17833 * C977 - C17834 * C971 - C17833 * C978 + C17826 * C986 +
            C17831 * C421 - C17832 * C412 - C17831 * C422 + C17825 * C430 +
            C17829 * C124 - C17830 * C116 - C17829 * C125 + C17824 * C137) *
               C49219 * C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49219 * C103 +
                C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                   C407 -
               (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
                (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                    C49219 * C103) *
                   C49480) *
                  C49190 * C267 +
              ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
                (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) *
                    C49219 * C107) *
                   C49480 -
               (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
                C179 * C103) *
                   C407) *
                  C49190 * C49476) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                     C49515 +
                 C1329 * C49503 + C1330 * C49483) *
                    C1103 +
                (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                   C407 -
               ((C1527 + C1528 + C1505) * C49472 +
                (C1529 + C1530 + C1514) * C1104 +
                ((C113 * C1488 - C114 * C1482 - C113 * C1489 + C49236 * C1494) *
                     C49483 +
                 (C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) *
                     C49503 +
                 (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                     C49515) *
                    C1103) *
                   C49480) *
                  C49190 * C267 +
              (((C1514 + C1530 + C1529) * C1103 +
                (C1505 + C1528 + C1527) * C1104 +
                (C459 * C49515 +
                 (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                     C49503 +
                 (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                     C49483) *
                    C49472) *
                   C49480 -
               ((C1137 + C1123 + C1124) * C49472 +
                (C1136 + C1114 + C1113) * C1104 +
                (C1135 + C1108 + C1107) * C1103) *
                   C407) *
                  C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C407 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C49190 * C267 +
          (((C2984 + C2983 + C2982) * C49219 * C1103 +
            (C2981 + C2980 + C2979) * C49219 * C1104 +
            (C2516 * C417 - C2517 * C410 - C2516 * C418 + C49516 * C428 +
             C2518 * C981 - C2519 * C973 - C2518 * C982 + C49505 * C988 +
             C2520 * C2936 - C2521 * C2929 - C2520 * C2937 + C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C267 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           ((C113 * C9343 - C114 * C9341 - C113 * C9344 + C49236 * C9347) *
                C9153 +
            (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                C9152 +
            C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C267 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 +
            (C10156 + C10157 + C10158) * C49483) *
               C49123 * C407 -
           ((C2520 * C10309 - C2521 * C10307 - C2520 * C10310 +
             C49486 * C10313 + C2518 * C2387 - C2519 * C2380 - C2518 * C2388 +
             C49505 * C2398 + C2516 * C1488 - C2517 * C1482 - C2516 * C1489 +
             C49516 * C1494) *
                C49483 +
            (C2520 * C3389 - C2521 * C3386 - C2520 * C3390 + C49486 * C3395 +
             C2518 * C2385 - C2519 * C2379 - C2518 * C2386 + C49505 * C2397 +
             C2516 * C724 - C2517 * C719 - C2516 * C725 + C49516 * C734) *
                C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C2984 + C2983 + C2982) * C7962 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C7963 +
            (C2516 * C1486 - C2517 * C1481 - C2516 * C1487 + C49516 * C1493 +
             C2518 * C2391 - C2519 * C2382 - C2518 * C2392 + C49505 * C2400 +
             C2520 * C10311 - C2521 * C10308 - C2520 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C407 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C49190 * C267 +
          (((C15624 + C15623 + C15622) * C49219 * C49512 +
            (C15621 + C15620 + C15619) * C49219 * C49499 +
            (C15176 * C417 - C15177 * C410 - C15176 * C418 + C15173 * C428 +
             C15178 * C981 - C15179 * C973 - C15178 * C982 + C15174 * C988 +
             C15180 * C2936 - C15181 * C2929 - C15180 * C2937 +
             C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 +
            (C16742 + C16743 + C16744) * C49483) *
               C49123 * C407 -
           ((C15180 * C10309 - C15181 * C10307 - C15180 * C10310 +
             C49486 * C10313 + C15178 * C2387 - C15179 * C2380 -
             C15178 * C2388 + C15174 * C2398 + C15176 * C1488 - C15177 * C1482 -
             C15176 * C1489 + C15173 * C1494) *
                C49483 +
            (C15180 * C3389 - C15181 * C3386 - C15180 * C3390 + C49486 * C3395 +
             C15178 * C2385 - C15179 * C2379 - C15178 * C2386 + C15174 * C2397 +
             C15176 * C724 - C15177 * C719 - C15176 * C725 + C15173 * C734) *
                C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C15624 + C15623 + C15622) * C49515 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49503 +
            (C15176 * C1486 - C15177 * C1481 - C15176 * C1487 + C15173 * C1493 +
             C15178 * C2391 - C15179 * C2382 - C15178 * C2392 + C15174 * C2400 +
             C15180 * C10311 - C15181 * C10308 - C15180 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
            C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
            C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
            C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
            C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
               C49219 * C49123 * C407 -
           (C17837 * C18009 - C17838 * C18007 - C17837 * C18010 +
            C17828 * C18013 + C17835 * C3803 - C17836 * C3800 - C17835 * C3804 +
            C17827 * C3809 + C17833 * C2934 - C17834 * C2928 - C17833 * C2935 +
            C17826 * C2940 + C17831 * C975 - C17832 * C970 - C17831 * C976 +
            C17825 * C985 + C17829 * C423 - C17830 * C413 - C17829 * C424 +
            C17824 * C431) *
               C49219 * C49123 * C49480) *
              C49190 * C267 +
          ((C17829 * C421 - C17830 * C412 - C17829 * C422 + C17824 * C430 +
            C17831 * C977 - C17832 * C971 - C17831 * C978 + C17825 * C986 +
            C17833 * C2932 - C17834 * C2927 - C17833 * C2933 + C17826 * C2939 +
            C17835 * C3805 - C17836 * C3801 - C17835 * C3806 + C17827 * C3810 +
            C17837 * C18011 - C17838 * C18008 - C17837 * C18012 +
            C17828 * C18014) *
               C49219 * C49123 * C49480 -
           (C17837 * C3805 - C17838 * C3801 - C17837 * C3806 + C17828 * C3810 +
            C17835 * C2932 - C17836 * C2927 - C17835 * C2933 + C17827 * C2939 +
            C17833 * C977 - C17834 * C971 - C17833 * C978 + C17826 * C986 +
            C17831 * C421 - C17832 * C412 - C17831 * C422 + C17825 * C430 +
            C17829 * C124 - C17830 * C116 - C17829 * C125 + C17824 * C137) *
               C49219 * C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49219 * C103 +
                C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                   C49207 * C547 -
               (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
                (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) *
                    C49219 * C103) *
                   C49207 * C49478) *
                  C549 +
              ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
                (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) *
                    C49219 * C107) *
                   C49207 * C49478 -
               (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
                C179 * C103) *
                   C49207 * C547) *
                  C49476) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                     C49515 +
                 C1329 * C49503 + C1330 * C49483) *
                    C1103 +
                (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                   C49207 * C547 -
               ((C1333 + C1313 + C1314) * C49472 +
                (C1334 + C1319 + C1320) * C1104 +
                ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                     C49483 +
                 C1330 * C49503 + C1329 * C49515) *
                    C1103) *
                   C49207 * C49478) *
                  C549 +
              (((C1320 + C1319 + C1334) * C1103 +
                (C1314 + C1313 + C1333) * C1104 +
                (C319 * C49515 + C1134 * C49503 +
                 (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                     C49483) *
                    C49472) *
                   C49207 * C49478 -
               ((C1137 + C1123 + C1124) * C49472 +
                (C1136 + C1114 + C1113) * C1104 +
                (C1135 + C1108 + C1107) * C1103) *
                   C49207 * C547) *
                  C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C49207 * C547 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C49207 * C49478) *
              C549 +
          (((C2780 + C2779 + C2778) * C49219 * C1103 +
            (C2777 + C2776 + C2775) * C49219 * C1104 +
            (C2516 * C277 - C2517 * C270 - C2516 * C278 + C49516 * C288 +
             C2518 * C730 - C2519 * C722 - C2518 * C731 + C49505 * C737 +
             C2520 * C2735 - C2521 * C2734 - C2520 * C2736 + C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C547 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C549 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C547 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 +
            (C10156 + C10157 + C10158) * C49483) *
               C49123 * C49207 * C547 -
           ((C2520 * C9832 - C2521 * C9830 - C2520 * C9833 + C49486 * C9836 +
             C2518 * C1954 - C2519 * C1951 - C2518 * C1955 + C49505 * C1960 +
             C2516 * C1292 - C2517 * C1286 - C2516 * C1293 + C49516 * C1298) *
                C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C49207 * C49478) *
              C549 +
          (((C2780 + C2779 + C2778) * C7962 +
            (C10159 + C10160 + C10161) * C7963 +
            (C2516 * C1290 - C2517 * C1285 - C2516 * C1291 + C49516 * C1297 +
             C2518 * C1956 - C2519 * C1952 - C2518 * C1957 + C49505 * C1961 +
             C2520 * C10095 - C2521 * C10094 - C2520 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C49207 * C547 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C49207 * C49478) *
              C549 +
          (((C15436 + C15435 + C15434) * C49219 * C49512 +
            (C15433 + C15432 + C15431) * C49219 * C49499 +
            (C15176 * C277 - C15177 * C270 - C15176 * C278 + C15173 * C288 +
             C15178 * C730 - C15179 * C722 - C15178 * C731 + C15174 * C737 +
             C15180 * C2735 - C15181 * C2734 - C15180 * C2736 +
             C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 +
            (C16742 + C16743 + C16744) * C49483) *
               C49123 * C49207 * C547 -
           ((C15180 * C9832 - C15181 * C9830 - C15180 * C9833 + C49486 * C9836 +
             C15178 * C1954 - C15179 * C1951 - C15178 * C1955 + C15174 * C1960 +
             C15176 * C1292 - C15177 * C1286 - C15176 * C1293 +
             C15173 * C1298) *
                C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C49207 * C49478) *
              C549 +
          (((C15436 + C15435 + C15434) * C49515 +
            (C16745 + C16746 + C16747) * C49503 +
            (C15176 * C1290 - C15177 * C1285 - C15176 * C1291 + C15173 * C1297 +
             C15178 * C1956 - C15179 * C1952 - C15178 * C1957 + C15174 * C1961 +
             C15180 * C10095 - C15181 * C10094 - C15180 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
            C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
            C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
            C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
            C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
               C49219 * C49123 * C49207 * C547 -
           (C17837 * C11190 - C17838 * C11188 - C17837 * C11191 +
            C17828 * C11194 + C17835 * C3389 - C17836 * C3386 - C17835 * C3390 +
            C17827 * C3395 + C17833 * C2385 - C17834 * C2379 - C17833 * C2386 +
            C17826 * C2397 + C17831 * C724 - C17832 * C719 - C17831 * C725 +
            C17825 * C734 + C17829 * C283 - C17830 * C273 - C17829 * C284 +
            C17824 * C291) *
               C49219 * C49123 * C49207 * C49478) *
              C549 +
          ((C17829 * C281 - C17830 * C272 - C17829 * C282 + C17824 * C290 +
            C17831 * C726 - C17832 * C720 - C17831 * C727 + C17825 * C735 +
            C17833 * C2389 - C17834 * C2381 - C17833 * C2390 + C17826 * C2399 +
            C17835 * C3391 - C17836 * C3387 - C17835 * C3392 + C17827 * C3396 +
            C17837 * C17922 - C17838 * C17921 - C17837 * C17923 +
            C17828 * C17924) *
               C49219 * C49123 * C49207 * C49478 -
           (C17837 * C3805 - C17838 * C3801 - C17837 * C3806 + C17828 * C3810 +
            C17835 * C2932 - C17836 * C2927 - C17835 * C2933 + C17827 * C2939 +
            C17833 * C977 - C17834 * C971 - C17833 * C978 + C17826 * C986 +
            C17831 * C421 - C17832 * C412 - C17831 * C422 + C17825 * C430 +
            C17829 * C124 - C17830 * C116 - C17829 * C125 + C17824 * C137) *
               C49219 * C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                   C49219 * C103 +
               C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                  C49207 * C613 -
              (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
               (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) *
                   C49219 * C103) *
                  C49207 * C614 +
              ((C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) *
                   C49219 * C103 +
               (C113 * C624 - C114 * C618 - C113 * C625 + C49236 * C633) *
                   C49219 * C104 +
               (C113 * C626 - C114 * C619 - C113 * C627 + C49236 * C634) *
                   C49219 * C105 +
               (C113 * C628 - C114 * C620 - C113 * C629 + C49236 * C635) *
                   C49219 * C106 +
               (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                   C49219 * C107) *
                  C49207 * C615) *
             C49156 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49515 +
                C1329 * C49503 + C1330 * C49483) *
                   C1103 +
               (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                  C49207 * C613 -
              ((C1333 + C1313 + C1314) * C49472 +
               (C1334 + C1319 + C1320) * C1104 +
               (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
                  C49207 * C614 +
              ((C1330 * C49515 + C1805 * C49503 +
                (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                    C49483) *
                   C1103 +
               (C1132 * C49515 + C1332 * C49503 +
                (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                    C49483) *
                   C1104 +
               (C1133 * C49515 + C1331 * C49503 +
                (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                    C49483) *
                   C49472) *
                  C49207 * C615) *
             C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C49219 * C1103 +
           (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
              C49207 * C613 -
          ((C2775 + C2776 + C2777) * C49219 * C49472 +
           (C2778 + C2779 + C2780) * C49219 * C1104 +
           (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
            C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
            C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
               C49219 * C1103) *
              C49207 * C614 +
          ((C2516 * C622 - C2517 * C617 - C2516 * C623 + C49516 * C632 +
            C2518 * C1488 - C2519 * C1482 - C2518 * C1489 + C49505 * C1494 +
            C2520 * C2387 - C2521 * C2380 - C2520 * C2388 + C49486 * C2398) *
               C49219 * C1103 +
           (C2516 * C624 - C2517 * C618 - C2516 * C625 + C49516 * C633 +
            C2518 * C1486 - C2519 * C1481 - C2518 * C1487 + C49505 * C1493 +
            C2520 * C2391 - C2521 * C2382 - C2520 * C2392 + C49486 * C2400) *
               C49219 * C1104 +
           (C2516 * C626 - C2517 * C619 - C2516 * C627 + C49516 * C634 +
            C2518 * C1484 - C2519 * C1480 - C2518 * C1485 + C49505 * C1492 +
            C2520 * C2395 - C2521 * C2384 - C2520 * C2396 + C49486 * C2402) *
               C49219 * C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C613 -
          ((C8126 + C8127 + C8128) * C49472 + (C8129 + C8130 + C8131) * C49499 +
           (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
              C49207 * C614 +
          ((C1330 * C7962 + C1805 * C7963 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C49512 +
           (C1132 * C7962 + C1332 * C7963 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C49499 +
           (C1133 * C7962 + C1331 * C7963 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C49207 * C613 -
          (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
           C1329 * C9149) *
              C49123 * C49207 * C614 +
          (C1330 * C9149 + C1805 * C9150 + C9258 * C9151 + C9504 * C9152 +
           (C113 * C9494 - C114 * C9493 - C113 * C9495 + C49236 * C9496) *
               C9153) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C7962 +
           (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
              C49123 * C49207 * C613 -
          ((C10592 + C10593 + C10594) * C49483 +
           (C10158 + C10157 + C10156) * C7963 +
           (C10155 + C10154 + C10153) * C7962) *
              C49123 * C49207 * C614 +
          (C10585 * C7962 + (C10594 + C10593 + C10592) * C7963 +
           (C2516 * C1789 - C2517 * C1786 - C2516 * C1790 + C49516 * C1795 +
            C2518 * C9343 - C2519 * C9341 - C2518 * C9344 + C49505 * C9347 +
            C2520 * C9834 - C2521 * C9831 - C2520 * C9835 + C49486 * C9837) *
               C49483) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49219 * C49512 +
           (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
              C49207 * C613 -
          ((C15431 + C15432 + C15433) * C49219 * C49472 +
           (C15434 + C15435 + C15436) * C49219 * C49499 +
           (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
            C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
            C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
               C49219 * C49512) *
              C49207 * C614 +
          ((C15176 * C622 - C15177 * C617 - C15176 * C623 + C15173 * C632 +
            C15178 * C1488 - C15179 * C1482 - C15178 * C1489 + C15174 * C1494 +
            C15180 * C2387 - C15181 * C2380 - C15180 * C2388 + C49486 * C2398) *
               C49219 * C49512 +
           (C15176 * C624 - C15177 * C618 - C15176 * C625 + C15173 * C633 +
            C15178 * C1486 - C15179 * C1481 - C15178 * C1487 + C15174 * C1493 +
            C15180 * C2391 - C15181 * C2382 - C15180 * C2392 + C49486 * C2400) *
               C49219 * C49499 +
           (C15176 * C626 - C15177 * C619 - C15176 * C627 + C15173 * C634 +
            C15178 * C1484 - C15179 * C1480 - C15178 * C1485 + C15174 * C1492 +
            C15180 * C2395 - C15181 * C2384 - C15180 * C2396 + C49486 * C2402) *
               C49219 * C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49515 +
           (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
              C49123 * C49207 * C613 -
          ((C17170 + C17171 + C17172) * C49483 +
           (C16744 + C16743 + C16742) * C49503 +
           (C16741 + C16740 + C16739) * C49515) *
              C49123 * C49207 * C614 +
          (C17163 * C49515 + (C17172 + C17171 + C17170) * C49503 +
           (C15176 * C1789 - C15177 * C1786 - C15176 * C1790 + C15173 * C1795 +
            C15178 * C9343 - C15179 * C9341 - C15178 * C9344 + C15174 * C9347 +
            C15180 * C9834 - C15181 * C9831 - C15180 * C9835 + C49486 * C9837) *
               C49483) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
           C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
           C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
           C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
           C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
              C49219 * C49123 * C49207 * C613 -
          (C17837 * C11190 - C17838 * C11188 - C17837 * C11191 +
           C17828 * C11194 + C17835 * C3389 - C17836 * C3386 - C17835 * C3390 +
           C17827 * C3395 + C17833 * C2385 - C17834 * C2379 - C17833 * C2386 +
           C17826 * C2397 + C17831 * C724 - C17832 * C719 - C17831 * C725 +
           C17825 * C734 + C17829 * C283 - C17830 * C273 - C17829 * C284 +
           C17824 * C291) *
              C49219 * C49123 * C49207 * C614 +
          (C17829 * C622 - C17830 * C617 - C17829 * C623 + C17824 * C632 +
           C17831 * C1488 - C17832 * C1482 - C17831 * C1489 + C17825 * C1494 +
           C17833 * C2387 - C17834 * C2380 - C17833 * C2388 + C17826 * C2398 +
           C17835 * C10309 - C17836 * C10307 - C17835 * C10310 +
           C17827 * C10313 + C17837 * C11192 - C17838 * C11189 -
           C17837 * C11193 + C17828 * C11195) *
              C49219 * C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49219 * C103 +
                C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                   C407 -
               (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
                (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                    C49219 * C103) *
                   C49480) *
                  C547 +
              (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) *
                    C49219 * C103 +
                (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) *
                    C49219 * C104 +
                (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) *
                    C49219 * C105 +
                (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                    C49219 * C106 +
                (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                    C49219 * C107) *
                   C49480 -
               (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
                (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) *
                    C49219 * C103) *
                   C407) *
                  C49478) *
             C49156 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                     C49515 +
                 C1329 * C49503 + C1330 * C49483) *
                    C1103 +
                (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                   C407 -
               ((C1527 + C1528 + C1505) * C49472 +
                (C1529 + C1530 + C1514) * C1104 +
                (C1976 * C49483 + C1977 * C49503 +
                 (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                     C49515) *
                    C1103) *
                   C49480) *
                  C547 +
              (((C1977 * C49515 + C1976 * C49503 +
                 (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                     C49483) *
                    C1103 +
                (C1526 * C49515 + C1525 * C49503 +
                 (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                     C49483) *
                    C1104 +
                (C1524 * C49515 + C1523 * C49503 +
                 (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                     C49483) *
                    C49472) *
                   C49480 -
               ((C1333 + C1313 + C1314) * C49472 +
                (C1334 + C1319 + C1320) * C1104 +
                (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
                   C407) *
                  C49478) *
             C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C407 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C547 +
          (((C2516 * C724 - C2517 * C719 - C2516 * C725 + C49516 * C734 +
             C2518 * C2385 - C2519 * C2379 - C2518 * C2386 + C49505 * C2397 +
             C2520 * C3389 - C2521 * C3386 - C2520 * C3390 + C49486 * C3395) *
                C49219 * C1103 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C49219 * C1104 +
            (C2516 * C728 - C2517 * C721 - C2516 * C729 + C49516 * C736 +
             C2518 * C2393 - C2519 * C2383 - C2518 * C2394 + C49505 * C2401 +
             C2520 * C3393 - C2521 * C3388 - C2520 * C3394 + C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C547 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C547 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
               C49123 * C407 -
           ((C10781 + C10782 + C10783) * C49483 +
            (C10784 + C10785 + C10786) * C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C547 +
          (((C10786 + C10785 + C10784) * C7962 +
            (C10783 + C10782 + C10781) * C7963 +
            (C2516 * C1954 - C2517 * C1951 - C2516 * C1955 + C49516 * C1960 +
             C2518 * C9832 - C2519 * C9830 - C2518 * C9833 + C49505 * C9836 +
             C2520 * C10741 - C2521 * C10740 - C2520 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C10592 + C10593 + C10594) * C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C407 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C547 +
          (((C15176 * C724 - C15177 * C719 - C15176 * C725 + C15173 * C734 +
             C15178 * C2385 - C15179 * C2379 - C15178 * C2386 + C15174 * C2397 +
             C15180 * C3389 - C15181 * C3386 - C15180 * C3390 +
             C49486 * C3395) *
                C49219 * C49512 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49219 * C49499 +
            (C15176 * C728 - C15177 * C721 - C15176 * C729 + C15173 * C736 +
             C15178 * C2393 - C15179 * C2383 - C15178 * C2394 + C15174 * C2401 +
             C15180 * C3393 - C15181 * C3388 - C15180 * C3394 +
             C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
               C49123 * C407 -
           ((C17355 + C17356 + C17357) * C49483 +
            (C17358 + C17359 + C17360) * C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C547 +
          (((C17360 + C17359 + C17358) * C49515 +
            (C17357 + C17356 + C17355) * C49503 +
            (C15176 * C1954 - C15177 * C1951 - C15176 * C1955 + C15173 * C1960 +
             C15178 * C9832 - C15179 * C9830 - C15178 * C9833 + C15174 * C9836 +
             C15180 * C10741 - C15181 * C10740 - C15180 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C17170 + C17171 + C17172) * C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
            C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
            C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
            C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
            C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
               C49219 * C49123 * C407 -
           (C17837 * C18009 - C17838 * C18007 - C17837 * C18010 +
            C17828 * C18013 + C17835 * C3803 - C17836 * C3800 - C17835 * C3804 +
            C17827 * C3809 + C17833 * C2934 - C17834 * C2928 - C17833 * C2935 +
            C17826 * C2940 + C17831 * C975 - C17832 * C970 - C17831 * C976 +
            C17825 * C985 + C17829 * C423 - C17830 * C413 - C17829 * C424 +
            C17824 * C431) *
               C49219 * C49123 * C49480) *
              C547 +
          ((C17829 * C724 - C17830 * C719 - C17829 * C725 + C17824 * C734 +
            C17831 * C2385 - C17832 * C2379 - C17831 * C2386 + C17825 * C2397 +
            C17833 * C3389 - C17834 * C3386 - C17833 * C3390 + C17826 * C3395 +
            C17835 * C11190 - C17836 * C11188 - C17835 * C11191 +
            C17827 * C11194 + C17837 * C18242 - C17838 * C18241 -
            C17837 * C18243 + C17828 * C18244) *
               C49219 * C49123 * C49480 -
           (C17837 * C11190 - C17838 * C11188 - C17837 * C11191 +
            C17828 * C11194 + C17835 * C3389 - C17836 * C3386 - C17835 * C3390 +
            C17827 * C3395 + C17833 * C2385 - C17834 * C2379 - C17833 * C2386 +
            C17826 * C2397 + C17831 * C724 - C17832 * C719 - C17831 * C725 +
            C17825 * C734 + C17829 * C283 - C17830 * C273 - C17829 * C284 +
            C17824 * C291) *
               C49219 * C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49219 * C103 +
                C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                   C821 -
               (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
                (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                    C49219 * C103) *
                   C49480) *
                  C49190 * C549 +
              ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
                (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) *
                    C49219 * C107) *
                   C49480 -
               (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
                C179 * C103) *
                   C821) *
                  C49190 * C49476) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                     C49515 +
                 C1329 * C49503 + C1330 * C49483) *
                    C1103 +
                (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                   C821 -
               ((C1527 + C1528 + C1505) * C49472 +
                (C1529 + C1530 + C1514) * C1104 +
                (C1976 * C49483 + C1977 * C49503 +
                 (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                     C49515) *
                    C1103) *
                   C49480) *
                  C49190 * C549 +
              (((C1514 + C1530 + C1529) * C1103 +
                (C1505 + C1528 + C1527) * C1104 +
                (C459 * C49515 +
                 (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                     C49503 +
                 (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                     C49483) *
                    C49472) *
                   C49480 -
               ((C1137 + C1123 + C1124) * C49472 +
                (C1136 + C1114 + C1113) * C1104 +
                (C1135 + C1108 + C1107) * C1103) *
                   C821) *
                  C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C821 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C49190 * C549 +
          (((C2984 + C2983 + C2982) * C49219 * C1103 +
            (C2981 + C2980 + C2979) * C49219 * C1104 +
            (C2516 * C417 - C2517 * C410 - C2516 * C418 + C49516 * C428 +
             C2518 * C981 - C2519 * C973 - C2518 * C982 + C49505 * C988 +
             C2520 * C2936 - C2521 * C2929 - C2520 * C2937 + C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C549 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C549 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
               C49123 * C821 -
           ((C10781 + C10782 + C10783) * C49483 +
            (C10784 + C10785 + C10786) * C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C2984 + C2983 + C2982) * C7962 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C7963 +
            (C2516 * C1486 - C2517 * C1481 - C2516 * C1487 + C49516 * C1493 +
             C2518 * C2391 - C2519 * C2382 - C2518 * C2392 + C49505 * C2400 +
             C2520 * C10311 - C2521 * C10308 - C2520 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C821 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C49190 * C549 +
          (((C15624 + C15623 + C15622) * C49219 * C49512 +
            (C15621 + C15620 + C15619) * C49219 * C49499 +
            (C15176 * C417 - C15177 * C410 - C15176 * C418 + C15173 * C428 +
             C15178 * C981 - C15179 * C973 - C15178 * C982 + C15174 * C988 +
             C15180 * C2936 - C15181 * C2929 - C15180 * C2937 +
             C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
               C49123 * C821 -
           ((C17355 + C17356 + C17357) * C49483 +
            (C17358 + C17359 + C17360) * C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C15624 + C15623 + C15622) * C49515 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49503 +
            (C15176 * C1486 - C15177 * C1481 - C15176 * C1487 + C15173 * C1493 +
             C15178 * C2391 - C15179 * C2382 - C15178 * C2392 + C15174 * C2400 +
             C15180 * C10311 - C15181 * C10308 - C15180 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
            C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
            C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
            C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
            C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
               C49219 * C49123 * C821 -
           (C17837 * C18009 - C17838 * C18007 - C17837 * C18010 +
            C17828 * C18013 + C17835 * C3803 - C17836 * C3800 - C17835 * C3804 +
            C17827 * C3809 + C17833 * C2934 - C17834 * C2928 - C17833 * C2935 +
            C17826 * C2940 + C17831 * C975 - C17832 * C970 - C17831 * C976 +
            C17825 * C985 + C17829 * C423 - C17830 * C413 - C17829 * C424 +
            C17824 * C431) *
               C49219 * C49123 * C49480) *
              C49190 * C549 +
          ((C17829 * C421 - C17830 * C412 - C17829 * C422 + C17824 * C430 +
            C17831 * C977 - C17832 * C971 - C17831 * C978 + C17825 * C986 +
            C17833 * C2932 - C17834 * C2927 - C17833 * C2933 + C17826 * C2939 +
            C17835 * C3805 - C17836 * C3801 - C17835 * C3806 + C17827 * C3810 +
            C17837 * C18011 - C17838 * C18008 - C17837 * C18012 +
            C17828 * C18014) *
               C49219 * C49123 * C49480 -
           (C17837 * C3805 - C17838 * C3801 - C17837 * C3806 + C17828 * C3810 +
            C17835 * C2932 - C17836 * C2927 - C17835 * C2933 + C17827 * C2939 +
            C17833 * C977 - C17834 * C971 - C17833 * C978 + C17826 * C986 +
            C17831 * C421 - C17832 * C412 - C17831 * C422 + C17825 * C430 +
            C17829 * C124 - C17830 * C116 - C17829 * C125 + C17824 * C137) *
               C49219 * C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49219 * C103 +
                C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                   C821 -
               (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
                (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                    C49219 * C103) *
                   C49480) *
                  C265 +
              (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) *
                    C49219 * C103 +
                (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) *
                    C49219 * C104 +
                (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) *
                    C49219 * C105 +
                (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                    C49219 * C106 +
                (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                    C49219 * C107) *
                   C49480 -
               (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
                (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) *
                    C49219 * C103) *
                   C821) *
                  C49478) *
             C49156 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                     C49515 +
                 C1329 * C49503 + C1330 * C49483) *
                    C1103 +
                (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                   C821 -
               ((C1527 + C1528 + C1505) * C49472 +
                (C1529 + C1530 + C1514) * C1104 +
                (C1976 * C49483 + C1977 * C49503 +
                 (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                     C49515) *
                    C1103) *
                   C49480) *
                  C265 +
              (((C1977 * C49515 + C1976 * C49503 +
                 (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                     C49483) *
                    C1103 +
                (C1526 * C49515 + C1525 * C49503 +
                 (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                     C49483) *
                    C1104 +
                (C1524 * C49515 + C1523 * C49503 +
                 (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                     C49483) *
                    C49472) *
                   C49480 -
               ((C1333 + C1313 + C1314) * C49472 +
                (C1334 + C1319 + C1320) * C1104 +
                (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
                   C821) *
                  C49478) *
             C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C821 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C265 +
          (((C2516 * C724 - C2517 * C719 - C2516 * C725 + C49516 * C734 +
             C2518 * C2385 - C2519 * C2379 - C2518 * C2386 + C49505 * C2397 +
             C2520 * C3389 - C2521 * C3386 - C2520 * C3390 + C49486 * C3395) *
                C49219 * C1103 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C49219 * C1104 +
            (C2516 * C728 - C2517 * C721 - C2516 * C729 + C49516 * C736 +
             C2518 * C2393 - C2519 * C2383 - C2518 * C2394 + C49505 * C2401 +
             C2520 * C3393 - C2521 * C3388 - C2520 * C3394 + C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C265 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C265 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
               C49123 * C821 -
           ((C10781 + C10782 + C10783) * C49483 +
            (C10784 + C10785 + C10786) * C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C265 +
          (((C10786 + C10785 + C10784) * C7962 +
            (C10783 + C10782 + C10781) * C7963 +
            (C2516 * C1954 - C2517 * C1951 - C2516 * C1955 + C49516 * C1960 +
             C2518 * C9832 - C2519 * C9830 - C2518 * C9833 + C49505 * C9836 +
             C2520 * C10741 - C2521 * C10740 - C2520 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C10592 + C10593 + C10594) * C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C821 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C265 +
          (((C15176 * C724 - C15177 * C719 - C15176 * C725 + C15173 * C734 +
             C15178 * C2385 - C15179 * C2379 - C15178 * C2386 + C15174 * C2397 +
             C15180 * C3389 - C15181 * C3386 - C15180 * C3390 +
             C49486 * C3395) *
                C49219 * C49512 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49219 * C49499 +
            (C15176 * C728 - C15177 * C721 - C15176 * C729 + C15173 * C736 +
             C15178 * C2393 - C15179 * C2383 - C15178 * C2394 + C15174 * C2401 +
             C15180 * C3393 - C15181 * C3388 - C15180 * C3394 +
             C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
               C49123 * C821 -
           ((C17355 + C17356 + C17357) * C49483 +
            (C17358 + C17359 + C17360) * C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C265 +
          (((C17360 + C17359 + C17358) * C49515 +
            (C17357 + C17356 + C17355) * C49503 +
            (C15176 * C1954 - C15177 * C1951 - C15176 * C1955 + C15173 * C1960 +
             C15178 * C9832 - C15179 * C9830 - C15178 * C9833 + C15174 * C9836 +
             C15180 * C10741 - C15181 * C10740 - C15180 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C17170 + C17171 + C17172) * C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
            C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
            C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
            C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
            C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
               C49219 * C49123 * C821 -
           (C17837 * C18009 - C17838 * C18007 - C17837 * C18010 +
            C17828 * C18013 + C17835 * C3803 - C17836 * C3800 - C17835 * C3804 +
            C17827 * C3809 + C17833 * C2934 - C17834 * C2928 - C17833 * C2935 +
            C17826 * C2940 + C17831 * C975 - C17832 * C970 - C17831 * C976 +
            C17825 * C985 + C17829 * C423 - C17830 * C413 - C17829 * C424 +
            C17824 * C431) *
               C49219 * C49123 * C49480) *
              C265 +
          ((C17829 * C724 - C17830 * C719 - C17829 * C725 + C17824 * C734 +
            C17831 * C2385 - C17832 * C2379 - C17831 * C2386 + C17825 * C2397 +
            C17833 * C3389 - C17834 * C3386 - C17833 * C3390 + C17826 * C3395 +
            C17835 * C11190 - C17836 * C11188 - C17835 * C11191 +
            C17827 * C11194 + C17837 * C18242 - C17838 * C18241 -
            C17837 * C18243 + C17828 * C18244) *
               C49219 * C49123 * C49480 -
           (C17837 * C11190 - C17838 * C11188 - C17837 * C11191 +
            C17828 * C11194 + C17835 * C3389 - C17836 * C3386 - C17835 * C3390 +
            C17827 * C3395 + C17833 * C2385 - C17834 * C2379 - C17833 * C2386 +
            C17826 * C2397 + C17831 * C724 - C17832 * C719 - C17831 * C725 +
            C17825 * C734 + C17829 * C283 - C17830 * C273 - C17829 * C284 +
            C17824 * C291) *
               C49219 * C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                   C49219 * C103 +
               C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
                  C967 -
              (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
               (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                   C49219 * C103) *
                  C968 +
              ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) *
                   C49219 * C103 +
               (C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) *
                   C49219 * C104 +
               (C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) *
                   C49219 * C105 +
               (C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) *
                   C49219 * C106 +
               (C113 * C983 - C114 * C974 - C113 * C984 + C49236 * C989) *
                   C49219 * C107) *
                  C969) *
             C49190 * C49156 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                    C49515 +
                C1329 * C49503 + C1330 * C49483) *
                   C1103 +
               (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
                  C967 -
              ((C1527 + C1528 + C1505) * C49472 +
               (C1529 + C1530 + C1514) * C1104 +
               (C1976 * C49483 + C1977 * C49503 +
                (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                    C49515) *
                   C1103) *
                  C968 +
              (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) *
                    C49515 +
                (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                    C49503 +
                (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                    C49483) *
                   C1103 +
               ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) *
                    C49515 +
                (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                    C49503 +
                (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                    C49483) *
                   C1104 +
               ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) *
                    C49515 +
                (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                    C49503 +
                (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                    C49483) *
                   C49472) *
                  C969) *
             C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C49219 * C1103 +
           (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
              C967 -
          ((C2979 + C2980 + C2981) * C49219 * C49472 +
           (C2982 + C2983 + C2984) * C49219 * C1104 +
           (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
            C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
            C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
               C49219 * C1103) *
              C968 +
          ((C2516 * C975 - C2517 * C970 - C2516 * C976 + C49516 * C985 +
            C2518 * C2934 - C2519 * C2928 - C2518 * C2935 + C49505 * C2940 +
            C2520 * C3803 - C2521 * C3800 - C2520 * C3804 + C49486 * C3809) *
               C49219 * C1103 +
           (C2516 * C977 - C2517 * C971 - C2516 * C978 + C49516 * C986 +
            C2518 * C2932 - C2519 * C2927 - C2518 * C2933 + C49505 * C2939 +
            C2520 * C3805 - C2521 * C3801 - C2520 * C3806 + C49486 * C3810) *
               C49219 * C1104 +
           (C2516 * C979 - C2517 * C972 - C2516 * C980 + C49516 * C987 +
            C2518 * C2930 - C2519 * C2926 - C2518 * C2931 + C49505 * C2938 +
            C2520 * C3807 - C2521 * C3802 - C2520 * C3808 + C49486 * C3811) *
               C49219 * C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C967 -
          ((C8278 + C8279 + C8280) * C49472 + (C8281 + C8282 + C8283) * C49499 +
           (C1976 * C49483 + C1977 * C7963 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C7962) *
               C49512) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C7962 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C7963 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C49512 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C7962 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C7963 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C49499 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C7962 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C7963 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C967 -
          (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
              C49123 * C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C9149 +
           (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
               C9150 +
           (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
               C9151 +
           (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
               C9152 +
           (C113 * C9834 - C114 * C9831 - C113 * C9835 + C49236 * C9837) *
               C9153) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C7962 +
           (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
              C49123 * C967 -
          ((C10781 + C10782 + C10783) * C49483 +
           (C10784 + C10785 + C10786) * C7963 +
           (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
            C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
            C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
               C7962) *
              C49123 * C968 +
          ((C2516 * C975 - C2517 * C970 - C2516 * C976 + C49516 * C985 +
            C2518 * C2934 - C2519 * C2928 - C2518 * C2935 + C49505 * C2940 +
            C2520 * C3803 - C2521 * C3800 - C2520 * C3804 + C49486 * C3809) *
               C7962 +
           (C2516 * C2385 - C2517 * C2379 - C2516 * C2386 + C49516 * C2397 +
            C2518 * C3389 - C2519 * C3386 - C2518 * C3390 + C49505 * C3395 +
            C2520 * C11190 - C2521 * C11188 - C2520 * C11191 +
            C49486 * C11194) *
               C7963 +
           (C2516 * C2387 - C2517 * C2380 - C2516 * C2388 + C49516 * C2398 +
            C2518 * C10309 - C2519 * C10307 - C2518 * C10310 + C49505 * C10313 +
            C2520 * C11192 - C2521 * C11189 - C2520 * C11193 +
            C49486 * C11195) *
               C49483) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49219 * C49512 +
           (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
              C967 -
          ((C15619 + C15620 + C15621) * C49219 * C49472 +
           (C15622 + C15623 + C15624) * C49219 * C49499 +
           (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
            C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
            C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
               C49219 * C49512) *
              C968 +
          ((C15176 * C975 - C15177 * C970 - C15176 * C976 + C15173 * C985 +
            C15178 * C2934 - C15179 * C2928 - C15178 * C2935 + C15174 * C2940 +
            C15180 * C3803 - C15181 * C3800 - C15180 * C3804 + C49486 * C3809) *
               C49219 * C49512 +
           (C15176 * C977 - C15177 * C971 - C15176 * C978 + C15173 * C986 +
            C15178 * C2932 - C15179 * C2927 - C15178 * C2933 + C15174 * C2939 +
            C15180 * C3805 - C15181 * C3801 - C15180 * C3806 + C49486 * C3810) *
               C49219 * C49499 +
           (C15176 * C979 - C15177 * C972 - C15176 * C980 + C15173 * C987 +
            C15178 * C2930 - C15179 * C2926 - C15178 * C2931 + C15174 * C2938 +
            C15180 * C3807 - C15181 * C3802 - C15180 * C3808 + C49486 * C3811) *
               C49219 * C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49515 +
           (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
              C49123 * C967 -
          ((C17355 + C17356 + C17357) * C49483 +
           (C17358 + C17359 + C17360) * C49503 +
           (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
            C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
            C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
               C49515) *
              C49123 * C968 +
          ((C15176 * C975 - C15177 * C970 - C15176 * C976 + C15173 * C985 +
            C15178 * C2934 - C15179 * C2928 - C15178 * C2935 + C15174 * C2940 +
            C15180 * C3803 - C15181 * C3800 - C15180 * C3804 + C49486 * C3809) *
               C49515 +
           (C15176 * C2385 - C15177 * C2379 - C15176 * C2386 + C15173 * C2397 +
            C15178 * C3389 - C15179 * C3386 - C15178 * C3390 + C15174 * C3395 +
            C15180 * C11190 - C15181 * C11188 - C15180 * C11191 +
            C49486 * C11194) *
               C49503 +
           (C15176 * C2387 - C15177 * C2380 - C15176 * C2388 + C15173 * C2398 +
            C15178 * C10309 - C15179 * C10307 - C15178 * C10310 +
            C15174 * C10313 + C15180 * C11192 - C15181 * C11189 -
            C15180 * C11193 + C49486 * C11195) *
               C49483) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C17829 * C122 - C17830 * C115 - C17829 * C123 + C17824 * C136 +
           C17831 * C423 - C17832 * C413 - C17831 * C424 + C17825 * C431 +
           C17833 * C975 - C17834 * C970 - C17833 * C976 + C17826 * C985 +
           C17835 * C2934 - C17836 * C2928 - C17835 * C2935 + C17827 * C2940 +
           C17837 * C3803 - C17838 * C3800 - C17837 * C3804 + C17828 * C3809) *
              C49219 * C49123 * C967 -
          (C17837 * C18009 - C17838 * C18007 - C17837 * C18010 +
           C17828 * C18013 + C17835 * C3803 - C17836 * C3800 - C17835 * C3804 +
           C17827 * C3809 + C17833 * C2934 - C17834 * C2928 - C17833 * C2935 +
           C17826 * C2940 + C17831 * C975 - C17832 * C970 - C17831 * C976 +
           C17825 * C985 + C17829 * C423 - C17830 * C413 - C17829 * C424 +
           C17824 * C431) *
              C49219 * C49123 * C968 +
          (C17829 * C975 - C17830 * C970 - C17829 * C976 + C17824 * C985 +
           C17831 * C2934 - C17832 * C2928 - C17831 * C2935 + C17825 * C2940 +
           C17833 * C3803 - C17834 * C3800 - C17833 * C3804 + C17826 * C3809 +
           C17835 * C18009 - C17836 * C18007 - C17835 * C18010 +
           C17827 * C18013 + C17837 * C18472 - C17838 * C18471 -
           C17837 * C18473 + C17828 * C18474) *
              C49219 * C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C7962 +
            (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
               C49428 +
           ((C5074 + C5075) * C7962 + C6498 * C7963 +
            (C6534 + C6533) * C49483) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C6531 + C6532) * C49483 + C6507 * C7963 +
            (C5077 + C5076) * C7962) *
               C49133 +
           ((C6533 + C6534) * C49483 + C6516 * C7963 +
            (C5075 + C5074) * C7962) *
               C49428) *
              C49207 * C49190 * C111 +
          ((C5082 * C7962 + C6293 * C7963 + (C6532 + C6531) * C49483) * C49428 +
           (C5083 * C7962 + (C5253 + C5252) * C7963 +
            (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
             C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                C49483) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C49219 * C3912 +
           (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
              C49207 * C49190 * C110 -
          ((C5080 + C5081) * C49219 * C49450 +
           (C5079 + C5078) * C49219 * C3914 + (C5077 + C5076) * C49219 * C3913 +
           (C5075 + C5074) * C49219 * C3912) *
              C49207 * C49190 * C111 +
          (C5084 * C3912 + C5085 * C3913 + (C5081 + C5080) * C49219 * C3914 +
           (C5021 * C132 - C5022 * C120 - C5021 * C133 + C49451 * C141 +
            C5023 * C425 - C5024 * C414 - C5023 * C426 + C49323 * C432) *
               C49219 * C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
            C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
            C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
            C20210 * C2934 - C20211 * C2928 - C20210 * C2935 + C49465 * C2940) *
               C49219 * C49428 +
           (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
              C49207 * C49190 * C110 -
          ((C20265 + C20266 + C20267 + C20268) * C49219 * C49133 +
           (C20264 + C20263 + C20262 + C20261) * C49219 * C49428) *
              C49207 * C49190 * C111 +
          ((C20268 + C20267 + C20266 + C20265) * C49219 * C49428 +
           (C20204 * C128 - C20205 * C118 - C20204 * C129 + C20200 * C139 +
            C20206 * C417 - C20207 * C410 - C20206 * C418 + C20201 * C428 +
            C20208 * C981 - C20209 * C973 - C20208 * C982 + C20202 * C988 +
            C20210 * C2936 - C20211 * C2929 - C20210 * C2937 + C49465 * C2941) *
               C49219 * C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C49207 * C265 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C5023 * C1954 - C5024 * C1951 - C5023 * C1955 + C49323 * C1960 +
              C5021 * C1292 - C5022 * C1286 - C5021 * C1293 + C49451 * C1298) *
                 C49483 +
             (C7109 + C7110) * C7963 + (C6530 + C6529) * C7962) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C6498 * C7962 + C12640 * C7963 + (C12655 + C12654) * C49483) *
                C49428 +
            (C6293 * C7962 + (C6532 + C6531) * C7963 +
             (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
              C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C49207 * C265 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C49207 * C49478) *
              C267 +
          (((C5257 + C5256) * C49219 * C3912 +
            (C5255 + C5254) * C49219 * C3913 +
            (C5253 + C5252) * C49219 * C3914 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49219 * C49428 +
            (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
               C49207 * C265 -
           ((C20423 + C20424 + C20425 + C20426) * C49219 * C49133 +
            (C20210 * C3389 - C20211 * C3386 - C20210 * C3390 + C49465 * C3395 +
             C20208 * C2385 - C20209 * C2379 - C20208 * C2386 + C20202 * C2397 +
             C20206 * C724 - C20207 * C719 - C20206 * C725 + C20201 * C734 +
             C20204 * C283 - C20205 * C273 - C20204 * C284 + C20200 * C291) *
                C49219 * C49428) *
               C49207 * C49478) *
              C267 +
          (((C20426 + C20425 + C20424 + C20423) * C49219 * C49428 +
            (C20204 * C279 - C20205 * C271 - C20204 * C280 + C20200 * C289 +
             C20206 * C728 - C20207 * C721 - C20206 * C729 + C20201 * C736 +
             C20208 * C2393 - C20209 * C2383 - C20208 * C2394 + C20202 * C2401 +
             C20210 * C3393 - C20211 * C3388 - C20210 * C3394 +
             C49465 * C3397) *
                C49219 * C49133) *
               C49207 * C49478 -
           ((C20265 + C20266 + C20267 + C20268) * C49219 * C49133 +
            (C20264 + C20263 + C20262 + C20261) * C49219 * C49428) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C407 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C5023 * C2387 - C5024 * C2380 - C5023 * C2388 + C49323 * C2398 +
              C5021 * C1488 - C5022 * C1482 - C5021 * C1489 + C49451 * C1494) *
                 C49483 +
             (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C49190 * C267 +
          ((((C5429 + C5428) * C7962 + (C6756 + C6755) * C7963 +
             (C12863 + C12862) * C49483) *
                C49428 +
            ((C5427 + C5426) * C7962 + (C6754 + C6753) * C7963 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C407 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C49190 * C267 +
          (((C5429 + C5428) * C49219 * C3912 +
            (C5427 + C5426) * C49219 * C3913 +
            (C5425 + C5424) * C49219 * C3914 +
            (C5021 * C415 - C5022 * C409 - C5021 * C416 + C49451 * C427 +
             C5023 * C983 - C5024 * C974 - C5023 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49219 * C49428 +
            (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
               C407 -
           ((C20581 + C20582 + C20583 + C20584) * C49219 * C49133 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49219 * C49428) *
               C49480) *
              C49190 * C267 +
          (((C20584 + C20583 + C20582 + C20581) * C49219 * C49428 +
            (C20204 * C419 - C20205 * C411 - C20204 * C420 + C20200 * C429 +
             C20206 * C979 - C20207 * C972 - C20206 * C980 + C20201 * C987 +
             C20208 * C2930 - C20209 * C2926 - C20208 * C2931 + C20202 * C2938 +
             C20210 * C3807 - C20211 * C3802 - C20210 * C3808 +
             C49465 * C3811) *
                C49219 * C49133) *
               C49480 -
           ((C20265 + C20266 + C20267 + C20268) * C49219 * C49133 +
            (C20264 + C20263 + C20262 + C20261) * C49219 * C49428) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C49207 * C547 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C5023 * C1954 - C5024 * C1951 - C5023 * C1955 + C49323 * C1960 +
              C5021 * C1292 - C5022 * C1286 - C5021 * C1293 + C49451 * C1298) *
                 C49483 +
             (C7109 + C7110) * C7963 + (C6530 + C6529) * C7962) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C6498 * C7962 + C12640 * C7963 + (C12655 + C12654) * C49483) *
                C49428 +
            (C6293 * C7962 + (C6532 + C6531) * C7963 +
             (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
              C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C49207 * C547 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C49207 * C49478) *
              C549 +
          (((C5257 + C5256) * C49219 * C3912 +
            (C5255 + C5254) * C49219 * C3913 +
            (C5253 + C5252) * C49219 * C3914 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49219 * C49428 +
            (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
               C49207 * C547 -
           ((C20423 + C20424 + C20425 + C20426) * C49219 * C49133 +
            (C20210 * C3389 - C20211 * C3386 - C20210 * C3390 + C49465 * C3395 +
             C20208 * C2385 - C20209 * C2379 - C20208 * C2386 + C20202 * C2397 +
             C20206 * C724 - C20207 * C719 - C20206 * C725 + C20201 * C734 +
             C20204 * C283 - C20205 * C273 - C20204 * C284 + C20200 * C291) *
                C49219 * C49428) *
               C49207 * C49478) *
              C549 +
          (((C20426 + C20425 + C20424 + C20423) * C49219 * C49428 +
            (C20204 * C279 - C20205 * C271 - C20204 * C280 + C20200 * C289 +
             C20206 * C728 - C20207 * C721 - C20206 * C729 + C20201 * C736 +
             C20208 * C2393 - C20209 * C2383 - C20208 * C2394 + C20202 * C2401 +
             C20210 * C3393 - C20211 * C3388 - C20210 * C3394 +
             C49465 * C3397) *
                C49219 * C49133) *
               C49207 * C49478 -
           ((C20265 + C20266 + C20267 + C20268) * C49219 * C49133 +
            (C20264 + C20263 + C20262 + C20261) * C49219 * C49428) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C7962 +
            (C6529 + C6530) * C7963 + C13204 * C49483) *
               C49428 +
           ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
               C49133) *
              C49207 * C613 -
          (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
               C49133 +
           ((C13217 + C13218) * C49483 + (C7109 + C7110) * C7963 +
            (C6530 + C6529) * C7962) *
               C49428) *
              C49207 * C614 +
          ((C13204 * C7962 + (C13218 + C13217) * C7963 +
            (C5021 * C1789 - C5022 * C1786 - C5021 * C1790 + C49451 * C1795 +
             C5023 * C9343 - C5024 * C9341 - C5023 * C9344 + C49323 * C9347) *
                C49483) *
               C49428 +
           (C12640 * C7962 + (C12655 + C12654) * C7963 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C49483) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C49219 * C3912 +
           (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
              C49207 * C613 -
          ((C5252 + C5253) * C49219 * C49450 +
           (C5254 + C5255) * C49219 * C3914 + (C5256 + C5257) * C49219 * C3913 +
           (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
            C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
               C49219 * C3912) *
              C49207 * C614 +
          ((C5021 * C622 - C5022 * C617 - C5021 * C623 + C49451 * C632 +
            C5023 * C1488 - C5024 * C1482 - C5023 * C1489 + C49323 * C1494) *
               C49219 * C3912 +
           (C5021 * C624 - C5022 * C618 - C5021 * C625 + C49451 * C633 +
            C5023 * C1486 - C5024 * C1481 - C5023 * C1487 + C49323 * C1493) *
               C49219 * C3913 +
           (C5021 * C626 - C5022 * C619 - C5021 * C627 + C49451 * C634 +
            C5023 * C1484 - C5024 * C1480 - C5023 * C1485 + C49323 * C1492) *
               C49219 * C3914 +
           (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
            C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
               C49219 * C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
            C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
            C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
            C20210 * C2934 - C20211 * C2928 - C20210 * C2935 + C49465 * C2940) *
               C49219 * C49428 +
           (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
              C49207 * C613 -
          ((C20423 + C20424 + C20425 + C20426) * C49219 * C49133 +
           (C20210 * C3389 - C20211 * C3386 - C20210 * C3390 + C49465 * C3395 +
            C20208 * C2385 - C20209 * C2379 - C20208 * C2386 + C20202 * C2397 +
            C20206 * C724 - C20207 * C719 - C20206 * C725 + C20201 * C734 +
            C20204 * C283 - C20205 * C273 - C20204 * C284 + C20200 * C291) *
               C49219 * C49428) *
              C49207 * C614 +
          ((C20204 * C622 - C20205 * C617 - C20204 * C623 + C20200 * C632 +
            C20206 * C1488 - C20207 * C1482 - C20206 * C1489 + C20201 * C1494 +
            C20208 * C2387 - C20209 * C2380 - C20208 * C2388 + C20202 * C2398 +
            C20210 * C10309 - C20211 * C10307 - C20210 * C10310 +
            C49465 * C10313) *
               C49219 * C49428 +
           (C20204 * C624 - C20205 * C618 - C20204 * C625 + C20200 * C633 +
            C20206 * C1486 - C20207 * C1481 - C20206 * C1487 + C20201 * C1493 +
            C20208 * C2391 - C20209 * C2382 - C20208 * C2392 + C20202 * C2400 +
            C20210 * C10311 - C20211 * C10308 - C20210 * C10312 +
            C49465 * C10314) *
               C49219 * C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + C13204 * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C407 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C547 +
          ((((C7318 + C7317) * C7962 + (C13426 + C13425) * C7963 +
             (C5021 * C1954 - C5022 * C1951 - C5021 * C1955 + C49451 * C1960 +
              C5023 * C9832 - C5024 * C9830 - C5023 * C9833 + C49323 * C9836) *
                 C49483) *
                C49428 +
            ((C6756 + C6755) * C7962 + (C12863 + C12862) * C7963 +
             (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
              C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
              C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C13217 + C13218) * C49483 + (C7109 + C7110) * C7963 +
             (C6530 + C6529) * C7962) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C407 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C547 +
          (((C5021 * C724 - C5022 * C719 - C5021 * C725 + C49451 * C734 +
             C5023 * C2385 - C5024 * C2379 - C5023 * C2386 + C49323 * C2397) *
                C49219 * C3912 +
            (C5021 * C726 - C5022 * C720 - C5021 * C727 + C49451 * C735 +
             C5023 * C2389 - C5024 * C2381 - C5023 * C2390 + C49323 * C2399) *
                C49219 * C3913 +
            (C5021 * C728 - C5022 * C721 - C5021 * C729 + C49451 * C736 +
             C5023 * C2393 - C5024 * C2383 - C5023 * C2394 + C49323 * C2401) *
                C49219 * C3914 +
            (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
             C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49219 * C49428 +
            (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
               C407 -
           ((C20581 + C20582 + C20583 + C20584) * C49219 * C49133 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49219 * C49428) *
               C49480) *
              C547 +
          (((C20204 * C724 - C20205 * C719 - C20204 * C725 + C20200 * C734 +
             C20206 * C2385 - C20207 * C2379 - C20206 * C2386 + C20201 * C2397 +
             C20208 * C3389 - C20209 * C3386 - C20208 * C3390 + C20202 * C3395 +
             C20210 * C11190 - C20211 * C11188 - C20210 * C11191 +
             C49465 * C11194) *
                C49219 * C49428 +
            (C20204 * C726 - C20205 * C720 - C20204 * C727 + C20200 * C735 +
             C20206 * C2389 - C20207 * C2381 - C20206 * C2390 + C20201 * C2399 +
             C20208 * C3391 - C20209 * C3387 - C20208 * C3392 + C20202 * C3396 +
             C20210 * C17922 - C20211 * C17921 - C20210 * C17923 +
             C49465 * C17924) *
                C49219 * C49133) *
               C49480 -
           ((C20423 + C20424 + C20425 + C20426) * C49219 * C49133 +
            (C20210 * C3389 - C20211 * C3386 - C20210 * C3390 + C49465 * C3395 +
             C20208 * C2385 - C20209 * C2379 - C20208 * C2386 + C20202 * C2397 +
             C20206 * C724 - C20207 * C719 - C20206 * C725 + C20201 * C734 +
             C20204 * C283 - C20205 * C273 - C20204 * C284 + C20200 * C291) *
                C49219 * C49428) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + C13204 * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C821 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C49190 * C549 +
          ((((C5429 + C5428) * C7962 + (C6756 + C6755) * C7963 +
             (C12863 + C12862) * C49483) *
                C49428 +
            ((C5427 + C5426) * C7962 + (C6754 + C6753) * C7963 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C821 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C49190 * C549 +
          (((C5429 + C5428) * C49219 * C3912 +
            (C5427 + C5426) * C49219 * C3913 +
            (C5425 + C5424) * C49219 * C3914 +
            (C5021 * C415 - C5022 * C409 - C5021 * C416 + C49451 * C427 +
             C5023 * C983 - C5024 * C974 - C5023 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49219 * C49428 +
            (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
               C821 -
           ((C20581 + C20582 + C20583 + C20584) * C49219 * C49133 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49219 * C49428) *
               C49480) *
              C49190 * C549 +
          (((C20584 + C20583 + C20582 + C20581) * C49219 * C49428 +
            (C20204 * C419 - C20205 * C411 - C20204 * C420 + C20200 * C429 +
             C20206 * C979 - C20207 * C972 - C20206 * C980 + C20201 * C987 +
             C20208 * C2930 - C20209 * C2926 - C20208 * C2931 + C20202 * C2938 +
             C20210 * C3807 - C20211 * C3802 - C20210 * C3808 +
             C49465 * C3811) *
                C49219 * C49133) *
               C49480 -
           ((C20265 + C20266 + C20267 + C20268) * C49219 * C49133 +
            (C20264 + C20263 + C20262 + C20261) * C49219 * C49428) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + C13204 * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C821 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C265 +
          ((((C7318 + C7317) * C7962 + (C13426 + C13425) * C7963 +
             (C5021 * C1954 - C5022 * C1951 - C5021 * C1955 + C49451 * C1960 +
              C5023 * C9832 - C5024 * C9830 - C5023 * C9833 + C49323 * C9836) *
                 C49483) *
                C49428 +
            ((C6756 + C6755) * C7962 + (C12863 + C12862) * C7963 +
             (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
              C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
              C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C13217 + C13218) * C49483 + (C7109 + C7110) * C7963 +
             (C6530 + C6529) * C7962) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C821 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C265 +
          (((C5021 * C724 - C5022 * C719 - C5021 * C725 + C49451 * C734 +
             C5023 * C2385 - C5024 * C2379 - C5023 * C2386 + C49323 * C2397) *
                C49219 * C3912 +
            (C5021 * C726 - C5022 * C720 - C5021 * C727 + C49451 * C735 +
             C5023 * C2389 - C5024 * C2381 - C5023 * C2390 + C49323 * C2399) *
                C49219 * C3913 +
            (C5021 * C728 - C5022 * C721 - C5021 * C729 + C49451 * C736 +
             C5023 * C2393 - C5024 * C2383 - C5023 * C2394 + C49323 * C2401) *
                C49219 * C3914 +
            (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
             C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
             C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
             C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
             C20210 * C2934 - C20211 * C2928 - C20210 * C2935 +
             C49465 * C2940) *
                C49219 * C49428 +
            (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
               C821 -
           ((C20581 + C20582 + C20583 + C20584) * C49219 * C49133 +
            (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
             C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
             C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
             C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
                C49219 * C49428) *
               C49480) *
              C265 +
          (((C20204 * C724 - C20205 * C719 - C20204 * C725 + C20200 * C734 +
             C20206 * C2385 - C20207 * C2379 - C20206 * C2386 + C20201 * C2397 +
             C20208 * C3389 - C20209 * C3386 - C20208 * C3390 + C20202 * C3395 +
             C20210 * C11190 - C20211 * C11188 - C20210 * C11191 +
             C49465 * C11194) *
                C49219 * C49428 +
            (C20204 * C726 - C20205 * C720 - C20204 * C727 + C20200 * C735 +
             C20206 * C2389 - C20207 * C2381 - C20206 * C2390 + C20201 * C2399 +
             C20208 * C3391 - C20209 * C3387 - C20208 * C3392 + C20202 * C3396 +
             C20210 * C17922 - C20211 * C17921 - C20210 * C17923 +
             C49465 * C17924) *
                C49219 * C49133) *
               C49480 -
           ((C20423 + C20424 + C20425 + C20426) * C49219 * C49133 +
            (C20210 * C3389 - C20211 * C3386 - C20210 * C3390 + C49465 * C3395 +
             C20208 * C2385 - C20209 * C2379 - C20208 * C2386 + C20202 * C2397 +
             C20206 * C724 - C20207 * C719 - C20206 * C725 + C20201 * C734 +
             C20204 * C283 - C20205 * C273 - C20204 * C284 + C20200 * C291) *
                C49219 * C49428) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C7962 +
            (C6529 + C6530) * C7963 + C13204 * C49483) *
               C49428 +
           ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
               C49133) *
              C967 -
          (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
            (C5428 + C5429) * C7962) *
               C49133 +
           ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C7962) *
               C49428) *
              C968 +
          (((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
             C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
                C7962 +
            (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
             C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
                C7963 +
            (C5021 * C2387 - C5022 * C2380 - C5021 * C2388 + C49451 * C2398 +
             C5023 * C10309 - C5024 * C10307 - C5023 * C10310 +
             C49323 * C10313) *
                C49483) *
               C49428 +
           ((C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
             C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
                C7962 +
            (C5021 * C2389 - C5022 * C2381 - C5021 * C2390 + C49451 * C2399 +
             C5023 * C3391 - C5024 * C3387 - C5023 * C3392 + C49323 * C3396) *
                C7963 +
            (C5021 * C2391 - C5022 * C2382 - C5021 * C2392 + C49451 * C2400 +
             C5023 * C10311 - C5024 * C10308 - C5023 * C10312 +
             C49323 * C10314) *
                C49483) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C49219 * C3912 +
           (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
              C967 -
          ((C5424 + C5425) * C49219 * C49450 +
           (C5426 + C5427) * C49219 * C3914 + (C5428 + C5429) * C49219 * C3913 +
           (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
            C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
               C49219 * C3912) *
              C968 +
          ((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
            C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
               C49219 * C3912 +
           (C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
            C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
               C49219 * C3913 +
           (C5021 * C979 - C5022 * C972 - C5021 * C980 + C49451 * C987 +
            C5023 * C2930 - C5024 * C2926 - C5023 * C2931 + C49323 * C2938) *
               C49219 * C3914 +
           (C5021 * C981 - C5022 * C973 - C5021 * C982 + C49451 * C988 +
            C5023 * C2936 - C5024 * C2929 - C5023 * C2937 + C49323 * C2941) *
               C49219 * C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C20204 * C122 - C20205 * C115 - C20204 * C123 + C20200 * C136 +
            C20206 * C423 - C20207 * C413 - C20206 * C424 + C20201 * C431 +
            C20208 * C975 - C20209 * C970 - C20208 * C976 + C20202 * C985 +
            C20210 * C2934 - C20211 * C2928 - C20210 * C2935 + C49465 * C2940) *
               C49219 * C49428 +
           (C20261 + C20262 + C20263 + C20264) * C49219 * C49133) *
              C967 -
          ((C20581 + C20582 + C20583 + C20584) * C49219 * C49133 +
           (C20210 * C3803 - C20211 * C3800 - C20210 * C3804 + C49465 * C3809 +
            C20208 * C2934 - C20209 * C2928 - C20208 * C2935 + C20202 * C2940 +
            C20206 * C975 - C20207 * C970 - C20206 * C976 + C20201 * C985 +
            C20204 * C423 - C20205 * C413 - C20204 * C424 + C20200 * C431) *
               C49219 * C49428) *
              C968 +
          ((C20204 * C975 - C20205 * C970 - C20204 * C976 + C20200 * C985 +
            C20206 * C2934 - C20207 * C2928 - C20206 * C2935 + C20201 * C2940 +
            C20208 * C3803 - C20209 * C3800 - C20208 * C3804 + C20202 * C3809 +
            C20210 * C18009 - C20211 * C18007 - C20210 * C18010 +
            C49465 * C18013) *
               C49219 * C49428 +
           (C20204 * C977 - C20205 * C971 - C20204 * C978 + C20200 * C986 +
            C20206 * C2932 - C20207 * C2927 - C20206 * C2933 + C20201 * C2939 +
            C20208 * C3805 - C20209 * C3801 - C20208 * C3806 + C20202 * C3810 +
            C20210 * C18011 - C20211 * C18008 - C20210 * C18012 +
            C49465 * C18014) *
               C49219 * C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49503 +
            (C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) *
                C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C49207 * C49190 * C110 -
          ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
           (C1135 + C1108 + C1107) * C1103) *
              C49207 * C49190 * C111 +
          (C1138 * C1103 + (C1124 + C1123 + C1137) * C1104 +
           (C177 * C49515 + C318 * C49503 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C49207 * C49190 * C110 -
          (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
           C179 * C103) *
              C49207 * C49190 * C111 +
          (C180 * C103 + C181 * C104 + C182 * C105 + C183 * C106 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C49236 * C142) * C49219 *
               C107) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C49190 * C110 -
          ((C7975 + C7976 + C7977) * C49472 + (C7974 + C7973 + C7972) * C49499 +
           (C7971 + C7970 + C7969) * C49512) *
              C49207 * C49190 * C111 +
          (C7979 * C49512 + (C7977 + C7976 + C7975) * C49499 +
           (C177 * C7962 + C318 * C7963 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 +
           (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
               C9153) *
              C49123 * C49207 * C49190 * C110 -
          ((C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
               C9153 +
           C1332 * C9152 + C1132 * C9151 + C321 * C9150 + C174 * C9149) *
              C49123 * C49207 * C49190 * C111 +
          (C175 * C9149 + C320 * C9150 + C1133 * C9151 + C1331 * C9152 +
           (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
               C9153) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49219 * C49512 +
           (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
              C49207 * C49190 * C110 -
          ((C15243 + C15244 + C15245) * C49219 * C49472 +
           (C15242 + C15241 + C15240) * C49219 * C49499 +
           (C15239 + C15238 + C15237) * C49219 * C49512) *
              C49207 * C49190 * C111 +
          (C15248 * C49512 + (C15245 + C15244 + C15243) * C49219 * C49499 +
           (C15176 * C130 - C15177 * C119 - C15176 * C131 + C15173 * C140 +
            C15178 * C415 - C15179 * C409 - C15178 * C416 + C15174 * C427 +
            C15180 * C983 - C15181 * C974 - C15180 * C984 + C49486 * C989) *
               C49219 * C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49515 +
           (C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291 +
            C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
            C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397) *
               C49503 +
           (C15176 * C622 - C15177 * C617 - C15176 * C623 + C15173 * C632 +
            C15178 * C1488 - C15179 * C1482 - C15178 * C1489 + C15174 * C1494 +
            C15180 * C2387 - C15181 * C2380 - C15180 * C2388 + C49486 * C2398) *
               C49483) *
              C49123 * C49207 * C49190 * C110 -
          ((C15180 * C2391 - C15181 * C2382 - C15180 * C2392 + C49486 * C2400 +
            C15178 * C1486 - C15179 * C1481 - C15178 * C1487 + C15174 * C1493 +
            C15176 * C624 - C15177 * C618 - C15176 * C625 + C15173 * C633) *
               C49483 +
           (C15434 + C15435 + C15436) * C49503 +
           (C15239 + C15238 + C15237) * C49515) *
              C49123 * C49207 * C49190 * C111 +
          (C15247 * C49515 + (C15433 + C15432 + C15431) * C49503 +
           (C15176 * C626 - C15177 * C619 - C15176 * C627 + C15173 * C634 +
            C15178 * C1484 - C15179 * C1480 - C15178 * C1485 + C15174 * C1492 +
            C15180 * C2395 - C15181 * C2384 - C15180 * C2396 + C49486 * C2402) *
               C49483) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C49207 * C265 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                 C49483 +
             C1330 * C49503 + C1329 * C49515) *
                C1103) *
               C49207 * C49478) *
              C267 +
          (((C1320 + C1319 + C1334) * C1103 + (C1314 + C1313 + C1333) * C1104 +
            (C319 * C49515 + C1134 * C49503 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C49207 * C265 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C49207 * C49478) *
              C267 +
          ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) * C49219 *
                C107) *
               C49207 * C49478 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C265 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C267 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C265 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C49207 * C265 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C49207 * C49478) *
              C267 +
          (((C15436 + C15435 + C15434) * C49219 * C49512 +
            (C15433 + C15432 + C15431) * C49219 * C49499 +
            (C15176 * C277 - C15177 * C270 - C15176 * C278 + C15173 * C288 +
             C15178 * C730 - C15179 * C722 - C15178 * C731 + C15174 * C737 +
             C15180 * C2735 - C15181 * C2734 - C15180 * C2736 +
             C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 +
            (C16742 + C16743 + C16744) * C49483) *
               C49123 * C49207 * C265 -
           ((C15180 * C9832 - C15181 * C9830 - C15180 * C9833 + C49486 * C9836 +
             C15178 * C1954 - C15179 * C1951 - C15178 * C1955 + C15174 * C1960 +
             C15176 * C1292 - C15177 * C1286 - C15176 * C1293 +
             C15173 * C1298) *
                C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C49207 * C49478) *
              C267 +
          (((C15436 + C15435 + C15434) * C49515 +
            (C16745 + C16746 + C16747) * C49503 +
            (C15176 * C1290 - C15177 * C1285 - C15176 * C1291 + C15173 * C1297 +
             C15178 * C1956 - C15179 * C1952 - C15178 * C1957 + C15174 * C1961 +
             C15180 * C10095 - C15181 * C10094 - C15180 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C407 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            ((C113 * C1488 - C114 * C1482 - C113 * C1489 + C49236 * C1494) *
                 C49483 +
             (C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) *
                 C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C49190 * C267 +
          (((C1514 + C1530 + C1529) * C1103 + (C1505 + C1528 + C1527) * C1104 +
            (C459 * C49515 +
             (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                 C49503 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C407 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C49190 * C267 +
          ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
            (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) * C49219 *
                C107) *
               C49480 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C267 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           ((C113 * C9343 - C114 * C9341 - C113 * C9344 + C49236 * C9347) *
                C9153 +
            (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                C9152 +
            C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C267 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C407 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C49190 * C267 +
          (((C15624 + C15623 + C15622) * C49219 * C49512 +
            (C15621 + C15620 + C15619) * C49219 * C49499 +
            (C15176 * C417 - C15177 * C410 - C15176 * C418 + C15173 * C428 +
             C15178 * C981 - C15179 * C973 - C15178 * C982 + C15174 * C988 +
             C15180 * C2936 - C15181 * C2929 - C15180 * C2937 +
             C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 +
            (C16742 + C16743 + C16744) * C49483) *
               C49123 * C407 -
           ((C15180 * C10309 - C15181 * C10307 - C15180 * C10310 +
             C49486 * C10313 + C15178 * C2387 - C15179 * C2380 -
             C15178 * C2388 + C15174 * C2398 + C15176 * C1488 - C15177 * C1482 -
             C15176 * C1489 + C15173 * C1494) *
                C49483 +
            (C15180 * C3389 - C15181 * C3386 - C15180 * C3390 + C49486 * C3395 +
             C15178 * C2385 - C15179 * C2379 - C15178 * C2386 + C15174 * C2397 +
             C15176 * C724 - C15177 * C719 - C15176 * C725 + C15173 * C734) *
                C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C15624 + C15623 + C15622) * C49515 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49503 +
            (C15176 * C1486 - C15177 * C1481 - C15176 * C1487 + C15173 * C1493 +
             C15178 * C2391 - C15179 * C2382 - C15178 * C2392 + C15174 * C2400 +
             C15180 * C10311 - C15181 * C10308 - C15180 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C49207 * C547 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                 C49483 +
             C1330 * C49503 + C1329 * C49515) *
                C1103) *
               C49207 * C49478) *
              C549 +
          (((C1320 + C1319 + C1334) * C1103 + (C1314 + C1313 + C1333) * C1104 +
            (C319 * C49515 + C1134 * C49503 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C49207 * C547 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C49207 * C49478) *
              C549 +
          ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) * C49219 *
                C107) *
               C49207 * C49478 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C547 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C549 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C547 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C49207 * C547 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C49207 * C49478) *
              C549 +
          (((C15436 + C15435 + C15434) * C49219 * C49512 +
            (C15433 + C15432 + C15431) * C49219 * C49499 +
            (C15176 * C277 - C15177 * C270 - C15176 * C278 + C15173 * C288 +
             C15178 * C730 - C15179 * C722 - C15178 * C731 + C15174 * C737 +
             C15180 * C2735 - C15181 * C2734 - C15180 * C2736 +
             C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 +
            (C16742 + C16743 + C16744) * C49483) *
               C49123 * C49207 * C547 -
           ((C15180 * C9832 - C15181 * C9830 - C15180 * C9833 + C49486 * C9836 +
             C15178 * C1954 - C15179 * C1951 - C15178 * C1955 + C15174 * C1960 +
             C15176 * C1292 - C15177 * C1286 - C15176 * C1293 +
             C15173 * C1298) *
                C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C49207 * C49478) *
              C549 +
          (((C15436 + C15435 + C15434) * C49515 +
            (C16745 + C16746 + C16747) * C49503 +
            (C15176 * C1290 - C15177 * C1285 - C15176 * C1291 + C15173 * C1297 +
             C15178 * C1956 - C15179 * C1952 - C15178 * C1957 + C15174 * C1961 +
             C15180 * C10095 - C15181 * C10094 - C15180 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            C1329 * C49503 + C1330 * C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C49207 * C613 -
          ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
           (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
              C49207 * C614 +
          ((C1330 * C49515 + C1805 * C49503 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C1103 +
           (C1132 * C49515 + C1332 * C49503 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C1104 +
           (C1133 * C49515 + C1331 * C49503 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C49207 * C613 -
          (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
           (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
               C103) *
              C49207 * C614 +
          ((C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) * C49219 *
               C103 +
           (C113 * C624 - C114 * C618 - C113 * C625 + C49236 * C633) * C49219 *
               C104 +
           (C113 * C626 - C114 * C619 - C113 * C627 + C49236 * C634) * C49219 *
               C105 +
           (C113 * C628 - C114 * C620 - C113 * C629 + C49236 * C635) * C49219 *
               C106 +
           (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) * C49219 *
               C107) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C613 -
          ((C8126 + C8127 + C8128) * C49472 + (C8129 + C8130 + C8131) * C49499 +
           (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
              C49207 * C614 +
          ((C1330 * C7962 + C1805 * C7963 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C49512 +
           (C1132 * C7962 + C1332 * C7963 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C49499 +
           (C1133 * C7962 + C1331 * C7963 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C49207 * C613 -
          (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
           C1329 * C9149) *
              C49123 * C49207 * C614 +
          (C1330 * C9149 + C1805 * C9150 + C9258 * C9151 + C9504 * C9152 +
           (C113 * C9494 - C114 * C9493 - C113 * C9495 + C49236 * C9496) *
               C9153) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49219 * C49512 +
           (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
              C49207 * C613 -
          ((C15431 + C15432 + C15433) * C49219 * C49472 +
           (C15434 + C15435 + C15436) * C49219 * C49499 +
           (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
            C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
            C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
               C49219 * C49512) *
              C49207 * C614 +
          ((C15176 * C622 - C15177 * C617 - C15176 * C623 + C15173 * C632 +
            C15178 * C1488 - C15179 * C1482 - C15178 * C1489 + C15174 * C1494 +
            C15180 * C2387 - C15181 * C2380 - C15180 * C2388 + C49486 * C2398) *
               C49219 * C49512 +
           (C15176 * C624 - C15177 * C618 - C15176 * C625 + C15173 * C633 +
            C15178 * C1486 - C15179 * C1481 - C15178 * C1487 + C15174 * C1493 +
            C15180 * C2391 - C15181 * C2382 - C15180 * C2392 + C49486 * C2400) *
               C49219 * C49499 +
           (C15176 * C626 - C15177 * C619 - C15176 * C627 + C15173 * C634 +
            C15178 * C1484 - C15179 * C1480 - C15178 * C1485 + C15174 * C1492 +
            C15180 * C2395 - C15181 * C2384 - C15180 * C2396 + C49486 * C2402) *
               C49219 * C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49515 +
           (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
              C49123 * C49207 * C613 -
          ((C17170 + C17171 + C17172) * C49483 +
           (C16744 + C16743 + C16742) * C49503 +
           (C16741 + C16740 + C16739) * C49515) *
              C49123 * C49207 * C614 +
          (C17163 * C49515 + (C17172 + C17171 + C17170) * C49503 +
           (C15176 * C1789 - C15177 * C1786 - C15176 * C1790 + C15173 * C1795 +
            C15178 * C9343 - C15179 * C9341 - C15178 * C9344 + C15174 * C9347 +
            C15180 * C9834 - C15181 * C9831 - C15180 * C9835 + C49486 * C9837) *
               C49483) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C407 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C547 +
          (((C1977 * C49515 + C1976 * C49503 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C1103 +
            (C1526 * C49515 + C1525 * C49503 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C1104 +
            (C1524 * C49515 + C1523 * C49503 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C407 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C547 +
          (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) * C49219 *
                C103 +
            (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) * C49219 *
                C104 +
            (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) * C49219 *
                C105 +
            (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) * C49219 *
                C106 +
            (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) * C49219 *
                C107) *
               C49480 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C547 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C547 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C407 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C547 +
          (((C15176 * C724 - C15177 * C719 - C15176 * C725 + C15173 * C734 +
             C15178 * C2385 - C15179 * C2379 - C15178 * C2386 + C15174 * C2397 +
             C15180 * C3389 - C15181 * C3386 - C15180 * C3390 +
             C49486 * C3395) *
                C49219 * C49512 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49219 * C49499 +
            (C15176 * C728 - C15177 * C721 - C15176 * C729 + C15173 * C736 +
             C15178 * C2393 - C15179 * C2383 - C15178 * C2394 + C15174 * C2401 +
             C15180 * C3393 - C15181 * C3388 - C15180 * C3394 +
             C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
               C49123 * C407 -
           ((C17355 + C17356 + C17357) * C49483 +
            (C17358 + C17359 + C17360) * C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C547 +
          (((C17360 + C17359 + C17358) * C49515 +
            (C17357 + C17356 + C17355) * C49503 +
            (C15176 * C1954 - C15177 * C1951 - C15176 * C1955 + C15173 * C1960 +
             C15178 * C9832 - C15179 * C9830 - C15178 * C9833 + C15174 * C9836 +
             C15180 * C10741 - C15181 * C10740 - C15180 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C17170 + C17171 + C17172) * C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C821 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C49190 * C549 +
          (((C1514 + C1530 + C1529) * C1103 + (C1505 + C1528 + C1527) * C1104 +
            (C459 * C49515 +
             (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                 C49503 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C821 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C49190 * C549 +
          ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
            (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) * C49219 *
                C107) *
               C49480 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C549 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C549 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C821 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C49190 * C549 +
          (((C15624 + C15623 + C15622) * C49219 * C49512 +
            (C15621 + C15620 + C15619) * C49219 * C49499 +
            (C15176 * C417 - C15177 * C410 - C15176 * C418 + C15173 * C428 +
             C15178 * C981 - C15179 * C973 - C15178 * C982 + C15174 * C988 +
             C15180 * C2936 - C15181 * C2929 - C15180 * C2937 +
             C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C15243 + C15244 + C15245) * C49219 * C49472 +
            (C15242 + C15241 + C15240) * C49219 * C49499 +
            (C15239 + C15238 + C15237) * C49219 * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
               C49123 * C821 -
           ((C17355 + C17356 + C17357) * C49483 +
            (C17358 + C17359 + C17360) * C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C15624 + C15623 + C15622) * C49515 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49503 +
            (C15176 * C1486 - C15177 * C1481 - C15176 * C1487 + C15173 * C1493 +
             C15178 * C2391 - C15179 * C2382 - C15178 * C2392 + C15174 * C2400 +
             C15180 * C10311 - C15181 * C10308 - C15180 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C16747 + C16746 + C16745) * C49483 +
            (C15434 + C15435 + C15436) * C49503 +
            (C15239 + C15238 + C15237) * C49515) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C821 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C265 +
          (((C1977 * C49515 + C1976 * C49503 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C1103 +
            (C1526 * C49515 + C1525 * C49503 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C1104 +
            (C1524 * C49515 + C1523 * C49503 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C821 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C265 +
          (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) * C49219 *
                C103 +
            (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) * C49219 *
                C104 +
            (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) * C49219 *
                C105 +
            (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) * C49219 *
                C106 +
            (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) * C49219 *
                C107) *
               C49480 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C265 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C265 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49219 * C49512 +
            (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
               C821 -
           ((C15619 + C15620 + C15621) * C49219 * C49472 +
            (C15622 + C15623 + C15624) * C49219 * C49499 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49219 * C49512) *
               C49480) *
              C265 +
          (((C15176 * C724 - C15177 * C719 - C15176 * C725 + C15173 * C734 +
             C15178 * C2385 - C15179 * C2379 - C15178 * C2386 + C15174 * C2397 +
             C15180 * C3389 - C15181 * C3386 - C15180 * C3390 +
             C49486 * C3395) *
                C49219 * C49512 +
            (C15176 * C726 - C15177 * C720 - C15176 * C727 + C15173 * C735 +
             C15178 * C2389 - C15179 * C2381 - C15178 * C2390 + C15174 * C2399 +
             C15180 * C3391 - C15181 * C3387 - C15180 * C3392 +
             C49486 * C3396) *
                C49219 * C49499 +
            (C15176 * C728 - C15177 * C721 - C15176 * C729 + C15173 * C736 +
             C15178 * C2393 - C15179 * C2383 - C15178 * C2394 + C15174 * C2401 +
             C15180 * C3393 - C15181 * C3388 - C15180 * C3394 +
             C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C15431 + C15432 + C15433) * C49219 * C49472 +
            (C15434 + C15435 + C15436) * C49219 * C49499 +
            (C15180 * C2385 - C15181 * C2379 - C15180 * C2386 + C49486 * C2397 +
             C15178 * C724 - C15179 * C719 - C15178 * C725 + C15174 * C734 +
             C15176 * C283 - C15177 * C273 - C15176 * C284 + C15173 * C291) *
                C49219 * C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
             C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
             C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
                C49515 +
            (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
               C49123 * C821 -
           ((C17355 + C17356 + C17357) * C49483 +
            (C17358 + C17359 + C17360) * C49503 +
            (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
             C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
             C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
                C49515) *
               C49123 * C49480) *
              C265 +
          (((C17360 + C17359 + C17358) * C49515 +
            (C17357 + C17356 + C17355) * C49503 +
            (C15176 * C1954 - C15177 * C1951 - C15176 * C1955 + C15173 * C1960 +
             C15178 * C9832 - C15179 * C9830 - C15178 * C9833 + C15174 * C9836 +
             C15180 * C10741 - C15181 * C10740 - C15180 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C17170 + C17171 + C17172) * C49483 +
            (C16744 + C16743 + C16742) * C49503 +
            (C16741 + C16740 + C16739) * C49515) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            C1329 * C49503 + C1330 * C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C967 -
          ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
           (C1976 * C49483 + C1977 * C49503 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49515) *
               C1103) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49515 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49503 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C1103 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49515 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49503 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C1104 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49515 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49503 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C967 -
          (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
               C103) *
              C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49219 *
               C103 +
           (C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49219 *
               C104 +
           (C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49219 *
               C105 +
           (C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C49219 *
               C106 +
           (C113 * C983 - C114 * C974 - C113 * C984 + C49236 * C989) * C49219 *
               C107) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C967 -
          ((C8278 + C8279 + C8280) * C49472 + (C8281 + C8282 + C8283) * C49499 +
           (C1976 * C49483 + C1977 * C7963 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C7962) *
               C49512) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C7962 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C7963 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C49512 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C7962 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C7963 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C49499 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C7962 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C7963 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C967 -
          (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
              C49123 * C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C9149 +
           (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
               C9150 +
           (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
               C9151 +
           (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
               C9152 +
           (C113 * C9834 - C114 * C9831 - C113 * C9835 + C49236 * C9837) *
               C9153) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49219 * C49512 +
           (C15237 + C15238 + C15239) * C49219 * C49499 + C15248 * C49472) *
              C967 -
          ((C15619 + C15620 + C15621) * C49219 * C49472 +
           (C15622 + C15623 + C15624) * C49219 * C49499 +
           (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
            C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
            C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
               C49219 * C49512) *
              C968 +
          ((C15176 * C975 - C15177 * C970 - C15176 * C976 + C15173 * C985 +
            C15178 * C2934 - C15179 * C2928 - C15178 * C2935 + C15174 * C2940 +
            C15180 * C3803 - C15181 * C3800 - C15180 * C3804 + C49486 * C3809) *
               C49219 * C49512 +
           (C15176 * C977 - C15177 * C971 - C15176 * C978 + C15173 * C986 +
            C15178 * C2932 - C15179 * C2927 - C15178 * C2933 + C15174 * C2939 +
            C15180 * C3805 - C15181 * C3801 - C15180 * C3806 + C49486 * C3810) *
               C49219 * C49499 +
           (C15176 * C979 - C15177 * C972 - C15176 * C980 + C15173 * C987 +
            C15178 * C2930 - C15179 * C2926 - C15178 * C2931 + C15174 * C2938 +
            C15180 * C3807 - C15181 * C3802 - C15180 * C3808 + C49486 * C3811) *
               C49219 * C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C15176 * C122 - C15177 * C115 - C15176 * C123 + C15173 * C136 +
            C15178 * C423 - C15179 * C413 - C15178 * C424 + C15174 * C431 +
            C15180 * C975 - C15181 * C970 - C15180 * C976 + C49486 * C985) *
               C49515 +
           (C16739 + C16740 + C16741) * C49503 + C17163 * C49483) *
              C49123 * C967 -
          ((C17355 + C17356 + C17357) * C49483 +
           (C17358 + C17359 + C17360) * C49503 +
           (C15180 * C2934 - C15181 * C2928 - C15180 * C2935 + C49486 * C2940 +
            C15178 * C975 - C15179 * C970 - C15178 * C976 + C15174 * C985 +
            C15176 * C423 - C15177 * C413 - C15176 * C424 + C15173 * C431) *
               C49515) *
              C49123 * C968 +
          ((C15176 * C975 - C15177 * C970 - C15176 * C976 + C15173 * C985 +
            C15178 * C2934 - C15179 * C2928 - C15178 * C2935 + C15174 * C2940 +
            C15180 * C3803 - C15181 * C3800 - C15180 * C3804 + C49486 * C3809) *
               C49515 +
           (C15176 * C2385 - C15177 * C2379 - C15176 * C2386 + C15173 * C2397 +
            C15178 * C3389 - C15179 * C3386 - C15178 * C3390 + C15174 * C3395 +
            C15180 * C11190 - C15181 * C11188 - C15180 * C11191 +
            C49486 * C11194) *
               C49503 +
           (C15176 * C2387 - C15177 * C2380 - C15176 * C2388 + C15173 * C2398 +
            C15178 * C10309 - C15179 * C10307 - C15178 * C10310 +
            C15174 * C10313 + C15180 * C11192 - C15181 * C11189 -
            C15180 * C11193 + C49486 * C11195) *
               C49483) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49449 +
            (C32358 + C32359) * C49281) *
               C49128 +
           ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
           C35044 * C26398) *
              C49207 * C49190 * C110 -
          (((C31056 + C31057) * C49281 + (C30883 + C30882) * C49449) * C26398 +
           ((C31058 + C31059) * C49281 + (C30881 + C30880) * C49449) * C49136 +
           (C32345 * C49281 + (C30879 + C30878) * C49449) * C49128) *
              C49207 * C49190 * C111 +
          (C35044 * C49128 +
           (C30887 * C49449 + (C31057 + C31056) * C49281) * C49136 +
           ((C30885 + C30884) * C49449 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49281) *
               C26398) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49449 +
             (C32358 + C32359) * C49281) *
                C49128 +
            ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
            C35044 * C26398) *
               C49207 * C265 -
           (((C32122 + C32123) * C49281 + C35239 * C49449) * C26398 +
            (C32344 * C49281 + C32345 * C49449) * C49136 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C49449) *
                C49128) *
               C49207 * C49478) *
              C267 +
          (((C32334 * C49449 + C32335 * C49281) * C49128 +
            (C35042 * C49449 + (C32123 + C32122) * C49281) * C49136 +
            ((C31057 + C31056) * C49449 +
             (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
              C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
              C49323 * C1495) *
                 C49281) *
                C26398) *
               C49207 * C49478 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C49449) * C26398 +
            (C35239 * C49281 + (C30881 + C30880) * C49449) * C49136 +
            (C32345 * C49281 + (C30879 + C30878) * C49449) * C49128) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49449 +
             (C32358 + C32359) * C49281) *
                C49128 +
            ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
            C35044 * C26398) *
               C407 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C49449) * C26398 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C49449) * C49136 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49449) *
                C49128) *
               C49480) *
              C49190 * C267 +
          ((((C31233 + C31232) * C49449 + (C32585 + C32584) * C49281) * C49128 +
            ((C31231 + C31230) * C49449 + (C35447 + C35446) * C49281) * C49136 +
            ((C31229 + C31228) * C49449 +
             (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
              C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
              C49323 * C2737) *
                 C49281) *
                C26398) *
               C49480 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C49449) * C26398 +
            (C35239 * C49281 + (C30881 + C30880) * C49449) * C49136 +
            (C32345 * C49281 + (C30879 + C30878) * C49449) * C49128) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49449 +
             (C32358 + C32359) * C49281) *
                C49128 +
            ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
            C35044 * C26398) *
               C49207 * C547 -
           (((C32122 + C32123) * C49281 + C35239 * C49449) * C26398 +
            (C32344 * C49281 + C32345 * C49449) * C49136 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C49449) *
                C49128) *
               C49207 * C49478) *
              C549 +
          (((C32334 * C49449 + C32335 * C49281) * C49128 +
            (C35042 * C49449 + (C32123 + C32122) * C49281) * C49136 +
            ((C31057 + C31056) * C49449 +
             (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
              C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
              C49323 * C1495) *
                 C49281) *
                C26398) *
               C49207 * C49478 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C49449) * C26398 +
            (C35239 * C49281 + (C30881 + C30880) * C49449) * C49136 +
            (C32345 * C49281 + (C30879 + C30878) * C49449) * C49128) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49449 +
            (C32358 + C32359) * C49281) *
               C49128 +
           ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
           C35044 * C26398) *
              C49207 * C613 -
          (((C32122 + C32123) * C49281 + C35239 * C49449) * C26398 +
           (C32344 * C49281 + C32345 * C49449) * C49136 +
           ((C32361 + C32360) * C49281 + (C32359 + C32358) * C49449) * C49128) *
              C49207 * C614 +
          ((C32926 * C49449 + (C32940 + C32939) * C49281) * C49128 +
           (C32335 * C49449 + (C32363 + C32362) * C49281) * C49136 +
           ((C32123 + C32122) * C49449 +
            (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 + C30823 * C1296 +
             C30827 * C1958 - C30828 * C1953 - C30827 * C1959 +
             C49323 * C1962) *
                C49281) *
               C26398) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49449 +
             (C32358 + C32359) * C49281) *
                C49128 +
            ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
            C35044 * C26398) *
               C407 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C49449) * C26398 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C49449) * C49136 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49449) *
                C49128) *
               C49480) *
              C547 +
          ((((C33162 + C33161) * C49449 + (C33160 + C33159) * C49281) * C49128 +
            ((C32585 + C32584) * C49449 + (C32583 + C32582) * C49281) * C49136 +
            ((C35447 + C35446) * C49449 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49281) *
                C26398) *
               C49480 -
           (((C32122 + C32123) * C49281 + C35239 * C49449) * C26398 +
            (C32344 * C49281 + C32345 * C49449) * C49136 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C49449) *
                C49128) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49449 +
             (C32358 + C32359) * C49281) *
                C49128 +
            ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
            C35044 * C26398) *
               C821 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C49449) * C26398 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C49449) * C49136 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49449) *
                C49128) *
               C49480) *
              C49190 * C549 +
          ((((C31233 + C31232) * C49449 + (C32585 + C32584) * C49281) * C49128 +
            ((C31231 + C31230) * C49449 + (C35447 + C35446) * C49281) * C49136 +
            ((C31229 + C31228) * C49449 +
             (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
              C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
              C49323 * C2737) *
                 C49281) *
                C26398) *
               C49480 -
           (((C31056 + C31057) * C49281 + (C30883 + C30882) * C49449) * C26398 +
            (C35239 * C49281 + (C30881 + C30880) * C49449) * C49136 +
            (C32345 * C49281 + (C30879 + C30878) * C49449) * C49128) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49449 +
             (C32358 + C32359) * C49281) *
                C49128 +
            ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
            C35044 * C26398) *
               C821 -
           (((C35446 + C35447) * C49281 + (C31230 + C31231) * C49449) * C26398 +
            ((C32584 + C32585) * C49281 + (C31232 + C31233) * C49449) * C49136 +
            ((C33161 + C33162) * C49281 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49449) *
                C49128) *
               C49480) *
              C265 +
          ((((C33162 + C33161) * C49449 + (C33160 + C33159) * C49281) * C49128 +
            ((C32585 + C32584) * C49449 + (C32583 + C32582) * C49281) * C49136 +
            ((C35447 + C35446) * C49449 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49281) *
                C26398) *
               C49480 -
           (((C32122 + C32123) * C49281 + C35239 * C49449) * C26398 +
            (C32344 * C49281 + C32345 * C49449) * C49136 +
            ((C32361 + C32360) * C49281 + (C32359 + C32358) * C49449) *
                C49128) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49449 +
            (C32358 + C32359) * C49281) *
               C49128 +
           ((C30878 + C30879) * C49449 + C32334 * C49281) * C49136 +
           C35044 * C26398) *
              C967 -
          (((C35446 + C35447) * C49281 + (C31230 + C31231) * C49449) * C26398 +
           ((C32584 + C32585) * C49281 + (C31232 + C31233) * C49449) * C49136 +
           ((C33161 + C33162) * C49281 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49449) *
               C49128) *
              C968 +
          (((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
             C30827 * C2934 - C30828 * C2928 - C30827 * C2935 +
             C49323 * C2940) *
                C49449 +
            (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
             C30827 * C3389 - C30828 * C3386 - C30827 * C3390 +
             C49323 * C3395) *
                C49281) *
               C49128 +
           ((C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
             C30827 * C2932 - C30828 * C2927 - C30827 * C2933 +
             C49323 * C2939) *
                C49449 +
            (C30825 * C2389 - C30826 * C2381 - C30825 * C2390 + C30823 * C2399 +
             C30827 * C3391 - C30828 * C3387 - C30827 * C3392 +
             C49323 * C3396) *
                C49281) *
               C49136 +
           ((C30825 * C979 - C30826 * C972 - C30825 * C980 + C30823 * C987 +
             C30827 * C2930 - C30828 * C2926 - C30827 * C2931 +
             C49323 * C2938) *
                C49449 +
            (C30825 * C2393 - C30826 * C2383 - C30825 * C2394 + C30823 * C2401 +
             C30827 * C3393 - C30828 * C3388 - C30827 * C3394 +
             C49323 * C3397) *
                C49281) *
               C26398) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49449 +
            (C48021 * C283 - C48060 * C273 - C48021 * C284 + C49319 * C291 +
             C48018 * C724 - C48053 * C719 - C48018 * C725 + C49326 * C734 +
             C48066 * C2385 - C36633 * C2379 - C48066 * C2386 +
             C36627 * C2397) *
                C49281) *
               C23662 +
           ((C36689 + C36690 + C36691) * C49449 +
            (C36888 + C36887 + C36886) * C49281) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C36883 + C36884 + C36885) * C49281 +
            (C36694 + C36693 + C36692) * C49449) *
               C49133 +
           ((C36886 + C36887 + C36888) * C49281 +
            (C36691 + C36690 + C36689) * C49449) *
               C23662) *
              C49207 * C49190 * C111 +
          ((C36699 * C49449 + (C36885 + C36884 + C36883) * C49281) * C23662 +
           ((C36697 + C36696 + C36695) * C49449 +
            (C48021 * C277 - C48060 * C270 - C48021 * C278 + C49319 * C288 +
             C48018 * C730 - C48053 * C722 - C48018 * C731 + C49326 * C737 +
             C48066 * C2735 - C36633 * C2734 - C48066 * C2736 +
             C36627 * C2737) *
                C49281) *
               C49133) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C49449 +
             (C38261 + C38262 + C38263) * C49281) *
                C23662 +
            ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
               C49207 * C265 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C49449) * C49133 +
            ((C48066 * C2387 - C36633 * C2380 - C48066 * C2388 +
              C36627 * C2398 + C48018 * C1488 - C48053 * C1482 -
              C48018 * C1489 + C49326 * C1494 + C48021 * C622 - C48060 * C617 -
              C48021 * C623 + C49319 * C632) *
                 C49281 +
             (C38263 + C38262 + C38261) * C49449) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C38250 * C49449 + (C38266 + C38265 + C38264) * C49281) * C23662 +
            ((C36885 + C36884 + C36883) * C49449 +
             (C48021 * C626 - C48060 * C619 - C48021 * C627 + C49319 * C634 +
              C48018 * C1484 - C48053 * C1480 - C48018 * C1485 +
              C49326 * C1492 + C48066 * C2395 - C36633 * C2384 -
              C48066 * C2396 + C36627 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C49449) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C49449) * C23662) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C49449 +
             (C38261 + C38262 + C38263) * C49281) *
                C23662 +
            ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
               C407 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C49449) *
                C49133 +
            ((C48066 * C3389 - C36633 * C3386 - C48066 * C3390 +
              C36627 * C3395 + C48018 * C2385 - C48053 * C2379 -
              C48018 * C2386 + C49326 * C2397 + C48021 * C724 - C48060 * C719 -
              C48021 * C725 + C49319 * C734) *
                 C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C49449) *
                C23662) *
               C49480) *
              C49190 * C267 +
          ((((C37076 + C37075 + C37074) * C49449 +
             (C38481 + C38480 + C38479) * C49281) *
                C23662 +
            ((C37073 + C37072 + C37071) * C49449 +
             (C48021 * C728 - C48060 * C721 - C48021 * C729 + C49319 * C736 +
              C48018 * C2393 - C48053 * C2383 - C48018 * C2394 +
              C49326 * C2401 + C48066 * C3393 - C36633 * C3388 -
              C48066 * C3394 + C36627 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C49449) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C49449) * C23662) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C49449 +
             (C38261 + C38262 + C38263) * C49281) *
                C23662 +
            ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
               C49207 * C547 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C49449) * C49133 +
            ((C48066 * C2387 - C36633 * C2380 - C48066 * C2388 +
              C36627 * C2398 + C48018 * C1488 - C48053 * C1482 -
              C48018 * C1489 + C49326 * C1494 + C48021 * C622 - C48060 * C617 -
              C48021 * C623 + C49319 * C632) *
                 C49281 +
             (C38263 + C38262 + C38261) * C49449) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C38250 * C49449 + (C38266 + C38265 + C38264) * C49281) * C23662 +
            ((C36885 + C36884 + C36883) * C49449 +
             (C48021 * C626 - C48060 * C619 - C48021 * C627 + C49319 * C634 +
              C48018 * C1484 - C48053 * C1480 - C48018 * C1485 +
              C49326 * C1492 + C48066 * C2395 - C36633 * C2384 -
              C48066 * C2396 + C36627 * C2402) *
                 C49281) *
                C49133) *
               C49207 * C49478 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C49449) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C49449) * C23662) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49449 +
            (C38261 + C38262 + C38263) * C49281) *
               C23662 +
           ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
              C49207 * C613 -
          (((C38264 + C38265 + C38266) * C49281 + C38254 * C49449) * C49133 +
           ((C38840 + C38841 + C38842) * C49281 +
            (C38263 + C38262 + C38261) * C49449) *
               C23662) *
              C49207 * C614 +
          (((C38842 + C38841 + C38840) * C49449 +
            (C48021 * C1292 - C48060 * C1286 - C48021 * C1293 + C49319 * C1298 +
             C48018 * C1954 - C48053 * C1951 - C48018 * C1955 + C49326 * C1960 +
             C48066 * C9832 - C36633 * C9830 - C48066 * C9833 +
             C36627 * C9836) *
                C49281) *
               C23662 +
           ((C38266 + C38265 + C38264) * C49449 +
            (C48021 * C1290 - C48060 * C1285 - C48021 * C1291 + C49319 * C1297 +
             C48018 * C1956 - C48053 * C1952 - C48018 * C1957 + C49326 * C1961 +
             C48066 * C10095 - C36633 * C10094 - C48066 * C10096 +
             C36627 * C10097) *
                C49281) *
               C49133) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C49449 +
             (C38261 + C38262 + C38263) * C49281) *
                C23662 +
            ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
               C407 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C49449) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C49449) *
                C23662) *
               C49480) *
              C547 +
          ((((C39057 + C39056 + C39055) * C49449 +
             (C48021 * C1488 - C48060 * C1482 - C48021 * C1489 +
              C49319 * C1494 + C48018 * C2387 - C48053 * C2380 -
              C48018 * C2388 + C49326 * C2398 + C48066 * C10309 -
              C36633 * C10307 - C48066 * C10310 + C36627 * C10313) *
                 C49281) *
                C23662 +
            ((C38481 + C38480 + C38479) * C49449 +
             (C48021 * C1486 - C48060 * C1481 - C48021 * C1487 +
              C49319 * C1493 + C48018 * C2391 - C48053 * C2382 -
              C48018 * C2392 + C49326 * C2400 + C48066 * C10311 -
              C36633 * C10308 - C48066 * C10312 + C36627 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C49449) * C49133 +
            ((C38840 + C38841 + C38842) * C49281 +
             (C38263 + C38262 + C38261) * C49449) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C49449 +
             (C38261 + C38262 + C38263) * C49281) *
                C23662 +
            ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
               C821 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C49449) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C49449) *
                C23662) *
               C49480) *
              C49190 * C549 +
          ((((C37076 + C37075 + C37074) * C49449 +
             (C38481 + C38480 + C38479) * C49281) *
                C23662 +
            ((C37073 + C37072 + C37071) * C49449 +
             (C48021 * C728 - C48060 * C721 - C48021 * C729 + C49319 * C736 +
              C48018 * C2393 - C48053 * C2383 - C48018 * C2394 +
              C49326 * C2401 + C48066 * C3393 - C36633 * C3388 -
              C48066 * C3394 + C36627 * C3397) *
                 C49281) *
                C49133) *
               C49480 -
           (((C36883 + C36884 + C36885) * C49281 +
             (C36694 + C36693 + C36692) * C49449) *
                C49133 +
            (C38254 * C49281 + (C36691 + C36690 + C36689) * C49449) * C23662) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
              C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
              C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                 C49449 +
             (C38261 + C38262 + C38263) * C49281) *
                C23662 +
            ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
               C821 -
           (((C38479 + C38480 + C38481) * C49281 +
             (C37074 + C37075 + C37076) * C49449) *
                C49133 +
            ((C39055 + C39056 + C39057) * C49281 +
             (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 +
              C36627 * C2940 + C48018 * C975 - C48053 * C970 - C48018 * C976 +
              C49326 * C985 + C48021 * C423 - C48060 * C413 - C48021 * C424 +
              C49319 * C431) *
                 C49449) *
                C23662) *
               C49480) *
              C265 +
          ((((C39057 + C39056 + C39055) * C49449 +
             (C48021 * C1488 - C48060 * C1482 - C48021 * C1489 +
              C49319 * C1494 + C48018 * C2387 - C48053 * C2380 -
              C48018 * C2388 + C49326 * C2398 + C48066 * C10309 -
              C36633 * C10307 - C48066 * C10310 + C36627 * C10313) *
                 C49281) *
                C23662 +
            ((C38481 + C38480 + C38479) * C49449 +
             (C48021 * C1486 - C48060 * C1481 - C48021 * C1487 +
              C49319 * C1493 + C48018 * C2391 - C48053 * C2382 -
              C48018 * C2392 + C49326 * C2400 + C48066 * C10311 -
              C36633 * C10308 - C48066 * C10312 + C36627 * C10314) *
                 C49281) *
                C49133) *
               C49480 -
           (((C38264 + C38265 + C38266) * C49281 + C38254 * C49449) * C49133 +
            ((C38840 + C38841 + C38842) * C49281 +
             (C38263 + C38262 + C38261) * C49449) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49449 +
            (C38261 + C38262 + C38263) * C49281) *
               C23662 +
           ((C36689 + C36690 + C36691) * C49449 + C38250 * C49281) * C49133) *
              C967 -
          (((C38479 + C38480 + C38481) * C49281 +
            (C37074 + C37075 + C37076) * C49449) *
               C49133 +
           ((C39055 + C39056 + C39057) * C49281 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49449) *
               C23662) *
              C968 +
          (((C48021 * C975 - C48060 * C970 - C48021 * C976 + C49319 * C985 +
             C48018 * C2934 - C48053 * C2928 - C48018 * C2935 + C49326 * C2940 +
             C48066 * C3803 - C36633 * C3800 - C48066 * C3804 +
             C36627 * C3809) *
                C49449 +
            (C48021 * C2385 - C48060 * C2379 - C48021 * C2386 + C49319 * C2397 +
             C48018 * C3389 - C48053 * C3386 - C48018 * C3390 + C49326 * C3395 +
             C48066 * C11190 - C36633 * C11188 - C48066 * C11191 +
             C36627 * C11194) *
                C49281) *
               C23662 +
           ((C48021 * C977 - C48060 * C971 - C48021 * C978 + C49319 * C986 +
             C48018 * C2932 - C48053 * C2927 - C48018 * C2933 + C49326 * C2939 +
             C48066 * C3805 - C36633 * C3801 - C48066 * C3806 +
             C36627 * C3810) *
                C49449 +
            (C48021 * C2389 - C48060 * C2381 - C48021 * C2390 + C49319 * C2399 +
             C48018 * C3391 - C48053 * C3387 - C48018 * C3392 + C49326 * C3396 +
             C48066 * C17922 - C36633 * C17921 - C48066 * C17923 +
             C36627 * C17924) *
                C49281) *
               C49133) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49515 +
            (C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291 +
             C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734) *
                C49503 +
            (C30825 * C622 - C30826 * C617 - C30825 * C623 + C30823 * C632 +
             C30827 * C1488 - C30828 * C1482 - C30827 * C1489 +
             C49323 * C1494) *
                C49483) *
               C23662 +
           ((C30878 + C30879) * C49515 + (C31061 + C31060) * C49503 +
            (C32120 + C32121) * C49483) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
            (C30881 + C30880) * C49515) *
               C49133 +
           ((C32121 + C32120) * C49483 + (C31060 + C31061) * C49503 +
            (C30879 + C30878) * C49515) *
               C23662) *
              C49207 * C49190 * C111 +
          ((C30886 * C49515 + (C31059 + C31058) * C49503 +
            (C32123 + C32122) * C49483) *
               C23662 +
           (C30887 * C49515 + (C31057 + C31056) * C49503 +
            (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
             C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
             C49323 * C1495) *
                C49483) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49219 * C49521 +
           (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
           C30889 * C49450) *
              C49207 * C49190 * C110 -
          ((C30884 + C30885) * C49219 * C49450 +
           (C30883 + C30882) * C49219 * C49501 +
           (C30881 + C30880) * C49219 * C49514 +
           (C30879 + C30878) * C49219 * C49521) *
              C49207 * C49190 * C111 +
          (C30888 * C49521 + C30889 * C49514 +
           (C30885 + C30884) * C49219 * C49501 +
           (C30825 * C132 - C30826 * C120 - C30825 * C133 + C30823 * C141 +
            C30827 * C425 - C30828 * C414 - C30827 * C426 + C49323 * C432) *
               C49219 * C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
            C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
            C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
            C33804 * C2934 - C33805 * C2928 - C33804 * C2935 + C49465 * C2940) *
               C49219 * C23662 +
           (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
              C49207 * C49190 * C110 -
          ((C33859 + C33860 + C33861 + C33862) * C49219 * C49133 +
           (C33858 + C33857 + C33856 + C33855) * C49219 * C23662) *
              C49207 * C49190 * C111 +
          ((C33862 + C33861 + C33860 + C33859) * C49219 * C23662 +
           (C33798 * C128 - C33799 * C118 - C33798 * C129 + C49523 * C139 +
            C33800 * C417 - C33801 * C410 - C33800 * C418 + C49520 * C428 +
            C33802 * C981 - C33803 * C973 - C33802 * C982 + C49511 * C988 +
            C33804 * C2936 - C33805 * C2929 - C33804 * C2937 + C49465 * C2941) *
               C49219 * C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + (C32360 + C32361) * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C49207 * C265 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C30827 * C1954 - C30828 * C1951 - C30827 * C1955 +
              C49323 * C1960 + C30825 * C1292 - C30826 * C1286 -
              C30825 * C1293 + C30823 * C1298) *
                 C49483 +
             (C32361 + C32360) * C49503 + (C32359 + C32358) * C49515) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C32334 * C49515 + C32335 * C49503 + (C32363 + C32362) * C49483) *
                C23662 +
            ((C31059 + C31058) * C49515 + (C32123 + C32122) * C49503 +
             (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 +
              C30823 * C1296 + C30827 * C1958 - C30828 * C1953 -
              C30827 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C49207 * C265 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C49207 * C49478) *
              C267 +
          (((C31061 + C31060) * C49219 * C49521 +
            (C31059 + C31058) * C49219 * C49514 +
            (C31057 + C31056) * C49219 * C49501 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C49219 * C23662 +
            (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
               C49207 * C265 -
           ((C34017 + C34018 + C34019 + C34020) * C49219 * C49133 +
            (C33804 * C3389 - C33805 * C3386 - C33804 * C3390 + C49465 * C3395 +
             C33802 * C2385 - C33803 * C2379 - C33802 * C2386 + C49511 * C2397 +
             C33800 * C724 - C33801 * C719 - C33800 * C725 + C49520 * C734 +
             C33798 * C283 - C33799 * C273 - C33798 * C284 + C49523 * C291) *
                C49219 * C23662) *
               C49207 * C49478) *
              C267 +
          (((C34020 + C34019 + C34018 + C34017) * C49219 * C23662 +
            (C33798 * C279 - C33799 * C271 - C33798 * C280 + C49523 * C289 +
             C33800 * C728 - C33801 * C721 - C33800 * C729 + C49520 * C736 +
             C33802 * C2393 - C33803 * C2383 - C33802 * C2394 + C49511 * C2401 +
             C33804 * C3393 - C33805 * C3388 - C33804 * C3394 +
             C49465 * C3397) *
                C49219 * C49133) *
               C49207 * C49478 -
           ((C33859 + C33860 + C33861 + C33862) * C49219 * C49133 +
            (C33858 + C33857 + C33856 + C33855) * C49219 * C23662) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + (C32360 + C32361) * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C407 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C30827 * C2387 - C30828 * C2380 - C30827 * C2388 +
              C49323 * C2398 + C30825 * C1488 - C30826 * C1482 -
              C30825 * C1489 + C30823 * C1494) *
                 C49483 +
             (C30827 * C2385 - C30828 * C2379 - C30827 * C2386 +
              C49323 * C2397 + C30825 * C724 - C30826 * C719 - C30825 * C725 +
              C30823 * C734) *
                 C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C49190 * C267 +
          ((((C31233 + C31232) * C49515 + (C32585 + C32584) * C49503 +
             (C32583 + C32582) * C49483) *
                C23662 +
            ((C31231 + C31230) * C49515 +
             (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
              C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
              C49323 * C2401) *
                 C49503 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C407 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C49190 * C267 +
          (((C31233 + C31232) * C49219 * C49521 +
            (C31231 + C31230) * C49219 * C49514 +
            (C31229 + C31228) * C49219 * C49501 +
            (C30825 * C415 - C30826 * C409 - C30825 * C416 + C30823 * C427 +
             C30827 * C983 - C30828 * C974 - C30827 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C49219 * C23662 +
            (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
               C407 -
           ((C34175 + C34176 + C34177 + C34178) * C49219 * C49133 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C49219 * C23662) *
               C49480) *
              C49190 * C267 +
          (((C34178 + C34177 + C34176 + C34175) * C49219 * C23662 +
            (C33798 * C419 - C33799 * C411 - C33798 * C420 + C49523 * C429 +
             C33800 * C979 - C33801 * C972 - C33800 * C980 + C49520 * C987 +
             C33802 * C2930 - C33803 * C2926 - C33802 * C2931 + C49511 * C2938 +
             C33804 * C3807 - C33805 * C3802 - C33804 * C3808 +
             C49465 * C3811) *
                C49219 * C49133) *
               C49480 -
           ((C33859 + C33860 + C33861 + C33862) * C49219 * C49133 +
            (C33858 + C33857 + C33856 + C33855) * C49219 * C23662) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + (C32360 + C32361) * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C49207 * C547 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C30827 * C1954 - C30828 * C1951 - C30827 * C1955 +
              C49323 * C1960 + C30825 * C1292 - C30826 * C1286 -
              C30825 * C1293 + C30823 * C1298) *
                 C49483 +
             (C32361 + C32360) * C49503 + (C32359 + C32358) * C49515) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C32334 * C49515 + C32335 * C49503 + (C32363 + C32362) * C49483) *
                C23662 +
            ((C31059 + C31058) * C49515 + (C32123 + C32122) * C49503 +
             (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 +
              C30823 * C1296 + C30827 * C1958 - C30828 * C1953 -
              C30827 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C49207 * C547 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C49207 * C49478) *
              C549 +
          (((C31061 + C31060) * C49219 * C49521 +
            (C31059 + C31058) * C49219 * C49514 +
            (C31057 + C31056) * C49219 * C49501 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C49219 * C23662 +
            (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
               C49207 * C547 -
           ((C34017 + C34018 + C34019 + C34020) * C49219 * C49133 +
            (C33804 * C3389 - C33805 * C3386 - C33804 * C3390 + C49465 * C3395 +
             C33802 * C2385 - C33803 * C2379 - C33802 * C2386 + C49511 * C2397 +
             C33800 * C724 - C33801 * C719 - C33800 * C725 + C49520 * C734 +
             C33798 * C283 - C33799 * C273 - C33798 * C284 + C49523 * C291) *
                C49219 * C23662) *
               C49207 * C49478) *
              C549 +
          (((C34020 + C34019 + C34018 + C34017) * C49219 * C23662 +
            (C33798 * C279 - C33799 * C271 - C33798 * C280 + C49523 * C289 +
             C33800 * C728 - C33801 * C721 - C33800 * C729 + C49520 * C736 +
             C33802 * C2393 - C33803 * C2383 - C33802 * C2394 + C49511 * C2401 +
             C33804 * C3393 - C33805 * C3388 - C33804 * C3394 +
             C49465 * C3397) *
                C49219 * C49133) *
               C49207 * C49478 -
           ((C33859 + C33860 + C33861 + C33862) * C49219 * C49133 +
            (C33858 + C33857 + C33856 + C33855) * C49219 * C23662) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49515 +
            (C32358 + C32359) * C49503 + C32926 * C49483) *
               C23662 +
           ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
               C49133) *
              C49207 * C613 -
          (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
               C49133 +
           ((C32939 + C32940) * C49483 + (C32361 + C32360) * C49503 +
            (C32359 + C32358) * C49515) *
               C23662) *
              C49207 * C614 +
          ((C32926 * C49515 + (C32940 + C32939) * C49503 +
            (C30825 * C1789 - C30826 * C1786 - C30825 * C1790 + C30823 * C1795 +
             C30827 * C9343 - C30828 * C9341 - C30827 * C9344 +
             C49323 * C9347) *
                C49483) *
               C23662 +
           (C32335 * C49515 + (C32363 + C32362) * C49503 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C49483) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49219 * C49521 +
           (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
           C30889 * C49450) *
              C49207 * C613 -
          ((C31056 + C31057) * C49219 * C49450 +
           (C31058 + C31059) * C49219 * C49501 +
           (C31060 + C31061) * C49219 * C49514 +
           (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
            C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
               C49219 * C49521) *
              C49207 * C614 +
          ((C30825 * C622 - C30826 * C617 - C30825 * C623 + C30823 * C632 +
            C30827 * C1488 - C30828 * C1482 - C30827 * C1489 + C49323 * C1494) *
               C49219 * C49521 +
           (C30825 * C624 - C30826 * C618 - C30825 * C625 + C30823 * C633 +
            C30827 * C1486 - C30828 * C1481 - C30827 * C1487 + C49323 * C1493) *
               C49219 * C49514 +
           (C30825 * C626 - C30826 * C619 - C30825 * C627 + C30823 * C634 +
            C30827 * C1484 - C30828 * C1480 - C30827 * C1485 + C49323 * C1492) *
               C49219 * C49501 +
           (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
            C30827 * C1490 - C30828 * C1483 - C30827 * C1491 + C49323 * C1495) *
               C49219 * C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
            C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
            C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
            C33804 * C2934 - C33805 * C2928 - C33804 * C2935 + C49465 * C2940) *
               C49219 * C23662 +
           (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
              C49207 * C613 -
          ((C34017 + C34018 + C34019 + C34020) * C49219 * C49133 +
           (C33804 * C3389 - C33805 * C3386 - C33804 * C3390 + C49465 * C3395 +
            C33802 * C2385 - C33803 * C2379 - C33802 * C2386 + C49511 * C2397 +
            C33800 * C724 - C33801 * C719 - C33800 * C725 + C49520 * C734 +
            C33798 * C283 - C33799 * C273 - C33798 * C284 + C49523 * C291) *
               C49219 * C23662) *
              C49207 * C614 +
          ((C33798 * C622 - C33799 * C617 - C33798 * C623 + C49523 * C632 +
            C33800 * C1488 - C33801 * C1482 - C33800 * C1489 + C49520 * C1494 +
            C33802 * C2387 - C33803 * C2380 - C33802 * C2388 + C49511 * C2398 +
            C33804 * C10309 - C33805 * C10307 - C33804 * C10310 +
            C49465 * C10313) *
               C49219 * C23662 +
           (C33798 * C624 - C33799 * C618 - C33798 * C625 + C49523 * C633 +
            C33800 * C1486 - C33801 * C1481 - C33800 * C1487 + C49520 * C1493 +
            C33802 * C2391 - C33803 * C2382 - C33802 * C2392 + C49511 * C2400 +
            C33804 * C10311 - C33805 * C10308 - C33804 * C10312 +
            C49465 * C10314) *
               C49219 * C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + C32926 * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C407 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C547 +
          ((((C33162 + C33161) * C49515 + (C33160 + C33159) * C49503 +
             (C30825 * C1954 - C30826 * C1951 - C30825 * C1955 +
              C30823 * C1960 + C30827 * C9832 - C30828 * C9830 -
              C30827 * C9833 + C49323 * C9836) *
                 C49483) *
                C23662 +
            ((C32585 + C32584) * C49515 + (C32583 + C32582) * C49503 +
             (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 +
              C30823 * C1961 + C30827 * C10095 - C30828 * C10094 -
              C30827 * C10096 + C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C32939 + C32940) * C49483 + (C32361 + C32360) * C49503 +
             (C32359 + C32358) * C49515) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C407 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C547 +
          (((C30825 * C724 - C30826 * C719 - C30825 * C725 + C30823 * C734 +
             C30827 * C2385 - C30828 * C2379 - C30827 * C2386 +
             C49323 * C2397) *
                C49219 * C49521 +
            (C30825 * C726 - C30826 * C720 - C30825 * C727 + C30823 * C735 +
             C30827 * C2389 - C30828 * C2381 - C30827 * C2390 +
             C49323 * C2399) *
                C49219 * C49514 +
            (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
             C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
             C49323 * C2401) *
                C49219 * C49501 +
            (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
             C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
             C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C49219 * C23662 +
            (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
               C407 -
           ((C34175 + C34176 + C34177 + C34178) * C49219 * C49133 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C49219 * C23662) *
               C49480) *
              C547 +
          (((C33798 * C724 - C33799 * C719 - C33798 * C725 + C49523 * C734 +
             C33800 * C2385 - C33801 * C2379 - C33800 * C2386 + C49520 * C2397 +
             C33802 * C3389 - C33803 * C3386 - C33802 * C3390 + C49511 * C3395 +
             C33804 * C11190 - C33805 * C11188 - C33804 * C11191 +
             C49465 * C11194) *
                C49219 * C23662 +
            (C33798 * C726 - C33799 * C720 - C33798 * C727 + C49523 * C735 +
             C33800 * C2389 - C33801 * C2381 - C33800 * C2390 + C49520 * C2399 +
             C33802 * C3391 - C33803 * C3387 - C33802 * C3392 + C49511 * C3396 +
             C33804 * C17922 - C33805 * C17921 - C33804 * C17923 +
             C49465 * C17924) *
                C49219 * C49133) *
               C49480 -
           ((C34017 + C34018 + C34019 + C34020) * C49219 * C49133 +
            (C33804 * C3389 - C33805 * C3386 - C33804 * C3390 + C49465 * C3395 +
             C33802 * C2385 - C33803 * C2379 - C33802 * C2386 + C49511 * C2397 +
             C33800 * C724 - C33801 * C719 - C33800 * C725 + C49520 * C734 +
             C33798 * C283 - C33799 * C273 - C33798 * C284 + C49523 * C291) *
                C49219 * C23662) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + C32926 * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C821 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C49190 * C549 +
          ((((C31233 + C31232) * C49515 + (C32585 + C32584) * C49503 +
             (C32583 + C32582) * C49483) *
                C23662 +
            ((C31231 + C31230) * C49515 +
             (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
              C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
              C49323 * C2401) *
                 C49503 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C821 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C49190 * C549 +
          (((C31233 + C31232) * C49219 * C49521 +
            (C31231 + C31230) * C49219 * C49514 +
            (C31229 + C31228) * C49219 * C49501 +
            (C30825 * C415 - C30826 * C409 - C30825 * C416 + C30823 * C427 +
             C30827 * C983 - C30828 * C974 - C30827 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C49219 * C23662 +
            (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
               C821 -
           ((C34175 + C34176 + C34177 + C34178) * C49219 * C49133 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C49219 * C23662) *
               C49480) *
              C49190 * C549 +
          (((C34178 + C34177 + C34176 + C34175) * C49219 * C23662 +
            (C33798 * C419 - C33799 * C411 - C33798 * C420 + C49523 * C429 +
             C33800 * C979 - C33801 * C972 - C33800 * C980 + C49520 * C987 +
             C33802 * C2930 - C33803 * C2926 - C33802 * C2931 + C49511 * C2938 +
             C33804 * C3807 - C33805 * C3802 - C33804 * C3808 +
             C49465 * C3811) *
                C49219 * C49133) *
               C49480 -
           ((C33859 + C33860 + C33861 + C33862) * C49219 * C49133 +
            (C33858 + C33857 + C33856 + C33855) * C49219 * C23662) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + C32926 * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C821 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C265 +
          ((((C33162 + C33161) * C49515 + (C33160 + C33159) * C49503 +
             (C30825 * C1954 - C30826 * C1951 - C30825 * C1955 +
              C30823 * C1960 + C30827 * C9832 - C30828 * C9830 -
              C30827 * C9833 + C49323 * C9836) *
                 C49483) *
                C23662 +
            ((C32585 + C32584) * C49515 + (C32583 + C32582) * C49503 +
             (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 +
              C30823 * C1961 + C30827 * C10095 - C30828 * C10094 -
              C30827 * C10096 + C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C32939 + C32940) * C49483 + (C32361 + C32360) * C49503 +
             (C32359 + C32358) * C49515) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C821 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C265 +
          (((C30825 * C724 - C30826 * C719 - C30825 * C725 + C30823 * C734 +
             C30827 * C2385 - C30828 * C2379 - C30827 * C2386 +
             C49323 * C2397) *
                C49219 * C49521 +
            (C30825 * C726 - C30826 * C720 - C30825 * C727 + C30823 * C735 +
             C30827 * C2389 - C30828 * C2381 - C30827 * C2390 +
             C49323 * C2399) *
                C49219 * C49514 +
            (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
             C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
             C49323 * C2401) *
                C49219 * C49501 +
            (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
             C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
             C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
             C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
             C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
             C33804 * C2934 - C33805 * C2928 - C33804 * C2935 +
             C49465 * C2940) *
                C49219 * C23662 +
            (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
               C821 -
           ((C34175 + C34176 + C34177 + C34178) * C49219 * C49133 +
            (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
             C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
             C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
             C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
                C49219 * C23662) *
               C49480) *
              C265 +
          (((C33798 * C724 - C33799 * C719 - C33798 * C725 + C49523 * C734 +
             C33800 * C2385 - C33801 * C2379 - C33800 * C2386 + C49520 * C2397 +
             C33802 * C3389 - C33803 * C3386 - C33802 * C3390 + C49511 * C3395 +
             C33804 * C11190 - C33805 * C11188 - C33804 * C11191 +
             C49465 * C11194) *
                C49219 * C23662 +
            (C33798 * C726 - C33799 * C720 - C33798 * C727 + C49523 * C735 +
             C33800 * C2389 - C33801 * C2381 - C33800 * C2390 + C49520 * C2399 +
             C33802 * C3391 - C33803 * C3387 - C33802 * C3392 + C49511 * C3396 +
             C33804 * C17922 - C33805 * C17921 - C33804 * C17923 +
             C49465 * C17924) *
                C49219 * C49133) *
               C49480 -
           ((C34017 + C34018 + C34019 + C34020) * C49219 * C49133 +
            (C33804 * C3389 - C33805 * C3386 - C33804 * C3390 + C49465 * C3395 +
             C33802 * C2385 - C33803 * C2379 - C33802 * C2386 + C49511 * C2397 +
             C33800 * C724 - C33801 * C719 - C33800 * C725 + C49520 * C734 +
             C33798 * C283 - C33799 * C273 - C33798 * C284 + C49523 * C291) *
                C49219 * C23662) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49515 +
            (C32358 + C32359) * C49503 + C32926 * C49483) *
               C23662 +
           ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
               C49133) *
              C967 -
          (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
            (C31232 + C31233) * C49515) *
               C49133 +
           ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49515) *
               C23662) *
              C968 +
          (((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
             C30827 * C2934 - C30828 * C2928 - C30827 * C2935 +
             C49323 * C2940) *
                C49515 +
            (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
             C30827 * C3389 - C30828 * C3386 - C30827 * C3390 +
             C49323 * C3395) *
                C49503 +
            (C30825 * C2387 - C30826 * C2380 - C30825 * C2388 + C30823 * C2398 +
             C30827 * C10309 - C30828 * C10307 - C30827 * C10310 +
             C49323 * C10313) *
                C49483) *
               C23662 +
           ((C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
             C30827 * C2932 - C30828 * C2927 - C30827 * C2933 +
             C49323 * C2939) *
                C49515 +
            (C30825 * C2389 - C30826 * C2381 - C30825 * C2390 + C30823 * C2399 +
             C30827 * C3391 - C30828 * C3387 - C30827 * C3392 +
             C49323 * C3396) *
                C49503 +
            (C30825 * C2391 - C30826 * C2382 - C30825 * C2392 + C30823 * C2400 +
             C30827 * C10311 - C30828 * C10308 - C30827 * C10312 +
             C49323 * C10314) *
                C49483) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49219 * C49521 +
           (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
           C30889 * C49450) *
              C967 -
          ((C31228 + C31229) * C49219 * C49450 +
           (C31230 + C31231) * C49219 * C49501 +
           (C31232 + C31233) * C49219 * C49514 +
           (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
            C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
               C49219 * C49521) *
              C968 +
          ((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
            C30827 * C2934 - C30828 * C2928 - C30827 * C2935 + C49323 * C2940) *
               C49219 * C49521 +
           (C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
            C30827 * C2932 - C30828 * C2927 - C30827 * C2933 + C49323 * C2939) *
               C49219 * C49514 +
           (C30825 * C979 - C30826 * C972 - C30825 * C980 + C30823 * C987 +
            C30827 * C2930 - C30828 * C2926 - C30827 * C2931 + C49323 * C2938) *
               C49219 * C49501 +
           (C30825 * C981 - C30826 * C973 - C30825 * C982 + C30823 * C988 +
            C30827 * C2936 - C30828 * C2929 - C30827 * C2937 + C49323 * C2941) *
               C49219 * C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C33798 * C122 - C33799 * C115 - C33798 * C123 + C49523 * C136 +
            C33800 * C423 - C33801 * C413 - C33800 * C424 + C49520 * C431 +
            C33802 * C975 - C33803 * C970 - C33802 * C976 + C49511 * C985 +
            C33804 * C2934 - C33805 * C2928 - C33804 * C2935 + C49465 * C2940) *
               C49219 * C23662 +
           (C33855 + C33856 + C33857 + C33858) * C49219 * C49133) *
              C967 -
          ((C34175 + C34176 + C34177 + C34178) * C49219 * C49133 +
           (C33804 * C3803 - C33805 * C3800 - C33804 * C3804 + C49465 * C3809 +
            C33802 * C2934 - C33803 * C2928 - C33802 * C2935 + C49511 * C2940 +
            C33800 * C975 - C33801 * C970 - C33800 * C976 + C49520 * C985 +
            C33798 * C423 - C33799 * C413 - C33798 * C424 + C49523 * C431) *
               C49219 * C23662) *
              C968 +
          ((C33798 * C975 - C33799 * C970 - C33798 * C976 + C49523 * C985 +
            C33800 * C2934 - C33801 * C2928 - C33800 * C2935 + C49520 * C2940 +
            C33802 * C3803 - C33803 * C3800 - C33802 * C3804 + C49511 * C3809 +
            C33804 * C18009 - C33805 * C18007 - C33804 * C18010 +
            C49465 * C18013) *
               C49219 * C23662 +
           (C33798 * C977 - C33799 * C971 - C33798 * C978 + C49523 * C986 +
            C33800 * C2932 - C33801 * C2927 - C33800 * C2933 + C49520 * C2939 +
            C33802 * C3805 - C33803 * C3801 - C33802 * C3806 + C49511 * C3810 +
            C33804 * C18011 - C33805 * C18008 - C33804 * C18012 +
            C49465 * C18014) *
               C49219 * C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
            C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
            C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
               C49219 * C49128 +
           (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
              C49207 * C49190 * C110 -
          ((C36695 + C36696 + C36697) * C49219 * C26398 +
           (C36694 + C36693 + C36692) * C49219 * C49136 +
           (C36691 + C36690 + C36689) * C49219 * C49128) *
              C49207 * C49190 * C111 +
          (C36700 * C49128 + (C36697 + C36696 + C36695) * C49219 * C49136 +
           (C48021 * C130 - C48060 * C119 - C48021 * C131 + C49319 * C140 +
            C48018 * C415 - C48053 * C409 - C48018 * C416 + C49326 * C427 +
            C48066 * C983 - C36633 * C974 - C48066 * C984 + C36627 * C989) *
               C49219 * C26398) *
              C49207 * C49190 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49219 * C49128 +
            (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
               C49207 * C265 -
           ((C36883 + C36884 + C36885) * C49219 * C26398 +
            (C36886 + C36887 + C36888) * C49219 * C49136 +
            (C48066 * C2385 - C36633 * C2379 - C48066 * C2386 + C36627 * C2397 +
             C48018 * C724 - C48053 * C719 - C48018 * C725 + C49326 * C734 +
             C48021 * C283 - C48060 * C273 - C48021 * C284 + C49319 * C291) *
                C49219 * C49128) *
               C49207 * C49478) *
              C267 +
          (((C36888 + C36887 + C36886) * C49219 * C49128 +
            (C36885 + C36884 + C36883) * C49219 * C49136 +
            (C48021 * C277 - C48060 * C270 - C48021 * C278 + C49319 * C288 +
             C48018 * C730 - C48053 * C722 - C48018 * C731 + C49326 * C737 +
             C48066 * C2735 - C36633 * C2734 - C48066 * C2736 +
             C36627 * C2737) *
                C49219 * C26398) *
               C49207 * C49478 -
           ((C36695 + C36696 + C36697) * C49219 * C26398 +
            (C36694 + C36693 + C36692) * C49219 * C49136 +
            (C36691 + C36690 + C36689) * C49219 * C49128) *
               C49207 * C265) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49219 * C49128 +
            (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
               C407 -
           ((C37071 + C37072 + C37073) * C49219 * C26398 +
            (C37074 + C37075 + C37076) * C49219 * C49136 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49219 * C49128) *
               C49480) *
              C49190 * C267 +
          (((C37076 + C37075 + C37074) * C49219 * C49128 +
            (C37073 + C37072 + C37071) * C49219 * C49136 +
            (C48021 * C417 - C48060 * C410 - C48021 * C418 + C49319 * C428 +
             C48018 * C981 - C48053 * C973 - C48018 * C982 + C49326 * C988 +
             C48066 * C2936 - C36633 * C2929 - C48066 * C2937 +
             C36627 * C2941) *
                C49219 * C26398) *
               C49480 -
           ((C36695 + C36696 + C36697) * C49219 * C26398 +
            (C36694 + C36693 + C36692) * C49219 * C49136 +
            (C36691 + C36690 + C36689) * C49219 * C49128) *
               C407) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49219 * C49128 +
            (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
               C49207 * C547 -
           ((C36883 + C36884 + C36885) * C49219 * C26398 +
            (C36886 + C36887 + C36888) * C49219 * C49136 +
            (C48066 * C2385 - C36633 * C2379 - C48066 * C2386 + C36627 * C2397 +
             C48018 * C724 - C48053 * C719 - C48018 * C725 + C49326 * C734 +
             C48021 * C283 - C48060 * C273 - C48021 * C284 + C49319 * C291) *
                C49219 * C49128) *
               C49207 * C49478) *
              C549 +
          (((C36888 + C36887 + C36886) * C49219 * C49128 +
            (C36885 + C36884 + C36883) * C49219 * C49136 +
            (C48021 * C277 - C48060 * C270 - C48021 * C278 + C49319 * C288 +
             C48018 * C730 - C48053 * C722 - C48018 * C731 + C49326 * C737 +
             C48066 * C2735 - C36633 * C2734 - C48066 * C2736 +
             C36627 * C2737) *
                C49219 * C26398) *
               C49207 * C49478 -
           ((C36695 + C36696 + C36697) * C49219 * C26398 +
            (C36694 + C36693 + C36692) * C49219 * C49136 +
            (C36691 + C36690 + C36689) * C49219 * C49128) *
               C49207 * C547) *
              C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
            C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
            C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
               C49219 * C49128 +
           (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
              C49207 * C613 -
          ((C36883 + C36884 + C36885) * C49219 * C26398 +
           (C36886 + C36887 + C36888) * C49219 * C49136 +
           (C48066 * C2385 - C36633 * C2379 - C48066 * C2386 + C36627 * C2397 +
            C48018 * C724 - C48053 * C719 - C48018 * C725 + C49326 * C734 +
            C48021 * C283 - C48060 * C273 - C48021 * C284 + C49319 * C291) *
               C49219 * C49128) *
              C49207 * C614 +
          ((C48021 * C622 - C48060 * C617 - C48021 * C623 + C49319 * C632 +
            C48018 * C1488 - C48053 * C1482 - C48018 * C1489 + C49326 * C1494 +
            C48066 * C2387 - C36633 * C2380 - C48066 * C2388 + C36627 * C2398) *
               C49219 * C49128 +
           (C48021 * C624 - C48060 * C618 - C48021 * C625 + C49319 * C633 +
            C48018 * C1486 - C48053 * C1481 - C48018 * C1487 + C49326 * C1493 +
            C48066 * C2391 - C36633 * C2382 - C48066 * C2392 + C36627 * C2400) *
               C49219 * C49136 +
           (C48021 * C626 - C48060 * C619 - C48021 * C627 + C49319 * C634 +
            C48018 * C1484 - C48053 * C1480 - C48018 * C1485 + C49326 * C1492 +
            C48066 * C2395 - C36633 * C2384 - C48066 * C2396 + C36627 * C2402) *
               C49219 * C26398) *
              C49207 * C615) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49219 * C49128 +
            (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
               C407 -
           ((C37071 + C37072 + C37073) * C49219 * C26398 +
            (C37074 + C37075 + C37076) * C49219 * C49136 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49219 * C49128) *
               C49480) *
              C547 +
          (((C48021 * C724 - C48060 * C719 - C48021 * C725 + C49319 * C734 +
             C48018 * C2385 - C48053 * C2379 - C48018 * C2386 + C49326 * C2397 +
             C48066 * C3389 - C36633 * C3386 - C48066 * C3390 +
             C36627 * C3395) *
                C49219 * C49128 +
            (C48021 * C726 - C48060 * C720 - C48021 * C727 + C49319 * C735 +
             C48018 * C2389 - C48053 * C2381 - C48018 * C2390 + C49326 * C2399 +
             C48066 * C3391 - C36633 * C3387 - C48066 * C3392 +
             C36627 * C3396) *
                C49219 * C49136 +
            (C48021 * C728 - C48060 * C721 - C48021 * C729 + C49319 * C736 +
             C48018 * C2393 - C48053 * C2383 - C48018 * C2394 + C49326 * C2401 +
             C48066 * C3393 - C36633 * C3388 - C48066 * C3394 +
             C36627 * C3397) *
                C49219 * C26398) *
               C49480 -
           ((C36883 + C36884 + C36885) * C49219 * C26398 +
            (C36886 + C36887 + C36888) * C49219 * C49136 +
            (C48066 * C2385 - C36633 * C2379 - C48066 * C2386 + C36627 * C2397 +
             C48018 * C724 - C48053 * C719 - C48018 * C725 + C49326 * C734 +
             C48021 * C283 - C48060 * C273 - C48021 * C284 + C49319 * C291) *
                C49219 * C49128) *
               C407) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49219 * C49128 +
            (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
               C821 -
           ((C37071 + C37072 + C37073) * C49219 * C26398 +
            (C37074 + C37075 + C37076) * C49219 * C49136 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49219 * C49128) *
               C49480) *
              C49190 * C549 +
          (((C37076 + C37075 + C37074) * C49219 * C49128 +
            (C37073 + C37072 + C37071) * C49219 * C49136 +
            (C48021 * C417 - C48060 * C410 - C48021 * C418 + C49319 * C428 +
             C48018 * C981 - C48053 * C973 - C48018 * C982 + C49326 * C988 +
             C48066 * C2936 - C36633 * C2929 - C48066 * C2937 +
             C36627 * C2941) *
                C49219 * C26398) *
               C49480 -
           ((C36695 + C36696 + C36697) * C49219 * C26398 +
            (C36694 + C36693 + C36692) * C49219 * C49136 +
            (C36691 + C36690 + C36689) * C49219 * C49128) *
               C821) *
              C49190 * C49476)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
             C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
             C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
                C49219 * C49128 +
            (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
               C821 -
           ((C37071 + C37072 + C37073) * C49219 * C26398 +
            (C37074 + C37075 + C37076) * C49219 * C49136 +
            (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
             C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
             C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
                C49219 * C49128) *
               C49480) *
              C265 +
          (((C48021 * C724 - C48060 * C719 - C48021 * C725 + C49319 * C734 +
             C48018 * C2385 - C48053 * C2379 - C48018 * C2386 + C49326 * C2397 +
             C48066 * C3389 - C36633 * C3386 - C48066 * C3390 +
             C36627 * C3395) *
                C49219 * C49128 +
            (C48021 * C726 - C48060 * C720 - C48021 * C727 + C49319 * C735 +
             C48018 * C2389 - C48053 * C2381 - C48018 * C2390 + C49326 * C2399 +
             C48066 * C3391 - C36633 * C3387 - C48066 * C3392 +
             C36627 * C3396) *
                C49219 * C49136 +
            (C48021 * C728 - C48060 * C721 - C48021 * C729 + C49319 * C736 +
             C48018 * C2393 - C48053 * C2383 - C48018 * C2394 + C49326 * C2401 +
             C48066 * C3393 - C36633 * C3388 - C48066 * C3394 +
             C36627 * C3397) *
                C49219 * C26398) *
               C49480 -
           ((C36883 + C36884 + C36885) * C49219 * C26398 +
            (C36886 + C36887 + C36888) * C49219 * C49136 +
            (C48066 * C2385 - C36633 * C2379 - C48066 * C2386 + C36627 * C2397 +
             C48018 * C724 - C48053 * C719 - C48018 * C725 + C49326 * C734 +
             C48021 * C283 - C48060 * C273 - C48021 * C284 + C49319 * C291) *
                C49219 * C49128) *
               C821) *
              C49478) *
         C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49319 * C136 +
            C48018 * C423 - C48053 * C413 - C48018 * C424 + C49326 * C431 +
            C48066 * C975 - C36633 * C970 - C48066 * C976 + C36627 * C985) *
               C49219 * C49128 +
           (C36689 + C36690 + C36691) * C49219 * C49136 + C36700 * C26398) *
              C967 -
          ((C37071 + C37072 + C37073) * C49219 * C26398 +
           (C37074 + C37075 + C37076) * C49219 * C49136 +
           (C48066 * C2934 - C36633 * C2928 - C48066 * C2935 + C36627 * C2940 +
            C48018 * C975 - C48053 * C970 - C48018 * C976 + C49326 * C985 +
            C48021 * C423 - C48060 * C413 - C48021 * C424 + C49319 * C431) *
               C49219 * C49128) *
              C968 +
          ((C48021 * C975 - C48060 * C970 - C48021 * C976 + C49319 * C985 +
            C48018 * C2934 - C48053 * C2928 - C48018 * C2935 + C49326 * C2940 +
            C48066 * C3803 - C36633 * C3800 - C48066 * C3804 + C36627 * C3809) *
               C49219 * C49128 +
           (C48021 * C977 - C48060 * C971 - C48021 * C978 + C49319 * C986 +
            C48018 * C2932 - C48053 * C2927 - C48018 * C2933 + C49326 * C2939 +
            C48066 * C3805 - C36633 * C3801 - C48066 * C3806 + C36627 * C3810) *
               C49219 * C49136 +
           (C48021 * C979 - C48060 * C972 - C48021 * C980 + C49319 * C987 +
            C48018 * C2930 - C48053 * C2926 - C48018 * C2931 + C49326 * C2938 +
            C48066 * C3807 - C36633 * C3802 - C48066 * C3808 + C36627 * C3811) *
               C49219 * C26398) *
              C969) *
         C49190 * C49156) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49219 * C49521 +
           (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
           C30889 * C49450) *
              C49207 * C49190 * C110 -
          ((C30884 + C30885) * C49219 * C49450 +
           (C30883 + C30882) * C49219 * C49501 +
           (C30881 + C30880) * C49219 * C49514 +
           (C30879 + C30878) * C49219 * C49521) *
              C49207 * C49190 * C111 +
          (C30888 * C49521 + C30889 * C49514 +
           (C30885 + C30884) * C49219 * C49501 +
           (C30825 * C132 - C30826 * C120 - C30825 * C133 + C30823 * C141 +
            C30827 * C425 - C30828 * C414 - C30827 * C426 + C49323 * C432) *
               C49219 * C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49515 +
            (C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291 +
             C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734) *
                C49503 +
            (C30825 * C622 - C30826 * C617 - C30825 * C623 + C30823 * C632 +
             C30827 * C1488 - C30828 * C1482 - C30827 * C1489 +
             C49323 * C1494) *
                C49483) *
               C23662 +
           ((C30878 + C30879) * C49515 + (C31061 + C31060) * C49503 +
            (C32120 + C32121) * C49483) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
            (C30881 + C30880) * C49515) *
               C49133 +
           ((C32121 + C32120) * C49483 + (C31060 + C31061) * C49503 +
            (C30879 + C30878) * C49515) *
               C23662) *
              C49207 * C49190 * C111 +
          ((C30886 * C49515 + (C31059 + C31058) * C49503 +
            (C32123 + C32122) * C49483) *
               C23662 +
           (C30887 * C49515 + (C31057 + C31056) * C49503 +
            (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
             C30827 * C1490 - C30828 * C1483 - C30827 * C1491 +
             C49323 * C1495) *
                C49483) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C49207 * C265 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C49207 * C49478) *
              C267 +
          (((C31061 + C31060) * C49219 * C49521 +
            (C31059 + C31058) * C49219 * C49514 +
            (C31057 + C31056) * C49219 * C49501 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + (C32360 + C32361) * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C49207 * C265 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C30827 * C1954 - C30828 * C1951 - C30827 * C1955 +
              C49323 * C1960 + C30825 * C1292 - C30826 * C1286 -
              C30825 * C1293 + C30823 * C1298) *
                 C49483 +
             (C32361 + C32360) * C49503 + (C32359 + C32358) * C49515) *
                C23662) *
               C49207 * C49478) *
              C267 +
          (((C32334 * C49515 + C32335 * C49503 + (C32363 + C32362) * C49483) *
                C23662 +
            ((C31059 + C31058) * C49515 + (C32123 + C32122) * C49503 +
             (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 +
              C30823 * C1296 + C30827 * C1958 - C30828 * C1953 -
              C30827 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C407 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C49190 * C267 +
          (((C31233 + C31232) * C49219 * C49521 +
            (C31231 + C31230) * C49219 * C49514 +
            (C31229 + C31228) * C49219 * C49501 +
            (C30825 * C415 - C30826 * C409 - C30825 * C416 + C30823 * C427 +
             C30827 * C983 - C30828 * C974 - C30827 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + (C32360 + C32361) * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C407 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C30827 * C2387 - C30828 * C2380 - C30827 * C2388 +
              C49323 * C2398 + C30825 * C1488 - C30826 * C1482 -
              C30825 * C1489 + C30823 * C1494) *
                 C49483 +
             (C30827 * C2385 - C30828 * C2379 - C30827 * C2386 +
              C49323 * C2397 + C30825 * C724 - C30826 * C719 - C30825 * C725 +
              C30823 * C734) *
                 C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C49190 * C267 +
          ((((C31233 + C31232) * C49515 + (C32585 + C32584) * C49503 +
             (C32583 + C32582) * C49483) *
                C23662 +
            ((C31231 + C31230) * C49515 +
             (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
              C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
              C49323 * C2401) *
                 C49503 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C49207 * C547 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C49207 * C49478) *
              C549 +
          (((C31061 + C31060) * C49219 * C49521 +
            (C31059 + C31058) * C49219 * C49514 +
            (C31057 + C31056) * C49219 * C49501 +
            (C30825 * C275 - C30826 * C269 - C30825 * C276 + C30823 * C287 +
             C30827 * C732 - C30828 * C723 - C30827 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + (C32360 + C32361) * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C49207 * C547 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C30827 * C1954 - C30828 * C1951 - C30827 * C1955 +
              C49323 * C1960 + C30825 * C1292 - C30826 * C1286 -
              C30825 * C1293 + C30823 * C1298) *
                 C49483 +
             (C32361 + C32360) * C49503 + (C32359 + C32358) * C49515) *
                C23662) *
               C49207 * C49478) *
              C549 +
          (((C32334 * C49515 + C32335 * C49503 + (C32363 + C32362) * C49483) *
                C23662 +
            ((C31059 + C31058) * C49515 + (C32123 + C32122) * C49503 +
             (C30825 * C1288 - C30826 * C1284 - C30825 * C1289 +
              C30823 * C1296 + C30827 * C1958 - C30828 * C1953 -
              C30827 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49219 * C49521 +
           (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
           C30889 * C49450) *
              C49207 * C613 -
          ((C31056 + C31057) * C49219 * C49450 +
           (C31058 + C31059) * C49219 * C49501 +
           (C31060 + C31061) * C49219 * C49514 +
           (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
            C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
               C49219 * C49521) *
              C49207 * C614 +
          ((C30825 * C622 - C30826 * C617 - C30825 * C623 + C30823 * C632 +
            C30827 * C1488 - C30828 * C1482 - C30827 * C1489 + C49323 * C1494) *
               C49219 * C49521 +
           (C30825 * C624 - C30826 * C618 - C30825 * C625 + C30823 * C633 +
            C30827 * C1486 - C30828 * C1481 - C30827 * C1487 + C49323 * C1493) *
               C49219 * C49514 +
           (C30825 * C626 - C30826 * C619 - C30825 * C627 + C30823 * C634 +
            C30827 * C1484 - C30828 * C1480 - C30827 * C1485 + C49323 * C1492) *
               C49219 * C49501 +
           (C30825 * C628 - C30826 * C620 - C30825 * C629 + C30823 * C635 +
            C30827 * C1490 - C30828 * C1483 - C30827 * C1491 + C49323 * C1495) *
               C49219 * C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49515 +
            (C32358 + C32359) * C49503 + C32926 * C49483) *
               C23662 +
           ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
               C49133) *
              C49207 * C613 -
          (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
               C49133 +
           ((C32939 + C32940) * C49483 + (C32361 + C32360) * C49503 +
            (C32359 + C32358) * C49515) *
               C23662) *
              C49207 * C614 +
          ((C32926 * C49515 + (C32940 + C32939) * C49503 +
            (C30825 * C1789 - C30826 * C1786 - C30825 * C1790 + C30823 * C1795 +
             C30827 * C9343 - C30828 * C9341 - C30827 * C9344 +
             C49323 * C9347) *
                C49483) *
               C23662 +
           (C32335 * C49515 + (C32363 + C32362) * C49503 +
            (C30825 * C1791 - C30826 * C1787 - C30825 * C1792 + C30823 * C1796 +
             C30827 * C9345 - C30828 * C9342 - C30827 * C9346 +
             C49323 * C9348) *
                C49483) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C407 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C547 +
          (((C30825 * C724 - C30826 * C719 - C30825 * C725 + C30823 * C734 +
             C30827 * C2385 - C30828 * C2379 - C30827 * C2386 +
             C49323 * C2397) *
                C49219 * C49521 +
            (C30825 * C726 - C30826 * C720 - C30825 * C727 + C30823 * C735 +
             C30827 * C2389 - C30828 * C2381 - C30827 * C2390 +
             C49323 * C2399) *
                C49219 * C49514 +
            (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
             C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
             C49323 * C2401) *
                C49219 * C49501 +
            (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
             C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
             C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + C32926 * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C407 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C547 +
          ((((C33162 + C33161) * C49515 + (C33160 + C33159) * C49503 +
             (C30825 * C1954 - C30826 * C1951 - C30825 * C1955 +
              C30823 * C1960 + C30827 * C9832 - C30828 * C9830 -
              C30827 * C9833 + C49323 * C9836) *
                 C49483) *
                C23662 +
            ((C32585 + C32584) * C49515 + (C32583 + C32582) * C49503 +
             (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 +
              C30823 * C1961 + C30827 * C10095 - C30828 * C10094 -
              C30827 * C10096 + C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C32939 + C32940) * C49483 + (C32361 + C32360) * C49503 +
             (C32359 + C32358) * C49515) *
                C23662) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C821 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C49190 * C549 +
          (((C31233 + C31232) * C49219 * C49521 +
            (C31231 + C31230) * C49219 * C49514 +
            (C31229 + C31228) * C49219 * C49501 +
            (C30825 * C415 - C30826 * C409 - C30825 * C416 + C30823 * C427 +
             C30827 * C983 - C30828 * C974 - C30827 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C30884 + C30885) * C49219 * C49450 +
            (C30883 + C30882) * C49219 * C49501 +
            (C30881 + C30880) * C49219 * C49514 +
            (C30879 + C30878) * C49219 * C49521) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + C32926 * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C821 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C49190 * C549 +
          ((((C31233 + C31232) * C49515 + (C32585 + C32584) * C49503 +
             (C32583 + C32582) * C49483) *
                C23662 +
            ((C31231 + C31230) * C49515 +
             (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
              C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
              C49323 * C2401) *
                 C49503 +
             (C30825 * C1484 - C30826 * C1480 - C30825 * C1485 +
              C30823 * C1492 + C30827 * C2395 - C30828 * C2384 -
              C30827 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32122 + C32123) * C49483 + (C31058 + C31059) * C49503 +
             (C30881 + C30880) * C49515) *
                C49133 +
            (C32344 * C49483 + C32345 * C49503 + (C30879 + C30878) * C49515) *
                C23662) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49219 * C49521 +
            (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
            C30889 * C49450) *
               C821 -
           ((C31228 + C31229) * C49219 * C49450 +
            (C31230 + C31231) * C49219 * C49501 +
            (C31232 + C31233) * C49219 * C49514 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49219 * C49521) *
               C49480) *
              C265 +
          (((C30825 * C724 - C30826 * C719 - C30825 * C725 + C30823 * C734 +
             C30827 * C2385 - C30828 * C2379 - C30827 * C2386 +
             C49323 * C2397) *
                C49219 * C49521 +
            (C30825 * C726 - C30826 * C720 - C30825 * C727 + C30823 * C735 +
             C30827 * C2389 - C30828 * C2381 - C30827 * C2390 +
             C49323 * C2399) *
                C49219 * C49514 +
            (C30825 * C728 - C30826 * C721 - C30825 * C729 + C30823 * C736 +
             C30827 * C2393 - C30828 * C2383 - C30827 * C2394 +
             C49323 * C2401) *
                C49219 * C49501 +
            (C30825 * C730 - C30826 * C722 - C30825 * C731 + C30823 * C737 +
             C30827 * C2735 - C30828 * C2734 - C30827 * C2736 +
             C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C31056 + C31057) * C49219 * C49450 +
            (C31058 + C31059) * C49219 * C49501 +
            (C31060 + C31061) * C49219 * C49514 +
            (C30827 * C724 - C30828 * C719 - C30827 * C725 + C49323 * C734 +
             C30825 * C283 - C30826 * C273 - C30825 * C284 + C30823 * C291) *
                C49219 * C49521) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
              C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                 C49515 +
             (C32358 + C32359) * C49503 + C32926 * C49483) *
                C23662 +
            ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
                C49133) *
               C821 -
           (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
             (C31232 + C31233) * C49515) *
                C49133 +
            ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
             (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
              C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                 C49515) *
                C23662) *
               C49480) *
              C265 +
          ((((C33162 + C33161) * C49515 + (C33160 + C33159) * C49503 +
             (C30825 * C1954 - C30826 * C1951 - C30825 * C1955 +
              C30823 * C1960 + C30827 * C9832 - C30828 * C9830 -
              C30827 * C9833 + C49323 * C9836) *
                 C49483) *
                C23662 +
            ((C32585 + C32584) * C49515 + (C32583 + C32582) * C49503 +
             (C30825 * C1956 - C30826 * C1952 - C30825 * C1957 +
              C30823 * C1961 + C30827 * C10095 - C30828 * C10094 -
              C30827 * C10096 + C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C32362 + C32363) * C49483 + C32344 * C49503 + C32345 * C49515) *
                C49133 +
            ((C32939 + C32940) * C49483 + (C32361 + C32360) * C49503 +
             (C32359 + C32358) * C49515) *
                C23662) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
            C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
               C49219 * C49521 +
           (C30878 + C30879) * C49219 * C49514 + C30888 * C49501 +
           C30889 * C49450) *
              C967 -
          ((C31228 + C31229) * C49219 * C49450 +
           (C31230 + C31231) * C49219 * C49501 +
           (C31232 + C31233) * C49219 * C49514 +
           (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
            C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
               C49219 * C49521) *
              C968 +
          ((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
            C30827 * C2934 - C30828 * C2928 - C30827 * C2935 + C49323 * C2940) *
               C49219 * C49521 +
           (C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
            C30827 * C2932 - C30828 * C2927 - C30827 * C2933 + C49323 * C2939) *
               C49219 * C49514 +
           (C30825 * C979 - C30826 * C972 - C30825 * C980 + C30823 * C987 +
            C30827 * C2930 - C30828 * C2926 - C30827 * C2931 + C49323 * C2938) *
               C49219 * C49501 +
           (C30825 * C981 - C30826 * C973 - C30825 * C982 + C30823 * C988 +
            C30827 * C2936 - C30828 * C2929 - C30827 * C2937 + C49323 * C2941) *
               C49219 * C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30825 * C122 - C30826 * C115 - C30825 * C123 + C30823 * C136 +
             C30827 * C423 - C30828 * C413 - C30827 * C424 + C49323 * C431) *
                C49515 +
            (C32358 + C32359) * C49503 + C32926 * C49483) *
               C23662 +
           ((C30878 + C30879) * C49515 + C32334 * C49503 + C32335 * C49483) *
               C49133) *
              C967 -
          (((C32582 + C32583) * C49483 + (C32584 + C32585) * C49503 +
            (C31232 + C31233) * C49515) *
               C49133 +
           ((C33159 + C33160) * C49483 + (C33161 + C33162) * C49503 +
            (C30827 * C975 - C30828 * C970 - C30827 * C976 + C49323 * C985 +
             C30825 * C423 - C30826 * C413 - C30825 * C424 + C30823 * C431) *
                C49515) *
               C23662) *
              C968 +
          (((C30825 * C975 - C30826 * C970 - C30825 * C976 + C30823 * C985 +
             C30827 * C2934 - C30828 * C2928 - C30827 * C2935 +
             C49323 * C2940) *
                C49515 +
            (C30825 * C2385 - C30826 * C2379 - C30825 * C2386 + C30823 * C2397 +
             C30827 * C3389 - C30828 * C3386 - C30827 * C3390 +
             C49323 * C3395) *
                C49503 +
            (C30825 * C2387 - C30826 * C2380 - C30825 * C2388 + C30823 * C2398 +
             C30827 * C10309 - C30828 * C10307 - C30827 * C10310 +
             C49323 * C10313) *
                C49483) *
               C23662 +
           ((C30825 * C977 - C30826 * C971 - C30825 * C978 + C30823 * C986 +
             C30827 * C2932 - C30828 * C2927 - C30827 * C2933 +
             C49323 * C2939) *
                C49515 +
            (C30825 * C2389 - C30826 * C2381 - C30825 * C2390 + C30823 * C2399 +
             C30827 * C3391 - C30828 * C3387 - C30827 * C3392 +
             C49323 * C3396) *
                C49503 +
            (C30825 * C2391 - C30826 * C2382 - C30825 * C2392 + C30823 * C2400 +
             C30827 * C10311 - C30828 * C10308 - C30827 * C10312 +
             C49323 * C10314) *
                C49483) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49449 +
            C1329 * C49281) *
               C3912 +
           (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
              C49207 * C49190 * C110 -
          ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
           (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
              C49207 * C49190 * C111 +
          (C3925 * C3912 + C3926 * C3913 + (C3924 + C3923) * C3914 +
           (C178 * C49449 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) *
                C49281) *
               C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C11294 +
            C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
               C49428 +
           (C11301 + C11302 + C11303 + C11304) * C49133) *
              C49207 * C49190 * C110 -
          ((C11305 + C11306 + C11307 + C11308) * C49133 +
           (C11304 + C11303 + C11302 + C11301) * C49428) *
              C49207 * C49190 * C111 +
          ((C11308 + C11307 + C11306 + C11305) * C49428 +
           (C176 * C11294 + C319 * C11295 + C1134 * C11296 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49458) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C49207 * C265 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C49207 * C49478) *
              C267 +
          (((C4062 + C4061) * C3912 + (C4060 + C4059) * C3913 +
            (C4058 + C4057) * C3914 +
            (C318 * C49449 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C49207 * C265 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C11442 + C11441 + C11440 + C11439) * C49428 +
            (C320 * C11294 + C1133 * C11295 + C1331 * C11296 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C407 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C49190 * C267 +
          (((C4201 + C4200) * C3912 + (C4199 + C4198) * C3913 +
            (C4197 + C4205) * C3914 +
            (C458 * C49449 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C407 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C49190 * C267 +
          (((C11579 + C11578 + C11577 + C11583) * C49428 +
            (C460 * C11294 + C1524 * C11295 + C1523 * C11296 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C49207 * C547 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C49207 * C49478) *
              C549 +
          (((C4062 + C4061) * C3912 + (C4060 + C4059) * C3913 +
            (C4058 + C4057) * C3914 +
            (C318 * C49449 +
             (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                 C49281) *
                C49450) *
               C49207 * C49478 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C49207 * C547 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C11442 + C11441 + C11440 + C11439) * C49428 +
            (C320 * C11294 + C1133 * C11295 + C1331 * C11296 +
             (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                 C49458) *
                C49133) *
               C49207 * C49478 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49449 +
            C1329 * C49281) *
               C3912 +
           (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
              C49207 * C613 -
          ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
           (C4061 + C4062) * C3913 +
           (C1330 * C49281 + C1329 * C49449) * C3912) *
              C49207 * C614 +
          ((C1330 * C49449 + C1805 * C49281) * C3912 +
           (C1132 * C49449 + C1332 * C49281) * C3913 +
           (C1133 * C49449 + C1331 * C49281) * C3914 +
           (C1134 * C49449 +
            (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                C49281) *
               C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C11294 +
            C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
               C49428 +
           (C11301 + C11302 + C11303 + C11304) * C49133) *
              C49207 * C613 -
          ((C11439 + C11440 + C11441 + C11442) * C49133 +
           (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 + C1329 * C11294) *
               C49428) *
              C49207 * C614 +
          ((C1330 * C11294 + C1805 * C11295 + C9258 * C11296 + C9504 * C49458) *
               C49428 +
           (C1132 * C11294 + C1332 * C11295 + C9259 * C11296 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C49458) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C407 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C547 +
          (((C1977 * C49449 + C1976 * C49281) * C3912 +
            (C1526 * C49449 + C1525 * C49281) * C3913 +
            (C1524 * C49449 + C1523 * C49281) * C3914 +
            (C4204 * C49449 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C407 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C547 +
          (((C1977 * C11294 + C1976 * C11295 + C9604 * C11296 +
             C9603 * C49458) *
                C49428 +
            (C1526 * C11294 + C1525 * C11295 + C11582 * C11296 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C821 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C49190 * C549 +
          (((C4201 + C4200) * C3912 + (C4199 + C4198) * C3913 +
            (C4197 + C4205) * C3914 +
            (C458 * C49449 +
             (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) *
                 C49281) *
                C49450) *
               C49480 -
           ((C3923 + C3924) * C49450 + (C3922 + C3921) * C3914 +
            (C3920 + C3919) * C3913 + (C3918 + C3917) * C3912) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C821 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C49190 * C549 +
          (((C11579 + C11578 + C11577 + C11583) * C49428 +
            (C460 * C11294 + C1524 * C11295 + C1523 * C11296 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11305 + C11306 + C11307 + C11308) * C49133 +
            (C11304 + C11303 + C11302 + C11301) * C49428) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49449 +
             C1329 * C49281) *
                C3912 +
            (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
               C821 -
           ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
            (C4200 + C4201) * C3913 +
            (C1977 * C49281 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49449) *
                C3912) *
               C49480) *
              C265 +
          (((C1977 * C49449 + C1976 * C49281) * C3912 +
            (C1526 * C49449 + C1525 * C49281) * C3913 +
            (C1524 * C49449 + C1523 * C49281) * C3914 +
            (C4204 * C49449 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49281) *
                C49450) *
               C49480 -
           ((C4057 + C4058) * C49450 + (C4059 + C4060) * C3914 +
            (C4061 + C4062) * C3913 +
            (C1330 * C49281 + C1329 * C49449) * C3912) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C11294 +
             C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
                C49428 +
            (C11301 + C11302 + C11303 + C11304) * C49133) *
               C821 -
           ((C11583 + C11577 + C11578 + C11579) * C49133 +
            (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C11294) *
                C49428) *
               C49480) *
              C265 +
          (((C1977 * C11294 + C1976 * C11295 + C9604 * C11296 +
             C9603 * C49458) *
                C49428 +
            (C1526 * C11294 + C1525 * C11295 + C11582 * C11296 +
             (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                 C49458) *
                C49133) *
               C49480 -
           ((C11439 + C11440 + C11441 + C11442) * C49133 +
            (C9258 * C49458 + C1805 * C11296 + C1330 * C11295 +
             C1329 * C11294) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49449 +
            C1329 * C49281) *
               C3912 +
           (C3917 + C3918) * C3913 + C3925 * C3914 + C3926 * C49450) *
              C967 -
          ((C4205 + C4197) * C49450 + (C4198 + C4199) * C3914 +
           (C4200 + C4201) * C3913 +
           (C1977 * C49281 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49449) *
               C3912) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49449 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49281) *
               C3912 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49449 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49281) *
               C3913 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49449 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49281) *
               C3914 +
           ((C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C49449 +
            (C113 * C2735 - C114 * C2734 - C113 * C2736 + C49236 * C2737) *
                C49281) *
               C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C11294 +
            C1329 * C11295 + C1330 * C11296 + C1805 * C49458) *
               C49428 +
           (C11301 + C11302 + C11303 + C11304) * C49133) *
              C967 -
          ((C11583 + C11577 + C11578 + C11579) * C49133 +
           (C9604 * C49458 + C1976 * C11296 + C1977 * C11295 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C11294) *
               C49428) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C11294 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C11295 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C11296 +
            (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
                C49458) *
               C49428 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C11294 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C11295 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C11296 +
            (C113 * C10095 - C114 * C10094 - C113 * C10096 + C49236 * C10097) *
                C49458) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49449 +
            (C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291 +
             C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734) *
                C49281) *
               C1103 +
           ((C5074 + C5075) * C49449 + (C5257 + C5256) * C49281) * C1104 +
           C6295 * C49472) *
              C49207 * C49190 * C110 -
          (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
           ((C5254 + C5255) * C49281 + (C5077 + C5076) * C49449) * C1104 +
           ((C5256 + C5257) * C49281 + (C5075 + C5074) * C49449) * C1103) *
              C49207 * C49190 * C111 +
          (C6295 * C1103 + (C5083 * C49449 + (C5253 + C5252) * C49281) * C1104 +
           ((C5081 + C5080) * C49449 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49281) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C11294 +
           (C6529 + C6530) * C11295 + C13204 * C11296 +
           (C13218 + C13217) * C49458) *
              C49123 * C49207 * C49190 * C110 -
          ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
           (C5075 + C5074) * C11294) *
              C49123 * C49207 * C49190 * C111 +
          (C5082 * C11294 + C6293 * C11295 + (C6532 + C6531) * C11296 +
           (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
            C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
               C49458) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C49207 * C265 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C5023 * C1488 - C5024 * C1482 - C5023 * C1489 + C49323 * C1494 +
              C5021 * C622 - C5022 * C617 - C5021 * C623 + C49451 * C632) *
                 C49281 +
             (C6530 + C6529) * C49449) *
                C1103) *
               C49207 * C49478) *
              C267 +
          (((C6498 * C49449 + (C6534 + C6533) * C49281) * C1103 +
            (C6293 * C49449 + (C6532 + C6531) * C49281) * C1104 +
            ((C5253 + C5252) * C49449 +
             (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
              C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 +
            (C13218 + C13217) * C49458) *
               C49123 * C49207 * C265 -
           ((C5023 * C9343 - C5024 * C9341 - C5023 * C9344 + C49323 * C9347 +
             C5021 * C1789 - C5022 * C1786 - C5021 * C1790 + C49451 * C1795) *
                C49458 +
            (C13217 + C13218) * C11296 + (C7109 + C7110) * C11295 +
            (C6530 + C6529) * C11294) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C6498 * C11294 + C12640 * C11295 + (C12655 + C12654) * C11296 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C407 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C5023 * C2385 - C5024 * C2379 - C5023 * C2386 + C49323 * C2397 +
              C5021 * C724 - C5022 * C719 - C5021 * C725 + C49451 * C734) *
                 C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C49190 * C267 +
          ((((C5429 + C5428) * C49449 + (C6756 + C6755) * C49281) * C1103 +
            ((C5427 + C5426) * C49449 + (C6754 + C6753) * C49281) * C1104 +
            ((C5425 + C5424) * C49449 +
             (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
              C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 +
            (C13218 + C13217) * C49458) *
               C49123 * C407 -
           ((C5023 * C9832 - C5024 * C9830 - C5023 * C9833 + C49323 * C9836 +
             C5021 * C1954 - C5022 * C1951 - C5021 * C1955 + C49451 * C1960) *
                C49458 +
            (C13425 + C13426) * C11296 + (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C5429 + C5428) * C11294 + (C6756 + C6755) * C11295 +
            (C12863 + C12862) * C11296 +
            (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
             C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C49207 * C547 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C5023 * C1488 - C5024 * C1482 - C5023 * C1489 + C49323 * C1494 +
              C5021 * C622 - C5022 * C617 - C5021 * C623 + C49451 * C632) *
                 C49281 +
             (C6530 + C6529) * C49449) *
                C1103) *
               C49207 * C49478) *
              C549 +
          (((C6498 * C49449 + (C6534 + C6533) * C49281) * C1103 +
            (C6293 * C49449 + (C6532 + C6531) * C49281) * C1104 +
            ((C5253 + C5252) * C49449 +
             (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
              C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                 C49281) *
                C49472) *
               C49207 * C49478 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 +
            (C13218 + C13217) * C49458) *
               C49123 * C49207 * C547 -
           ((C5023 * C9343 - C5024 * C9341 - C5023 * C9344 + C49323 * C9347 +
             C5021 * C1789 - C5022 * C1786 - C5021 * C1790 + C49451 * C1795) *
                C49458 +
            (C13217 + C13218) * C11296 + (C7109 + C7110) * C11295 +
            (C6530 + C6529) * C11294) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C6498 * C11294 + C12640 * C11295 + (C12655 + C12654) * C11296 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C49458) *
               C49123 * C49207 * C49478 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49449 +
            (C6529 + C6530) * C49281) *
               C1103 +
           ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
           C6295 * C49472) *
              C49207 * C613 -
          (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
           ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
           ((C7109 + C7110) * C49281 + (C6530 + C6529) * C49449) * C1103) *
              C49207 * C614 +
          (((C7110 + C7109) * C49449 +
            (C5021 * C1292 - C5022 * C1286 - C5021 * C1293 + C49451 * C1298 +
             C5023 * C1954 - C5024 * C1951 - C5023 * C1955 + C49323 * C1960) *
                C49281) *
               C1103 +
           ((C6534 + C6533) * C49449 +
            (C5021 * C1290 - C5022 * C1285 - C5021 * C1291 + C49451 * C1297 +
             C5023 * C1956 - C5024 * C1952 - C5023 * C1957 + C49323 * C1961) *
                C49281) *
               C1104 +
           ((C6532 + C6531) * C49449 +
            (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
             C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                C49281) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C11294 +
           (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
              C49123 * C49207 * C613 -
          ((C14560 + C14561) * C49458 + (C13217 + C13218) * C11296 +
           (C7109 + C7110) * C11295 + (C6530 + C6529) * C11294) *
              C49123 * C49207 * C614 +
          (C13204 * C11294 + C14547 * C11295 + (C14561 + C14560) * C11296 +
           (C5021 * C9239 - C5022 * C9237 - C5021 * C9240 + C49451 * C9243 +
            C5023 * C9587 - C5024 * C9586 - C5023 * C9588 + C49323 * C9589) *
               C49458) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C407 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C547 +
          ((((C7318 + C7317) * C49449 +
             (C5021 * C1488 - C5022 * C1482 - C5021 * C1489 + C49451 * C1494 +
              C5023 * C2387 - C5024 * C2380 - C5023 * C2388 + C49323 * C2398) *
                 C49281) *
                C1103 +
            ((C6756 + C6755) * C49449 +
             (C5021 * C1486 - C5022 * C1481 - C5021 * C1487 + C49451 * C1493 +
              C5023 * C2391 - C5024 * C2382 - C5023 * C2392 + C49323 * C2400) *
                 C49281) *
                C1104 +
            ((C6754 + C6753) * C49449 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C49449) * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
               C49123 * C407 -
           ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
            (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C547 +
          (((C7318 + C7317) * C11294 + (C13426 + C13425) * C11295 +
            (C14705 + C14704) * C11296 +
            (C5021 * C9343 - C5022 * C9341 - C5021 * C9344 + C49451 * C9347 +
             C5023 * C9834 - C5024 * C9831 - C5023 * C9835 + C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C14560 + C14561) * C49458 + (C13217 + C13218) * C11296 +
            (C7109 + C7110) * C11295 + (C6530 + C6529) * C11294) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C821 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C49190 * C549 +
          ((((C5429 + C5428) * C49449 + (C6756 + C6755) * C49281) * C1103 +
            ((C5427 + C5426) * C49449 + (C6754 + C6753) * C49281) * C1104 +
            ((C5425 + C5424) * C49449 +
             (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
              C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                 C49281) *
                C49472) *
               C49480 -
           (((C5252 + C5253) * C49281 + (C5079 + C5078) * C49449) * C49472 +
            (C6507 * C49281 + (C5077 + C5076) * C49449) * C1104 +
            (C6516 * C49281 + (C5075 + C5074) * C49449) * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
               C49123 * C821 -
           ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
            (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C5429 + C5428) * C11294 + (C6756 + C6755) * C11295 +
            (C12863 + C12862) * C11296 +
            (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
             C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
             C49323 * C10097) *
                C49458) *
               C49123 * C49480 -
           ((C12654 + C12655) * C49458 + C12649 * C11296 + C6516 * C11295 +
            (C5075 + C5074) * C11294) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C49449 +
             (C6529 + C6530) * C49281) *
                C1103 +
            ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
            C6295 * C49472) *
               C821 -
           (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
            ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
            ((C7317 + C7318) * C49281 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C49449) *
                C1103) *
               C49480) *
              C265 +
          ((((C7318 + C7317) * C49449 +
             (C5021 * C1488 - C5022 * C1482 - C5021 * C1489 + C49451 * C1494 +
              C5023 * C2387 - C5024 * C2380 - C5023 * C2388 + C49323 * C2398) *
                 C49281) *
                C1103 +
            ((C6756 + C6755) * C49449 +
             (C5021 * C1486 - C5022 * C1481 - C5021 * C1487 + C49451 * C1493 +
              C5023 * C2391 - C5024 * C2382 - C5023 * C2392 + C49323 * C2400) *
                 C49281) *
                C1104 +
            ((C6754 + C6753) * C49449 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49281) *
                C49472) *
               C49480 -
           (((C6531 + C6532) * C49281 + C6507 * C49449) * C49472 +
            ((C6533 + C6534) * C49281 + C6516 * C49449) * C1104 +
            ((C7109 + C7110) * C49281 + (C6530 + C6529) * C49449) * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C11294 +
            (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
               C49123 * C821 -
           ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
            (C7317 + C7318) * C11295 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C11294) *
               C49123 * C49480) *
              C265 +
          (((C7318 + C7317) * C11294 + (C13426 + C13425) * C11295 +
            (C14705 + C14704) * C11296 +
            (C5021 * C9343 - C5022 * C9341 - C5021 * C9344 + C49451 * C9347 +
             C5023 * C9834 - C5024 * C9831 - C5023 * C9835 + C49323 * C9837) *
                C49458) *
               C49123 * C49480 -
           ((C14560 + C14561) * C49458 + (C13217 + C13218) * C11296 +
            (C7109 + C7110) * C11295 + (C6530 + C6529) * C11294) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49449 +
            (C6529 + C6530) * C49281) *
               C1103 +
           ((C5074 + C5075) * C49449 + C6498 * C49281) * C1104 +
           C6295 * C49472) *
              C967 -
          (((C6753 + C6754) * C49281 + (C5426 + C5427) * C49449) * C49472 +
           ((C6755 + C6756) * C49281 + (C5428 + C5429) * C49449) * C1104 +
           ((C7317 + C7318) * C49281 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49449) *
               C1103) *
              C968 +
          (((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
             C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
                C49449 +
            (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
             C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
                C49281) *
               C1103 +
           ((C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
             C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
                C49449 +
            (C5021 * C2389 - C5022 * C2381 - C5021 * C2390 + C49451 * C2399 +
             C5023 * C3391 - C5024 * C3387 - C5023 * C3392 + C49323 * C3396) *
                C49281) *
               C1104 +
           ((C5021 * C979 - C5022 * C972 - C5021 * C980 + C49451 * C987 +
             C5023 * C2930 - C5024 * C2926 - C5023 * C2931 + C49323 * C2938) *
                C49449 +
            (C5021 * C2393 - C5022 * C2383 - C5021 * C2394 + C49451 * C2401 +
             C5023 * C3393 - C5024 * C3388 - C5023 * C3394 + C49323 * C3397) *
                C49281) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C11294 +
           (C6529 + C6530) * C11295 + C13204 * C11296 + C14547 * C49458) *
              C49123 * C967 -
          ((C14704 + C14705) * C49458 + (C13425 + C13426) * C11296 +
           (C7317 + C7318) * C11295 +
           (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
            C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
               C11294) *
              C49123 * C968 +
          ((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
            C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
               C11294 +
           (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
            C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
               C11295 +
           (C5021 * C2387 - C5022 * C2380 - C5021 * C2388 + C49451 * C2398 +
            C5023 * C10309 - C5024 * C10307 - C5023 * C10310 +
            C49323 * C10313) *
               C11296 +
           (C5021 * C9832 - C5022 * C9830 - C5021 * C9833 + C49451 * C9836 +
            C5023 * C10741 - C5024 * C10740 - C5023 * C10742 +
            C49323 * C10743) *
               C49458) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49503 +
            (C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) *
                C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C49207 * C49190 * C110 -
          ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
           (C1135 + C1108 + C1107) * C1103) *
              C49207 * C49190 * C111 +
          (C1138 * C1103 + (C1124 + C1123 + C1137) * C1104 +
           (C177 * C49515 + C318 * C49503 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C49207 * C49190 * C110 -
          (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
           C179 * C103) *
              C49207 * C49190 * C111 +
          (C180 * C103 + C181 * C104 + C182 * C105 + C183 * C106 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C49236 * C142) * C49219 *
               C107) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C49219 * C1103 +
           (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
              C49207 * C49190 * C110 -
          ((C2583 + C2584 + C2585) * C49219 * C49472 +
           (C2582 + C2581 + C2580) * C49219 * C1104 +
           (C2579 + C2578 + C2577) * C49219 * C1103) *
              C49207 * C49190 * C111 +
          (C2588 * C1103 + (C2585 + C2584 + C2583) * C49219 * C1104 +
           (C2516 * C130 - C2517 * C119 - C2516 * C131 + C49516 * C140 +
            C2518 * C415 - C2519 * C409 - C2518 * C416 + C49505 * C427 +
            C2520 * C983 - C2521 * C974 - C2520 * C984 + C49486 * C989) *
               C49219 * C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C49190 * C110 -
          ((C7975 + C7976 + C7977) * C49472 + (C7974 + C7973 + C7972) * C49499 +
           (C7971 + C7970 + C7969) * C49512) *
              C49207 * C49190 * C111 +
          (C7979 * C49512 + (C7977 + C7976 + C7975) * C49499 +
           (C177 * C7962 + C318 * C7963 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 +
           (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
               C9153) *
              C49123 * C49207 * C49190 * C110 -
          ((C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
               C9153 +
           C1332 * C9152 + C1132 * C9151 + C321 * C9150 + C174 * C9149) *
              C49123 * C49207 * C49190 * C111 +
          (C175 * C9149 + C320 * C9150 + C1133 * C9151 + C1331 * C9152 +
           (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
               C9153) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C7962 +
           (C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291 +
            C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
            C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397) *
               C7963 +
           (C2516 * C622 - C2517 * C617 - C2516 * C623 + C49516 * C632 +
            C2518 * C1488 - C2519 * C1482 - C2518 * C1489 + C49505 * C1494 +
            C2520 * C2387 - C2521 * C2380 - C2520 * C2388 + C49486 * C2398) *
               C49483) *
              C49123 * C49207 * C49190 * C110 -
          ((C2520 * C2391 - C2521 * C2382 - C2520 * C2392 + C49486 * C2400 +
            C2518 * C1486 - C2519 * C1481 - C2518 * C1487 + C49505 * C1493 +
            C2516 * C624 - C2517 * C618 - C2516 * C625 + C49516 * C633) *
               C49483 +
           (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
              C49123 * C49207 * C49190 * C111 +
          (C2587 * C7962 + (C2777 + C2776 + C2775) * C7963 +
           (C2516 * C626 - C2517 * C619 - C2516 * C627 + C49516 * C634 +
            C2518 * C1484 - C2519 * C1480 - C2518 * C1485 + C49505 * C1492 +
            C2520 * C2395 - C2521 * C2384 - C2520 * C2396 + C49486 * C2402) *
               C49483) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C49207 * C265 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                 C49483 +
             C1330 * C49503 + C1329 * C49515) *
                C1103) *
               C49207 * C49478) *
              C267 +
          (((C1320 + C1319 + C1334) * C1103 + (C1314 + C1313 + C1333) * C1104 +
            (C319 * C49515 + C1134 * C49503 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C49207 * C265 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C49207 * C49478) *
              C267 +
          ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) * C49219 *
                C107) *
               C49207 * C49478 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C49207 * C265 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C49207 * C49478) *
              C267 +
          (((C2780 + C2779 + C2778) * C49219 * C1103 +
            (C2777 + C2776 + C2775) * C49219 * C1104 +
            (C2516 * C277 - C2517 * C270 - C2516 * C278 + C49516 * C288 +
             C2518 * C730 - C2519 * C722 - C2518 * C731 + C49505 * C737 +
             C2520 * C2735 - C2521 * C2734 - C2520 * C2736 + C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C265 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C267 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C265 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 +
            (C10156 + C10157 + C10158) * C49483) *
               C49123 * C49207 * C265 -
           ((C2520 * C9832 - C2521 * C9830 - C2520 * C9833 + C49486 * C9836 +
             C2518 * C1954 - C2519 * C1951 - C2518 * C1955 + C49505 * C1960 +
             C2516 * C1292 - C2517 * C1286 - C2516 * C1293 + C49516 * C1298) *
                C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C49207 * C49478) *
              C267 +
          (((C2780 + C2779 + C2778) * C7962 +
            (C10159 + C10160 + C10161) * C7963 +
            (C2516 * C1290 - C2517 * C1285 - C2516 * C1291 + C49516 * C1297 +
             C2518 * C1956 - C2519 * C1952 - C2518 * C1957 + C49505 * C1961 +
             C2520 * C10095 - C2521 * C10094 - C2520 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C407 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            ((C113 * C1488 - C114 * C1482 - C113 * C1489 + C49236 * C1494) *
                 C49483 +
             (C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) *
                 C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C49190 * C267 +
          (((C1514 + C1530 + C1529) * C1103 + (C1505 + C1528 + C1527) * C1104 +
            (C459 * C49515 +
             (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                 C49503 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C407 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C49190 * C267 +
          ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
            (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) * C49219 *
                C107) *
               C49480 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C407 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C49190 * C267 +
          (((C2984 + C2983 + C2982) * C49219 * C1103 +
            (C2981 + C2980 + C2979) * C49219 * C1104 +
            (C2516 * C417 - C2517 * C410 - C2516 * C418 + C49516 * C428 +
             C2518 * C981 - C2519 * C973 - C2518 * C982 + C49505 * C988 +
             C2520 * C2936 - C2521 * C2929 - C2520 * C2937 + C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C267 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           ((C113 * C9343 - C114 * C9341 - C113 * C9344 + C49236 * C9347) *
                C9153 +
            (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                C9152 +
            C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C267 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 +
            (C10156 + C10157 + C10158) * C49483) *
               C49123 * C407 -
           ((C2520 * C10309 - C2521 * C10307 - C2520 * C10310 +
             C49486 * C10313 + C2518 * C2387 - C2519 * C2380 - C2518 * C2388 +
             C49505 * C2398 + C2516 * C1488 - C2517 * C1482 - C2516 * C1489 +
             C49516 * C1494) *
                C49483 +
            (C2520 * C3389 - C2521 * C3386 - C2520 * C3390 + C49486 * C3395 +
             C2518 * C2385 - C2519 * C2379 - C2518 * C2386 + C49505 * C2397 +
             C2516 * C724 - C2517 * C719 - C2516 * C725 + C49516 * C734) *
                C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C49190 * C267 +
          (((C2984 + C2983 + C2982) * C7962 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C7963 +
            (C2516 * C1486 - C2517 * C1481 - C2516 * C1487 + C49516 * C1493 +
             C2518 * C2391 - C2519 * C2382 - C2518 * C2392 + C49505 * C2400 +
             C2520 * C10311 - C2521 * C10308 - C2520 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C49207 * C547 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                 C49483 +
             C1330 * C49503 + C1329 * C49515) *
                C1103) *
               C49207 * C49478) *
              C549 +
          (((C1320 + C1319 + C1334) * C1103 + (C1314 + C1313 + C1333) * C1104 +
            (C319 * C49515 + C1134 * C49503 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C49207 * C547 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C49207 * C49478) *
              C549 +
          ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) * C49219 *
                C107) *
               C49207 * C49478 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C49207 * C547 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C49207 * C49478) *
              C549 +
          (((C2780 + C2779 + C2778) * C49219 * C1103 +
            (C2777 + C2776 + C2775) * C49219 * C1104 +
            (C2516 * C277 - C2517 * C270 - C2516 * C278 + C49516 * C288 +
             C2518 * C730 - C2519 * C722 - C2518 * C731 + C49505 * C737 +
             C2520 * C2735 - C2521 * C2734 - C2520 * C2736 + C49486 * C2737) *
                C49219 * C49472) *
               C49207 * C49478 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C547 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C549 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C547 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 +
            (C10156 + C10157 + C10158) * C49483) *
               C49123 * C49207 * C547 -
           ((C2520 * C9832 - C2521 * C9830 - C2520 * C9833 + C49486 * C9836 +
             C2518 * C1954 - C2519 * C1951 - C2518 * C1955 + C49505 * C1960 +
             C2516 * C1292 - C2517 * C1286 - C2516 * C1293 + C49516 * C1298) *
                C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C49207 * C49478) *
              C549 +
          (((C2780 + C2779 + C2778) * C7962 +
            (C10159 + C10160 + C10161) * C7963 +
            (C2516 * C1290 - C2517 * C1285 - C2516 * C1291 + C49516 * C1297 +
             C2518 * C1956 - C2519 * C1952 - C2518 * C1957 + C49505 * C1961 +
             C2520 * C10095 - C2521 * C10094 - C2520 * C10096 +
             C49486 * C10097) *
                C49483) *
               C49123 * C49207 * C49478 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            C1329 * C49503 + C1330 * C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C49207 * C613 -
          ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
           (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
              C49207 * C614 +
          ((C1330 * C49515 + C1805 * C49503 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C1103 +
           (C1132 * C49515 + C1332 * C49503 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C1104 +
           (C1133 * C49515 + C1331 * C49503 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C49207 * C613 -
          (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
           (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
               C103) *
              C49207 * C614 +
          ((C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) * C49219 *
               C103 +
           (C113 * C624 - C114 * C618 - C113 * C625 + C49236 * C633) * C49219 *
               C104 +
           (C113 * C626 - C114 * C619 - C113 * C627 + C49236 * C634) * C49219 *
               C105 +
           (C113 * C628 - C114 * C620 - C113 * C629 + C49236 * C635) * C49219 *
               C106 +
           (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) * C49219 *
               C107) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C49219 * C1103 +
           (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
              C49207 * C613 -
          ((C2775 + C2776 + C2777) * C49219 * C49472 +
           (C2778 + C2779 + C2780) * C49219 * C1104 +
           (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
            C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
            C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
               C49219 * C1103) *
              C49207 * C614 +
          ((C2516 * C622 - C2517 * C617 - C2516 * C623 + C49516 * C632 +
            C2518 * C1488 - C2519 * C1482 - C2518 * C1489 + C49505 * C1494 +
            C2520 * C2387 - C2521 * C2380 - C2520 * C2388 + C49486 * C2398) *
               C49219 * C1103 +
           (C2516 * C624 - C2517 * C618 - C2516 * C625 + C49516 * C633 +
            C2518 * C1486 - C2519 * C1481 - C2518 * C1487 + C49505 * C1493 +
            C2520 * C2391 - C2521 * C2382 - C2520 * C2392 + C49486 * C2400) *
               C49219 * C1104 +
           (C2516 * C626 - C2517 * C619 - C2516 * C627 + C49516 * C634 +
            C2518 * C1484 - C2519 * C1480 - C2518 * C1485 + C49505 * C1492 +
            C2520 * C2395 - C2521 * C2384 - C2520 * C2396 + C49486 * C2402) *
               C49219 * C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C613 -
          ((C8126 + C8127 + C8128) * C49472 + (C8129 + C8130 + C8131) * C49499 +
           (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
              C49207 * C614 +
          ((C1330 * C7962 + C1805 * C7963 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C49512 +
           (C1132 * C7962 + C1332 * C7963 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C49499 +
           (C1133 * C7962 + C1331 * C7963 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C49207 * C613 -
          (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
           C1329 * C9149) *
              C49123 * C49207 * C614 +
          (C1330 * C9149 + C1805 * C9150 + C9258 * C9151 + C9504 * C9152 +
           (C113 * C9494 - C114 * C9493 - C113 * C9495 + C49236 * C9496) *
               C9153) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C7962 +
           (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
              C49123 * C49207 * C613 -
          ((C10592 + C10593 + C10594) * C49483 +
           (C10158 + C10157 + C10156) * C7963 +
           (C10155 + C10154 + C10153) * C7962) *
              C49123 * C49207 * C614 +
          (C10585 * C7962 + (C10594 + C10593 + C10592) * C7963 +
           (C2516 * C1789 - C2517 * C1786 - C2516 * C1790 + C49516 * C1795 +
            C2518 * C9343 - C2519 * C9341 - C2518 * C9344 + C49505 * C9347 +
            C2520 * C9834 - C2521 * C9831 - C2520 * C9835 + C49486 * C9837) *
               C49483) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C407 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C547 +
          (((C1977 * C49515 + C1976 * C49503 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C1103 +
            (C1526 * C49515 + C1525 * C49503 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C1104 +
            (C1524 * C49515 + C1523 * C49503 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C407 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C547 +
          (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) * C49219 *
                C103 +
            (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) * C49219 *
                C104 +
            (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) * C49219 *
                C105 +
            (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) * C49219 *
                C106 +
            (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) * C49219 *
                C107) *
               C49480 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C407 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C547 +
          (((C2516 * C724 - C2517 * C719 - C2516 * C725 + C49516 * C734 +
             C2518 * C2385 - C2519 * C2379 - C2518 * C2386 + C49505 * C2397 +
             C2520 * C3389 - C2521 * C3386 - C2520 * C3390 + C49486 * C3395) *
                C49219 * C1103 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C49219 * C1104 +
            (C2516 * C728 - C2517 * C721 - C2516 * C729 + C49516 * C736 +
             C2518 * C2393 - C2519 * C2383 - C2518 * C2394 + C49505 * C2401 +
             C2520 * C3393 - C2521 * C3388 - C2520 * C3394 + C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C547 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C547 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
               C49123 * C407 -
           ((C10781 + C10782 + C10783) * C49483 +
            (C10784 + C10785 + C10786) * C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C547 +
          (((C10786 + C10785 + C10784) * C7962 +
            (C10783 + C10782 + C10781) * C7963 +
            (C2516 * C1954 - C2517 * C1951 - C2516 * C1955 + C49516 * C1960 +
             C2518 * C9832 - C2519 * C9830 - C2518 * C9833 + C49505 * C9836 +
             C2520 * C10741 - C2521 * C10740 - C2520 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C10592 + C10593 + C10594) * C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C821 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C49190 * C549 +
          (((C1514 + C1530 + C1529) * C1103 + (C1505 + C1528 + C1527) * C1104 +
            (C459 * C49515 +
             (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                 C49503 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C821 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C49190 * C549 +
          ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
            (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) * C49219 *
                C107) *
               C49480 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C821 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C49190 * C549 +
          (((C2984 + C2983 + C2982) * C49219 * C1103 +
            (C2981 + C2980 + C2979) * C49219 * C1104 +
            (C2516 * C417 - C2517 * C410 - C2516 * C418 + C49516 * C428 +
             C2518 * C981 - C2519 * C973 - C2518 * C982 + C49505 * C988 +
             C2520 * C2936 - C2521 * C2929 - C2520 * C2937 + C49486 * C2941) *
                C49219 * C49472) *
               C49480 -
           ((C2583 + C2584 + C2585) * C49219 * C49472 +
            (C2582 + C2581 + C2580) * C49219 * C1104 +
            (C2579 + C2578 + C2577) * C49219 * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C549 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C549 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
               C49123 * C821 -
           ((C10781 + C10782 + C10783) * C49483 +
            (C10784 + C10785 + C10786) * C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C49190 * C549 +
          (((C2984 + C2983 + C2982) * C7962 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C7963 +
            (C2516 * C1486 - C2517 * C1481 - C2516 * C1487 + C49516 * C1493 +
             C2518 * C2391 - C2519 * C2382 - C2518 * C2392 + C49505 * C2400 +
             C2520 * C10311 - C2521 * C10308 - C2520 * C10312 +
             C49486 * C10314) *
                C49483) *
               C49123 * C49480 -
           ((C10161 + C10160 + C10159) * C49483 +
            (C2778 + C2779 + C2780) * C7963 + (C2579 + C2578 + C2577) * C7962) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C821 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C265 +
          (((C1977 * C49515 + C1976 * C49503 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C1103 +
            (C1526 * C49515 + C1525 * C49503 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C1104 +
            (C1524 * C49515 + C1523 * C49503 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C821 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C265 +
          (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) * C49219 *
                C103 +
            (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) * C49219 *
                C104 +
            (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) * C49219 *
                C105 +
            (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) * C49219 *
                C106 +
            (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) * C49219 *
                C107) *
               C49480 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C49219 * C1103 +
            (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
               C821 -
           ((C2979 + C2980 + C2981) * C49219 * C49472 +
            (C2982 + C2983 + C2984) * C49219 * C1104 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C49219 * C1103) *
               C49480) *
              C265 +
          (((C2516 * C724 - C2517 * C719 - C2516 * C725 + C49516 * C734 +
             C2518 * C2385 - C2519 * C2379 - C2518 * C2386 + C49505 * C2397 +
             C2520 * C3389 - C2521 * C3386 - C2520 * C3390 + C49486 * C3395) *
                C49219 * C1103 +
            (C2516 * C726 - C2517 * C720 - C2516 * C727 + C49516 * C735 +
             C2518 * C2389 - C2519 * C2381 - C2518 * C2390 + C49505 * C2399 +
             C2520 * C3391 - C2521 * C3387 - C2520 * C3392 + C49486 * C3396) *
                C49219 * C1104 +
            (C2516 * C728 - C2517 * C721 - C2516 * C729 + C49516 * C736 +
             C2518 * C2393 - C2519 * C2383 - C2518 * C2394 + C49505 * C2401 +
             C2520 * C3393 - C2521 * C3388 - C2520 * C3394 + C49486 * C3397) *
                C49219 * C49472) *
               C49480 -
           ((C2775 + C2776 + C2777) * C49219 * C49472 +
            (C2778 + C2779 + C2780) * C49219 * C1104 +
            (C2520 * C2385 - C2521 * C2379 - C2520 * C2386 + C49486 * C2397 +
             C2518 * C724 - C2519 * C719 - C2518 * C725 + C49505 * C734 +
             C2516 * C283 - C2517 * C273 - C2516 * C284 + C49516 * C291) *
                C49219 * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C265 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C265 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
             C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
             C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
                C7962 +
            (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
               C49123 * C821 -
           ((C10781 + C10782 + C10783) * C49483 +
            (C10784 + C10785 + C10786) * C7963 +
            (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
             C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
             C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
                C7962) *
               C49123 * C49480) *
              C265 +
          (((C10786 + C10785 + C10784) * C7962 +
            (C10783 + C10782 + C10781) * C7963 +
            (C2516 * C1954 - C2517 * C1951 - C2516 * C1955 + C49516 * C1960 +
             C2518 * C9832 - C2519 * C9830 - C2518 * C9833 + C49505 * C9836 +
             C2520 * C10741 - C2521 * C10740 - C2520 * C10742 +
             C49486 * C10743) *
                C49483) *
               C49123 * C49480 -
           ((C10592 + C10593 + C10594) * C49483 +
            (C10158 + C10157 + C10156) * C7963 +
            (C10155 + C10154 + C10153) * C7962) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            C1329 * C49503 + C1330 * C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C967 -
          ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
           (C1976 * C49483 + C1977 * C49503 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49515) *
               C1103) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49515 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49503 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C1103 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49515 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49503 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C1104 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49515 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49503 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C967 -
          (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
               C103) *
              C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49219 *
               C103 +
           (C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49219 *
               C104 +
           (C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49219 *
               C105 +
           (C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C49219 *
               C106 +
           (C113 * C983 - C114 * C974 - C113 * C984 + C49236 * C989) * C49219 *
               C107) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C49219 * C1103 +
           (C2577 + C2578 + C2579) * C49219 * C1104 + C2588 * C49472) *
              C967 -
          ((C2979 + C2980 + C2981) * C49219 * C49472 +
           (C2982 + C2983 + C2984) * C49219 * C1104 +
           (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
            C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
            C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
               C49219 * C1103) *
              C968 +
          ((C2516 * C975 - C2517 * C970 - C2516 * C976 + C49516 * C985 +
            C2518 * C2934 - C2519 * C2928 - C2518 * C2935 + C49505 * C2940 +
            C2520 * C3803 - C2521 * C3800 - C2520 * C3804 + C49486 * C3809) *
               C49219 * C1103 +
           (C2516 * C977 - C2517 * C971 - C2516 * C978 + C49516 * C986 +
            C2518 * C2932 - C2519 * C2927 - C2518 * C2933 + C49505 * C2939 +
            C2520 * C3805 - C2521 * C3801 - C2520 * C3806 + C49486 * C3810) *
               C49219 * C1104 +
           (C2516 * C979 - C2517 * C972 - C2516 * C980 + C49516 * C987 +
            C2518 * C2930 - C2519 * C2926 - C2518 * C2931 + C49505 * C2938 +
            C2520 * C3807 - C2521 * C3802 - C2520 * C3808 + C49486 * C3811) *
               C49219 * C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C967 -
          ((C8278 + C8279 + C8280) * C49472 + (C8281 + C8282 + C8283) * C49499 +
           (C1976 * C49483 + C1977 * C7963 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C7962) *
               C49512) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C7962 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C7963 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C49512 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C7962 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C7963 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C49499 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C7962 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C7963 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C967 -
          (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
              C49123 * C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C9149 +
           (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
               C9150 +
           (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
               C9151 +
           (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
               C9152 +
           (C113 * C9834 - C114 * C9831 - C113 * C9835 + C49236 * C9837) *
               C9153) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2516 * C122 - C2517 * C115 - C2516 * C123 + C49516 * C136 +
            C2518 * C423 - C2519 * C413 - C2518 * C424 + C49505 * C431 +
            C2520 * C975 - C2521 * C970 - C2520 * C976 + C49486 * C985) *
               C7962 +
           (C10153 + C10154 + C10155) * C7963 + C10585 * C49483) *
              C49123 * C967 -
          ((C10781 + C10782 + C10783) * C49483 +
           (C10784 + C10785 + C10786) * C7963 +
           (C2520 * C2934 - C2521 * C2928 - C2520 * C2935 + C49486 * C2940 +
            C2518 * C975 - C2519 * C970 - C2518 * C976 + C49505 * C985 +
            C2516 * C423 - C2517 * C413 - C2516 * C424 + C49516 * C431) *
               C7962) *
              C49123 * C968 +
          ((C2516 * C975 - C2517 * C970 - C2516 * C976 + C49516 * C985 +
            C2518 * C2934 - C2519 * C2928 - C2518 * C2935 + C49505 * C2940 +
            C2520 * C3803 - C2521 * C3800 - C2520 * C3804 + C49486 * C3809) *
               C7962 +
           (C2516 * C2385 - C2517 * C2379 - C2516 * C2386 + C49516 * C2397 +
            C2518 * C3389 - C2519 * C3386 - C2518 * C3390 + C49505 * C3395 +
            C2520 * C11190 - C2521 * C11188 - C2520 * C11191 +
            C49486 * C11194) *
               C7963 +
           (C2516 * C2387 - C2517 * C2380 - C2516 * C2388 + C49516 * C2398 +
            C2518 * C10309 - C2519 * C10307 - C2518 * C10310 + C49505 * C10313 +
            C2520 * C11192 - C2521 * C11189 - C2520 * C11193 +
            C49486 * C11195) *
               C49483) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C49219 * C3912 +
           (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
              C49207 * C49190 * C110 -
          ((C5080 + C5081) * C49219 * C49450 +
           (C5079 + C5078) * C49219 * C3914 + (C5077 + C5076) * C49219 * C3913 +
           (C5075 + C5074) * C49219 * C3912) *
              C49207 * C49190 * C111 +
          (C5084 * C3912 + C5085 * C3913 + (C5081 + C5080) * C49219 * C3914 +
           (C5021 * C132 - C5022 * C120 - C5021 * C133 + C49451 * C141 +
            C5023 * C425 - C5024 * C414 - C5023 * C426 + C49323 * C432) *
               C49219 * C49450) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C7962 +
            (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
               C49428 +
           ((C5074 + C5075) * C7962 + C6498 * C7963 +
            (C6534 + C6533) * C49483) *
               C49133) *
              C49207 * C49190 * C110 -
          (((C6531 + C6532) * C49483 + C6507 * C7963 +
            (C5077 + C5076) * C7962) *
               C49133 +
           ((C6533 + C6534) * C49483 + C6516 * C7963 +
            (C5075 + C5074) * C7962) *
               C49428) *
              C49207 * C49190 * C111 +
          ((C5082 * C7962 + C6293 * C7963 + (C6532 + C6531) * C49483) * C49428 +
           (C5083 * C7962 + (C5253 + C5252) * C7963 +
            (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
             C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
                C49483) *
               C49133) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C49207 * C265 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C49207 * C49478) *
              C267 +
          (((C5257 + C5256) * C49219 * C3912 +
            (C5255 + C5254) * C49219 * C3913 +
            (C5253 + C5252) * C49219 * C3914 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C49207 * C265 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C5023 * C1954 - C5024 * C1951 - C5023 * C1955 + C49323 * C1960 +
              C5021 * C1292 - C5022 * C1286 - C5021 * C1293 + C49451 * C1298) *
                 C49483 +
             (C7109 + C7110) * C7963 + (C6530 + C6529) * C7962) *
                C49428) *
               C49207 * C49478) *
              C267 +
          (((C6498 * C7962 + C12640 * C7963 + (C12655 + C12654) * C49483) *
                C49428 +
            (C6293 * C7962 + (C6532 + C6531) * C7963 +
             (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
              C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C407 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C49190 * C267 +
          (((C5429 + C5428) * C49219 * C3912 +
            (C5427 + C5426) * C49219 * C3913 +
            (C5425 + C5424) * C49219 * C3914 +
            (C5021 * C415 - C5022 * C409 - C5021 * C416 + C49451 * C427 +
             C5023 * C983 - C5024 * C974 - C5023 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C407 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C5023 * C2387 - C5024 * C2380 - C5023 * C2388 + C49323 * C2398 +
              C5021 * C1488 - C5022 * C1482 - C5021 * C1489 + C49451 * C1494) *
                 C49483 +
             (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C49190 * C267 +
          ((((C5429 + C5428) * C7962 + (C6756 + C6755) * C7963 +
             (C12863 + C12862) * C49483) *
                C49428 +
            ((C5427 + C5426) * C7962 + (C6754 + C6753) * C7963 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C49207 * C547 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C49207 * C49478) *
              C549 +
          (((C5257 + C5256) * C49219 * C3912 +
            (C5255 + C5254) * C49219 * C3913 +
            (C5253 + C5252) * C49219 * C3914 +
            (C5021 * C275 - C5022 * C269 - C5021 * C276 + C49451 * C287 +
             C5023 * C732 - C5024 * C723 - C5023 * C733 + C49323 * C738) *
                C49219 * C49450) *
               C49207 * C49478 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + (C7110 + C7109) * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C49207 * C547 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C5023 * C1954 - C5024 * C1951 - C5023 * C1955 + C49323 * C1960 +
              C5021 * C1292 - C5022 * C1286 - C5021 * C1293 + C49451 * C1298) *
                 C49483 +
             (C7109 + C7110) * C7963 + (C6530 + C6529) * C7962) *
                C49428) *
               C49207 * C49478) *
              C549 +
          (((C6498 * C7962 + C12640 * C7963 + (C12655 + C12654) * C49483) *
                C49428 +
            (C6293 * C7962 + (C6532 + C6531) * C7963 +
             (C5021 * C1288 - C5022 * C1284 - C5021 * C1289 + C49451 * C1296 +
              C5023 * C1958 - C5024 * C1953 - C5023 * C1959 + C49323 * C1962) *
                 C49483) *
                C49133) *
               C49207 * C49478 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C49219 * C3912 +
           (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
              C49207 * C613 -
          ((C5252 + C5253) * C49219 * C49450 +
           (C5254 + C5255) * C49219 * C3914 + (C5256 + C5257) * C49219 * C3913 +
           (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
            C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
               C49219 * C3912) *
              C49207 * C614 +
          ((C5021 * C622 - C5022 * C617 - C5021 * C623 + C49451 * C632 +
            C5023 * C1488 - C5024 * C1482 - C5023 * C1489 + C49323 * C1494) *
               C49219 * C3912 +
           (C5021 * C624 - C5022 * C618 - C5021 * C625 + C49451 * C633 +
            C5023 * C1486 - C5024 * C1481 - C5023 * C1487 + C49323 * C1493) *
               C49219 * C3913 +
           (C5021 * C626 - C5022 * C619 - C5021 * C627 + C49451 * C634 +
            C5023 * C1484 - C5024 * C1480 - C5023 * C1485 + C49323 * C1492) *
               C49219 * C3914 +
           (C5021 * C628 - C5022 * C620 - C5021 * C629 + C49451 * C635 +
            C5023 * C1490 - C5024 * C1483 - C5023 * C1491 + C49323 * C1495) *
               C49219 * C49450) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C7962 +
            (C6529 + C6530) * C7963 + C13204 * C49483) *
               C49428 +
           ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
               C49133) *
              C49207 * C613 -
          (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
               C49133 +
           ((C13217 + C13218) * C49483 + (C7109 + C7110) * C7963 +
            (C6530 + C6529) * C7962) *
               C49428) *
              C49207 * C614 +
          ((C13204 * C7962 + (C13218 + C13217) * C7963 +
            (C5021 * C1789 - C5022 * C1786 - C5021 * C1790 + C49451 * C1795 +
             C5023 * C9343 - C5024 * C9341 - C5023 * C9344 + C49323 * C9347) *
                C49483) *
               C49428 +
           (C12640 * C7962 + (C12655 + C12654) * C7963 +
            (C5021 * C1791 - C5022 * C1787 - C5021 * C1792 + C49451 * C1796 +
             C5023 * C9345 - C5024 * C9342 - C5023 * C9346 + C49323 * C9348) *
                C49483) *
               C49133) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C407 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C547 +
          (((C5021 * C724 - C5022 * C719 - C5021 * C725 + C49451 * C734 +
             C5023 * C2385 - C5024 * C2379 - C5023 * C2386 + C49323 * C2397) *
                C49219 * C3912 +
            (C5021 * C726 - C5022 * C720 - C5021 * C727 + C49451 * C735 +
             C5023 * C2389 - C5024 * C2381 - C5023 * C2390 + C49323 * C2399) *
                C49219 * C3913 +
            (C5021 * C728 - C5022 * C721 - C5021 * C729 + C49451 * C736 +
             C5023 * C2393 - C5024 * C2383 - C5023 * C2394 + C49323 * C2401) *
                C49219 * C3914 +
            (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
             C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + C13204 * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C407 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C547 +
          ((((C7318 + C7317) * C7962 + (C13426 + C13425) * C7963 +
             (C5021 * C1954 - C5022 * C1951 - C5021 * C1955 + C49451 * C1960 +
              C5023 * C9832 - C5024 * C9830 - C5023 * C9833 + C49323 * C9836) *
                 C49483) *
                C49428 +
            ((C6756 + C6755) * C7962 + (C12863 + C12862) * C7963 +
             (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
              C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
              C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C13217 + C13218) * C49483 + (C7109 + C7110) * C7963 +
             (C6530 + C6529) * C7962) *
                C49428) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C821 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C49190 * C549 +
          (((C5429 + C5428) * C49219 * C3912 +
            (C5427 + C5426) * C49219 * C3913 +
            (C5425 + C5424) * C49219 * C3914 +
            (C5021 * C415 - C5022 * C409 - C5021 * C416 + C49451 * C427 +
             C5023 * C983 - C5024 * C974 - C5023 * C984 + C49323 * C989) *
                C49219 * C49450) *
               C49480 -
           ((C5080 + C5081) * C49219 * C49450 +
            (C5079 + C5078) * C49219 * C3914 +
            (C5077 + C5076) * C49219 * C3913 +
            (C5075 + C5074) * C49219 * C3912) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + C13204 * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C821 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C49190 * C549 +
          ((((C5429 + C5428) * C7962 + (C6756 + C6755) * C7963 +
             (C12863 + C12862) * C49483) *
                C49428 +
            ((C5427 + C5426) * C7962 + (C6754 + C6753) * C7963 +
             (C5021 * C1484 - C5022 * C1480 - C5021 * C1485 + C49451 * C1492 +
              C5023 * C2395 - C5024 * C2384 - C5023 * C2396 + C49323 * C2402) *
                 C49483) *
                C49133) *
               C49480 -
           (((C6531 + C6532) * C49483 + C6507 * C7963 +
             (C5077 + C5076) * C7962) *
                C49133 +
            (C12649 * C49483 + C6516 * C7963 + (C5075 + C5074) * C7962) *
                C49428) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C49219 * C3912 +
            (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
               C821 -
           ((C5424 + C5425) * C49219 * C49450 +
            (C5426 + C5427) * C49219 * C3914 +
            (C5428 + C5429) * C49219 * C3913 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C49219 * C3912) *
               C49480) *
              C265 +
          (((C5021 * C724 - C5022 * C719 - C5021 * C725 + C49451 * C734 +
             C5023 * C2385 - C5024 * C2379 - C5023 * C2386 + C49323 * C2397) *
                C49219 * C3912 +
            (C5021 * C726 - C5022 * C720 - C5021 * C727 + C49451 * C735 +
             C5023 * C2389 - C5024 * C2381 - C5023 * C2390 + C49323 * C2399) *
                C49219 * C3913 +
            (C5021 * C728 - C5022 * C721 - C5021 * C729 + C49451 * C736 +
             C5023 * C2393 - C5024 * C2383 - C5023 * C2394 + C49323 * C2401) *
                C49219 * C3914 +
            (C5021 * C730 - C5022 * C722 - C5021 * C731 + C49451 * C737 +
             C5023 * C2735 - C5024 * C2734 - C5023 * C2736 + C49323 * C2737) *
                C49219 * C49450) *
               C49480 -
           ((C5252 + C5253) * C49219 * C49450 +
            (C5254 + C5255) * C49219 * C3914 +
            (C5256 + C5257) * C49219 * C3913 +
            (C5023 * C724 - C5024 * C719 - C5023 * C725 + C49323 * C734 +
             C5021 * C283 - C5022 * C273 - C5021 * C284 + C49451 * C291) *
                C49219 * C3912) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
              C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                 C7962 +
             (C6529 + C6530) * C7963 + C13204 * C49483) *
                C49428 +
            ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
                C49133) *
               C821 -
           (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
             (C5428 + C5429) * C7962) *
                C49133 +
            ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
             (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
              C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                 C7962) *
                C49428) *
               C49480) *
              C265 +
          ((((C7318 + C7317) * C7962 + (C13426 + C13425) * C7963 +
             (C5021 * C1954 - C5022 * C1951 - C5021 * C1955 + C49451 * C1960 +
              C5023 * C9832 - C5024 * C9830 - C5023 * C9833 + C49323 * C9836) *
                 C49483) *
                C49428 +
            ((C6756 + C6755) * C7962 + (C12863 + C12862) * C7963 +
             (C5021 * C1956 - C5022 * C1952 - C5021 * C1957 + C49451 * C1961 +
              C5023 * C10095 - C5024 * C10094 - C5023 * C10096 +
              C49323 * C10097) *
                 C49483) *
                C49133) *
               C49480 -
           (((C12654 + C12655) * C49483 + C12649 * C7963 + C6516 * C7962) *
                C49133 +
            ((C13217 + C13218) * C49483 + (C7109 + C7110) * C7963 +
             (C6530 + C6529) * C7962) *
                C49428) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
            C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
               C49219 * C3912 +
           (C5074 + C5075) * C49219 * C3913 + C5084 * C3914 + C5085 * C49450) *
              C967 -
          ((C5424 + C5425) * C49219 * C49450 +
           (C5426 + C5427) * C49219 * C3914 + (C5428 + C5429) * C49219 * C3913 +
           (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
            C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
               C49219 * C3912) *
              C968 +
          ((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
            C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
               C49219 * C3912 +
           (C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
            C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
               C49219 * C3913 +
           (C5021 * C979 - C5022 * C972 - C5021 * C980 + C49451 * C987 +
            C5023 * C2930 - C5024 * C2926 - C5023 * C2931 + C49323 * C2938) *
               C49219 * C3914 +
           (C5021 * C981 - C5022 * C973 - C5021 * C982 + C49451 * C988 +
            C5023 * C2936 - C5024 * C2929 - C5023 * C2937 + C49323 * C2941) *
               C49219 * C49450) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5021 * C122 - C5022 * C115 - C5021 * C123 + C49451 * C136 +
             C5023 * C423 - C5024 * C413 - C5023 * C424 + C49323 * C431) *
                C7962 +
            (C6529 + C6530) * C7963 + C13204 * C49483) *
               C49428 +
           ((C5074 + C5075) * C7962 + C6498 * C7963 + C12640 * C49483) *
               C49133) *
              C967 -
          (((C12862 + C12863) * C49483 + (C6755 + C6756) * C7963 +
            (C5428 + C5429) * C7962) *
               C49133 +
           ((C13425 + C13426) * C49483 + (C7317 + C7318) * C7963 +
            (C5023 * C975 - C5024 * C970 - C5023 * C976 + C49323 * C985 +
             C5021 * C423 - C5022 * C413 - C5021 * C424 + C49451 * C431) *
                C7962) *
               C49428) *
              C968 +
          (((C5021 * C975 - C5022 * C970 - C5021 * C976 + C49451 * C985 +
             C5023 * C2934 - C5024 * C2928 - C5023 * C2935 + C49323 * C2940) *
                C7962 +
            (C5021 * C2385 - C5022 * C2379 - C5021 * C2386 + C49451 * C2397 +
             C5023 * C3389 - C5024 * C3386 - C5023 * C3390 + C49323 * C3395) *
                C7963 +
            (C5021 * C2387 - C5022 * C2380 - C5021 * C2388 + C49451 * C2398 +
             C5023 * C10309 - C5024 * C10307 - C5023 * C10310 +
             C49323 * C10313) *
                C49483) *
               C49428 +
           ((C5021 * C977 - C5022 * C971 - C5021 * C978 + C49451 * C986 +
             C5023 * C2932 - C5024 * C2927 - C5023 * C2933 + C49323 * C2939) *
                C7962 +
            (C5021 * C2389 - C5022 * C2381 - C5021 * C2390 + C49451 * C2399 +
             C5023 * C3391 - C5024 * C3387 - C5023 * C3392 + C49323 * C3396) *
                C7963 +
            (C5021 * C2391 - C5022 * C2382 - C5021 * C2392 + C49451 * C2400 +
             C5023 * C10311 - C5024 * C10308 - C5023 * C10312 +
             C49323 * C10314) *
                C49483) *
               C49133) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C49207 * C49190 * C110 -
          (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
           C179 * C103) *
              C49207 * C49190 * C111 +
          (C180 * C103 + C181 * C104 + C182 * C105 + C183 * C106 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C49236 * C142) * C49219 *
               C107) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49503 +
            (C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) *
                C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C49207 * C49190 * C110 -
          ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
           (C1135 + C1108 + C1107) * C1103) *
              C49207 * C49190 * C111 +
          (C1138 * C1103 + (C1124 + C1123 + C1137) * C1104 +
           (C177 * C49515 + C318 * C49503 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C49190 * C110 -
          ((C7975 + C7976 + C7977) * C49472 + (C7974 + C7973 + C7972) * C49499 +
           (C7971 + C7970 + C7969) * C49512) *
              C49207 * C49190 * C111 +
          (C7979 * C49512 + (C7977 + C7976 + C7975) * C49499 +
           (C177 * C7962 + C318 * C7963 +
            (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) *
                C49483) *
               C49472) *
              C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 +
           (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
               C9153) *
              C49123 * C49207 * C49190 * C110 -
          ((C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
               C9153 +
           C1332 * C9152 + C1132 * C9151 + C321 * C9150 + C174 * C9149) *
              C49123 * C49207 * C49190 * C111 +
          (C175 * C9149 + C320 * C9150 + C1133 * C9151 + C1331 * C9152 +
           (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
               C9153) *
              C49123 * C49207 * C49190 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C49207 * C265 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C49207 * C49478) *
              C267 +
          ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) * C49219 *
                C107) *
               C49207 * C49478 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C49207 * C265 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                 C49483 +
             C1330 * C49503 + C1329 * C49515) *
                C1103) *
               C49207 * C49478) *
              C267 +
          (((C1320 + C1319 + C1334) * C1103 + (C1314 + C1313 + C1333) * C1104 +
            (C319 * C49515 + C1134 * C49503 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C265 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C267 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C265 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C267 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C265) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C407 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C49190 * C267 +
          ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
            (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) * C49219 *
                C107) *
               C49480 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C407 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            ((C113 * C1488 - C114 * C1482 - C113 * C1489 + C49236 * C1494) *
                 C49483 +
             (C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) *
                 C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C49190 * C267 +
          (((C1514 + C1530 + C1529) * C1103 + (C1505 + C1528 + C1527) * C1104 +
            (C459 * C49515 +
             (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                 C49503 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C267 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           ((C113 * C9343 - C114 * C9341 - C113 * C9344 + C49236 * C9347) *
                C9153 +
            (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                C9152 +
            C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C267 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C407) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C49207 * C547 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C49207 * C49478) *
              C549 +
          ((C325 * C103 + C324 * C104 + C323 * C105 + C322 * C106 +
            (C113 * C285 - C114 * C274 - C113 * C286 + C49236 * C292) * C49219 *
                C107) *
               C49207 * C49478 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C49207 * C547 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            ((C113 * C1292 - C114 * C1286 - C113 * C1293 + C49236 * C1298) *
                 C49483 +
             C1330 * C49503 + C1329 * C49515) *
                C1103) *
               C49207 * C49478) *
              C549 +
          (((C1320 + C1319 + C1334) * C1103 + (C1314 + C1313 + C1333) * C1104 +
            (C319 * C49515 + C1134 * C49503 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C49207 * C547 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C49207 * C49478) *
              C549 +
          (((C8131 + C8130 + C8129) * C49512 +
            (C8128 + C8127 + C8126) * C49499 +
            (C319 * C7962 + C1134 * C7963 +
             (C113 * C1294 - C114 * C1287 - C113 * C1295 + C49236 * C1299) *
                 C49483) *
                C49472) *
               C49207 * C49478 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C49207 * C547 -
           ((C113 * C9239 - C114 * C9237 - C113 * C9240 + C49236 * C9243) *
                C9153 +
            C9258 * C9152 + C1805 * C9151 + C1330 * C9150 + C1329 * C9149) *
               C49123 * C49207 * C49478) *
              C549 +
          ((C321 * C9149 + C1132 * C9150 + C1332 * C9151 + C9259 * C9152 +
            (C113 * C9241 - C114 * C9238 - C113 * C9242 + C49236 * C9244) *
                C9153) *
               C49123 * C49207 * C49478 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C49207 * C547) *
              C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C49207 * C613 -
          (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
           (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
               C103) *
              C49207 * C614 +
          ((C113 * C622 - C114 * C617 - C113 * C623 + C49236 * C632) * C49219 *
               C103 +
           (C113 * C624 - C114 * C618 - C113 * C625 + C49236 * C633) * C49219 *
               C104 +
           (C113 * C626 - C114 * C619 - C113 * C627 + C49236 * C634) * C49219 *
               C105 +
           (C113 * C628 - C114 * C620 - C113 * C629 + C49236 * C635) * C49219 *
               C106 +
           (C113 * C630 - C114 * C621 - C113 * C631 + C49236 * C636) * C49219 *
               C107) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            C1329 * C49503 + C1330 * C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C49207 * C613 -
          ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
           (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
              C49207 * C614 +
          ((C1330 * C49515 + C1805 * C49503 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C1103 +
           (C1132 * C49515 + C1332 * C49503 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C1104 +
           (C1133 * C49515 + C1331 * C49503 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C49207 * C613 -
          ((C8126 + C8127 + C8128) * C49472 + (C8129 + C8130 + C8131) * C49499 +
           (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
              C49207 * C614 +
          ((C1330 * C7962 + C1805 * C7963 +
            (C113 * C1789 - C114 * C1786 - C113 * C1790 + C49236 * C1795) *
                C49483) *
               C49512 +
           (C1132 * C7962 + C1332 * C7963 +
            (C113 * C1791 - C114 * C1787 - C113 * C1792 + C49236 * C1796) *
                C49483) *
               C49499 +
           (C1133 * C7962 + C1331 * C7963 +
            (C113 * C1793 - C114 * C1788 - C113 * C1794 + C49236 * C1797) *
                C49483) *
               C49472) *
              C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C49207 * C613 -
          (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
           C1329 * C9149) *
              C49123 * C49207 * C614 +
          (C1330 * C9149 + C1805 * C9150 + C9258 * C9151 + C9504 * C9152 +
           (C113 * C9494 - C114 * C9493 - C113 * C9495 + C49236 * C9496) *
               C9153) *
              C49123 * C49207 * C615) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C407 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C547 +
          (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) * C49219 *
                C103 +
            (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) * C49219 *
                C104 +
            (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) * C49219 *
                C105 +
            (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) * C49219 *
                C106 +
            (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) * C49219 *
                C107) *
               C49480 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C407 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C547 +
          (((C1977 * C49515 + C1976 * C49503 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C1103 +
            (C1526 * C49515 + C1525 * C49503 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C1104 +
            (C1524 * C49515 + C1523 * C49503 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C407 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C547 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C407 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C547 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C407) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C821 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C49190 * C549 +
          ((C465 * C103 + C464 * C104 + C463 * C105 + C462 * C106 +
            (C113 * C425 - C114 * C414 - C113 * C426 + C49236 * C432) * C49219 *
                C107) *
               C49480 -
           (C183 * C107 + C182 * C106 + C181 * C105 + C180 * C104 +
            C179 * C103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C821 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C49190 * C549 +
          (((C1514 + C1530 + C1529) * C1103 + (C1505 + C1528 + C1527) * C1104 +
            (C459 * C49515 +
             (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) *
                 C49503 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1137 + C1123 + C1124) * C49472 + (C1136 + C1114 + C1113) * C1104 +
            (C1135 + C1108 + C1107) * C1103) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C49190 * C549 +
          (((C8283 + C8282 + C8281) * C49512 +
            (C8280 + C8279 + C8278) * C49499 +
            (C459 * C7962 + C4204 * C7963 +
             (C113 * C1490 - C114 * C1483 - C113 * C1491 + C49236 * C1495) *
                 C49483) *
                C49472) *
               C49480 -
           ((C7975 + C7976 + C7977) * C49472 +
            (C7974 + C7973 + C7972) * C49499 +
            (C7971 + C7970 + C7969) * C49512) *
               C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C49190 * C549 +
          ((C461 * C9149 + C1526 * C9150 + C1525 * C9151 +
            (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                C9152 +
            (C113 * C9345 - C114 * C9342 - C113 * C9346 + C49236 * C9348) *
                C9153) *
               C49123 * C49480 -
           (C9259 * C9153 + C1332 * C9152 + C1132 * C9151 + C321 * C9150 +
            C174 * C9149) *
               C49123 * C821) *
              C49190 * C49476)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
                C103 +
            C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
               C821 -
           (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
                C103) *
               C49480) *
              C265 +
          (((C113 * C724 - C114 * C719 - C113 * C725 + C49236 * C734) * C49219 *
                C103 +
            (C113 * C726 - C114 * C720 - C113 * C727 + C49236 * C735) * C49219 *
                C104 +
            (C113 * C728 - C114 * C721 - C113 * C729 + C49236 * C736) * C49219 *
                C105 +
            (C113 * C730 - C114 * C722 - C113 * C731 + C49236 * C737) * C49219 *
                C106 +
            (C113 * C732 - C114 * C723 - C113 * C733 + C49236 * C738) * C49219 *
                C107) *
               C49480 -
           (C322 * C107 + C323 * C106 + C324 * C105 + C325 * C104 +
            (C113 * C283 - C114 * C273 - C113 * C284 + C49236 * C291) * C49219 *
                C103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) *
                 C49515 +
             C1329 * C49503 + C1330 * C49483) *
                C1103 +
            (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
               C821 -
           ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
            (C1976 * C49483 + C1977 * C49503 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C49515) *
                C1103) *
               C49480) *
              C265 +
          (((C1977 * C49515 + C1976 * C49503 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C1103 +
            (C1526 * C49515 + C1525 * C49503 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C1104 +
            (C1524 * C49515 + C1523 * C49503 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C1333 + C1313 + C1314) * C49472 + (C1334 + C1319 + C1320) * C1104 +
            (C1805 * C49483 + C1330 * C49503 + C1329 * C49515) * C1103) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
             C1329 * C7963 + C1330 * C49483) *
                C49512 +
            (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
               C821 -
           ((C8278 + C8279 + C8280) * C49472 +
            (C8281 + C8282 + C8283) * C49499 +
            (C1976 * C49483 + C1977 * C7963 +
             (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                 C7962) *
                C49512) *
               C49480) *
              C265 +
          (((C1977 * C7962 + C1976 * C7963 +
             (C113 * C1954 - C114 * C1951 - C113 * C1955 + C49236 * C1960) *
                 C49483) *
                C49512 +
            (C1526 * C7962 + C1525 * C7963 +
             (C113 * C1956 - C114 * C1952 - C113 * C1957 + C49236 * C1961) *
                 C49483) *
                C49499 +
            (C1524 * C7962 + C1523 * C7963 +
             (C113 * C1958 - C114 * C1953 - C113 * C1959 + C49236 * C1962) *
                 C49483) *
                C49472) *
               C49480 -
           ((C8126 + C8127 + C8128) * C49472 +
            (C8129 + C8130 + C8131) * C49499 +
            (C1805 * C49483 + C1330 * C7963 + C1329 * C7962) * C49512) *
               C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
            C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
               C49123 * C821 -
           (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
               C49123 * C49480) *
              C265 +
          ((C1977 * C9149 + C1976 * C9150 + C9604 * C9151 + C9603 * C9152 +
            (C113 * C9587 - C114 * C9586 - C113 * C9588 + C49236 * C9589) *
                C9153) *
               C49123 * C49480 -
           (C9504 * C9153 + C9258 * C9152 + C1805 * C9151 + C1330 * C9150 +
            C1329 * C9149) *
               C49123 * C821) *
              C49478) *
         C49156) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49219 *
               C103 +
           C179 * C104 + C180 * C105 + C181 * C106 + C182 * C107) *
              C967 -
          (C462 * C107 + C463 * C106 + C464 * C105 + C465 * C104 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C49219 *
               C103) *
              C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49219 *
               C103 +
           (C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49219 *
               C104 +
           (C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49219 *
               C105 +
           (C113 * C981 - C114 * C973 - C113 * C982 + C49236 * C988) * C49219 *
               C106 +
           (C113 * C983 - C114 * C974 - C113 * C984 + C49236 * C989) * C49219 *
               C107) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C49515 +
            C1329 * C49503 + C1330 * C49483) *
               C1103 +
           (C1107 + C1108 + C1135) * C1104 + C1138 * C49472) *
              C967 -
          ((C1527 + C1528 + C1505) * C49472 + (C1529 + C1530 + C1514) * C1104 +
           (C1976 * C49483 + C1977 * C49503 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) *
                C49515) *
               C1103) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C49515 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C49503 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C1103 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C49515 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C49503 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C1104 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C49515 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C49503 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C7962 +
            C1329 * C7963 + C1330 * C49483) *
               C49512 +
           (C7969 + C7970 + C7971) * C49499 + C7979 * C49472) *
              C967 -
          ((C8278 + C8279 + C8280) * C49472 + (C8281 + C8282 + C8283) * C49499 +
           (C1976 * C49483 + C1977 * C7963 +
            (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C7962) *
               C49512) *
              C968 +
          (((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C7962 +
            (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
                C7963 +
            (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
                C49483) *
               C49512 +
           ((C113 * C977 - C114 * C971 - C113 * C978 + C49236 * C986) * C7962 +
            (C113 * C2389 - C114 * C2381 - C113 * C2390 + C49236 * C2399) *
                C7963 +
            (C113 * C2391 - C114 * C2382 - C113 * C2392 + C49236 * C2400) *
                C49483) *
               C49499 +
           ((C113 * C979 - C114 * C972 - C113 * C980 + C49236 * C987) * C7962 +
            (C113 * C2393 - C114 * C2383 - C113 * C2394 + C49236 * C2401) *
                C7963 +
            (C113 * C2395 - C114 * C2384 - C113 * C2396 + C49236 * C2402) *
                C49483) *
               C49472) *
              C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49236 * C136) * C9149 +
           C1329 * C9150 + C1330 * C9151 + C1805 * C9152 + C9258 * C9153) *
              C49123 * C967 -
          (C9603 * C9153 + C9604 * C9152 + C1976 * C9151 + C1977 * C9150 +
           (C113 * C423 - C114 * C413 - C113 * C424 + C49236 * C431) * C9149) *
              C49123 * C968 +
          ((C113 * C975 - C114 * C970 - C113 * C976 + C49236 * C985) * C9149 +
           (C113 * C2385 - C114 * C2379 - C113 * C2386 + C49236 * C2397) *
               C9150 +
           (C113 * C2387 - C114 * C2380 - C113 * C2388 + C49236 * C2398) *
               C9151 +
           (C113 * C9832 - C114 * C9830 - C113 * C9833 + C49236 * C9836) *
               C9152 +
           (C113 * C9834 - C114 * C9831 - C113 * C9835 + C49236 * C9837) *
               C9153) *
              C49123 * C969) *
         C49190 * C49156) /
            (p * q * std::sqrt(p + q));
}
