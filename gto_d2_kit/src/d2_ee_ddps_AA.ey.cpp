/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddps_AA.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_2210_11(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C81963 = 0 * ae;
    const double C81962 = ae * be;
    const double C81961 = 0 * be;
    const double C81960 = 0 * be;
    const double C81959 = xA - xB;
    const double C81958 = ae + be;
    const double C81957 = 0 * be;
    const double C82064 = 0 * be;
    const double C82091 = yA - yB;
    const double C82094 = zA - zB;
    const double C82114 = 0 * be;
    const double C82140 = 0 * be;
    const double C82236 = 0 * ae;
    const double C82231 = 0 * be;
    const double C82230 = 0 * be;
    const double C82278 = 0 * be;
    const double C82386 = 0 * ae;
    const double C82381 = 0 * be;
    const double C82380 = 0 * be;
    const double C82428 = 0 * be;
    const double C82610 = p + q;
    const double C82609 = p * q;
    const double C82615 = xP - xQ;
    const double C82614 = bs[2];
    const double C82622 = std::pow(ae, 2);
    const double C82620 = bs[3];
    const double C82633 = bs[4];
    const double C82654 = bs[5];
    const double C82687 = bs[6];
    const double C82730 = yP - yQ;
    const double C82773 = zP - zQ;
    const double C102 = bs[0];
    const double C84219 = ce + de;
    const double C84218 = xC - xD;
    const double C84224 = yC - yD;
    const double C84231 = zC - zD;
    const double C84519 = ce * de;
    const double C81972 = 2 * C81962;
    const double C81969 = -2 * C81961;
    const double C81966 = -2 * C81960;
    const double C81971 = C81962 * C81959;
    const double C81970 = C81959 * C81961;
    const double C81967 = C81959 * C81960;
    const double C84184 = C81959 * be;
    const double C84183 = C81959 * ae;
    const double C84182 = std::pow(C81959, 2);
    const double C81973 = C81963 / C81958;
    const double C81968 = C81961 / C81958;
    const double C81965 = 2 * C81958;
    const double C81964 = std::pow(C81958, 2);
    const double C82066 = C82064 / C81958;
    const double C82115 = C81962 * C82091;
    const double C84242 = std::pow(C82091, 2);
    const double C84296 = C82091 * be;
    const double C84294 = C82091 * ae;
    const double C82141 = C81962 * C82094;
    const double C84253 = std::pow(C82094, 2);
    const double C84336 = C82094 * be;
    const double C84334 = C82094 * ae;
    const double C82233 = C82091 * C82114;
    const double C82232 = C82114 / C81958;
    const double C82292 = -2 * C82114;
    const double C82383 = C82094 * C82140;
    const double C82382 = C82140 / C81958;
    const double C82442 = -2 * C82140;
    const double C82243 = C82236 / C81958;
    const double C82238 = C82091 * C82231;
    const double C82291 = -2 * C82231;
    const double C82279 = C82278 / C81958;
    const double C82393 = C82386 / C81958;
    const double C82388 = C82094 * C82381;
    const double C82441 = -2 * C82381;
    const double C82429 = C82428 / C81958;
    const double C82611 = 2 * C82609;
    const double C82623 = C82615 * ae;
    const double C82619 = std::pow(C82615, 2);
    const double C82733 = C82730 * ae;
    const double C82732 = C82615 * C82730;
    const double C82817 = C82730 * C82615;
    const double C82838 = std::pow(C82730, 2);
    const double C82776 = C82773 * ae;
    const double C82775 = C82615 * C82773;
    const double C82859 = C82730 * C82773;
    const double C82875 = C82773 * C82615;
    const double C82896 = C82773 * C82730;
    const double C82912 = std::pow(C82773, 2);
    const double C84522 = 2 * C84219;
    const double C84521 = std::pow(C84218, 2);
    const double C84520 = std::pow(C84224, 2);
    const double C84518 = std::pow(C84231, 2);
    const double C81978 = ae * C81969;
    const double C81975 = ae * C81966;
    const double C81979 = C81970 / C81958;
    const double C81976 = C81967 / C81958;
    const double C84507 = std::pow(C84183, 2);
    const double C84185 = C84182 * C81962;
    const double C84196 = std::pow(C81965, -1);
    const double C84514 = std::pow(C81965, -2);
    const double C81977 = 2 * C81964;
    const double C81974 = C81964 * C81965;
    const double C82062 = 4 * C81964;
    const double C84243 = C84242 * C81962;
    const double C84523 = std::pow(C84294, 2);
    const double C84254 = C84253 * C81962;
    const double C84525 = std::pow(C84334, 2);
    const double C82241 = C82233 / C81958;
    const double C82301 = ae * C82292;
    const double C82391 = C82383 / C81958;
    const double C82451 = ae * C82442;
    const double C82244 = C82238 / C81958;
    const double C82300 = ae * C82291;
    const double C82394 = C82388 / C81958;
    const double C82450 = ae * C82441;
    const double C82613 = C82611 / C82610;
    const double C114 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C82611 / C82610, 2) -
          (bs[1] * C82611) / C82610) *
         std::pow(ae, 2)) /
        C81964;
    const double C103 = -(C82615 * bs[1] * C82611) / C82610;
    const double C723 = -(C82730 * bs[1] * C82611) / C82610;
    const double C1183 = -(C82773 * bs[1] * C82611) / C82610;
    const double C82625 = C82620 * C82623;
    const double C82636 = C82633 * C82623;
    const double C82659 = C82654 * C82623;
    const double C82695 = C82687 * C82623;
    const double C108 = (-(bs[1] * C82623 * C82611) / C82610) / C81958;
    const double C82635 = C82619 * C82633;
    const double C82658 = C82619 * C82654;
    const double C82694 = C82619 * C82687;
    const double C82735 = C82620 * C82733;
    const double C82739 = C82633 * C82733;
    const double C82746 = C82654 * C82733;
    const double C82757 = C82687 * C82733;
    const double C173 = (-(bs[1] * C82733 * C82611) / C82610) / C81958;
    const double C82734 = C82732 * C82622;
    const double C82818 = C82817 * C82622;
    const double C82840 = C82838 * C82633;
    const double C82845 = C82838 * C82654;
    const double C82850 = C82838 * C82687;
    const double C82778 = C82620 * C82776;
    const double C82782 = C82633 * C82776;
    const double C82789 = C82654 * C82776;
    const double C82800 = C82687 * C82776;
    const double C252 = (-(bs[1] * C82776 * C82611) / C82610) / C81958;
    const double C82777 = C82775 * C82622;
    const double C82860 = C82859 * C82622;
    const double C82876 = C82875 * C82622;
    const double C82897 = C82896 * C82622;
    const double C82914 = C82912 * C82633;
    const double C82919 = C82912 * C82654;
    const double C82924 = C82912 * C82687;
    const double C84555 = std::pow(C84522, -1);
    const double C84554 = C84521 * C84519;
    const double C84553 = C84520 * C84519;
    const double C84552 = C84518 * C84519;
    const double C81984 = C81959 * C81978;
    const double C81985 = 0 - C81979;
    const double C81981 = 0 - C81976;
    const double C84186 = C84185 / C81958;
    const double C81990 = C81961 / C81977;
    const double C81986 = C81960 / C81977;
    const double C81982 = C81957 / C81977;
    const double C82235 = C82114 / C81977;
    const double C82240 = C82231 / C81977;
    const double C82239 = C82230 / C81977;
    const double C82385 = C82140 / C81977;
    const double C82390 = C82381 / C81977;
    const double C82389 = C82380 / C81977;
    const double C81987 = C81978 / C81974;
    const double C81983 = C81975 / C81974;
    const double C84517 = 4 * C81974;
    const double C82065 = C81958 * C82062;
    const double C84244 = C84243 / C81958;
    const double C84255 = C84254 / C81958;
    const double C82245 = 0 - C82241;
    const double C82306 = C82301 / C81974;
    const double C82305 = C82091 * C82301;
    const double C82395 = 0 - C82391;
    const double C82456 = C82451 / C81974;
    const double C82455 = C82094 * C82451;
    const double C82248 = 0 - C82244;
    const double C82304 = C82300 / C81974;
    const double C82398 = 0 - C82394;
    const double C82454 = C82450 / C81974;
    const double C82616 = std::pow(C82613, 2);
    const double C82621 = -C82613;
    const double C82634 = std::pow(C82613, 4);
    const double C82688 = std::pow(C82613, 6);
    const double C82738 = C82633 * C82734;
    const double C82745 = C82654 * C82734;
    const double C82756 = C82687 * C82734;
    const double C82820 = C82633 * C82818;
    const double C82823 = C82654 * C82818;
    const double C82829 = C82687 * C82818;
    const double C82781 = C82633 * C82777;
    const double C82788 = C82654 * C82777;
    const double C82799 = C82687 * C82777;
    const double C82862 = C82633 * C82860;
    const double C82865 = C82654 * C82860;
    const double C82868 = C82687 * C82860;
    const double C82878 = C82633 * C82876;
    const double C82881 = C82654 * C82876;
    const double C82887 = C82687 * C82876;
    const double C82899 = C82633 * C82897;
    const double C82902 = C82654 * C82897;
    const double C82905 = C82687 * C82897;
    const double C84579 = C84554 / C84219;
    const double C84578 = C84553 / C84219;
    const double C84577 = C84552 / C84219;
    const double C81993 = C81984 / C81964;
    const double C81994 = C81985 * ae;
    const double C81992 = C81981 * ae;
    const double C84187 = -C84186;
    const double C84245 = -C84244;
    const double C84256 = -C84255;
    const double C82249 = C82245 * ae;
    const double C82309 = C82305 / C81964;
    const double C82399 = C82395 * ae;
    const double C82459 = C82455 / C81964;
    const double C82253 = C82248 * ae;
    const double C82403 = C82398 * ae;
    const double C82618 = C82614 * C82616;
    const double C115 = (2 * ae * C82616 * C82614 * C82615 * ae +
                         C82615 *
                             (C82614 * C82616 + std::pow(C82615, 2) * bs[3] *
                                                    std::pow(-C82613, 3)) *
                             std::pow(ae, 2)) /
                        C81964;
    const double C179 =
        (C82616 * C82614 * C82615 * (yP - yQ) * C82622) / C81964;
    const double C258 =
        (C82616 * C82614 * C82615 * (zP - zQ) * C82622) / C81964;
    const double C330 = (C82616 * C82614 * C82730 * C82615 * C82622) / C81964;
    const double C379 =
        ((std::pow(C82730, 2) * C82614 * C82616 - (bs[1] * C82611) / C82610) *
         C82622) /
        C81964;
    const double C453 = (C82616 * C82614 * C82730 * C82773 * C82622) / C81964;
    const double C521 = (C82616 * C82614 * C82773 * C82615 * C82622) / C81964;
    const double C569 = (C82616 * C82614 * C82773 * C82730 * C82622) / C81964;
    const double C638 =
        ((std::pow(C82773, 2) * C82614 * C82616 - (bs[1] * C82611) / C82610) *
         C82622) /
        C81964;
    const double C109 = (C82615 * C82616 * C82614 * C82623) / C81958 -
                        (ae * bs[1] * C82611) / (C82610 * C81958);
    const double C174 = (C82615 * C82616 * C82614 * C82733) / C81958;
    const double C253 = (C82615 * C82616 * C82614 * C82776) / C81958;
    const double C728 = (C82730 * C82616 * C82614 * C82623) / C81958;
    const double C785 = (C82730 * C82616 * C82614 * C82733) / C81958 -
                        (ae * bs[1] * C82611) / (C82610 * C81958);
    const double C837 = (C82730 * C82616 * C82614 * C82776) / C81958;
    const double C1188 = (C82773 * C82616 * C82614 * C82623) / C81958;
    const double C1245 = (C82773 * C82616 * C82614 * C82733) / C81958;
    const double C1297 = (C82773 * C82616 * C82614 * C82776) / C81958 -
                         (ae * bs[1] * C82611) / (C82610 * C81958);
    const double C82624 = std::pow(C82621, 3);
    const double C82655 = std::pow(C82621, 5);
    const double C82640 = C82634 * C82636;
    const double C82639 = C82635 * C82634;
    const double C82653 = C82633 * C82634;
    const double C82741 = C82634 * C82739;
    const double C82784 = C82634 * C82782;
    const double C82841 = C82840 * C82634;
    const double C82915 = C82914 * C82634;
    const double C82700 = C82688 * C82695;
    const double C82699 = C82694 * C82688;
    const double C82761 = C82688 * C82757;
    const double C82804 = C82688 * C82800;
    const double C82851 = C82850 * C82688;
    const double C82925 = C82924 * C82688;
    const double C82740 = C82634 * C82738;
    const double C82759 = C82688 * C82756;
    const double C82821 = C82634 * C82820;
    const double C82830 = C82688 * C82829;
    const double C82783 = C82634 * C82781;
    const double C82802 = C82688 * C82799;
    const double C82863 = C82634 * C82862;
    const double C82869 = C82688 * C82868;
    const double C82879 = C82634 * C82878;
    const double C82888 = C82688 * C82887;
    const double C82900 = C82634 * C82899;
    const double C82906 = C82688 * C82905;
    const double C84595 = -C84579;
    const double C84594 = -C84578;
    const double C84593 = -C84577;
    const double C81999 = C81994 / C81958;
    const double C81998 = C81992 / C81958;
    const double C84188 = std::exp(C84187);
    const double C84246 = std::exp(C84245);
    const double C84257 = std::exp(C84256);
    const double C82254 = C82249 / C81958;
    const double C82404 = C82399 / C81958;
    const double C82257 = C82253 / C81958;
    const double C82407 = C82403 / C81958;
    const double C82626 = C82618 * ae;
    const double C104 = C82618 * C82619 - (bs[1] * C82611) / C82610;
    const double C722 = C82730 * C82615 * C82618;
    const double C1182 = C82773 * C82615 * C82618;
    const double C1681 = C82618 * C82838 - (bs[1] * C82611) / C82610;
    const double C3446 = C82773 * C82730 * C82618;
    const double C4212 = C82618 * C82912 - (bs[1] * C82611) / C82610;
    const double C82627 = C82624 * C82625;
    const double C82632 = C82620 * C82624;
    const double C82736 = C82624 * C82735;
    const double C82779 = C82624 * C82778;
    const double C180 = (ae * C82616 * C82614 * C82730 * ae +
                         C82615 * C82624 * C82620 * C82615 * C82730 * C82622) /
                        C81964;
    const double C259 = (ae * C82616 * C82614 * C82773 * ae +
                         C82615 * C82624 * C82620 * C82615 * C82773 * C82622) /
                        C81964;
    const double C331 = (ae * C82616 * C82614 * C82733 +
                         C82615 * C82624 * C82620 * C82730 * C82615 * C82622) /
                        C81964;
    const double C380 =
        (C82615 * (C82618 + std::pow(C82730, 2) * C82620 * C82624) * C82622) /
        C81964;
    const double C454 =
        (C82615 * C82624 * C82620 * C82730 * C82773 * C82622) / C81964;
    const double C455 =
        (C82624 * C82620 * C82860 + C82634 * C82633 * C82860 * C82619) / C81964;
    const double C522 = (ae * C82616 * C82614 * C82776 +
                         C82615 * C82624 * C82620 * C82773 * C82615 * C82622) /
                        C81964;
    const double C570 =
        (C82615 * C82624 * C82620 * C82773 * C82730 * C82622) / C81964;
    const double C571 =
        (C82624 * C82620 * C82897 + C82634 * C82633 * C82897 * C82619) / C81964;
    const double C639 =
        (C82615 * (C82618 + std::pow(C82773, 2) * C82620 * C82624) * C82622) /
        C81964;
    const double C733 =
        (C82730 * (C82618 + C82619 * C82620 * C82624) * C82622) / C81964;
    const double C790 =
        (ae * C82616 * C82614 * C82623 + C82730 * C82624 * C82620 * C82734) /
        C81964;
    const double C842 = (C82730 * C82624 * C82620 * C82777) / C81964;
    const double C889 =
        (ae * C82616 * C82614 * C82623 + C82730 * C82624 * C82620 * C82818) /
        C81964;
    const double C936 =
        (2 * ae * C82616 * C82614 * C82733 +
         C82730 * (C82618 + C82838 * C82620 * C82624) * C82622) /
        C81964;
    const double C988 =
        (ae * C82616 * C82614 * C82776 + C82730 * C82624 * C82620 * C82860) /
        C81964;
    const double C1035 = (C82730 * C82624 * C82620 * C82876) / C81964;
    const double C1082 =
        (ae * C82616 * C82614 * C82776 + C82730 * C82624 * C82620 * C82897) /
        C81964;
    const double C1129 =
        (C82730 * (C82618 + C82912 * C82620 * C82624) * C82622) / C81964;
    const double C1193 =
        (C82773 * (C82618 + C82619 * C82620 * C82624) * C82622) / C81964;
    const double C1250 = (C82773 * C82624 * C82620 * C82734) / C81964;
    const double C1302 =
        (ae * C82616 * C82614 * C82623 + C82773 * C82624 * C82620 * C82777) /
        C81964;
    const double C1349 = (C82773 * C82624 * C82620 * C82818) / C81964;
    const double C1396 =
        (C82773 * (C82618 + C82838 * C82620 * C82624) * C82622) / C81964;
    const double C1448 =
        (ae * C82616 * C82614 * C82733 + C82773 * C82624 * C82620 * C82860) /
        C81964;
    const double C1495 =
        (ae * C82616 * C82614 * C82623 + C82773 * C82624 * C82620 * C82876) /
        C81964;
    const double C1542 =
        (ae * C82616 * C82614 * C82733 + C82773 * C82624 * C82620 * C82897) /
        C81964;
    const double C1589 =
        (2 * ae * C82616 * C82614 * C82776 +
         C82773 * (C82618 + C82912 * C82620 * C82624) * C82622) /
        C81964;
    const double C82664 = C82655 * C82659;
    const double C82663 = C82658 * C82655;
    const double C82686 = C82654 * C82655;
    const double C82748 = C82655 * C82746;
    const double C82747 = C82655 * C82745;
    const double C82791 = C82655 * C82789;
    const double C82790 = C82655 * C82788;
    const double C82824 = C82655 * C82823;
    const double C82846 = C82845 * C82655;
    const double C82866 = C82655 * C82865;
    const double C82882 = C82655 * C82881;
    const double C82903 = C82655 * C82902;
    const double C82920 = C82919 * C82655;
    const double C82643 = C82615 * C82640;
    const double C82652 = ae * C82640;
    const double C83314 = C82730 * C82640;
    const double C83751 = C82773 * C82640;
    const double C82662 = C82653 * C82619;
    const double C82661 = C82615 * C82653;
    const double C82660 = C82653 * ae;
    const double C83441 = C82653 * C82838;
    const double C83440 = C82730 * C82653;
    const double C83789 = C82653 * C82912;
    const double C83788 = C82773 * C82653;
    const double C82744 = ae * C82741;
    const double C82743 = C82615 * C82741;
    const double C83155 = C82730 * C82741;
    const double C83764 = C82773 * C82741;
    const double C82787 = ae * C82784;
    const double C82786 = C82615 * C82784;
    const double C83341 = C82730 * C82784;
    const double C83394 = C82773 * C82784;
    const double C82704 = C82615 * C82700;
    const double C83508 = C82700 * C82838;
    const double C83827 = C82730 * C82700;
    const double C83877 = C82700 * C82912;
    const double C82764 = C82761 * C82619;
    const double C83460 = C82615 * C82761;
    const double C83530 = C82730 * C82761;
    const double C83836 = C82761 * C82912;
    const double C82807 = C82804 * C82619;
    const double C83486 = C82615 * C82804;
    const double C83561 = C82804 * C82838;
    const double C83850 = C82730 * C82804;
    const double C83908 = C82773 * C82804;
    const double C4311 = (C82624 * C82620 * C82734 + C82740 * C82912) / C81964;
    const double C82763 = C82615 * C82759;
    const double C83506 = C82730 * C82759;
    const double C83871 = C82759 * C82912;
    const double C4534 = (C82624 * C82620 * C82818 + C82821 * C82912) / C81964;
    const double C82831 = C82615 * C82830;
    const double C83520 = C82730 * C82830;
    const double C83590 = C82773 * C82830;
    const double C83665 = C82830 * C82912;
    const double C1910 = (C82624 * C82620 * C82777 + C82783 * C82838) / C81964;
    const double C82806 = C82615 * C82802;
    const double C83516 = C82802 * C82838;
    const double C83826 = C82730 * C82802;
    const double C83875 = C82773 * C82802;
    const double C456 =
        (2 * C82615 * C82863 +
         C82615 * (C82863 + C82655 * C82654 * C82860 * C82619)) /
        C81964;
    const double C82870 = C82869 * C82619;
    const double C83485 = C82615 * C82869;
    const double C83560 = C82730 * C82869;
    const double C83616 = C82773 * C82869;
    const double C2315 = (C82624 * C82620 * C82876 + C82879 * C82838) / C81964;
    const double C82889 = C82615 * C82888;
    const double C83572 = C82888 * C82838;
    const double C83840 = C82730 * C82888;
    const double C83892 = C82773 * C82888;
    const double C572 =
        (2 * C82615 * C82900 +
         C82615 * (C82900 + C82655 * C82654 * C82897 * C82619)) /
        C81964;
    const double C82907 = C82906 * C82619;
    const double C83497 = C82615 * C82906;
    const double C83576 = C82730 * C82906;
    const double C83898 = C82773 * C82906;
    const double C84605 = std::exp(C84595);
    const double C84604 = std::exp(C84594);
    const double C84603 = std::exp(C84593);
    const double C82004 = C81999 - C81986;
    const double C82003 = C81998 - C81982;
    const double C16485 = C84188 * C728;
    const double C19103 = C84188 * C1188;
    const double C81980 = C81971 * C84188;
    const double C84190 = C84188 * C84183;
    const double C84189 = C84188 / C81965;
    const double C84198 = C84196 * C84188;
    const double C84510 = C84188 * C84184;
    const double C84550 = C84514 * C84188;
    const double C84544 = C84188 * C84507;
    const double C187 = C84246 * C174;
    const double C5960 = C84246 * C1245;
    const double C82116 = C82115 * C84246;
    const double C172 = -(2 * C81962 * (yA - yB) * C84246) / C81958;
    const double C378 =
        -((C84246 - (C82091 * 2 * C81962 * C82091 * C84246) / C81958) *
          C81972) /
        C81958;
    const double C84295 = C84246 / C81965;
    const double C84297 = C84246 * C84294;
    const double C84304 = C84196 * C84246;
    const double C84530 = C84246 * C84296;
    const double C84558 = C84514 * C84246;
    const double C84556 = C84246 * C84523;
    const double C266 = C84257 * C253;
    const double C2801 = C84257 * C837;
    const double C82142 = C82141 * C84257;
    const double C251 = -(2 * C81962 * (zA - zB) * C84257) / C81958;
    const double C637 =
        -((C84257 - (C82094 * 2 * C81962 * C82094 * C84257) / C81958) *
          C81972) /
        C81958;
    const double C84335 = C84257 / C81965;
    const double C84337 = C84257 * C84334;
    const double C84344 = C84196 * C84257;
    const double C84537 = C84257 * C84336;
    const double C84561 = C84514 * C84257;
    const double C84559 = C84257 * C84525;
    const double C82258 = C82254 - C82240;
    const double C82408 = C82404 - C82390;
    const double C82261 = C82257 - C82239;
    const double C82411 = C82407 - C82389;
    const double C82628 = C82615 * C82627;
    const double C1792 = (C82624 * C82620 * C82734 + ae * C82730 * C82627 +
                          C82730 * (ae * C82627 + C82730 * C82740)) /
                         C81964;
    const double C2012 = (C82624 * C82620 * C82818 + ae * C82730 * C82627 +
                          C82730 * (ae * C82627 + C82730 * C82821)) /
                         C81964;
    const double C3553 = (C82773 * (ae * C82627 + C82730 * C82740)) / C81964;
    const double C3639 =
        (ae * C82730 * C82627 + C82773 * C82730 * C82783) / C81964;
    const double C3719 =
        (ae * C82773 * C82627 + C82730 * C82773 * C82821) / C81964;
    const double C3968 =
        (ae * C82730 * C82627 + C82773 * C82730 * C82879) / C81964;
    const double C4420 = (C82624 * C82620 * C82777 + ae * C82773 * C82627 +
                          C82773 * (ae * C82627 + C82773 * C82783)) /
                         C81964;
    const double C4810 = (C82624 * C82620 * C82876 + ae * C82773 * C82627 +
                          C82773 * (ae * C82627 + C82773 * C82879)) /
                         C81964;
    const double C1685 = (C82616 * C82614 * C82623 + C82627 * C82838) / C81958;
    const double C2602 =
        (2 * C82730 * C82627 + C82730 * (C82627 + C82640 * C82838)) / C81958;
    const double C3449 = (C82773 * (C82627 + C82640 * C82838)) / C81958;
    const double C3452 = (C82773 * C82730 * C82627) / C81958;
    const double C4216 = (C82616 * C82614 * C82623 + C82627 * C82912) / C81958;
    const double C5841 =
        (2 * C82773 * C82627 + C82773 * (C82627 + C82640 * C82912)) / C81958;
    const double C82638 = C82615 * C82632;
    const double C82637 = C82632 * ae;
    const double C82642 = C82632 + C82639;
    const double C82842 = C82632 + C82841;
    const double C82916 = C82632 + C82915;
    const double C83156 = C82730 * C82632;
    const double C83395 = C82773 * C82632;
    const double C381 =
        ((C82618 + C82838 * C82620 * C82624) * C82622 +
         (C82632 + C82838 * C82633 * C82634) * C82622 * C82619) /
        C81964;
    const double C640 =
        ((C82618 + C82912 * C82620 * C82624) * C82622 +
         (C82632 + C82912 * C82633 * C82634) * C82622 * C82619) /
        C81964;
    const double C105 =
        2 * C82615 * C82618 + C82615 * (C82618 + C82632 * C82619);
    const double C721 = C82730 * (C82618 + C82632 * C82619);
    const double C1181 = C82773 * (C82618 + C82632 * C82619);
    const double C2599 =
        2 * C82730 * C82618 + C82730 * (C82618 + C82632 * C82838);
    const double C3443 = C82773 * (C82618 + C82632 * C82838);
    const double C5838 =
        2 * C82773 * C82618 + C82773 * (C82618 + C82632 * C82912);
    const double C83086 = C82730 * C82736;
    const double C181 =
        (C82624 * C82620 * C82734 + ae * C82615 * C82736 +
         C82615 * (ae * C82736 + C82615 * C82634 * C82633 * C82734)) /
        C81964;
    const double C182 =
        (2 * (ae * C82736 + C82615 * C82740) + ae * (C82736 + C82741 * C82619) +
         C82615 *
             (C82740 + ae * C82615 * C82741 +
              C82615 * (ae * C82741 + C82615 * C82655 * C82654 * C82734))) /
        C81964;
    const double C332 =
        (C82624 * C82620 * C82818 + ae * C82615 * C82736 +
         C82615 * (ae * C82736 + C82615 * C82634 * C82633 * C82818)) /
        C81964;
    const double C1249 = (C82773 * (ae * C82736 + C82615 * C82740)) / C81964;
    const double C1348 = (C82773 * (ae * C82736 + C82615 * C82821)) / C81964;
    const double C1447 =
        (ae * C82615 * C82736 + C82773 * C82615 * C82863) / C81964;
    const double C1541 =
        (ae * C82615 * C82736 + C82773 * C82615 * C82900) / C81964;
    const double C4714 = (C82624 * C82620 * C82860 + ae * C82773 * C82736 +
                          C82773 * (ae * C82736 + C82773 * C82863)) /
                         C81964;
    const double C4888 = (C82624 * C82620 * C82897 + ae * C82773 * C82736 +
                          C82773 * (ae * C82736 + C82773 * C82900)) /
                         C81964;
    const double C175 = (C82616 * C82614 * C82733 + C82736 * C82619) / C81958;
    const double C176 =
        (2 * C82615 * C82736 + C82615 * (C82736 + C82741 * C82619)) / C81958;
    const double C783 = (C82730 * (C82736 + C82741 * C82619) +
                         (C82618 + C82632 * C82619) * ae) /
                        C81958;
    const double C784 =
        (C82730 * C82615 * C82736 + C82615 * C82618 * ae) / C81958;
    const double C1243 = (C82773 * (C82736 + C82741 * C82619)) / C81958;
    const double C1244 = (C82773 * C82615 * C82736) / C81958;
    const double C4307 = (C82616 * C82614 * C82733 + C82736 * C82912) / C81958;
    const double C5954 =
        (2 * C82773 * C82736 + C82773 * (C82736 + C82741 * C82912)) / C81958;
    const double C83287 = C82773 * C82779;
    const double C260 =
        (C82624 * C82620 * C82777 + ae * C82615 * C82779 +
         C82615 * (ae * C82779 + C82615 * C82634 * C82633 * C82777)) /
        C81964;
    const double C261 =
        (2 * (ae * C82779 + C82615 * C82783) + ae * (C82779 + C82784 * C82619) +
         C82615 *
             (C82783 + ae * C82615 * C82784 +
              C82615 * (ae * C82784 + C82615 * C82655 * C82654 * C82777))) /
        C81964;
    const double C523 =
        (C82624 * C82620 * C82876 + ae * C82615 * C82779 +
         C82615 * (ae * C82779 + C82615 * C82634 * C82633 * C82876)) /
        C81964;
    const double C841 = (C82730 * (ae * C82779 + C82615 * C82783)) / C81964;
    const double C987 =
        (ae * C82615 * C82779 + C82730 * C82615 * C82863) / C81964;
    const double C1034 = (C82730 * (ae * C82779 + C82615 * C82879)) / C81964;
    const double C1081 =
        (ae * C82615 * C82779 + C82730 * C82615 * C82900) / C81964;
    const double C2213 = (C82624 * C82620 * C82860 + ae * C82730 * C82779 +
                          C82730 * (ae * C82779 + C82730 * C82863)) /
                         C81964;
    const double C2393 = (C82624 * C82620 * C82897 + ae * C82730 * C82779 +
                          C82730 * (ae * C82779 + C82730 * C82900)) /
                         C81964;
    const double C3888 = (ae * (C82773 * C82779 + C82626) +
                          C82730 * (ae * C82736 + C82773 * C82863)) /
                         C81964;
    const double C254 = (C82616 * C82614 * C82776 + C82779 * C82619) / C81958;
    const double C255 =
        (2 * C82615 * C82779 + C82615 * (C82779 + C82784 * C82619)) / C81958;
    const double C835 = (C82730 * (C82779 + C82784 * C82619)) / C81958;
    const double C836 = (C82730 * C82615 * C82779) / C81958;
    const double C1295 = (C82773 * (C82779 + C82784 * C82619) +
                          (C82618 + C82632 * C82619) * ae) /
                         C81958;
    const double C1296 =
        (C82773 * C82615 * C82779 + C82615 * C82618 * ae) / C81958;
    const double C1906 = (C82616 * C82614 * C82776 + C82779 * C82838) / C81958;
    const double C2795 =
        (2 * C82730 * C82779 + C82730 * (C82779 + C82784 * C82838)) / C81958;
    const double C3630 = (C82773 * (C82779 + C82784 * C82838) +
                          (C82618 + C82632 * C82838) * ae) /
                         C81958;
    const double C3633 =
        (C82773 * C82730 * C82779 + C82730 * C82618 * ae) / C81958;
    const double C189 = C84246 * C180;
    const double C268 = C84257 * C259;
    const double C389 = C84246 * C380;
    const double C462 = C84257 * C454;
    const double C465 = C84257 * C455;
    const double C578 = C84246 * C570;
    const double C581 = C84246 * C571;
    const double C648 = C84257 * C639;
    const double C16309 = C84188 * C733;
    const double C2803 = C84257 * C842;
    const double C16487 = C84188 * C889;
    const double C3101 = C84257 * C988;
    const double C16650 = C84188 * C1035;
    const double C3356 = C84257 * C1129;
    const double C18822 = C84188 * C1193;
    const double C5962 = C84246 * C1250;
    const double C19105 = C84188 * C1349;
    const double C6254 = C84246 * C1396;
    const double C19388 = C84188 * C1495;
    const double C6522 = C84246 * C1542;
    const double C82668 = C82615 * C82664;
    const double C82685 = ae * C82664;
    const double C82932 = C82730 * C82664;
    const double C82996 = C82773 * C82664;
    const double C83421 = C82664 * C82838;
    const double C83753 = C82664 * C82912;
    const double C82667 = C82653 + C82663;
    const double C82698 = C82686 * C82619;
    const double C82697 = C82615 * C82686;
    const double C82696 = C82686 * ae;
    const double C82703 = C82686 + C82699;
    const double C82852 = C82686 + C82851;
    const double C82926 = C82686 + C82925;
    const double C83532 = C82686 * C82838;
    const double C83531 = C82730 * C82686;
    const double C83835 = C82686 * C82912;
    const double C83909 = C82773 * C82686;
    const double C82750 = C82748 * C82619;
    const double C82755 = ae * C82748;
    const double C82754 = C82615 * C82748;
    const double C83439 = C82730 * C82748;
    const double C83597 = C82773 * C82748;
    const double C83765 = C82748 * C82912;
    const double C82749 = C82615 * C82747;
    const double C83420 = C82730 * C82747;
    const double C5957 =
        (2 * C82773 * C82740 + C82773 * (C82740 + C82747 * C82912)) / C81964;
    const double C30960 =
        (3 * (C82740 + C82747 * C82912) +
         C82773 * (2 * C82773 * C82747 + C82773 * (C82747 + C82759 * C82912))) /
        C81964;
    const double C82793 = C82791 * C82619;
    const double C82798 = ae * C82791;
    const double C82797 = C82615 * C82791;
    const double C83481 = C82791 * C82838;
    const double C83559 = C82730 * C82791;
    const double C83615 = C82773 * C82791;
    const double C82792 = C82615 * C82790;
    const double C83692 = C82730 * C82790;
    const double C83752 = C82773 * C82790;
    const double C2798 =
        (2 * C82730 * C82783 + C82730 * (C82783 + C82790 * C82838)) / C81964;
    const double C3636 = (ae * (C82627 + C82640 * C82838) +
                          C82773 * (C82783 + C82790 * C82838)) /
                         C81964;
    const double C15979 =
        (3 * (C82783 + C82790 * C82838) +
         C82730 * (2 * C82730 * C82790 + C82730 * (C82790 + C82802 * C82838))) /
        C81964;
    const double C82825 = C82615 * C82824;
    const double C83430 = C82730 * C82824;
    const double C83594 = C82773 * C82824;
    const double C3716 =
        (C82773 * C82821 + ae * C82773 * C82730 * C82640 +
         C82730 * (ae * C82773 * C82640 + C82730 * C82773 * C82824)) /
        C81964;
    const double C5361 = (ae * (C82627 + C82640 * C82912) +
                          C82730 * (C82821 + C82824 * C82912)) /
                         C81964;
    const double C6138 =
        (2 * C82773 * C82821 + C82773 * (C82821 + C82824 * C82912)) / C81964;
    const double C82847 = C82653 + C82846;
    const double C83166 = C82615 * C82866;
    const double C83480 = C82730 * C82866;
    const double C83623 = C82773 * C82866;
    const double C457 =
        (3 * (C82863 + C82866 * C82619) +
         C82615 * (2 * C82615 * C82866 +
                   C82615 * (C82866 + C82688 * C82687 * C82860 * C82619))) /
        C81964;
    const double C986 = (ae * (C82779 + C82784 * C82619) +
                         C82730 * (C82863 + C82866 * C82619)) /
                        C81964;
    const double C1446 = (ae * (C82736 + C82741 * C82619) +
                          C82773 * (C82863 + C82866 * C82619)) /
                         C81964;
    const double C82883 = C82615 * C82882;
    const double C83705 = C82730 * C82882;
    const double C83772 = C82773 * C82882;
    const double C3181 =
        (2 * C82730 * C82879 + C82730 * (C82879 + C82882 * C82838)) / C81964;
    const double C3965 = (ae * (C82627 + C82640 * C82838) +
                          C82773 * (C82879 + C82882 * C82838)) /
                         C81964;
    const double C16170 =
        (3 * (C82879 + C82882 * C82838) +
         C82730 * (2 * C82730 * C82882 + C82730 * (C82882 + C82888 * C82838))) /
        C81964;
    const double C83173 = C82615 * C82903;
    const double C83494 = C82730 * C82903;
    const double C83778 = C82773 * C82903;
    const double C573 =
        (3 * (C82900 + C82903 * C82619) +
         C82615 * (2 * C82615 * C82903 +
                   C82615 * (C82903 + C82688 * C82687 * C82897 * C82619))) /
        C81964;
    const double C1080 = (ae * (C82779 + C82784 * C82619) +
                          C82730 * (C82900 + C82903 * C82619)) /
                         C81964;
    const double C1540 = (ae * (C82736 + C82741 * C82619) +
                          C82773 * (C82900 + C82903 * C82619)) /
                         C81964;
    const double C82921 = C82653 + C82920;
    const double C82657 = 2 * C82652;
    const double C2718 =
        (2 * (ae * C82627 + C82730 * C82740) + ae * (C82627 + C82640 * C82838) +
         C82730 * (C82740 + ae * C82730 * C82640 +
                   C82730 * (C82652 + C82730 * C82747))) /
        C81964;
    const double C2899 =
        (2 * (ae * C82627 + C82730 * C82821) + ae * (C82627 + C82640 * C82838) +
         C82730 * (C82821 + ae * C82730 * C82640 +
                   C82730 * (C82652 + C82730 * C82824))) /
        C81964;
    const double C3552 = (C82773 * (C82740 + ae * C82730 * C82640 +
                                    C82730 * (C82652 + C82730 * C82747))) /
                         C81964;
    const double C5204 =
        (ae * C82627 + C82730 * C82740 + (C82652 + C82730 * C82747) * C82912) /
        C81964;
    const double C6061 =
        (2 * (ae * C82627 + C82773 * C82783) + ae * (C82627 + C82640 * C82912) +
         C82773 * (C82783 + ae * C82773 * C82640 +
                   C82773 * (C82652 + C82773 * C82790))) /
        C81964;
    const double C6424 =
        (2 * (ae * C82627 + C82773 * C82879) + ae * (C82627 + C82640 * C82912) +
         C82773 * (C82879 + ae * C82773 * C82640 +
                   C82773 * (C82652 + C82773 * C82882))) /
        C81964;
    const double C5284 = (C82730 * C82783 + ae * C82773 * C83314 +
                          C82773 * (ae * C83314 + C82773 * C82730 * C82790)) /
                         C81964;
    const double C5598 = (C82730 * C82879 + ae * C82773 * C83314 +
                          C82773 * (ae * C83314 + C82773 * C82730 * C82882)) /
                         C81964;
    const double C5118 = (C82730 * C82627 + C83314 * C82912) / C81958;
    const double C82666 = C82632 + C82662;
    const double C82665 = C82661 * ae;
    const double C82691 = 2 * C82661;
    const double C83146 = C82730 * C82661;
    const double C83385 = C82773 * C82661;
    const double C83445 = C82632 + C83441;
    const double C83444 = C83440 * ae;
    const double C83533 = 2 * C83440;
    const double C83721 = C82773 * C83440;
    const double C83793 = C82632 + C83789;
    const double C83792 = C83788 * ae;
    const double C83911 = 2 * C83788;
    const double C83436 = 2 * C82744;
    const double C6347 =
        (2 * (ae * C82736 + C82773 * C82863) + ae * (C82736 + C82741 * C82912) +
         C82773 * (C82863 + ae * C82773 * C82741 +
                   C82773 * (C82744 + C82773 * C82866))) /
        C81964;
    const double C6519 =
        (2 * (ae * C82736 + C82773 * C82900) + ae * (C82736 + C82741 * C82912) +
         C82773 * (C82900 + ae * C82773 * C82741 +
                   C82773 * (C82744 + C82773 * C82903))) /
        C81964;
    const double C83090 = C82730 * C82743;
    const double C333 =
        (2 * (ae * C82736 + C82615 * C82821) + ae * (C82736 + C82741 * C82619) +
         C82615 * (C82821 + ae * C82743 +
                   C82615 * (C82744 + C82615 * C82655 * C82654 * C82818))) /
        C81964;
    const double C4308 = (C82615 * C82736 + C82743 * C82912) / C81958;
    const double C83784 = 2 * C82787;
    const double C3098 =
        (2 * (ae * C82779 + C82730 * C82863) + ae * (C82779 + C82784 * C82838) +
         C82730 * (C82863 + ae * C82730 * C82784 +
                   C82730 * (C82787 + C82730 * C82866))) /
        C81964;
    const double C3276 =
        (2 * (ae * C82779 + C82730 * C82900) + ae * (C82779 + C82784 * C82838) +
         C82730 * (C82900 + ae * C82730 * C82784 +
                   C82730 * (C82787 + C82730 * C82903))) /
        C81964;
    const double C83291 = C82773 * C82786;
    const double C524 =
        (2 * (ae * C82779 + C82615 * C82879) + ae * (C82779 + C82784 * C82619) +
         C82615 * (C82879 + ae * C82786 +
                   C82615 * (C82787 + C82615 * C82655 * C82654 * C82876))) /
        C81964;
    const double C2214 = (C82615 * C82863 + ae * C82730 * C82786 +
                          C82730 * (ae * C82786 + C82730 * C82615 * C82866)) /
                         C81964;
    const double C2394 = (C82615 * C82900 + ae * C82730 * C82786 +
                          C82730 * (ae * C82786 + C82730 * C82615 * C82903)) /
                         C81964;
    const double C1907 = (C82615 * C82779 + C82786 * C82838) / C81958;
    const double C83342 = C82773 * C83341;
    const double C83510 = C82664 + C83508;
    const double C83829 = C83827 * C82912;
    const double C83879 = C82664 + C83877;
    const double C82766 = C82748 + C82764;
    const double C83464 = C82730 * C83460;
    const double C83769 = C83460 * C82912;
    const double C83838 = C82748 + C83836;
    const double C82809 = C82791 + C82807;
    const double C83488 = C83486 * C82838;
    const double C83805 = C82773 * C83486;
    const double C83946 = C82730 * C83486;
    const double C83565 = C82791 + C83561;
    const double C83854 = C82773 * C83850;
    const double C5970 = C84246 * C4311;
    const double C83872 = C82747 + C83871;
    const double C19113 = C84188 * C4534;
    const double C83591 = C82730 * C83590;
    const double C83666 = C82824 + C83665;
    const double C2811 = C84257 * C1910;
    const double C83517 = C82790 + C83516;
    const double C83828 = C82773 * C83826;
    const double C468 = C84257 * C456;
    const double C82871 = C82866 + C82870;
    const double C83487 = C82730 * C83485;
    const double C83741 = C82773 * C83485;
    const double C16653 = C84188 * C2315;
    const double C83573 = C82882 + C83572;
    const double C83841 = C82773 * C83840;
    const double C584 = C84246 * C572;
    const double C82908 = C82903 + C82907;
    const double C83498 = C82730 * C83497;
    const double C83781 = C82773 * C83497;
    const double C90 = -(C84605 * C84218 * de) / C84219;
    const double C91 = C84555 * C84605;
    const double C716 = -(C84604 * C84224 * de) / C84219;
    const double C717 = C84555 * C84604;
    const double C1177 = -(C84603 * C84231 * de) / C84219;
    const double C1178 = C84555 * C84603;
    const double C82012 = C82004 / C81965;
    const double C82009 = C81959 * C82004;
    const double C82008 = 2 * C82004;
    const double C82007 = C82003 + C81968;
    const double C81991 = C81980 / C81964;
    const double C81989 = 2 * C81980;
    const double C81988 = -4 * C81980;
    const double C84191 = C84190 * C84184;
    const double C84197 = C84190 / C81977;
    const double C84511 = C84196 * C84190;
    const double C84509 = C84190 / C81958;
    const double C1669 = (C84188 * std::pow(C84184, 2)) / C81964 + C84189;
    const double C84199 = C84198 * C84184;
    const double C84527 = C84198 / C82062;
    const double C84515 = C84183 * C84198;
    const double C84513 = 2 * C84198;
    const double C85 = C84198 / C84517;
    const double C45932 = C84198 / C81965;
    const double C84546 = C84510 / C81958;
    const double C1670 = (-2 * C84196 * C84510) / C81958;
    const double C84572 = C84544 / C81964;
    const double C82124 = 2 * C82116;
    const double C82237 = C82116 / C81964;
    const double C82294 = -4 * C82116;
    const double C1787 =
        ((0 * ae) / C81958 - C82116 / C81964) / C81965 + (0 * ae) / C81958;
    const double C6775 = (0 * ae) / C81958 - C82116 / C81964;
    const double C190 = C172 * C104;
    const double C188 = C172 * C109;
    const double C186 = C172 * C103;
    const double C388 = C172 * C174;
    const double C386 = C172 * C173;
    const double C577 = C172 * C253;
    const double C942 = C172 * C785;
    const double C1402 = C172 * C1245;
    const double C4316 = C172 * C1182;
    const double C5967 = C172 * C4212;
    const double C5961 = C172 * C1188;
    const double C5959 = C172 * C1183;
    const double C6521 = C172 * C1297;
    const double C390 = C378 * C104;
    const double C387 = C378 * C103;
    const double C4617 = C378 * C1182;
    const double C6257 = C378 * C4212;
    const double C6253 = C378 * C1183;
    const double C13621 = (C84246 * std::pow(C84296, 2)) / C81964 + C84295;
    const double C84298 = C84297 * C84296;
    const double C84303 = C84297 / C81977;
    const double C84528 = C84297 / C81958;
    const double C84524 = C84196 * C84297;
    const double C1786 =
        (((C84246 - (C82091 * 2 * C82116) / C81958) * ae) / C81958 -
         C82114 / C81977) /
            C81965 +
        ((C82091 * ((0 * ae) / C81958 - C82116 / C81964) + C84304) * ae) /
            C81958;
    const double C84305 = C84304 * C84296;
    const double C84536 = C84304 / C82062;
    const double C84534 = C84294 * C84304;
    const double C84533 = 2 * C84304;
    const double C15865 = C84304 / C84517;
    const double C45935 = C84304 / C81965;
    const double C84563 = C84530 / C81958;
    const double C13622 = (-2 * C84196 * C84530) / C81958;
    const double C84580 = C84556 / C81964;
    const double C82150 = 2 * C82142;
    const double C82387 = C82142 / C81964;
    const double C82444 = -4 * C82142;
    const double C4415 =
        ((0 * ae) / C81958 - C82142 / C81964) / C81965 + (0 * ae) / C81958;
    const double C8871 = (0 * ae) / C81958 - C82142 / C81964;
    const double C269 = C251 * C104;
    const double C267 = C251 * C109;
    const double C265 = C251 * C103;
    const double C461 = C251 * C174;
    const double C647 = C251 * C253;
    const double C645 = C251 * C252;
    const double C1135 = C251 * C837;
    const double C1595 = C251 * C1297;
    const double C1915 = C251 * C722;
    const double C2808 = C251 * C1681;
    const double C2802 = C251 * C728;
    const double C2800 = C251 * C723;
    const double C3100 = C251 * C785;
    const double C649 = C637 * C104;
    const double C646 = C637 * C103;
    const double C2496 = C637 * C722;
    const double C3357 = C637 * C1681;
    const double C3355 = C637 * C723;
    const double C26458 = (C84257 * std::pow(C84336, 2)) / C81964 + C84335;
    const double C84338 = C84337 * C84336;
    const double C84343 = C84337 / C81977;
    const double C84529 = C84337 / C81958;
    const double C84526 = C84196 * C84337;
    const double C4414 =
        (((C84257 - (C82094 * 2 * C82142) / C81958) * ae) / C81958 -
         C82140 / C81977) /
            C81965 +
        ((C82094 * ((0 * ae) / C81958 - C82142 / C81964) + C84344) * ae) /
            C81958;
    const double C84345 = C84344 * C84336;
    const double C84543 = C84344 / C82062;
    const double C84541 = C84334 * C84344;
    const double C84540 = 2 * C84344;
    const double C30906 = C84344 / C84517;
    const double C63169 = C84344 / C81965;
    const double C84568 = C84537 / C81958;
    const double C26459 = (-2 * C84196 * C84537) / C81958;
    const double C84582 = C84559 / C81964;
    const double C82263 = C82258 / C81965;
    const double C82262 = C82091 * C82258;
    const double C82293 = 2 * C82258;
    const double C82413 = C82408 / C81965;
    const double C82412 = C82094 * C82408;
    const double C82443 = 2 * C82408;
    const double C82266 = C82261 + C82232;
    const double C82416 = C82411 + C82382;
    const double C82629 = C82628 + C82626;
    const double C16491 = C84188 * C2012;
    const double C12826 = C84304 * C3553;
    const double C45079 = C84304 * C3553;
    const double C11975 = C84344 * C3639;
    const double C56948 = C84344 * C3639;
    const double C18264 = C84188 * C3719;
    const double C18538 = C84188 * C3968;
    const double C19390 = C84188 * C4810;
    const double C2810 = C251 * C1685;
    const double C16489 = C84188 * C1685;
    const double C16427 = C251 * C2602;
    const double C16493 = C84188 * C2602;
    const double C18266 = C84188 * C3449;
    const double C18262 = C84188 * C3452;
    const double C5969 = C172 * C4216;
    const double C19111 = C84188 * C4216;
    const double C31800 = C172 * C5841;
    const double C31906 = C84188 * C5841;
    const double C82641 = C82638 * ae;
    const double C3632 =
        (C82773 * C82730 * C82786 + C82730 * C82638 * ae) / C81958;
    const double C1682 = C82615 * C82618 + C82638 * C82838;
    const double C2598 =
        2 * C82730 * C82638 + C82730 * (C82638 + C82661 * C82838);
    const double C3442 = C82773 * (C82638 + C82661 * C82838);
    const double C3445 = C82773 * C82730 * C82638;
    const double C4213 = C82615 * C82618 + C82638 * C82912;
    const double C5837 =
        2 * C82773 * C82638 + C82773 * (C82638 + C82661 * C82912);
    const double C82645 = C82643 + C82637;
    const double C83157 = C83155 + C82637;
    const double C83396 = C83394 + C82637;
    const double C5521 = (ae * (C82779 + C82773 * (C82773 * C82784 + C82637) +
                                C82773 * C82632 * ae) +
                          C82730 * (C82863 + ae * C82773 * C82741 +
                                    C82773 * (C82744 + C82773 * C82866))) /
                         C81964;
    const double C82644 = C82642 * C82622;
    const double C82843 = C82842 * C82622;
    const double C82917 = C82916 * C82622;
    const double C83158 = C83156 * ae;
    const double C5115 = C82730 * C82618 + C83156 * C82912;
    const double C18815 =
        2 * C82773 * C83156 + C82773 * (C83156 + C83440 * C82912);
    const double C83397 = C83395 * ae;
    const double C392 = C84246 * C381;
    const double C651 = C84257 * C640;
    const double C194 = C172 * C105;
    const double C273 = C251 * C105;
    const double C393 = C378 * C105;
    const double C652 = C637 * C105;
    const double C1919 = C251 * C721;
    const double C2502 = C637 * C721;
    const double C4320 = C172 * C1181;
    const double C4619 = C378 * C1181;
    const double C16425 = C251 * C2599;
    const double C16754 = C637 * C2599;
    const double C31798 = C172 * C5838;
    const double C31966 = C378 * C5838;
    const double C83087 = C83086 + C82626;
    const double C193 = C84246 * C181;
    const double C197 = C84246 * C182;
    const double C4319 = C84246 * C1249;
    const double C23961 = C84198 * C1348;
    const double C45299 = C84198 * C1348;
    const double C9115 = C84344 * C1447;
    const double C54118 = C84344 * C1447;
    const double C4897 = C84246 * C1541;
    const double C6524 = C84246 * C4888;
    const double C191 = C84246 * C175;
    const double C391 = C172 * C175;
    const double C464 = C251 * C175;
    const double C195 = C84246 * C176;
    const double C394 = C172 * C176;
    const double C467 = C251 * C176;
    const double C940 = C172 * C783;
    const double C2229 = C251 * C783;
    const double C6788 = C84304 * C783;
    const double C39043 = C84304 * C783;
    const double C941 = C172 * C784;
    const double C2221 = C251 * C784;
    const double C6780 = C84304 * C784;
    const double C39035 = C84304 * C784;
    const double C1400 = C172 * C1243;
    const double C4321 = C84246 * C1243;
    const double C1401 = C172 * C1244;
    const double C4317 = C84246 * C1244;
    const double C4621 = C172 * C4307;
    const double C5968 = C84246 * C4307;
    const double C6263 = C172 * C5954;
    const double C31799 = C84246 * C5954;
    const double C83288 = C83287 + C82626;
    const double C272 = C84257 * C260;
    const double C276 = C84257 * C261;
    const double C1918 = C84257 * C841;
    const double C2222 = C84257 * C987;
    const double C20844 = C84198 * C1034;
    const double C42149 = C84198 * C1034;
    const double C7275 = C84304 * C1081;
    const double C39521 = C84304 * C1081;
    const double C3103 = C84257 * C2213;
    const double C12301 = C84344 * C3888;
    const double C57265 = C84344 * C3888;
    const double C270 = C84257 * C254;
    const double C580 = C172 * C254;
    const double C650 = C251 * C254;
    const double C274 = C84257 * C255;
    const double C583 = C172 * C255;
    const double C653 = C251 * C255;
    const double C1133 = C251 * C835;
    const double C1920 = C84257 * C835;
    const double C1134 = C251 * C836;
    const double C1916 = C84257 * C836;
    const double C1593 = C251 * C1295;
    const double C4904 = C172 * C1295;
    const double C8884 = C84344 * C1295;
    const double C53892 = C84344 * C1295;
    const double C1594 = C251 * C1296;
    const double C4896 = C172 * C1296;
    const double C8876 = C84344 * C1296;
    const double C53884 = C84344 * C1296;
    const double C2494 = C251 * C1906;
    const double C2809 = C84257 * C1906;
    const double C3361 = C251 * C2795;
    const double C16426 = C84257 * C2795;
    const double C4134 = C251 * C3630;
    const double C22890 = C84344 * C3630;
    const double C56952 = C84344 * C3630;
    const double C4135 = C251 * C3633;
    const double C11971 = C84344 * C3633;
    const double C56944 = C84344 * C3633;
    const double C82671 = C82668 + C82660;
    const double C82693 = 2 * C82685;
    const double C83509 = C82685 + C83506;
    const double C83521 = C82685 + C83520;
    const double C83878 = C82685 + C83875;
    const double C83893 = C82685 + C83892;
    const double C82938 = ae * C82932;
    const double C83507 = 2 * C82932;
    const double C83825 = C82773 * C82932;
    const double C17499 =
        (C82821 + C82824 * C82912 + ae * (C83314 + C82932 * C82912) +
         C82730 * (ae * (C82640 + C82664 * C82912) +
                   C82730 * (C82824 + C82830 * C82912))) /
        C81964;
    const double C18817 =
        (2 * C82773 * C83314 + C82773 * (C83314 + C82932 * C82912)) / C81958;
    const double C83002 = ae * C82996;
    const double C83876 = 2 * C82996;
    const double C83423 = C82640 + C83421;
    const double C83755 = C82640 + C83753;
    const double C82670 = C82667 * C82622;
    const double C82702 = C82653 + C82698;
    const double C82701 = C82697 * ae;
    const double C83462 = C82697 * C82838;
    const double C83461 = C82730 * C82697;
    const double C83807 = C82697 * C82912;
    const double C83806 = C82773 * C82697;
    const double C82708 = C82704 + C82696;
    const double C83536 = C83530 + C82696;
    const double C83915 = C83908 + C82696;
    const double C82707 = C82703 * C82622;
    const double C82853 = C82852 * C82622;
    const double C82927 = C82926 * C82622;
    const double C83538 = C82653 + C83532;
    const double C83537 = C83531 * ae;
    const double C83852 = C83531 * C82912;
    const double C83851 = C82773 * C83531;
    const double C83837 = C82653 + C83835;
    const double C83916 = C83909 * ae;
    const double C82752 = C82741 + C82750;
    const double C82765 = C82755 + C82763;
    const double C82832 = C82755 + C82831;
    const double C83526 = 2 * C82755;
    const double C83618 = C82755 + C83616;
    const double C83899 = C82755 + C83898;
    const double C82760 = 2 * C82754;
    const double C82758 = ae * C82754;
    const double C83145 = C82730 * C82754;
    const double C83768 = C82773 * C82754;
    const double C5953 =
        (2 * C82773 * C82743 + C82773 * (C82743 + C82754 * C82912)) / C81958;
    const double C83443 = C83439 + C82660;
    const double C83603 = ae * C83597;
    const double C83887 = 2 * C83597;
    const double C83766 = C82741 + C83765;
    const double C82751 = C82744 + C82749;
    const double C83422 = C82652 + C83420;
    const double C31801 = C84246 * C5957;
    const double C31805 = C84246 * C30960;
    const double C82795 = C82784 + C82793;
    const double C82808 = C82798 + C82806;
    const double C82890 = C82798 + C82889;
    const double C83563 = C82798 + C83560;
    const double C83577 = C82798 + C83576;
    const double C83904 = 2 * C82798;
    const double C82803 = 2 * C82797;
    const double C82801 = ae * C82797;
    const double C83336 = C82730 * C82797;
    const double C83384 = C82773 * C82797;
    const double C2794 =
        (2 * C82730 * C82786 + C82730 * (C82786 + C82797 * C82838)) / C81958;
    const double C3629 = (C82773 * (C82786 + C82797 * C82838) +
                          (C82638 + C82661 * C82838) * ae) /
                         C81958;
    const double C83483 = C82784 + C83481;
    const double C83564 = 2 * C83559;
    const double C83562 = ae * C83559;
    const double C83720 = C82773 * C83559;
    const double C83617 = C83615 + C82660;
    const double C82794 = C82787 + C82792;
    const double C83754 = C82652 + C83752;
    const double C16428 = C84257 * C2798;
    const double C22894 = C84344 * C3636;
    const double C56956 = C84344 * C3636;
    const double C16432 = C84257 * C15979;
    const double C82826 = C82744 + C82825;
    const double C83431 = C82652 + C83430;
    const double C18268 = C84188 * C3716;
    const double C18272 = C84188 * C5361;
    const double C31908 = C84188 * C6138;
    const double C82848 = C82847 * C82622;
    const double C4715 = (C82615 * C82863 + ae * C82773 * C82743 +
                          C82773 * (ae * C82743 + C82773 * C83166)) /
                         C81964;
    const double C83482 = C82787 + C83480;
    const double C83624 = C82744 + C83623;
    const double C471 = C84257 * C457;
    const double C2230 = C84257 * C986;
    const double C9119 = C84344 * C1446;
    const double C54122 = C84344 * C1446;
    const double C82884 = C82787 + C82883;
    const double C83773 = C82652 + C83772;
    const double C16656 = C84188 * C3181;
    const double C18546 = C84188 * C3965;
    const double C16659 = C84188 * C16170;
    const double C4889 = (C82615 * C82900 + ae * C82773 * C82743 +
                          C82773 * (ae * C82743 + C82773 * C83173)) /
                         C81964;
    const double C83495 = C82787 + C83494;
    const double C83779 = C82744 + C83778;
    const double C587 = C84246 * C573;
    const double C7279 = C84304 * C1080;
    const double C39525 = C84304 * C1080;
    const double C4905 = C84246 * C1540;
    const double C82922 = C82921 * C82622;
    const double C16495 = C84188 * C2899;
    const double C18923 = C84558 * C3552;
    const double C30249 = C84558 * C3552;
    const double C34260 = C84304 * C5204;
    const double C45087 = C84304 * C5204;
    const double C32066 = C84188 * C6424;
    const double C18161 = C84561 * C5284;
    const double C29552 = C84561 * C5284;
    const double C18541 = C84188 * C5598;
    const double C18270 = C84188 * C5118;
    const double C82669 = C82666 * ae;
    const double C106 = 3 * (C82618 + C82632 * C82619) +
                        C82615 * (2 * C82638 + C82615 * C82666);
    const double C720 = C82730 * (2 * C82638 + C82615 * C82666);
    const double C1180 = C82773 * (2 * C82638 + C82615 * C82666);
    const double C1683 = C82618 + C82632 * C82619 + C82666 * C82838;
    const double C3444 = C82773 * C82730 * C82666;
    const double C4214 = C82618 + C82632 * C82619 + C82666 * C82912;
    const double C83148 = C83146 * ae;
    const double C5114 = C82730 * C82638 + C83146 * C82912;
    const double C83387 = C83385 * ae;
    const double C83447 = C83445 * ae;
    const double C15868 = 3 * (C82618 + C82632 * C82838) +
                          C82730 * (2 * C83156 + C82730 * C83445);
    const double C16807 = C82773 * (2 * C83156 + C82730 * C83445);
    const double C17254 = C82618 + C82632 * C82838 + C83445 * C82912;
    const double C83723 = C83721 * ae;
    const double C83795 = C83793 * ae;
    const double C30907 = 3 * (C82618 + C82632 * C82912) +
                          C82773 * (2 * C83395 + C82773 * C83793);
    const double C32115 = C84246 * C6519;
    const double C4325 = C84246 * C4308;
    const double C4623 = C172 * C4308;
    const double C16600 = C84257 * C3098;
    const double C2225 = C84257 * C2214;
    const double C2403 = C84558 * C2394;
    const double C14268 = C84558 * C2394;
    const double C1924 = C84257 * C1907;
    const double C2499 = C251 * C1907;
    const double C83512 = C82730 * C83510;
    const double C83831 = C82932 + C83829;
    const double C83881 = C82773 * C83879;
    const double C82768 = C82615 * C82766;
    const double C83134 = C82730 * C82766;
    const double C83770 = C82754 + C83769;
    const double C83888 = C82773 * C83838;
    const double C82811 = C82615 * C82809;
    const double C83331 = C82730 * C82809;
    const double C83374 = C82773 * C82809;
    const double C83490 = C82797 + C83488;
    const double C83948 = C82773 * C83946;
    const double C83568 = C82730 * C83565;
    const double C83709 = C82773 * C83565;
    const double C31792 =
        (4 * (2 * C82773 * C82747 + C82773 * C83872) +
         C82773 * (3 * C83872 +
                   C82773 * (2 * C82773 * C82759 +
                             C82773 * (C82759 + std::pow(C82621, 7) * bs[7] *
                                                    C82734 * C82912)))) /
        C81964;
    const double C19099 =
        (2 * C83594 + C82773 * C83666 +
         ae * (2 * C82773 * C82932 +
               C82773 * (C82932 + C82730 * C82700 * C82912)) +
         C82730 * (ae * (2 * C82996 + C82773 * (C82664 + C82700 * C82912)) +
                   C82730 * (2 * C83590 +
                             C82773 * (C82830 + std::pow(C82621, 7) * bs[7] *
                                                    C82818 * C82912)))) /
        C81964;
    const double C19100 =
        (ae * (2 * C82773 * C82640 + C82773 * (C82640 + C82664 * C82912)) +
         C82730 * (2 * C83594 + C82773 * C83666)) /
        C81964;
    const double C31055 = (3 * (C82821 + C82824 * C82912) +
                           C82773 * (2 * C83594 + C82773 * C83666)) /
                          C81964;
    const double C31899 =
        (4 * (2 * C83594 + C82773 * C83666) +
         C82773 * (3 * C83666 +
                   C82773 * (2 * C83590 +
                             C82773 * (C82830 + std::pow(C82621, 7) * bs[7] *
                                                    C82818 * C82912)))) /
        C81964;
    const double C16419 =
        (4 * (2 * C82730 * C82790 + C82730 * C83517) +
         C82730 * (3 * C83517 +
                   C82730 * (2 * C82730 * C82802 +
                             C82730 * (C82802 + std::pow(C82621, 7) * bs[7] *
                                                    C82777 * C82838)))) /
        C81964;
    const double C458 =
        (4 * (2 * C82615 * C82866 + C82615 * C82871) +
         C82615 * (3 * C82871 +
                   C82615 * (2 * C82615 * C82869 +
                             C82615 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C16646 =
        (4 * (2 * C82730 * C82882 + C82730 * C83573) +
         C82730 * (3 * C83573 +
                   C82730 * (2 * C82730 * C82888 +
                             C82730 * (C82888 + std::pow(C82621, 7) * bs[7] *
                                                    C82876 * C82838)))) /
        C81964;
    const double C574 =
        (4 * (2 * C82615 * C82903 + C82615 * C82908) +
         C82615 * (3 * C82908 +
                   C82615 * (2 * C82615 * C82906 +
                             C82615 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C82016 = C82009 + 0;
    const double C82014 = C81993 + C82008;
    const double C82015 = C82007 / C81965;
    const double C81997 = C81973 - C81991;
    const double C81996 = C81959 * C81989;
    const double C1680 =
        ((-C81989 / C81958) / C81965 - (0 * be) / C81958) / C81965 -
        (0 * be) / C81958;
    const double C15867 = -C81989 / C81958;
    const double C40962 = (-C81989 / C81958) / C81965 - (0 * be) / C81958;
    const double C81995 = C81988 / C81958;
    const double C84192 = C84191 / C81964;
    const double C84547 = 2 * C84511;
    const double C20358 = C84509 * C733;
    const double C20620 = C84509 * C2899;
    const double C20616 = C84509 * C2602;
    const double C20612 = C84509 * C2012;
    const double C20608 = C84509 * C1685;
    const double C20604 = C84509 * C889;
    const double C20600 = C84509 * C728;
    const double C20850 = C84509 * C3181;
    const double C20846 = C84509 * C2315;
    const double C20842 = C84509 * C1035;
    const double C23010 = C84509 * C3716;
    const double C23006 = C84509 * C3449;
    const double C23002 = C84509 * C3719;
    const double C22998 = C84509 * C3452;
    const double C23329 = C84509 * C3965;
    const double C23325 = C84509 * C3968;
    const double C23645 = C84509 * C1193;
    const double C23959 = C84509 * C1349;
    const double C23955 = C84509 * C1188;
    const double C24261 = C84509 * C1495;
    const double C33531 = C84509 * C5361;
    const double C33527 = C84509 * C5118;
    const double C33837 = C84509 * C5598;
    const double C34469 = C84509 * C4534;
    const double C34465 = C84509 * C4216;
    const double C34788 = C84509 * C4810;
    const double C36594 = C84509 * C6138;
    const double C36590 = C84509 * C5841;
    const double C36806 = C84509 * C6424;
    const double C2608 = C1669 * C733;
    const double C2920 = C1669 * C2012;
    const double C2914 = C1669 * C1685;
    const double C2908 = C1669 * C889;
    const double C2902 = C1669 * C728;
    const double C3190 = C1669 * C2315;
    const double C3184 = C1669 * C1035;
    const double C5847 = C1669 * C1193;
    const double C6159 = C1669 * C4534;
    const double C6153 = C1669 * C4216;
    const double C6147 = C1669 * C1349;
    const double C6141 = C1669 * C1188;
    const double C6433 = C1669 * C4810;
    const double C6427 = C1669 * C1495;
    const double C12085 = C1669 * C3719;
    const double C12079 = C1669 * C3452;
    const double C12403 = C1669 * C3968;
    const double C84200 = C84199 / C81958;
    const double C84551 = C84515 / C81977;
    const double C84573 = C84509 - C84546;
    const double C40953 = -C84546;
    const double C3186 = C1670 * C1034;
    const double C6149 = C1670 * C1348;
    const double C84590 = C84572 + C84189;
    const double C82125 = C82091 * C82124;
    const double C13724 =
        ((-C82124 / C81958) / C81965 - (0 * be) / C81958) / C81965 -
        (0 * be) / C81958;
    const double C39030 = (-C82124 / C81958) / C81965 - (0 * be) / C81958;
    const double C82247 = C82243 - C82237;
    const double C82302 = C82294 / C81958;
    const double C2402 = C1787 * C1907;
    const double C30248 = C1787 * C3449;
    const double C30242 = C1787 * C3443;
    const double C30767 = C1787 * C3630;
    const double C6787 = C6775 * C721;
    const double C6779 = C6775 * C722;
    const double C7031 = C6775 * C783;
    const double C7025 = C6775 * C784;
    const double C7020 = C6775 * C785;
    const double C7278 = C6775 * C835;
    const double C7274 = C6775 * C836;
    const double C12825 = C6775 * C3452;
    const double C12821 = C6775 * C3446;
    const double C13437 = C6775 * C3633;
    const double C34259 = C6775 * C5118;
    const double C203 = C188 + C189;
    const double C202 = C186 + C187;
    const double C588 = C577 + C578;
    const double C5976 = C5961 + C5962;
    const double C5975 = C5959 + C5960;
    const double C6525 = C6521 + C6522;
    const double C400 = C387 + C388;
    const double C6264 = C6253 + C1402;
    const double C13745 = C13621 * C181;
    const double C13739 = C13621 * C175;
    const double C13733 = C13621 * C180;
    const double C13727 = C13621 * C174;
    const double C14001 = C13621 * C381;
    const double C13992 = C13621 * C380;
    const double C14270 = C13621 * C571;
    const double C14264 = C13621 * C570;
    const double C18931 = C13621 * C4311;
    const double C18925 = C13621 * C4307;
    const double C18919 = C13621 * C1250;
    const double C18913 = C13621 * C1245;
    const double C19203 = C13621 * C1396;
    const double C19476 = C13621 * C4888;
    const double C19470 = C13621 * C1542;
    const double C21824 = C13621 * C1249;
    const double C21818 = C13621 * C1244;
    const double C22457 = C13621 * C1541;
    const double C84299 = C84298 / C81964;
    const double C6798 = C84528 * C182;
    const double C6794 = C84528 * C176;
    const double C6790 = C84528 * C181;
    const double C6786 = C84528 * C175;
    const double C6782 = C84528 * C180;
    const double C6778 = C84528 * C174;
    const double C7029 = C84528 * C381;
    const double C7023 = C84528 * C380;
    const double C7281 = C84528 * C572;
    const double C7277 = C84528 * C571;
    const double C7273 = C84528 * C570;
    const double C10870 = C84528 * C1243;
    const double C10866 = C84528 * C1249;
    const double C10862 = C84528 * C1244;
    const double C11534 = C84528 * C1540;
    const double C11530 = C84528 * C1541;
    const double C12824 = C84528 * C1250;
    const double C12820 = C84528 * C1245;
    const double C13126 = C84528 * C1396;
    const double C13436 = C84528 * C1542;
    const double C32369 = C84528 * C4308;
    const double C34258 = C84528 * C4311;
    const double C34254 = C84528 * C4307;
    const double C34893 = C84528 * C4888;
    const double C38365 = C84528 * C5957;
    const double C38361 = C84528 * C5954;
    const double C38793 = C84528 * C6519;
    const double C1785 =
        (((0 - (C82091 * C82114) / C81958) * ae) / C81958 - (0 * be) / C81977) /
            C81965 +
        ((C82091 * (((C84246 - (C82091 * 2 * C82116) / C81958) * ae) / C81958 -
                    C82114 / C81977) +
          C84528) *
         ae) /
            C81958 +
        (0 * ae) / C81958 - C82116 / C81964;
    const double C84557 = 2 * C84524;
    const double C1811 = C1786 * C721;
    const double C1799 = C1786 * C722;
    const double C2114 = C1786 * C783;
    const double C2105 = C1786 * C784;
    const double C2099 = C1786 * C785;
    const double C2406 = C1786 * C835;
    const double C2400 = C1786 * C836;
    const double C30258 = C1786 * C5118;
    const double C30246 = C1786 * C3452;
    const double C30240 = C1786 * C3446;
    const double C30765 = C1786 * C3633;
    const double C84306 = C84305 / C81958;
    const double C84566 = C84534 / C81977;
    const double C46580 = C45935 * C2394;
    const double C52952 = C45935 * C3552;
    const double C84584 = C84528 - C84563;
    const double C38937 = -C84563;
    const double C13741 = C13622 * C783;
    const double C13729 = C13622 * C784;
    const double C14272 = C13622 * C1080;
    const double C14266 = C13622 * C1081;
    const double C18933 = C13622 * C5204;
    const double C18921 = C13622 * C3553;
    const double C84596 = C84580 + C84295;
    const double C82151 = C82094 * C82150;
    const double C26620 =
        ((-C82150 / C81958) / C81965 - (0 * be) / C81958) / C81965 -
        (0 * be) / C81958;
    const double C53879 = (-C82150 / C81958) / C81965 - (0 * be) / C81958;
    const double C82397 = C82393 - C82387;
    const double C82452 = C82444 / C81958;
    const double C4723 = C4415 * C4308;
    const double C18160 = C4415 * C5118;
    const double C8883 = C8871 * C1181;
    const double C8875 = C8871 * C1182;
    const double C9118 = C8871 * C1243;
    const double C9114 = C8871 * C1244;
    const double C9357 = C8871 * C1295;
    const double C9351 = C8871 * C1296;
    const double C9346 = C8871 * C1297;
    const double C9986 = C8871 * C3633;
    const double C11974 = C8871 * C3452;
    const double C11970 = C8871 * C3446;
    const double C12615 = C8871 * C3630;
    const double C22893 = C8871 * C3449;
    const double C22889 = C8871 * C3443;
    const double C282 = C267 + C268;
    const double C281 = C265 + C266;
    const double C472 = C461 + C462;
    const double C2817 = C2802 + C2803;
    const double C2816 = C2800 + C2801;
    const double C3104 = C3100 + C3101;
    const double C659 = C646 + C647;
    const double C3362 = C3355 + C1135;
    const double C26641 = C26458 * C260;
    const double C26635 = C26458 * C254;
    const double C26629 = C26458 * C259;
    const double C26623 = C26458 * C253;
    const double C26887 = C26458 * C455;
    const double C26881 = C26458 * C454;
    const double C27149 = C26458 * C640;
    const double C27140 = C26458 * C639;
    const double C29560 = C26458 * C1910;
    const double C29554 = C26458 * C1906;
    const double C29548 = C26458 * C842;
    const double C29542 = C26458 * C837;
    const double C29812 = C26458 * C2213;
    const double C29806 = C26458 * C988;
    const double C30058 = C26458 * C1129;
    const double C32485 = C26458 * C841;
    const double C32479 = C26458 * C836;
    const double C32801 = C26458 * C987;
    const double C84339 = C84338 / C81964;
    const double C8894 = C84529 * C261;
    const double C8890 = C84529 * C255;
    const double C8886 = C84529 * C260;
    const double C8882 = C84529 * C254;
    const double C8878 = C84529 * C259;
    const double C8874 = C84529 * C253;
    const double C9121 = C84529 * C456;
    const double C9117 = C84529 * C455;
    const double C9113 = C84529 * C454;
    const double C9355 = C84529 * C640;
    const double C9349 = C84529 * C639;
    const double C10992 = C84529 * C835;
    const double C10988 = C84529 * C841;
    const double C10984 = C84529 * C836;
    const double C11326 = C84529 * C986;
    const double C11322 = C84529 * C987;
    const double C11973 = C84529 * C842;
    const double C11969 = C84529 * C837;
    const double C12299 = C84529 * C988;
    const double C12608 = C84529 * C1129;
    const double C21934 = C84529 * C1907;
    const double C22255 = C84529 * C2214;
    const double C22892 = C84529 * C1910;
    const double C22888 = C84529 * C1906;
    const double C23221 = C84529 * C2213;
    const double C25275 = C84529 * C2798;
    const double C25271 = C84529 * C2795;
    const double C25491 = C84529 * C3098;
    const double C4413 =
        (((0 - (C82094 * C82140) / C81958) * ae) / C81958 - (0 * be) / C81977) /
            C81965 +
        ((C82094 * (((C84257 - (C82094 * 2 * C82142) / C81958) * ae) / C81958 -
                    C82140 / C81977) +
          C84529) *
         ae) /
            C81958 +
        (0 * ae) / C81958 - C82142 / C81964;
    const double C84560 = 2 * C84526;
    const double C4439 = C4414 * C1181;
    const double C4427 = C4414 * C1182;
    const double C4727 = C4414 * C1243;
    const double C4721 = C4414 * C1244;
    const double C5014 = C4414 * C1295;
    const double C5005 = C4414 * C1296;
    const double C4999 = C4414 * C1297;
    const double C5761 = C4414 * C3633;
    const double C17889 = C4414 * C3630;
    const double C18170 = C4414 * C3449;
    const double C18164 = C4414 * C3443;
    const double C18158 = C4414 * C3452;
    const double C18152 = C4414 * C3446;
    const double C84346 = C84345 / C81958;
    const double C84571 = C84541 / C81977;
    const double C66522 = C63169 * C5284;
    const double C84587 = C84529 - C84568;
    const double C53740 = -C84568;
    const double C26637 = C26459 * C1295;
    const double C26625 = C26459 * C1296;
    const double C26889 = C26459 * C1446;
    const double C26883 = C26459 * C1447;
    const double C29562 = C26459 * C3636;
    const double C29556 = C26459 * C3630;
    const double C29550 = C26459 * C3639;
    const double C29544 = C26459 * C3633;
    const double C29808 = C26459 * C3888;
    const double C84597 = C84582 + C84335;
    const double C82267 = C82262 + 0;
    const double C82312 = C82309 + C82293;
    const double C82417 = C82412 + 0;
    const double C82462 = C82459 + C82443;
    const double C82270 = C82266 / C81965;
    const double C82420 = C82416 / C81965;
    const double C82630 = ae * C82629;
    const double C110 =
        (C82616 * C82614 * C82623 + C82615 * C82629 + C82615 * C82618 * ae) /
        C81958;
    const double C727 = (C82730 * C82629) / C81958;
    const double C1187 = (C82773 * C82629) / C81958;
    const double C2819 = C2810 + C2811;
    const double C5978 = C5969 + C5970;
    const double C83091 = C83090 + C82641;
    const double C83292 = C83291 + C82641;
    const double C3886 = (ae * (C82773 * C82786 + C82641) +
                          C82730 * (ae * C82743 + C82773 * C83166)) /
                         C81964;
    const double C4133 = C251 * C3632;
    const double C5758 = C4414 * C3632;
    const double C9984 = C8871 * C3632;
    const double C10986 = C84344 * C3632;
    const double C11531 = C6775 * C3632;
    const double C32481 = C26459 * C3632;
    const double C55976 = C84344 * C3632;
    const double C56516 = C1786 * C3632;
    const double C1801 = C1787 * C1682;
    const double C1923 = C251 * C1682;
    const double C2498 = C637 * C1682;
    const double C19821 = C251 * C2598;
    const double C20285 = C637 * C2598;
    const double C21935 = C8871 * C3442;
    const double C55861 = C1787 * C3442;
    const double C10863 = C6775 * C3445;
    const double C10985 = C8871 * C3445;
    const double C43238 = C4414 * C3445;
    const double C55859 = C1786 * C3445;
    const double C4324 = C172 * C4213;
    const double C4429 = C4415 * C4213;
    const double C4622 = C378 * C4213;
    const double C35138 = C172 * C5837;
    const double C35370 = C378 * C5837;
    const double C82647 = ae * C82645;
    const double C82646 = C82615 * C82645;
    const double C82656 = 2 * C82645;
    const double C82950 = C82730 * C82645;
    const double C83014 = C82773 * C82645;
    const double C1686 = (C82629 + C82645 * C82838) / C81958;
    const double C4217 = (C82629 + C82645 * C82912) / C81958;
    const double C83160 = ae * C83157;
    const double C83159 = C82730 * C83157;
    const double C83216 = C82773 * C83157;
    const double C83438 = 2 * C83157;
    const double C83399 = ae * C83396;
    const double C83398 = C82773 * C83396;
    const double C83786 = 2 * C83396;
    const double C18446 = C84561 * C5521;
    const double C29810 = C84561 * C5521;
    const double C66828 = C63169 * C5521;
    const double C732 =
        (2 * ae * C82730 * C82627 + C82615 * C82730 * C82644) / C81964;
    const double C1192 =
        (2 * ae * C82773 * C82627 + C82615 * C82773 * C82644) / C81964;
    const double C1689 =
        ((C82618 + C82619 * C82620 * C82624) * C82622 + C82644 * C82838) /
        C81964;
    const double C3458 = (C82773 * C82730 * C82644) / C81964;
    const double C4220 =
        ((C82618 + C82619 * C82620 * C82624) * C82622 + C82644 * C82912) /
        C81964;
    const double C382 =
        (2 * C82615 * C82843 +
         C82615 *
             (C82843 + (C82653 + C82838 * C82654 * C82655) * C82622 * C82619)) /
        C81964;
    const double C935 =
        (2 * ae * C82615 * C82736 + C82730 * C82615 * C82843) / C81964;
    const double C1395 = (C82773 * C82615 * C82843) / C81964;
    const double C3799 =
        (2 * ae * C82773 * C82736 + C82730 * C82773 * C82843) / C81964;
    const double C4612 =
        ((C82618 + C82838 * C82620 * C82624) * C82622 + C82843 * C82912) /
        C81964;
    const double C641 =
        (2 * C82615 * C82917 +
         C82615 *
             (C82917 + (C82653 + C82912 * C82654 * C82655) * C82622 * C82619)) /
        C81964;
    const double C1128 = (C82730 * C82615 * C82917) / C81964;
    const double C1588 =
        (2 * ae * C82615 * C82779 + C82773 * C82615 * C82917) / C81964;
    const double C2489 =
        ((C82618 + C82912 * C82620 * C82624) * C82622 + C82917 * C82838) /
        C81964;
    const double C4128 =
        (2 * ae * C82730 * C82779 + C82773 * C82730 * C82917) / C81964;
    const double C83343 = C83342 + C83158;
    const double C3887 = (ae * C82736 + C82773 * C82863 +
                          ae * (C82773 * C82730 * C82784 + C83158) +
                          C82730 * (ae * (C82773 * C82784 + C82637) +
                                    C82730 * (C82744 + C82773 * C82866))) /
                         C81964;
    const double C18154 = C4415 * C5115;
    const double C30252 = C1786 * C5115;
    const double C34255 = C6775 * C5115;
    const double C38362 = C6775 * C18815;
    const double C83088 = ae * C83087;
    const double C1788 =
        (C82616 * C82614 * C82733 + C82730 * C83087 + C82730 * C82618 * ae) /
        C81958;
    const double C3547 = (C82773 * C83087) / C81958;
    const double C5201 = (C83087 + C83157 * C82912) / C81958;
    const double C204 = C190 + C191;
    const double C401 = C390 + C391;
    const double C473 = C464 + C465;
    const double C206 = C194 + C195;
    const double C402 = C393 + C394;
    const double C474 = C467 + C468;
    const double C4630 = C4619 + C1400;
    const double C4334 = C4320 + C4321;
    const double C4629 = C4617 + C1401;
    const double C4332 = C4316 + C4317;
    const double C6265 = C6257 + C4621;
    const double C5977 = C5967 + C5968;
    const double C31971 = C31966 + C6263;
    const double C31806 = C31798 + C31799;
    const double C83289 = ae * C83288;
    const double C4416 =
        (C82616 * C82614 * C82776 + C82773 * C83288 + C82773 * C82618 * ae) /
        C81958;
    const double C2234 = C2221 + C2222;
    const double C283 = C269 + C270;
    const double C589 = C580 + C581;
    const double C660 = C649 + C650;
    const double C285 = C273 + C274;
    const double C590 = C583 + C584;
    const double C661 = C652 + C653;
    const double C2510 = C2502 + C1133;
    const double C1933 = C1919 + C1920;
    const double C2508 = C2496 + C1134;
    const double C1931 = C1915 + C1916;
    const double C4909 = C4896 + C4897;
    const double C3363 = C3357 + C2494;
    const double C2818 = C2808 + C2809;
    const double C16759 = C16754 + C3361;
    const double C16433 = C16425 + C16426;
    const double C82674 = ae * C82671;
    const double C82673 = C82615 * C82671;
    const double C82690 = 2 * C82671;
    const double C82931 = C82730 * C82671;
    const double C82995 = C82773 * C82671;
    const double C83061 = C82671 * C82838;
    const double C83246 = C82671 * C82912;
    const double C83511 = C82730 * C83509;
    const double C83522 = C82730 * C83521;
    const double C83880 = C82773 * C83878;
    const double C83894 = C82773 * C83893;
    const double C82943 = 2 * C82938;
    const double C83505 = C82747 + C82938;
    const double C83519 = C82824 + C82938;
    const double C83830 = C82938 + C83828;
    const double C83842 = C82938 + C83841;
    const double C19024 =
        (2 * (ae * C83314 + C82773 * C83692) + ae * (C83314 + C82932 * C82912) +
         C82773 * (C83692 + ae * C82773 * C82932 +
                   C82773 * (C82938 + C82773 * C82730 * C82802))) /
        C81964;
    const double C19385 =
        (2 * (ae * C83314 + C82773 * C83705) + ae * (C83314 + C82932 * C82912) +
         C82773 * (C83705 + ae * C82773 * C82932 +
                   C82773 * (C82938 + C82773 * C82730 * C82888))) /
        C81964;
    const double C18276 = C84188 * C17499;
    const double C37844 = C84188 * C18817;
    const double C38366 = C6775 * C18817;
    const double C83007 = 2 * C83002;
    const double C83592 = C83002 + C83591;
    const double C83874 = C82790 + C83002;
    const double C83891 = C82882 + C83002;
    const double C16908 = (ae * (2 * C83314 + C82730 * C83423) +
                           C82773 * (2 * C82730 * C82790 + C82730 * C83517)) /
                          C81964;
    const double C17089 = (ae * (2 * C83314 + C82730 * C83423) +
                           C82773 * (2 * C82730 * C82882 + C82730 * C83573)) /
                          C81964;
    const double C17423 = (C82783 + C82790 * C82838 + ae * C82773 * C83423 +
                           C82773 * (ae * C83423 + C82773 * C83517)) /
                          C81964;
    const double C17733 = (C82879 + C82882 * C82838 + ae * C82773 * C83423 +
                           C82773 * (ae * C83423 + C82773 * C83573)) /
                          C81964;
    const double C18259 =
        (2 * (ae * (C82640 + C82664 * C82912) + C82730 * C83666) +
         ae * (C83423 + C83510 * C82912) +
         C82730 * (C83666 + ae * (C82932 + C82730 * C82700 * C82912) +
                   C82730 * (ae * (C82664 + C82700 * C82912) +
                             C82730 * (C82830 + std::pow(C82621, 7) * bs[7] *
                                                    C82818 * C82912)))) /
        C81964;
    const double C19023 =
        (2 * (ae * C83423 + C82773 * C83517) + ae * (C83423 + C83510 * C82912) +
         C82773 * (C83517 + ae * C82773 * C83510 +
                   C82773 * (ae * C83510 +
                             C82773 * (C82802 + std::pow(C82621, 7) * bs[7] *
                                                    C82777 * C82838)))) /
        C81964;
    const double C19384 =
        (2 * (ae * C83423 + C82773 * C83573) + ae * (C83423 + C83510 * C82912) +
         C82773 * (C83573 + ae * C82773 * C83510 +
                   C82773 * (ae * C83510 +
                             C82773 * (C82888 + std::pow(C82621, 7) * bs[7] *
                                                    C82876 * C82838)))) /
        C81964;
    const double C15870 = (3 * (C82627 + C82640 * C82838) +
                           C82730 * (2 * C83314 + C82730 * C83423)) /
                          C81958;
    const double C16809 = (C82773 * (2 * C83314 + C82730 * C83423)) / C81958;
    const double C17256 = (C82627 + C82640 * C82838 + C83423 * C82912) / C81958;
    const double C18816 =
        (2 * C82773 * C83423 + C82773 * (C83423 + C83510 * C82912)) / C81958;
    const double C31470 =
        (ae * (3 * C83755 +
               C82773 * (2 * C82996 + C82773 * (C82664 + C82700 * C82912))) +
         C82730 * (3 * C83666 +
                   C82773 * (2 * C83590 +
                             C82773 * (C82830 + std::pow(C82621, 7) * bs[7] *
                                                    C82818 * C82912)))) /
        C81964;
    const double C30909 = (3 * (C82627 + C82640 * C82912) +
                           C82773 * (2 * C83751 + C82773 * C83755)) /
                          C81958;
    const double C82672 = C82615 * C82670;
    const double C82946 = C82730 * C82670;
    const double C83010 = C82773 * C82670;
    const double C1690 = (2 * ae * (C82627 + C82640 * C82838) +
                          C82615 * (C82644 + C82670 * C82838)) /
                         C81964;
    const double C2605 =
        (2 * C82730 * C82644 + C82730 * (C82644 + C82670 * C82838)) / C81964;
    const double C3455 = (C82773 * (C82644 + C82670 * C82838)) / C81964;
    const double C4221 = (2 * ae * (C82627 + C82640 * C82912) +
                          C82615 * (C82644 + C82670 * C82912)) /
                         C81964;
    const double C5844 =
        (2 * C82773 * C82644 + C82773 * (C82644 + C82670 * C82912)) / C81964;
    const double C82706 = C82615 * C82702;
    const double C82705 = C82702 * ae;
    const double C83135 = C82730 * C82702;
    const double C83375 = C82773 * C82702;
    const double C2597 =
        2 * C82730 * C82666 + C82730 * (C82666 + C82702 * C82838);
    const double C3441 = C82773 * (C82666 + C82702 * C82838);
    const double C5836 =
        2 * C82773 * C82666 + C82773 * (C82666 + C82702 * C82912);
    const double C83468 = C83464 + C82701;
    const double C83809 = C83805 + C82701;
    const double C83466 = C82661 + C83462;
    const double C83465 = C83461 * ae;
    const double C83947 = C82773 * C83461;
    const double C34135 =
        2 * C82773 * C83146 + C82773 * (C83146 + C83461 * C82912);
    const double C83811 = C82661 + C83807;
    const double C83810 = C83806 * ae;
    const double C82713 = ae * C82708;
    const double C82711 = C82615 * C82708;
    const double C82936 = C82730 * C82708;
    const double C83000 = C82773 * C82708;
    const double C83067 = C82708 * C82838;
    const double C83252 = C82708 * C82912;
    const double C83543 = ae * C83536;
    const double C83540 = C82730 * C83536;
    const double C83601 = C82773 * C83536;
    const double C83670 = C83536 * C82912;
    const double C83921 = ae * C83915;
    const double C83919 = C82773 * C83915;
    const double C82710 = C82615 * C82707;
    const double C82933 = C82730 * C82707;
    const double C82997 = C82773 * C82707;
    const double C83065 = C82707 * C82838;
    const double C83250 = C82707 * C82912;
    const double C82854 = C82853 * C82619;
    const double C83458 = C82615 * C82853;
    const double C83527 = C82730 * C82853;
    const double C83598 = C82773 * C82853;
    const double C83668 = C82853 * C82912;
    const double C82928 = C82927 * C82619;
    const double C83502 = C82615 * C82927;
    const double C83581 = C82927 * C82838;
    const double C83848 = C82730 * C82927;
    const double C83905 = C82773 * C82927;
    const double C83542 = C82730 * C83538;
    const double C83541 = C83538 * ae;
    const double C83710 = C82773 * C83538;
    const double C18814 =
        2 * C82773 * C83445 + C82773 * (C83445 + C83538 * C82912);
    const double C83858 = C83854 + C83537;
    const double C83856 = C83440 + C83852;
    const double C83855 = C83851 * ae;
    const double C83912 = C82773 * C83837;
    const double C83910 = C83837 * ae;
    const double C83094 = C82730 * C82752;
    const double C1445 = (ae * (2 * C82743 + C82615 * C82752) +
                          C82773 * (2 * C82615 * C82866 + C82615 * C82871)) /
                         C81964;
    const double C1539 = (ae * (2 * C82743 + C82615 * C82752) +
                          C82773 * (2 * C82615 * C82903 + C82615 * C82908)) /
                         C81964;
    const double C4716 = (C82863 + C82866 * C82619 + ae * C82773 * C82752 +
                          C82773 * (ae * C82752 + C82773 * C82871)) /
                         C81964;
    const double C4890 = (C82900 + C82903 * C82619 + ae * C82773 * C82752 +
                          C82773 * (ae * C82752 + C82773 * C82908)) /
                         C81964;
    const double C6345 =
        (2 * (ae * C82752 + C82773 * C82871) + ae * (C82752 + C82766 * C82912) +
         C82773 * (C82871 + ae * C82773 * C82766 +
                   C82773 * (ae * C82766 +
                             C82773 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C6517 =
        (2 * (ae * C82752 + C82773 * C82908) + ae * (C82752 + C82766 * C82912) +
         C82773 * (C82908 + ae * C82773 * C82766 +
                   C82773 * (ae * C82766 +
                             C82773 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C177 = (3 * (C82736 + C82741 * C82619) +
                         C82615 * (2 * C82743 + C82615 * C82752)) /
                        C81958;
    const double C782 = (C82730 * (2 * C82743 + C82615 * C82752) +
                         (2 * C82638 + C82615 * C82666) * ae) /
                        C81958;
    const double C1242 = (C82773 * (2 * C82743 + C82615 * C82752)) / C81958;
    const double C4309 = (C82736 + C82741 * C82619 + C82752 * C82912) / C81958;
    const double C5952 =
        (2 * C82773 * C82752 + C82773 * (C82752 + C82766 * C82912)) / C81958;
    const double C82767 = C82615 * C82765;
    const double C83425 = C82730 * C82765;
    const double C82833 = C82615 * C82832;
    const double C83433 = C82730 * C82832;
    const double C83733 = C82773 * C82832;
    const double C83620 = C82730 * C83618;
    const double C83678 = C82773 * C83618;
    const double C83900 = C82773 * C83899;
    const double C82762 = C82747 + C82758;
    const double C82828 = C82824 + C82758;
    const double C83457 = 2 * C82758;
    const double C83742 = C82758 + C83741;
    const double C83782 = C82758 + C83781;
    const double C5520 =
        (ae * (C82786 + C82773 * (C82773 * C82797 + C82665) +
               C82773 * C82661 * ae) +
         C82730 * (C83166 + ae * C82773 * C82754 +
                   C82773 * (C82758 + C82773 * C82615 * C82869))) /
        C81964;
    const double C6346 =
        (2 * (ae * C82743 + C82773 * C83166) + ae * (C82743 + C82754 * C82912) +
         C82773 * (C83166 + ae * C82773 * C82754 +
                   C82773 * (C82758 + C82773 * C82615 * C82869))) /
        C81964;
    const double C6518 =
        (2 * (ae * C82743 + C82773 * C83173) + ae * (C82743 + C82754 * C82912) +
         C82773 * (C83173 + ae * C82773 * C82754 +
                   C82773 * (C82758 + C82773 * C82615 * C82906))) /
        C81964;
    const double C83147 = C83145 + C82665;
    const double C6262 = C172 * C5953;
    const double C35139 = C84246 * C5953;
    const double C83448 = ae * C83443;
    const double C83446 = C82730 * C83443;
    const double C83529 = 2 * C83443;
    const double C83596 = C82773 * C83443;
    const double C83640 = C83443 * C82912;
    const double C83608 = 2 * C83603;
    const double C83677 = C82866 + C83603;
    const double C83897 = C82903 + C83603;
    const double C30958 = (3 * (C82736 + C82741 * C82912) +
                           C82773 * (2 * C83764 + C82773 * C83766)) /
                          C81958;
    const double C183 =
        (3 * (C82740 + ae * C82743 + C82615 * C82751) +
         ae * (2 * C82743 + C82615 * C82752) +
         C82615 * (2 * C82751 + ae * C82752 +
                   C82615 * (C82747 + ae * C82615 * C82748 +
                             C82615 * (ae * C82748 +
                                       C82615 * C82688 * C82687 * C82734)))) /
        C81964;
    const double C1248 =
        (C82773 * (C82740 + ae * C82743 + C82615 * C82751)) / C81964;
    const double C4312 =
        (ae * C82736 + C82615 * C82740 + C82751 * C82912) / C81964;
    const double C5956 =
        (2 * C82773 * C82751 + C82773 * (C82751 + C82765 * C82912)) / C81964;
    const double C30961 =
        (3 * (C82751 + C82765 * C82912) +
         C82773 *
             (2 * C82773 * C82765 +
              C82773 * (C82765 + (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82734) *
                                     C82912))) /
        C81964;
    const double C15933 =
        (3 * (C82740 + ae * C83314 + C82730 * C83422) +
         ae * (2 * C83314 + C82730 * C83423) +
         C82730 * (2 * C83422 + ae * C83423 +
                   C82730 * (C82747 + C82938 +
                             C82730 * (C82685 + C82730 * C82759)))) /
        C81964;
    const double C18910 =
        (2 * C82773 * C83422 + C82773 * (C83422 + C83509 * C82912)) / C81964;
    const double C31383 =
        (3 * (C83422 + C83509 * C82912) +
         C82773 *
             (2 * C82773 * C83509 +
              C82773 * (C83509 + (ae * C82700 + C82730 * std::pow(C82621, 7) *
                                                    bs[7] * C82734) *
                                     C82912))) /
        C81964;
    const double C31807 = C31800 + C31801;
    const double C83295 = C82773 * C82795;
    const double C985 = (ae * (2 * C82786 + C82615 * C82795) +
                         C82730 * (2 * C82615 * C82866 + C82615 * C82871)) /
                        C81964;
    const double C1079 = (ae * (2 * C82786 + C82615 * C82795) +
                          C82730 * (2 * C82615 * C82903 + C82615 * C82908)) /
                         C81964;
    const double C2215 = (C82863 + C82866 * C82619 + ae * C82730 * C82795 +
                          C82730 * (ae * C82795 + C82730 * C82871)) /
                         C81964;
    const double C2395 = (C82900 + C82903 * C82619 + ae * C82730 * C82795 +
                          C82730 * (ae * C82795 + C82730 * C82908)) /
                         C81964;
    const double C3096 =
        (2 * (ae * C82795 + C82730 * C82871) + ae * (C82795 + C82809 * C82838) +
         C82730 * (C82871 + ae * C82730 * C82809 +
                   C82730 * (ae * C82809 +
                             C82730 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C3274 =
        (2 * (ae * C82795 + C82730 * C82908) + ae * (C82795 + C82809 * C82838) +
         C82730 * (C82908 + ae * C82730 * C82809 +
                   C82730 * (ae * C82809 +
                             C82730 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C256 = (3 * (C82779 + C82784 * C82619) +
                         C82615 * (2 * C82786 + C82615 * C82795)) /
                        C81958;
    const double C834 = (C82730 * (2 * C82786 + C82615 * C82795)) / C81958;
    const double C1294 = (C82773 * (2 * C82786 + C82615 * C82795) +
                          (2 * C82638 + C82615 * C82666) * ae) /
                         C81958;
    const double C1908 = (C82779 + C82784 * C82619 + C82795 * C82838) / C81958;
    const double C2793 =
        (2 * C82730 * C82795 + C82730 * (C82795 + C82809 * C82838)) / C81958;
    const double C3628 = (C82773 * (C82795 + C82809 * C82838) +
                          (C82666 + C82702 * C82838) * ae) /
                         C81958;
    const double C3631 =
        (C82773 * C82730 * C82795 + C82730 * C82666 * ae) / C81958;
    const double C82810 = C82615 * C82808;
    const double C83757 = C82773 * C82808;
    const double C83937 = C82730 * C82808;
    const double C82891 = C82615 * C82890;
    const double C83775 = C82773 * C82890;
    const double C83942 = C82730 * C82890;
    const double C83567 = C82730 * C83563;
    const double C83578 = C82730 * C83577;
    const double C83844 = C82773 * C83577;
    const double C82805 = C82790 + C82801;
    const double C82886 = C82882 + C82801;
    const double C83489 = C82801 + C83487;
    const double C83499 = C82801 + C83498;
    const double C83802 = 2 * C82801;
    const double C3097 =
        (2 * (ae * C82786 + C82730 * C83166) + ae * (C82786 + C82797 * C82838) +
         C82730 * (C83166 + ae * C82730 * C82797 +
                   C82730 * (C82801 + C82730 * C82615 * C82869))) /
        C81964;
    const double C3275 =
        (2 * (ae * C82786 + C82730 * C83173) + ae * (C82786 + C82797 * C82838) +
         C82730 * (C83173 + ae * C82730 * C82797 +
                   C82730 * (C82801 + C82730 * C82615 * C82906))) /
        C81964;
    const double C83337 = C82773 * C83336;
    const double C83386 = C83384 + C82665;
    const double C3360 = C251 * C2794;
    const double C19822 = C84257 * C2794;
    const double C4132 = C251 * C3629;
    const double C12613 = C8871 * C3629;
    const double C17892 = C4414 * C3629;
    const double C21936 = C84344 * C3629;
    const double C55984 = C84344 * C3629;
    const double C56518 = C1787 * C3629;
    const double C83654 = C82773 * C83483;
    const double C15977 = (3 * (C82779 + C82784 * C82838) +
                           C82730 * (2 * C83341 + C82730 * C83483)) /
                          C81958;
    const double C16906 = (C82773 * (2 * C83341 + C82730 * C83483) +
                           (2 * C83156 + C82730 * C83445) * ae) /
                          C81958;
    const double C83566 = C82866 + C83562;
    const double C83575 = C82903 + C83562;
    const double C83847 = 2 * C83562;
    const double C83722 = C83720 + C83444;
    const double C83619 = ae * C83617;
    const double C83787 = C82773 * C83617;
    const double C83907 = 2 * C83617;
    const double C262 =
        (3 * (C82783 + ae * C82786 + C82615 * C82794) +
         ae * (2 * C82786 + C82615 * C82795) +
         C82615 * (2 * C82794 + ae * C82795 +
                   C82615 * (C82790 + ae * C82615 * C82791 +
                             C82615 * (ae * C82791 +
                                       C82615 * C82688 * C82687 * C82777)))) /
        C81964;
    const double C840 =
        (C82730 * (C82783 + ae * C82786 + C82615 * C82794)) / C81964;
    const double C1911 =
        (ae * C82779 + C82615 * C82783 + C82794 * C82838) / C81964;
    const double C2797 =
        (2 * C82730 * C82794 + C82730 * (C82794 + C82808 * C82838)) / C81964;
    const double C15980 =
        (3 * (C82794 + C82808 * C82838) +
         C82730 *
             (2 * C82730 * C82808 +
              C82730 * (C82808 + (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777) *
                                     C82838))) /
        C81964;
    const double C31011 =
        (3 * (C82783 + ae * C83751 + C82773 * C83754) +
         ae * (2 * C83751 + C82773 * C83755) +
         C82773 * (2 * C83754 + ae * C83755 +
                   C82773 * (C82790 + C83002 +
                             C82773 * (C82685 + C82773 * C82802)))) /
        C81964;
    const double C16434 = C16427 + C16428;
    const double C334 =
        (3 * (C82821 + ae * C82743 + C82615 * C82826) +
         ae * (2 * C82743 + C82615 * C82752) +
         C82615 * (2 * C82826 + ae * C82752 +
                   C82615 * (C82824 + C82758 +
                             C82615 * (C82755 +
                                       C82615 * C82688 * C82687 * C82818)))) /
        C81964;
    const double C1347 =
        (C82773 * (C82821 + ae * C82743 + C82615 * C82826)) / C81964;
    const double C4535 =
        (ae * C82736 + C82615 * C82821 + C82826 * C82912) / C81964;
    const double C6137 =
        (2 * C82773 * C82826 + C82773 * (C82826 + C82832 * C82912)) / C81964;
    const double C16023 =
        (3 * (C82821 + ae * C83314 + C82730 * C83431) +
         ae * (2 * C83314 + C82730 * C83423) +
         C82730 * (2 * C83431 + ae * C83423 +
                   C82730 * (C82824 + C82938 +
                             C82730 * (C82685 + C82730 * C82830)))) /
        C81964;
    const double C83144 = C82615 * C82848;
    const double C83437 = C82730 * C82848;
    const double C83611 = C82773 * C82848;
    const double C383 =
        (3 * (C82843 + C82848 * C82619) +
         C82615 * (2 * C82615 * C82848 +
                   C82615 * (C82848 + (C82686 + C82838 * C82687 * C82688) *
                                          C82622 * C82619))) /
        C81964;
    const double C934 = (2 * ae * (C82736 + C82741 * C82619) +
                         C82730 * (C82843 + C82848 * C82619)) /
                        C81964;
    const double C1394 = (C82773 * (C82843 + C82848 * C82619)) / C81964;
    const double C5438 = (2 * ae * (C82736 + C82741 * C82912) +
                          C82730 * (C82843 + C82848 * C82912)) /
                         C81964;
    const double C6251 =
        (2 * C82773 * C82843 + C82773 * (C82843 + C82848 * C82912)) / C81964;
    const double C4724 = C84561 * C4715;
    const double C26885 = C84561 * C4715;
    const double C63588 = C63169 * C4715;
    const double C16126 =
        (3 * (C82863 + ae * C83341 + C82730 * C83482) +
         ae * (2 * C83341 + C82730 * C83483) +
         C82730 * (2 * C83482 + ae * C83483 +
                   C82730 * (C82866 + ae * C82730 * C82791 +
                             C82730 * (C82798 + C82730 * C82869)))) /
        C81964;
    const double C17657 =
        (C82863 + ae * C82773 * C82741 + C82773 * C83624 +
         ae * (C83341 + C82773 * (C82773 * C83559 + C83444) +
               C82773 * C83440 * ae) +
         C82730 * (ae * (C82784 + C82773 * C83617 + C82773 * C82653 * ae) +
                   C82730 * (C82866 + C83603 + C82773 * C83618))) /
        C81964;
    const double C2236 = C2229 + C2230;
    const double C525 =
        (3 * (C82879 + ae * C82786 + C82615 * C82884) +
         ae * (2 * C82786 + C82615 * C82795) +
         C82615 * (2 * C82884 + ae * C82795 +
                   C82615 * (C82882 + C82801 +
                             C82615 * (C82798 +
                                       C82615 * C82688 * C82687 * C82876)))) /
        C81964;
    const double C1033 =
        (C82730 * (C82879 + ae * C82786 + C82615 * C82884)) / C81964;
    const double C2316 =
        (ae * C82779 + C82615 * C82879 + C82884 * C82838) / C81964;
    const double C3180 =
        (2 * C82730 * C82884 + C82730 * (C82884 + C82890 * C82838)) / C81964;
    const double C16171 =
        (3 * (C82884 + C82890 * C82838) +
         C82730 *
             (2 * C82730 * C82890 +
              C82730 * (C82890 + (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876) *
                                     C82838))) /
        C81964;
    const double C31189 =
        (3 * (C82879 + ae * C83751 + C82773 * C83773) +
         ae * (2 * C83751 + C82773 * C83755) +
         C82773 * (2 * C83773 + ae * C83755 +
                   C82773 * (C82882 + C83002 +
                             C82773 * (C82685 + C82773 * C82888)))) /
        C81964;
    const double C4900 = C84246 * C4889;
    const double C33006 = C84528 * C4889;
    const double C16214 =
        (3 * (C82900 + ae * C83341 + C82730 * C83495) +
         ae * (2 * C83341 + C82730 * C83483) +
         C82730 * (2 * C83495 + ae * C83483 +
                   C82730 * (C82903 + ae * C82730 * C82791 +
                             C82730 * (C82798 + C82730 * C82906)))) /
        C81964;
    const double C31233 =
        (3 * (C82900 + ae * C83764 + C82773 * C83779) +
         ae * (2 * C83764 + C82773 * C83766) +
         C82773 * (2 * C83779 + ae * C83766 +
                   C82773 * (C82903 + C83603 +
                             C82773 * (C82755 + C82773 * C82906)))) /
        C81964;
    const double C4911 = C4904 + C4905;
    const double C83177 = C82615 * C82922;
    const double C83719 = C82730 * C82922;
    const double C83785 = C82773 * C82922;
    const double C642 =
        (3 * (C82917 + C82922 * C82619) +
         C82615 * (2 * C82615 * C82922 +
                   C82615 * (C82922 + (C82686 + C82912 * C82687 * C82688) *
                                          C82622 * C82619))) /
        C81964;
    const double C1127 = (C82730 * (C82917 + C82922 * C82619)) / C81964;
    const double C1587 = (2 * ae * (C82779 + C82784 * C82619) +
                          C82773 * (C82917 + C82922 * C82619)) /
                         C81964;
    const double C2490 = (C82615 * C82917 + C82615 * C82922 * C82838) / C81964;
    const double C3353 =
        (2 * C82730 * C82917 + C82730 * (C82917 + C82922 * C82838)) / C81964;
    const double C4127 = (2 * ae * (C82779 + C82784 * C82838) +
                          C82773 * (C82917 + C82922 * C82838)) /
                         C81964;
    const double C16258 =
        (3 * (C82917 + C82922 * C82838) +
         C82730 * (2 * C82730 * C82922 + C82730 * (C82922 + C82927 * C82838))) /
        C81964;
    const double C3884 = (ae * (C82773 * C82795 + C82669) +
                          C82730 * (ae * C82752 + C82773 * C82871)) /
                         C81964;
    const double C198 = C172 * C106;
    const double C277 = C251 * C106;
    const double C396 = C378 * C106;
    const double C655 = C637 * C106;
    const double C6795 = C6775 * C720;
    const double C6879 = C251 * C720;
    const double C7361 = C637 * C720;
    const double C8799 = C172 * C1180;
    const double C8891 = C8871 * C1180;
    const double C9041 = C378 * C1180;
    const double C1813 = C1787 * C1683;
    const double C1927 = C251 * C1683;
    const double C2504 = C637 * C1683;
    const double C10871 = C6775 * C3444;
    const double C10993 = C8871 * C3444;
    const double C4328 = C172 * C4214;
    const double C4441 = C4415 * C4214;
    const double C4625 = C378 * C4214;
    const double C3885 =
        (ae * C82743 + C82773 * C83166 +
         ae * (C82773 * C82730 * C82797 + C83148) +
         C82730 * (ae * (C82773 * C82797 + C82665) +
                   C82730 * (C82758 + C82773 * C82615 * C82869))) /
        C81964;
    const double C32370 = C6775 * C5114;
    const double C43240 = C4415 * C5114;
    const double C16429 = C251 * C15868;
    const double C16756 = C637 * C15868;
    const double C25272 = C8871 * C16807;
    const double C18166 = C4415 * C17254;
    const double C30254 = C1787 * C17254;
    const double C31802 = C172 * C30907;
    const double C31968 = C378 * C30907;
    const double C83514 = C83507 + C83512;
    const double C31337 = (3 * (C83314 + C82932 * C82912) +
                           C82773 * (2 * C83825 + C82773 * C83831)) /
                          C81958;
    const double C83883 = C83876 + C83881;
    const double C82770 = C82760 + C82768;
    const double C30959 = (3 * (C82743 + C82754 * C82912) +
                           C82773 * (2 * C83768 + C82773 * C83770)) /
                          C81958;
    const double C83889 = C83887 + C83888;
    const double C82813 = C82803 + C82811;
    const double C83332 = C82773 * C83331;
    const double C83658 = C82773 * C83490;
    const double C15978 = (3 * (C82786 + C82797 * C82838) +
                           C82730 * (2 * C83336 + C82730 * C83490)) /
                          C81958;
    const double C83570 = C83564 + C83568;
    const double C37846 = C84188 * C19100;
    const double C31912 = C84188 * C31055;
    const double C82022 = C82016 * be;
    const double C82021 = C82014 * be;
    const double C19646 = C81997 * C109;
    const double C20617 = C81997 * C2598;
    const double C20609 = C81997 * C1682;
    const double C20605 = C81997 * C784;
    const double C20601 = C81997 * C722;
    const double C20851 = C81997 * C2794;
    const double C20847 = C81997 * C1907;
    const double C20843 = C81997 * C836;
    const double C23007 = C81997 * C3442;
    const double C22999 = C81997 * C3445;
    const double C23330 = C81997 * C3629;
    const double C23326 = C81997 * C3632;
    const double C23960 = C81997 * C1244;
    const double C23956 = C81997 * C1182;
    const double C24262 = C81997 * C1296;
    const double C33528 = C81997 * C5114;
    const double C34470 = C81997 * C4308;
    const double C34466 = C81997 * C4213;
    const double C36595 = C81997 * C5953;
    const double C36591 = C81997 * C5837;
    const double C82002 = C81959 * C81997;
    const double C82001 = 2 * C81997;
    const double C82063 = C81997 / C81965;
    const double C82000 = C81996 / C81958;
    const double C2917 = C1680 * C1683;
    const double C2911 = C1680 * C783;
    const double C2905 = C1680 * C721;
    const double C3187 = C1680 * C835;
    const double C6156 = C1680 * C4214;
    const double C6150 = C1680 * C1243;
    const double C6144 = C1680 * C1181;
    const double C6430 = C1680 * C1295;
    const double C12082 = C1680 * C3444;
    const double C15884 = C15867 * C109;
    const double C15878 = C15867 * C2602;
    const double C15877 = C15867 * C1685;
    const double C15876 = C15867 * C728;
    const double C15875 = C15867 * C108;
    const double C16496 = C15867 * C15868;
    const double C16492 = C15867 * C2599;
    const double C16488 = C15867 * C1681;
    const double C16486 = C15867 * C785;
    const double C16484 = C15867 * C723;
    const double C16655 = C15867 * C2795;
    const double C16652 = C15867 * C1906;
    const double C16649 = C15867 * C837;
    const double C16817 = C15867 * C1188;
    const double C16816 = C15867 * C3452;
    const double C16815 = C15867 * C3449;
    const double C17262 = C15867 * C5118;
    const double C17261 = C15867 * C4216;
    const double C18273 = C15867 * C17254;
    const double C18269 = C15867 * C5115;
    const double C18265 = C15867 * C3443;
    const double C18261 = C15867 * C3446;
    const double C18545 = C15867 * C3630;
    const double C18537 = C15867 * C3633;
    const double C18827 = C15867 * C5841;
    const double C18826 = C15867 * C18817;
    const double C19112 = C15867 * C4307;
    const double C19110 = C15867 * C4212;
    const double C19104 = C15867 * C1245;
    const double C19102 = C15867 * C1183;
    const double C19387 = C15867 * C1297;
    const double C25348 = C15867 * C16807;
    const double C31909 = C15867 * C30907;
    const double C31907 = C15867 * C5954;
    const double C31905 = C15867 * C5838;
    const double C37843 = C15867 * C18815;
    const double C40965 = C40962 * C109;
    const double C41922 = C40962 * C2598;
    const double C41914 = C40962 * C1682;
    const double C41910 = C40962 * C784;
    const double C41906 = C40962 * C722;
    const double C42156 = C40962 * C2794;
    const double C42152 = C40962 * C1907;
    const double C42148 = C40962 * C836;
    const double C44328 = C40962 * C5114;
    const double C44320 = C40962 * C3445;
    const double C44646 = C40962 * C3632;
    const double C45306 = C40962 * C4308;
    const double C45302 = C40962 * C4213;
    const double C45298 = C40962 * C1244;
    const double C45294 = C40962 * C1182;
    const double C45636 = C40962 * C1296;
    const double C52233 = C40962 * C3442;
    const double C52545 = C40962 * C3629;
    const double C60062 = C40962 * C5953;
    const double C60058 = C40962 * C5837;
    const double C84193 = C84189 - C84192;
    const double C84574 = C84547 / C81958;
    const double C84201 = C84197 - C84200;
    const double C84591 = C84573 / C81965;
    const double C41663 = C40953 * C733;
    const double C41925 = C40953 * C2899;
    const double C41921 = C40953 * C2602;
    const double C41917 = C40953 * C2012;
    const double C41913 = C40953 * C1685;
    const double C41909 = C40953 * C889;
    const double C41905 = C40953 * C728;
    const double C42155 = C40953 * C3181;
    const double C42151 = C40953 * C2315;
    const double C42147 = C40953 * C1035;
    const double C44331 = C40953 * C5361;
    const double C44327 = C40953 * C5118;
    const double C44323 = C40953 * C3719;
    const double C44319 = C40953 * C3452;
    const double C44649 = C40953 * C5598;
    const double C44645 = C40953 * C3968;
    const double C44951 = C40953 * C1193;
    const double C45305 = C40953 * C4534;
    const double C45301 = C40953 * C4216;
    const double C45297 = C40953 * C1349;
    const double C45293 = C40953 * C1188;
    const double C45639 = C40953 * C4810;
    const double C45635 = C40953 * C1495;
    const double C52236 = C40953 * C3716;
    const double C52232 = C40953 * C3449;
    const double C52544 = C40953 * C3965;
    const double C60061 = C40953 * C6138;
    const double C60057 = C40953 * C5841;
    const double C60273 = C40953 * C6424;
    const double C14436 = C84590 * C733;
    const double C14721 = C84590 * C2012;
    const double C14715 = C84590 * C1685;
    const double C14709 = C84590 * C889;
    const double C14703 = C84590 * C728;
    const double C14976 = C84590 * C2315;
    const double C14970 = C84590 * C1035;
    const double C27930 = C84590 * C1193;
    const double C28215 = C84590 * C4534;
    const double C28209 = C84590 * C4216;
    const double C28203 = C84590 * C1349;
    const double C28197 = C84590 * C1188;
    const double C28467 = C84590 * C4810;
    const double C28461 = C84590 * C1495;
    const double C69334 = C84590 * C3719;
    const double C69328 = C84590 * C3452;
    const double C69640 = C84590 * C3968;
    const double C82126 = C82125 / C81958;
    const double C13742 = C13724 * C1683;
    const double C13730 = C13724 * C1682;
    const double C14267 = C13724 * C1907;
    const double C18928 = C13724 * C17254;
    const double C18922 = C13724 * C3449;
    const double C18916 = C13724 * C3443;
    const double C19473 = C13724 * C3630;
    const double C21821 = C13724 * C3442;
    const double C22460 = C13724 * C3629;
    const double C39050 = C39030 * C720;
    const double C39042 = C39030 * C721;
    const double C39034 = C39030 * C722;
    const double C39280 = C39030 * C783;
    const double C39274 = C39030 * C784;
    const double C39269 = C39030 * C785;
    const double C39524 = C39030 * C835;
    const double C39520 = C39030 * C836;
    const double C43124 = C39030 * C5114;
    const double C43116 = C39030 * C3445;
    const double C43781 = C39030 * C3632;
    const double C45086 = C39030 * C5118;
    const double C45082 = C39030 * C5115;
    const double C45078 = C39030 * C3452;
    const double C45074 = C39030 * C3446;
    const double C45746 = C39030 * C3633;
    const double C48335 = C39030 * C3444;
    const double C74030 = C39030 * C18817;
    const double C74026 = C39030 * C18815;
    const double C82252 = C82091 * C82247;
    const double C82277 = C82247 / C81965;
    const double C82298 = 2 * C82247;
    const double C2412 = C2402 + C2403;
    const double C30267 = C30248 + C30249;
    const double C6806 = C6787 + C6788;
    const double C6802 = C6779 + C6780;
    const double C7287 = C7278 + C7279;
    const double C7285 = C7274 + C7275;
    const double C12830 = C12825 + C12826;
    const double C34264 = C34259 + C34260;
    const double C576 = C202 * C251;
    const double C592 = C588 * C84257;
    const double C9263 = C588 * C84529;
    const double C27047 = C588 * C26458;
    const double C5980 = C5976 * C1669;
    const double C28037 = C5976 * C84590;
    const double C31795 = C5976 * C84188;
    const double C36446 = C5976 * C84509;
    const double C59913 = C5976 * C40953;
    const double C31794 = C5975 * C15867;
    const double C404 = C400 + C388;
    const double C6266 = C6264 + C1402;
    const double C84300 = C84295 - C84299;
    const double C1809 = C1785 * C104;
    const double C1803 = C1785 * C109;
    const double C1797 = C1785 * C103;
    const double C2121 = C1785 * C176;
    const double C2111 = C1785 * C175;
    const double C2102 = C1785 * C174;
    const double C2098 = C1785 * C173;
    const double C2404 = C1785 * C254;
    const double C2398 = C1785 * C253;
    const double C3022 = C1785 * C785;
    const double C3019 = C1785 * C784;
    const double C3016 = C1785 * C783;
    const double C3809 = C1785 * C1245;
    const double C3806 = C1785 * C1244;
    const double C3803 = C1785 * C1243;
    const double C29010 = C1785 * C4308;
    const double C29005 = C1785 * C4307;
    const double C30256 = C1785 * C4216;
    const double C30250 = C1785 * C4212;
    const double C30244 = C1785 * C1188;
    const double C30238 = C1785 * C1183;
    const double C30522 = C1785 * C5954;
    const double C30763 = C1785 * C1297;
    const double C55857 = C1785 * C1182;
    const double C56514 = C1785 * C1296;
    const double C84581 = C84557 / C81958;
    const double C84307 = C84303 - C84306;
    const double C84598 = C84584 / C81965;
    const double C39053 = C38937 * C182;
    const double C39049 = C38937 * C176;
    const double C39045 = C38937 * C181;
    const double C39041 = C38937 * C175;
    const double C39037 = C38937 * C180;
    const double C39033 = C38937 * C174;
    const double C39278 = C38937 * C381;
    const double C39272 = C38937 * C380;
    const double C39527 = C38937 * C572;
    const double C39523 = C38937 * C571;
    const double C39519 = C38937 * C570;
    const double C43123 = C38937 * C4308;
    const double C43119 = C38937 * C1249;
    const double C43115 = C38937 * C1244;
    const double C43784 = C38937 * C4889;
    const double C43780 = C38937 * C1541;
    const double C45085 = C38937 * C4311;
    const double C45081 = C38937 * C4307;
    const double C45077 = C38937 * C1250;
    const double C45073 = C38937 * C1245;
    const double C45415 = C38937 * C1396;
    const double C45749 = C38937 * C4888;
    const double C45745 = C38937 * C1542;
    const double C48334 = C38937 * C1243;
    const double C48944 = C38937 * C1540;
    const double C74029 = C38937 * C5957;
    const double C74025 = C38937 * C5954;
    const double C74457 = C38937 * C6519;
    const double C1816 = C84596 * C181;
    const double C1810 = C84596 * C175;
    const double C1804 = C84596 * C180;
    const double C1798 = C84596 * C174;
    const double C2112 = C84596 * C381;
    const double C2103 = C84596 * C380;
    const double C2405 = C84596 * C571;
    const double C2399 = C84596 * C570;
    const double C30257 = C84596 * C4311;
    const double C30251 = C84596 * C4307;
    const double C30245 = C84596 * C1250;
    const double C30239 = C84596 * C1245;
    const double C30509 = C84596 * C1396;
    const double C30770 = C84596 * C4888;
    const double C30764 = C84596 * C1542;
    const double C55864 = C84596 * C1249;
    const double C55858 = C84596 * C1244;
    const double C56515 = C84596 * C1541;
    const double C82152 = C82151 / C81958;
    const double C26638 = C26620 * C4214;
    const double C26626 = C26620 * C4213;
    const double C26884 = C26620 * C4308;
    const double C29557 = C26620 * C17254;
    const double C29551 = C26620 * C5118;
    const double C29545 = C26620 * C5115;
    const double C32482 = C26620 * C5114;
    const double C53899 = C53879 * C1180;
    const double C53891 = C53879 * C1181;
    const double C53883 = C53879 * C1182;
    const double C54121 = C53879 * C1243;
    const double C54117 = C53879 * C1244;
    const double C54357 = C53879 * C1295;
    const double C54351 = C53879 * C1296;
    const double C54346 = C53879 * C1297;
    const double C54985 = C53879 * C3633;
    const double C54983 = C53879 * C3632;
    const double C55983 = C53879 * C3442;
    const double C55975 = C53879 * C3445;
    const double C56631 = C53879 * C3629;
    const double C56622 = C53879 * C3630;
    const double C56955 = C53879 * C3449;
    const double C56951 = C53879 * C3443;
    const double C56947 = C53879 * C3452;
    const double C56943 = C53879 * C3446;
    const double C60714 = C53879 * C3444;
    const double C71526 = C53879 * C16807;
    const double C82402 = C82094 * C82397;
    const double C82427 = C82397 / C81965;
    const double C82448 = 2 * C82397;
    const double C18179 = C18160 + C18161;
    const double C8902 = C8883 + C8884;
    const double C8898 = C8875 + C8876;
    const double C9127 = C9118 + C9119;
    const double C9125 = C9114 + C9115;
    const double C11979 = C11974 + C11975;
    const double C11977 = C11970 + C11971;
    const double C22898 = C22893 + C22894;
    const double C22896 = C22889 + C22890;
    const double C460 = C281 * C172;
    const double C2218 = C281 * C1785;
    const double C476 = C472 * C84246;
    const double C2219 = C472 * C84596;
    const double C7126 = C472 * C84528;
    const double C14104 = C472 * C13621;
    const double C39375 = C472 * C38937;
    const double C2821 = C2817 * C1669;
    const double C14617 = C2817 * C84590;
    const double C16422 = C2817 * C84188;
    const double C20522 = C2817 * C84509;
    const double C41827 = C2817 * C40953;
    const double C16421 = C2816 * C15867;
    const double C663 = C659 + C647;
    const double C3364 = C3362 + C1135;
    const double C84340 = C84335 - C84339;
    const double C4437 = C4413 * C104;
    const double C4431 = C4413 * C109;
    const double C4425 = C4413 * C103;
    const double C4725 = C4413 * C175;
    const double C4719 = C4413 * C174;
    const double C4893 = C202 * C4413;
    const double C5021 = C4413 * C255;
    const double C5011 = C4413 * C254;
    const double C5002 = C4413 * C253;
    const double C4998 = C4413 * C252;
    const double C5762 = C4413 * C837;
    const double C5759 = C4413 * C836;
    const double C5756 = C4413 * C835;
    const double C6612 = C4413 * C1297;
    const double C6609 = C4413 * C1296;
    const double C6606 = C4413 * C1295;
    const double C17893 = C4413 * C1907;
    const double C17888 = C4413 * C1906;
    const double C18168 = C4413 * C1685;
    const double C18162 = C4413 * C1681;
    const double C18156 = C4413 * C728;
    const double C18150 = C4413 * C723;
    const double C18441 = C4413 * C785;
    const double C18722 = C4413 * C2795;
    const double C19568 = C4413 * C3633;
    const double C19565 = C4413 * C3630;
    const double C43236 = C4413 * C722;
    const double C43574 = C4413 * C784;
    const double C45856 = C4413 * C3632;
    const double C84583 = C84560 / C81958;
    const double C84347 = C84343 - C84346;
    const double C84600 = C84587 / C81965;
    const double C53902 = C53740 * C261;
    const double C53898 = C53740 * C255;
    const double C53894 = C53740 * C260;
    const double C53890 = C53740 * C254;
    const double C53886 = C53740 * C259;
    const double C53882 = C53740 * C253;
    const double C54124 = C53740 * C456;
    const double C54120 = C53740 * C455;
    const double C54116 = C53740 * C454;
    const double C54266 = C588 * C53740;
    const double C54355 = C53740 * C640;
    const double C54349 = C53740 * C639;
    const double C55982 = C53740 * C1907;
    const double C55978 = C53740 * C841;
    const double C55974 = C53740 * C836;
    const double C56311 = C53740 * C2214;
    const double C56307 = C53740 * C987;
    const double C56954 = C53740 * C1910;
    const double C56950 = C53740 * C1906;
    const double C56946 = C53740 * C842;
    const double C56942 = C53740 * C837;
    const double C57267 = C53740 * C2213;
    const double C57263 = C53740 * C988;
    const double C57569 = C53740 * C1129;
    const double C60713 = C53740 * C835;
    const double C61019 = C53740 * C986;
    const double C71529 = C53740 * C2798;
    const double C71525 = C53740 * C2795;
    const double C71739 = C53740 * C3098;
    const double C4444 = C84597 * C260;
    const double C4438 = C84597 * C254;
    const double C4432 = C84597 * C259;
    const double C4426 = C84597 * C253;
    const double C4726 = C84597 * C455;
    const double C4720 = C84597 * C454;
    const double C4894 = C588 * C84597;
    const double C5012 = C84597 * C640;
    const double C5003 = C84597 * C639;
    const double C18169 = C84597 * C1910;
    const double C18163 = C84597 * C1906;
    const double C18157 = C84597 * C842;
    const double C18151 = C84597 * C837;
    const double C18448 = C84597 * C2213;
    const double C18442 = C84597 * C988;
    const double C18709 = C84597 * C1129;
    const double C43243 = C84597 * C841;
    const double C43237 = C84597 * C836;
    const double C43575 = C84597 * C987;
    const double C82271 = C82267 * be;
    const double C82315 = C82312 * be;
    const double C82421 = C82417 * be;
    const double C82465 = C82462 * be;
    const double C116 =
        ((C82618 + C82619 * C82620 * C82624) * C82622 + C82630 + C82630 +
         C82615 *
             (2 * ae * C82627 +
              C82615 *
                  (C82620 * C82624 + C82619 * bs[4] * std::pow(C82613, 4)) *
                  C82622)) /
        C81964;
    const double C789 =
        (C82630 + C82730 * (ae * C82736 + C82615 * C82740)) / C81964;
    const double C888 =
        (C82630 + C82730 * (ae * C82736 + C82615 * C82821)) / C81964;
    const double C1301 =
        (C82630 + C82773 * (ae * C82779 + C82615 * C82783)) / C81964;
    const double C1494 =
        (C82630 + C82773 * (ae * C82779 + C82615 * C82879)) / C81964;
    const double C192 = C172 * C110;
    const double C271 = C251 * C110;
    const double C1696 = C1680 * C110;
    const double C1815 = C1785 * C110;
    const double C4443 = C4413 * C110;
    const double C19659 = C81997 * C110;
    const double C40978 = C40962 * C110;
    const double C1805 = C1786 * C727;
    const double C1917 = C251 * C727;
    const double C2904 = C1670 * C727;
    const double C6783 = C6775 * C727;
    const double C15883 = C15867 * C727;
    const double C19648 = C81997 * C727;
    const double C20602 = C84198 * C727;
    const double C39038 = C39030 * C727;
    const double C40967 = C40962 * C727;
    const double C41907 = C84198 * C727;
    const double C43242 = C4413 * C727;
    const double C4318 = C172 * C1187;
    const double C4433 = C4414 * C1187;
    const double C6143 = C1670 * C1187;
    const double C8879 = C8871 * C1187;
    const double C17269 = C15867 * C1187;
    const double C21066 = C81997 * C1187;
    const double C23957 = C84198 * C1187;
    const double C42368 = C40962 * C1187;
    const double C45295 = C84198 * C1187;
    const double C53887 = C53879 * C1187;
    const double C55863 = C1785 * C1187;
    const double C2823 = C2819 * C1669;
    const double C14623 = C2819 * C84590;
    const double C16424 = C2819 * C84188;
    const double C20526 = C2819 * C84509;
    const double C41831 = C2819 * C40953;
    const double C5982 = C5978 * C1669;
    const double C28043 = C5978 * C84590;
    const double C31797 = C5978 * C84188;
    const double C36450 = C5978 * C84509;
    const double C59917 = C5978 * C40953;
    const double C83092 = ae * C83091;
    const double C1789 =
        (C82615 * C82736 + C82730 * C83091 + C82730 * C82638 * ae) / C81958;
    const double C3545 = (C82773 * C83091) / C81958;
    const double C83293 = ae * C83292;
    const double C4417 =
        (C82615 * C82779 + C82773 * C83292 + C82773 * C82638 * ae) / C81958;
    const double C11324 = C84344 * C3886;
    const double C32803 = C26459 * C3886;
    const double C56309 = C84344 * C3886;
    const double C1935 = C1923 + C1924;
    const double C2509 = C2498 + C2499;
    const double C11000 = C10985 + C10986;
    const double C4336 = C4324 + C4325;
    const double C4631 = C4622 + C4623;
    const double C3551 = (C82773 * (C82647 + C82730 * C82751)) / C81964;
    const double C82648 = C82627 + C82646;
    const double C82951 = ae * C82950;
    const double C3451 = (C82773 * C82950) / C81958;
    const double C83015 = ae * C83014;
    const double C1807 = C1787 * C1686;
    const double C1925 = C251 * C1686;
    const double C2916 = C1670 * C1686;
    const double C13736 = C13724 * C1686;
    const double C15882 = C15867 * C1686;
    const double C19650 = C81997 * C1686;
    const double C20610 = C84198 * C1686;
    const double C40969 = C40962 * C1686;
    const double C41915 = C84198 * C1686;
    const double C4326 = C172 * C4217;
    const double C4435 = C4415 * C4217;
    const double C6155 = C1670 * C4217;
    const double C17268 = C15867 * C4217;
    const double C23652 = C81997 * C4217;
    const double C26632 = C26620 * C4217;
    const double C34467 = C84198 * C4217;
    const double C43005 = C40962 * C4217;
    const double C45303 = C84198 * C4217;
    const double C83161 = C82736 + C83159;
    const double C83217 = ae * C83216;
    const double C83400 = C82779 + C83398;
    const double C2610 = C1670 * C732;
    const double C20360 = C84198 * C732;
    const double C41665 = C84198 * C732;
    const double C5849 = C1670 * C1192;
    const double C23647 = C84198 * C1192;
    const double C44953 = C84198 * C1192;
    const double C2614 = C1669 * C1689;
    const double C14442 = C84590 * C1689;
    const double C16311 = C84188 * C1689;
    const double C20362 = C84509 * C1689;
    const double C41667 = C40953 * C1689;
    const double C11758 = C1669 * C3458;
    const double C17973 = C84188 * C3458;
    const double C22672 = C84509 * C3458;
    const double C44003 = C40953 * C3458;
    const double C69019 = C84590 * C3458;
    const double C5853 = C1669 * C4220;
    const double C18824 = C84188 * C4220;
    const double C27936 = C84590 * C4220;
    const double C34140 = C84509 * C4220;
    const double C44955 = C40953 * C4220;
    const double C395 = C84246 * C382;
    const double C7035 = C84528 * C382;
    const double C39284 = C38937 * C382;
    const double C7026 = C84304 * C935;
    const double C13995 = C13622 * C935;
    const double C39275 = C84304 * C935;
    const double C4618 = C84246 * C1395;
    const double C11204 = C84528 * C1395;
    const double C22142 = C13621 * C1395;
    const double C43451 = C38937 * C1395;
    const double C56194 = C84596 * C1395;
    const double C13128 = C84304 * C3799;
    const double C19205 = C13622 * C3799;
    const double C45417 = C84304 * C3799;
    const double C6258 = C84246 * C4612;
    const double C19209 = C13621 * C4612;
    const double C30515 = C84596 * C4612;
    const double C34576 = C84528 * C4612;
    const double C45419 = C38937 * C4612;
    const double C654 = C84257 * C641;
    const double C9361 = C84529 * C641;
    const double C54361 = C53740 * C641;
    const double C2497 = C84257 * C1128;
    const double C11640 = C84529 * C1128;
    const double C33110 = C26458 * C1128;
    const double C43890 = C84597 * C1128;
    const double C56624 = C53740 * C1128;
    const double C9352 = C84344 * C1588;
    const double C27143 = C26459 * C1588;
    const double C54352 = C84344 * C1588;
    const double C3358 = C84257 * C2489;
    const double C18715 = C84597 * C2489;
    const double C23533 = C84529 * C2489;
    const double C30064 = C26458 * C2489;
    const double C57573 = C53740 * C2489;
    const double C12610 = C84344 * C4128;
    const double C30060 = C26459 * C4128;
    const double C57571 = C84344 * C4128;
    const double C83344 = ae * C83343;
    const double C5281 =
        (C82730 * C82779 + C82773 * C83343 + C82773 * C83156 * ae) / C81958;
    const double C23223 = C84344 * C3887;
    const double C29814 = C26459 * C3887;
    const double C57269 = C84344 * C3887;
    const double C2093 =
        ((C82618 + C82838 * C82620 * C82624) * C82622 + C83088 + C83088 +
         C82730 * (2 * ae * C82736 + C82730 * C82843)) /
        C81964;
    const double C4048 =
        (C83088 + C82773 * (ae * C82779 + C82730 * C82900)) / C81964;
    const double C2100 = C1787 * C1788;
    const double C3021 = C1786 * C1788;
    const double C3102 = C251 * C1788;
    const double C7759 = C6775 * C1788;
    const double C13989 = C13724 * C1788;
    const double C16490 = C15867 * C1788;
    const double C18447 = C4413 * C1788;
    const double C40000 = C39030 * C1788;
    const double C3808 = C1786 * C3547;
    const double C5445 = C172 * C3547;
    const double C8390 = C6775 * C3547;
    const double C12300 = C8871 * C3547;
    const double C12822 = C84304 * C3547;
    const double C18263 = C15867 * C3547;
    const double C18443 = C4414 * C3547;
    const double C18915 = C13622 * C3547;
    const double C29730 = C1785 * C3547;
    const double C40622 = C39030 * C3547;
    const double C45075 = C84304 * C3547;
    const double C57264 = C53879 * C3547;
    const double C5442 = C172 * C5201;
    const double C13133 = C6775 * C5201;
    const double C18271 = C15867 * C5201;
    const double C18445 = C4415 * C5201;
    const double C18927 = C13622 * C5201;
    const double C29006 = C1786 * C5201;
    const double C29727 = C1785 * C5201;
    const double C29809 = C26620 * C5201;
    const double C34256 = C84304 * C5201;
    const double C43455 = C39030 * C5201;
    const double C45083 = C84304 * C5201;
    const double C579 = C204 * C251;
    const double C4901 = C204 * C4413;
    const double C405 = C401 + C391;
    const double C477 = C473 * C84246;
    const double C2227 = C473 * C84596;
    const double C7130 = C473 * C84528;
    const double C14110 = C473 * C13621;
    const double C39379 = C473 * C38937;
    const double C582 = C206 * C251;
    const double C406 = C402 + C394;
    const double C478 = C474 * C84246;
    const double C7134 = C474 * C84528;
    const double C39383 = C474 * C38937;
    const double C4634 = C4630 + C1400;
    const double C4903 = C4334 * C4414;
    const double C5965 = C4334 * C1680;
    const double C9268 = C4334 * C8871;
    const double C54271 = C4334 * C53879;
    const double C4633 = C4629 + C1401;
    const double C4895 = C4332 * C4414;
    const double C9264 = C4332 * C8871;
    const double C36447 = C4332 * C81997;
    const double C54267 = C4332 * C53879;
    const double C59914 = C4332 * C40962;
    const double C6267 = C6265 + C4621;
    const double C31796 = C5977 * C15867;
    const double C31973 = C31971 + C6263;
    const double C31810 = C31806 * C15867;
    const double C4993 =
        ((C82618 + C82912 * C82620 * C82624) * C82622 + C83289 + C83289 +
         C82773 * (2 * ae * C82779 + C82773 * C82917)) /
        C81964;
    const double C5000 = C4415 * C4416;
    const double C6523 = C172 * C4416;
    const double C6611 = C4414 * C4416;
    const double C10660 = C8871 * C4416;
    const double C19389 = C15867 * C4416;
    const double C27137 = C26620 * C4416;
    const double C30769 = C1785 * C4416;
    const double C55659 = C53879 * C4416;
    const double C7128 = C2234 * C84304;
    const double C14106 = C2234 * C13622;
    const double C39377 = C2234 * C84304;
    const double C463 = C283 * C172;
    const double C2226 = C283 * C1785;
    const double C593 = C589 * C84257;
    const double C4902 = C589 * C84597;
    const double C9267 = C589 * C84529;
    const double C27053 = C589 * C26458;
    const double C54270 = C589 * C53740;
    const double C664 = C660 + C650;
    const double C466 = C285 * C172;
    const double C594 = C590 * C84257;
    const double C9271 = C590 * C84529;
    const double C54274 = C590 * C53740;
    const double C665 = C661 + C653;
    const double C2514 = C2510 + C1133;
    const double C2228 = C1933 * C1786;
    const double C2806 = C1933 * C1680;
    const double C7131 = C1933 * C6775;
    const double C39380 = C1933 * C39030;
    const double C2512 = C2508 + C1134;
    const double C2220 = C1931 * C1786;
    const double C7127 = C1931 * C6775;
    const double C20523 = C1931 * C81997;
    const double C39376 = C1931 * C39030;
    const double C41828 = C1931 * C40962;
    const double C9265 = C4909 * C84344;
    const double C27049 = C4909 * C26459;
    const double C54268 = C4909 * C84344;
    const double C3365 = C3363 + C2494;
    const double C16423 = C2818 * C15867;
    const double C16761 = C16759 + C3361;
    const double C16437 = C16433 * C15867;
    const double C82684 = C82670 + C82674;
    const double C5203 =
        (C82647 + C82730 * C82751 + (C82674 + C82730 * C82765) * C82912) /
        C81964;
    const double C82676 = C82640 + C82673;
    const double C82937 = ae * C82931;
    const double C83118 = 2 * C82931;
    const double C83185 = C82773 * C82931;
    const double C5117 = (C82950 + C82931 * C82912) / C81958;
    const double C83001 = ae * C82995;
    const double C83346 = 2 * C82995;
    const double C83062 = C82645 + C83061;
    const double C83247 = C82645 + C83246;
    const double C83513 = C83505 + C83511;
    const double C83523 = C83519 + C83522;
    const double C31427 =
        (3 * (C83692 + ae * C83825 + C82773 * C83830) +
         ae * (2 * C83825 + C82773 * C83831) +
         C82773 * (2 * C83830 + ae * C83831 +
                   C82773 * (C83826 + ae * C82773 * C83827 +
                             C82773 * (ae * C83827 + C82773 * C82730 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82777)))) /
        C81964;
    const double C31601 =
        (3 * (C83705 + ae * C83825 + C82773 * C83842) +
         ae * (2 * C83825 + C82773 * C83831) +
         C82773 * (2 * C83842 + ae * C83831 +
                   C82773 * (C83840 + ae * C82773 * C83827 +
                             C82773 * (ae * C83827 + C82773 * C82730 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82876)))) /
        C81964;
    const double C37768 = C84543 * C19024;
    const double C73441 = C84543 * C19024;
    const double C38069 = C84188 * C19385;
    const double C16952 =
        (2 * (ae * C82773 * C82640 + C82730 * C83594) + ae * C82773 * C83423 +
         C82730 * (C83594 + ae * C82773 * C82932 + C82730 * C83592)) /
        C81964;
    const double C83882 = C83874 + C83880;
    const double C83895 = C83891 + C83894;
    const double C25277 = C84344 * C16908;
    const double C71531 = C84344 * C16908;
    const double C25574 = C84188 * C17089;
    const double C18173 = C84561 * C17423;
    const double C29564 = C84561 * C17423;
    const double C80729 = C63169 * C17423;
    const double C18549 = C84188 * C17733;
    const double C15879 = C15867 * C15870;
    const double C16431 = C251 * C15870;
    const double C16497 = C84188 * C15870;
    const double C16814 = C15867 * C16809;
    const double C25276 = C8871 * C16809;
    const double C25349 = C84188 * C16809;
    const double C71530 = C53879 * C16809;
    const double C17263 = C15867 * C17256;
    const double C18172 = C4415 * C17256;
    const double C18274 = C84188 * C17256;
    const double C18934 = C13724 * C17256;
    const double C29563 = C26620 * C17256;
    const double C30260 = C1787 * C17256;
    const double C18825 = C15867 * C18816;
    const double C30914 = C15867 * C30909;
    const double C31804 = C172 * C30909;
    const double C31910 = C84188 * C30909;
    const double C82675 = C82657 + C82672;
    const double C3457 =
        (2 * ae * C82773 * C82730 * C82640 + C82615 * C82773 * C82946) / C81964;
    const double C5121 = (C82730 * C82644 + C82946 * C82912) / C81964;
    const double C2616 = C1670 * C1690;
    const double C20364 = C84198 * C1690;
    const double C41669 = C84198 * C1690;
    const double C16313 = C84188 * C2605;
    const double C20366 = C84509 * C2605;
    const double C41671 = C40953 * C2605;
    const double C17978 = C84188 * C3455;
    const double C22676 = C84509 * C3455;
    const double C51928 = C40953 * C3455;
    const double C5855 = C1670 * C4221;
    const double C34142 = C84198 * C4221;
    const double C44957 = C84198 * C4221;
    const double C31740 = C84188 * C5844;
    const double C36368 = C84509 * C5844;
    const double C59835 = C40953 * C5844;
    const double C82709 = C82691 + C82706;
    const double C83136 = C83134 + C82705;
    const double C83376 = C83374 + C82705;
    const double C5519 =
        (ae * (C82795 + C82773 * (C82773 * C82809 + C82705) +
               C82773 * C82702 * ae) +
         C82730 * (C82871 + ae * C82773 * C82766 +
                   C82773 * (ae * C82766 +
                             C82773 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C83137 = C83135 * ae;
    const double C5113 = C82730 * C82666 + C83135 * C82912;
    const double C83377 = C83375 * ae;
    const double C83471 = ae * C83468;
    const double C83470 = C82730 * C83468;
    const double C83644 = C83468 * C82912;
    const double C83737 = C82773 * C83468;
    const double C83814 = ae * C83809;
    const double C83812 = C82773 * C83809;
    const double C83469 = C83466 * ae;
    const double C21201 = (C82773 * (2 * C83336 + C82730 * C83490) +
                           (2 * C83146 + C82730 * C83466) * ae) /
                          C81958;
    const double C15869 = 3 * (C82638 + C82661 * C82838) +
                          C82730 * (2 * C83146 + C82730 * C83466);
    const double C17255 = C82638 + C82661 * C82838 + C83466 * C82912;
    const double C21056 = C82773 * (2 * C83146 + C82730 * C83466);
    const double C83950 = C83948 + C83465;
    const double C17658 =
        (C83166 + ae * C82773 * C82754 + C82773 * (C82758 + C82773 * C83485) +
         ae * (C83336 + C82773 * (C82773 * C82730 * C83486 + C83465) +
               C82773 * C83461 * ae) +
         C82730 * (ae * (C82797 + C82773 * (C82773 * C83486 + C82701) +
                         C82773 * C82697 * ae) +
                   C82730 * (C83485 + ae * C82773 * C83460 +
                             C82773 * (ae * C83460 + C82773 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82860)))) /
        C81964;
    const double C83949 = C83947 * ae;
    const double C83813 = C83811 * ae;
    const double C30908 = 3 * (C82638 + C82661 * C82912) +
                          C82773 * (2 * C83385 + C82773 * C83811);
    const double C82715 = C82664 + C82711;
    const double C82942 = ae * C82936;
    const double C83303 = C82936 * C82912;
    const double C83406 = C82773 * C82936;
    const double C83006 = ae * C83000;
    const double C83070 = C82671 + C83067;
    const double C83255 = C82671 + C83252;
    const double C83545 = C82748 + C83540;
    const double C83607 = ae * C83601;
    const double C83673 = C83443 + C83670;
    const double C83923 = C82791 + C83919;
    const double C82714 = C82693 + C82710;
    const double C82939 = C82615 * C82933;
    const double C83404 = C82773 * C82933;
    const double C5120 = (2 * ae * (C82730 * C82640 + C82932 * C82912) +
                          C82615 * (C82946 + C82933 * C82912)) /
                         C81964;
    const double C18819 =
        (2 * C82773 * C82946 + C82773 * (C82946 + C82933 * C82912)) / C81964;
    const double C83003 = C82615 * C82997;
    const double C83068 = C82670 + C83065;
    const double C83253 = C82670 + C83250;
    const double C82855 = C82848 + C82854;
    const double C83463 = C82730 * C83458;
    const double C83735 = C82773 * C83458;
    const double C83535 = C83526 + C83527;
    const double C83604 = C82730 * C83598;
    const double C83671 = C82848 + C83668;
    const double C82929 = C82922 + C82928;
    const double C83803 = C82773 * C83502;
    const double C83945 = C82730 * C83502;
    const double C21612 =
        (2 * ae * (2 * C83336 + C82730 * C83490) +
         C82773 *
             (2 * C82730 * C83502 +
              C82730 * (C83502 + C82615 *
                                     (C82687 * C82688 +
                                      C82912 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82838))) /
        C81964;
    const double C83582 = C82922 + C83581;
    const double C83853 = C82773 * C83848;
    const double C83914 = C83904 + C83905;
    const double C83546 = C83533 + C83542;
    const double C83711 = C83709 + C83541;
    const double C83712 = C83710 * ae;
    const double C83861 = ae * C83858;
    const double C83860 = C82773 * C83858;
    const double C83859 = C83856 * ae;
    const double C31336 = 3 * (C83156 + C83440 * C82912) +
                          C82773 * (2 * C83721 + C82773 * C83856);
    const double C83917 = C83911 + C83912;
    const double C83095 = C83094 + C82669;
    const double C9123 = C84344 * C1445;
    const double C54126 = C84344 * C1445;
    const double C9274 = C84246 * C1539;
    const double C4730 = C84561 * C4716;
    const double C26891 = C84561 * C4716;
    const double C63594 = C63169 * C4716;
    const double C4908 = C84246 * C4890;
    const double C199 = C84246 * C177;
    const double C397 = C172 * C177;
    const double C470 = C251 * C177;
    const double C939 = C172 * C782;
    const double C2120 = C1786 * C782;
    const double C6796 = C84304 * C782;
    const double C7037 = C6775 * C782;
    const double C7136 = C251 * C782;
    const double C39051 = C84304 * C782;
    const double C39286 = C39030 * C782;
    const double C1399 = C172 * C1242;
    const double C8800 = C84246 * C1242;
    const double C9122 = C8871 * C1242;
    const double C54125 = C53879 * C1242;
    const double C4329 = C84246 * C4309;
    const double C4626 = C172 * C4309;
    const double C4729 = C4415 * C4309;
    const double C6162 = C1680 * C4309;
    const double C26890 = C26620 * C4309;
    const double C6261 = C172 * C5952;
    const double C83426 = C82674 + C83425;
    const double C83434 = C82674 + C83433;
    const double C31056 =
        (3 * (C82826 + C82832 * C82912) +
         C82773 *
             (2 * C83733 +
              C82773 * (C82832 + (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818) *
                                     C82912))) /
        C81964;
    const double C82769 = C82762 + C82767;
    const double C82834 = C82828 + C82833;
    const double C31146 =
        (3 * (C83166 + ae * C83768 + C82773 * C83742) +
         ae * (2 * C83768 + C82773 * C83770) +
         C82773 * (2 * C83742 + ae * C83770 +
                   C82773 * (C83485 + ae * C82773 * C83460 +
                             C82773 * (ae * C83460 + C82773 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82860)))) /
        C81964;
    const double C31234 =
        (3 * (C83173 + ae * C83768 + C82773 * C83782) +
         ae * (2 * C83768 + C82773 * C83770) +
         C82773 * (2 * C83782 + ae * C83770 +
                   C82773 * (C83497 + ae * C82773 * C83460 +
                             C82773 * (ae * C83460 + C82773 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82897)))) /
        C81964;
    const double C32805 = C84561 * C5520;
    const double C43579 = C84561 * C5520;
    const double C65904 = C63169 * C5520;
    const double C35448 = C84543 * C6346;
    const double C58919 = C84543 * C6346;
    const double C35593 = C84246 * C6518;
    const double C83150 = ae * C83147;
    const double C83149 = C82730 * C83147;
    const double C83212 = C82773 * C83147;
    const double C83459 = 2 * C83147;
    const double C5200 = (C83091 + C83147 * C82912) / C81958;
    const double C35372 = C35370 + C6262;
    const double C35142 = C35138 + C35139;
    const double C83525 = C82848 + C83448;
    const double C83449 = C82741 + C83446;
    const double C83602 = ae * C83596;
    const double C83696 = 2 * C83596;
    const double C83641 = C83157 + C83640;
    const double C83679 = C83677 + C83678;
    const double C83901 = C83897 + C83900;
    const double C31102 = C172 * C30958;
    const double C31803 = C84246 * C30958;
    const double C31911 = C15867 * C30958;
    const double C201 = C84246 * C183;
    const double C4323 = C84246 * C1248;
    const double C10874 = C84528 * C1248;
    const double C48338 = C38937 * C1248;
    const double C4327 = C84246 * C4312;
    const double C32373 = C84528 * C4312;
    const double C43127 = C38937 * C4312;
    const double C35141 = C84246 * C5956;
    const double C38367 = C84304 * C18910;
    const double C74031 = C84304 * C18910;
    const double C31811 = C31807 * C84188;
    const double C36454 = C31807 * C84509;
    const double C59921 = C31807 * C40953;
    const double C83296 = C83295 + C82669;
    const double C7137 = C84257 * C985;
    const double C7283 = C84304 * C1079;
    const double C39529 = C84304 * C1079;
    const double C2233 = C84257 * C2215;
    const double C2409 = C84558 * C2395;
    const double C14274 = C84558 * C2395;
    const double C46586 = C45935 * C2395;
    const double C278 = C84257 * C256;
    const double C586 = C172 * C256;
    const double C656 = C251 * C256;
    const double C1132 = C251 * C834;
    const double C6880 = C84257 * C834;
    const double C7282 = C6775 * C834;
    const double C39528 = C39030 * C834;
    const double C1592 = C251 * C1294;
    const double C5020 = C4414 * C1294;
    const double C8892 = C84344 * C1294;
    const double C9273 = C172 * C1294;
    const double C9363 = C8871 * C1294;
    const double C53900 = C84344 * C1294;
    const double C54363 = C53879 * C1294;
    const double C1928 = C84257 * C1908;
    const double C2408 = C1787 * C1908;
    const double C2505 = C251 * C1908;
    const double C3193 = C1680 * C1908;
    const double C14273 = C13724 * C1908;
    const double C3359 = C251 * C2793;
    const double C4130 = C251 * C3628;
    const double C12611 = C8871 * C3628;
    const double C56633 = C53879 * C3628;
    const double C4131 = C251 * C3631;
    const double C5755 = C4414 * C3631;
    const double C9982 = C8871 * C3631;
    const double C10994 = C84344 * C3631;
    const double C11535 = C6775 * C3631;
    const double C12406 = C1680 * C3631;
    const double C48945 = C39030 * C3631;
    const double C54981 = C53879 * C3631;
    const double C60715 = C84344 * C3631;
    const double C83758 = C82674 + C83757;
    const double C83776 = C82674 + C83775;
    const double C83845 = C83448 + C83844;
    const double C82812 = C82805 + C82810;
    const double C82892 = C82886 + C82891;
    const double C16127 =
        (3 * (C83166 + ae * C83336 + C82730 * C83489) +
         ae * (2 * C83336 + C82730 * C83490) +
         C82730 * (2 * C83489 + ae * C83490 +
                   C82730 * (C83485 + ae * C82730 * C83486 +
                             C82730 * (ae * C83486 + C82730 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82860)))) /
        C81964;
    const double C16215 =
        (3 * (C83173 + ae * C83336 + C82730 * C83499) +
         ae * (2 * C83336 + C82730 * C83490) +
         C82730 * (2 * C83499 + ae * C83490 +
                   C82730 * (C83497 + ae * C82730 * C83486 +
                             C82730 * (ae * C83486 + C82730 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82897)))) /
        C81964;
    const double C20069 = C84257 * C3097;
    const double C20211 = C84536 * C3275;
    const double C41521 = C84536 * C3275;
    const double C83338 = C83337 + C83148;
    const double C83389 = ae * C83386;
    const double C83388 = C82773 * C83386;
    const double C83804 = 2 * C83386;
    const double C20287 = C20285 + C3360;
    const double C19825 = C19821 + C19822;
    const double C21942 = C21935 + C21936;
    const double C83655 = C83654 + C83447;
    const double C16261 = C251 * C15977;
    const double C16430 = C84257 * C15977;
    const double C16658 = C15867 * C15977;
    const double C17180 = C251 * C16906;
    const double C18721 = C4414 * C16906;
    const double C23538 = C8871 * C16906;
    const double C25273 = C84344 * C16906;
    const double C25573 = C15867 * C16906;
    const double C57578 = C53879 * C16906;
    const double C71527 = C84344 * C16906;
    const double C83569 = C83566 + C83567;
    const double C83579 = C83575 + C83578;
    const double C83725 = ae * C83722;
    const double C83724 = C82773 * C83722;
    const double C83849 = 2 * C83722;
    const double C83621 = C83619 + C83620;
    const double C83903 = C82922 + C83619;
    const double C83791 = C82784 + C83787;
    const double C280 = C84257 * C262;
    const double C1922 = C84257 * C840;
    const double C10996 = C84529 * C840;
    const double C60717 = C53740 * C840;
    const double C1926 = C84257 * C1911;
    const double C21938 = C84529 * C1911;
    const double C55986 = C53740 * C1911;
    const double C19824 = C84257 * C2797;
    const double C16438 = C16434 * C84188;
    const double C20530 = C16434 * C84509;
    const double C41835 = C16434 * C40953;
    const double C6151 = C84550 * C1347;
    const double C28207 = C84550 * C1347;
    const double C50397 = C45932 * C1347;
    const double C6161 = C1670 * C4535;
    const double C34471 = C84198 * C4535;
    const double C45307 = C84198 * C4535;
    const double C36596 = C84198 * C6137;
    const double C60063 = C84198 * C6137;
    const double C16499 = C84188 * C16023;
    const double C3797 =
        (2 * ae * C82773 * C82743 + C82730 * C82773 * C83144) / C81964;
    const double C4613 = (C82615 * C82843 + C83144 * C82912) / C81964;
    const double C5437 = (2 * ae * (C82743 + C82754 * C82912) +
                          C82730 * (C83144 + C82615 * C82853 * C82912)) /
                         C81964;
    const double C6250 =
        (2 * C82773 * C83144 + C82773 * (C83144 + C82615 * C82853 * C82912)) /
        C81964;
    const double C83442 = C83436 + C83437;
    const double C398 = C84246 * C383;
    const double C7032 = C84304 * C934;
    const double C14004 = C13622 * C934;
    const double C39281 = C84304 * C934;
    const double C4620 = C84246 * C1394;
    const double C11208 = C84528 * C1394;
    const double C48640 = C38937 * C1394;
    const double C19211 = C13622 * C5438;
    const double C34578 = C84304 * C5438;
    const double C45421 = C84304 * C5438;
    const double C31967 = C84246 * C6251;
    const double C38583 = C84528 * C6251;
    const double C74247 = C38937 * C6251;
    const double C4733 = C4723 + C4724;
    const double C16602 = C84257 * C16126;
    const double C18452 = C84561 * C17657;
    const double C29816 = C84561 * C17657;
    const double C80966 = C63169 * C17657;
    const double C7132 = C2236 * C84304;
    const double C14112 = C2236 * C13622;
    const double C39381 = C2236 * C84304;
    const double C3188 = C84550 * C1033;
    const double C14974 = C84550 * C1033;
    const double C47286 = C45932 * C1033;
    const double C3192 = C1670 * C2316;
    const double C20848 = C84198 * C2316;
    const double C42153 = C84198 * C2316;
    const double C20852 = C84198 * C3180;
    const double C42157 = C84198 * C3180;
    const double C32068 = C84188 * C31189;
    const double C32117 = C84246 * C31233;
    const double C9269 = C4911 * C84344;
    const double C27055 = C4911 * C26459;
    const double C54272 = C4911 * C84344;
    const double C3352 =
        (2 * C82730 * C83177 + C82730 * (C83177 + C82615 * C82927 * C82838)) /
        C81964;
    const double C4125 = (2 * ae * (C82786 + C82797 * C82838) +
                          C82773 * (C83177 + C82615 * C82927 * C82838)) /
                         C81964;
    const double C4126 =
        (2 * ae * C82730 * C82786 + C82773 * C82730 * C83177) / C81964;
    const double C16259 =
        (3 * (C83177 + C83502 * C82838) +
         C82730 *
             (2 * C82730 * C83502 +
              C82730 * (C83502 + C82615 *
                                     (C82687 * C82688 +
                                      C82912 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82838))) /
        C81964;
    const double C83790 = C83784 + C83785;
    const double C657 = C84257 * C642;
    const double C2503 = C84257 * C1127;
    const double C11644 = C84529 * C1127;
    const double C61319 = C53740 * C1127;
    const double C9358 = C84344 * C1587;
    const double C27152 = C26459 * C1587;
    const double C54358 = C84344 * C1587;
    const double C2500 = C84257 * C2490;
    const double C22564 = C84529 * C2490;
    const double C56629 = C53740 * C2490;
    const double C16755 = C84257 * C3353;
    const double C25710 = C84529 * C3353;
    const double C71955 = C53740 * C3353;
    const double C23535 = C84344 * C4127;
    const double C30066 = C26459 * C4127;
    const double C57575 = C84344 * C4127;
    const double C16757 = C84257 * C16258;
    const double C11328 = C84344 * C3884;
    const double C61021 = C84344 * C3884;
    const double C22257 = C84344 * C3885;
    const double C56313 = C84344 * C3885;
    const double C16907 =
        (ae * (3 * C83423 + C82730 * C83514) +
         C82773 * (3 * C83517 +
                   C82730 * (2 * C82730 * C82802 +
                             C82730 * (C82802 + std::pow(C82621, 7) * bs[7] *
                                                    C82777 * C82838)))) /
        C81964;
    const double C16951 =
        (3 * (C82773 * C82824 + ae * C82773 * C82932 + C82730 * C83592) +
         ae * C82773 * C83514 +
         C82730 * (2 * C83592 + ae * C82773 * C83510 +
                   C82730 * (C83590 + ae * C82773 * C82730 * C82700 +
                             C82730 * (ae * C82773 * C82700 +
                                       C82730 * C82773 * std::pow(C82621, 7) *
                                           bs[7] * C82818)))) /
        C81964;
    const double C17088 =
        (ae * (3 * C83423 + C82730 * C83514) +
         C82773 * (3 * C83573 +
                   C82730 * (2 * C82730 * C82888 +
                             C82730 * (C82888 + std::pow(C82621, 7) * bs[7] *
                                                    C82876 * C82838)))) /
        C81964;
    const double C18148 =
        (2 * C82730 * C82790 + C82730 * C83517 + ae * C82773 * C83514 +
         C82773 * (ae * C83514 +
                   C82773 * (2 * C82730 * C82802 +
                             C82730 * (C82802 + std::pow(C82621, 7) * bs[7] *
                                                    C82777 * C82838)))) /
        C81964;
    const double C18532 =
        (2 * C82730 * C82882 + C82730 * C83573 + ae * C82773 * C83514 +
         C82773 * (ae * C83514 +
                   C82773 * (2 * C82730 * C82888 +
                             C82730 * (C82888 + std::pow(C82621, 7) * bs[7] *
                                                    C82876 * C82838)))) /
        C81964;
    const double C21058 =
        (2 * ae * C82773 * C83514 +
         C82615 * C82773 *
             (2 * C82933 +
              C82730 * (C82707 + (C82687 * C82688 +
                                  C82619 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82838))) /
        C81964;
    const double C16305 = (4 * (2 * C83314 + C82730 * C83423) +
                           C82730 * (3 * C83423 + C82730 * C83514)) /
                          C81958;
    const double C16808 = (C82773 * (3 * C83423 + C82730 * C83514)) / C81958;
    const double C17968 =
        (2 * C83314 + C82730 * C83423 + C83514 * C82912) / C81958;
    const double C31340 = C15867 * C31337;
    const double C31736 = (4 * (2 * C83751 + C82773 * C83755) +
                           C82773 * (3 * C83755 + C82773 * C83883)) /
                          C81958;
    const double C83098 = C82730 * C82770;
    const double C1444 =
        (ae * (3 * C82752 + C82615 * C82770) +
         C82773 * (3 * C82871 +
                   C82615 * (2 * C82615 * C82869 +
                             C82615 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C1538 =
        (ae * (3 * C82752 + C82615 * C82770) +
         C82773 * (3 * C82908 +
                   C82615 * (2 * C82615 * C82906 +
                             C82615 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C4717 =
        (2 * C83166 + C82615 * C82871 + ae * C82773 * C82770 +
         C82773 * (ae * C82770 +
                   C82773 * (2 * C82615 * C82869 +
                             C82615 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C4891 =
        (2 * C83173 + C82615 * C82908 + ae * C82773 * C82770 +
         C82773 * (ae * C82770 +
                   C82773 * (2 * C82615 * C82906 +
                             C82615 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C8382 =
        (2 * ae * C82773 * C82770 +
         C82730 * C82773 *
             (2 * C82615 * C82853 +
              C82615 * (C82853 + (C82687 * C82688 +
                                  C82838 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82619))) /
        C81964;
    const double C178 = (4 * (2 * C82743 + C82615 * C82752) +
                         C82615 * (3 * C82752 + C82615 * C82770)) /
                        C81958;
    const double C1241 = (C82773 * (3 * C82752 + C82615 * C82770)) / C81958;
    const double C4310 =
        (2 * C82743 + C82615 * C82752 + C82770 * C82912) / C81958;
    const double C31103 = C172 * C30959;
    const double C31791 = (4 * (2 * C83764 + C82773 * C83766) +
                           C82773 * (3 * C83766 + C82773 * C83889)) /
                          C81958;
    const double C83299 = C82773 * C82813;
    const double C984 =
        (ae * (3 * C82795 + C82615 * C82813) +
         C82730 * (3 * C82871 +
                   C82615 * (2 * C82615 * C82869 +
                             C82615 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C1078 =
        (ae * (3 * C82795 + C82615 * C82813) +
         C82730 * (3 * C82908 +
                   C82615 * (2 * C82615 * C82906 +
                             C82615 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C2216 =
        (2 * C82615 * C82866 + C82615 * C82871 + ae * C82730 * C82813 +
         C82730 * (ae * C82813 +
                   C82730 * (2 * C82615 * C82869 +
                             C82615 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C2396 =
        (2 * C82615 * C82903 + C82615 * C82908 + ae * C82730 * C82813 +
         C82730 * (ae * C82813 +
                   C82730 * (2 * C82615 * C82906 +
                             C82615 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C8658 =
        (2 * ae * C82730 * C82813 +
         C82773 * C82730 *
             (2 * C82615 * C82927 +
              C82615 * (C82927 + (C82687 * C82688 +
                                  C82912 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82619))) /
        C81964;
    const double C257 = (4 * (2 * C82786 + C82615 * C82795) +
                         C82615 * (3 * C82795 + C82615 * C82813)) /
                        C81958;
    const double C833 = (C82730 * (3 * C82795 + C82615 * C82813)) / C81958;
    const double C1909 =
        (2 * C82786 + C82615 * C82795 + C82813 * C82838) / C81958;
    const double C16262 = C251 * C15978;
    const double C83683 = C82773 * C83570;
    const double C16418 = (4 * (2 * C83341 + C82730 * C83483) +
                           C82730 * (3 * C83483 + C82730 * C83570)) /
                          C81958;
    const double C82027 = C82022 / C81958;
    const double C82026 = C82021 / C81958;
    const double C20854 = C20843 + C20844;
    const double C23965 = C23960 + C23961;
    const double C82006 = C82002 + C84198;
    const double C82067 = C82063 - C82066;
    const double C13629 = C82063 + (0 * ae) / C81958;
    const double C82005 = C84188 - C82000;
    const double C16504 = C16492 + C16493;
    const double C16502 = C16488 + C16489;
    const double C16501 = C16486 + C16487;
    const double C16500 = C16484 + C16485;
    const double C16662 = C16655 + C16656;
    const double C16661 = C16652 + C16653;
    const double C16660 = C16649 + C16650;
    const double C18281 = C18269 + C18270;
    const double C18279 = C18265 + C18266;
    const double C18277 = C18261 + C18262;
    const double C18552 = C18545 + C18546;
    const double C18550 = C18537 + C18538;
    const double C19121 = C19112 + C19113;
    const double C19120 = C19110 + C19111;
    const double C19119 = C19104 + C19105;
    const double C19118 = C19102 + C19103;
    const double C19391 = C19387 + C19388;
    const double C31914 = C31907 + C31908;
    const double C31913 = C31905 + C31906;
    const double C37847 = C37843 + C37844;
    const double C42159 = C42148 + C42149;
    const double C45311 = C45298 + C45299;
    const double C46754 = C84193 * C1689;
    const double C46748 = C84193 * C733;
    const double C46935 = C2819 * C84193;
    const double C46929 = C2817 * C84193;
    const double C47033 = C84193 * C2012;
    const double C47027 = C84193 * C1685;
    const double C47021 = C84193 * C889;
    const double C47015 = C84193 * C728;
    const double C47288 = C84193 * C2315;
    const double C47282 = C84193 * C1035;
    const double C49146 = C84193 * C3458;
    const double C49461 = C84193 * C3719;
    const double C49455 = C84193 * C3452;
    const double C49769 = C84193 * C3968;
    const double C50072 = C84193 * C1193;
    const double C50393 = C84193 * C1349;
    const double C50387 = C84193 * C1188;
    const double C50699 = C84193 * C1495;
    const double C64630 = C84193 * C4220;
    const double C64728 = C5978 * C84193;
    const double C64722 = C5976 * C84193;
    const double C64888 = C84193 * C4534;
    const double C64882 = C84193 * C4216;
    const double C65128 = C84193 * C4810;
    const double C84508 = C84193 * C84183;
    const double C84549 = C84513 + C84193;
    const double C14444 = C84574 * C1690;
    const double C14438 = C84574 * C732;
    const double C14717 = C84574 * C1686;
    const double C14705 = C84574 * C727;
    const double C14978 = C84574 * C2316;
    const double C14972 = C84574 * C1034;
    const double C27938 = C84574 * C4221;
    const double C27932 = C84574 * C1192;
    const double C28217 = C84574 * C4535;
    const double C28211 = C84574 * C4217;
    const double C28205 = C84574 * C1348;
    const double C28199 = C84574 * C1187;
    const double C46756 = C84201 * C1690;
    const double C46750 = C84201 * C732;
    const double C47029 = C84201 * C1686;
    const double C47017 = C84201 * C727;
    const double C47290 = C84201 * C2316;
    const double C47284 = C84201 * C1034;
    const double C50074 = C84201 * C1192;
    const double C50395 = C84201 * C1348;
    const double C50389 = C84201 * C1187;
    const double C64632 = C84201 * C4221;
    const double C64890 = C84201 * C4535;
    const double C64884 = C84201 * C4217;
    const double C84516 = C84201 / C81965;
    const double C84512 = C84201 * C84183;
    const double C6678 = C84591 - (C84193 * C84184) / C81958;
    const double C82127 = C84246 - C82126;
    const double C14277 = C14267 + C14268;
    const double C18941 = C18922 + C18923;
    const double C39061 = C39042 + C39043;
    const double C39057 = C39034 + C39035;
    const double C39533 = C39524 + C39525;
    const double C39531 = C39520 + C39521;
    const double C45095 = C45086 + C45087;
    const double C45091 = C45078 + C45079;
    const double C82256 = C82252 + C84304;
    const double C82280 = C82277 - C82279;
    const double C408 = C404 + C389;
    const double C6268 = C6266 + C6254;
    const double C46057 = C84300 * C181;
    const double C46051 = C84300 * C175;
    const double C46045 = C84300 * C180;
    const double C46039 = C84300 * C174;
    const double C46313 = C84300 * C381;
    const double C46304 = C84300 * C380;
    const double C46422 = C473 * C84300;
    const double C46416 = C472 * C84300;
    const double C46582 = C84300 * C571;
    const double C46576 = C84300 * C570;
    const double C51108 = C84300 * C1249;
    const double C51102 = C84300 * C1244;
    const double C51414 = C84300 * C1395;
    const double C51723 = C84300 * C1541;
    const double C52948 = C84300 * C1250;
    const double C52942 = C84300 * C1245;
    const double C53254 = C84300 * C1396;
    const double C53569 = C84300 * C1542;
    const double C81377 = C84300 * C4311;
    const double C81371 = C84300 * C4307;
    const double C81623 = C84300 * C4612;
    const double C81863 = C84300 * C4888;
    const double C84531 = C84300 * C84294;
    const double C84565 = C84533 + C84300;
    const double C1812 = C84581 * C783;
    const double C1800 = C84581 * C784;
    const double C2115 = C84581 * C934;
    const double C2106 = C84581 * C935;
    const double C2240 = C2236 * C84581;
    const double C2238 = C2234 * C84581;
    const double C2407 = C84581 * C1080;
    const double C2401 = C84581 * C1081;
    const double C30259 = C84581 * C5204;
    const double C30253 = C84581 * C5201;
    const double C30247 = C84581 * C3553;
    const double C30241 = C84581 * C3547;
    const double C30517 = C84581 * C5438;
    const double C30511 = C84581 * C3799;
    const double C46053 = C84307 * C783;
    const double C46041 = C84307 * C784;
    const double C46316 = C84307 * C934;
    const double C46307 = C84307 * C935;
    const double C46424 = C2236 * C84307;
    const double C46418 = C2234 * C84307;
    const double C46584 = C84307 * C1080;
    const double C46578 = C84307 * C1081;
    const double C52950 = C84307 * C3553;
    const double C52944 = C84307 * C3547;
    const double C53256 = C84307 * C3799;
    const double C81379 = C84307 * C5204;
    const double C81373 = C84307 * C5201;
    const double C81625 = C84307 * C5438;
    const double C84535 = C84307 / C81965;
    const double C84532 = C84307 * C84294;
    const double C19636 = C84598 - (C84300 * C84296) / C81958;
    const double C1827 = C1809 + C1810;
    const double C1824 = C1803 + C1804;
    const double C1821 = C1797 + C1798;
    const double C2413 = C2404 + C2405;
    const double C2410 = C2398 + C2399;
    const double C30271 = C30256 + C30257;
    const double C30268 = C30250 + C30251;
    const double C30265 = C30244 + C30245;
    const double C30262 = C30238 + C30239;
    const double C30775 = C30763 + C30764;
    const double C55869 = C55857 + C55858;
    const double C56520 = C56514 + C56515;
    const double C82153 = C84257 - C82152;
    const double C26894 = C26884 + C26885;
    const double C29570 = C29551 + C29552;
    const double C53910 = C53891 + C53892;
    const double C53906 = C53883 + C53884;
    const double C54130 = C54121 + C54122;
    const double C54128 = C54117 + C54118;
    const double C55994 = C55983 + C55984;
    const double C55990 = C55975 + C55976;
    const double C56964 = C56955 + C56956;
    const double C56962 = C56951 + C56952;
    const double C56960 = C56947 + C56948;
    const double C56958 = C56943 + C56944;
    const double C82406 = C82402 + C84344;
    const double C82430 = C82427 - C82429;
    const double C667 = C663 + C648;
    const double C3366 = C3364 + C3356;
    const double C63344 = C84340 * C260;
    const double C63338 = C84340 * C254;
    const double C63332 = C84340 * C259;
    const double C63326 = C84340 * C253;
    const double C63590 = C84340 * C455;
    const double C63584 = C84340 * C454;
    const double C63756 = C589 * C84340;
    const double C63750 = C588 * C84340;
    const double C63852 = C84340 * C640;
    const double C63843 = C84340 * C639;
    const double C65594 = C84340 * C841;
    const double C65588 = C84340 * C836;
    const double C65900 = C84340 * C987;
    const double C66203 = C84340 * C1128;
    const double C66518 = C84340 * C842;
    const double C66512 = C84340 * C837;
    const double C66824 = C84340 * C988;
    const double C67127 = C84340 * C1129;
    const double C80725 = C84340 * C1910;
    const double C80719 = C84340 * C1906;
    const double C80962 = C84340 * C2213;
    const double C81205 = C84340 * C2489;
    const double C84538 = C84340 * C84334;
    const double C84570 = C84540 + C84340;
    const double C4440 = C84583 * C1295;
    const double C4428 = C84583 * C1296;
    const double C4728 = C84583 * C1446;
    const double C4722 = C84583 * C1447;
    const double C4915 = C4911 * C84583;
    const double C4913 = C4909 * C84583;
    const double C5015 = C84583 * C1587;
    const double C5006 = C84583 * C1588;
    const double C18171 = C84583 * C3636;
    const double C18165 = C84583 * C3630;
    const double C18159 = C84583 * C3639;
    const double C18153 = C84583 * C3633;
    const double C18450 = C84583 * C3887;
    const double C18444 = C84583 * C3888;
    const double C18717 = C84583 * C4127;
    const double C18711 = C84583 * C4128;
    const double C43239 = C84583 * C3632;
    const double C43577 = C84583 * C3886;
    const double C63340 = C84347 * C1295;
    const double C63328 = C84347 * C1296;
    const double C63592 = C84347 * C1446;
    const double C63586 = C84347 * C1447;
    const double C63758 = C4911 * C84347;
    const double C63752 = C4909 * C84347;
    const double C63855 = C84347 * C1587;
    const double C63846 = C84347 * C1588;
    const double C65590 = C84347 * C3632;
    const double C65902 = C84347 * C3886;
    const double C66520 = C84347 * C3639;
    const double C66514 = C84347 * C3633;
    const double C66826 = C84347 * C3888;
    const double C67129 = C84347 * C4128;
    const double C80727 = C84347 * C3636;
    const double C80721 = C84347 * C3630;
    const double C80964 = C84347 * C3887;
    const double C81207 = C84347 * C4127;
    const double C84542 = C84347 / C81965;
    const double C84539 = C84347 * C84334;
    const double C35065 = C84600 - (C84340 * C84336) / C81958;
    const double C4455 = C4437 + C4438;
    const double C4452 = C4431 + C4432;
    const double C4449 = C4425 + C4426;
    const double C4734 = C4725 + C4726;
    const double C4731 = C4719 + C4720;
    const double C18183 = C18168 + C18169;
    const double C18180 = C18162 + C18163;
    const double C18177 = C18156 + C18157;
    const double C18174 = C18150 + C18151;
    const double C18453 = C18441 + C18442;
    const double C43248 = C43236 + C43237;
    const double C43580 = C43574 + C43575;
    const double C82273 = C82271 / C81958;
    const double C82318 = C82315 / C81958;
    const double C82423 = C82421 / C81958;
    const double C82468 = C82465 / C81958;
    const double C1806 = C84581 * C789;
    const double C6784 = C84304 * C789;
    const double C13735 = C13622 * C789;
    const double C39039 = C84304 * C789;
    const double C46047 = C84307 * C789;
    const double C2910 = C1670 * C888;
    const double C14711 = C84574 * C888;
    const double C20606 = C84198 * C888;
    const double C41911 = C84198 * C888;
    const double C47023 = C84201 * C888;
    const double C4434 = C84583 * C1301;
    const double C8880 = C84344 * C1301;
    const double C26631 = C26459 * C1301;
    const double C53888 = C84344 * C1301;
    const double C63334 = C84347 * C1301;
    const double C6429 = C1670 * C1494;
    const double C24263 = C84198 * C1494;
    const double C28463 = C84574 * C1494;
    const double C45637 = C84198 * C1494;
    const double C50701 = C84201 * C1494;
    const double C205 = C192 + C193;
    const double C284 = C271 + C272;
    const double C1830 = C1815 + C1816;
    const double C4458 = C4443 + C4444;
    const double C1932 = C1917 + C1918;
    const double C20624 = C20601 + C20602;
    const double C41929 = C41906 + C41907;
    const double C43251 = C43242 + C43243;
    const double C4333 = C4318 + C4319;
    const double C23963 = C23956 + C23957;
    const double C45309 = C45294 + C45295;
    const double C55872 = C55863 + C55864;
    const double C2094 =
        (C82615 * C82843 + C83092 + C83092 +
         C82730 * (2 * ae * C82743 + C82730 * C82615 * C82848)) /
        C81964;
    const double C4046 =
        (C83092 + C82773 * (ae * C82786 + C82730 * C83173)) / C81964;
    const double C1802 = C84558 * C1789;
    const double C2108 = C1787 * C1789;
    const double C2224 = C251 * C1789;
    const double C3018 = C1786 * C1789;
    const double C7757 = C6775 * C1789;
    const double C13731 = C84558 * C1789;
    const double C13997 = C13724 * C1789;
    const double C20613 = C81997 * C1789;
    const double C39998 = C39030 * C1789;
    const double C41918 = C40962 * C1789;
    const double C46043 = C45935 * C1789;
    const double C3805 = C1786 * C3545;
    const double C5444 = C172 * C3545;
    const double C8388 = C6775 * C3545;
    const double C10864 = C84304 * C3545;
    const double C11323 = C8871 * C3545;
    const double C21820 = C13622 * C3545;
    const double C23003 = C81997 * C3545;
    const double C40620 = C39030 * C3545;
    const double C43117 = C84304 * C3545;
    const double C43576 = C4414 * C3545;
    const double C44324 = C40962 * C3545;
    const double C51104 = C84307 * C3545;
    const double C55860 = C84581 * C3545;
    const double C56308 = C53879 * C3545;
    const double C57163 = C1785 * C3545;
    const double C4994 = (C82615 * C82917 + C83293 + C83293 +
                          C82773 * (2 * ae * C82786 + C82773 * C83177)) /
                         C81964;
    const double C4430 = C84561 * C4417;
    const double C4899 = C172 * C4417;
    const double C5008 = C4415 * C4417;
    const double C6608 = C4414 * C4417;
    const double C10658 = C8871 * C4417;
    const double C26627 = C84561 * C4417;
    const double C27145 = C26620 * C4417;
    const double C34789 = C81997 * C4417;
    const double C45640 = C40962 * C4417;
    const double C55657 = C53879 * C4417;
    const double C63330 = C63169 * C4417;
    const double C2223 = C1935 * C1787;
    const double C14107 = C1935 * C13724;
    const double C20527 = C1935 * C81997;
    const double C41832 = C1935 * C40962;
    const double C2513 = C2509 + C2499;
    const double C4898 = C4336 * C4415;
    const double C27050 = C4336 * C26620;
    const double C36451 = C4336 * C81997;
    const double C59918 = C4336 * C40962;
    const double C4635 = C4631 + C4623;
    const double C10868 = C84304 * C3551;
    const double C21826 = C13622 * C3551;
    const double C43121 = C84304 * C3551;
    const double C51110 = C84307 * C3551;
    const double C55866 = C84581 * C3551;
    const double C82649 = C82648 + C82641;
    const double C731 =
        (C82730 * C82644 + C82951 + C82951 +
         C82615 * (2 * ae * C82730 * C82640 + C82615 * C82946)) /
        C81964;
    const double C1793 = (ae * C82736 + C82615 * C82740 + C82951 +
                          C82730 * (C82647 + C82730 * C82751)) /
                         C81964;
    const double C2013 = (ae * C82736 + C82615 * C82821 + C82951 +
                          C82730 * (C82647 + C82730 * C82826)) /
                         C81964;
    const double C3638 = (C82951 + C82773 * C82730 * C82794) / C81964;
    const double C3967 = (C82951 + C82773 * C82730 * C82884) / C81964;
    const double C10867 = C6775 * C3451;
    const double C10989 = C8871 * C3451;
    const double C12081 = C1670 * C3451;
    const double C17267 = C15867 * C3451;
    const double C21064 = C81997 * C3451;
    const double C23000 = C84198 * C3451;
    const double C42366 = C40962 * C3451;
    const double C43120 = C39030 * C3451;
    const double C43244 = C4414 * C3451;
    const double C44321 = C84198 * C3451;
    const double C49457 = C84201 * C3451;
    const double C55865 = C1786 * C3451;
    const double C55979 = C53879 * C3451;
    const double C69330 = C84574 * C3451;
    const double C1191 =
        (C82773 * C82644 + C83015 + C83015 +
         C82615 * (2 * ae * C82773 * C82640 + C82615 * C83010)) /
        C81964;
    const double C3718 = (C83015 + C82730 * C82773 * C82826) / C81964;
    const double C4421 = (ae * C82779 + C82615 * C82783 + C83015 +
                          C82773 * (C82647 + C82773 * C82794)) /
                         C81964;
    const double C4811 = (ae * C82779 + C82615 * C82879 + C83015 +
                          C82773 * (C82647 + C82773 * C82884)) /
                         C81964;
    const double C20628 = C20609 + C20610;
    const double C41933 = C41914 + C41915;
    const double C34473 = C34466 + C34467;
    const double C45313 = C45302 + C45303;
    const double C83162 = C83161 + C83158;
    const double C3798 =
        (C82773 * C82843 + C83217 + C83217 +
         C82730 * (2 * ae * C82773 * C82741 + C82730 * C82773 * C82848)) /
        C81964;
    const double C5675 =
        (ae * C82779 + C82730 * C82900 + C83217 +
         C82773 * (C83160 + C82773 * (C82787 + C82730 * C82903))) /
        C81964;
    const double C83401 = C83400 + C83397;
    const double C5752 =
        (C82730 * C82917 + C83344 + C83344 +
         C82773 * (2 * ae * C83341 + C82773 * C82730 * C82922)) /
        C81964;
    const double C5760 = C4415 * C5281;
    const double C13543 = C8871 * C5281;
    const double C18155 = C84561 * C5281;
    const double C18540 = C15867 * C5281;
    const double C19567 = C4414 * C5281;
    const double C27852 = C26620 * C5281;
    const double C29546 = C84561 * C5281;
    const double C30771 = C1786 * C5281;
    const double C34894 = C6775 * C5281;
    const double C45750 = C39030 * C5281;
    const double C58480 = C53879 * C5281;
    const double C66516 = C63169 * C5281;
    const double C13438 = C84304 * C4048;
    const double C19472 = C13622 * C4048;
    const double C30766 = C84581 * C4048;
    const double C45747 = C84304 * C4048;
    const double C53571 = C84307 * C4048;
    const double C3105 = C3102 + C3103;
    const double C16503 = C16490 + C16491;
    const double C18456 = C18447 + C18448;
    const double C12303 = C12300 + C12301;
    const double C12828 = C12821 + C12822;
    const double C18278 = C18263 + C18264;
    const double C45089 = C45074 + C45075;
    const double C57271 = C57264 + C57265;
    const double C18282 = C18271 + C18272;
    const double C18455 = C18445 + C18446;
    const double C29819 = C29809 + C29810;
    const double C34262 = C34255 + C34256;
    const double C45093 = C45082 + C45083;
    const double C409 = C405 + C392;
    const double C410 = C406 + C395;
    const double C4637 = C4633 + C4618;
    const double C6269 = C6267 + C6258;
    const double C6526 = C6523 + C6524;
    const double C19392 = C19389 + C19390;
    const double C30778 = C30769 + C30770;
    const double C668 = C664 + C651;
    const double C669 = C665 + C654;
    const double C2516 = C2512 + C2497;
    const double C3367 = C3365 + C3358;
    const double C82692 = C82684 + C82674;
    const double C32375 = C84304 * C5203;
    const double C43129 = C84304 * C5203;
    const double C82677 = C82676 + C82665;
    const double C3550 =
        (C82773 * (C82751 + C82937 + C82730 * (C82674 + C82730 * C82765))) /
        C81964;
    const double C83186 = ae * C83185;
    const double C17266 = C15867 * C5117;
    const double C23650 = C81997 * C5117;
    const double C32374 = C6775 * C5117;
    const double C32488 = C26620 * C5117;
    const double C33529 = C84198 * C5117;
    const double C43007 = C40962 * C5117;
    const double C43128 = C39030 * C5117;
    const double C43246 = C4415 * C5117;
    const double C44329 = C84198 * C5117;
    const double C83063 = ae * C83062;
    const double C2601 = (2 * C82950 + C82730 * C83062) / C81958;
    const double C3448 = (C82773 * C83062) / C81958;
    const double C83248 = ae * C83247;
    const double C5840 = (2 * C83014 + C82773 * C83247) / C81958;
    const double C16375 =
        (4 * (2 * C83422 + ae * C83423 + C82730 * C83513) +
         ae * (3 * C83423 + C82730 * C83514) +
         C82730 * (3 * C83513 + ae * C83514 +
                   C82730 * (2 * C83509 + ae * C83510 +
                             C82730 * (C82759 + ae * C82730 * C82700 +
                                       C82730 * (ae * C82700 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C16861 =
        (C82773 * (3 * C83513 + ae * C83514 +
                   C82730 * (2 * C83509 + ae * C83510 +
                             C82730 * (C82759 + ae * C82730 * C82700 +
                                       C82730 * (ae * C82700 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C16862 =
        (C82773 * (2 * C83422 + ae * C83423 + C82730 * C83513)) / C81964;
    const double C17345 =
        (C82740 + ae * C83314 + C82730 * C83422 + C83513 * C82912) / C81964;
    const double C18072 =
        (2 * C83422 + ae * C83423 + C82730 * C83513 +
         (2 * C83509 + ae * C83510 +
          C82730 * (C82759 + ae * C82730 * C82700 +
                    C82730 * (ae * C82700 +
                              C82730 * std::pow(C82621, 7) * bs[7] * C82734))) *
             C82912) /
        C81964;
    const double C18909 =
        (2 * C82773 * C83513 +
         C82773 *
             (C83513 + (C82759 + ae * C82730 * C82700 +
                        C82730 * (ae * C82700 + C82730 * std::pow(C82621, 7) *
                                                    bs[7] * C82734)) *
                           C82912)) /
        C81964;
    const double C16482 =
        (4 * (2 * C83431 + ae * C83423 + C82730 * C83523) +
         ae * (3 * C83423 + C82730 * C83514) +
         C82730 * (3 * C83523 + ae * C83514 +
                   C82730 * (2 * C83521 + ae * C83510 +
                             C82730 * (C82830 + ae * C82730 * C82700 +
                                       C82730 * (ae * C82700 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C25351 = C84188 * C16952;
    const double C31856 =
        (4 * (2 * C83754 + ae * C83755 + C82773 * C83882) +
         ae * (3 * C83755 + C82773 * C83883) +
         C82773 * (3 * C83882 + ae * C83883 +
                   C82773 * (2 * C83878 + ae * C83879 +
                             C82773 * (C82802 + ae * C82773 * C82700 +
                                       C82773 * (ae * C82700 +
                                                 C82773 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C32063 =
        (4 * (2 * C83773 + ae * C83755 + C82773 * C83895) +
         ae * (3 * C83755 + C82773 * C83883) +
         C82773 * (3 * C83895 + ae * C83883 +
                   C82773 * (2 * C83893 + ae * C83879 +
                             C82773 * (C82888 + ae * C82773 * C82700 +
                                       C82773 * (ae * C82700 +
                                                 C82773 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C16436 = C16431 + C16432;
    const double C16506 = C16496 + C16497;
    const double C25281 = C25276 + C25277;
    const double C25352 = C25348 + C25349;
    const double C71535 = C71530 + C71531;
    const double C18185 = C18172 + C18173;
    const double C18283 = C18273 + C18274;
    const double C29576 = C29563 + C29564;
    const double C31809 = C31804 + C31805;
    const double C31915 = C31909 + C31910;
    const double C11760 = C1670 * C3457;
    const double C22674 = C84198 * C3457;
    const double C44005 = C84198 * C3457;
    const double C49148 = C84201 * C3457;
    const double C69021 = C84574 * C3457;
    const double C17975 = C84188 * C5121;
    const double C33223 = C84509 * C5121;
    const double C44007 = C40953 * C5121;
    const double C82712 = C82709 * ae;
    const double C781 = (C82730 * (3 * C82752 + C82615 * C82770) +
                         (3 * C82666 + C82615 * C82709) * ae) /
                        C81958;
    const double C1293 = (C82773 * (3 * C82795 + C82615 * C82813) +
                          (3 * C82666 + C82615 * C82709) * ae) /
                         C81958;
    const double C8247 =
        (C82773 * C82730 * C82813 + C82730 * C82709 * ae) / C81958;
    const double C107 = 4 * (2 * C82638 + C82615 * C82666) +
                        C82615 * (3 * C82666 + C82615 * C82709);
    const double C719 = C82730 * (3 * C82666 + C82615 * C82709);
    const double C1179 = C82773 * (3 * C82666 + C82615 * C82709);
    const double C1684 = 2 * C82638 + C82615 * C82666 + C82709 * C82838;
    const double C4215 = 2 * C82638 + C82615 * C82666 + C82709 * C82912;
    const double C8102 = C82773 * C82730 * C82709;
    const double C83139 = ae * C83136;
    const double C83138 = C82730 * C83136;
    const double C83208 = C82773 * C83136;
    const double C83379 = ae * C83376;
    const double C83378 = C82773 * C83376;
    const double C83333 = C83332 + C83137;
    const double C3883 =
        (ae * C82752 + C82773 * C82871 +
         ae * (C82773 * C82730 * C82809 + C83137) +
         C82730 * (ae * (C82773 * C82809 + C82705) +
                   C82730 * (ae * C82766 +
                             C82773 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C83472 = C82754 + C83470;
    const double C83645 = C83147 + C83644;
    const double C83739 = ae * C83737;
    const double C83815 = C82797 + C83812;
    const double C83659 = C83658 + C83469;
    const double C21614 = C251 * C21201;
    const double C23536 = C8871 * C21201;
    const double C57576 = C53879 * C21201;
    const double C83952 = ae * C83950;
    const double C83951 = C82773 * C83950;
    const double C82717 = C82715 + C82701;
    const double C83304 = C82931 + C83303;
    const double C83408 = ae * C83406;
    const double C83072 = ae * C83070;
    const double C83119 = C82730 * C83070;
    const double C83180 = C82773 * C83070;
    const double C17257 = (C83062 + C83070 * C82912) / C81958;
    const double C83257 = ae * C83255;
    const double C83347 = C82773 * C83255;
    const double C83547 = C83545 + C83537;
    const double C83675 = ae * C83673;
    const double C83697 = C82773 * C83673;
    const double C83924 = C83923 + C83916;
    const double C82716 = C82615 * C82714;
    const double C82944 = C82943 + C82939;
    const double C31338 =
        (3 * (C82946 + C82933 * C82912) +
         C82773 *
             (2 * C83404 +
              C82773 * (C82933 + C82730 *
                                     (C82687 * C82688 +
                                      C82619 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82912))) /
        C81964;
    const double C34137 =
        (2 * ae * (2 * C83825 + C82773 * C83831) +
         C82615 *
             (2 * C83404 +
              C82773 * (C82933 + C82730 *
                                     (C82687 * C82688 +
                                      C82619 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82912))) /
        C81964;
    const double C33225 = C84198 * C5120;
    const double C44009 = C84198 * C5120;
    const double C37616 = C84188 * C18819;
    const double C83008 = C83007 + C83003;
    const double C2604 =
        (2 * ae * (2 * C82730 * C82640 + C82730 * (C82640 + C82664 * C82838)) +
         C82615 * (2 * C82946 + C82730 * C83068)) /
        C81964;
    const double C3454 = (2 * ae * C82773 * (C82640 + C82664 * C82838) +
                          C82615 * C82773 * C83068) /
                         C81964;
    const double C15872 = (3 * (C82644 + C82670 * C82838) +
                           C82730 * (2 * C82946 + C82730 * C83068)) /
                          C81964;
    const double C15873 =
        (2 * ae *
             (3 * (C82640 + C82664 * C82838) +
              C82730 * (2 * C82932 + C82730 * (C82664 + C82700 * C82838))) +
         C82615 * (3 * C83068 +
                   C82730 * (2 * C82933 +
                             C82730 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C16306 =
        (4 * (2 * C82946 + C82730 * C83068) +
         C82730 * (3 * C83068 +
                   C82730 * (2 * C82933 +
                             C82730 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C16810 =
        (C82773 *
         (3 * C83068 +
          C82730 * (2 * C82933 +
                    C82730 * (C82707 + (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C16811 = (C82773 * (2 * C82946 + C82730 * C83068)) / C81964;
    const double C17258 = (C82644 + C82670 * C82838 + C83068 * C82912) / C81964;
    const double C17259 =
        (2 * ae * (C83423 + C83510 * C82912) +
         C82615 * (C83068 + (C82707 + (C82687 * C82688 +
                                       C82619 * bs[7] * std::pow(C82621, 7)) *
                                          C82622 * C82838) *
                                C82912)) /
        C81964;
    const double C17969 =
        (2 * C82946 + C82730 * C83068 +
         (2 * C82933 +
          C82730 * (C82707 +
                    (C82687 * C82688 + C82619 * bs[7] * std::pow(C82621, 7)) *
                        C82622 * C82838)) *
             C82912) /
        C81964;
    const double C18818 =
        (2 * C82773 * C83068 +
         C82773 * (C83068 + (C82707 + (C82687 * C82688 +
                                       C82619 * bs[7] * std::pow(C82621, 7)) *
                                          C82622 * C82838) *
                                C82912)) /
        C81964;
    const double C5843 =
        (2 * ae * (2 * C82773 * C82640 + C82773 * (C82640 + C82664 * C82912)) +
         C82615 * (2 * C83010 + C82773 * C83253)) /
        C81964;
    const double C30911 = (3 * (C82644 + C82670 * C82912) +
                           C82773 * (2 * C83010 + C82773 * C83253)) /
                          C81964;
    const double C30912 =
        (2 * ae *
             (3 * (C82640 + C82664 * C82912) +
              C82773 * (2 * C82996 + C82773 * (C82664 + C82700 * C82912))) +
         C82615 * (3 * C83253 +
                   C82773 * (2 * C82997 +
                             C82773 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C31737 =
        (4 * (2 * C83010 + C82773 * C83253) +
         C82773 * (3 * C83253 +
                   C82773 * (2 * C82997 +
                             C82773 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C384 =
        (4 * (2 * C82615 * C82848 + C82615 * C82855) +
         C82615 * (3 * C82855 +
                   C82615 * (2 * C82615 * C82853 +
                             C82615 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C932 =
        (2 * ae * (3 * C82752 + C82615 * C82770) +
         C82730 * (3 * C82855 +
                   C82615 * (2 * C82615 * C82853 +
                             C82615 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C933 = (2 * ae * (2 * C82743 + C82615 * C82752) +
                         C82730 * (2 * C82615 * C82848 + C82615 * C82855)) /
                        C81964;
    const double C1392 =
        (C82773 *
         (3 * C82855 +
          C82615 * (2 * C82615 * C82853 +
                    C82615 * (C82853 + (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C1393 =
        (C82773 * (2 * C82615 * C82848 + C82615 * C82855)) / C81964;
    const double C3795 =
        (2 * ae * C82773 * C82752 + C82730 * C82773 * C82855) / C81964;
    const double C4614 = (C82843 + C82848 * C82619 + C82855 * C82912) / C81964;
    const double C4615 =
        (2 * C83144 + C82615 * C82855 +
         (2 * C82615 * C82853 +
          C82615 * (C82853 +
                    (C82687 * C82688 + C82838 * bs[7] * std::pow(C82621, 7)) *
                        C82622 * C82619)) *
             C82912) /
        C81964;
    const double C5436 =
        (2 * ae * (C82752 + C82766 * C82912) +
         C82730 * (C82855 + (C82853 + (C82687 * C82688 +
                                       C82838 * bs[7] * std::pow(C82621, 7)) *
                                          C82622 * C82619) *
                                C82912)) /
        C81964;
    const double C6249 =
        (2 * C82773 * C82855 +
         C82773 * (C82855 + (C82853 + (C82687 * C82688 +
                                       C82838 * bs[7] * std::pow(C82621, 7)) *
                                          C82622 * C82619) *
                                C82912)) /
        C81964;
    const double C83467 = C83457 + C83463;
    const double C31100 =
        (3 * (C83144 + C83458 * C82912) +
         C82773 *
             (2 * C83735 +
              C82773 * (C83458 + C82615 *
                                     (C82687 * C82688 +
                                      C82838 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82912))) /
        C81964;
    const double C34573 =
        (2 * ae * (2 * C83768 + C82773 * C83770) +
         C82730 *
             (2 * C83735 +
              C82773 * (C83458 + C82615 *
                                     (C82687 * C82688 +
                                      C82838 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82912))) /
        C81964;
    const double C83539 = C82730 * C83535;
    const double C83609 = C83608 + C83604;
    const double C19200 =
        (2 * ae * (2 * C82773 * C82741 + C82773 * (C82741 + C82748 * C82912)) +
         C82730 * (2 * C83611 + C82773 * C83671)) /
        C81964;
    const double C31099 = (3 * (C82843 + C82848 * C82912) +
                           C82773 * (2 * C83611 + C82773 * C83671)) /
                          C81964;
    const double C31513 =
        (2 * ae *
             (3 * C83766 +
              C82773 * (2 * C83597 + C82773 * (C82748 + C82761 * C82912))) +
         C82730 * (3 * C83671 +
                   C82773 * (2 * C83598 +
                             C82773 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C31962 =
        (4 * (2 * C83611 + C82773 * C83671) +
         C82773 * (3 * C83671 +
                   C82773 * (2 * C83598 +
                             C82773 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C643 =
        (4 * (2 * C82615 * C82922 + C82615 * C82929) +
         C82615 * (3 * C82929 +
                   C82615 * (2 * C82615 * C82927 +
                             C82615 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C1125 =
        (C82730 *
         (3 * C82929 +
          C82615 * (2 * C82615 * C82927 +
                    C82615 * (C82927 + (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C1126 =
        (C82730 * (2 * C82615 * C82922 + C82615 * C82929)) / C81964;
    const double C1585 =
        (2 * ae * (3 * C82795 + C82615 * C82813) +
         C82773 * (3 * C82929 +
                   C82615 * (2 * C82615 * C82927 +
                             C82615 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C1586 = (2 * ae * (2 * C82786 + C82615 * C82795) +
                          C82773 * (2 * C82615 * C82922 + C82615 * C82929)) /
                         C81964;
    const double C2491 = (C82917 + C82922 * C82619 + C82929 * C82838) / C81964;
    const double C2492 =
        (2 * C82615 * C82922 + C82615 * C82929 +
         (2 * C82615 * C82927 +
          C82615 * (C82927 +
                    (C82687 * C82688 + C82912 * bs[7] * std::pow(C82621, 7)) *
                        C82622 * C82619)) *
             C82838) /
        C81964;
    const double C3351 =
        (2 * C82730 * C82929 +
         C82730 * (C82929 + (C82927 + (C82687 * C82688 +
                                       C82912 * bs[7] * std::pow(C82621, 7)) *
                                          C82622 * C82619) *
                                C82838)) /
        C81964;
    const double C4123 =
        (2 * ae * (C82795 + C82809 * C82838) +
         C82773 * (C82929 + (C82927 + (C82687 * C82688 +
                                       C82912 * bs[7] * std::pow(C82621, 7)) *
                                          C82622 * C82619) *
                                C82838)) /
        C81964;
    const double C4124 =
        (2 * ae * C82730 * C82795 + C82773 * C82730 * C82929) / C81964;
    const double C83808 = C83802 + C83803;
    const double C16752 =
        (4 * (2 * C82730 * C82922 + C82730 * C83582) +
         C82730 * (3 * C83582 +
                   C82730 * (2 * C82730 * C82927 +
                             C82730 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C17176 =
        (2 * ae * (3 * C83483 + C82730 * C83570) +
         C82773 * (3 * C83582 +
                   C82730 * (2 * C82730 * C82927 +
                             C82730 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C17177 = (2 * ae * (2 * C83341 + C82730 * C83483) +
                           C82773 * (2 * C82730 * C82922 + C82730 * C83582)) /
                          C81964;
    const double C83857 = C83847 + C83853;
    const double C83918 = C82773 * C83914;
    const double C83548 = C83546 * ae;
    const double C16905 = (C82773 * (3 * C83483 + C82730 * C83570) +
                           (3 * C83445 + C82730 * C83546) * ae) /
                          C81958;
    const double C16304 = 4 * (2 * C83156 + C82730 * C83445) +
                          C82730 * (3 * C83445 + C82730 * C83546);
    const double C16806 = C82773 * (3 * C83445 + C82730 * C83546);
    const double C17967 = 2 * C83156 + C82730 * C83445 + C83546 * C82912;
    const double C83714 = ae * C83711;
    const double C83713 = C82773 * C83711;
    const double C83862 = C83559 + C83860;
    const double C83920 = C83917 * ae;
    const double C31735 = 4 * (2 * C83395 + C82773 * C83793) +
                          C82773 * (3 * C83793 + C82773 * C83917);
    const double C83096 = ae * C83095;
    const double C1790 =
        (C82736 + C82741 * C82619 + C82730 * C83095 + C82730 * C82666 * ae) /
        C81958;
    const double C3543 = (C82773 * C83095) / C81958;
    const double C5199 = (C83095 + C83136 * C82912) / C81958;
    const double C208 = C198 + C199;
    const double C403 = C396 + C397;
    const double C475 = C470 + C471;
    const double C6810 = C6795 + C6796;
    const double C39065 = C39050 + C39051;
    const double C9043 = C9041 + C1399;
    const double C8803 = C8799 + C8800;
    const double C9129 = C9122 + C9123;
    const double C54132 = C54125 + C54126;
    const double C4338 = C4328 + C4329;
    const double C4632 = C4625 + C4626;
    const double C4736 = C4729 + C4730;
    const double C26897 = C26890 + C26891;
    const double C17346 =
        (C82751 + C82937 + C82730 * C83426 +
         (C82765 + C82942 +
          C82730 *
              (C82713 + C82730 * (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82734))) *
             C82912) /
        C81964;
    const double C34251 =
        (2 * C82773 * C83426 +
         C82773 * (C83426 + (C82713 + C82730 * (ae * C82761 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82734)) *
                                C82912)) /
        C81964;
    const double C184 =
        (4 * (2 * C82751 + ae * C82752 + C82615 * C82769) +
         ae * (3 * C82752 + C82615 * C82770) +
         C82615 * (3 * C82769 + ae * C82770 +
                   C82615 * (2 * C82765 + ae * C82766 +
                             C82615 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C1246 =
        (C82773 * (3 * C82769 + ae * C82770 +
                   C82615 * (2 * C82765 + ae * C82766 +
                             C82615 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C1247 =
        (C82773 * (2 * C82751 + ae * C82752 + C82615 * C82769)) / C81964;
    const double C4313 =
        (C82740 + ae * C82743 + C82615 * C82751 + C82769 * C82912) / C81964;
    const double C4314 =
        (2 * C82751 + ae * C82752 + C82615 * C82769 +
         (2 * C82765 + ae * C82766 +
          C82615 * (C82759 + ae * C82615 * C82761 +
                    C82615 * (ae * C82761 +
                              C82615 * std::pow(C82621, 7) * bs[7] * C82734))) *
             C82912) /
        C81964;
    const double C5955 =
        (2 * C82773 * C82769 +
         C82773 *
             (C82769 + (C82759 + ae * C82615 * C82761 +
                        C82615 * (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82734)) *
                           C82912)) /
        C81964;
    const double C335 =
        (4 * (2 * C82826 + ae * C82752 + C82615 * C82834) +
         ae * (3 * C82752 + C82615 * C82770) +
         C82615 * (3 * C82834 + ae * C82770 +
                   C82615 * (2 * C82832 + ae * C82766 +
                             C82615 * (C82830 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C1345 =
        (C82773 * (3 * C82834 + ae * C82770 +
                   C82615 * (2 * C82832 + ae * C82766 +
                             C82615 * (C82830 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C1346 =
        (C82773 * (2 * C82826 + ae * C82752 + C82615 * C82834)) / C81964;
    const double C4536 =
        (C82821 + ae * C82743 + C82615 * C82826 + C82834 * C82912) / C81964;
    const double C4537 =
        (2 * C82826 + ae * C82752 + C82615 * C82834 +
         (2 * C82832 + ae * C82766 +
          C82615 * (C82830 + ae * C82615 * C82761 +
                    C82615 * (ae * C82761 +
                              C82615 * std::pow(C82621, 7) * bs[7] * C82818))) *
             C82912) /
        C81964;
    const double C6136 =
        (2 * C82773 * C82834 +
         C82773 *
             (C82834 + (C82830 + ae * C82615 * C82761 +
                        C82615 * (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818)) *
                           C82912)) /
        C81964;
    const double C83151 = C82743 + C83149;
    const double C83213 = ae * C83212;
    const double C5441 = C172 * C5200;
    const double C13131 = C6775 * C5200;
    const double C29009 = C1786 * C5200;
    const double C32371 = C84304 * C5200;
    const double C32804 = C26620 * C5200;
    const double C33532 = C81997 * C5200;
    const double C43125 = C84304 * C5200;
    const double C43460 = C39030 * C5200;
    const double C43578 = C4415 * C5200;
    const double C44332 = C40962 * C5200;
    const double C35373 = C35372 + C6262;
    const double C36455 = C35142 * C81997;
    const double C59922 = C35142 * C40962;
    const double C83534 = C83525 + C83448;
    const double C83450 = C83449 + C83444;
    const double C83642 = ae * C83641;
    const double C18908 = (2 * C83216 + C82773 * C83641) / C81958;
    const double C18439 =
        (2 * (ae * (C82784 + C82773 * C83617 + C82773 * C82653 * ae) +
              C82730 * C83679) +
         ae * (C83483 + C82773 * (C82773 * C83565 + C83541) +
               C82773 * C83538 * ae) +
         C82730 *
             (C83679 +
              ae * (C83559 + C82773 * (C82773 * C82730 * C82804 + C83537) +
                    C82773 * C83531 * ae) +
              C82730 * (ae * (C82791 + C82773 * (C82773 * C82804 + C82696) +
                              C82773 * C82686 * ae) +
                        C82730 * (C82869 + ae * C82773 * C82761 +
                                  C82773 * (ae * C82761 +
                                            C82773 * std::pow(C82621, 7) *
                                                bs[7] * C82860))))) /
        C81964;
    const double C19308 =
        (2 * C83624 + ae * (C82741 + C82748 * C82912) + C82773 * C83679 +
         ae * (2 * (C82773 * C83559 + C83444) +
               C82773 * (C83559 + C82773 * (C82773 * C82730 * C82804 + C83537) +
                         C82773 * C83531 * ae) +
               (C83440 + C83531 * C82912) * ae) +
         C82730 *
             (ae * (2 * C83617 +
                    C82773 * (C82791 + C82773 * (C82773 * C82804 + C82696) +
                              C82773 * C82686 * ae) +
                    (C82653 + C82686 * C82912) * ae) +
              C82730 * (2 * C83618 + ae * (C82748 + C82761 * C82912) +
                        C82773 * (C82869 + ae * C82773 * C82761 +
                                  C82773 * (ae * C82761 +
                                            C82773 * std::pow(C82621, 7) *
                                                bs[7] * C82860))))) /
        C81964;
    const double C19309 =
        (ae * (2 * C83396 +
               C82773 * (C82784 + C82773 * C83617 + C82773 * C82653 * ae) +
               (C82632 + C82653 * C82912) * ae) +
         C82730 *
             (2 * C83624 + ae * (C82741 + C82748 * C82912) + C82773 * C83679)) /
        C81964;
    const double C31145 =
        (3 * (C82863 + ae * C83764 + C82773 * C83624) +
         ae * (2 * C83764 + C82773 * C83766) +
         C82773 * (2 * C83624 + ae * C83766 + C82773 * C83679)) /
        C81964;
    const double C32020 =
        (4 * (2 * C83624 + ae * C83766 + C82773 * C83679) +
         ae * (3 * C83766 + C82773 * C83889) +
         C82773 * (3 * C83679 + ae * C83889 +
                   C82773 * (2 * C83618 + ae * C83838 +
                             C82773 * (C82869 + ae * C82773 * C82761 +
                                       C82773 * (ae * C82761 +
                                                 C82773 * std::pow(C82621, 7) *
                                                     bs[7] * C82860))))) /
        C81964;
    const double C32112 =
        (4 * (2 * C83779 + ae * C83766 + C82773 * C83901) +
         ae * (3 * C83766 + C82773 * C83889) +
         C82773 * (3 * C83901 + ae * C83889 +
                   C82773 * (2 * C83899 + ae * C83838 +
                             C82773 * (C82906 + ae * C82773 * C82761 +
                                       C82773 * (ae * C82761 +
                                                 C82773 * std::pow(C82621, 7) *
                                                     bs[7] * C82897))))) /
        C81964;
    const double C31972 = C31968 + C31102;
    const double C31808 = C31802 + C31803;
    const double C31916 = C31911 + C31912;
    const double C4337 = C4326 + C4327;
    const double C38371 = C38366 + C38367;
    const double C74035 = C74030 + C74031;
    const double C83297 = ae * C83296;
    const double C4418 =
        (C82779 + C82784 * C82619 + C82773 * C83296 + C82773 * C82666 * ae) /
        C81958;
    const double C7138 = C7136 + C7137;
    const double C287 = C277 + C278;
    const double C591 = C586 + C587;
    const double C662 = C655 + C656;
    const double C7363 = C7361 + C1132;
    const double C6883 = C6879 + C6880;
    const double C7289 = C7282 + C7283;
    const double C39535 = C39528 + C39529;
    const double C8906 = C8891 + C8892;
    const double C9275 = C9273 + C9274;
    const double C53914 = C53899 + C53900;
    const double C1937 = C1927 + C1928;
    const double C2415 = C2408 + C2409;
    const double C2511 = C2504 + C2505;
    const double C14280 = C14273 + C14274;
    const double C11004 = C10993 + C10994;
    const double C60721 = C60714 + C60715;
    const double C263 =
        (4 * (2 * C82794 + ae * C82795 + C82615 * C82812) +
         ae * (3 * C82795 + C82615 * C82813) +
         C82615 * (3 * C82812 + ae * C82813 +
                   C82615 * (2 * C82808 + ae * C82809 +
                             C82615 * (C82802 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C838 =
        (C82730 * (3 * C82812 + ae * C82813 +
                   C82615 * (2 * C82808 + ae * C82809 +
                             C82615 * (C82802 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C839 =
        (C82730 * (2 * C82794 + ae * C82795 + C82615 * C82812)) / C81964;
    const double C1912 =
        (C82783 + ae * C82786 + C82615 * C82794 + C82812 * C82838) / C81964;
    const double C1913 =
        (2 * C82794 + ae * C82795 + C82615 * C82812 +
         (2 * C82808 + ae * C82809 +
          C82615 * (C82802 + ae * C82615 * C82804 +
                    C82615 * (ae * C82804 +
                              C82615 * std::pow(C82621, 7) * bs[7] * C82777))) *
             C82838) /
        C81964;
    const double C2796 =
        (2 * C82730 * C82812 +
         C82730 *
             (C82812 + (C82802 + ae * C82615 * C82804 +
                        C82615 * (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777)) *
                           C82838)) /
        C81964;
    const double C526 =
        (4 * (2 * C82884 + ae * C82795 + C82615 * C82892) +
         ae * (3 * C82795 + C82615 * C82813) +
         C82615 * (3 * C82892 + ae * C82813 +
                   C82615 * (2 * C82890 + ae * C82809 +
                             C82615 * (C82888 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C1031 =
        (C82730 * (3 * C82892 + ae * C82813 +
                   C82615 * (2 * C82890 + ae * C82809 +
                             C82615 * (C82888 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C1032 =
        (C82730 * (2 * C82884 + ae * C82795 + C82615 * C82892)) / C81964;
    const double C2317 =
        (C82879 + ae * C82786 + C82615 * C82884 + C82892 * C82838) / C81964;
    const double C2318 =
        (2 * C82884 + ae * C82795 + C82615 * C82892 +
         (2 * C82890 + ae * C82809 +
          C82615 * (C82888 + ae * C82615 * C82804 +
                    C82615 * (ae * C82804 +
                              C82615 * std::pow(C82621, 7) * bs[7] * C82876))) *
             C82838) /
        C81964;
    const double C3179 =
        (2 * C82730 * C82892 +
         C82730 *
             (C82892 + (C82888 + ae * C82615 * C82804 +
                        C82615 * (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876)) *
                           C82838)) /
        C81964;
    const double C83339 = ae * C83338;
    const double C5280 =
        (C82730 * C82786 + C82773 * C83338 + C82773 * C83146 * ae) / C81958;
    const double C83390 = C82786 + C83388;
    const double C20288 = C20287 + C3360;
    const double C20531 = C19825 * C81997;
    const double C41836 = C19825 * C40962;
    const double C83656 = ae * C83655;
    const double C17421 =
        (C82779 + C82784 * C82838 + C82773 * C83655 + C82773 * C83445 * ae) /
        C81958;
    const double C16760 = C16756 + C16261;
    const double C16435 = C16429 + C16430;
    const double C16663 = C16658 + C16659;
    const double C25279 = C25272 + C25273;
    const double C25575 = C25573 + C25574;
    const double C71533 = C71526 + C71527;
    const double C16597 =
        (4 * (2 * C83482 + ae * C83483 + C82730 * C83569) +
         ae * (3 * C83483 + C82730 * C83570) +
         C82730 * (3 * C83569 + ae * C83570 +
                   C82730 * (2 * C83563 + ae * C83565 +
                             C82730 * (C82869 + ae * C82730 * C82804 +
                                       C82730 * (ae * C82804 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82860))))) /
        C81964;
    const double C16709 =
        (4 * (2 * C83495 + ae * C83483 + C82730 * C83579) +
         ae * (3 * C83483 + C82730 * C83570) +
         C82730 * (3 * C83579 + ae * C83570 +
                   C82730 * (2 * C83577 + ae * C83565 +
                             C82730 * (C82906 + ae * C82730 * C82804 +
                                       C82730 * (ae * C82804 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82897))))) /
        C81964;
    const double C83726 = C83341 + C83724;
    const double C17045 =
        (2 * (C83399 + C82730 * C83624) + ae * (C82773 * C83483 + C83447) +
         C82730 *
             (C83624 + ae * (C82773 * C83559 + C83444) + C82730 * C83621)) /
        C81964;
    const double C83913 = C83903 + C83619;
    const double C83794 = C83791 + C83792;
    const double C1936 = C1925 + C1926;
    const double C6169 = C6150 + C6151;
    const double C34475 = C34470 + C34471;
    const double C45315 = C45306 + C45307;
    const double C36600 = C36595 + C36596;
    const double C60067 = C60062 + C60063;
    const double C11206 = C84304 * C3797;
    const double C22144 = C13622 * C3797;
    const double C43453 = C84304 * C3797;
    const double C51416 = C84307 * C3797;
    const double C56196 = C84581 * C3797;
    const double C4624 = C84246 * C4613;
    const double C32693 = C84528 * C4613;
    const double C43458 = C38937 * C4613;
    const double C32695 = C84304 * C5437;
    const double C43461 = C84304 * C5437;
    const double C35371 = C84246 * C6250;
    const double C4638 = C4634 + C4620;
    const double C31975 = C31973 + C31967;
    const double C3197 = C3187 + C3188;
    const double C20856 = C20847 + C20848;
    const double C42161 = C42152 + C42153;
    const double C20858 = C20851 + C20852;
    const double C42163 = C42156 + C42157;
    const double C20286 = C84257 * C3352;
    const double C22566 = C84344 * C4125;
    const double C56632 = C84344 * C4125;
    const double C11642 = C84344 * C4126;
    const double C33112 = C26459 * C4126;
    const double C43892 = C84583 * C4126;
    const double C56626 = C84344 * C4126;
    const double C66205 = C84347 * C4126;
    const double C2518 = C2514 + C2503;
    const double C16763 = C16761 + C16755;
    const double C16316 = C15867 * C16305;
    const double C16813 = C15867 * C16808;
    const double C17981 = C15867 * C17968;
    const double C31743 = C15867 * C31736;
    const double C399 = C172 * C178;
    const double C1398 = C172 * C1241;
    const double C4628 = C172 * C4310;
    const double C31970 = C172 * C31791;
    const double C658 = C251 * C257;
    const double C1131 = C251 * C833;
    const double C2507 = C251 * C1909;
    const double C16758 = C251 * C16418;
    const double C82034 = C82015 - C82027;
    const double C82033 = C81983 - C82026;
    const double C82013 = C82006 * be;
    const double C45945 = C82067 * C110;
    const double C46932 = C1933 * C82067;
    const double C47030 = C82067 * C1683;
    const double C47024 = C82067 * C783;
    const double C47018 = C82067 * C721;
    const double C47291 = C82067 * C1908;
    const double C47285 = C82067 * C835;
    const double C49458 = C82067 * C3444;
    const double C49772 = C82067 * C3631;
    const double C50396 = C82067 * C1243;
    const double C50390 = C82067 * C1181;
    const double C50702 = C82067 * C1295;
    const double C64725 = C4334 * C82067;
    const double C64891 = C82067 * C4309;
    const double C64885 = C82067 * C4214;
    const double C82068 = 2 * C82067;
    const double C101 =
        (C82067 / C81965 + (0 * ae) / C81958) / C81965 - (0 * be) / C81958;
    const double C6691 = C82067 / C81965 - (0 * be) / C81958;
    const double C38946 = C82067 / C81965 + (0 * ae) / C81958;
    const double C13633 = C13629 * C110;
    const double C14620 = C1933 * C13629;
    const double C14718 = C13629 * C1683;
    const double C14712 = C13629 * C783;
    const double C14706 = C13629 * C721;
    const double C14979 = C13629 * C1908;
    const double C14973 = C13629 * C835;
    const double C28040 = C4334 * C13629;
    const double C28218 = C13629 * C4309;
    const double C28212 = C13629 * C4214;
    const double C28206 = C13629 * C1243;
    const double C28200 = C13629 * C1181;
    const double C28464 = C13629 * C1295;
    const double C69331 = C13629 * C3444;
    const double C69643 = C13629 * C3631;
    const double C82011 = C82005 * ae;
    const double C82010 = C82005 * C81972;
    const double C1676 =
        ((-C81960 / C81958) / C81965 - (C81985 * be) / C81958) / C81965 -
        ((C81959 * ((-C81968) / C81965 - (C82005 * be) / C81958) + C40953) *
         be) /
            C81958 +
        (-C81989 / C81958) / C81965 - (0 * be) / C81958;
    const double C1678 =
        ((-C81968) / C81965 - (C82005 * be) / C81958) / C81965 -
        ((C81959 * ((-C81989 / C81958) / C81965 - (0 * be) / C81958) + C84198) *
         be) /
            C81958;
    const double C40960 = (-C81968) / C81965 - (C82005 * be) / C81958;
    const double C16654 = C16504 * C251;
    const double C16651 = C16502 * C251;
    const double C18542 = C16502 * C4413;
    const double C16648 = C16500 * C251;
    const double C18534 = C16500 * C4413;
    const double C16666 = C16662 * C84257;
    const double C25571 = C16662 * C84529;
    const double C71819 = C16662 * C53740;
    const double C16665 = C16661 * C84257;
    const double C18543 = C16661 * C84597;
    const double C25567 = C16661 * C84529;
    const double C29904 = C16661 * C26458;
    const double C71815 = C16661 * C53740;
    const double C81051 = C16661 * C84340;
    const double C16664 = C16660 * C84257;
    const double C18535 = C16660 * C84597;
    const double C25563 = C16660 * C84529;
    const double C29898 = C16660 * C26458;
    const double C71811 = C16660 * C53740;
    const double C81045 = C16660 * C84340;
    const double C18539 = C18281 * C4415;
    const double C29901 = C18281 * C26620;
    const double C30430 = C18281 * C1786;
    const double C38510 = C18281 * C6775;
    const double C74174 = C18281 * C39030;
    const double C18544 = C18279 * C4414;
    const double C19108 = C18279 * C13724;
    const double C25568 = C18279 * C8871;
    const double C30426 = C18279 * C1787;
    const double C71816 = C18279 * C53879;
    const double C18536 = C18277 * C4414;
    const double C25564 = C18277 * C8871;
    const double C30424 = C18277 * C1786;
    const double C38506 = C18277 * C6775;
    const double C71812 = C18277 * C53879;
    const double C74170 = C18277 * C39030;
    const double C18556 = C18552 * C84583;
    const double C25569 = C18552 * C84344;
    const double C29906 = C18552 * C26459;
    const double C71817 = C18552 * C84344;
    const double C81053 = C18552 * C84347;
    const double C18554 = C18550 * C84583;
    const double C25565 = C18550 * C84344;
    const double C29900 = C18550 * C26459;
    const double C71813 = C18550 * C84344;
    const double C81047 = C18550 * C84347;
    const double C19125 = C19121 * C13621;
    const double C30429 = C19121 * C84596;
    const double C31904 = C19121 * C84246;
    const double C38509 = C19121 * C84528;
    const double C74173 = C19121 * C38937;
    const double C81543 = C19121 * C84300;
    const double C30428 = C19120 * C1785;
    const double C31903 = C19120 * C172;
    const double C19123 = C19119 * C13621;
    const double C30423 = C19119 * C84596;
    const double C31902 = C19119 * C84246;
    const double C38505 = C19119 * C84528;
    const double C74169 = C19119 * C38937;
    const double C81537 = C19119 * C84300;
    const double C30422 = C19118 * C1785;
    const double C31901 = C19118 * C172;
    const double C31918 = C31914 * C84246;
    const double C38513 = C31914 * C84528;
    const double C74177 = C31914 * C38937;
    const double C31917 = C31913 * C172;
    const double C38514 = C37847 * C6775;
    const double C74178 = C37847 * C39030;
    const double C84545 = C84508 / C81958;
    const double C84575 = C84549 / C81965;
    const double C84576 = C84551 + C84516;
    const double C6680 = C84516 - C84199 / C81977;
    const double C84548 = C84512 / C81958;
    const double C7434 = C6678 * C733;
    const double C7590 = C2817 * C6678;
    const double C7672 = C6678 * C889;
    const double C7664 = C6678 * C728;
    const double C7894 = C6678 * C1035;
    const double C10055 = C6678 * C1193;
    const double C10145 = C5976 * C6678;
    const double C10293 = C6678 * C1349;
    const double C10285 = C6678 * C1188;
    const double C10511 = C6678 * C1495;
    const double C82128 = C82127 * C81972;
    const double C82234 = C82127 * ae;
    const double C6774 = (C82127 * ae) / C81958 - C82114 / C81977;
    const double C13722 =
        ((-(0 * be) / C81958) / C81965 -
         ((0 - (C82091 * C82114) / C81958) * be) / C81958) /
            C81965 -
        ((C82091 * ((-C82114 / C81958) / C81965 - (C82127 * be) / C81958) +
          C38937) *
         be) /
            C81958 +
        (-C82124 / C81958) / C81965 - (0 * be) / C81958;
    const double C13723 =
        ((-C82114 / C81958) / C81965 - (C82127 * be) / C81958) / C81965 -
        ((C82091 * ((-C82124 / C81958) / C81965 - (0 * be) / C81958) + C84304) *
         be) /
            C81958;
    const double C39029 = (-C82232) / C81965 - (C82127 * be) / C81958;
    const double C82260 = C82256 * be;
    const double C46054 = C82280 * C1683;
    const double C46048 = C82280 * C1686;
    const double C46042 = C82280 * C1682;
    const double C46309 = C82280 * C1789;
    const double C46301 = C82280 * C1788;
    const double C46419 = C1935 * C82280;
    const double C46585 = C82280 * C1908;
    const double C46579 = C82280 * C1907;
    const double C51105 = C82280 * C3442;
    const double C51726 = C82280 * C3629;
    const double C52951 = C82280 * C3449;
    const double C52945 = C82280 * C3443;
    const double C53572 = C82280 * C3630;
    const double C81380 = C82280 * C17256;
    const double C81374 = C82280 * C17254;
    const double C81540 = C18279 * C82280;
    const double C82327 = 2 * C82280;
    const double C15930 =
        (C82280 / C81965 + (0 * ae) / C81958) / C81965 - (0 * be) / C81958;
    const double C19729 = C82280 / C81965 - (0 * be) / C81958;
    const double C41048 = C82280 / C81965 + (0 * ae) / C81958;
    const double C6270 = C6268 * C1669;
    const double C10374 = C6268 * C6678;
    const double C28306 = C6268 * C84590;
    const double C31964 = C6268 * C84188;
    const double C36667 = C6268 * C84509;
    const double C60134 = C6268 * C40953;
    const double C64973 = C6268 * C84193;
    const double C84562 = C84531 / C81958;
    const double C84585 = C84565 / C81965;
    const double C1828 = C1811 + C1812;
    const double C1822 = C1799 + C1800;
    const double C2414 = C2406 + C2407;
    const double C2411 = C2400 + C2401;
    const double C30272 = C30258 + C30259;
    const double C30269 = C30252 + C30253;
    const double C30266 = C30246 + C30247;
    const double C30263 = C30240 + C30241;
    const double C84586 = C84566 + C84535;
    const double C19638 = C84535 - C84305 / C81977;
    const double C84564 = C84532 / C81958;
    const double C19740 = C19636 * C180;
    const double C19732 = C19636 * C174;
    const double C19969 = C19636 * C380;
    const double C20062 = C472 * C19636;
    const double C20205 = C19636 * C570;
    const double C25862 = C19636 * C1250;
    const double C25854 = C19636 * C1245;
    const double C26010 = C19119 * C19636;
    const double C26084 = C19636 * C1396;
    const double C26306 = C19636 * C1542;
    const double C82154 = C82153 * C81972;
    const double C82384 = C82153 * ae;
    const double C8870 = (C82153 * ae) / C81958 - C82140 / C81977;
    const double C26618 =
        ((-(0 * be) / C81958) / C81965 -
         ((0 - (C82094 * C82140) / C81958) * be) / C81958) /
            C81965 -
        ((C82094 * ((-C82140 / C81958) / C81965 - (C82153 * be) / C81958) +
          C53740) *
         be) /
            C81958 +
        (-C82150 / C81958) / C81965 - (0 * be) / C81958;
    const double C26619 =
        ((-C82140 / C81958) / C81965 - (C82153 * be) / C81958) / C81965 -
        ((C82094 * ((-C82150 / C81958) / C81965 - (0 * be) / C81958) + C84344) *
         be) /
            C81958;
    const double C53878 = (-C82382) / C81965 - (C82153 * be) / C81958;
    const double C82410 = C82406 * be;
    const double C63341 = C82430 * C4214;
    const double C63335 = C82430 * C4217;
    const double C63329 = C82430 * C4213;
    const double C63593 = C82430 * C4309;
    const double C63587 = C82430 * C4308;
    const double C63753 = C4336 * C82430;
    const double C63848 = C82430 * C4417;
    const double C63840 = C82430 * C4416;
    const double C64552 = C82430 * C5281;
    const double C65597 = C82430 * C5117;
    const double C65591 = C82430 * C5114;
    const double C65903 = C82430 * C5200;
    const double C66521 = C82430 * C5118;
    const double C66515 = C82430 * C5115;
    const double C66827 = C82430 * C5201;
    const double C80728 = C82430 * C17256;
    const double C80722 = C82430 * C17254;
    const double C81048 = C18281 * C82430;
    const double C82477 = 2 * C82430;
    const double C31008 =
        (C82430 / C81965 + (0 * ae) / C81958) / C81965 - (0 * be) / C81958;
    const double C35212 = C82430 / C81965 - (0 * be) / C81958;
    const double C58688 = C82430 / C81965 + (0 * ae) / C81958;
    const double C671 = C667 * C84246;
    const double C2495 = C667 * C84596;
    const double C7356 = C667 * C84528;
    const double C14355 = C667 * C13621;
    const double C20282 = C667 * C19636;
    const double C39602 = C667 * C38937;
    const double C46667 = C667 * C84300;
    const double C84567 = C84538 / C81958;
    const double C84588 = C84570 / C81965;
    const double C4456 = C4439 + C4440;
    const double C4450 = C4427 + C4428;
    const double C4735 = C4727 + C4728;
    const double C4732 = C4721 + C4722;
    const double C18184 = C18170 + C18171;
    const double C18181 = C18164 + C18165;
    const double C18178 = C18158 + C18159;
    const double C18175 = C18152 + C18153;
    const double C18454 = C18443 + C18444;
    const double C43249 = C43238 + C43239;
    const double C84589 = C84571 + C84542;
    const double C35067 = C84542 - C84345 / C81977;
    const double C84569 = C84539 / C81958;
    const double C35223 = C35065 * C259;
    const double C35215 = C35065 * C253;
    const double C35442 = C35065 * C454;
    const double C35586 = C588 * C35065;
    const double C35672 = C35065 * C639;
    const double C37762 = C35065 * C842;
    const double C37754 = C35065 * C837;
    const double C37984 = C35065 * C988;
    const double C38062 = C16660 * C35065;
    const double C38205 = C35065 * C1129;
    const double C82274 = C82270 - C82273;
    const double C82320 = C82304 - C82318;
    const double C82424 = C82420 - C82423;
    const double C82470 = C82454 - C82468;
    const double C1825 = C1805 + C1806;
    const double C6804 = C6783 + C6784;
    const double C39059 = C39038 + C39039;
    const double C20626 = C20605 + C20606;
    const double C41931 = C41910 + C41911;
    const double C4453 = C4433 + C4434;
    const double C8900 = C8879 + C8880;
    const double C53908 = C53887 + C53888;
    const double C24265 = C24262 + C24263;
    const double C45643 = C45636 + C45637;
    const double C2805 = C1932 * C1670;
    const double C14619 = C1932 * C84574;
    const double C20524 = C1932 * C84198;
    const double C41829 = C1932 * C84198;
    const double C46931 = C1932 * C84201;
    const double C5964 = C4333 * C1670;
    const double C28039 = C4333 * C84574;
    const double C36448 = C4333 * C84198;
    const double C59915 = C4333 * C84198;
    const double C64724 = C4333 * C84201;
    const double C2109 = C84558 * C2094;
    const double C13998 = C84558 * C2094;
    const double C46310 = C45935 * C2094;
    const double C11532 = C84304 * C4046;
    const double C22459 = C13622 * C4046;
    const double C43782 = C84304 * C4046;
    const double C51725 = C84307 * C4046;
    const double C56517 = C84581 * C4046;
    const double C1823 = C1801 + C1802;
    const double C2235 = C2224 + C2225;
    const double C13752 = C13730 + C13731;
    const double C10878 = C10863 + C10864;
    const double C11330 = C11323 + C11324;
    const double C43131 = C43116 + C43117;
    const double C43581 = C43576 + C43577;
    const double C55870 = C55859 + C55860;
    const double C56315 = C56308 + C56309;
    const double C5009 = C84561 * C4994;
    const double C27146 = C84561 * C4994;
    const double C63849 = C63169 * C4994;
    const double C4451 = C4429 + C4430;
    const double C4910 = C4899 + C4900;
    const double C26648 = C26626 + C26627;
    const double C2517 = C2513 + C2500;
    const double C82650 = ae * C82649;
    const double C111 =
        (2 * C82629 + C82615 * C82649 + (C82618 + C82632 * C82619) * ae) /
        C81958;
    const double C726 = (C82730 * C82649) / C81958;
    const double C1186 = (C82773 * C82649) / C81958;
    const double C2612 = C84550 * C731;
    const double C14440 = C84550 * C731;
    const double C46752 = C45932 * C731;
    const double C1808 = C84558 * C1793;
    const double C13737 = C84558 * C1793;
    const double C46049 = C45935 * C1793;
    const double C2922 = C1670 * C2013;
    const double C14723 = C84574 * C2013;
    const double C20614 = C84198 * C2013;
    const double C41919 = C84198 * C2013;
    const double C47035 = C84201 * C2013;
    const double C10990 = C84344 * C3638;
    const double C32487 = C26459 * C3638;
    const double C43245 = C84583 * C3638;
    const double C55980 = C84344 * C3638;
    const double C65596 = C84347 * C3638;
    const double C12405 = C1670 * C3967;
    const double C23327 = C84198 * C3967;
    const double C44647 = C84198 * C3967;
    const double C49771 = C84201 * C3967;
    const double C69642 = C84574 * C3967;
    const double C10880 = C10867 + C10868;
    const double C23014 = C22999 + C23000;
    const double C43133 = C43120 + C43121;
    const double C44335 = C44320 + C44321;
    const double C55873 = C55865 + C55866;
    const double C5851 = C84550 * C1191;
    const double C27934 = C84550 * C1191;
    const double C50076 = C45932 * C1191;
    const double C12087 = C1670 * C3718;
    const double C23004 = C84198 * C3718;
    const double C44325 = C84198 * C3718;
    const double C49463 = C84201 * C3718;
    const double C69336 = C84574 * C3718;
    const double C4436 = C84561 * C4421;
    const double C26633 = C84561 * C4421;
    const double C63336 = C63169 * C4421;
    const double C6435 = C1670 * C4811;
    const double C28469 = C84574 * C4811;
    const double C34790 = C84198 * C4811;
    const double C45641 = C84198 * C4811;
    const double C65130 = C84201 * C4811;
    const double C83163 = ae * C83162;
    const double C2715 =
        (2 * C83087 + C82730 * C83162 + (C82618 + C82632 * C82838) * ae) /
        C81958;
    const double C3546 = (C82773 * C83162) / C81958;
    const double C19207 = C84558 * C3798;
    const double C30513 = C84558 * C3798;
    const double C53258 = C45935 * C3798;
    const double C19478 = C13622 * C5675;
    const double C30772 = C84581 * C5675;
    const double C34895 = C84304 * C5675;
    const double C45751 = C84304 * C5675;
    const double C81865 = C84307 * C5675;
    const double C83402 = ae * C83401;
    const double C6058 =
        (2 * C83288 + C82773 * C83401 + (C82618 + C82632 * C82912) * ae) /
        C81958;
    const double C18713 = C84561 * C5752;
    const double C30062 = C84561 * C5752;
    const double C67131 = C63169 * C5752;
    const double C18176 = C18154 + C18155;
    const double C18551 = C18540 + C18541;
    const double C29567 = C29545 + C29546;
    const double C13440 = C13437 + C13438;
    const double C30776 = C30765 + C30766;
    const double C45753 = C45746 + C45747;
    const double C19107 = C18278 * C13622;
    const double C30425 = C18278 * C84581;
    const double C38507 = C18278 * C84304;
    const double C74171 = C18278 * C84304;
    const double C81539 = C18278 * C84307;
    const double C19115 = C18282 * C13622;
    const double C30431 = C18282 * C84581;
    const double C38511 = C18282 * C84304;
    const double C74175 = C18282 * C84304;
    const double C81545 = C18282 * C84307;
    const double C6255 = C4637 * C1670;
    const double C28307 = C4637 * C84574;
    const double C36668 = C4637 * C84198;
    const double C60135 = C4637 * C84198;
    const double C64974 = C4637 * C84201;
    const double C6271 = C6269 * C1669;
    const double C28309 = C6269 * C84590;
    const double C31965 = C6269 * C84188;
    const double C36669 = C6269 * C84509;
    const double C60136 = C6269 * C40953;
    const double C64976 = C6269 * C84193;
    const double C672 = C668 * C84246;
    const double C2501 = C668 * C84596;
    const double C7358 = C668 * C84528;
    const double C14358 = C668 * C13621;
    const double C39604 = C668 * C38937;
    const double C46670 = C668 * C84300;
    const double C673 = C669 * C84246;
    const double C7360 = C669 * C84528;
    const double C39606 = C669 * C38937;
    const double C2520 = C2516 * C84581;
    const double C7357 = C2516 * C84304;
    const double C14356 = C2516 * C13622;
    const double C39603 = C2516 * C84304;
    const double C46668 = C2516 * C84307;
    const double C82679 = ae * C82677;
    const double C82678 = C82615 * C82677;
    const double C82689 = 3 * C82677;
    const double C82947 = C82730 * C82677;
    const double C83011 = C82773 * C82677;
    const double C1687 = (C82649 + C82677 * C82838) / C81958;
    const double C4218 = (C82649 + C82677 * C82912) / C81958;
    const double C21828 = C84558 * C3550;
    const double C51112 = C45935 * C3550;
    const double C55868 = C84558 * C3550;
    const double C3456 =
        (C82773 * C82946 + C83186 + C83186 +
         C82615 * (2 * ae * C82773 * C82932 + C82615 * C82773 * C82933)) /
        C81964;
    const double C3715 = (C82773 * C82826 + C83186 +
                          C82730 * (C83001 + C82730 * C82773 * C82832)) /
                         C81964;
    const double C5283 = (C82730 * C82794 + C83186 +
                          C82773 * (C82937 + C82773 * C82730 * C82808)) /
                         C81964;
    const double C5597 = (C82730 * C82884 + C83186 +
                          C82773 * (C82937 + C82773 * C82730 * C82890)) /
                         C81964;
    const double C32379 = C32374 + C32375;
    const double C33535 = C33528 + C33529;
    const double C43137 = C43128 + C43129;
    const double C44339 = C44328 + C44329;
    const double C1691 = (C82644 + C82670 * C82838 + C83063 + C83063 +
                          C82615 * (2 * ae * (C82640 + C82664 * C82838) +
                                    C82615 * (C82670 + C82707 * C82838))) /
                         C81964;
    const double C2717 =
        (2 * (C82647 + C82730 * C82751) + C83063 +
         C82730 * (C82751 + C82937 + C82730 * (C82674 + C82730 * C82765))) /
        C81964;
    const double C2898 =
        (2 * (C82647 + C82730 * C82826) + C83063 +
         C82730 * (C82826 + C82937 + C82730 * (C82674 + C82730 * C82832))) /
        C81964;
    const double C3635 =
        (C83063 + C82773 * (C82794 + C82808 * C82838)) / C81964;
    const double C3964 =
        (C83063 + C82773 * (C82884 + C82890 * C82838)) / C81964;
    const double C15881 = C15867 * C2601;
    const double C19652 = C81997 * C2601;
    const double C19823 = C251 * C2601;
    const double C20618 = C84198 * C2601;
    const double C40971 = C40962 * C2601;
    const double C41923 = C84198 * C2601;
    const double C17265 = C15867 * C3448;
    const double C21062 = C81997 * C3448;
    const double C21827 = C13724 * C3448;
    const double C21939 = C8871 * C3448;
    const double C23008 = C84198 * C3448;
    const double C42364 = C40962 * C3448;
    const double C51111 = C82280 * C3448;
    const double C52234 = C84198 * C3448;
    const double C55867 = C1787 * C3448;
    const double C55987 = C53879 * C3448;
    const double C4222 = (C82644 + C82670 * C82912 + C83248 + C83248 +
                          C82615 * (2 * ae * (C82640 + C82664 * C82912) +
                                    C82615 * (C82670 + C82707 * C82912))) /
                         C81964;
    const double C5360 =
        (C83248 + C82730 * (C82826 + C82832 * C82912)) / C81964;
    const double C6060 =
        (2 * (C82647 + C82773 * C82794) + C83248 +
         C82773 * (C82794 + C83001 + C82773 * (C82674 + C82773 * C82808))) /
        C81964;
    const double C6423 =
        (2 * (C82647 + C82773 * C82884) + C83248 +
         C82773 * (C82884 + C83001 + C82773 * (C82674 + C82773 * C82890))) /
        C81964;
    const double C30916 = C15867 * C5840;
    const double C34145 = C81997 * C5840;
    const double C35140 = C172 * C5840;
    const double C36592 = C84198 * C5840;
    const double C44960 = C40962 * C5840;
    const double C60059 = C84198 * C5840;
    const double C25868 = C84536 * C16862;
    const double C72113 = C84536 * C16862;
    const double C18935 = C84558 * C17345;
    const double C30261 = C84558 * C17345;
    const double C81381 = C45935 * C17345;
    const double C16440 = C16436 * C84188;
    const double C16657 = C16506 * C251;
    const double C25572 = C25352 * C8871;
    const double C71820 = C25352 * C53879;
    const double C18547 = C18283 * C4415;
    const double C19116 = C18283 * C13724;
    const double C29907 = C18283 * C26620;
    const double C30432 = C18283 * C1787;
    const double C81054 = C18283 * C82430;
    const double C81546 = C18283 * C82280;
    const double C31813 = C31809 * C84188;
    const double C31919 = C31915 * C172;
    const double C83099 = C83098 + C82712;
    const double C83300 = C83299 + C82712;
    const double C938 = C172 * C781;
    const double C7039 = C6775 * C781;
    const double C39288 = C39030 * C781;
    const double C1591 = C251 * C1293;
    const double C9365 = C8871 * C1293;
    const double C54365 = C53879 * C1293;
    const double C8660 = C251 * C8247;
    const double C9980 = C8871 * C8247;
    const double C54979 = C53879 * C8247;
    const double C83140 = C82752 + C83138;
    const double C83209 = ae * C83208;
    const double C83380 = C82795 + C83378;
    const double C83334 = ae * C83333;
    const double C5279 =
        (C82730 * C82795 + C82773 * C83333 + C82773 * C83135 * ae) / C81958;
    const double C83473 = C83472 + C83465;
    const double C83646 = ae * C83645;
    const double C34250 = (2 * C83212 + C82773 * C83645) / C81958;
    const double C83816 = C83815 + C83810;
    const double C83660 = ae * C83659;
    const double C17422 =
        (C82786 + C82797 * C82838 + C82773 * C83659 + C82773 * C83466 * ae) /
        C81958;
    const double C83953 = C83336 + C83951;
    const double C82720 = ae * C82717;
    const double C82719 = C82615 * C82717;
    const double C82935 = C82730 * C82717;
    const double C82999 = C82773 * C82717;
    const double C83066 = C82717 * C82838;
    const double C83251 = C82717 * C82912;
    const double C83305 = ae * C83304;
    const double C34136 = (2 * C83185 + C82773 * C83304) / C81958;
    const double C21134 =
        (C82773 *
         (2 * C83426 + C83072 +
          C82730 * (C82765 + C82942 +
                    C82730 * (C82713 + C82730 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C83120 = C83118 + C83119;
    const double C83181 = ae * C83180;
    const double C17264 = C15867 * C17257;
    const double C23648 = C81997 * C17257;
    const double C44010 = C40962 * C17257;
    const double C83348 = C83346 + C83347;
    const double C83550 = ae * C83547;
    const double C83549 = C82730 * C83547;
    const double C83600 = C82773 * C83547;
    const double C83669 = C83547 * C82912;
    const double C83698 = C83696 + C83697;
    const double C83926 = ae * C83924;
    const double C83925 = C82773 * C83924;
    const double C82718 = C82692 + C82716;
    const double C20368 = C84198 * C2604;
    const double C41673 = C84198 * C2604;
    const double C22678 = C84198 * C3454;
    const double C51930 = C84198 * C3454;
    const double C16315 = C84188 * C15872;
    const double C25133 = C84188 * C16811;
    const double C17980 = C84188 * C17258;
    const double C36370 = C84198 * C5843;
    const double C59837 = C84198 * C5843;
    const double C31742 = C84188 * C30911;
    const double C7038 = C84304 * C933;
    const double C39287 = C84304 * C933;
    const double C9042 = C84246 * C1393;
    const double C11210 = C84304 * C3795;
    const double C48642 = C84304 * C3795;
    const double C4627 = C84246 * C4614;
    const double C38585 = C84304 * C19200;
    const double C74249 = C84304 * C19200;
    const double C31969 = C84246 * C31099;
    const double C7362 = C84257 * C1126;
    const double C9364 = C84344 * C1586;
    const double C54364 = C84344 * C1586;
    const double C2506 = C84257 * C2491;
    const double C11646 = C84344 * C4124;
    const double C61321 = C84344 * C4124;
    const double C25712 = C84344 * C17177;
    const double C71957 = C84344 * C17177;
    const double C83684 = C83683 + C83548;
    const double C17044 =
        (3 * (C82744 + C82773 * C82866 + ae * (C82773 * C83559 + C83444) +
              C82730 * C83621) +
         ae * (C82773 * C83570 + C83548) +
         C82730 * (2 * C83621 + ae * (C82773 * C83565 + C83541) +
                   C82730 * (C83618 + ae * (C82773 * C82730 * C82804 + C83537) +
                             C82730 * (ae * (C82773 * C82804 + C82696) +
                                       C82730 * (ae * C82761 +
                                                 C82773 * std::pow(C82621, 7) *
                                                     bs[7] * C82860))))) /
        C81964;
    const double C17179 = C251 * C16905;
    const double C25713 = C8871 * C16905;
    const double C71958 = C53879 * C16905;
    const double C83715 = C83483 + C83713;
    const double C83863 = C83862 + C83855;
    const double C2095 = (C82843 + C82848 * C82619 + C83096 + C83096 +
                          C82730 * (2 * ae * C82752 + C82730 * C82855)) /
                         C81964;
    const double C4044 =
        (C83096 + C82773 * (ae * C82795 + C82730 * C82908)) / C81964;
    const double C1814 = C84558 * C1790;
    const double C2117 = C1787 * C1790;
    const double C2232 = C251 * C1790;
    const double C2923 = C1680 * C1790;
    const double C3015 = C1786 * C1790;
    const double C7755 = C6775 * C1790;
    const double C13743 = C84558 * C1790;
    const double C14006 = C13724 * C1790;
    const double C14724 = C13629 * C1790;
    const double C39996 = C39030 * C1790;
    const double C46055 = C45935 * C1790;
    const double C46318 = C82280 * C1790;
    const double C47036 = C82067 * C1790;
    const double C3802 = C1786 * C3543;
    const double C5443 = C172 * C3543;
    const double C8386 = C6775 * C3543;
    const double C10872 = C84304 * C3543;
    const double C11327 = C8871 * C3543;
    const double C12088 = C1680 * C3543;
    const double C40618 = C39030 * C3543;
    const double C48336 = C84304 * C3543;
    const double C49464 = C82067 * C3543;
    const double C61020 = C53879 * C3543;
    const double C69337 = C13629 * C3543;
    const double C5440 = C172 * C5199;
    const double C13129 = C6775 * C5199;
    const double C43462 = C39030 * C5199;
    const double C585 = C208 * C251;
    const double C407 = C403 + C397;
    const double C479 = C475 * C84246;
    const double C9044 = C9043 + C1399;
    const double C9272 = C8803 * C8871;
    const double C54275 = C8803 * C53879;
    const double C4906 = C4338 * C4415;
    const double C5973 = C4338 * C1680;
    const double C27056 = C4338 * C26620;
    const double C28046 = C4338 * C13629;
    const double C63759 = C4338 * C82430;
    const double C64731 = C4338 * C82067;
    const double C4636 = C4632 + C4626;
    const double C8802 = C84246 * C1247;
    const double C4331 = C84246 * C4313;
    const double C10299 = C84527 * C1346;
    const double C55298 = C84527 * C1346;
    const double C6163 = C84550 * C4536;
    const double C28219 = C84550 * C4536;
    const double C64892 = C45932 * C4536;
    const double C83152 = C83151 + C83148;
    const double C3796 = (C82773 * C83144 + C83213 + C83213 +
                          C82730 * (2 * ae * C82773 * C82754 +
                                    C82730 * C82773 * C82615 * C82853)) /
                         C81964;
    const double C5674 =
        (ae * C82786 + C82730 * C83173 + C83213 +
         C82773 * (C83150 + C82773 * (C82801 + C82730 * C82615 * C82906))) /
        C81964;
    const double C32377 = C32370 + C32371;
    const double C32808 = C32804 + C32805;
    const double C43135 = C43124 + C43125;
    const double C43582 = C43578 + C43579;
    const double C83544 = C83534 + C83539;
    const double C83452 = ae * C83450;
    const double C83451 = C82730 * C83450;
    const double C83528 = 3 * C83450;
    const double C83612 = C82773 * C83450;
    const double C17343 = (C83162 + C83450 * C82912) / C81958;
    const double C17575 = (C82843 + C82848 * C82912 + C83642 + C83642 +
                           C82730 * (2 * ae * (C82741 + C82748 * C82912) +
                                     C82730 * (C82848 + C82853 * C82912))) /
                          C81964;
    const double C19467 =
        (2 * (C83160 + C82773 * C83495) + C83642 +
         C82773 * (C83495 + C83602 + C82773 * (C83448 + C82773 * C83577))) /
        C81964;
    const double C30521 = C1786 * C18908;
    const double C31516 = C172 * C18908;
    const double C34581 = C6775 * C18908;
    const double C37845 = C15867 * C18908;
    const double C38363 = C84304 * C18908;
    const double C45424 = C39030 * C18908;
    const double C74027 = C84304 * C18908;
    const double C37990 = C84543 * C19309;
    const double C73657 = C84543 * C19309;
    const double C31974 = C31972 + C31102;
    const double C31812 = C31808 * C15867;
    const double C31920 = C31916 * C84246;
    const double C5972 = C4337 * C1670;
    const double C28045 = C4337 * C84574;
    const double C36452 = C4337 * C84198;
    const double C59919 = C4337 * C84198;
    const double C64730 = C4337 * C84201;
    const double C4995 = (C82917 + C82922 * C82619 + C83297 + C83297 +
                          C82773 * (2 * ae * C82795 + C82773 * C82929)) /
                         C81964;
    const double C4442 = C84561 * C4418;
    const double C4907 = C172 * C4418;
    const double C5017 = C4415 * C4418;
    const double C6436 = C1680 * C4418;
    const double C6605 = C4414 * C4418;
    const double C10656 = C8871 * C4418;
    const double C26639 = C84561 * C4418;
    const double C27154 = C26620 * C4418;
    const double C28470 = C13629 * C4418;
    const double C55655 = C53879 * C4418;
    const double C63342 = C63169 * C4418;
    const double C63857 = C82430 * C4418;
    const double C65131 = C82067 * C4418;
    const double C7139 = C7138 * C84304;
    const double C39385 = C7138 * C84304;
    const double C469 = C287 * C172;
    const double C595 = C591 * C84257;
    const double C666 = C662 + C656;
    const double C7364 = C7363 + C1132;
    const double C7135 = C6883 * C6775;
    const double C39384 = C6883 * C39030;
    const double C9276 = C9275 * C84344;
    const double C54276 = C9275 * C84344;
    const double C2231 = C1937 * C1787;
    const double C2814 = C1937 * C1680;
    const double C14113 = C1937 * C13724;
    const double C14626 = C1937 * C13629;
    const double C46425 = C1937 * C82280;
    const double C46938 = C1937 * C82067;
    const double C2515 = C2511 + C2505;
    const double C6882 = C84257 * C839;
    const double C1930 = C84257 * C1912;
    const double C7900 = C84527 * C1032;
    const double C40141 = C84527 * C1032;
    const double C3194 = C84550 * C2317;
    const double C14980 = C84550 * C2317;
    const double C47292 = C45932 * C2317;
    const double C5751 =
        (C82730 * C83177 + C83339 + C83339 +
         C82773 * (2 * ae * C83336 + C82773 * C82730 * C82615 * C82927)) /
        C81964;
    const double C5757 = C4415 * C5280;
    const double C13541 = C8871 * C5280;
    const double C27849 = C26620 * C5280;
    const double C32483 = C84561 * C5280;
    const double C33007 = C6775 * C5280;
    const double C33838 = C81997 * C5280;
    const double C43241 = C84561 * C5280;
    const double C43785 = C39030 * C5280;
    const double C44650 = C40962 * C5280;
    const double C45855 = C4414 * C5280;
    const double C58476 = C53879 * C5280;
    const double C64549 = C82430 * C5280;
    const double C65592 = C63169 * C5280;
    const double C83391 = C83390 + C83387;
    const double C17885 = (C82917 + C82922 * C82838 + C83656 + C83656 +
                           C82773 * (2 * ae * C83483 + C82773 * C83582)) /
                          C81964;
    const double C17890 = C4415 * C17421;
    const double C18167 = C84561 * C17421;
    const double C18548 = C15867 * C17421;
    const double C19479 = C13724 * C17421;
    const double C19564 = C4414 * C17421;
    const double C24464 = C8871 * C17421;
    const double C29309 = C26620 * C17421;
    const double C29558 = C84561 * C17421;
    const double C30773 = C1787 * C17421;
    const double C58478 = C53879 * C17421;
    const double C67135 = C82430 * C17421;
    const double C80723 = C63169 * C17421;
    const double C81866 = C82280 * C17421;
    const double C16762 = C16760 + C16261;
    const double C16439 = C16435 * C15867;
    const double C16667 = C16663 * C84257;
    const double C25576 = C25575 * C84344;
    const double C71821 = C25575 * C84344;
    const double C83727 = C83726 + C83723;
    const double C25493 = C84344 * C17045;
    const double C71741 = C84344 * C17045;
    const double C83922 = C83913 + C83918;
    const double C83797 = ae * C83794;
    const double C83796 = C82773 * C83794;
    const double C83906 = 3 * C83794;
    const double C31558 =
        (ae *
             (3 * C83794 +
              C82773 * (2 * C83617 +
                        C82773 * (C82791 + C82773 * (C82773 * C82804 + C82696) +
                                  C82773 * C82686 * ae) +
                        C83837 * ae) +
              (2 * C83788 + C82773 * C83837) * ae) +
         C82730 * (3 * C83679 + ae * (2 * C83597 + C82773 * C83838) +
                   C82773 * (2 * C83618 + ae * C83838 +
                             C82773 * (C82869 + ae * C82773 * C82761 +
                                       C82773 * (ae * C82761 +
                                                 C82773 * std::pow(C82621, 7) *
                                                     bs[7] * C82860))))) /
        C81964;
    const double C2813 = C1936 * C1670;
    const double C14625 = C1936 * C84574;
    const double C20528 = C1936 * C84198;
    const double C41833 = C1936 * C84198;
    const double C46937 = C1936 * C84201;
    const double C4639 = C4635 + C4624;
    const double C35374 = C35373 + C35371;
    const double C6256 = C4638 * C84550;
    const double C28308 = C4638 * C84550;
    const double C64975 = C4638 * C45932;
    const double C31977 = C31975 * C84188;
    const double C36671 = C31975 * C84509;
    const double C60138 = C31975 * C40953;
    const double C20289 = C20288 + C20286;
    const double C2522 = C2518 * C84581;
    const double C7359 = C2518 * C84304;
    const double C14359 = C2518 * C13622;
    const double C39605 = C2518 * C84304;
    const double C46671 = C2518 * C84307;
    const double C82020 = C82013 / C81958;
    const double C47295 = C47285 + C47286;
    const double C50403 = C50396 + C50397;
    const double C7595 = C6883 * C6691;
    const double C7677 = C6691 * C782;
    const double C7669 = C6691 * C720;
    const double C7899 = C6691 * C834;
    const double C10150 = C8803 * C6691;
    const double C10298 = C6691 * C1242;
    const double C10290 = C6691 * C1180;
    const double C10516 = C6691 * C1294;
    const double C39836 = C6883 * C38946;
    const double C39918 = C38946 * C782;
    const double C39910 = C38946 * C720;
    const double C40140 = C38946 * C834;
    const double C55149 = C8803 * C38946;
    const double C55297 = C38946 * C1242;
    const double C55289 = C38946 * C1180;
    const double C55515 = C38946 * C1294;
    const double C14983 = C14973 + C14974;
    const double C28225 = C28206 + C28207;
    const double C82018 = C82011 / C81958;
    const double C82019 = C82010 / C81977;
    const double C82017 = C81959 * C82010;
    const double C100 = (-C82010 / C81958) / (4 * C81964 * std::pow(C81965, 2));
    const double C1679 = (-C82010 / C81958) / C82062;
    const double C6690 = (-C82010 / C81958) / (4 * C81974);
    const double C13628 = (-C82010 / C81958) / C82062;
    const double C15866 = -C82010 / C81958;
    const double C19642 = (-C82010 / C81958) / C81965;
    const double C38945 = (-C82010 / C81958) / (4 * C81974);
    const double C40961 = (-C82010 / C81958) / C81965;
    const double C45940 = (-C82010 / C81958) / C82062;
    const double C1711 = C1676 * C109;
    const double C1708 = C1676 * C727;
    const double C1705 = C1676 * C1686;
    const double C1700 = C1676 * C1685;
    const double C1697 = C1676 * C728;
    const double C1694 = C1676 * C108;
    const double C2621 = C1676 * C2602;
    const double C2822 = C2818 * C1676;
    const double C2820 = C2816 * C1676;
    const double C2919 = C1676 * C1788;
    const double C2913 = C1676 * C1681;
    const double C2907 = C1676 * C785;
    const double C2901 = C1676 * C723;
    const double C3189 = C1676 * C1906;
    const double C3183 = C1676 * C837;
    const double C3468 = C1676 * C1188;
    const double C3465 = C1676 * C3452;
    const double C3462 = C1676 * C3449;
    const double C4233 = C1676 * C1187;
    const double C4230 = C1676 * C4217;
    const double C4225 = C1676 * C4216;
    const double C5125 = C1676 * C5118;
    const double C5860 = C1676 * C5841;
    const double C5981 = C5977 * C1676;
    const double C5979 = C5975 * C1676;
    const double C6158 = C1676 * C4307;
    const double C6152 = C1676 * C4212;
    const double C6146 = C1676 * C1245;
    const double C6140 = C1676 * C1183;
    const double C6432 = C1676 * C4416;
    const double C6426 = C1676 * C1297;
    const double C10762 = C1676 * C3451;
    const double C12084 = C1676 * C3547;
    const double C12078 = C1676 * C3446;
    const double C12402 = C1676 * C3633;
    const double C1710 = C1678 * C110;
    const double C1701 = C1678 * C1686;
    const double C1698 = C1678 * C727;
    const double C1695 = C1678 * C109;
    const double C2620 = C1678 * C2601;
    const double C2812 = C1935 * C1678;
    const double C2804 = C1931 * C1678;
    const double C2921 = C1678 * C1789;
    const double C2915 = C1678 * C1682;
    const double C2909 = C1678 * C784;
    const double C2903 = C1678 * C722;
    const double C3191 = C1678 * C1907;
    const double C3185 = C1678 * C836;
    const double C3467 = C1678 * C1187;
    const double C3464 = C1678 * C3451;
    const double C3461 = C1678 * C3448;
    const double C4226 = C1678 * C4217;
    const double C5124 = C1678 * C5117;
    const double C5859 = C1678 * C5840;
    const double C5971 = C4336 * C1678;
    const double C5963 = C4332 * C1678;
    const double C6160 = C1678 * C4308;
    const double C6154 = C1678 * C4213;
    const double C6148 = C1678 * C1244;
    const double C6142 = C1678 * C1182;
    const double C6434 = C1678 * C4417;
    const double C6428 = C1678 * C1296;
    const double C12086 = C1678 * C3545;
    const double C12080 = C1678 * C3445;
    const double C12404 = C1678 * C3632;
    const double C40979 = C40960 * C109;
    const double C40977 = C40960 * C727;
    const double C40975 = C40960 * C1686;
    const double C40973 = C40960 * C2601;
    const double C40970 = C40960 * C2602;
    const double C40968 = C40960 * C1685;
    const double C40966 = C40960 * C728;
    const double C40964 = C40960 * C108;
    const double C41675 = C40960 * C15870;
    const double C41834 = C16433 * C40960;
    const double C41830 = C2818 * C40960;
    const double C41826 = C2816 * C40960;
    const double C41920 = C40960 * C2599;
    const double C41916 = C40960 * C1788;
    const double C41912 = C40960 * C1681;
    const double C41908 = C40960 * C785;
    const double C41904 = C40960 * C723;
    const double C42154 = C40960 * C2795;
    const double C42150 = C40960 * C1906;
    const double C42146 = C40960 * C837;
    const double C42369 = C40960 * C1188;
    const double C42367 = C40960 * C3452;
    const double C42365 = C40960 * C3449;
    const double C42363 = C40960 * C16809;
    const double C43015 = C40960 * C1187;
    const double C43013 = C40960 * C4217;
    const double C43011 = C40960 * C3451;
    const double C43009 = C40960 * C5117;
    const double C43006 = C40960 * C5118;
    const double C43004 = C40960 * C4216;
    const double C44011 = C40960 * C17256;
    const double C44330 = C40960 * C5201;
    const double C44326 = C40960 * C5115;
    const double C44322 = C40960 * C3547;
    const double C44318 = C40960 * C3446;
    const double C44648 = C40960 * C5281;
    const double C44644 = C40960 * C3633;
    const double C44961 = C40960 * C5841;
    const double C44959 = C40960 * C18817;
    const double C45304 = C40960 * C4307;
    const double C45300 = C40960 * C4212;
    const double C45296 = C40960 * C1245;
    const double C45292 = C40960 * C1183;
    const double C45638 = C40960 * C4416;
    const double C45634 = C40960 * C1297;
    const double C51002 = C40960 * C3448;
    const double C52231 = C40960 * C3443;
    const double C52543 = C40960 * C3630;
    const double C58553 = C40960 * C5840;
    const double C59839 = C40960 * C30909;
    const double C59920 = C31806 * C40960;
    const double C59916 = C5977 * C40960;
    const double C59912 = C5975 * C40960;
    const double C60060 = C40960 * C5954;
    const double C60056 = C40960 * C5838;
    const double C84602 = C84545 + C84591;
    const double C6679 = C84575 - (C84201 * C84184) / C81958;
    const double C39679 = C84576 * C731;
    const double C40139 = C84576 * C1033;
    const double C55058 = C84576 * C1191;
    const double C55296 = C84576 * C1347;
    const double C55375 = C4638 * C84576;
    const double C84 = C84576 / C81965 - C84199 / C82065;
    const double C7438 = C6680 * C731;
    const double C7898 = C6680 * C1033;
    const double C10059 = C6680 * C1191;
    const double C10297 = C6680 * C1347;
    const double C10376 = C4638 * C6680;
    const double C84592 = C84548 + C84575;
    const double C82131 = C82091 * C82128;
    const double C82297 = C82128 / C81977;
    const double C2090 =
        (ae * -2 * C82114) / C81974 +
        (((C82091 * ((-4 * C82116) / C81958 - (C82091 * C82128) / C81958) *
           ae) /
              C81958 +
          2 * ((C82127 * ae) / C81958 - C82114 / C81977)) *
         ae) /
            C81958 -
        C82128 / C81977;
    const double C2092 = (-C82128 / C81958) / C82062;
    const double C7017 = (-C82128 / C81958) / C81965;
    const double C13985 = (-C82128 / C81958) / C82062;
    const double C16071 =
        (-C82128 / C81958) / (4 * C81964 * std::pow(C81965, 2));
    const double C19961 = (-C82128 / C81958) / (4 * C81974);
    const double C39266 = (-C82128 / C81958) / C81965;
    const double C41274 = (-C82128 / C81958) / (4 * C81974);
    const double C46297 = (-C82128 / C81958) / C82062;
    const double C82242 = C82234 / C81958;
    const double C6793 = C6774 * C105;
    const double C6789 = C6774 * C110;
    const double C6785 = C6774 * C104;
    const double C6781 = C6774 * C109;
    const double C6777 = C6774 * C103;
    const double C7040 = C6774 * C177;
    const double C7034 = C6774 * C176;
    const double C7028 = C6774 * C175;
    const double C7022 = C6774 * C174;
    const double C7019 = C6774 * C173;
    const double C7133 = C285 * C6774;
    const double C7129 = C283 * C6774;
    const double C7125 = C281 * C6774;
    const double C7280 = C6774 * C255;
    const double C7276 = C6774 * C254;
    const double C7272 = C6774 * C253;
    const double C7760 = C6774 * C785;
    const double C7758 = C6774 * C784;
    const double C7756 = C6774 * C783;
    const double C7754 = C6774 * C782;
    const double C8391 = C6774 * C1245;
    const double C8389 = C6774 * C1244;
    const double C8387 = C6774 * C1243;
    const double C8385 = C6774 * C1242;
    const double C10869 = C6774 * C1181;
    const double C10865 = C6774 * C1187;
    const double C10861 = C6774 * C1182;
    const double C11533 = C6774 * C1295;
    const double C11529 = C6774 * C1296;
    const double C12199 = C6774 * C3547;
    const double C12197 = C6774 * C3545;
    const double C12195 = C6774 * C3543;
    const double C12823 = C6774 * C1188;
    const double C12819 = C6774 * C1183;
    const double C13134 = C6774 * C4307;
    const double C13132 = C6774 * C4308;
    const double C13130 = C6774 * C4309;
    const double C13435 = C6774 * C1297;
    const double C32372 = C6774 * C4217;
    const double C32368 = C6774 * C4213;
    const double C33005 = C6774 * C4417;
    const double C33639 = C6774 * C5201;
    const double C33637 = C6774 * C5200;
    const double C34257 = C6774 * C4216;
    const double C34253 = C6774 * C4212;
    const double C34582 = C6774 * C5954;
    const double C34580 = C6774 * C5953;
    const double C34892 = C6774 * C4416;
    const double C37916 = C6774 * C18908;
    const double C38364 = C6774 * C5841;
    const double C38360 = C6774 * C5838;
    const double C38512 = C31913 * C6774;
    const double C38508 = C19120 * C6774;
    const double C38504 = C19118 * C6774;
    const double C38587 = C6774 * C30958;
    const double C13744 = C13722 * C110;
    const double C13738 = C13722 * C104;
    const double C13732 = C13722 * C109;
    const double C13726 = C13722 * C103;
    const double C14010 = C13722 * C176;
    const double C14000 = C13722 * C175;
    const double C13991 = C13722 * C174;
    const double C13987 = C13722 * C173;
    const double C14109 = C283 * C13722;
    const double C14103 = C281 * C13722;
    const double C14269 = C13722 * C254;
    const double C14263 = C13722 * C253;
    const double C14820 = C13722 * C785;
    const double C14817 = C13722 * C784;
    const double C14814 = C13722 * C783;
    const double C15522 = C13722 * C1245;
    const double C15519 = C13722 * C1244;
    const double C15516 = C13722 * C1243;
    const double C17583 = C13722 * C4308;
    const double C17578 = C13722 * C4307;
    const double C18365 = C13722 * C3547;
    const double C18362 = C13722 * C5201;
    const double C18930 = C13722 * C4216;
    const double C18924 = C13722 * C4212;
    const double C18918 = C13722 * C1188;
    const double C18912 = C13722 * C1183;
    const double C19124 = C19120 * C13722;
    const double C19122 = C19118 * C13722;
    const double C19216 = C13722 * C5954;
    const double C19475 = C13722 * C4416;
    const double C19469 = C13722 * C1297;
    const double C21823 = C13722 * C1187;
    const double C21817 = C13722 * C1182;
    const double C22456 = C13722 * C1296;
    const double C23121 = C13722 * C3545;
    const double C13740 = C13723 * C721;
    const double C13734 = C13723 * C727;
    const double C13728 = C13723 * C722;
    const double C14009 = C13723 * C782;
    const double C14003 = C13723 * C783;
    const double C13994 = C13723 * C784;
    const double C13988 = C13723 * C785;
    const double C14111 = C1933 * C13723;
    const double C14105 = C1931 * C13723;
    const double C14271 = C13723 * C835;
    const double C14265 = C13723 * C836;
    const double C14819 = C13723 * C1788;
    const double C14816 = C13723 * C1789;
    const double C14813 = C13723 * C1790;
    const double C15521 = C13723 * C3547;
    const double C15518 = C13723 * C3545;
    const double C15515 = C13723 * C3543;
    const double C17582 = C13723 * C5200;
    const double C17579 = C13723 * C5201;
    const double C18932 = C13723 * C5118;
    const double C18926 = C13723 * C5115;
    const double C18920 = C13723 * C3452;
    const double C18914 = C13723 * C3446;
    const double C19114 = C18281 * C13723;
    const double C19106 = C18277 * C13723;
    const double C19215 = C13723 * C18908;
    const double C19477 = C13723 * C5281;
    const double C19471 = C13723 * C3633;
    const double C21825 = C13723 * C3451;
    const double C21819 = C13723 * C3445;
    const double C22458 = C13723 * C3632;
    const double C39048 = C39029 * C105;
    const double C39044 = C39029 * C110;
    const double C39040 = C39029 * C104;
    const double C39036 = C39029 * C109;
    const double C39032 = C39029 * C103;
    const double C39289 = C39029 * C177;
    const double C39283 = C39029 * C176;
    const double C39277 = C39029 * C175;
    const double C39271 = C39029 * C174;
    const double C39268 = C39029 * C173;
    const double C39382 = C285 * C39029;
    const double C39378 = C283 * C39029;
    const double C39374 = C281 * C39029;
    const double C39526 = C39029 * C255;
    const double C39522 = C39029 * C254;
    const double C39518 = C39029 * C253;
    const double C40001 = C39029 * C785;
    const double C39999 = C39029 * C784;
    const double C39997 = C39029 * C783;
    const double C39995 = C39029 * C782;
    const double C40623 = C39029 * C1245;
    const double C40621 = C39029 * C1244;
    const double C40619 = C39029 * C1243;
    const double C40617 = C39029 * C1242;
    const double C43126 = C39029 * C4217;
    const double C43122 = C39029 * C4213;
    const double C43118 = C39029 * C1187;
    const double C43114 = C39029 * C1182;
    const double C43463 = C39029 * C4309;
    const double C43457 = C39029 * C4308;
    const double C43454 = C39029 * C4307;
    const double C43783 = C39029 * C4417;
    const double C43779 = C39029 * C1296;
    const double C44447 = C39029 * C3547;
    const double C44445 = C39029 * C3545;
    const double C44443 = C39029 * C5201;
    const double C44441 = C39029 * C5200;
    const double C45084 = C39029 * C4216;
    const double C45080 = C39029 * C4212;
    const double C45076 = C39029 * C1188;
    const double C45072 = C39029 * C1183;
    const double C45425 = C39029 * C5954;
    const double C45423 = C39029 * C5953;
    const double C45748 = C39029 * C4416;
    const double C45744 = C39029 * C1297;
    const double C48333 = C39029 * C1181;
    const double C48943 = C39029 * C1295;
    const double C49571 = C39029 * C3543;
    const double C73583 = C39029 * C18908;
    const double C74028 = C39029 * C5841;
    const double C74024 = C39029 * C5838;
    const double C74176 = C31913 * C39029;
    const double C74172 = C19120 * C39029;
    const double C74168 = C19118 * C39029;
    const double C74251 = C39029 * C30958;
    const double C82265 = C82260 / C81958;
    const double C46064 = C46042 + C46043;
    const double C46592 = C46585 + C46586;
    const double C46589 = C46579 + C46580;
    const double C52958 = C52951 + C52952;
    const double C19745 = C19729 * C2601;
    const double C19737 = C19729 * C2598;
    const double C20067 = C19825 * C19729;
    const double C20210 = C19729 * C2794;
    const double C25867 = C19729 * C16809;
    const double C25859 = C19729 * C16807;
    const double C26015 = C25352 * C19729;
    const double C26311 = C19729 * C16906;
    const double C41064 = C41048 * C2601;
    const double C41056 = C41048 * C2598;
    const double C41380 = C19825 * C41048;
    const double C41520 = C41048 * C2794;
    const double C72112 = C41048 * C16809;
    const double C72104 = C41048 * C16807;
    const double C72260 = C25352 * C41048;
    const double C72556 = C41048 * C16906;
    const double C84606 = C84562 + C84598;
    const double C19637 = C84585 - (C84307 * C84296) / C81958;
    const double C41063 = C84586 * C1793;
    const double C41055 = C84586 * C1789;
    const double C41288 = C84586 * C2094;
    const double C41519 = C84586 * C2394;
    const double C72111 = C84586 * C3552;
    const double C72333 = C84586 * C3798;
    const double C15864 = C84586 / C81965 - C84305 / C82065;
    const double C19744 = C19638 * C1793;
    const double C19736 = C19638 * C1789;
    const double C19975 = C19638 * C2094;
    const double C20209 = C19638 * C2394;
    const double C25866 = C19638 * C3552;
    const double C26088 = C19638 * C3798;
    const double C84599 = C84564 + C84585;
    const double C82157 = C82094 * C82154;
    const double C82447 = C82154 / C81977;
    const double C4990 =
        (ae * -2 * C82140) / C81974 +
        (((C82094 * ((-4 * C82142) / C81958 - (C82094 * C82154) / C81958) *
           ae) /
              C81958 +
          2 * ((C82153 * ae) / C81958 - C82140 / C81977)) *
         ae) /
            C81958 -
        C82154 / C81977;
    const double C4992 = (-C82154 / C81958) / C82062;
    const double C9343 = (-C82154 / C81958) / C81965;
    const double C27133 = (-C82154 / C81958) / C82062;
    const double C31281 =
        (-C82154 / C81958) / (4 * C81964 * std::pow(C81965, 2));
    const double C35664 = (-C82154 / C81958) / (4 * C81974);
    const double C54343 = (-C82154 / C81958) / C81965;
    const double C59132 = (-C82154 / C81958) / (4 * C81974);
    const double C63836 = (-C82154 / C81958) / C82062;
    const double C82392 = C82384 / C81958;
    const double C8889 = C8870 * C105;
    const double C8885 = C8870 * C110;
    const double C8881 = C8870 * C104;
    const double C8877 = C8870 * C109;
    const double C8873 = C8870 * C103;
    const double C9120 = C8870 * C176;
    const double C9116 = C8870 * C175;
    const double C9112 = C8870 * C174;
    const double C9270 = C206 * C8870;
    const double C9266 = C204 * C8870;
    const double C9262 = C202 * C8870;
    const double C9366 = C8870 * C256;
    const double C9360 = C8870 * C255;
    const double C9354 = C8870 * C254;
    const double C9348 = C8870 * C253;
    const double C9345 = C8870 * C252;
    const double C9987 = C8870 * C837;
    const double C9985 = C8870 * C836;
    const double C9983 = C8870 * C835;
    const double C9981 = C8870 * C834;
    const double C10661 = C8870 * C1297;
    const double C10659 = C8870 * C1296;
    const double C10657 = C8870 * C1295;
    const double C10655 = C8870 * C1294;
    const double C10991 = C8870 * C721;
    const double C10987 = C8870 * C727;
    const double C10983 = C8870 * C722;
    const double C11325 = C8870 * C783;
    const double C11321 = C8870 * C784;
    const double C11972 = C8870 * C728;
    const double C11968 = C8870 * C723;
    const double C12298 = C8870 * C785;
    const double C12616 = C8870 * C1906;
    const double C12614 = C8870 * C1907;
    const double C12612 = C8870 * C1908;
    const double C13544 = C8870 * C3633;
    const double C13542 = C8870 * C3632;
    const double C13540 = C8870 * C3631;
    const double C21937 = C8870 * C1686;
    const double C21933 = C8870 * C1682;
    const double C22254 = C8870 * C1789;
    const double C22891 = C8870 * C1685;
    const double C22887 = C8870 * C1681;
    const double C23220 = C8870 * C1788;
    const double C23539 = C8870 * C2795;
    const double C23537 = C8870 * C2794;
    const double C24465 = C8870 * C3630;
    const double C24463 = C8870 * C3629;
    const double C25274 = C8870 * C2602;
    const double C25270 = C8870 * C2599;
    const double C25570 = C16504 * C8870;
    const double C25566 = C16502 * C8870;
    const double C25562 = C16500 * C8870;
    const double C25714 = C8870 * C15977;
    const double C26384 = C8870 * C16906;
    const double C26640 = C26618 * C110;
    const double C26634 = C26618 * C104;
    const double C26628 = C26618 * C109;
    const double C26622 = C26618 * C103;
    const double C26886 = C26618 * C175;
    const double C26880 = C26618 * C174;
    const double C27052 = C204 * C26618;
    const double C27046 = C202 * C26618;
    const double C27158 = C26618 * C255;
    const double C27148 = C26618 * C254;
    const double C27139 = C26618 * C253;
    const double C27135 = C26618 * C252;
    const double C27854 = C26618 * C837;
    const double C27851 = C26618 * C836;
    const double C27848 = C26618 * C835;
    const double C28634 = C26618 * C1297;
    const double C28631 = C26618 * C1296;
    const double C28628 = C26618 * C1295;
    const double C29312 = C26618 * C1907;
    const double C29307 = C26618 * C1906;
    const double C29559 = C26618 * C1685;
    const double C29553 = C26618 * C1681;
    const double C29547 = C26618 * C728;
    const double C29541 = C26618 * C723;
    const double C29811 = C26618 * C1788;
    const double C29805 = C26618 * C785;
    const double C29903 = C16502 * C26618;
    const double C29897 = C16500 * C26618;
    const double C30071 = C26618 * C2795;
    const double C30860 = C26618 * C3633;
    const double C30857 = C26618 * C3630;
    const double C32484 = C26618 * C727;
    const double C32478 = C26618 * C722;
    const double C32800 = C26618 * C784;
    const double C34999 = C26618 * C3632;
    const double C26636 = C26619 * C1181;
    const double C26630 = C26619 * C1187;
    const double C26624 = C26619 * C1182;
    const double C26888 = C26619 * C1243;
    const double C26882 = C26619 * C1244;
    const double C27054 = C4334 * C26619;
    const double C27048 = C4332 * C26619;
    const double C27157 = C26619 * C1294;
    const double C27151 = C26619 * C1295;
    const double C27142 = C26619 * C1296;
    const double C27136 = C26619 * C1297;
    const double C27853 = C26619 * C3633;
    const double C27850 = C26619 * C3632;
    const double C27847 = C26619 * C3631;
    const double C28633 = C26619 * C4416;
    const double C28630 = C26619 * C4417;
    const double C28627 = C26619 * C4418;
    const double C29311 = C26619 * C3629;
    const double C29308 = C26619 * C3630;
    const double C29561 = C26619 * C3449;
    const double C29555 = C26619 * C3443;
    const double C29549 = C26619 * C3452;
    const double C29543 = C26619 * C3446;
    const double C29807 = C26619 * C3547;
    const double C29905 = C18279 * C26619;
    const double C29899 = C18277 * C26619;
    const double C30070 = C26619 * C16906;
    const double C30859 = C26619 * C5281;
    const double C30856 = C26619 * C17421;
    const double C32486 = C26619 * C3451;
    const double C32480 = C26619 * C3445;
    const double C32802 = C26619 * C3545;
    const double C34998 = C26619 * C5280;
    const double C53897 = C53878 * C105;
    const double C53893 = C53878 * C110;
    const double C53889 = C53878 * C104;
    const double C53885 = C53878 * C109;
    const double C53881 = C53878 * C103;
    const double C54123 = C53878 * C176;
    const double C54119 = C53878 * C175;
    const double C54115 = C53878 * C174;
    const double C54273 = C206 * C53878;
    const double C54269 = C204 * C53878;
    const double C54265 = C202 * C53878;
    const double C54366 = C53878 * C256;
    const double C54360 = C53878 * C255;
    const double C54354 = C53878 * C254;
    const double C54348 = C53878 * C253;
    const double C54345 = C53878 * C252;
    const double C54986 = C53878 * C837;
    const double C54984 = C53878 * C836;
    const double C54982 = C53878 * C835;
    const double C54980 = C53878 * C834;
    const double C55660 = C53878 * C1297;
    const double C55658 = C53878 * C1296;
    const double C55656 = C53878 * C1295;
    const double C55654 = C53878 * C1294;
    const double C55985 = C53878 * C1686;
    const double C55981 = C53878 * C1682;
    const double C55977 = C53878 * C727;
    const double C55973 = C53878 * C722;
    const double C56310 = C53878 * C1789;
    const double C56306 = C53878 * C784;
    const double C56634 = C53878 * C1908;
    const double C56628 = C53878 * C1907;
    const double C56621 = C53878 * C1906;
    const double C56953 = C53878 * C1685;
    const double C56949 = C53878 * C1681;
    const double C56945 = C53878 * C728;
    const double C56941 = C53878 * C723;
    const double C57266 = C53878 * C1788;
    const double C57262 = C53878 * C785;
    const double C57579 = C53878 * C2795;
    const double C57577 = C53878 * C2794;
    const double C58481 = C53878 * C3633;
    const double C58479 = C53878 * C3630;
    const double C58477 = C53878 * C3632;
    const double C58475 = C53878 * C3629;
    const double C60712 = C53878 * C721;
    const double C61018 = C53878 * C783;
    const double C63093 = C53878 * C3631;
    const double C71528 = C53878 * C2602;
    const double C71524 = C53878 * C2599;
    const double C71818 = C16504 * C53878;
    const double C71814 = C16502 * C53878;
    const double C71810 = C16500 * C53878;
    const double C71959 = C53878 * C15977;
    const double C72629 = C53878 * C16906;
    const double C82415 = C82410 / C81958;
    const double C63351 = C63329 + C63330;
    const double C63600 = C63593 + C63594;
    const double C63597 = C63587 + C63588;
    const double C65907 = C65903 + C65904;
    const double C66528 = C66521 + C66522;
    const double C66525 = C66515 + C66516;
    const double C66831 = C66827 + C66828;
    const double C80735 = C80728 + C80729;
    const double C35228 = C35212 * C5840;
    const double C35220 = C35212 * C5837;
    const double C35447 = C35212 * C5953;
    const double C35591 = C35142 * C35212;
    const double C37767 = C35212 * C18817;
    const double C37759 = C35212 * C18815;
    const double C37989 = C35212 * C18908;
    const double C38067 = C37847 * C35212;
    const double C58704 = C58688 * C5840;
    const double C58696 = C58688 * C5837;
    const double C58918 = C58688 * C5953;
    const double C59062 = C35142 * C58688;
    const double C73440 = C58688 * C18817;
    const double C73432 = C58688 * C18815;
    const double C73656 = C58688 * C18908;
    const double C73734 = C37847 * C58688;
    const double C84607 = C84567 + C84600;
    const double C35066 = C84588 - (C84347 * C84336) / C81958;
    const double C58703 = C84589 * C4421;
    const double C58695 = C84589 * C4417;
    const double C58917 = C84589 * C4715;
    const double C59146 = C84589 * C4994;
    const double C73439 = C84589 * C5284;
    const double C73431 = C84589 * C5281;
    const double C73655 = C84589 * C5521;
    const double C73873 = C84589 * C5752;
    const double C30905 = C84589 / C81965 - C84345 / C82065;
    const double C35227 = C35067 * C4421;
    const double C35219 = C35067 * C4417;
    const double C35446 = C35067 * C4715;
    const double C35678 = C35067 * C4994;
    const double C37766 = C35067 * C5284;
    const double C37758 = C35067 * C5281;
    const double C37988 = C35067 * C5521;
    const double C38209 = C35067 * C5752;
    const double C84601 = C84569 + C84588;
    const double C11538 = C11531 + C11532;
    const double C43788 = C43781 + C43782;
    const double C56521 = C56516 + C56517;
    const double C2239 = C2235 * C84558;
    const double C14108 = C2235 * C84558;
    const double C20066 = C2235 * C19638;
    const double C41379 = C2235 * C84586;
    const double C46420 = C2235 * C45935;
    const double C4914 = C4910 * C84561;
    const double C27051 = C4910 * C84561;
    const double C35590 = C4910 * C35067;
    const double C59061 = C4910 * C84589;
    const double C63754 = C4910 * C63169;
    const double C2521 = C2517 * C84558;
    const double C14357 = C2517 * C84558;
    const double C20284 = C2517 * C19638;
    const double C41594 = C2517 * C84586;
    const double C46669 = C2517 * C45935;
    const double C117 =
        (2 * (2 * ae * C82627 + C82615 * C82644) + C82650 + C82650 +
         C82615 * (C82644 + C82647 + C82647 +
                   C82615 * (2 * ae * C82640 +
                             C82615 *
                                 (C82633 * C82634 +
                                  C82619 * bs[5] * std::pow(C82621, 5)) *
                                 C82622))) /
        C81964;
    const double C788 =
        (C82650 + C82730 * (C82740 + ae * C82743 + C82615 * C82751)) / C81964;
    const double C887 =
        (C82650 + C82730 * (C82821 + ae * C82743 + C82615 * C82826)) / C81964;
    const double C1300 =
        (C82650 + C82773 * (C82783 + ae * C82786 + C82615 * C82794)) / C81964;
    const double C1493 =
        (C82650 + C82773 * (C82879 + ae * C82786 + C82615 * C82884)) / C81964;
    const double C196 = C172 * C111;
    const double C275 = C251 * C111;
    const double C1709 = C1680 * C111;
    const double C6696 = C6691 * C111;
    const double C6797 = C6774 * C111;
    const double C8893 = C8870 * C111;
    const double C13646 = C13629 * C111;
    const double C38951 = C38946 * C111;
    const double C39052 = C39029 * C111;
    const double C45958 = C82067 * C111;
    const double C53901 = C53878 * C111;
    const double C1707 = C1678 * C726;
    const double C1699 = C1680 * C726;
    const double C1817 = C1786 * C726;
    const double C1921 = C251 * C726;
    const double C2906 = C84550 * C726;
    const double C6791 = C6775 * C726;
    const double C7668 = C6680 * C726;
    const double C10995 = C8870 * C726;
    const double C13636 = C13629 * C726;
    const double C13746 = C13723 * C726;
    const double C14707 = C84550 * C726;
    const double C19657 = C81997 * C726;
    const double C39046 = C39030 * C726;
    const double C39909 = C84576 * C726;
    const double C40976 = C40962 * C726;
    const double C45948 = C82067 * C726;
    const double C47019 = C45932 * C726;
    const double C60716 = C53878 * C726;
    const double C3466 = C1680 * C1186;
    const double C4232 = C1678 * C1186;
    const double C4322 = C172 * C1186;
    const double C4445 = C4414 * C1186;
    const double C6145 = C84550 * C1186;
    const double C8887 = C8871 * C1186;
    const double C10289 = C6680 * C1186;
    const double C10873 = C6774 * C1186;
    const double C15215 = C13629 * C1186;
    const double C21717 = C81997 * C1186;
    const double C26642 = C26619 * C1186;
    const double C28201 = C84550 * C1186;
    const double C43014 = C40962 * C1186;
    const double C47527 = C82067 * C1186;
    const double C48337 = C39029 * C1186;
    const double C50391 = C45932 * C1186;
    const double C53895 = C53879 * C1186;
    const double C55288 = C84576 * C1186;
    const double C1826 = C1807 + C1808;
    const double C13755 = C13736 + C13737;
    const double C46067 = C46048 + C46049;
    const double C20630 = C20613 + C20614;
    const double C41935 = C41918 + C41919;
    const double C11002 = C10989 + C10990;
    const double C43252 = C43244 + C43245;
    const double C55992 = C55979 + C55980;
    const double C23333 = C23326 + C23327;
    const double C44653 = C44646 + C44647;
    const double C23016 = C23003 + C23004;
    const double C44337 = C44324 + C44325;
    const double C4454 = C4435 + C4436;
    const double C26651 = C26632 + C26633;
    const double C63354 = C63335 + C63336;
    const double C34792 = C34789 + C34790;
    const double C45645 = C45640 + C45641;
    const double C3012 =
        (2 * (2 * ae * C82736 + C82730 * C82843) + C83163 + C83163 +
         C82730 * (C82843 + C83160 + C83160 +
                   C82730 * (2 * C82744 + C82730 * C82848))) /
        C81964;
    const double C4047 =
        (C83163 + C82773 * (C82900 + ae * C82730 * C82784 +
                            C82730 * (C82787 + C82730 * C82903))) /
        C81964;
    const double C3020 = C1787 * C2715;
    const double C14818 = C13724 * C2715;
    const double C16494 = C15867 * C2715;
    const double C16599 = C251 * C2715;
    const double C19966 = C19729 * C2715;
    const double C25490 = C8870 * C2715;
    const double C41279 = C41048 * C2715;
    const double C41924 = C40960 * C2715;
    const double C47130 = C82280 * C2715;
    const double C71738 = C53878 * C2715;
    const double C3807 = C1787 * C3546;
    const double C12198 = C6775 * C3546;
    const double C15520 = C13724 * C3546;
    const double C18267 = C15867 * C3546;
    const double C18364 = C13723 * C3546;
    const double C18449 = C4414 * C3546;
    const double C18917 = C84558 * C3546;
    const double C23222 = C8871 * C3546;
    const double C25858 = C19638 * C3546;
    const double C29729 = C1786 * C3546;
    const double C29813 = C26619 * C3546;
    const double C30243 = C84558 * C3546;
    const double C44446 = C39030 * C3546;
    const double C47832 = C82280 * C3546;
    const double C52235 = C40960 * C3546;
    const double C52946 = C45935 * C3546;
    const double C57268 = C53879 * C3546;
    const double C72103 = C84586 * C3546;
    const double C30779 = C30771 + C30772;
    const double C34897 = C34894 + C34895;
    const double C45755 = C45750 + C45751;
    const double C6602 =
        (2 * (2 * ae * C82779 + C82773 * C82917) + C83402 + C83402 +
         C82773 * (C82917 + C83399 + C83399 +
                   C82773 * (2 * C82787 + C82773 * C82922))) /
        C81964;
    const double C6610 = C4415 * C6058;
    const double C28632 = C26620 * C6058;
    const double C32065 = C15867 * C6058;
    const double C32114 = C172 * C6058;
    const double C35669 = C35212 * C6058;
    const double C38792 = C6774 * C6058;
    const double C59137 = C58688 * C6058;
    const double C60272 = C40960 * C6058;
    const double C65290 = C82430 * C6058;
    const double C74456 = C39029 * C6058;
    const double C18555 = C18551 * C84561;
    const double C29902 = C18551 * C84561;
    const double C38066 = C18551 * C35067;
    const double C73733 = C18551 * C84589;
    const double C81049 = C18551 * C63169;
    const double C3549 = (C82773 * (C82679 + C82730 * C82769)) / C81964;
    const double C82680 = C82656 + C82678;
    const double C82948 = ae * C82947;
    const double C3450 = (C82773 * C82947) / C81958;
    const double C83012 = ae * C83011;
    const double C1704 = C1678 * C1687;
    const double C1702 = C1680 * C1687;
    const double C1819 = C1787 * C1687;
    const double C1929 = C251 * C1687;
    const double C2918 = C84550 * C1687;
    const double C13639 = C13629 * C1687;
    const double C13748 = C13724 * C1687;
    const double C14719 = C84550 * C1687;
    const double C19655 = C81997 * C1687;
    const double C40974 = C40962 * C1687;
    const double C45951 = C82067 * C1687;
    const double C46060 = C82280 * C1687;
    const double C47031 = C45932 * C1687;
    const double C4229 = C1678 * C4218;
    const double C4227 = C1680 * C4218;
    const double C4330 = C172 * C4218;
    const double C4447 = C4415 * C4218;
    const double C6157 = C84550 * C4218;
    const double C26464 = C13629 * C4218;
    const double C26644 = C26620 * C4218;
    const double C28213 = C84550 * C4218;
    const double C32268 = C81997 * C4218;
    const double C43012 = C40962 * C4218;
    const double C50080 = C82067 * C4218;
    const double C63347 = C82430 * C4218;
    const double C64886 = C45932 * C4218;
    const double C11762 = C84550 * C3456;
    const double C49150 = C45932 * C3456;
    const double C69023 = C84550 * C3456;
    const double C23012 = C84198 * C3715;
    const double C52238 = C84198 * C3715;
    const double C32489 = C84561 * C5283;
    const double C43247 = C84561 * C5283;
    const double C65598 = C63169 * C5283;
    const double C33839 = C84198 * C5597;
    const double C44651 = C84198 * C5597;
    const double C2618 = C84550 * C1691;
    const double C14446 = C84550 * C1691;
    const double C46758 = C45932 * C1691;
    const double C19746 = C84536 * C2717;
    const double C41065 = C84536 * C2717;
    const double C20622 = C84198 * C2898;
    const double C41927 = C84198 * C2898;
    const double C21940 = C84344 * C3635;
    const double C55988 = C84344 * C3635;
    const double C23331 = C84198 * C3964;
    const double C52546 = C84198 * C3964;
    const double C19826 = C19823 + C19824;
    const double C20632 = C20617 + C20618;
    const double C41937 = C41922 + C41923;
    const double C21834 = C21827 + C21828;
    const double C23018 = C23007 + C23008;
    const double C51118 = C51111 + C51112;
    const double C52240 = C52233 + C52234;
    const double C55874 = C55867 + C55868;
    const double C5857 = C84550 * C4222;
    const double C27940 = C84550 * C4222;
    const double C64634 = C45932 * C4222;
    const double C33533 = C84198 * C5360;
    const double C44333 = C84198 * C5360;
    const double C35229 = C84543 * C6060;
    const double C58705 = C84543 * C6060;
    const double C36808 = C84198 * C6423;
    const double C60275 = C84198 * C6423;
    const double C35143 = C35140 + C35141;
    const double C36598 = C36591 + C36592;
    const double C60065 = C60058 + C60059;
    const double C18947 = C18934 + C18935;
    const double C30273 = C30260 + C30261;
    const double C81387 = C81380 + C81381;
    const double C83100 = ae * C83099;
    const double C1791 = (2 * C82743 + C82615 * C82752 + C82730 * C83099 +
                          C82730 * C82709 * ae) /
                         C81958;
    const double C8179 = (C82773 * C83099) / C81958;
    const double C83301 = ae * C83300;
    const double C4419 = (2 * C82786 + C82615 * C82795 + C82773 * C83300 +
                          C82773 * C82709 * ae) /
                         C81958;
    const double C83141 = C83140 + C83137;
    const double C3794 =
        (C82773 * C82855 + C83209 + C83209 +
         C82730 * (2 * ae * C82773 * C82766 +
                   C82730 * C82773 *
                       (C82853 + (C82687 * C82688 +
                                  C82838 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82619))) /
        C81964;
    const double C5673 =
        (ae * C82795 + C82730 * C82908 + C83209 +
         C82773 * (C83139 +
                   C82773 * (ae * C82809 +
                             C82730 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C83381 = C83380 + C83377;
    const double C5750 =
        (C82730 * C82929 + C83334 + C83334 +
         C82773 * (2 * ae * C83331 +
                   C82773 * C82730 *
                       (C82927 + (C82687 * C82688 +
                                  C82912 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82619))) /
        C81964;
    const double C5754 = C4415 * C5279;
    const double C13539 = C8871 * C5279;
    const double C27846 = C26620 * C5279;
    const double C63092 = C53879 * C5279;
    const double C64546 = C82430 * C5279;
    const double C83475 = ae * C83473;
    const double C83474 = C82730 * C83473;
    const double C83736 = C82773 * C83473;
    const double C17576 =
        (C83144 + C83458 * C82912 + C83646 + C83646 +
         C82730 *
             (2 * ae * (C82754 + C83460 * C82912) +
              C82730 * (C83458 + C82615 *
                                     (C82687 * C82688 +
                                      C82838 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82912))) /
        C81964;
    const double C34890 =
        (2 * (C83150 + C82773 * C83499) + C83646 +
         C82773 * (C83499 + C83739 +
                   C82773 * (C83471 +
                             C82773 * (ae * C83486 + C82730 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82897)))) /
        C81964;
    const double C34579 = C6775 * C34250;
    const double C36028 = C172 * C34250;
    const double C45422 = C39030 * C34250;
    const double C83818 = ae * C83816;
    const double C83817 = C82773 * C83816;
    const double C17886 =
        (C83177 + C83502 * C82838 + C83660 + C83660 +
         C82773 *
             (2 * ae * C83490 +
              C82773 * (C83502 + C82615 *
                                     (C82687 * C82688 +
                                      C82912 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82838))) /
        C81964;
    const double C21411 =
        (2 * (C83389 + C82730 * C83742) + C83660 +
         C82730 * (C83742 + ae * (C82773 * C82730 * C83486 + C83465) +
                   C82730 * (ae * (C82773 * C83486 + C82701) +
                             C82730 * (ae * C83460 + C82773 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82860)))) /
        C81964;
    const double C17891 = C4415 * C17422;
    const double C24462 = C8871 * C17422;
    const double C29310 = C26620 * C17422;
    const double C58474 = C53879 * C17422;
    const double C67132 = C82430 * C17422;
    const double C83954 = C83953 + C83949;
    const double C5202 =
        (C82679 + C82730 * C82769 +
         (C82720 +
          C82730 * (C82759 + ae * C82615 * C82761 +
                    C82615 * (ae * C82761 +
                              C82615 * std::pow(C82621, 7) * bs[7] * C82734))) *
             C82912) /
        C81964;
    const double C82721 = C82690 + C82719;
    const double C82941 = ae * C82935;
    const double C83405 = C82773 * C82935;
    const double C5116 = (C82947 + C82935 * C82912) / C81958;
    const double C83005 = ae * C82999;
    const double C83069 = C82677 + C83066;
    const double C83254 = C82677 + C83251;
    const double C5119 =
        (C82946 + C82933 * C82912 + C83305 + C83305 +
         C82615 *
             (2 * ae * (C82932 + C82730 * C82700 * C82912) +
              C82615 * (C82933 + C82730 *
                                     (C82687 * C82688 +
                                      C82619 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82912))) /
        C81964;
    const double C17500 =
        (C82826 + C82832 * C82912 + C83305 +
         C82730 * (C83257 + C82730 * (C82832 + (ae * C82761 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818) *
                                                   C82912))) /
        C81964;
    const double C34363 =
        (2 * (C82937 + C82773 * C83937) + C83305 +
         C82773 * (C83937 + C83408 +
                   C82773 * (C82942 +
                             C82773 * C82730 *
                                 (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777)))) /
        C81964;
    const double C34785 =
        (2 * (C82937 + C82773 * C83942) + C83305 +
         C82773 * (C83942 + C83408 +
                   C82773 * (C82942 +
                             C82773 * C82730 *
                                 (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876)))) /
        C81964;
    const double C34143 = C81997 * C34136;
    const double C37017 = C15867 * C34136;
    const double C44958 = C40962 * C34136;
    const double C83121 = ae * C83120;
    const double C15871 = (3 * C83062 + C82730 * C83120) / C81958;
    const double C21057 = (C82773 * C83120) / C81958;
    const double C3453 =
        (C82773 * C83068 + C83181 + C83181 +
         C82615 * (2 * ae * C82773 * (C82664 + C82700 * C82838) +
                   C82615 * C82773 *
                       (C82707 + (C82687 * C82688 +
                                  C82619 * bs[7] * std::pow(C82621, 7)) *
                                     C82622 * C82838))) /
        C81964;
    const double C17424 =
        (C82794 + C82808 * C82838 + C83181 +
         C82773 * (C83072 + C82773 * (C82808 + (ae * C82804 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777) *
                                                   C82838))) /
        C81964;
    const double C17734 =
        (C82884 + C82890 * C82838 + C83181 +
         C82773 * (C83072 + C82773 * (C82890 + (ae * C82804 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876) *
                                                   C82838))) /
        C81964;
    const double C21269 =
        (2 * (C83001 + C82730 * C83733) + C83181 +
         C82730 * (C83733 + C83408 +
                   C82730 * (C83006 +
                             C82730 * C82773 *
                                 (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818)))) /
        C81964;
    const double C83349 = ae * C83348;
    const double C30910 = (3 * C83247 + C82773 * C83348) / C81958;
    const double C83551 = C83529 + C83549;
    const double C83606 = ae * C83600;
    const double C83672 = C83450 + C83669;
    const double C83699 = ae * C83698;
    const double C31382 = (3 * C83641 + C82773 * C83698) / C81958;
    const double C83927 = C83907 + C83925;
    const double C83685 = ae * C83684;
    const double C18147 = (2 * C83341 + C82730 * C83483 + C82773 * C83684 +
                           C82773 * C83546 * ae) /
                          C81958;
    const double C83716 = C83715 + C83712;
    const double C83865 = ae * C83863;
    const double C83864 = C82773 * C83863;
    const double C2118 = C84558 * C2095;
    const double C14007 = C84558 * C2095;
    const double C46319 = C45935 * C2095;
    const double C11536 = C84304 * C4044;
    const double C48946 = C84304 * C4044;
    const double C1829 = C1813 + C1814;
    const double C2237 = C2232 + C2233;
    const double C13758 = C13742 + C13743;
    const double C46070 = C46054 + C46055;
    const double C10882 = C10871 + C10872;
    const double C11332 = C11327 + C11328;
    const double C48342 = C48335 + C48336;
    const double C61023 = C61020 + C61021;
    const double C411 = C407 + C398;
    const double C9045 = C9044 + C9042;
    const double C4640 = C4636 + C4627;
    const double C6175 = C6162 + C6163;
    const double C28231 = C28218 + C28219;
    const double C64898 = C64891 + C64892;
    const double C83153 = ae * C83152;
    const double C2714 =
        (2 * C83091 + C82730 * C83152 + (C82638 + C82661 * C82838) * ae) /
        C81958;
    const double C3544 = (C82773 * C83152) / C81958;
    const double C17344 = (C83152 + C83473 * C82912) / C81958;
    const double C22146 = C84558 * C3796;
    const double C51418 = C45935 * C3796;
    const double C56198 = C84558 * C3796;
    const double C33008 = C84304 * C5674;
    const double C43786 = C84304 * C5674;
    const double C83453 = C83438 + C83451;
    const double C83613 = ae * C83612;
    const double C17580 = C13724 * C17343;
    const double C18275 = C15867 * C17343;
    const double C18361 = C13723 * C17343;
    const double C18451 = C4415 * C17343;
    const double C18929 = C84558 * C17343;
    const double C29007 = C1787 * C17343;
    const double C29726 = C1786 * C17343;
    const double C29815 = C26620 * C17343;
    const double C30255 = C84558 * C17343;
    const double C33638 = C6775 * C17343;
    const double C44442 = C39030 * C17343;
    const double C53262 = C82280 * C17343;
    const double C80965 = C82430 * C17343;
    const double C81375 = C45935 * C17343;
    const double C19213 = C84558 * C17575;
    const double C30519 = C84558 * C17575;
    const double C81627 = C45935 * C17575;
    const double C38795 = C84304 * C19467;
    const double C74459 = C84304 * C19467;
    const double C37848 = C37845 + C37846;
    const double C38369 = C38362 + C38363;
    const double C74033 = C74026 + C74027;
    const double C31976 = C31974 + C31969;
    const double C5018 = C84561 * C4995;
    const double C27155 = C84561 * C4995;
    const double C63858 = C63169 * C4995;
    const double C4457 = C4441 + C4442;
    const double C4912 = C4907 + C4908;
    const double C26654 = C26638 + C26639;
    const double C63357 = C63341 + C63342;
    const double C670 = C666 + C657;
    const double C7365 = C7364 + C7362;
    const double C2519 = C2515 + C2506;
    const double C3200 = C3193 + C3194;
    const double C14986 = C14979 + C14980;
    const double C47298 = C47291 + C47292;
    const double C33114 = C84561 * C5751;
    const double C43894 = C84561 * C5751;
    const double C66207 = C63169 * C5751;
    const double C32492 = C32482 + C32483;
    const double C43250 = C43240 + C43241;
    const double C65601 = C65591 + C65592;
    const double C83392 = ae * C83391;
    const double C6057 =
        (2 * C83292 + C82773 * C83391 + (C82638 + C82661 * C82912) * ae) /
        C81958;
    const double C18719 = C84561 * C17885;
    const double C30068 = C84561 * C17885;
    const double C81209 = C63169 * C17885;
    const double C18182 = C18166 + C18167;
    const double C18553 = C18548 + C18549;
    const double C29573 = C29557 + C29558;
    const double C80732 = C80722 + C80723;
    const double C16764 = C16762 + C16757;
    const double C83728 = ae * C83727;
    const double C19022 =
        (2 * C83343 + C82773 * C83727 + (C83156 + C83440 * C82912) * ae) /
        C81958;
    const double C83798 = C83786 + C83796;
    const double C6259 = C4639 * C1670;
    const double C28310 = C4639 * C84574;
    const double C36670 = C4639 * C84198;
    const double C60137 = C4639 * C84198;
    const double C64977 = C4639 * C84201;
    const double C36672 = C35374 * C84198;
    const double C60139 = C35374 * C84198;
    const double C20290 = C20289 * C84536;
    const double C41595 = C20289 * C84536;
    const double C7904 = C7899 + C7900;
    const double C10307 = C10298 + C10299;
    const double C40145 = C40140 + C40141;
    const double C55306 = C55297 + C55298;
    const double C82024 = C82018 - C81990;
    const double C82025 = C82017 / C81977;
    const double C82023 = C82017 / C81958;
    const double C2617 = C1679 * C1683;
    const double C2611 = C1679 * C721;
    const double C5856 = C1679 * C4214;
    const double C5850 = C1679 * C1181;
    const double C11761 = C1679 * C3444;
    const double C7439 = C6690 * C720;
    const double C10060 = C6690 * C1180;
    const double C14445 = C13628 * C1683;
    const double C14439 = C13628 * C721;
    const double C27939 = C13628 * C4214;
    const double C27933 = C13628 * C1181;
    const double C69022 = C13628 * C3444;
    const double C16314 = C15866 * C15868;
    const double C16312 = C15866 * C2599;
    const double C16310 = C15866 * C1681;
    const double C16308 = C15866 * C723;
    const double C17979 = C15866 * C17254;
    const double C17977 = C15866 * C3443;
    const double C17974 = C15866 * C5115;
    const double C17972 = C15866 * C3446;
    const double C18823 = C15866 * C4212;
    const double C18821 = C15866 * C1183;
    const double C25132 = C15866 * C16807;
    const double C31741 = C15866 * C30907;
    const double C31739 = C15866 * C5838;
    const double C37615 = C15866 * C18815;
    const double C20367 = C19642 * C2598;
    const double C20363 = C19642 * C1682;
    const double C20359 = C19642 * C722;
    const double C22677 = C19642 * C3442;
    const double C22673 = C19642 * C3445;
    const double C23646 = C19642 * C1182;
    const double C33224 = C19642 * C5114;
    const double C34141 = C19642 * C4213;
    const double C36369 = C19642 * C5837;
    const double C39680 = C38945 * C720;
    const double C55059 = C38945 * C1180;
    const double C41672 = C40961 * C2598;
    const double C41668 = C40961 * C1682;
    const double C41664 = C40961 * C722;
    const double C44008 = C40961 * C5114;
    const double C44004 = C40961 * C3445;
    const double C44956 = C40961 * C4213;
    const double C44952 = C40961 * C1182;
    const double C51929 = C40961 * C3442;
    const double C59836 = C40961 * C5837;
    const double C46757 = C45940 * C1683;
    const double C46751 = C45940 * C721;
    const double C49149 = C45940 * C3444;
    const double C50075 = C45940 * C1181;
    const double C64633 = C45940 * C4214;
    const double C2934 = C2919 + C2920;
    const double C2931 = C2913 + C2914;
    const double C2928 = C2907 + C2908;
    const double C2925 = C2901 + C2902;
    const double C3198 = C3189 + C3190;
    const double C3195 = C3183 + C3184;
    const double C6173 = C6158 + C6159;
    const double C6170 = C6152 + C6153;
    const double C6167 = C6146 + C6147;
    const double C6164 = C6140 + C6141;
    const double C6441 = C6432 + C6433;
    const double C6438 = C6426 + C6427;
    const double C12093 = C12084 + C12085;
    const double C12090 = C12078 + C12079;
    const double C12408 = C12402 + C12403;
    const double C2935 = C2921 + C2922;
    const double C2932 = C2915 + C2916;
    const double C2929 = C2909 + C2910;
    const double C2926 = C2903 + C2904;
    const double C3199 = C3191 + C3192;
    const double C3196 = C3185 + C3186;
    const double C6174 = C6160 + C6161;
    const double C6171 = C6154 + C6155;
    const double C6168 = C6148 + C6149;
    const double C6165 = C6142 + C6143;
    const double C6442 = C6434 + C6435;
    const double C6439 = C6428 + C6429;
    const double C12094 = C12086 + C12087;
    const double C12091 = C12080 + C12081;
    const double C12409 = C12404 + C12405;
    const double C41936 = C41920 + C41921;
    const double C41934 = C41916 + C41917;
    const double C41932 = C41912 + C41913;
    const double C41930 = C41908 + C41909;
    const double C41928 = C41904 + C41905;
    const double C42162 = C42154 + C42155;
    const double C42160 = C42150 + C42151;
    const double C42158 = C42146 + C42147;
    const double C44340 = C44330 + C44331;
    const double C44338 = C44326 + C44327;
    const double C44336 = C44322 + C44323;
    const double C44334 = C44318 + C44319;
    const double C44654 = C44648 + C44649;
    const double C44652 = C44644 + C44645;
    const double C45314 = C45304 + C45305;
    const double C45312 = C45300 + C45301;
    const double C45310 = C45296 + C45297;
    const double C45308 = C45292 + C45293;
    const double C45644 = C45638 + C45639;
    const double C45642 = C45634 + C45635;
    const double C52239 = C52231 + C52232;
    const double C52547 = C52543 + C52544;
    const double C60066 = C60060 + C60061;
    const double C60064 = C60056 + C60057;
    const double C39675 = C84602 * C733;
    const double C39831 = C2817 * C84602;
    const double C39913 = C84602 * C889;
    const double C39905 = C84602 * C728;
    const double C40135 = C84602 * C1035;
    const double C55054 = C84602 * C1193;
    const double C55144 = C5976 * C84602;
    const double C55292 = C84602 * C1349;
    const double C55284 = C84602 * C1188;
    const double C55373 = C6268 * C84602;
    const double C55510 = C84602 * C1495;
    const double C81 =
        (C84590 + 2 * C84193) / C81965 - (C84602 * C84184) / C81958;
    const double C7436 = C6679 * C732;
    const double C7592 = C1932 * C6679;
    const double C7674 = C6679 * C888;
    const double C7666 = C6679 * C727;
    const double C7896 = C6679 * C1034;
    const double C10057 = C6679 * C1192;
    const double C10147 = C4333 * C6679;
    const double C10295 = C6679 * C1348;
    const double C10287 = C6679 * C1187;
    const double C10375 = C4637 * C6679;
    const double C10513 = C6679 * C1494;
    const double C39677 = C84592 * C732;
    const double C39833 = C1932 * C84592;
    const double C39915 = C84592 * C888;
    const double C39907 = C84592 * C727;
    const double C40137 = C84592 * C1034;
    const double C55056 = C84592 * C1192;
    const double C55146 = C4333 * C84592;
    const double C55294 = C84592 * C1348;
    const double C55286 = C84592 * C1187;
    const double C55374 = C4637 * C84592;
    const double C55512 = C84592 * C1494;
    const double C82 =
        (C84574 + 2 * C84201 + C84602) / C81965 - (C84592 * C84184) / C81958;
    const double C83 = (C84550 + C84198 / C81958 + C84592) / C81965 -
                       (C84576 * C84184) / C81958;
    const double C82299 = C82131 / C81977;
    const double C82295 = C82131 / C81958;
    const double C2091 =
        (((-4 * C82116) / C81958 - C82131 / C81958) * ae) / C81977 +
        ((2 * ((0 * ae) / C81958 - C82116 / C81964) - C82131 / C81977) * ae) /
            C81958;
    const double C7016 =
        (((-4 * C82116) / C81958 - C82131 / C81958) * ae) / C81958;
    const double C13983 =
        (-(be * -2 * C82114) / C81964) / C81965 -
        ((2 * ((-C82114 / C81958) / C81965 - (C82127 * be) / C81958) -
          (C82091 * ((-4 * C82116) / C81958 - C82131 / C81958) * be) / C81958) *
         be) /
            C81958 -
        C82128 / C81977;
    const double C13984 =
        (-(((-4 * C82116) / C81958 - C82131 / C81958) * be) / C81958) / C81965 -
        ((2 * ((-C82124 / C81958) / C81965 - (0 * be) / C81958) -
          C82131 / C81977) *
         be) /
            C81958;
    const double C2110 = C2090 * C104;
    const double C2101 = C2090 * C103;
    const double C30514 = C2090 * C4212;
    const double C30508 = C2090 * C1183;
    const double C56193 = C2090 * C1182;
    const double C2116 = C2092 * C1683;
    const double C2107 = C2092 * C1682;
    const double C30518 = C2092 * C17254;
    const double C30512 = C2092 * C3443;
    const double C56197 = C2092 * C3442;
    const double C7036 = C7017 * C720;
    const double C7030 = C7017 * C721;
    const double C7024 = C7017 * C722;
    const double C11209 = C7017 * C3444;
    const double C11205 = C7017 * C3445;
    const double C13127 = C7017 * C3446;
    const double C32694 = C7017 * C5114;
    const double C34577 = C7017 * C5115;
    const double C38584 = C7017 * C18815;
    const double C14005 = C13985 * C1683;
    const double C13996 = C13985 * C1682;
    const double C19212 = C13985 * C17254;
    const double C19206 = C13985 * C3443;
    const double C22145 = C13985 * C3442;
    const double C19976 = C19961 * C2598;
    const double C26089 = C19961 * C16807;
    const double C39285 = C39266 * C720;
    const double C39279 = C39266 * C721;
    const double C39273 = C39266 * C722;
    const double C43459 = C39266 * C5114;
    const double C43452 = C39266 * C3445;
    const double C45420 = C39266 * C5115;
    const double C45416 = C39266 * C3446;
    const double C48641 = C39266 * C3444;
    const double C74248 = C39266 * C18815;
    const double C41289 = C41274 * C2598;
    const double C72334 = C41274 * C16807;
    const double C46317 = C46297 * C1683;
    const double C46308 = C46297 * C1682;
    const double C51417 = C46297 * C3442;
    const double C53257 = C46297 * C3443;
    const double C81626 = C46297 * C17254;
    const double C82246 = C82242 - C82235;
    const double C6809 = C6793 + C6794;
    const double C6807 = C6789 + C6790;
    const double C6805 = C6785 + C6786;
    const double C6803 = C6781 + C6782;
    const double C6801 = C6777 + C6778;
    const double C7288 = C7280 + C7281;
    const double C7286 = C7276 + C7277;
    const double C7284 = C7272 + C7273;
    const double C10881 = C10869 + C10870;
    const double C10879 = C10865 + C10866;
    const double C10877 = C10861 + C10862;
    const double C11539 = C11533 + C11534;
    const double C11537 = C11529 + C11530;
    const double C12829 = C12823 + C12824;
    const double C12827 = C12819 + C12820;
    const double C13439 = C13435 + C13436;
    const double C32378 = C32372 + C32373;
    const double C32376 = C32368 + C32369;
    const double C33009 = C33005 + C33006;
    const double C34263 = C34257 + C34258;
    const double C34261 = C34253 + C34254;
    const double C34896 = C34892 + C34893;
    const double C38370 = C38364 + C38365;
    const double C38368 = C38360 + C38361;
    const double C13759 = C13744 + C13745;
    const double C13756 = C13738 + C13739;
    const double C13753 = C13732 + C13733;
    const double C13750 = C13726 + C13727;
    const double C14278 = C14269 + C14270;
    const double C14275 = C14263 + C14264;
    const double C18945 = C18930 + C18931;
    const double C18942 = C18924 + C18925;
    const double C18939 = C18918 + C18919;
    const double C18936 = C18912 + C18913;
    const double C19484 = C19475 + C19476;
    const double C19481 = C19469 + C19470;
    const double C21832 = C21823 + C21824;
    const double C21829 = C21817 + C21818;
    const double C22462 = C22456 + C22457;
    const double C13757 = C13740 + C13741;
    const double C13754 = C13734 + C13735;
    const double C13751 = C13728 + C13729;
    const double C14279 = C14271 + C14272;
    const double C14276 = C14265 + C14266;
    const double C18946 = C18932 + C18933;
    const double C18943 = C18926 + C18927;
    const double C18940 = C18920 + C18921;
    const double C18937 = C18914 + C18915;
    const double C19485 = C19477 + C19478;
    const double C19482 = C19471 + C19472;
    const double C21833 = C21825 + C21826;
    const double C21830 = C21819 + C21820;
    const double C22463 = C22458 + C22459;
    const double C39064 = C39048 + C39049;
    const double C39062 = C39044 + C39045;
    const double C39060 = C39040 + C39041;
    const double C39058 = C39036 + C39037;
    const double C39056 = C39032 + C39033;
    const double C39534 = C39526 + C39527;
    const double C39532 = C39522 + C39523;
    const double C39530 = C39518 + C39519;
    const double C43136 = C43126 + C43127;
    const double C43134 = C43122 + C43123;
    const double C43132 = C43118 + C43119;
    const double C43130 = C43114 + C43115;
    const double C43789 = C43783 + C43784;
    const double C43787 = C43779 + C43780;
    const double C45094 = C45084 + C45085;
    const double C45092 = C45080 + C45081;
    const double C45090 = C45076 + C45077;
    const double C45088 = C45072 + C45073;
    const double C45754 = C45748 + C45749;
    const double C45752 = C45744 + C45745;
    const double C48341 = C48333 + C48334;
    const double C48947 = C48943 + C48944;
    const double C74034 = C74028 + C74029;
    const double C74032 = C74024 + C74025;
    const double C20215 = C20210 + C20211;
    const double C25876 = C25867 + C25868;
    const double C41525 = C41520 + C41521;
    const double C72121 = C72112 + C72113;
    const double C41059 = C84606 * C180;
    const double C41051 = C84606 * C174;
    const double C41282 = C84606 * C380;
    const double C41375 = C472 * C84606;
    const double C41515 = C84606 * C570;
    const double C41592 = C667 * C84606;
    const double C72107 = C84606 * C1250;
    const double C72099 = C84606 * C1245;
    const double C72255 = C19119 * C84606;
    const double C72329 = C84606 * C1396;
    const double C72551 = C84606 * C1542;
    const double C15861 =
        (C84596 + 2 * C84300) / C81965 - (C84606 * C84296) / C81958;
    const double C19742 = C19637 * C789;
    const double C19734 = C19637 * C784;
    const double C19972 = C19637 * C935;
    const double C20064 = C2234 * C19637;
    const double C20207 = C19637 * C1081;
    const double C20283 = C2516 * C19637;
    const double C25864 = C19637 * C3553;
    const double C25856 = C19637 * C3547;
    const double C26012 = C18278 * C19637;
    const double C26086 = C19637 * C3799;
    const double C26308 = C19637 * C4048;
    const double C41061 = C84599 * C789;
    const double C41053 = C84599 * C784;
    const double C41285 = C84599 * C935;
    const double C41377 = C2234 * C84599;
    const double C41517 = C84599 * C1081;
    const double C41593 = C2516 * C84599;
    const double C72109 = C84599 * C3553;
    const double C72101 = C84599 * C3547;
    const double C72257 = C18278 * C84599;
    const double C72331 = C84599 * C3799;
    const double C72553 = C84599 * C4048;
    const double C15862 =
        (C84581 + 2 * C84307 + C84606) / C81965 - (C84599 * C84296) / C81958;
    const double C15863 = (C84558 + C84304 / C81958 + C84599) / C81965 -
                          (C84586 * C84296) / C81958;
    const double C82449 = C82157 / C81977;
    const double C82445 = C82157 / C81958;
    const double C4991 =
        (((-4 * C82142) / C81958 - C82157 / C81958) * ae) / C81977 +
        ((2 * ((0 * ae) / C81958 - C82142 / C81964) - C82157 / C81977) * ae) /
            C81958;
    const double C9342 =
        (((-4 * C82142) / C81958 - C82157 / C81958) * ae) / C81958;
    const double C27131 =
        (-(be * -2 * C82140) / C81964) / C81965 -
        ((2 * ((-C82140 / C81958) / C81965 - (C82153 * be) / C81958) -
          (C82094 * ((-4 * C82142) / C81958 - C82157 / C81958) * be) / C81958) *
         be) /
            C81958 -
        C82154 / C81977;
    const double C27132 =
        (-(((-4 * C82142) / C81958 - C82157 / C81958) * be) / C81958) / C81965 -
        ((2 * ((-C82150 / C81958) / C81965 - (0 * be) / C81958) -
          C82157 / C81977) *
         be) /
            C81958;
    const double C5010 = C4990 * C104;
    const double C5001 = C4990 * C103;
    const double C18714 = C4990 * C1681;
    const double C18708 = C4990 * C723;
    const double C43889 = C4990 * C722;
    const double C5016 = C4992 * C4214;
    const double C5007 = C4992 * C4213;
    const double C18718 = C4992 * C17254;
    const double C18712 = C4992 * C5115;
    const double C43893 = C4992 * C5114;
    const double C9362 = C9343 * C1180;
    const double C9356 = C9343 * C1181;
    const double C9350 = C9343 * C1182;
    const double C11645 = C9343 * C3444;
    const double C11641 = C9343 * C3445;
    const double C12609 = C9343 * C3446;
    const double C22565 = C9343 * C3442;
    const double C23534 = C9343 * C3443;
    const double C25711 = C9343 * C16807;
    const double C27153 = C27133 * C4214;
    const double C27144 = C27133 * C4213;
    const double C30067 = C27133 * C17254;
    const double C30061 = C27133 * C5115;
    const double C33113 = C27133 * C5114;
    const double C35679 = C35664 * C5837;
    const double C38210 = C35664 * C18815;
    const double C54362 = C54343 * C1180;
    const double C54356 = C54343 * C1181;
    const double C54350 = C54343 * C1182;
    const double C56630 = C54343 * C3442;
    const double C56625 = C54343 * C3445;
    const double C57574 = C54343 * C3443;
    const double C57570 = C54343 * C3446;
    const double C61320 = C54343 * C3444;
    const double C71956 = C54343 * C16807;
    const double C59147 = C59132 * C5837;
    const double C73874 = C59132 * C18815;
    const double C63856 = C63836 * C4214;
    const double C63847 = C63836 * C4213;
    const double C66206 = C63836 * C5114;
    const double C67130 = C63836 * C5115;
    const double C81208 = C63836 * C17254;
    const double C82396 = C82392 - C82385;
    const double C8905 = C8889 + C8890;
    const double C8903 = C8885 + C8886;
    const double C8901 = C8881 + C8882;
    const double C8899 = C8877 + C8878;
    const double C8897 = C8873 + C8874;
    const double C9128 = C9120 + C9121;
    const double C9126 = C9116 + C9117;
    const double C9124 = C9112 + C9113;
    const double C11003 = C10991 + C10992;
    const double C11001 = C10987 + C10988;
    const double C10999 = C10983 + C10984;
    const double C11331 = C11325 + C11326;
    const double C11329 = C11321 + C11322;
    const double C11978 = C11972 + C11973;
    const double C11976 = C11968 + C11969;
    const double C12302 = C12298 + C12299;
    const double C21943 = C21937 + C21938;
    const double C21941 = C21933 + C21934;
    const double C22258 = C22254 + C22255;
    const double C22897 = C22891 + C22892;
    const double C22895 = C22887 + C22888;
    const double C23224 = C23220 + C23221;
    const double C25280 = C25274 + C25275;
    const double C25278 = C25270 + C25271;
    const double C26655 = C26640 + C26641;
    const double C26652 = C26634 + C26635;
    const double C26649 = C26628 + C26629;
    const double C26646 = C26622 + C26623;
    const double C26895 = C26886 + C26887;
    const double C26892 = C26880 + C26881;
    const double C29574 = C29559 + C29560;
    const double C29571 = C29553 + C29554;
    const double C29568 = C29547 + C29548;
    const double C29565 = C29541 + C29542;
    const double C29820 = C29811 + C29812;
    const double C29817 = C29805 + C29806;
    const double C32493 = C32484 + C32485;
    const double C32490 = C32478 + C32479;
    const double C32806 = C32800 + C32801;
    const double C26653 = C26636 + C26637;
    const double C26650 = C26630 + C26631;
    const double C26647 = C26624 + C26625;
    const double C26896 = C26888 + C26889;
    const double C26893 = C26882 + C26883;
    const double C29575 = C29561 + C29562;
    const double C29572 = C29555 + C29556;
    const double C29569 = C29549 + C29550;
    const double C29566 = C29543 + C29544;
    const double C29818 = C29807 + C29808;
    const double C32494 = C32486 + C32487;
    const double C32491 = C32480 + C32481;
    const double C32807 = C32802 + C32803;
    const double C53913 = C53897 + C53898;
    const double C53911 = C53893 + C53894;
    const double C53909 = C53889 + C53890;
    const double C53907 = C53885 + C53886;
    const double C53905 = C53881 + C53882;
    const double C54131 = C54123 + C54124;
    const double C54129 = C54119 + C54120;
    const double C54127 = C54115 + C54116;
    const double C55995 = C55985 + C55986;
    const double C55993 = C55981 + C55982;
    const double C55991 = C55977 + C55978;
    const double C55989 = C55973 + C55974;
    const double C56316 = C56310 + C56311;
    const double C56314 = C56306 + C56307;
    const double C56963 = C56953 + C56954;
    const double C56961 = C56949 + C56950;
    const double C56959 = C56945 + C56946;
    const double C56957 = C56941 + C56942;
    const double C57272 = C57266 + C57267;
    const double C57270 = C57262 + C57263;
    const double C60720 = C60712 + C60713;
    const double C61022 = C61018 + C61019;
    const double C71534 = C71528 + C71529;
    const double C71532 = C71524 + C71525;
    const double C35452 = C35447 + C35448;
    const double C37776 = C37767 + C37768;
    const double C37994 = C37989 + C37990;
    const double C58923 = C58918 + C58919;
    const double C73449 = C73440 + C73441;
    const double C73661 = C73656 + C73657;
    const double C58699 = C84607 * C259;
    const double C58691 = C84607 * C253;
    const double C58913 = C84607 * C454;
    const double C59057 = C588 * C84607;
    const double C59140 = C84607 * C639;
    const double C73435 = C84607 * C842;
    const double C73427 = C84607 * C837;
    const double C73651 = C84607 * C988;
    const double C73729 = C16660 * C84607;
    const double C73869 = C84607 * C1129;
    const double C30902 =
        (C84597 + 2 * C84340) / C81965 - (C84607 * C84336) / C81958;
    const double C35225 = C35066 * C1301;
    const double C35217 = C35066 * C1296;
    const double C35444 = C35066 * C1447;
    const double C35588 = C4909 * C35066;
    const double C35675 = C35066 * C1588;
    const double C37764 = C35066 * C3639;
    const double C37756 = C35066 * C3633;
    const double C37986 = C35066 * C3888;
    const double C38064 = C18550 * C35066;
    const double C38207 = C35066 * C4128;
    const double C58701 = C84601 * C1301;
    const double C58693 = C84601 * C1296;
    const double C58915 = C84601 * C1447;
    const double C59059 = C4909 * C84601;
    const double C59143 = C84601 * C1588;
    const double C73437 = C84601 * C3639;
    const double C73429 = C84601 * C3633;
    const double C73653 = C84601 * C3888;
    const double C73731 = C18550 * C84601;
    const double C73871 = C84601 * C4128;
    const double C30903 =
        (C84583 + 2 * C84347 + C84607) / C81965 - (C84601 * C84336) / C81958;
    const double C30904 = (C84561 + C84344 / C81958 + C84601) / C81965 -
                          (C84589 * C84336) / C81958;
    const double C1818 = C84581 * C788;
    const double C6792 = C84304 * C788;
    const double C13747 = C13622 * C788;
    const double C39047 = C84304 * C788;
    const double C46059 = C84307 * C788;
    const double C2912 = C84550 * C887;
    const double C7676 = C6680 * C887;
    const double C14713 = C84550 * C887;
    const double C39917 = C84576 * C887;
    const double C47025 = C45932 * C887;
    const double C4446 = C84583 * C1300;
    const double C8888 = C84344 * C1300;
    const double C26643 = C26459 * C1300;
    const double C53896 = C84344 * C1300;
    const double C63346 = C84347 * C1300;
    const double C6431 = C84550 * C1493;
    const double C10515 = C6680 * C1493;
    const double C28465 = C84550 * C1493;
    const double C50703 = C45932 * C1493;
    const double C55514 = C84576 * C1493;
    const double C207 = C196 + C197;
    const double C286 = C275 + C276;
    const double C6811 = C6797 + C6798;
    const double C8907 = C8893 + C8894;
    const double C39066 = C39052 + C39053;
    const double C53915 = C53901 + C53902;
    const double C1934 = C1921 + C1922;
    const double C2927 = C2905 + C2906;
    const double C11005 = C10995 + C10996;
    const double C14728 = C14706 + C14707;
    const double C47040 = C47018 + C47019;
    const double C60722 = C60716 + C60717;
    const double C4335 = C4322 + C4323;
    const double C6166 = C6144 + C6145;
    const double C10883 = C10873 + C10874;
    const double C28222 = C28200 + C28201;
    const double C48343 = C48337 + C48338;
    const double C50400 = C50390 + C50391;
    const double C19474 = C84558 * C4047;
    const double C26310 = C19638 * C4047;
    const double C30768 = C84558 * C4047;
    const double C53573 = C45935 * C4047;
    const double C72555 = C84586 * C4047;
    const double C16505 = C16494 + C16495;
    const double C16603 = C16599 + C16600;
    const double C25494 = C25490 + C25491;
    const double C41938 = C41924 + C41925;
    const double C71742 = C71738 + C71739;
    const double C18280 = C18267 + C18268;
    const double C18457 = C18449 + C18450;
    const double C18938 = C18916 + C18917;
    const double C23225 = C23222 + C23223;
    const double C29821 = C29813 + C29814;
    const double C30264 = C30242 + C30243;
    const double C52241 = C52235 + C52236;
    const double C52955 = C52945 + C52946;
    const double C57273 = C57268 + C57269;
    const double C32069 = C32065 + C32066;
    const double C32118 = C32114 + C32115;
    const double C38796 = C38792 + C38793;
    const double C60276 = C60272 + C60273;
    const double C74460 = C74456 + C74457;
    const double C10876 = C84304 * C3549;
    const double C48340 = C84304 * C3549;
    const double C82681 = C82680 + C82669;
    const double C730 =
        (2 * (2 * ae * C82730 * C82640 + C82615 * C82946) + C82948 + C82948 +
         C82615 * (C82946 + C82937 + C82937 + C82615 * C82944)) /
        C81964;
    const double C1794 = (C82740 + ae * C82743 + C82615 * C82751 + C82948 +
                          C82730 * (C82679 + C82730 * C82769)) /
                         C81964;
    const double C2014 = (C82821 + ae * C82743 + C82615 * C82826 + C82948 +
                          C82730 * (C82679 + C82730 * C82834)) /
                         C81964;
    const double C3637 = (C82948 + C82773 * C82730 * C82812) / C81964;
    const double C3966 = (C82948 + C82773 * C82730 * C82892) / C81964;
    const double C3463 = C1680 * C3450;
    const double C10761 = C1678 * C3450;
    const double C10875 = C6775 * C3450;
    const double C10997 = C8871 * C3450;
    const double C12083 = C84550 * C3450;
    const double C15212 = C13629 * C3450;
    const double C21715 = C81997 * C3450;
    const double C43010 = C40962 * C3450;
    const double C47524 = C82067 * C3450;
    const double C48339 = C39030 * C3450;
    const double C49459 = C45932 * C3450;
    const double C60718 = C53879 * C3450;
    const double C69332 = C84550 * C3450;
    const double C1190 =
        (2 * (2 * ae * C82773 * C82640 + C82615 * C83010) + C83012 + C83012 +
         C82615 * (C83010 + C83001 + C83001 + C82615 * C83008)) /
        C81964;
    const double C3717 = (C83012 + C82730 * C82773 * C82834) / C81964;
    const double C4422 = (C82783 + ae * C82786 + C82615 * C82794 + C83012 +
                          C82773 * (C82679 + C82773 * C82812)) /
                         C81964;
    const double C4812 = (C82879 + ae * C82786 + C82615 * C82884 + C83012 +
                          C82773 * (C82679 + C82773 * C82892)) /
                         C81964;
    const double C1938 = C1929 + C1930;
    const double C2933 = C2917 + C2918;
    const double C14734 = C14718 + C14719;
    const double C47046 = C47030 + C47031;
    const double C4339 = C4330 + C4331;
    const double C6172 = C6156 + C6157;
    const double C28228 = C28212 + C28213;
    const double C64895 = C64885 + C64886;
    const double C32495 = C32488 + C32489;
    const double C43253 = C43246 + C43247;
    const double C65604 = C65597 + C65598;
    const double C33841 = C33838 + C33839;
    const double C44655 = C44650 + C44651;
    const double C19754 = C19745 + C19746;
    const double C41073 = C41064 + C41065;
    const double C21944 = C21939 + C21940;
    const double C55996 = C55987 + C55988;
    const double C23335 = C23330 + C23331;
    const double C52548 = C52545 + C52546;
    const double C20532 = C19826 * C84198;
    const double C41837 = C19826 * C84198;
    const double C33537 = C33532 + C33533;
    const double C44341 = C44332 + C44333;
    const double C35237 = C35228 + C35229;
    const double C58713 = C58704 + C58705;
    const double C36456 = C35143 * C84198;
    const double C59923 = C35143 * C84198;
    const double C2096 =
        (2 * C82615 * C82848 + C82615 * C82855 + C83100 + C83100 +
         C82730 * (2 * ae * C82770 +
                   C82730 * (2 * C82615 * C82853 +
                             C82615 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C8591 =
        (C83100 +
         C82773 * (ae * C82813 +
                   C82730 * (2 * C82615 * C82906 +
                             C82615 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C2119 = C1787 * C1791;
    const double C7753 = C6775 * C1791;
    const double C14008 = C13724 * C1791;
    const double C39994 = C39030 * C1791;
    const double C46320 = C82280 * C1791;
    const double C8384 = C6775 * C8179;
    const double C9715 = C172 * C8179;
    const double C40616 = C39030 * C8179;
    const double C4996 =
        (2 * C83177 + C82615 * C82929 + C83301 + C83301 +
         C82773 * (2 * ae * C82813 +
                   C82773 * (2 * C82615 * C82927 +
                             C82615 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C8457 =
        (C83301 +
         C82730 * (ae * C82770 +
                   C82773 * (2 * C82615 * C82869 +
                             C82615 * (C82869 + std::pow(C82621, 7) * bs[7] *
                                                    C82860 * C82619)))) /
        C81964;
    const double C5019 = C4415 * C4419;
    const double C10654 = C8871 * C4419;
    const double C27156 = C26620 * C4419;
    const double C55653 = C53879 * C4419;
    const double C63859 = C82430 * C4419;
    const double C83142 = ae * C83141;
    const double C2713 =
        (2 * C83095 + C82730 * C83141 + (C82666 + C82702 * C82838) * ae) /
        C81958;
    const double C3542 = (C82773 * C83141) / C81958;
    const double C83382 = ae * C83381;
    const double C6056 =
        (2 * C83296 + C82773 * C83381 + (C82666 + C82702 * C82912) * ae) /
        C81958;
    const double C17810 =
        (C83173 + ae * C83336 + C82730 * C83499 + ae * C82773 * C83473 +
         C82773 * (C83475 +
                   C82773 * (C83497 + ae * C82730 * C83486 +
                             C82730 * (ae * C83486 + C82730 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82897)))) /
        C81964;
    const double C83476 = C83459 + C83474;
    const double C83738 = ae * C83736;
    const double C83819 = C83804 + C83817;
    const double C83955 = ae * C83954;
    const double C34362 =
        (2 * C83338 + C82773 * C83954 + (C83146 + C83461 * C82912) * ae) /
        C81958;
    const double C82722 = C82721 + C82705;
    const double C3548 =
        (C82773 *
         (C82769 + C82941 +
          C82730 * (C82720 + C82730 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C5282 =
        (C82730 * C82812 + ae * C82773 * C82935 +
         C82773 * (C82941 +
                   C82773 * C82730 *
                       (C82802 + ae * C82615 * C82804 +
                        C82615 * (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777)))) /
        C81964;
    const double C5596 =
        (C82730 * C82892 + ae * C82773 * C82935 +
         C82773 * (C82941 +
                   C82773 * C82730 *
                       (C82888 + ae * C82615 * C82804 +
                        C82615 * (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876)))) /
        C81964;
    const double C83407 = ae * C83405;
    const double C5123 = C1680 * C5116;
    const double C27251 = C13629 * C5116;
    const double C32266 = C81997 * C5116;
    const double C43008 = C40962 * C5116;
    const double C50077 = C82067 * C5116;
    const double C3714 =
        (C82773 * C82834 + ae * C82773 * C82935 +
         C82730 * (C83005 +
                   C82730 * C82773 *
                       (C82830 + ae * C82615 * C82761 +
                        C82615 * (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818)))) /
        C81964;
    const double C83071 = ae * C83069;
    const double C2600 = (2 * C82947 + C82730 * C83069) / C81958;
    const double C3447 = (C82773 * C83069) / C81958;
    const double C83256 = ae * C83254;
    const double C5839 = (2 * C83011 + C82773 * C83254) / C81958;
    const double C2603 =
        (2 * C82946 + C82730 * C83068 + C83121 + C83121 +
         C82615 * (2 * ae * (2 * C82932 + C82730 * (C82664 + C82700 * C82838)) +
                   C82615 * (2 * C82933 +
                             C82730 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C15934 =
        (3 * (C82751 + C82937 + C82730 * C83426) + C83121 +
         C82730 * (2 * C83426 + C83072 +
                   C82730 * (C82765 + C82942 +
                             C82730 * (C82713 +
                                       C82730 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C16024 =
        (3 * (C82826 + C82937 + C82730 * C83434) + C83121 +
         C82730 * (2 * C83434 + C83072 +
                   C82730 * (C82832 + C82942 +
                             C82730 * (C82713 +
                                       C82730 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C21202 =
        (C83121 + C82773 * (2 * C82730 * C82808 +
                            C82730 * (C82808 + (ae * C82804 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777) *
                                                   C82838))) /
        C81964;
    const double C21478 =
        (C83121 + C82773 * (2 * C82730 * C82890 +
                            C82730 * (C82890 + (ae * C82804 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876) *
                                                   C82838))) /
        C81964;
    const double C15880 = C15867 * C15871;
    const double C20369 = C81997 * C15871;
    const double C41674 = C40962 * C15871;
    const double C21060 = C81997 * C21057;
    const double C24532 = C15867 * C21057;
    const double C42362 = C40962 * C21057;
    const double C5842 =
        (2 * C83010 + C82773 * C83253 + C83349 + C83349 +
         C82615 * (2 * ae * (2 * C82996 + C82773 * (C82664 + C82700 * C82912)) +
                   C82615 * (2 * C82997 +
                             C82773 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C31012 =
        (3 * (C82794 + C83001 + C82773 * C83758) + C83349 +
         C82773 * (2 * C83758 + C83257 +
                   C82773 * (C82808 + C83006 +
                             C82773 * (C82713 +
                                       C82773 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C31190 =
        (3 * (C82884 + C83001 + C82773 * C83776) + C83349 +
         C82773 * (2 * C83776 + C83257 +
                   C82773 * (C82890 + C83006 +
                             C82773 * (C82713 +
                                       C82773 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C34462 =
        (C83349 + C82730 * (2 * C83733 +
                            C82773 * (C82832 + (ae * C82761 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818) *
                                                   C82912))) /
        C81964;
    const double C30915 = C15867 * C30910;
    const double C36371 = C81997 * C30910;
    const double C59838 = C40962 * C30910;
    const double C83552 = C83551 + C83541;
    const double C83674 = ae * C83672;
    const double C18907 = (2 * C83612 + C82773 * C83672) / C81958;
    const double C19199 =
        (2 * C83611 + C82773 * C83671 + C83699 + C83699 +
         C82730 * (2 * ae * (2 * C83597 + C82773 * (C82748 + C82761 * C82912)) +
                   C82730 * (2 * C83598 +
                             C82773 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C31644 =
        (3 * (C83495 + C83602 + C82773 * C83845) + C83699 +
         C82773 * (2 * C83845 + C83675 +
                   C82773 * (C83577 + C83607 +
                             C82773 * (C83543 +
                                       C82773 * (ae * C82804 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82897))))) /
        C81964;
    const double C31515 = C172 * C31382;
    const double C38586 = C6775 * C31382;
    const double C74250 = C39030 * C31382;
    const double C83928 = C83927 + C83910;
    const double C18706 =
        (2 * C82730 * C82922 + C82730 * C83582 + C83685 + C83685 +
         C82773 * (2 * ae * C83570 +
                   C82773 * (2 * C82730 * C82927 +
                             C82730 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C18720 = C4415 * C18147;
    const double C26383 = C8871 * C18147;
    const double C30069 = C26620 * C18147;
    const double C72628 = C53879 * C18147;
    const double C81210 = C82430 * C18147;
    const double C83717 = ae * C83716;
    const double C19021 =
        (2 * C83655 + C82773 * C83716 + (C83445 + C83538 * C82912) * ae) /
        C81958;
    const double C83866 = C83849 + C83864;
    const double C11540 = C11535 + C11536;
    const double C48948 = C48945 + C48946;
    const double C2241 = C2237 * C84558;
    const double C14114 = C2237 * C84558;
    const double C46426 = C2237 * C45935;
    const double C10377 = C9045 * C84527;
    const double C55376 = C9045 * C84527;
    const double C6260 = C4640 * C84550;
    const double C28311 = C4640 * C84550;
    const double C64978 = C4640 * C45932;
    const double C3011 =
        (2 * (2 * ae * C82743 + C82730 * C83144) + C83153 + C83153 +
         C82730 * (C83144 + C83150 + C83150 +
                   C82730 * (2 * C82758 + C82730 * C82615 * C82853))) /
        C81964;
    const double C4045 =
        (C83153 + C82773 * (C83173 + ae * C82730 * C82797 +
                            C82730 * (C82801 + C82730 * C82615 * C82906))) /
        C81964;
    const double C3017 = C1787 * C2714;
    const double C14815 = C13724 * C2714;
    const double C19738 = C84536 * C2714;
    const double C19977 = C19729 * C2714;
    const double C20068 = C251 * C2714;
    const double C20621 = C81997 * C2714;
    const double C41057 = C84536 * C2714;
    const double C41290 = C41048 * C2714;
    const double C41926 = C40962 * C2714;
    const double C47127 = C82280 * C2714;
    const double C3804 = C1787 * C3544;
    const double C12196 = C6775 * C3544;
    const double C15517 = C13724 * C3544;
    const double C21822 = C84558 * C3544;
    const double C22256 = C8871 * C3544;
    const double C23011 = C81997 * C3544;
    const double C23120 = C13723 * C3544;
    const double C44444 = C39030 * C3544;
    const double C47829 = C82280 * C3544;
    const double C51106 = C45935 * C3544;
    const double C52237 = C40962 * C3544;
    const double C55862 = C84558 * C3544;
    const double C56312 = C53879 * C3544;
    const double C57162 = C1786 * C3544;
    const double C17581 = C13724 * C17344;
    const double C29008 = C1787 * C17344;
    const double C33636 = C6775 * C17344;
    const double C44440 = C39030 * C17344;
    const double C53259 = C82280 * C17344;
    const double C33010 = C33007 + C33008;
    const double C43790 = C43785 + C43786;
    const double C83454 = C83453 + C83447;
    const double C16996 =
        (2 * (2 * ae * C82773 * C82741 + C82730 * C83611) + C83613 + C83613 +
         C82730 * (C83611 + C83602 + C83602 + C82730 * C83609)) /
        C81964;
    const double C17809 = (C82900 + ae * C83341 + C82730 * C83495 + C83613 +
                           C82773 * (C83452 + C82773 * C83579)) /
                          C81964;
    const double C18284 = C18275 + C18276;
    const double C18458 = C18451 + C18452;
    const double C18944 = C18928 + C18929;
    const double C29822 = C29815 + C29816;
    const double C30270 = C30254 + C30255;
    const double C80969 = C80965 + C80966;
    const double C81384 = C81374 + C81375;
    const double C38515 = C37848 * C84304;
    const double C74179 = C37848 * C84304;
    const double C31978 = C31976 * C84188;
    const double C4916 = C4912 * C84561;
    const double C27057 = C4912 * C84561;
    const double C63760 = C4912 * C63169;
    const double C674 = C670 * C84246;
    const double C7366 = C7365 * C84304;
    const double C39607 = C7365 * C84304;
    const double C2523 = C2519 * C84558;
    const double C14360 = C2519 * C84558;
    const double C46672 = C2519 * C45935;
    const double C6601 =
        (2 * (2 * ae * C82786 + C82773 * C83177) + C83392 + C83392 +
         C82773 * (C83177 + C83389 + C83389 +
                   C82773 * (2 * C82801 + C82773 * C82615 * C82927))) /
        C81964;
    const double C6607 = C4415 * C6057;
    const double C28629 = C26620 * C6057;
    const double C35221 = C84543 * C6057;
    const double C35592 = C172 * C6057;
    const double C35680 = C35212 * C6057;
    const double C36807 = C81997 * C6057;
    const double C58697 = C84543 * C6057;
    const double C59148 = C58688 * C6057;
    const double C60274 = C40962 * C6057;
    const double C65287 = C82430 * C6057;
    const double C18557 = C18553 * C84561;
    const double C29908 = C18553 * C84561;
    const double C81055 = C18553 * C63169;
    const double C19561 =
        (2 * (2 * ae * C83341 + C82773 * C83719) + C83728 + C83728 +
         C82773 * (C83719 + C83725 + C83725 +
                   C82773 * (2 * C83562 + C82773 * C82730 * C82927))) /
        C81964;
    const double C19566 = C4415 * C19022;
    const double C30858 = C26620 * C19022;
    const double C36297 = C35212 * C19022;
    const double C37760 = C84543 * C19022;
    const double C38068 = C15867 * C19022;
    const double C38794 = C6775 * C19022;
    const double C59764 = C58688 * C19022;
    const double C68032 = C82430 * C19022;
    const double C73433 = C84543 * C19022;
    const double C74458 = C39030 * C19022;
    const double C83799 = C83798 + C83795;
    const double C19660 = C82024 * C109;
    const double C19658 = C82024 * C727;
    const double C19656 = C82024 * C1686;
    const double C19654 = C82024 * C2601;
    const double C19651 = C82024 * C2602;
    const double C19649 = C82024 * C1685;
    const double C19647 = C82024 * C728;
    const double C19645 = C82024 * C108;
    const double C20370 = C82024 * C15870;
    const double C20529 = C16433 * C82024;
    const double C20525 = C2818 * C82024;
    const double C20521 = C2816 * C82024;
    const double C20619 = C82024 * C2715;
    const double C20615 = C82024 * C2599;
    const double C20611 = C82024 * C1788;
    const double C20607 = C82024 * C1681;
    const double C20603 = C82024 * C785;
    const double C20599 = C82024 * C723;
    const double C20849 = C82024 * C2795;
    const double C20845 = C82024 * C1906;
    const double C20841 = C82024 * C837;
    const double C21067 = C82024 * C1188;
    const double C21065 = C82024 * C3452;
    const double C21063 = C82024 * C3449;
    const double C21061 = C82024 * C16809;
    const double C21718 = C82024 * C1187;
    const double C21716 = C82024 * C3451;
    const double C21714 = C82024 * C3448;
    const double C23009 = C82024 * C3546;
    const double C23005 = C82024 * C3443;
    const double C23001 = C82024 * C3547;
    const double C22997 = C82024 * C3446;
    const double C23328 = C82024 * C3630;
    const double C23324 = C82024 * C3633;
    const double C23653 = C82024 * C4216;
    const double C23651 = C82024 * C5118;
    const double C23649 = C82024 * C17256;
    const double C23958 = C82024 * C1245;
    const double C23954 = C82024 * C1183;
    const double C24260 = C82024 * C1297;
    const double C32269 = C82024 * C4217;
    const double C32267 = C82024 * C5117;
    const double C33530 = C82024 * C5201;
    const double C33526 = C82024 * C5115;
    const double C33836 = C82024 * C5281;
    const double C34146 = C82024 * C5841;
    const double C34144 = C82024 * C18817;
    const double C34468 = C82024 * C4307;
    const double C34464 = C82024 * C4212;
    const double C34787 = C82024 * C4416;
    const double C35071 = C82024 * C5840;
    const double C36372 = C82024 * C30909;
    const double C36453 = C31806 * C82024;
    const double C36449 = C5977 * C82024;
    const double C36445 = C5975 * C82024;
    const double C36593 = C82024 * C5954;
    const double C36589 = C82024 * C5838;
    const double C36805 = C82024 * C6058;
    const double C82032 = C82024 / C81965;
    const double C82030 = C81959 * C82024;
    const double C82029 = 2 * C82024;
    const double C82031 = C82001 - C82025;
    const double C82028 = C81995 - C82023;
    const double C2627 = C2617 + C1702;
    const double C2624 = C2611 + C1699;
    const double C5866 = C5856 + C4227;
    const double C5863 = C5850 + C3466;
    const double C14455 = C14445 + C13639;
    const double C14452 = C14439 + C13636;
    const double C27949 = C27939 + C26464;
    const double C27946 = C27933 + C15215;
    const double C16320 = C16314 + C15879;
    const double C16319 = C16312 + C15878;
    const double C16318 = C16310 + C15877;
    const double C16317 = C16308 + C15876;
    const double C17985 = C17979 + C17263;
    const double C17984 = C17977 + C16815;
    const double C17983 = C17974 + C17262;
    const double C17982 = C17972 + C16816;
    const double C18829 = C18823 + C17261;
    const double C18828 = C18821 + C16817;
    const double C25134 = C25132 + C16814;
    const double C31745 = C31741 + C30914;
    const double C31744 = C31739 + C18827;
    const double C37617 = C37615 + C18826;
    const double C20376 = C20367 + C19652;
    const double C20374 = C20363 + C19650;
    const double C20372 = C20359 + C19648;
    const double C22682 = C22677 + C21062;
    const double C22680 = C22673 + C21064;
    const double C23655 = C23646 + C21066;
    const double C33227 = C33224 + C23650;
    const double C34148 = C34141 + C23652;
    const double C36374 = C36369 + C34145;
    const double C41681 = C41672 + C40971;
    const double C41679 = C41668 + C40969;
    const double C41677 = C41664 + C40967;
    const double C44015 = C44008 + C43007;
    const double C44013 = C44004 + C42366;
    const double C44965 = C44956 + C43005;
    const double C44963 = C44952 + C42368;
    const double C51932 = C51929 + C42364;
    const double C59841 = C59836 + C44960;
    const double C46767 = C46757 + C45951;
    const double C46764 = C46751 + C45948;
    const double C50085 = C50075 + C47527;
    const double C64640 = C64633 + C50080;
    const double C82303 = C82298 - C82299;
    const double C82307 = C82302 - C82295;
    const double C2113 = C2091 * C721;
    const double C2104 = C2091 * C722;
    const double C30516 = C2091 * C5115;
    const double C30510 = C2091 * C3446;
    const double C56195 = C2091 * C3445;
    const double C7033 = C7016 * C105;
    const double C7027 = C7016 * C104;
    const double C7021 = C7016 * C103;
    const double C11207 = C7016 * C1181;
    const double C11203 = C7016 * C1182;
    const double C13125 = C7016 * C1183;
    const double C32692 = C7016 * C4213;
    const double C34575 = C7016 * C4212;
    const double C38582 = C7016 * C5838;
    const double C13999 = C13983 * C104;
    const double C13990 = C13983 * C103;
    const double C19208 = C13983 * C4212;
    const double C19202 = C13983 * C1183;
    const double C22141 = C13983 * C1182;
    const double C14002 = C13984 * C721;
    const double C13993 = C13984 * C722;
    const double C19210 = C13984 * C5115;
    const double C19204 = C13984 * C3446;
    const double C22143 = C13984 * C3445;
    const double C2125 = C2110 + C2111;
    const double C2122 = C2101 + C2102;
    const double C30526 = C30514 + C29005;
    const double C30523 = C30508 + C3809;
    const double C56199 = C56193 + C3806;
    const double C2127 = C2116 + C2117;
    const double C2124 = C2107 + C2108;
    const double C30528 = C30518 + C29007;
    const double C30525 = C30512 + C3807;
    const double C7046 = C7036 + C7037;
    const double C7044 = C7030 + C7031;
    const double C7042 = C7024 + C7025;
    const double C11214 = C11209 + C8386;
    const double C11212 = C11205 + C8388;
    const double C13136 = C13127 + C8390;
    const double C32697 = C32694 + C13131;
    const double C34584 = C34577 + C13133;
    const double C38589 = C38584 + C34581;
    const double C14016 = C14005 + C14006;
    const double C14013 = C13996 + C13997;
    const double C19222 = C19212 + C17580;
    const double C19219 = C19206 + C15520;
    const double C39295 = C39285 + C39286;
    const double C39293 = C39279 + C39280;
    const double C39291 = C39273 + C39274;
    const double C43467 = C43459 + C43460;
    const double C43465 = C43452 + C40620;
    const double C45429 = C45420 + C43455;
    const double C45427 = C45416 + C40622;
    const double C48644 = C48641 + C40618;
    const double C74253 = C74248 + C45424;
    const double C46328 = C46317 + C46318;
    const double C46325 = C46308 + C46309;
    const double C53267 = C53257 + C47832;
    const double C81633 = C81626 + C53262;
    const double C82251 = C82246 / C81965;
    const double C82250 = C82091 * C82246;
    const double C82296 = 2 * C82246;
    const double C82453 = C82448 - C82449;
    const double C82457 = C82452 - C82445;
    const double C5013 = C4991 * C1181;
    const double C5004 = C4991 * C1182;
    const double C18716 = C4991 * C3443;
    const double C18710 = C4991 * C3446;
    const double C43891 = C4991 * C3445;
    const double C9359 = C9342 * C105;
    const double C9353 = C9342 * C104;
    const double C9347 = C9342 * C103;
    const double C11643 = C9342 * C721;
    const double C11639 = C9342 * C722;
    const double C12607 = C9342 * C723;
    const double C22563 = C9342 * C1682;
    const double C23532 = C9342 * C1681;
    const double C25709 = C9342 * C2599;
    const double C27147 = C27131 * C104;
    const double C27138 = C27131 * C103;
    const double C30063 = C27131 * C1681;
    const double C30057 = C27131 * C723;
    const double C33109 = C27131 * C722;
    const double C27150 = C27132 * C1181;
    const double C27141 = C27132 * C1182;
    const double C30065 = C27132 * C3443;
    const double C30059 = C27132 * C3446;
    const double C33111 = C27132 * C3445;
    const double C5025 = C5010 + C5011;
    const double C5022 = C5001 + C5002;
    const double C18726 = C18714 + C17888;
    const double C18723 = C18708 + C5762;
    const double C43895 = C43889 + C5759;
    const double C5027 = C5016 + C5017;
    const double C5024 = C5007 + C5008;
    const double C18728 = C18718 + C17890;
    const double C18725 = C18712 + C5760;
    const double C43897 = C43893 + C5757;
    const double C9372 = C9362 + C9363;
    const double C9370 = C9356 + C9357;
    const double C9368 = C9350 + C9351;
    const double C11650 = C11645 + C9982;
    const double C11648 = C11641 + C9984;
    const double C12618 = C12609 + C9986;
    const double C22568 = C22565 + C12613;
    const double C23541 = C23534 + C12615;
    const double C25716 = C25711 + C23538;
    const double C27164 = C27153 + C27154;
    const double C27161 = C27144 + C27145;
    const double C30077 = C30067 + C29309;
    const double C30074 = C30061 + C27852;
    const double C33117 = C33113 + C27849;
    const double C54372 = C54362 + C54363;
    const double C54370 = C54356 + C54357;
    const double C54368 = C54350 + C54351;
    const double C56638 = C56630 + C56631;
    const double C56636 = C56625 + C54983;
    const double C57583 = C57574 + C56622;
    const double C57581 = C57570 + C54985;
    const double C61323 = C61320 + C54981;
    const double C71961 = C71956 + C57578;
    const double C63867 = C63856 + C63857;
    const double C63864 = C63847 + C63848;
    const double C66210 = C66206 + C64549;
    const double C67140 = C67130 + C64552;
    const double C81215 = C81208 + C67135;
    const double C82401 = C82396 / C81965;
    const double C82400 = C82094 * C82396;
    const double C82446 = 2 * C82396;
    const double C1831 = C1817 + C1818;
    const double C6808 = C6791 + C6792;
    const double C13760 = C13746 + C13747;
    const double C39063 = C39046 + C39047;
    const double C2930 = C2911 + C2912;
    const double C14731 = C14712 + C14713;
    const double C47043 = C47024 + C47025;
    const double C4459 = C4445 + C4446;
    const double C8904 = C8887 + C8888;
    const double C26656 = C26642 + C26643;
    const double C53912 = C53895 + C53896;
    const double C6440 = C6430 + C6431;
    const double C28474 = C28464 + C28465;
    const double C50706 = C50702 + C50703;
    const double C2807 = C1934 * C84550;
    const double C7594 = C1934 * C6680;
    const double C14621 = C1934 * C84550;
    const double C39835 = C1934 * C84576;
    const double C46933 = C1934 * C45932;
    const double C5966 = C4335 * C84550;
    const double C10149 = C4335 * C6680;
    const double C28041 = C4335 * C84550;
    const double C55148 = C4335 * C84576;
    const double C64726 = C4335 * C45932;
    const double C19483 = C19473 + C19474;
    const double C30777 = C30767 + C30768;
    const double C53576 = C53572 + C53573;
    const double C19109 = C18280 * C84558;
    const double C26014 = C18280 * C19638;
    const double C30427 = C18280 * C84558;
    const double C72259 = C18280 * C84586;
    const double C81541 = C18280 * C45935;
    const double C82682 = ae * C82681;
    const double C112 =
        (3 * C82649 + C82615 * C82681 + (2 * C82638 + C82615 * C82666) * ae) /
        C81958;
    const double C725 = (C82730 * C82681) / C81958;
    const double C1185 = (C82773 * C82681) / C81958;
    const double C7440 = C84527 * C730;
    const double C39681 = C84527 * C730;
    const double C1820 = C84558 * C1794;
    const double C13749 = C84558 * C1794;
    const double C46061 = C45935 * C1794;
    const double C2924 = C84550 * C2014;
    const double C14725 = C84550 * C2014;
    const double C47037 = C45932 * C2014;
    const double C10998 = C84344 * C3637;
    const double C60719 = C84344 * C3637;
    const double C12407 = C84550 * C3966;
    const double C49773 = C45932 * C3966;
    const double C69644 = C84550 * C3966;
    const double C11765 = C11761 + C3463;
    const double C10884 = C10875 + C10876;
    const double C12092 = C12082 + C12083;
    const double C69026 = C69022 + C15212;
    const double C49153 = C49149 + C47524;
    const double C48344 = C48339 + C48340;
    const double C49468 = C49458 + C49459;
    const double C69341 = C69331 + C69332;
    const double C10061 = C84527 * C1190;
    const double C55060 = C84527 * C1190;
    const double C12089 = C84550 * C3717;
    const double C49465 = C45932 * C3717;
    const double C69338 = C84550 * C3717;
    const double C4448 = C84561 * C4422;
    const double C26645 = C84561 * C4422;
    const double C63348 = C63169 * C4422;
    const double C6437 = C84550 * C4812;
    const double C28471 = C84550 * C4812;
    const double C65132 = C45932 * C4812;
    const double C2815 = C1938 * C84550;
    const double C14627 = C1938 * C84550;
    const double C46939 = C1938 * C45932;
    const double C5974 = C4339 * C84550;
    const double C28047 = C4339 * C84550;
    const double C64732 = C4339 * C45932;
    const double C3010 =
        (2 * (2 * ae * C82752 + C82730 * C82855) + C83142 + C83142 +
         C82730 * (C82855 + C83139 + C83139 +
                   C82730 * (2 * ae * C82766 +
                             C82730 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C4043 =
        (C83142 +
         C82773 * (C82908 + ae * C82730 * C82809 +
                   C82730 * (ae * C82809 +
                             C82730 * (C82906 + std::pow(C82621, 7) * bs[7] *
                                                    C82897 * C82619)))) /
        C81964;
    const double C3014 = C1787 * C2713;
    const double C14812 = C13724 * C2713;
    const double C19979 = C19729 * C2713;
    const double C41292 = C41048 * C2713;
    const double C47124 = C82280 * C2713;
    const double C3801 = C1787 * C3542;
    const double C12194 = C6775 * C3542;
    const double C15514 = C13724 * C3542;
    const double C47826 = C82280 * C3542;
    const double C49570 = C39030 * C3542;
    const double C6600 =
        (2 * (2 * ae * C82795 + C82773 * C82929) + C83382 + C83382 +
         C82773 * (C82929 + C83379 + C83379 +
                   C82773 * (2 * ae * C82809 +
                             C82773 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82619)))) /
        C81964;
    const double C6604 = C4415 * C6056;
    const double C28626 = C26620 * C6056;
    const double C35682 = C35212 * C6056;
    const double C59150 = C58688 * C6056;
    const double C65284 = C82430 * C6056;
    const double C83477 = C83476 + C83469;
    const double C21336 =
        (2 * (2 * ae * C82773 * C82754 + C82730 * C83735) + C83738 + C83738 +
         C82730 * (C83735 + C83739 + C83739 +
                   C82730 * (2 * ae * C82773 * C83460 +
                             C82730 * C82773 * C82615 *
                                 (C82687 * C82688 +
                                  C82838 * bs[7] * std::pow(C82621, 7)) *
                                 C82622))) /
        C81964;
    const double C83820 = C83819 + C83813;
    const double C34995 =
        (2 * (2 * ae * C83336 + C82773 * C83945) + C83955 + C83955 +
         C82773 * (C83945 + C83952 + C83952 +
                   C82773 * (2 * ae * C83946 +
                             C82773 * C82730 * C82615 *
                                 (C82687 * C82688 +
                                  C82912 * bs[7] * std::pow(C82621, 7)) *
                                 C82622))) /
        C81964;
    const double C34997 = C26620 * C34362;
    const double C36293 = C35212 * C34362;
    const double C45854 = C4415 * C34362;
    const double C59760 = C58688 * C34362;
    const double C68029 = C82430 * C34362;
    const double C82724 = ae * C82722;
    const double C82723 = C82615 * C82722;
    const double C82934 = C82730 * C82722;
    const double C82998 = C82773 * C82722;
    const double C1688 = (C82681 + C82722 * C82838) / C81958;
    const double C4219 = (C82681 + C82722 * C82912) / C81958;
    const double C8104 =
        (2 * (2 * ae * C82773 * C82932 + C82615 * C83404) + C83407 + C83407 +
         C82615 * (C83404 + C83408 + C83408 +
                   C82615 * (2 * ae * C82773 * C82730 * C82700 +
                             C82615 * C82773 * C82730 *
                                 (C82687 * C82688 +
                                  C82619 * bs[7] * std::pow(C82621, 7)) *
                                 C82622))) /
        C81964;
    const double C1692 =
        (2 * (2 * ae * (C82640 + C82664 * C82838) + C82615 * C83068) + C83071 +
         C83071 +
         C82615 * (C83068 + C83072 + C83072 +
                   C82615 * (2 * ae * (C82664 + C82700 * C82838) +
                             C82615 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C2716 =
        (2 * (C82679 + C82730 * C82769) + C83071 +
         C82730 * (C82769 + C82941 +
                   C82730 * (C82720 +
                             C82730 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C2897 =
        (2 * (C82679 + C82730 * C82834) + C83071 +
         C82730 * (C82834 + C82941 +
                   C82730 * (C82720 +
                             C82730 * (C82830 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C3634 =
        (C83071 + C82773 * (C82812 + (C82802 + ae * C82615 * C82804 +
                                      C82615 * (ae * C82804 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777)) *
                                         C82838)) /
        C81964;
    const double C3963 =
        (C83071 + C82773 * (C82892 + (C82888 + ae * C82615 * C82804 +
                                      C82615 * (ae * C82804 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876)) *
                                         C82838)) /
        C81964;
    const double C2619 = C1680 * C2600;
    const double C14447 = C13629 * C2600;
    const double C19653 = C81997 * C2600;
    const double C40972 = C40962 * C2600;
    const double C46759 = C82067 * C2600;
    const double C3460 = C1680 * C3447;
    const double C15209 = C13629 * C3447;
    const double C21713 = C81997 * C3447;
    const double C47521 = C82067 * C3447;
    const double C51001 = C40962 * C3447;
    const double C4223 =
        (2 * (2 * ae * (C82640 + C82664 * C82912) + C82615 * C83253) + C83256 +
         C83256 +
         C82615 * (C83253 + C83257 + C83257 +
                   C82615 * (2 * ae * (C82664 + C82700 * C82912) +
                             C82615 * (C82707 +
                                       (C82687 * C82688 +
                                        C82619 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C5359 =
        (C83256 + C82730 * (C82834 + (C82830 + ae * C82615 * C82761 +
                                      C82615 * (ae * C82761 +
                                                C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818)) *
                                         C82912)) /
        C81964;
    const double C6059 =
        (2 * (C82679 + C82773 * C82812) + C83256 +
         C82773 * (C82812 + C83005 +
                   C82773 * (C82720 +
                             C82773 * (C82802 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C6422 =
        (2 * (C82679 + C82773 * C82892) + C83256 +
         C82773 * (C82892 + C83005 +
                   C82773 * (C82720 +
                             C82773 * (C82888 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C5858 = C1680 * C5839;
    const double C27941 = C13629 * C5839;
    const double C35070 = C81997 * C5839;
    const double C58552 = C40962 * C5839;
    const double C64635 = C82067 * C5839;
    const double C83554 = ae * C83552;
    const double C83553 = C82730 * C83552;
    const double C83599 = C82773 * C83552;
    const double C18358 =
        (2 * (2 * ae * (C82741 + C82748 * C82912) + C82730 * C83671) + C83674 +
         C83674 +
         C82730 * (C83671 + C83675 + C83675 +
                   C82730 * (2 * ae * (C82748 + C82761 * C82912) +
                             C82730 * (C82853 +
                                       (C82687 * C82688 +
                                        C82838 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82912)))) /
        C81964;
    const double C19466 =
        (2 * (C83452 + C82773 * C83579) + C83674 +
         C82773 * (C83579 + C83606 +
                   C82773 * (C83550 +
                             C82773 * (C82906 + ae * C82730 * C82804 +
                                       C82730 * (ae * C82804 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82897))))) /
        C81964;
    const double C19214 = C13724 * C18907;
    const double C30520 = C1787 * C18907;
    const double C37915 = C6775 * C18907;
    const double C73582 = C39030 * C18907;
    const double C81628 = C82280 * C18907;
    const double C83930 = ae * C83928;
    const double C83929 = C82773 * C83928;
    const double C19560 =
        (2 * (2 * ae * C83483 + C82773 * C83582) + C83717 + C83717 +
         C82773 * (C83582 + C83714 + C83714 +
                   C82773 * (2 * ae * C83565 +
                             C82773 * (C82927 +
                                       (C82687 * C82688 +
                                        C82912 * bs[7] * std::pow(C82621, 7)) *
                                           C82622 * C82838)))) /
        C81964;
    const double C19563 = C4415 * C19021;
    const double C30855 = C26620 * C19021;
    const double C38212 = C35212 * C19021;
    const double C73876 = C58688 * C19021;
    const double C81945 = C82430 * C19021;
    const double C83867 = C83866 + C83859;
    const double C19978 = C84536 * C3011;
    const double C41291 = C84536 * C3011;
    const double C22461 = C84558 * C4045;
    const double C51727 = C45935 * C4045;
    const double C56519 = C84558 * C4045;
    const double C19750 = C19737 + C19738;
    const double C19986 = C19976 + C19977;
    const double C20070 = C20068 + C20069;
    const double C20634 = C20621 + C20622;
    const double C41069 = C41056 + C41057;
    const double C41299 = C41289 + C41290;
    const double C41939 = C41926 + C41927;
    const double C56201 = C56197 + C3804;
    const double C22149 = C22145 + C15517;
    const double C21831 = C21821 + C21822;
    const double C22259 = C22256 + C22257;
    const double C23020 = C23011 + C23012;
    const double C51421 = C51417 + C47829;
    const double C51115 = C51105 + C51106;
    const double C52242 = C52237 + C52238;
    const double C55871 = C55861 + C55862;
    const double C56317 = C56312 + C56313;
    const double C83455 = ae * C83454;
    const double C15931 =
        (3 * C83162 + C82730 * C83454 + (2 * C83156 + C82730 * C83445) * ae) /
        C81958;
    const double C16860 = (C82773 * C83454) / C81958;
    const double C18071 = (C83454 + C83552 * C82912) / C81958;
    const double C26090 = C84536 * C16996;
    const double C72335 = C84536 * C16996;
    const double C19480 = C84558 * C17809;
    const double C30774 = C84558 * C17809;
    const double C81867 = C45935 * C17809;
    const double C19117 = C18284 * C84558;
    const double C30433 = C18284 * C84558;
    const double C81547 = C18284 * C45935;
    const double C35681 = C84543 * C6601;
    const double C59149 = C84543 * C6601;
    const double C35233 = C35220 + C35221;
    const double C35594 = C35592 + C35593;
    const double C35689 = C35679 + C35680;
    const double C36810 = C36807 + C36808;
    const double C58709 = C58696 + C58697;
    const double C59157 = C59147 + C59148;
    const double C60277 = C60274 + C60275;
    const double C38211 = C84543 * C19561;
    const double C73875 = C84543 * C19561;
    const double C38219 = C38210 + C36297;
    const double C37772 = C37759 + C37760;
    const double C38070 = C38068 + C38069;
    const double C38797 = C38794 + C38795;
    const double C73883 = C73874 + C59764;
    const double C73445 = C73432 + C73433;
    const double C74461 = C74458 + C74459;
    const double C83800 = ae * C83799;
    const double C31009 =
        (3 * C83401 + C82773 * C83799 + (2 * C83395 + C82773 * C83793) * ae) /
        C81958;
    const double C20633 = C20619 + C20620;
    const double C20631 = C20615 + C20616;
    const double C20629 = C20611 + C20612;
    const double C20627 = C20607 + C20608;
    const double C20625 = C20603 + C20604;
    const double C20623 = C20599 + C20600;
    const double C20857 = C20849 + C20850;
    const double C20855 = C20845 + C20846;
    const double C20853 = C20841 + C20842;
    const double C23019 = C23009 + C23010;
    const double C23017 = C23005 + C23006;
    const double C23015 = C23001 + C23002;
    const double C23013 = C22997 + C22998;
    const double C23334 = C23328 + C23329;
    const double C23332 = C23324 + C23325;
    const double C23964 = C23958 + C23959;
    const double C23962 = C23954 + C23955;
    const double C24264 = C24260 + C24261;
    const double C33536 = C33530 + C33531;
    const double C33534 = C33526 + C33527;
    const double C33840 = C33836 + C33837;
    const double C34474 = C34468 + C34469;
    const double C34472 = C34464 + C34465;
    const double C34791 = C34787 + C34788;
    const double C36599 = C36593 + C36594;
    const double C36597 = C36589 + C36590;
    const double C36809 = C36805 + C36806;
    const double C82038 = C82032 - C82020;
    const double C13627 = C82032 + (C82006 * ae) / C81958;
    const double C82036 = C82030 + C84509;
    const double C82037 = C82031 * be;
    const double C82035 = C82028 * ae;
    const double C1675 = (-(be * C81969) / C81964) / C81965 -
                         ((2 * ((-C81968) / C81965 - (C82005 * be) / C81958) -
                           (C81959 * C82028 * be) / C81958) *
                          be) /
                             C81958 -
                         C82019;
    const double C1677 =
        (-(C82028 * be) / C81958) / C81965 -
        ((2 * ((-C81989 / C81958) / C81965 - (0 * be) / C81958) - C82025) *
         be) /
            C81958;
    const double C40959 = -(C82028 * be) / C81958;
    const double C2633 = C2627 + C1702;
    const double C2630 = C2624 + C1699;
    const double C5872 = C5866 + C4227;
    const double C5869 = C5863 + C3466;
    const double C14461 = C14455 + C13639;
    const double C14458 = C14452 + C13636;
    const double C27955 = C27949 + C26464;
    const double C27952 = C27946 + C15215;
    const double C16324 = C16320 + C15879;
    const double C16323 = C16319 + C15878;
    const double C16322 = C16318 + C15877;
    const double C16321 = C16317 + C15876;
    const double C17989 = C17985 + C17263;
    const double C17988 = C17984 + C16815;
    const double C17987 = C17983 + C17262;
    const double C17986 = C17982 + C16816;
    const double C18831 = C18829 + C17261;
    const double C18830 = C18828 + C16817;
    const double C25135 = C25134 + C16814;
    const double C31747 = C31745 + C30914;
    const double C31746 = C31744 + C18827;
    const double C37618 = C37617 + C18826;
    const double C20382 = C20376 + C19652;
    const double C20380 = C20374 + C19650;
    const double C20378 = C20372 + C19648;
    const double C22686 = C22682 + C21062;
    const double C22684 = C22680 + C21064;
    const double C23657 = C23655 + C21066;
    const double C33229 = C33227 + C23650;
    const double C34150 = C34148 + C23652;
    const double C36376 = C36374 + C34145;
    const double C41687 = C41681 + C40971;
    const double C41685 = C41679 + C40969;
    const double C41683 = C41677 + C40967;
    const double C44019 = C44015 + C43007;
    const double C44017 = C44013 + C42366;
    const double C44969 = C44965 + C43005;
    const double C44967 = C44963 + C42368;
    const double C51934 = C51932 + C42364;
    const double C59843 = C59841 + C44960;
    const double C46773 = C46767 + C45951;
    const double C46770 = C46764 + C45948;
    const double C50088 = C50085 + C47527;
    const double C64643 = C64640 + C50080;
    const double C82308 = C82303 * be;
    const double C82310 = C82307 * ae;
    const double C39265 = -(C82307 * be) / C81958;
    const double C2126 = C2113 + C2114;
    const double C2123 = C2104 + C2105;
    const double C30527 = C30516 + C29006;
    const double C30524 = C30510 + C3808;
    const double C56200 = C56195 + C3805;
    const double C7045 = C7033 + C7034;
    const double C7043 = C7027 + C7028;
    const double C7041 = C7021 + C7022;
    const double C11213 = C11207 + C8387;
    const double C11211 = C11203 + C8389;
    const double C13135 = C13125 + C8391;
    const double C32696 = C32692 + C13132;
    const double C34583 = C34575 + C13134;
    const double C38588 = C38582 + C34582;
    const double C14014 = C13999 + C14000;
    const double C14011 = C13990 + C13991;
    const double C19220 = C19208 + C17578;
    const double C19217 = C19202 + C15522;
    const double C22147 = C22141 + C15519;
    const double C14015 = C14002 + C14003;
    const double C14012 = C13993 + C13994;
    const double C19221 = C19210 + C17579;
    const double C19218 = C19204 + C15521;
    const double C22148 = C22143 + C15518;
    const double C2131 = C2125 + C2111;
    const double C2128 = C2122 + C2102;
    const double C30532 = C30526 + C29005;
    const double C30529 = C30523 + C3809;
    const double C56202 = C56199 + C3806;
    const double C2133 = C2127 + C2117;
    const double C2130 = C2124 + C2108;
    const double C30534 = C30528 + C29007;
    const double C30531 = C30525 + C3807;
    const double C7052 = C7046 + C7037;
    const double C7050 = C7044 + C7031;
    const double C7048 = C7042 + C7025;
    const double C11218 = C11214 + C8386;
    const double C11216 = C11212 + C8388;
    const double C13138 = C13136 + C8390;
    const double C32699 = C32697 + C13131;
    const double C34586 = C34584 + C13133;
    const double C38591 = C38589 + C34581;
    const double C14022 = C14016 + C14006;
    const double C14019 = C14013 + C13997;
    const double C19228 = C19222 + C17580;
    const double C19225 = C19219 + C15520;
    const double C39301 = C39295 + C39286;
    const double C39299 = C39293 + C39280;
    const double C39297 = C39291 + C39274;
    const double C43471 = C43467 + C43460;
    const double C43469 = C43465 + C40620;
    const double C45433 = C45429 + C43455;
    const double C45431 = C45427 + C40622;
    const double C48646 = C48644 + C40618;
    const double C74255 = C74253 + C45424;
    const double C46334 = C46328 + C46318;
    const double C46331 = C46325 + C46309;
    const double C53270 = C53267 + C47832;
    const double C81636 = C81633 + C53262;
    const double C82269 = C82251 - C82265;
    const double C82255 = C82250 + C84528;
    const double C82458 = C82453 * be;
    const double C82460 = C82457 * ae;
    const double C54342 = -(C82457 * be) / C81958;
    const double C5026 = C5013 + C5014;
    const double C5023 = C5004 + C5005;
    const double C18727 = C18716 + C17889;
    const double C18724 = C18710 + C5761;
    const double C43896 = C43891 + C5758;
    const double C9371 = C9359 + C9360;
    const double C9369 = C9353 + C9354;
    const double C9367 = C9347 + C9348;
    const double C11649 = C11643 + C9983;
    const double C11647 = C11639 + C9985;
    const double C12617 = C12607 + C9987;
    const double C22567 = C22563 + C12614;
    const double C23540 = C23532 + C12616;
    const double C25715 = C25709 + C23539;
    const double C27162 = C27147 + C27148;
    const double C27159 = C27138 + C27139;
    const double C30075 = C30063 + C29307;
    const double C30072 = C30057 + C27854;
    const double C33115 = C33109 + C27851;
    const double C27163 = C27150 + C27151;
    const double C27160 = C27141 + C27142;
    const double C30076 = C30065 + C29308;
    const double C30073 = C30059 + C27853;
    const double C33116 = C33111 + C27850;
    const double C5031 = C5025 + C5011;
    const double C5028 = C5022 + C5002;
    const double C18732 = C18726 + C17888;
    const double C18729 = C18723 + C5762;
    const double C43898 = C43895 + C5759;
    const double C5033 = C5027 + C5017;
    const double C5030 = C5024 + C5008;
    const double C18734 = C18728 + C17890;
    const double C18731 = C18725 + C5760;
    const double C43900 = C43897 + C5757;
    const double C9378 = C9372 + C9363;
    const double C9376 = C9370 + C9357;
    const double C9374 = C9368 + C9351;
    const double C11654 = C11650 + C9982;
    const double C11652 = C11648 + C9984;
    const double C12620 = C12618 + C9986;
    const double C22570 = C22568 + C12613;
    const double C23543 = C23541 + C12615;
    const double C25718 = C25716 + C23538;
    const double C27170 = C27164 + C27154;
    const double C27167 = C27161 + C27145;
    const double C30083 = C30077 + C29309;
    const double C30080 = C30074 + C27852;
    const double C33120 = C33117 + C27849;
    const double C54378 = C54372 + C54363;
    const double C54376 = C54370 + C54357;
    const double C54374 = C54368 + C54351;
    const double C56642 = C56638 + C56631;
    const double C56640 = C56636 + C54983;
    const double C57587 = C57583 + C56622;
    const double C57585 = C57581 + C54985;
    const double C61325 = C61323 + C54981;
    const double C71963 = C71961 + C57578;
    const double C63873 = C63867 + C63857;
    const double C63870 = C63864 + C63848;
    const double C66213 = C66210 + C64549;
    const double C67143 = C67140 + C64552;
    const double C81218 = C81215 + C67135;
    const double C82419 = C82401 - C82415;
    const double C82405 = C82400 + C84529;
    const double C118 =
        (3 * (C82644 + C82647 + C82647 + C82615 * C82675) + C82682 + C82682 +
         C82615 *
             (2 * C82675 + C82679 + C82679 +
              C82615 * (C82670 + C82674 + C82674 +
                        C82615 * (2 * ae * C82664 +
                                  C82615 *
                                      (C82654 * C82655 +
                                       C82619 * bs[6] * std::pow(C82613, 6)) *
                                      C82622)))) /
        C81964;
    const double C787 =
        (C82682 + C82730 * (2 * C82751 + ae * C82752 + C82615 * C82769)) /
        C81964;
    const double C886 =
        (C82682 + C82730 * (2 * C82826 + ae * C82752 + C82615 * C82834)) /
        C81964;
    const double C1299 =
        (C82682 + C82773 * (2 * C82794 + ae * C82795 + C82615 * C82812)) /
        C81964;
    const double C1492 =
        (C82682 + C82773 * (2 * C82884 + ae * C82795 + C82615 * C82892)) /
        C81964;
    const double C125 = C101 * C112;
    const double C200 = C172 * C112;
    const double C279 = C251 * C112;
    const double C6705 = C6691 * C112;
    const double C38960 = C38946 * C112;
    const double C1706 = C1680 * C725;
    const double C6700 = C6691 * C725;
    const double C6799 = C6775 * C725;
    const double C6881 = C251 * C725;
    const double C7670 = C84527 * C725;
    const double C13643 = C13629 * C725;
    const double C38955 = C38946 * C725;
    const double C39054 = C39030 * C725;
    const double C39911 = C84527 * C725;
    const double C45955 = C82067 * C725;
    const double C4231 = C1680 * C1185;
    const double C8110 = C6691 * C1185;
    const double C8801 = C172 * C1185;
    const double C8895 = C8871 * C1185;
    const double C10291 = C84527 * C1185;
    const double C26468 = C13629 * C1185;
    const double C40348 = C38946 * C1185;
    const double C48232 = C82067 * C1185;
    const double C53903 = C53879 * C1185;
    const double C55290 = C84527 * C1185;
    const double C1832 = C1819 + C1820;
    const double C13761 = C13748 + C13749;
    const double C46073 = C46060 + C46061;
    const double C2936 = C2923 + C2924;
    const double C14737 = C14724 + C14725;
    const double C47049 = C47036 + C47037;
    const double C11006 = C10997 + C10998;
    const double C60723 = C60718 + C60719;
    const double C12410 = C12406 + C12407;
    const double C49776 = C49772 + C49773;
    const double C69647 = C69643 + C69644;
    const double C11768 = C11765 + C3463;
    const double C69029 = C69026 + C15212;
    const double C49156 = C49153 + C47524;
    const double C12095 = C12088 + C12089;
    const double C49471 = C49464 + C49465;
    const double C69344 = C69337 + C69338;
    const double C4460 = C4447 + C4448;
    const double C26657 = C26644 + C26645;
    const double C63360 = C63347 + C63348;
    const double C6443 = C6436 + C6437;
    const double C28477 = C28470 + C28471;
    const double C65135 = C65131 + C65132;
    const double C83478 = ae * C83477;
    const double C15932 =
        (3 * C83152 + C82730 * C83477 + (2 * C83146 + C82730 * C83466) * ae) /
        C81958;
    const double C21133 = (C82773 * C83477) / C81958;
    const double C83821 = ae * C83820;
    const double C31010 =
        (3 * C83391 + C82773 * C83820 + (2 * C83385 + C82773 * C83811) * ae) /
        C81958;
    const double C8180 =
        (C82773 *
         (C82724 + C82730 * (2 * C82765 + ae * C82766 +
                             C82615 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C82725 = C82689 + C82723;
    const double C82940 = ae * C82934;
    const double C8103 = (C82773 * C82934) / C81958;
    const double C83004 = ae * C82998;
    const double C1703 = C1680 * C1688;
    const double C7441 = C6691 * C1688;
    const double C13640 = C13629 * C1688;
    const double C39682 = C38946 * C1688;
    const double C45952 = C82067 * C1688;
    const double C4228 = C1680 * C4219;
    const double C10062 = C6691 * C4219;
    const double C26465 = C13629 * C4219;
    const double C55061 = C38946 * C4219;
    const double C63171 = C82067 * C4219;
    const double C83555 = C83528 + C83553;
    const double C83605 = ae * C83599;
    const double C83931 = C83906 + C83929;
    const double C83868 = ae * C83867;
    const double C31426 =
        (3 * C83727 + C82773 * C83867 + (2 * C83721 + C82773 * C83856) * ae) /
        C81958;
    const double C22464 = C22460 + C22461;
    const double C51730 = C51726 + C51727;
    const double C56522 = C56518 + C56519;
    const double C19990 = C19986 + C19977;
    const double C20071 = C20070 * C84536;
    const double C41381 = C20070 * C84536;
    const double C41303 = C41299 + C41290;
    const double C56204 = C56201 + C3804;
    const double C22152 = C22149 + C15517;
    const double C51424 = C51421 + C47829;
    const double C16072 =
        (3 * (C82843 + C83160 + C83160 + C82730 * C83442) + C83455 + C83455 +
         C82730 * (2 * C83442 + C83452 + C83452 +
                   C82730 * (C82848 + C83448 + C83448 +
                             C82730 * (2 * C82755 + C82730 * C82853)))) /
        C81964;
    const double C17133 =
        (C83455 + C82773 * (2 * C83495 + ae * C83483 + C82730 * C83579)) /
        C81964;
    const double C16079 = C15930 * C15931;
    const double C16498 = C15867 * C15931;
    const double C16601 = C251 * C15931;
    const double C20705 = C19729 * C15931;
    const double C42010 = C41048 * C15931;
    const double C18363 = C13724 * C16860;
    const double C21342 = C19729 * C16860;
    const double C25350 = C15867 * C16860;
    const double C25492 = C8871 * C16860;
    const double C25860 = C84536 * C16860;
    const double C29728 = C1787 * C16860;
    const double C42638 = C41048 * C16860;
    const double C52344 = C82280 * C16860;
    const double C71740 = C53879 * C16860;
    const double C72105 = C84536 * C16860;
    const double C18360 = C13724 * C18071;
    const double C26091 = C19729 * C18071;
    const double C29725 = C1787 * C18071;
    const double C72336 = C41048 * C18071;
    const double C80884 = C82280 * C18071;
    const double C19486 = C19479 + C19480;
    const double C30780 = C30773 + C30774;
    const double C81870 = C81866 + C81867;
    const double C35595 = C35594 * C84543;
    const double C59063 = C35594 * C84543;
    const double C35693 = C35689 + C35680;
    const double C59161 = C59157 + C59148;
    const double C38223 = C38219 + C36297;
    const double C38071 = C38070 * C84543;
    const double C73735 = C38070 * C84543;
    const double C73887 = C73883 + C59764;
    const double C31282 =
        (3 * (C82917 + C83399 + C83399 + C82773 * C83790) + C83800 + C83800 +
         C82773 * (2 * C83790 + C83797 + C83797 +
                   C82773 * (C82922 + C83619 + C83619 +
                             C82773 * (2 * C82798 + C82773 * C82927)))) /
        C81964;
    const double C31289 = C31008 * C31009;
    const double C32067 = C15867 * C31009;
    const double C32116 = C172 * C31009;
    const double C36947 = C35212 * C31009;
    const double C60414 = C58688 * C31009;
    const double C45959 = C82038 * C110;
    const double C45956 = C82038 * C726;
    const double C45953 = C82038 * C1687;
    const double C45950 = C82038 * C1686;
    const double C45947 = C82038 * C727;
    const double C45944 = C82038 * C109;
    const double C46760 = C82038 * C2601;
    const double C46936 = C1935 * C82038;
    const double C46930 = C1931 * C82038;
    const double C47034 = C82038 * C1789;
    const double C47028 = C82038 * C1682;
    const double C47022 = C82038 * C784;
    const double C47016 = C82038 * C722;
    const double C47289 = C82038 * C1907;
    const double C47283 = C82038 * C836;
    const double C47528 = C82038 * C1187;
    const double C47525 = C82038 * C3451;
    const double C47522 = C82038 * C3448;
    const double C48233 = C82038 * C1186;
    const double C48230 = C82038 * C3450;
    const double C49462 = C82038 * C3545;
    const double C49456 = C82038 * C3445;
    const double C49770 = C82038 * C3632;
    const double C50081 = C82038 * C4217;
    const double C50078 = C82038 * C5117;
    const double C50394 = C82038 * C1244;
    const double C50388 = C82038 * C1182;
    const double C50700 = C82038 * C1296;
    const double C63172 = C82038 * C4218;
    const double C64636 = C82038 * C5840;
    const double C64729 = C4336 * C82038;
    const double C64723 = C4332 * C82038;
    const double C64889 = C82038 * C4308;
    const double C64883 = C82038 * C4213;
    const double C65129 = C82038 * C4417;
    const double C99 =
        (C82038 / C81965 + ((C81959 * C82067 + C45932) * ae) / C81958) /
            C81965 -
        ((C81959 * (C82067 / C81965 + (0 * ae) / C81958) + C84527) * be) /
            C81958;
    const double C6689 =
        C82038 / C81965 - ((C81959 * C82067 + C45932) * be) / C81958;
    const double C38944 =
        C82038 / C81965 + ((C81959 * C82067 + C45932) * ae) / C81958;
    const double C13647 = C13627 * C110;
    const double C13644 = C13627 * C726;
    const double C13641 = C13627 * C1687;
    const double C13638 = C13627 * C1686;
    const double C13635 = C13627 * C727;
    const double C13632 = C13627 * C109;
    const double C14448 = C13627 * C2601;
    const double C14624 = C1935 * C13627;
    const double C14618 = C1931 * C13627;
    const double C14722 = C13627 * C1789;
    const double C14716 = C13627 * C1682;
    const double C14710 = C13627 * C784;
    const double C14704 = C13627 * C722;
    const double C14977 = C13627 * C1907;
    const double C14971 = C13627 * C836;
    const double C15216 = C13627 * C1187;
    const double C15213 = C13627 * C3451;
    const double C15210 = C13627 * C3448;
    const double C26469 = C13627 * C1186;
    const double C26466 = C13627 * C4218;
    const double C26463 = C13627 * C4217;
    const double C27252 = C13627 * C5117;
    const double C27942 = C13627 * C5840;
    const double C28044 = C4336 * C13627;
    const double C28038 = C4332 * C13627;
    const double C28216 = C13627 * C4308;
    const double C28210 = C13627 * C4213;
    const double C28204 = C13627 * C1244;
    const double C28198 = C13627 * C1182;
    const double C28468 = C13627 * C4417;
    const double C28462 = C13627 * C1296;
    const double C68134 = C13627 * C3450;
    const double C69335 = C13627 * C3545;
    const double C69329 = C13627 * C3445;
    const double C69641 = C13627 * C3632;
    const double C82040 = C82036 * be;
    const double C13625 = C82012 + (C82036 * ae) / C81958 + C81997;
    const double C82042 = C82037 / C81958;
    const double C82041 = C82035 / C81977;
    const double C82039 = C81959 * C82035;
    const double C19640 = C82035 / C81958;
    const double C2613 = C1675 * C1681;
    const double C2607 = C1675 * C723;
    const double C5852 = C1675 * C4212;
    const double C5846 = C1675 * C1183;
    const double C11757 = C1675 * C3446;
    const double C2615 = C1677 * C1682;
    const double C2609 = C1677 * C722;
    const double C5854 = C1677 * C4213;
    const double C5848 = C1677 * C1182;
    const double C11759 = C1677 * C3445;
    const double C41670 = C40959 * C2599;
    const double C41666 = C40959 * C1681;
    const double C41662 = C40959 * C723;
    const double C44006 = C40959 * C5115;
    const double C44002 = C40959 * C3446;
    const double C44954 = C40959 * C4212;
    const double C44950 = C40959 * C1183;
    const double C51927 = C40959 * C3443;
    const double C59834 = C40959 * C5838;
    const double C2639 = C2633 + C2618;
    const double C2636 = C2630 + C2612;
    const double C5878 = C5872 + C5857;
    const double C5875 = C5869 + C5851;
    const double C14467 = C14461 + C14446;
    const double C14464 = C14458 + C14440;
    const double C27961 = C27955 + C27940;
    const double C27958 = C27952 + C27934;
    const double C16328 = C16324 + C16315;
    const double C16327 = C16323 + C16313;
    const double C16326 = C16322 + C16311;
    const double C16325 = C16321 + C16309;
    const double C17993 = C17989 + C17980;
    const double C17992 = C17988 + C17978;
    const double C17991 = C17987 + C17975;
    const double C17990 = C17986 + C17973;
    const double C18833 = C18831 + C18824;
    const double C18832 = C18830 + C18822;
    const double C25136 = C25135 + C25133;
    const double C31749 = C31747 + C31742;
    const double C31748 = C31746 + C31740;
    const double C37619 = C37618 + C37616;
    const double C20388 = C20382 + C20368;
    const double C20386 = C20380 + C20364;
    const double C20384 = C20378 + C20360;
    const double C22690 = C22686 + C22678;
    const double C22688 = C22684 + C22674;
    const double C23659 = C23657 + C23647;
    const double C33231 = C33229 + C33225;
    const double C34152 = C34150 + C34142;
    const double C36378 = C36376 + C36370;
    const double C41693 = C41687 + C41673;
    const double C41691 = C41685 + C41669;
    const double C41689 = C41683 + C41665;
    const double C44023 = C44019 + C44009;
    const double C44021 = C44017 + C44005;
    const double C44973 = C44969 + C44957;
    const double C44971 = C44967 + C44953;
    const double C51936 = C51934 + C51930;
    const double C59845 = C59843 + C59837;
    const double C46779 = C46773 + C46758;
    const double C46776 = C46770 + C46752;
    const double C50091 = C50088 + C50076;
    const double C64646 = C64643 + C64634;
    const double C82311 = C82308 / C81958;
    const double C82314 = C82310 / C81977;
    const double C82313 = C82091 * C82310;
    const double C39282 = C39265 * C105;
    const double C39276 = C39265 * C104;
    const double C39270 = C39265 * C103;
    const double C43456 = C39265 * C4213;
    const double C43450 = C39265 * C1182;
    const double C45418 = C39265 * C4212;
    const double C45414 = C39265 * C1183;
    const double C48639 = C39265 * C1181;
    const double C74246 = C39265 * C5838;
    const double C2132 = C2126 + C2114;
    const double C2129 = C2123 + C2105;
    const double C30533 = C30527 + C29006;
    const double C30530 = C30524 + C3808;
    const double C56203 = C56200 + C3805;
    const double C7051 = C7045 + C7034;
    const double C7049 = C7043 + C7028;
    const double C7047 = C7041 + C7022;
    const double C11217 = C11213 + C8387;
    const double C11215 = C11211 + C8389;
    const double C13137 = C13135 + C8391;
    const double C32698 = C32696 + C13132;
    const double C34585 = C34583 + C13134;
    const double C38590 = C38588 + C34582;
    const double C14020 = C14014 + C14000;
    const double C14017 = C14011 + C13991;
    const double C19226 = C19220 + C17578;
    const double C19223 = C19217 + C15522;
    const double C22150 = C22147 + C15519;
    const double C14021 = C14015 + C14003;
    const double C14018 = C14012 + C13994;
    const double C19227 = C19221 + C17579;
    const double C19224 = C19218 + C15521;
    const double C22151 = C22148 + C15518;
    const double C2137 = C2131 + C2112;
    const double C2134 = C2128 + C2103;
    const double C30538 = C30532 + C30515;
    const double C30535 = C30529 + C30509;
    const double C56205 = C56202 + C56194;
    const double C2139 = C2133 + C2118;
    const double C2136 = C2130 + C2109;
    const double C30540 = C30534 + C30519;
    const double C30537 = C30531 + C30513;
    const double C7058 = C7052 + C7038;
    const double C7056 = C7050 + C7032;
    const double C7054 = C7048 + C7026;
    const double C11222 = C11218 + C11210;
    const double C11220 = C11216 + C11206;
    const double C13140 = C13138 + C13128;
    const double C32701 = C32699 + C32695;
    const double C34588 = C34586 + C34578;
    const double C38593 = C38591 + C38585;
    const double C14028 = C14022 + C14007;
    const double C14025 = C14019 + C13998;
    const double C19234 = C19228 + C19213;
    const double C19231 = C19225 + C19207;
    const double C39307 = C39301 + C39287;
    const double C39305 = C39299 + C39281;
    const double C39303 = C39297 + C39275;
    const double C43475 = C43471 + C43461;
    const double C43473 = C43469 + C43453;
    const double C45437 = C45433 + C45421;
    const double C45435 = C45431 + C45417;
    const double C48648 = C48646 + C48642;
    const double C74257 = C74255 + C74249;
    const double C46340 = C46334 + C46319;
    const double C46337 = C46331 + C46310;
    const double C53273 = C53270 + C53258;
    const double C81639 = C81636 + C81627;
    const double C46058 = C82269 * C726;
    const double C46052 = C82269 * C721;
    const double C46046 = C82269 * C727;
    const double C46040 = C82269 * C722;
    const double C46321 = C82269 * C782;
    const double C46315 = C82269 * C783;
    const double C46306 = C82269 * C784;
    const double C46300 = C82269 * C785;
    const double C46423 = C1933 * C82269;
    const double C46417 = C1931 * C82269;
    const double C46583 = C82269 * C835;
    const double C46577 = C82269 * C836;
    const double C47131 = C82269 * C1788;
    const double C47128 = C82269 * C1789;
    const double C47125 = C82269 * C1790;
    const double C47833 = C82269 * C3547;
    const double C47830 = C82269 * C3545;
    const double C47827 = C82269 * C3543;
    const double C51109 = C82269 * C3451;
    const double C51103 = C82269 * C3445;
    const double C51724 = C82269 * C3632;
    const double C52345 = C82269 * C3546;
    const double C52342 = C82269 * C3544;
    const double C52949 = C82269 * C3452;
    const double C52943 = C82269 * C3446;
    const double C53263 = C82269 * C5201;
    const double C53260 = C82269 * C5200;
    const double C53570 = C82269 * C3633;
    const double C80885 = C82269 * C17343;
    const double C81378 = C82269 * C5118;
    const double C81372 = C82269 * C5115;
    const double C81544 = C18281 * C82269;
    const double C81538 = C18277 * C82269;
    const double C81629 = C82269 * C18908;
    const double C81864 = C82269 * C5281;
    const double C15929 =
        (C82269 / C81965 + ((C82091 * C82280 + C45935) * ae) / C81958) /
            C81965 -
        ((C82091 * (C82280 / C81965 + (0 * ae) / C81958) + C84536) * be) /
            C81958;
    const double C19728 =
        C82269 / C81965 - ((C82091 * C82280 + C45935) * be) / C81958;
    const double C41047 =
        C82269 / C81965 + ((C82091 * C82280 + C45935) * ae) / C81958;
    const double C82259 = C82255 * be;
    const double C82461 = C82458 / C81958;
    const double C82464 = C82460 / C81977;
    const double C82463 = C82094 * C82460;
    const double C54359 = C54342 * C105;
    const double C54353 = C54342 * C104;
    const double C54347 = C54342 * C103;
    const double C56627 = C54342 * C1682;
    const double C56623 = C54342 * C722;
    const double C57572 = C54342 * C1681;
    const double C57568 = C54342 * C723;
    const double C61318 = C54342 * C721;
    const double C71954 = C54342 * C2599;
    const double C5032 = C5026 + C5014;
    const double C5029 = C5023 + C5005;
    const double C18733 = C18727 + C17889;
    const double C18730 = C18724 + C5761;
    const double C43899 = C43896 + C5758;
    const double C9377 = C9371 + C9360;
    const double C9375 = C9369 + C9354;
    const double C9373 = C9367 + C9348;
    const double C11653 = C11649 + C9983;
    const double C11651 = C11647 + C9985;
    const double C12619 = C12617 + C9987;
    const double C22569 = C22567 + C12614;
    const double C23542 = C23540 + C12616;
    const double C25717 = C25715 + C23539;
    const double C27168 = C27162 + C27148;
    const double C27165 = C27159 + C27139;
    const double C30081 = C30075 + C29307;
    const double C30078 = C30072 + C27854;
    const double C33118 = C33115 + C27851;
    const double C27169 = C27163 + C27151;
    const double C27166 = C27160 + C27142;
    const double C30082 = C30076 + C29308;
    const double C30079 = C30073 + C27853;
    const double C33119 = C33116 + C27850;
    const double C5037 = C5031 + C5012;
    const double C5034 = C5028 + C5003;
    const double C18738 = C18732 + C18715;
    const double C18735 = C18729 + C18709;
    const double C43901 = C43898 + C43890;
    const double C5039 = C5033 + C5018;
    const double C5036 = C5030 + C5009;
    const double C18740 = C18734 + C18719;
    const double C18737 = C18731 + C18713;
    const double C43903 = C43900 + C43894;
    const double C9384 = C9378 + C9364;
    const double C9382 = C9376 + C9358;
    const double C9380 = C9374 + C9352;
    const double C11658 = C11654 + C11646;
    const double C11656 = C11652 + C11642;
    const double C12622 = C12620 + C12610;
    const double C22572 = C22570 + C22566;
    const double C23545 = C23543 + C23535;
    const double C25720 = C25718 + C25712;
    const double C27176 = C27170 + C27155;
    const double C27173 = C27167 + C27146;
    const double C30089 = C30083 + C30068;
    const double C30086 = C30080 + C30062;
    const double C33123 = C33120 + C33114;
    const double C54384 = C54378 + C54364;
    const double C54382 = C54376 + C54358;
    const double C54380 = C54374 + C54352;
    const double C56646 = C56642 + C56632;
    const double C56644 = C56640 + C56626;
    const double C57591 = C57587 + C57575;
    const double C57589 = C57585 + C57571;
    const double C61327 = C61325 + C61321;
    const double C71965 = C71963 + C71957;
    const double C63879 = C63873 + C63858;
    const double C63876 = C63870 + C63849;
    const double C66216 = C66213 + C66207;
    const double C67146 = C67143 + C67131;
    const double C81221 = C81218 + C81209;
    const double C63345 = C82419 * C1186;
    const double C63339 = C82419 * C1181;
    const double C63333 = C82419 * C1187;
    const double C63327 = C82419 * C1182;
    const double C63591 = C82419 * C1243;
    const double C63585 = C82419 * C1244;
    const double C63757 = C4334 * C82419;
    const double C63751 = C4332 * C82419;
    const double C63860 = C82419 * C1294;
    const double C63854 = C82419 * C1295;
    const double C63845 = C82419 * C1296;
    const double C63839 = C82419 * C1297;
    const double C64553 = C82419 * C3633;
    const double C64550 = C82419 * C3632;
    const double C64547 = C82419 * C3631;
    const double C65291 = C82419 * C4416;
    const double C65288 = C82419 * C4417;
    const double C65285 = C82419 * C4418;
    const double C65595 = C82419 * C3451;
    const double C65589 = C82419 * C3445;
    const double C65901 = C82419 * C3545;
    const double C66519 = C82419 * C3452;
    const double C66513 = C82419 * C3446;
    const double C66825 = C82419 * C3547;
    const double C67136 = C82419 * C3630;
    const double C67133 = C82419 * C3629;
    const double C68033 = C82419 * C5281;
    const double C68030 = C82419 * C5280;
    const double C80726 = C82419 * C3449;
    const double C80720 = C82419 * C3443;
    const double C80963 = C82419 * C3546;
    const double C81052 = C18279 * C82419;
    const double C81046 = C18277 * C82419;
    const double C81211 = C82419 * C16906;
    const double C81946 = C82419 * C17421;
    const double C31007 =
        (C82419 / C81965 + ((C82094 * C82430 + C63169) * ae) / C81958) /
            C81965 -
        ((C82094 * (C82430 / C81965 + (0 * ae) / C81958) + C84543) * be) /
            C81958;
    const double C35211 =
        C82419 / C81965 - ((C82094 * C82430 + C63169) * be) / C81958;
    const double C58687 =
        C82419 / C81965 + ((C82094 * C82430 + C63169) * ae) / C81958;
    const double C82409 = C82405 * be;
    const double C6800 = C84304 * C787;
    const double C39055 = C84304 * C787;
    const double C7678 = C84527 * C886;
    const double C39919 = C84527 * C886;
    const double C8896 = C84344 * C1299;
    const double C53904 = C84344 * C1299;
    const double C10517 = C84527 * C1492;
    const double C55516 = C84527 * C1492;
    const double C209 = C200 + C201;
    const double C288 = C279 + C280;
    const double C7448 = C7439 + C6700;
    const double C6884 = C6881 + C6882;
    const double C7682 = C7669 + C7670;
    const double C39689 = C39680 + C38955;
    const double C39923 = C39910 + C39911;
    const double C10069 = C10060 + C8110;
    const double C8804 = C8801 + C8802;
    const double C10303 = C10290 + C10291;
    const double C55068 = C55059 + C40348;
    const double C55302 = C55289 + C55290;
    const double C11771 = C11768 + C11762;
    const double C69032 = C69029 + C69023;
    const double C49159 = C49156 + C49150;
    const double C16073 =
        (3 * (C83144 + C83150 + C83150 + C82730 * C83467) + C83478 + C83478 +
         C82730 *
             (2 * C83467 + C83475 + C83475 +
              C82730 * (C83458 + C83471 + C83471 +
                        C82730 * (2 * ae * C83460 +
                                  C82730 * C82615 *
                                      (C82687 * C82688 +
                                       C82838 * bs[7] * std::pow(C82621, 7)) *
                                      C82622)))) /
        C81964;
    const double C21545 =
        (C83478 +
         C82773 * (2 * C83499 + ae * C83490 +
                   C82730 * (C83497 + ae * C82730 * C83486 +
                             C82730 * (ae * C83486 + C82730 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82897)))) /
        C81964;
    const double C16080 = C15930 * C15932;
    const double C20701 = C19729 * C15932;
    const double C42006 = C41048 * C15932;
    const double C21338 = C19729 * C21133;
    const double C23119 = C13724 * C21133;
    const double C42634 = C41048 * C21133;
    const double C52341 = C82280 * C21133;
    const double C57161 = C1787 * C21133;
    const double C31283 =
        (3 * (C83177 + C83389 + C83389 + C82773 * C83808) + C83821 + C83821 +
         C82773 *
             (2 * C83808 + C83818 + C83818 +
              C82773 * (C83502 + C83814 + C83814 +
                        C82773 * (2 * ae * C83486 +
                                  C82773 * C82615 *
                                      (C82687 * C82688 +
                                       C82912 * bs[7] * std::pow(C82621, 7)) *
                                      C82622)))) /
        C81964;
    const double C34686 =
        (C83821 +
         C82730 * (2 * C83742 + ae * C83770 +
                   C82773 * (C83485 + ae * C82773 * C83460 +
                             C82773 * (ae * C83460 + C82773 * C82615 *
                                                         std::pow(C82621, 7) *
                                                         bs[7] * C82860)))) /
        C81964;
    const double C31290 = C31008 * C31010;
    const double C36943 = C35212 * C31010;
    const double C60410 = C58688 * C31010;
    const double C82726 = C82725 + C82712;
    const double C729 =
        (3 * (C82730 * C82670 + C82937 + C82937 + C82615 * C82944) + C82940 +
         C82940 +
         C82615 *
             (2 * C82944 + C82941 + C82941 +
              C82615 * (C82933 + C82942 + C82942 +
                        C82615 * (2 * ae * C82730 * C82700 +
                                  C82615 * C82730 *
                                      (C82687 * C82688 +
                                       C82619 * bs[7] * std::pow(C82621, 7)) *
                                      C82622)))) /
        C81964;
    const double C1795 =
        (2 * C82751 + ae * C82752 + C82615 * C82769 + C82940 +
         C82730 * (C82724 +
                   C82730 * (2 * C82765 + ae * C82766 +
                             C82615 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C2015 =
        (2 * C82826 + ae * C82752 + C82615 * C82834 + C82940 +
         C82730 * (C82724 +
                   C82730 * (2 * C82832 + ae * C82766 +
                             C82615 * (C82830 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C8248 =
        (C82940 +
         C82773 * C82730 *
             (2 * C82808 + ae * C82809 +
              C82615 * (C82802 + ae * C82615 * C82804 +
                        C82615 * (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82777)))) /
        C81964;
    const double C8524 =
        (C82940 +
         C82773 * C82730 *
             (2 * C82890 + ae * C82809 +
              C82615 * (C82888 + ae * C82615 * C82804 +
                        C82615 * (ae * C82804 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82876)))) /
        C81964;
    const double C8106 = C6691 * C8103;
    const double C10760 = C1680 * C8103;
    const double C40344 = C38946 * C8103;
    const double C48229 = C82067 * C8103;
    const double C68133 = C13629 * C8103;
    const double C1189 =
        (3 * (C82773 * C82670 + C83001 + C83001 + C82615 * C83008) + C83004 +
         C83004 +
         C82615 *
             (2 * C83008 + C83005 + C83005 +
              C82615 * (C82997 + C83006 + C83006 +
                        C82615 * (2 * ae * C82773 * C82700 +
                                  C82615 * C82773 *
                                      (C82687 * C82688 +
                                       C82619 * bs[7] * std::pow(C82621, 7)) *
                                      C82622)))) /
        C81964;
    const double C4423 =
        (2 * C82794 + ae * C82795 + C82615 * C82812 + C83004 +
         C82773 * (C82724 +
                   C82773 * (2 * C82808 + ae * C82809 +
                             C82615 * (C82802 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C4813 =
        (2 * C82884 + ae * C82795 + C82615 * C82892 + C83004 +
         C82773 * (C82724 +
                   C82773 * (2 * C82890 + ae * C82809 +
                             C82615 * (C82888 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C8315 =
        (C83004 +
         C82730 * C82773 *
             (2 * C82832 + ae * C82766 +
              C82615 * (C82830 + ae * C82615 * C82761 +
                        C82615 * (ae * C82761 + C82615 * std::pow(C82621, 7) *
                                                    bs[7] * C82818)))) /
        C81964;
    const double C83556 = C83555 + C83548;
    const double C16995 =
        (3 * (C82773 * C82848 + C83602 + C83602 + C82730 * C83609) + C83605 +
         C83605 +
         C82730 *
             (2 * C83609 + C83606 + C83606 +
              C82730 * (C83598 + C83607 + C83607 +
                        C82730 * (2 * ae * C82773 * C82761 +
                                  C82730 * C82773 *
                                      (C82687 * C82688 +
                                       C82838 * bs[7] * std::pow(C82621, 7)) *
                                      C82622)))) /
        C81964;
    const double C18631 =
        (2 * C83495 + ae * C83483 + C82730 * C83579 + C83605 +
         C82773 * (C83554 +
                   C82773 * (2 * C83577 + ae * C83565 +
                             C82730 * (C82906 + ae * C82730 * C82804 +
                                       C82730 * (ae * C82804 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82897))))) /
        C81964;
    const double C83932 = C83931 + C83920;
    const double C31687 =
        (3 * (C83719 + C83725 + C83725 + C82773 * C83857) + C83868 + C83868 +
         C82773 *
             (2 * C83857 + C83865 + C83865 +
              C82773 * (C83848 + C83861 + C83861 +
                        C82773 * (2 * ae * C83850 +
                                  C82773 * C82730 *
                                      (C82687 * C82688 +
                                       C82912 * bs[7] * std::pow(C82621, 7)) *
                                      C82622)))) /
        C81964;
    const double C31689 = C31008 * C31426;
    const double C38864 = C35212 * C31426;
    const double C74528 = C58688 * C31426;
    const double C19994 = C19990 + C19978;
    const double C41307 = C41303 + C41291;
    const double C56207 = C56204 + C56198;
    const double C22155 = C22152 + C22146;
    const double C51427 = C51424 + C51418;
    const double C26312 = C84536 * C17133;
    const double C72557 = C84536 * C17133;
    const double C16507 = C16498 + C16499;
    const double C16604 = C16601 + C16602;
    const double C26098 = C26089 + C21342;
    const double C25353 = C25350 + C25351;
    const double C25495 = C25492 + C25493;
    const double C25872 = C25859 + C25860;
    const double C72343 = C72334 + C42638;
    const double C71743 = C71740 + C71741;
    const double C72117 = C72104 + C72105;
    const double C35697 = C35693 + C35681;
    const double C59165 = C59161 + C59149;
    const double C38227 = C38223 + C38211;
    const double C73891 = C73887 + C73875;
    const double C32070 = C32067 + C32068;
    const double C32119 = C32116 + C32117;
    const double C47048 = C47034 + C47035;
    const double C47045 = C47028 + C47029;
    const double C47042 = C47022 + C47023;
    const double C47039 = C47016 + C47017;
    const double C47297 = C47289 + C47290;
    const double C47294 = C47283 + C47284;
    const double C49470 = C49462 + C49463;
    const double C49467 = C49456 + C49457;
    const double C49775 = C49770 + C49771;
    const double C50402 = C50394 + C50395;
    const double C50399 = C50388 + C50389;
    const double C50705 = C50700 + C50701;
    const double C64897 = C64889 + C64890;
    const double C64894 = C64883 + C64884;
    const double C65134 = C65129 + C65130;
    const double C127 = C99 * C112;
    const double C124 = C99 * C111;
    const double C736 = C99 * C725;
    const double C1196 = C99 * C1185;
    const double C6706 = C6689 * C111;
    const double C6702 = C6689 * C725;
    const double C6699 = C6689 * C726;
    const double C6695 = C6689 * C110;
    const double C7442 = C6689 * C1687;
    const double C7593 = C1933 * C6689;
    const double C7675 = C6689 * C783;
    const double C7667 = C6689 * C721;
    const double C7897 = C6689 * C835;
    const double C8111 = C6689 * C1186;
    const double C8107 = C6689 * C3450;
    const double C8730 = C6689 * C1185;
    const double C10063 = C6689 * C4218;
    const double C10148 = C4334 * C6689;
    const double C10296 = C6689 * C1243;
    const double C10288 = C6689 * C1181;
    const double C10514 = C6689 * C1295;
    const double C38961 = C38944 * C111;
    const double C38957 = C38944 * C725;
    const double C38954 = C38944 * C726;
    const double C38950 = C38944 * C110;
    const double C39683 = C38944 * C1687;
    const double C39834 = C1933 * C38944;
    const double C39916 = C38944 * C783;
    const double C39908 = C38944 * C721;
    const double C40138 = C38944 * C835;
    const double C40349 = C38944 * C1186;
    const double C40345 = C38944 * C3450;
    const double C53744 = C38944 * C1185;
    const double C55062 = C38944 * C4218;
    const double C55147 = C4334 * C38944;
    const double C55295 = C38944 * C1243;
    const double C55287 = C38944 * C1181;
    const double C55513 = C38944 * C1295;
    const double C14736 = C14722 + C14723;
    const double C14733 = C14716 + C14717;
    const double C14730 = C14710 + C14711;
    const double C14727 = C14704 + C14705;
    const double C14985 = C14977 + C14978;
    const double C14982 = C14971 + C14972;
    const double C28230 = C28216 + C28217;
    const double C28227 = C28210 + C28211;
    const double C28224 = C28204 + C28205;
    const double C28221 = C28198 + C28199;
    const double C28476 = C28468 + C28469;
    const double C28473 = C28462 + C28463;
    const double C69343 = C69335 + C69336;
    const double C69340 = C69329 + C69330;
    const double C69646 = C69641 + C69642;
    const double C82044 = C82040 / C81958;
    const double C13648 = C13625 * C109;
    const double C13645 = C13625 * C727;
    const double C13642 = C13625 * C1686;
    const double C13637 = C13625 * C1685;
    const double C13634 = C13625 * C728;
    const double C13631 = C13625 * C108;
    const double C14449 = C13625 * C2602;
    const double C14622 = C2818 * C13625;
    const double C14616 = C2816 * C13625;
    const double C14720 = C13625 * C1788;
    const double C14714 = C13625 * C1681;
    const double C14708 = C13625 * C785;
    const double C14702 = C13625 * C723;
    const double C14975 = C13625 * C1906;
    const double C14969 = C13625 * C837;
    const double C15217 = C13625 * C1188;
    const double C15214 = C13625 * C3452;
    const double C15211 = C13625 * C3449;
    const double C26470 = C13625 * C1187;
    const double C26467 = C13625 * C4217;
    const double C26462 = C13625 * C4216;
    const double C27253 = C13625 * C5118;
    const double C27943 = C13625 * C5841;
    const double C28042 = C5977 * C13625;
    const double C28036 = C5975 * C13625;
    const double C28214 = C13625 * C4307;
    const double C28208 = C13625 * C4212;
    const double C28202 = C13625 * C1245;
    const double C28196 = C13625 * C1183;
    const double C28466 = C13625 * C4416;
    const double C28460 = C13625 * C1297;
    const double C68135 = C13625 * C3451;
    const double C69333 = C13625 * C3547;
    const double C69327 = C13625 * C3446;
    const double C69639 = C13625 * C3633;
    const double C82045 = C82041 - C82042;
    const double C13626 = C82041 + (C82031 * ae) / C81958;
    const double C82043 = C82039 / C81958;
    const double C20365 = C19640 * C2599;
    const double C20361 = C19640 * C1681;
    const double C20357 = C19640 * C723;
    const double C22675 = C19640 * C3443;
    const double C22671 = C19640 * C3446;
    const double C23644 = C19640 * C1183;
    const double C33222 = C19640 * C5115;
    const double C34139 = C19640 * C4212;
    const double C36367 = C19640 * C5838;
    const double C2625 = C2613 + C1700;
    const double C2622 = C2607 + C1697;
    const double C5864 = C5852 + C4225;
    const double C5861 = C5846 + C3468;
    const double C11763 = C11757 + C3465;
    const double C2626 = C2615 + C1701;
    const double C2623 = C2609 + C1698;
    const double C5865 = C5854 + C4226;
    const double C5862 = C5848 + C3467;
    const double C11764 = C11759 + C3464;
    const double C41680 = C41670 + C40970;
    const double C41678 = C41666 + C40968;
    const double C41676 = C41662 + C40966;
    const double C44014 = C44006 + C43006;
    const double C44012 = C44002 + C42367;
    const double C44964 = C44954 + C43004;
    const double C44962 = C44950 + C42369;
    const double C51931 = C51927 + C42365;
    const double C59840 = C59834 + C44961;
    const double C16332 = C16328 * C84257;
    const double C16331 = C16327 * C84257;
    const double C25131 = C16327 * C84529;
    const double C71390 = C16327 * C53740;
    const double C16330 = C16326 * C84257;
    const double C17976 = C16326 * C84597;
    const double C25129 = C16326 * C84529;
    const double C29390 = C16326 * C26458;
    const double C71388 = C16326 * C53740;
    const double C80567 = C16326 * C84340;
    const double C16329 = C16325 * C84257;
    const double C17971 = C16325 * C84597;
    const double C25127 = C16325 * C84529;
    const double C29387 = C16325 * C26458;
    const double C37612 = C16325 * C35065;
    const double C71386 = C16325 * C53740;
    const double C73290 = C16325 * C84607;
    const double C80564 = C16325 * C84340;
    const double C17997 = C17993 * C84561;
    const double C29392 = C17993 * C84561;
    const double C80569 = C17993 * C63169;
    const double C17996 = C17992 * C84583;
    const double C25130 = C17992 * C84344;
    const double C29391 = C17992 * C26459;
    const double C71389 = C17992 * C84344;
    const double C80568 = C17992 * C84347;
    const double C17995 = C17991 * C84561;
    const double C29389 = C17991 * C84561;
    const double C37614 = C17991 * C35067;
    const double C73292 = C17991 * C84589;
    const double C80566 = C17991 * C63169;
    const double C17994 = C17990 * C84583;
    const double C25128 = C17990 * C84344;
    const double C29388 = C17990 * C26459;
    const double C37613 = C17990 * C35066;
    const double C71387 = C17990 * C84344;
    const double C73291 = C17990 * C84601;
    const double C80565 = C17990 * C84347;
    const double C25137 = C25136 * C84344;
    const double C71391 = C25136 * C84344;
    const double C37620 = C37619 * C84543;
    const double C73293 = C37619 * C84543;
    const double C82317 = C82314 - C82311;
    const double C82316 = C82313 / C81958;
    const double C39294 = C39282 + C39283;
    const double C39292 = C39276 + C39277;
    const double C39290 = C39270 + C39271;
    const double C43466 = C43456 + C43457;
    const double C43464 = C43450 + C40621;
    const double C45428 = C45418 + C43454;
    const double C45426 = C45414 + C40623;
    const double C48643 = C48639 + C40619;
    const double C74252 = C74246 + C45425;
    const double C2138 = C2132 + C2115;
    const double C2135 = C2129 + C2106;
    const double C30539 = C30533 + C30517;
    const double C30536 = C30530 + C30511;
    const double C56206 = C56203 + C56196;
    const double C7057 = C7051 + C7035;
    const double C7055 = C7049 + C7029;
    const double C7053 = C7047 + C7023;
    const double C11221 = C11217 + C11208;
    const double C11219 = C11215 + C11204;
    const double C13139 = C13137 + C13126;
    const double C32700 = C32698 + C32693;
    const double C34587 = C34585 + C34576;
    const double C38592 = C38590 + C38583;
    const double C14026 = C14020 + C14001;
    const double C14023 = C14017 + C13992;
    const double C19232 = C19226 + C19209;
    const double C19229 = C19223 + C19203;
    const double C22153 = C22150 + C22142;
    const double C14027 = C14021 + C14004;
    const double C14024 = C14018 + C13995;
    const double C19233 = C19227 + C19211;
    const double C19230 = C19224 + C19205;
    const double C22154 = C22151 + C22144;
    const double C46072 = C46058 + C46059;
    const double C46069 = C46052 + C46053;
    const double C46066 = C46046 + C46047;
    const double C46063 = C46040 + C46041;
    const double C46591 = C46583 + C46584;
    const double C46588 = C46577 + C46578;
    const double C51117 = C51109 + C51110;
    const double C51114 = C51103 + C51104;
    const double C51729 = C51724 + C51725;
    const double C52957 = C52949 + C52950;
    const double C52954 = C52943 + C52944;
    const double C53575 = C53570 + C53571;
    const double C81386 = C81378 + C81379;
    const double C81383 = C81372 + C81373;
    const double C81869 = C81864 + C81865;
    const double C16081 = C15929 * C2714;
    const double C16078 = C15929 * C2715;
    const double C16552 = C15929 * C15931;
    const double C16999 = C15929 * C16860;
    const double C19743 = C19728 * C1686;
    const double C19735 = C19728 * C1682;
    const double C19980 = C19728 * C1790;
    const double C19974 = C19728 * C1789;
    const double C19965 = C19728 * C1788;
    const double C20065 = C1935 * C19728;
    const double C20208 = C19728 * C1907;
    const double C20706 = C19728 * C2715;
    const double C20702 = C19728 * C2714;
    const double C21343 = C19728 * C3546;
    const double C21339 = C19728 * C3544;
    const double C25421 = C19728 * C16860;
    const double C25865 = C19728 * C3449;
    const double C25857 = C19728 * C3443;
    const double C26013 = C18279 * C19728;
    const double C26092 = C19728 * C17343;
    const double C26309 = C19728 * C3630;
    const double C41062 = C41047 * C1686;
    const double C41054 = C41047 * C1682;
    const double C41293 = C41047 * C1790;
    const double C41287 = C41047 * C1789;
    const double C41278 = C41047 * C1788;
    const double C41378 = C1935 * C41047;
    const double C41518 = C41047 * C1907;
    const double C42011 = C41047 * C2715;
    const double C42007 = C41047 * C2714;
    const double C42639 = C41047 * C3546;
    const double C42635 = C41047 * C3544;
    const double C71669 = C41047 * C16860;
    const double C72110 = C41047 * C3449;
    const double C72102 = C41047 * C3443;
    const double C72258 = C18279 * C41047;
    const double C72337 = C41047 * C17343;
    const double C72554 = C41047 * C3630;
    const double C82264 = C82259 / C81958;
    const double C82467 = C82464 - C82461;
    const double C82466 = C82463 / C81958;
    const double C54371 = C54359 + C54360;
    const double C54369 = C54353 + C54354;
    const double C54367 = C54347 + C54348;
    const double C56637 = C56627 + C56628;
    const double C56635 = C56623 + C54984;
    const double C57582 = C57572 + C56621;
    const double C57580 = C57568 + C54986;
    const double C61322 = C61318 + C54982;
    const double C71960 = C71954 + C57579;
    const double C5038 = C5032 + C5015;
    const double C5035 = C5029 + C5006;
    const double C18739 = C18733 + C18717;
    const double C18736 = C18730 + C18711;
    const double C43902 = C43899 + C43892;
    const double C9383 = C9377 + C9361;
    const double C9381 = C9375 + C9355;
    const double C9379 = C9373 + C9349;
    const double C11657 = C11653 + C11644;
    const double C11655 = C11651 + C11640;
    const double C12621 = C12619 + C12608;
    const double C22571 = C22569 + C22564;
    const double C23544 = C23542 + C23533;
    const double C25719 = C25717 + C25710;
    const double C27174 = C27168 + C27149;
    const double C27171 = C27165 + C27140;
    const double C30087 = C30081 + C30064;
    const double C30084 = C30078 + C30058;
    const double C33121 = C33118 + C33110;
    const double C27175 = C27169 + C27152;
    const double C27172 = C27166 + C27143;
    const double C30088 = C30082 + C30066;
    const double C30085 = C30079 + C30060;
    const double C33122 = C33119 + C33112;
    const double C63359 = C63345 + C63346;
    const double C63356 = C63339 + C63340;
    const double C63353 = C63333 + C63334;
    const double C63350 = C63327 + C63328;
    const double C63599 = C63591 + C63592;
    const double C63596 = C63585 + C63586;
    const double C65603 = C65595 + C65596;
    const double C65600 = C65589 + C65590;
    const double C65906 = C65901 + C65902;
    const double C66527 = C66519 + C66520;
    const double C66524 = C66513 + C66514;
    const double C66830 = C66825 + C66826;
    const double C80734 = C80726 + C80727;
    const double C80731 = C80720 + C80721;
    const double C80968 = C80963 + C80964;
    const double C31291 = C31007 * C6057;
    const double C31288 = C31007 * C6058;
    const double C31690 = C31007 * C19022;
    const double C32164 = C31007 * C31009;
    const double C35226 = C35211 * C4217;
    const double C35218 = C35211 * C4213;
    const double C35445 = C35211 * C4308;
    const double C35589 = C4336 * C35211;
    const double C35683 = C35211 * C4418;
    const double C35677 = C35211 * C4417;
    const double C35668 = C35211 * C4416;
    const double C36298 = C35211 * C5281;
    const double C36294 = C35211 * C5280;
    const double C36948 = C35211 * C6058;
    const double C36944 = C35211 * C6057;
    const double C37765 = C35211 * C5118;
    const double C37757 = C35211 * C5115;
    const double C37987 = C35211 * C5201;
    const double C38065 = C18281 * C35211;
    const double C38213 = C35211 * C17421;
    const double C38865 = C35211 * C19022;
    const double C58702 = C58687 * C4217;
    const double C58694 = C58687 * C4213;
    const double C58916 = C58687 * C4308;
    const double C59060 = C4336 * C58687;
    const double C59151 = C58687 * C4418;
    const double C59145 = C58687 * C4417;
    const double C59136 = C58687 * C4416;
    const double C59765 = C58687 * C5281;
    const double C59761 = C58687 * C5280;
    const double C60415 = C58687 * C6058;
    const double C60411 = C58687 * C6057;
    const double C73438 = C58687 * C5118;
    const double C73430 = C58687 * C5115;
    const double C73654 = C58687 * C5201;
    const double C73732 = C18281 * C58687;
    const double C73877 = C58687 * C17421;
    const double C74529 = C58687 * C19022;
    const double C82414 = C82409 / C81958;
    const double C6812 = C6799 + C6800;
    const double C39067 = C39054 + C39055;
    const double C7686 = C7677 + C7678;
    const double C39927 = C39918 + C39919;
    const double C8908 = C8895 + C8896;
    const double C53916 = C53903 + C53904;
    const double C10521 = C10516 + C10517;
    const double C55520 = C55515 + C55516;
    const double C7452 = C7448 + C6700;
    const double C7596 = C6884 * C84527;
    const double C39837 = C6884 * C84527;
    const double C39693 = C39689 + C38955;
    const double C10073 = C10069 + C8110;
    const double C10151 = C8804 * C84527;
    const double C55150 = C8804 * C84527;
    const double C55072 = C55068 + C40348;
    const double C82727 = ae * C82726;
    const double C113 =
        (4 * C82681 + C82615 * C82726 + (3 * C82666 + C82615 * C82709) * ae) /
        C81958;
    const double C724 = (C82730 * C82726) / C81958;
    const double C1184 = (C82773 * C82726) / C81958;
    const double C83557 = ae * C83556;
    const double C16374 =
        (4 * C83454 + C82730 * C83556 + (3 * C83445 + C82730 * C83546) * ae) /
        C81958;
    const double C16859 = (C82773 * C83556) / C81958;
    const double C83933 = ae * C83932;
    const double C31855 =
        (4 * C83799 + C82773 * C83932 + (3 * C83793 + C82773 * C83917) * ae) /
        C81958;
    const double C26316 = C26311 + C26312;
    const double C72561 = C72556 + C72557;
    const double C26102 = C26098 + C21342;
    const double C26016 = C25353 * C84536;
    const double C72261 = C25353 * C84536;
    const double C72347 = C72343 + C42638;
    const double C7685 = C7675 + C7676;
    const double C7681 = C7667 + C7668;
    const double C7903 = C7897 + C7898;
    const double C10306 = C10296 + C10297;
    const double C10302 = C10288 + C10289;
    const double C10520 = C10514 + C10515;
    const double C39926 = C39916 + C39917;
    const double C39922 = C39908 + C39909;
    const double C40144 = C40138 + C40139;
    const double C55305 = C55295 + C55296;
    const double C55301 = C55287 + C55288;
    const double C55519 = C55513 + C55514;
    const double C82047 = C82012 - C82044;
    const double C14735 = C14720 + C14721;
    const double C14732 = C14714 + C14715;
    const double C14729 = C14708 + C14709;
    const double C14726 = C14702 + C14703;
    const double C14984 = C14975 + C14976;
    const double C14981 = C14969 + C14970;
    const double C28229 = C28214 + C28215;
    const double C28226 = C28208 + C28209;
    const double C28223 = C28202 + C28203;
    const double C28220 = C28196 + C28197;
    const double C28475 = C28466 + C28467;
    const double C28472 = C28460 + C28461;
    const double C69342 = C69333 + C69334;
    const double C69339 = C69327 + C69328;
    const double C69645 = C69639 + C69640;
    const double C46755 = C82045 * C1682;
    const double C46749 = C82045 * C722;
    const double C49147 = C82045 * C3445;
    const double C50073 = C82045 * C1182;
    const double C64631 = C82045 * C4213;
    const double C98 =
        (C82045 / C81965 + ((C82068 - C82017 / C82065) * ae) / C81958) /
            C81965 -
        ((2 * (C82067 / C81965 + (0 * ae) / C81958) -
          C82017 / (C81958 * 4 * C81974)) *
         be) /
            C81958;
    const double C6688 =
        C82045 / C81965 - ((C82068 - C82017 / C82065) * be) / C81958;
    const double C38943 =
        C82045 / C81965 + ((C82068 - C82017 / C82065) * ae) / C81958;
    const double C14443 = C13626 * C1682;
    const double C14437 = C13626 * C722;
    const double C27937 = C13626 * C4213;
    const double C27931 = C13626 * C1182;
    const double C69020 = C13626 * C3445;
    const double C82046 = C82043 + C82029;
    const double C20375 = C20365 + C19651;
    const double C20373 = C20361 + C19649;
    const double C20371 = C20357 + C19647;
    const double C22681 = C22675 + C21063;
    const double C22679 = C22671 + C21065;
    const double C23654 = C23644 + C21067;
    const double C33226 = C33222 + C23651;
    const double C34147 = C34139 + C23653;
    const double C36373 = C36367 + C34146;
    const double C2631 = C2625 + C1700;
    const double C2628 = C2622 + C1697;
    const double C5870 = C5864 + C4225;
    const double C5867 = C5861 + C3468;
    const double C11766 = C11763 + C3465;
    const double C2632 = C2626 + C1701;
    const double C2629 = C2623 + C1698;
    const double C5871 = C5865 + C4226;
    const double C5868 = C5862 + C3467;
    const double C11767 = C11764 + C3464;
    const double C41686 = C41680 + C40970;
    const double C41684 = C41678 + C40968;
    const double C41682 = C41676 + C40966;
    const double C44018 = C44014 + C43006;
    const double C44016 = C44012 + C42367;
    const double C44968 = C44964 + C43004;
    const double C44966 = C44962 + C42369;
    const double C51933 = C51931 + C42365;
    const double C59842 = C59840 + C44961;
    const double C46314 = C82317 * C721;
    const double C46305 = C82317 * C722;
    const double C51415 = C82317 * C3445;
    const double C53255 = C82317 * C3446;
    const double C81624 = C82317 * C5115;
    const double C16070 =
        (C82317 / C81965 + ((C82327 - C82131 / C82065) * ae) / C81958) /
            C81965 -
        ((2 * (C82280 / C81965 + (0 * ae) / C81958) -
          C82131 / (C81958 * 4 * C81974)) *
         be) /
            C81958;
    const double C19960 =
        C82317 / C81965 - ((C82327 - C82131 / C82065) * be) / C81958;
    const double C41273 =
        C82317 / C81965 + ((C82327 - C82131 / C82065) * ae) / C81958;
    const double C82319 = C82316 + C82296;
    const double C39300 = C39294 + C39283;
    const double C39298 = C39292 + C39277;
    const double C39296 = C39290 + C39271;
    const double C43470 = C43466 + C43457;
    const double C43468 = C43464 + C40621;
    const double C45432 = C45428 + C43454;
    const double C45430 = C45426 + C40623;
    const double C48645 = C48643 + C40619;
    const double C74254 = C74252 + C45425;
    const double C19753 = C19743 + C19744;
    const double C19749 = C19735 + C19736;
    const double C20214 = C20208 + C20209;
    const double C25875 = C25865 + C25866;
    const double C25871 = C25857 + C25858;
    const double C26315 = C26309 + C26310;
    const double C41072 = C41062 + C41063;
    const double C41068 = C41054 + C41055;
    const double C41524 = C41518 + C41519;
    const double C72120 = C72110 + C72111;
    const double C72116 = C72102 + C72103;
    const double C72560 = C72554 + C72555;
    const double C82268 = C82263 - C82264;
    const double C63853 = C82467 * C1181;
    const double C63844 = C82467 * C1182;
    const double C66204 = C82467 * C3445;
    const double C67128 = C82467 * C3446;
    const double C81206 = C82467 * C3443;
    const double C31280 =
        (C82467 / C81965 + ((C82477 - C82157 / C82065) * ae) / C81958) /
            C81965 -
        ((2 * (C82430 / C81965 + (0 * ae) / C81958) -
          C82157 / (C81958 * 4 * C81974)) *
         be) /
            C81958;
    const double C35663 =
        C82467 / C81965 - ((C82477 - C82157 / C82065) * be) / C81958;
    const double C59131 =
        C82467 / C81965 + ((C82477 - C82157 / C82065) * ae) / C81958;
    const double C82469 = C82466 + C82446;
    const double C54377 = C54371 + C54360;
    const double C54375 = C54369 + C54354;
    const double C54373 = C54367 + C54348;
    const double C56641 = C56637 + C56628;
    const double C56639 = C56635 + C54984;
    const double C57586 = C57582 + C56621;
    const double C57584 = C57580 + C54986;
    const double C61324 = C61322 + C54982;
    const double C71962 = C71960 + C57579;
    const double C35236 = C35226 + C35227;
    const double C35232 = C35218 + C35219;
    const double C35451 = C35445 + C35446;
    const double C37775 = C37765 + C37766;
    const double C37771 = C37757 + C37758;
    const double C37993 = C37987 + C37988;
    const double C58712 = C58702 + C58703;
    const double C58708 = C58694 + C58695;
    const double C58922 = C58916 + C58917;
    const double C73448 = C73438 + C73439;
    const double C73444 = C73430 + C73431;
    const double C73660 = C73654 + C73655;
    const double C82418 = C82413 - C82414;
    const double C7456 = C7452 + C7440;
    const double C39697 = C39693 + C39681;
    const double C10077 = C10073 + C10061;
    const double C55076 = C55072 + C55060;
    const double C119 =
        (4 * (2 * C82675 + C82679 + C82679 + C82615 * C82718) + C82727 +
         C82727 +
         C82615 * (3 * C82718 + C82724 + C82724 +
                   C82615 * (2 * C82714 + C82720 + C82720 +
                             C82615 * (C82707 + C82713 + C82713 +
                                       C82615 * (2 * ae * C82700 +
                                                 C82615 *
                                                     (C82687 * C82688 +
                                                      C82619 * bs[7] *
                                                          std::pow(C82621, 7)) *
                                                     C82622))))) /
        C81964;
    const double C786 =
        (C82727 +
         C82730 * (3 * C82769 + ae * C82770 +
                   C82615 * (2 * C82765 + ae * C82766 +
                             C82615 * (C82759 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82734))))) /
        C81964;
    const double C885 =
        (C82727 +
         C82730 * (3 * C82834 + ae * C82770 +
                   C82615 * (2 * C82832 + ae * C82766 +
                             C82615 * (C82830 + ae * C82615 * C82761 +
                                       C82615 * (ae * C82761 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82818))))) /
        C81964;
    const double C1298 =
        (C82727 +
         C82773 * (3 * C82812 + ae * C82813 +
                   C82615 * (2 * C82808 + ae * C82809 +
                             C82615 * (C82802 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82777))))) /
        C81964;
    const double C1491 =
        (C82727 +
         C82773 * (3 * C82892 + ae * C82813 +
                   C82615 * (2 * C82890 + ae * C82809 +
                             C82615 * (C82888 + ae * C82615 * C82804 +
                                       C82615 * (ae * C82804 +
                                                 C82615 * std::pow(C82621, 7) *
                                                     bs[7] * C82876))))) /
        C81964;
    const double C126 = C101 * C113;
    const double C735 = C101 * C724;
    const double C6701 = C6691 * C724;
    const double C38956 = C38946 * C724;
    const double C1195 = C101 * C1184;
    const double C8729 = C6691 * C1184;
    const double C53743 = C38946 * C1184;
    const double C16549 =
        (4 * (2 * C83442 + C83452 + C83452 + C82730 * C83544) + C83557 +
         C83557 +
         C82730 * (3 * C83544 + C83554 + C83554 +
                   C82730 * (2 * C83535 + C83550 + C83550 +
                             C82730 * (C82853 + C83543 + C83543 +
                                       C82730 * (2 * ae * C82761 +
                                                 C82730 *
                                                     (C82687 * C82688 +
                                                      C82838 * bs[7] *
                                                          std::pow(C82621, 7)) *
                                                     C82622))))) /
        C81964;
    const double C17132 =
        (C83557 +
         C82773 * (3 * C83579 + ae * C83570 +
                   C82730 * (2 * C83577 + ae * C83565 +
                             C82730 * (C82906 + ae * C82730 * C82804 +
                                       C82730 * (ae * C82804 +
                                                 C82730 * std::pow(C82621, 7) *
                                                     bs[7] * C82897))))) /
        C81964;
    const double C16551 = C15930 * C16374;
    const double C16998 = C15930 * C16859;
    const double C25420 = C19729 * C16859;
    const double C71668 = C41048 * C16859;
    const double C32161 =
        (4 * (2 * C83790 + C83797 + C83797 + C82773 * C83922) + C83933 +
         C83933 +
         C82773 * (3 * C83922 + C83930 + C83930 +
                   C82773 * (2 * C83914 + C83926 + C83926 +
                             C82773 * (C82927 + C83921 + C83921 +
                                       C82773 * (2 * ae * C82804 +
                                                 C82773 *
                                                     (C82687 * C82688 +
                                                      C82912 * bs[7] *
                                                          std::pow(C82621, 7)) *
                                                     C82622))))) /
        C81964;
    const double C32163 = C31008 * C31855;
    const double C26106 = C26102 + C26090;
    const double C72351 = C72347 + C72335;
    const double C82049 = C82047 + C81997;
    const double C46766 = C46755 + C45950;
    const double C46763 = C46749 + C45947;
    const double C49152 = C49147 + C47525;
    const double C50084 = C50073 + C47528;
    const double C64639 = C64631 + C50081;
    const double C7437 = C6688 * C721;
    const double C10058 = C6688 * C1181;
    const double C39678 = C38943 * C721;
    const double C55057 = C38943 * C1181;
    const double C14454 = C14443 + C13638;
    const double C14451 = C14437 + C13635;
    const double C27948 = C27937 + C26463;
    const double C27945 = C27931 + C15216;
    const double C69025 = C69020 + C15213;
    const double C82048 = C82046 * be;
    const double C13624 = C81987 + (C82046 * ae) / C81958 - C82019;
    const double C20381 = C20375 + C19651;
    const double C20379 = C20373 + C19649;
    const double C20377 = C20371 + C19647;
    const double C22685 = C22681 + C21063;
    const double C22683 = C22679 + C21065;
    const double C23656 = C23654 + C21067;
    const double C33228 = C33226 + C23651;
    const double C34149 = C34147 + C23653;
    const double C36375 = C36373 + C34146;
    const double C2637 = C2631 + C2614;
    const double C2634 = C2628 + C2608;
    const double C5876 = C5870 + C5853;
    const double C5873 = C5867 + C5847;
    const double C11769 = C11766 + C11758;
    const double C2638 = C2632 + C2616;
    const double C2635 = C2629 + C2610;
    const double C5877 = C5871 + C5855;
    const double C5874 = C5868 + C5849;
    const double C11770 = C11767 + C11760;
    const double C41692 = C41686 + C41671;
    const double C41690 = C41684 + C41667;
    const double C41688 = C41682 + C41663;
    const double C44022 = C44018 + C44007;
    const double C44020 = C44016 + C44003;
    const double C44972 = C44968 + C44955;
    const double C44970 = C44966 + C44951;
    const double C51935 = C51933 + C51928;
    const double C59844 = C59842 + C59835;
    const double C46327 = C46314 + C46315;
    const double C46324 = C46305 + C46306;
    const double C51420 = C51415 + C47830;
    const double C53266 = C53255 + C47833;
    const double C81632 = C81624 + C53263;
    const double C19973 = C19960 * C1682;
    const double C26087 = C19960 * C3443;
    const double C41286 = C41273 * C1682;
    const double C72332 = C41273 * C3443;
    const double C82321 = C82319 * be;
    const double C39306 = C39300 + C39284;
    const double C39304 = C39298 + C39278;
    const double C39302 = C39296 + C39272;
    const double C43474 = C43470 + C43458;
    const double C43472 = C43468 + C43451;
    const double C45436 = C45432 + C45419;
    const double C45434 = C45430 + C45415;
    const double C48647 = C48645 + C48640;
    const double C74256 = C74254 + C74247;
    const double C82272 = C82268 + C82247;
    const double C63866 = C63853 + C63854;
    const double C63863 = C63844 + C63845;
    const double C66209 = C66204 + C64550;
    const double C67139 = C67128 + C64553;
    const double C81214 = C81206 + C67136;
    const double C35676 = C35663 * C4213;
    const double C38208 = C35663 * C5115;
    const double C59144 = C59131 * C4213;
    const double C73872 = C59131 * C5115;
    const double C82471 = C82469 * be;
    const double C54383 = C54377 + C54361;
    const double C54381 = C54375 + C54355;
    const double C54379 = C54373 + C54349;
    const double C56645 = C56641 + C56629;
    const double C56643 = C56639 + C56624;
    const double C57590 = C57586 + C57573;
    const double C57588 = C57584 + C57569;
    const double C61326 = C61324 + C61319;
    const double C71964 = C71962 + C71955;
    const double C82422 = C82418 + C82397;
    const double C45960 = C82049 * C109;
    const double C45957 = C82049 * C727;
    const double C45954 = C82049 * C1686;
    const double C45949 = C82049 * C1685;
    const double C45946 = C82049 * C728;
    const double C45943 = C82049 * C108;
    const double C46761 = C82049 * C2602;
    const double C46934 = C2818 * C82049;
    const double C46928 = C2816 * C82049;
    const double C47032 = C82049 * C1788;
    const double C47026 = C82049 * C1681;
    const double C47020 = C82049 * C785;
    const double C47014 = C82049 * C723;
    const double C47287 = C82049 * C1906;
    const double C47281 = C82049 * C837;
    const double C47529 = C82049 * C1188;
    const double C47526 = C82049 * C3452;
    const double C47523 = C82049 * C3449;
    const double C48234 = C82049 * C1187;
    const double C48231 = C82049 * C3451;
    const double C49460 = C82049 * C3547;
    const double C49454 = C82049 * C3446;
    const double C49768 = C82049 * C3633;
    const double C50082 = C82049 * C4216;
    const double C50079 = C82049 * C5118;
    const double C50392 = C82049 * C1245;
    const double C50386 = C82049 * C1183;
    const double C50698 = C82049 * C1297;
    const double C63173 = C82049 * C4217;
    const double C64637 = C82049 * C5841;
    const double C64727 = C5977 * C82049;
    const double C64721 = C5975 * C82049;
    const double C64887 = C82049 * C4307;
    const double C64881 = C82049 * C4212;
    const double C65127 = C82049 * C4416;
    const double C93 =
        (((((0 - (C81959 * C81957) / C81958) * ae) / C81958 -
           (0 * be) / C81977 + (2 * C81960) / C81958) /
              C81965 -
          ((C81959 * C82007 + 0) * be) / C81958 + C81986 - C81999) /
             C81965 +
         ((C81959 * C82034 + 0) * ae) / C81958) /
            C81965 -
        ((C81959 * (C82034 / C81965 +
                    ((C81959 * C82049 + C84193) * ae) / C81958 + C82038) +
          C84602) *
         be) /
            C81958 +
        C82049 / C81965 + ((C81959 * C82038 + C84201) * ae) / C81958 +
        2 * (C81997 / C81965 - (0 * be) / C81958);
    const double C95 =
        (C82034 / C81965 + ((C81959 * C82049 + C84193) * ae) / C81958 +
         C82038) /
            C81965 -
        ((C81959 * (C82049 / C81965 +
                    ((C81959 * C82038 + C84201) * ae) / C81958 + C82068) +
          C84592) *
         be) /
            C81958 +
        2 * (C82038 / C81965 + ((C81959 * C82067 + C45932) * ae) / C81958);
    const double C97 = (C82049 / C81965 +
                        ((C81959 * C82038 + C84201) * ae) / C81958 + C82068) /
                           C81965 -
                       ((C81959 * (C82038 / C81965 +
                                   ((C81959 * C82067 + C45932) * ae) / C81958) +
                         C84576) *
                        be) /
                           C81958 +
                       3 * (C82067 / C81965 + (0 * ae) / C81958);
    const double C6685 =
        C82034 / C81965 - ((C81959 * C82049 + C84193) * be) / C81958 + C82038;
    const double C6687 =
        C82049 / C81965 - ((C81959 * C82038 + C84201) * be) / C81958 + C82068;
    const double C38940 =
        C82034 / C81965 + ((C81959 * C82049 + C84193) * ae) / C81958 + C82038;
    const double C38942 =
        C82049 / C81965 + ((C81959 * C82038 + C84201) * ae) / C81958 + C82068;
    const double C46772 = C46766 + C45950;
    const double C46769 = C46763 + C45947;
    const double C49155 = C49152 + C47525;
    const double C50087 = C50084 + C47528;
    const double C64642 = C64639 + C50081;
    const double C7447 = C7437 + C6699;
    const double C10068 = C10058 + C8111;
    const double C39688 = C39678 + C38954;
    const double C55067 = C55057 + C40349;
    const double C14460 = C14454 + C13638;
    const double C14457 = C14451 + C13635;
    const double C27954 = C27948 + C26463;
    const double C27951 = C27945 + C15216;
    const double C69028 = C69025 + C15213;
    const double C82050 = C82048 / C81958;
    const double C14441 = C13624 * C1681;
    const double C14435 = C13624 * C723;
    const double C27935 = C13624 * C4212;
    const double C27929 = C13624 * C1183;
    const double C69018 = C13624 * C3446;
    const double C20387 = C20381 + C20366;
    const double C20385 = C20379 + C20362;
    const double C20383 = C20377 + C20358;
    const double C22689 = C22685 + C22676;
    const double C22687 = C22683 + C22672;
    const double C23658 = C23656 + C23645;
    const double C33230 = C33228 + C33223;
    const double C34151 = C34149 + C34140;
    const double C36377 = C36375 + C36368;
    const double C46333 = C46327 + C46315;
    const double C46330 = C46324 + C46306;
    const double C51423 = C51420 + C47830;
    const double C53269 = C53266 + C47833;
    const double C81635 = C81632 + C53263;
    const double C19985 = C19973 + C19974;
    const double C26097 = C26087 + C21343;
    const double C41298 = C41286 + C41287;
    const double C72342 = C72332 + C42639;
    const double C82322 = C82321 / C81958;
    const double C46056 = C82272 * C110;
    const double C46050 = C82272 * C104;
    const double C46044 = C82272 * C109;
    const double C46038 = C82272 * C103;
    const double C46322 = C82272 * C176;
    const double C46312 = C82272 * C175;
    const double C46303 = C82272 * C174;
    const double C46299 = C82272 * C173;
    const double C46421 = C283 * C82272;
    const double C46415 = C281 * C82272;
    const double C46581 = C82272 * C254;
    const double C46575 = C82272 * C253;
    const double C47132 = C82272 * C785;
    const double C47129 = C82272 * C784;
    const double C47126 = C82272 * C783;
    const double C47834 = C82272 * C1245;
    const double C47831 = C82272 * C1244;
    const double C47828 = C82272 * C1243;
    const double C51107 = C82272 * C1187;
    const double C51101 = C82272 * C1182;
    const double C51722 = C82272 * C1296;
    const double C52346 = C82272 * C3547;
    const double C52343 = C82272 * C3545;
    const double C52947 = C82272 * C1188;
    const double C52941 = C82272 * C1183;
    const double C53264 = C82272 * C4307;
    const double C53261 = C82272 * C4308;
    const double C53568 = C82272 * C1297;
    const double C80886 = C82272 * C5201;
    const double C81376 = C82272 * C4216;
    const double C81370 = C82272 * C4212;
    const double C81542 = C19120 * C82272;
    const double C81536 = C19118 * C82272;
    const double C81630 = C82272 * C5954;
    const double C81862 = C82272 * C4416;
    const double C15926 =
        (((((0 - (C82091 * C82230) / C81958) * ae) / C81958 -
           (0 * be) / C81977 + (2 * C82231) / C81958) /
              C81965 -
          ((C82091 * C82266 + 0) * be) / C81958 + C82240 - C82254) /
             C81965 +
         ((C82091 * C82274 + 0) * ae) / C81958) /
            C81965 -
        ((C82091 * (C82274 / C81965 +
                    ((C82091 * C82272 + C84300) * ae) / C81958 + C82269) +
          C84606) *
         be) /
            C81958 +
        C82272 / C81965 + ((C82091 * C82269 + C84307) * ae) / C81958 +
        2 * (C82247 / C81965 - (0 * be) / C81958);
    const double C15927 =
        (C82274 / C81965 + ((C82091 * C82272 + C84300) * ae) / C81958 +
         C82269) /
            C81965 -
        ((C82091 * (C82272 / C81965 +
                    ((C82091 * C82269 + C84307) * ae) / C81958 + 2 * C82280) +
          C84599) *
         be) /
            C81958 +
        2 * (C82269 / C81965 + ((C82091 * C82280 + C45935) * ae) / C81958);
    const double C15928 =
        (C82272 / C81965 + ((C82091 * C82269 + C84307) * ae) / C81958 +
         2 * C82280) /
            C81965 -
        ((C82091 *
              (C82269 / C81965 + ((C82091 * C82280 + C45935) * ae) / C81958) +
          C84586) *
         be) /
            C81958 +
        3 * (C82280 / C81965 + (0 * ae) / C81958);
    const double C19726 =
        C82274 / C81965 - ((C82091 * C82272 + C84300) * be) / C81958 + C82269;
    const double C19727 =
        C82272 / C81965 - ((C82091 * C82269 + C84307) * be) / C81958 + C82327;
    const double C41045 =
        C82274 / C81965 + ((C82091 * C82272 + C84300) * ae) / C81958 + C82269;
    const double C41046 =
        C82272 / C81965 + ((C82091 * C82269 + C84307) * ae) / C81958 + C82327;
    const double C63872 = C63866 + C63854;
    const double C63869 = C63863 + C63845;
    const double C66212 = C66209 + C64550;
    const double C67142 = C67139 + C64553;
    const double C81217 = C81214 + C67136;
    const double C35688 = C35676 + C35677;
    const double C38218 = C38208 + C36298;
    const double C59156 = C59144 + C59145;
    const double C73882 = C73872 + C59765;
    const double C82472 = C82471 / C81958;
    const double C63343 = C82422 * C110;
    const double C63337 = C82422 * C104;
    const double C63331 = C82422 * C109;
    const double C63325 = C82422 * C103;
    const double C63589 = C82422 * C175;
    const double C63583 = C82422 * C174;
    const double C63755 = C204 * C82422;
    const double C63749 = C202 * C82422;
    const double C63861 = C82422 * C255;
    const double C63851 = C82422 * C254;
    const double C63842 = C82422 * C253;
    const double C63838 = C82422 * C252;
    const double C64554 = C82422 * C837;
    const double C64551 = C82422 * C836;
    const double C64548 = C82422 * C835;
    const double C65292 = C82422 * C1297;
    const double C65289 = C82422 * C1296;
    const double C65286 = C82422 * C1295;
    const double C65593 = C82422 * C727;
    const double C65587 = C82422 * C722;
    const double C65899 = C82422 * C784;
    const double C66517 = C82422 * C728;
    const double C66511 = C82422 * C723;
    const double C66823 = C82422 * C785;
    const double C67137 = C82422 * C1906;
    const double C67134 = C82422 * C1907;
    const double C68034 = C82422 * C3633;
    const double C68031 = C82422 * C3632;
    const double C80724 = C82422 * C1685;
    const double C80718 = C82422 * C1681;
    const double C80961 = C82422 * C1788;
    const double C81050 = C16502 * C82422;
    const double C81044 = C16500 * C82422;
    const double C81212 = C82422 * C2795;
    const double C81947 = C82422 * C3630;
    const double C31004 =
        (((((0 - (C82094 * C82380) / C81958) * ae) / C81958 -
           (0 * be) / C81977 + (2 * C82381) / C81958) /
              C81965 -
          ((C82094 * C82416 + 0) * be) / C81958 + C82390 - C82404) /
             C81965 +
         ((C82094 * C82424 + 0) * ae) / C81958) /
            C81965 -
        ((C82094 * (C82424 / C81965 +
                    ((C82094 * C82422 + C84340) * ae) / C81958 + C82419) +
          C84607) *
         be) /
            C81958 +
        C82422 / C81965 + ((C82094 * C82419 + C84347) * ae) / C81958 +
        2 * (C82397 / C81965 - (0 * be) / C81958);
    const double C31005 =
        (C82424 / C81965 + ((C82094 * C82422 + C84340) * ae) / C81958 +
         C82419) /
            C81965 -
        ((C82094 * (C82422 / C81965 +
                    ((C82094 * C82419 + C84347) * ae) / C81958 + 2 * C82430) +
          C84601) *
         be) /
            C81958 +
        2 * (C82419 / C81965 + ((C82094 * C82430 + C63169) * ae) / C81958);
    const double C31006 =
        (C82422 / C81965 + ((C82094 * C82419 + C84347) * ae) / C81958 +
         2 * C82430) /
            C81965 -
        ((C82094 *
              (C82419 / C81965 + ((C82094 * C82430 + C63169) * ae) / C81958) +
          C84589) *
         be) /
            C81958 +
        3 * (C82430 / C81965 + (0 * ae) / C81958);
    const double C35209 =
        C82424 / C81965 - ((C82094 * C82422 + C84340) * be) / C81958 + C82419;
    const double C35210 =
        C82422 / C81965 - ((C82094 * C82419 + C84347) * be) / C81958 + C82477;
    const double C58685 =
        C82424 / C81965 + ((C82094 * C82422 + C84340) * ae) / C81958 + C82419;
    const double C58686 =
        C82422 / C81965 + ((C82094 * C82419 + C84347) * ae) / C81958 + C82477;
    const double C47047 = C47032 + C47033;
    const double C47044 = C47026 + C47027;
    const double C47041 = C47020 + C47021;
    const double C47038 = C47014 + C47015;
    const double C47296 = C47287 + C47288;
    const double C47293 = C47281 + C47282;
    const double C49469 = C49460 + C49461;
    const double C49466 = C49454 + C49455;
    const double C49774 = C49768 + C49769;
    const double C50401 = C50392 + C50393;
    const double C50398 = C50386 + C50387;
    const double C50704 = C50698 + C50699;
    const double C64896 = C64887 + C64888;
    const double C64893 = C64881 + C64882;
    const double C65133 = C65127 + C65128;
    const double C130 = C93 * C109;
    const double C121 = C93 * C108;
    const double C739 = C93 * C728;
    const double C1199 = C93 * C1188;
    const double C129 = C95 * C110;
    const double C122 = C95 * C109;
    const double C738 = C95 * C727;
    const double C1198 = C95 * C1187;
    const double C128 = C97 * C111;
    const double C123 = C97 * C110;
    const double C737 = C97 * C726;
    const double C1197 = C97 * C1186;
    const double C6708 = C6685 * C109;
    const double C6704 = C6685 * C727;
    const double C6697 = C6685 * C728;
    const double C6693 = C6685 * C108;
    const double C7444 = C6685 * C1685;
    const double C7589 = C2816 * C6685;
    const double C7671 = C6685 * C785;
    const double C7663 = C6685 * C723;
    const double C7893 = C6685 * C837;
    const double C8113 = C6685 * C1188;
    const double C8109 = C6685 * C3452;
    const double C8732 = C6685 * C1187;
    const double C10065 = C6685 * C4216;
    const double C10144 = C5975 * C6685;
    const double C10292 = C6685 * C1245;
    const double C10284 = C6685 * C1183;
    const double C10510 = C6685 * C1297;
    const double C6707 = C6687 * C110;
    const double C6703 = C6687 * C726;
    const double C6698 = C6687 * C727;
    const double C6694 = C6687 * C109;
    const double C7443 = C6687 * C1686;
    const double C7591 = C1931 * C6687;
    const double C7673 = C6687 * C784;
    const double C7665 = C6687 * C722;
    const double C7895 = C6687 * C836;
    const double C8112 = C6687 * C1187;
    const double C8108 = C6687 * C3451;
    const double C8731 = C6687 * C1186;
    const double C10064 = C6687 * C4217;
    const double C10146 = C4332 * C6687;
    const double C10294 = C6687 * C1244;
    const double C10286 = C6687 * C1182;
    const double C10512 = C6687 * C1296;
    const double C38963 = C38940 * C109;
    const double C38959 = C38940 * C727;
    const double C38952 = C38940 * C728;
    const double C38948 = C38940 * C108;
    const double C39685 = C38940 * C1685;
    const double C39830 = C2816 * C38940;
    const double C39912 = C38940 * C785;
    const double C39904 = C38940 * C723;
    const double C40134 = C38940 * C837;
    const double C40351 = C38940 * C1188;
    const double C40347 = C38940 * C3452;
    const double C53746 = C38940 * C1187;
    const double C55064 = C38940 * C4216;
    const double C55143 = C5975 * C38940;
    const double C55291 = C38940 * C1245;
    const double C55283 = C38940 * C1183;
    const double C55509 = C38940 * C1297;
    const double C38962 = C38942 * C110;
    const double C38958 = C38942 * C726;
    const double C38953 = C38942 * C727;
    const double C38949 = C38942 * C109;
    const double C39684 = C38942 * C1686;
    const double C39832 = C1931 * C38942;
    const double C39914 = C38942 * C784;
    const double C39906 = C38942 * C722;
    const double C40136 = C38942 * C836;
    const double C40350 = C38942 * C1187;
    const double C40346 = C38942 * C3451;
    const double C53745 = C38942 * C1186;
    const double C55063 = C38942 * C4217;
    const double C55145 = C4332 * C38942;
    const double C55293 = C38942 * C1244;
    const double C55285 = C38942 * C1182;
    const double C55511 = C38942 * C1296;
    const double C46778 = C46772 + C46756;
    const double C46775 = C46769 + C46750;
    const double C49158 = C49155 + C49148;
    const double C50090 = C50087 + C50074;
    const double C64645 = C64642 + C64632;
    const double C7451 = C7447 + C6699;
    const double C10072 = C10068 + C8111;
    const double C39692 = C39688 + C38954;
    const double C55071 = C55067 + C40349;
    const double C14466 = C14460 + C14444;
    const double C14463 = C14457 + C14438;
    const double C27960 = C27954 + C27938;
    const double C27957 = C27951 + C27932;
    const double C69031 = C69028 + C69021;
    const double C82051 = C81987 - C82050;
    const double C14453 = C14441 + C13637;
    const double C14450 = C14435 + C13634;
    const double C27947 = C27935 + C26462;
    const double C27944 = C27929 + C15217;
    const double C69024 = C69018 + C15214;
    const double C46339 = C46333 + C46316;
    const double C46336 = C46330 + C46307;
    const double C51426 = C51423 + C51416;
    const double C53272 = C53269 + C53256;
    const double C81638 = C81635 + C81625;
    const double C19989 = C19985 + C19974;
    const double C26101 = C26097 + C21343;
    const double C41302 = C41298 + C41287;
    const double C72346 = C72342 + C42639;
    const double C82323 = C82306 - C82322;
    const double C46071 = C46056 + C46057;
    const double C46068 = C46050 + C46051;
    const double C46065 = C46044 + C46045;
    const double C46062 = C46038 + C46039;
    const double C46590 = C46581 + C46582;
    const double C46587 = C46575 + C46576;
    const double C51116 = C51107 + C51108;
    const double C51113 = C51101 + C51102;
    const double C51728 = C51722 + C51723;
    const double C52956 = C52947 + C52948;
    const double C52953 = C52941 + C52942;
    const double C53574 = C53568 + C53569;
    const double C81385 = C81376 + C81377;
    const double C81382 = C81370 + C81371;
    const double C81868 = C81862 + C81863;
    const double C16084 = C15926 * C174;
    const double C16075 = C15926 * C173;
    const double C16555 = C15926 * C785;
    const double C17002 = C15926 * C1245;
    const double C16083 = C15927 * C784;
    const double C16076 = C15927 * C785;
    const double C16554 = C15927 * C1788;
    const double C17001 = C15927 * C3547;
    const double C16082 = C15928 * C1789;
    const double C16077 = C15928 * C1788;
    const double C16553 = C15928 * C2715;
    const double C17000 = C15928 * C3546;
    const double C19739 = C19726 * C109;
    const double C19731 = C19726 * C103;
    const double C19982 = C19726 * C175;
    const double C19968 = C19726 * C174;
    const double C19963 = C19726 * C173;
    const double C20061 = C281 * C19726;
    const double C20204 = C19726 * C253;
    const double C20708 = C19726 * C785;
    const double C20704 = C19726 * C784;
    const double C21345 = C19726 * C1245;
    const double C21341 = C19726 * C1244;
    const double C25423 = C19726 * C3547;
    const double C25861 = C19726 * C1188;
    const double C25853 = C19726 * C1183;
    const double C26009 = C19118 * C19726;
    const double C26094 = C19726 * C4307;
    const double C26305 = C19726 * C1297;
    const double C19741 = C19727 * C727;
    const double C19733 = C19727 * C722;
    const double C19981 = C19727 * C783;
    const double C19971 = C19727 * C784;
    const double C19964 = C19727 * C785;
    const double C20063 = C1931 * C19727;
    const double C20206 = C19727 * C836;
    const double C20707 = C19727 * C1788;
    const double C20703 = C19727 * C1789;
    const double C21344 = C19727 * C3547;
    const double C21340 = C19727 * C3545;
    const double C25422 = C19727 * C3546;
    const double C25863 = C19727 * C3452;
    const double C25855 = C19727 * C3446;
    const double C26011 = C18277 * C19727;
    const double C26093 = C19727 * C5201;
    const double C26307 = C19727 * C3633;
    const double C41058 = C41045 * C109;
    const double C41050 = C41045 * C103;
    const double C41295 = C41045 * C175;
    const double C41281 = C41045 * C174;
    const double C41276 = C41045 * C173;
    const double C41374 = C281 * C41045;
    const double C41514 = C41045 * C253;
    const double C42013 = C41045 * C785;
    const double C42009 = C41045 * C784;
    const double C42641 = C41045 * C1245;
    const double C42637 = C41045 * C1244;
    const double C71671 = C41045 * C3547;
    const double C72106 = C41045 * C1188;
    const double C72098 = C41045 * C1183;
    const double C72254 = C19118 * C41045;
    const double C72339 = C41045 * C4307;
    const double C72550 = C41045 * C1297;
    const double C41060 = C41046 * C727;
    const double C41052 = C41046 * C722;
    const double C41294 = C41046 * C783;
    const double C41284 = C41046 * C784;
    const double C41277 = C41046 * C785;
    const double C41376 = C1931 * C41046;
    const double C41516 = C41046 * C836;
    const double C42012 = C41046 * C1788;
    const double C42008 = C41046 * C1789;
    const double C42640 = C41046 * C3547;
    const double C42636 = C41046 * C3545;
    const double C71670 = C41046 * C3546;
    const double C72108 = C41046 * C3452;
    const double C72100 = C41046 * C3446;
    const double C72256 = C18277 * C41046;
    const double C72338 = C41046 * C5201;
    const double C72552 = C41046 * C3633;
    const double C63878 = C63872 + C63855;
    const double C63875 = C63869 + C63846;
    const double C66215 = C66212 + C66205;
    const double C67145 = C67142 + C67129;
    const double C81220 = C81217 + C81207;
    const double C35692 = C35688 + C35677;
    const double C38222 = C38218 + C36298;
    const double C59160 = C59156 + C59145;
    const double C73886 = C73882 + C59765;
    const double C82473 = C82456 - C82472;
    const double C63358 = C63343 + C63344;
    const double C63355 = C63337 + C63338;
    const double C63352 = C63331 + C63332;
    const double C63349 = C63325 + C63326;
    const double C63598 = C63589 + C63590;
    const double C63595 = C63583 + C63584;
    const double C65602 = C65593 + C65594;
    const double C65599 = C65587 + C65588;
    const double C65905 = C65899 + C65900;
    const double C66526 = C66517 + C66518;
    const double C66523 = C66511 + C66512;
    const double C66829 = C66823 + C66824;
    const double C80733 = C80724 + C80725;
    const double C80730 = C80718 + C80719;
    const double C80967 = C80961 + C80962;
    const double C31294 = C31004 * C253;
    const double C31285 = C31004 * C252;
    const double C31693 = C31004 * C837;
    const double C32167 = C31004 * C1297;
    const double C31293 = C31005 * C1296;
    const double C31286 = C31005 * C1297;
    const double C31692 = C31005 * C3633;
    const double C32166 = C31005 * C4416;
    const double C31292 = C31006 * C4417;
    const double C31287 = C31006 * C4416;
    const double C31691 = C31006 * C5281;
    const double C32165 = C31006 * C6058;
    const double C35222 = C35209 * C109;
    const double C35214 = C35209 * C103;
    const double C35441 = C35209 * C174;
    const double C35585 = C202 * C35209;
    const double C35685 = C35209 * C254;
    const double C35671 = C35209 * C253;
    const double C35666 = C35209 * C252;
    const double C36300 = C35209 * C837;
    const double C36296 = C35209 * C836;
    const double C36950 = C35209 * C1297;
    const double C36946 = C35209 * C1296;
    const double C37761 = C35209 * C728;
    const double C37753 = C35209 * C723;
    const double C37983 = C35209 * C785;
    const double C38061 = C16500 * C35209;
    const double C38215 = C35209 * C1906;
    const double C38867 = C35209 * C3633;
    const double C35224 = C35210 * C1187;
    const double C35216 = C35210 * C1182;
    const double C35443 = C35210 * C1244;
    const double C35587 = C4332 * C35210;
    const double C35684 = C35210 * C1295;
    const double C35674 = C35210 * C1296;
    const double C35667 = C35210 * C1297;
    const double C36299 = C35210 * C3633;
    const double C36295 = C35210 * C3632;
    const double C36949 = C35210 * C4416;
    const double C36945 = C35210 * C4417;
    const double C37763 = C35210 * C3452;
    const double C37755 = C35210 * C3446;
    const double C37985 = C35210 * C3547;
    const double C38063 = C18277 * C35210;
    const double C38214 = C35210 * C3630;
    const double C38866 = C35210 * C5281;
    const double C58698 = C58685 * C109;
    const double C58690 = C58685 * C103;
    const double C58912 = C58685 * C174;
    const double C59056 = C202 * C58685;
    const double C59153 = C58685 * C254;
    const double C59139 = C58685 * C253;
    const double C59134 = C58685 * C252;
    const double C59767 = C58685 * C837;
    const double C59763 = C58685 * C836;
    const double C60417 = C58685 * C1297;
    const double C60413 = C58685 * C1296;
    const double C73434 = C58685 * C728;
    const double C73426 = C58685 * C723;
    const double C73650 = C58685 * C785;
    const double C73728 = C16500 * C58685;
    const double C73879 = C58685 * C1906;
    const double C74531 = C58685 * C3633;
    const double C58700 = C58686 * C1187;
    const double C58692 = C58686 * C1182;
    const double C58914 = C58686 * C1244;
    const double C59058 = C4332 * C58686;
    const double C59152 = C58686 * C1295;
    const double C59142 = C58686 * C1296;
    const double C59135 = C58686 * C1297;
    const double C59766 = C58686 * C3633;
    const double C59762 = C58686 * C3632;
    const double C60416 = C58686 * C4416;
    const double C60412 = C58686 * C4417;
    const double C73436 = C58686 * C3452;
    const double C73428 = C58686 * C3446;
    const double C73652 = C58686 * C3547;
    const double C73730 = C18277 * C58686;
    const double C73878 = C58686 * C3630;
    const double C74530 = C58686 * C5281;
    const double C7683 = C7671 + C7672;
    const double C7679 = C7663 + C7664;
    const double C7901 = C7893 + C7894;
    const double C10304 = C10292 + C10293;
    const double C10300 = C10284 + C10285;
    const double C10518 = C10510 + C10511;
    const double C7684 = C7673 + C7674;
    const double C7680 = C7665 + C7666;
    const double C7902 = C7895 + C7896;
    const double C10305 = C10294 + C10295;
    const double C10301 = C10286 + C10287;
    const double C10519 = C10512 + C10513;
    const double C39924 = C39912 + C39913;
    const double C39920 = C39904 + C39905;
    const double C40142 = C40134 + C40135;
    const double C55303 = C55291 + C55292;
    const double C55299 = C55283 + C55284;
    const double C55517 = C55509 + C55510;
    const double C39925 = C39914 + C39915;
    const double C39921 = C39906 + C39907;
    const double C40143 = C40136 + C40137;
    const double C55304 = C55293 + C55294;
    const double C55300 = C55285 + C55286;
    const double C55518 = C55511 + C55512;
    const double C7455 = C7451 + C7438;
    const double C10076 = C10072 + C10059;
    const double C39696 = C39692 + C39679;
    const double C55075 = C55071 + C55058;
    const double C82052 = C82051 - C82019;
    const double C14459 = C14453 + C13637;
    const double C14456 = C14450 + C13634;
    const double C27953 = C27947 + C26462;
    const double C27950 = C27944 + C15217;
    const double C69027 = C69024 + C15214;
    const double C19993 = C19989 + C19975;
    const double C26105 = C26101 + C26088;
    const double C41306 = C41302 + C41288;
    const double C72350 = C72346 + C72333;
    const double C82324 = C82323 - C82297;
    const double C19751 = C19739 + C19740;
    const double C19747 = C19731 + C19732;
    const double C20212 = C20204 + C20205;
    const double C25873 = C25861 + C25862;
    const double C25869 = C25853 + C25854;
    const double C26313 = C26305 + C26306;
    const double C19752 = C19741 + C19742;
    const double C19748 = C19733 + C19734;
    const double C20213 = C20206 + C20207;
    const double C25874 = C25863 + C25864;
    const double C25870 = C25855 + C25856;
    const double C26314 = C26307 + C26308;
    const double C41070 = C41058 + C41059;
    const double C41066 = C41050 + C41051;
    const double C41522 = C41514 + C41515;
    const double C72118 = C72106 + C72107;
    const double C72114 = C72098 + C72099;
    const double C72558 = C72550 + C72551;
    const double C41071 = C41060 + C41061;
    const double C41067 = C41052 + C41053;
    const double C41523 = C41516 + C41517;
    const double C72119 = C72108 + C72109;
    const double C72115 = C72100 + C72101;
    const double C72559 = C72552 + C72553;
    const double C35696 = C35692 + C35678;
    const double C38226 = C38222 + C38209;
    const double C59164 = C59160 + C59146;
    const double C73890 = C73886 + C73873;
    const double C82474 = C82473 - C82447;
    const double C35234 = C35222 + C35223;
    const double C35230 = C35214 + C35215;
    const double C35449 = C35441 + C35442;
    const double C37773 = C37761 + C37762;
    const double C37769 = C37753 + C37754;
    const double C37991 = C37983 + C37984;
    const double C35235 = C35224 + C35225;
    const double C35231 = C35216 + C35217;
    const double C35450 = C35443 + C35444;
    const double C37774 = C37763 + C37764;
    const double C37770 = C37755 + C37756;
    const double C37992 = C37985 + C37986;
    const double C58710 = C58698 + C58699;
    const double C58706 = C58690 + C58691;
    const double C58920 = C58912 + C58913;
    const double C73446 = C73434 + C73435;
    const double C73442 = C73426 + C73427;
    const double C73658 = C73650 + C73651;
    const double C58711 = C58700 + C58701;
    const double C58707 = C58692 + C58693;
    const double C58921 = C58914 + C58915;
    const double C73447 = C73436 + C73437;
    const double C73443 = C73428 + C73429;
    const double C73659 = C73652 + C73653;
    const double C46753 = C82052 * C1681;
    const double C46747 = C82052 * C723;
    const double C49145 = C82052 * C3446;
    const double C50071 = C82052 * C1183;
    const double C64629 = C82052 * C4212;
    const double C92 =
        (((ae * -2 * C81957) / C81974 -
          (((C81959 * C81975) / C81964 + 2 * C82007) * be) / C81958 -
          C81978 / C81964) /
             C81965 +
         ((C81959 * C82033 + 2 * C82034) * ae) / C81958) /
            C81965 -
        ((C81959 * (C82033 / C81965 +
                    ((C81959 * C82052 + 2 * C82049) * ae) / C81958 + C82045) +
          2 * (C82034 / C81965 + ((C81959 * C82049 + C84193) * ae) / C81958 +
               C82038)) *
         be) /
            C81958 +
        C82052 / C81965 + ((C81959 * C82045 + 2 * C82038) * ae) / C81958 +
        (-2 * C82010) / (C81958 * 4 * C81964);
    const double C94 =
        (C82033 / C81965 + ((C81959 * C82052 + 2 * C82049) * ae) / C81958 +
         C82045) /
            C81965 -
        ((C81959 * (C82052 / C81965 +
                    ((C81959 * C82045 + 2 * C82038) * ae) / C81958 +
                    (-2 * C82010) / C82065) +
          2 * (C82049 / C81965 + ((C81959 * C82038 + C84201) * ae) / C81958 +
               C82068)) *
         be) /
            C81958 +
        2 * (C82045 / C81965 + ((C82068 - C82017 / C82065) * ae) / C81958);
    const double C96 =
        (C82052 / C81965 + ((C81959 * C82045 + 2 * C82038) * ae) / C81958 +
         (-2 * C82010) / C82065) /
            C81965 -
        ((C81959 *
              (C82045 / C81965 + ((C82068 - C82017 / C82065) * ae) / C81958) +
          2 * (C82038 / C81965 + ((C81959 * C82067 + C45932) * ae) / C81958)) *
         be) /
            C81958 +
        (-3 * C82010) / (C81958 * 4 * C81974);
    const double C6684 = C82033 / C81965 -
                         ((C81959 * C82052 + 2 * C82049) * be) / C81958 +
                         C82045;
    const double C6686 = C82052 / C81965 -
                         ((C81959 * C82045 + 2 * C82038) * be) / C81958 +
                         (-2 * C82010) / C82065;
    const double C38939 = C82033 / C81965 +
                          ((C81959 * C82052 + 2 * C82049) * ae) / C81958 +
                          C82045;
    const double C38941 = C82052 / C81965 +
                          ((C81959 * C82045 + 2 * C82038) * ae) / C81958 +
                          (-2 * C82010) / C82065;
    const double C14465 = C14459 + C14442;
    const double C14462 = C14456 + C14436;
    const double C27959 = C27953 + C27936;
    const double C27956 = C27950 + C27930;
    const double C69030 = C69027 + C69019;
    const double C46311 = C82324 * C104;
    const double C46302 = C82324 * C103;
    const double C51413 = C82324 * C1182;
    const double C53253 = C82324 * C1183;
    const double C81622 = C82324 * C4212;
    const double C16067 =
        (((ae * -2 * C82230) / C81974 -
          (((C82091 * C82300) / C81964 + 2 * C82266) * be) / C81958 -
          C82301 / C81964) /
             C81965 +
         ((C82091 * C82320 + 2 * C82274) * ae) / C81958) /
            C81965 -
        ((C82091 * (C82320 / C81965 +
                    ((C82091 * C82324 + 2 * C82272) * ae) / C81958 + C82317) +
          2 * (C82274 / C81965 + ((C82091 * C82272 + C84300) * ae) / C81958 +
               C82269)) *
         be) /
            C81958 +
        C82324 / C81965 + ((C82091 * C82317 + 2 * C82269) * ae) / C81958 +
        (-2 * C82128) / C82065;
    const double C16068 =
        (C82320 / C81965 + ((C82091 * C82324 + 2 * C82272) * ae) / C81958 +
         C82317) /
            C81965 -
        ((C82091 * (C82324 / C81965 +
                    ((C82091 * C82317 + 2 * C82269) * ae) / C81958 +
                    (-2 * C82128) / C82065) +
          2 * (C82272 / C81965 + ((C82091 * C82269 + C84307) * ae) / C81958 +
               C82327)) *
         be) /
            C81958 +
        2 * (C82317 / C81965 + ((C82327 - C82131 / C82065) * ae) / C81958);
    const double C16069 =
        (C82324 / C81965 + ((C82091 * C82317 + 2 * C82269) * ae) / C81958 +
         (-2 * C82128) / C82065) /
            C81965 -
        ((C82091 *
              (C82317 / C81965 + ((C82327 - C82131 / C82065) * ae) / C81958) +
          2 * (C82269 / C81965 + ((C82091 * C82280 + C45935) * ae) / C81958)) *
         be) /
            C81958 +
        (-3 * C82128) / (C81958 * 4 * C81974);
    const double C19958 = C82320 / C81965 -
                          ((C82091 * C82324 + 2 * C82272) * be) / C81958 +
                          C82317;
    const double C19959 = C82324 / C81965 -
                          ((C82091 * C82317 + 2 * C82269) * be) / C81958 +
                          (-2 * C82128) / C82065;
    const double C41271 = C82320 / C81965 +
                          ((C82091 * C82324 + 2 * C82272) * ae) / C81958 +
                          C82317;
    const double C41272 = C82324 / C81965 +
                          ((C82091 * C82317 + 2 * C82269) * ae) / C81958 +
                          (-2 * C82128) / C82065;
    const double C63850 = C82474 * C104;
    const double C63841 = C82474 * C103;
    const double C66202 = C82474 * C722;
    const double C67126 = C82474 * C723;
    const double C81204 = C82474 * C1681;
    const double C31277 =
        (((ae * -2 * C82380) / C81974 -
          (((C82094 * C82450) / C81964 + 2 * C82416) * be) / C81958 -
          C82451 / C81964) /
             C81965 +
         ((C82094 * C82470 + 2 * C82424) * ae) / C81958) /
            C81965 -
        ((C82094 * (C82470 / C81965 +
                    ((C82094 * C82474 + 2 * C82422) * ae) / C81958 + C82467) +
          2 * (C82424 / C81965 + ((C82094 * C82422 + C84340) * ae) / C81958 +
               C82419)) *
         be) /
            C81958 +
        C82474 / C81965 + ((C82094 * C82467 + 2 * C82419) * ae) / C81958 +
        (-2 * C82154) / C82065;
    const double C31278 =
        (C82470 / C81965 + ((C82094 * C82474 + 2 * C82422) * ae) / C81958 +
         C82467) /
            C81965 -
        ((C82094 * (C82474 / C81965 +
                    ((C82094 * C82467 + 2 * C82419) * ae) / C81958 +
                    (-2 * C82154) / C82065) +
          2 * (C82422 / C81965 + ((C82094 * C82419 + C84347) * ae) / C81958 +
               C82477)) *
         be) /
            C81958 +
        2 * (C82467 / C81965 + ((C82477 - C82157 / C82065) * ae) / C81958);
    const double C31279 =
        (C82474 / C81965 + ((C82094 * C82467 + 2 * C82419) * ae) / C81958 +
         (-2 * C82154) / C82065) /
            C81965 -
        ((C82094 *
              (C82467 / C81965 + ((C82477 - C82157 / C82065) * ae) / C81958) +
          2 * (C82419 / C81965 + ((C82094 * C82430 + C63169) * ae) / C81958)) *
         be) /
            C81958 +
        (-3 * C82154) / (C81958 * 4 * C81974);
    const double C35661 = C82470 / C81965 -
                          ((C82094 * C82474 + 2 * C82422) * be) / C81958 +
                          C82467;
    const double C35662 = C82474 / C81965 -
                          ((C82094 * C82467 + 2 * C82419) * be) / C81958 +
                          (-2 * C82154) / C82065;
    const double C59129 = C82470 / C81965 +
                          ((C82094 * C82474 + 2 * C82422) * ae) / C81958 +
                          C82467;
    const double C59130 = C82474 / C81965 +
                          ((C82094 * C82467 + 2 * C82419) * ae) / C81958 +
                          (-2 * C82154) / C82065;
    const double C46765 = C46753 + C45949;
    const double C46762 = C46747 + C45946;
    const double C49151 = C49145 + C47526;
    const double C50083 = C50071 + C47529;
    const double C64638 = C64629 + C50082;
    const double C7433 = C6684 * C723;
    const double C10054 = C6684 * C1183;
    const double C7435 = C6686 * C722;
    const double C10056 = C6686 * C1182;
    const double C39674 = C38939 * C723;
    const double C55053 = C38939 * C1183;
    const double C39676 = C38941 * C722;
    const double C55055 = C38941 * C1182;
    const double C46326 = C46311 + C46312;
    const double C46323 = C46302 + C46303;
    const double C51419 = C51413 + C47831;
    const double C53265 = C53253 + C47834;
    const double C81631 = C81622 + C53264;
    const double C19967 = C19958 * C103;
    const double C26083 = C19958 * C1183;
    const double C19970 = C19959 * C722;
    const double C26085 = C19959 * C3446;
    const double C41280 = C41271 * C103;
    const double C72328 = C41271 * C1183;
    const double C41283 = C41272 * C722;
    const double C72330 = C41272 * C3446;
    const double C63865 = C63850 + C63851;
    const double C63862 = C63841 + C63842;
    const double C66208 = C66202 + C64551;
    const double C67138 = C67126 + C64554;
    const double C81213 = C81204 + C67137;
    const double C35670 = C35661 * C103;
    const double C38204 = C35661 * C723;
    const double C35673 = C35662 * C1182;
    const double C38206 = C35662 * C3446;
    const double C59138 = C59129 * C103;
    const double C73868 = C59129 * C723;
    const double C59141 = C59130 * C1182;
    const double C73870 = C59130 * C3446;
    const double C46771 = C46765 + C45949;
    const double C46768 = C46762 + C45946;
    const double C49154 = C49151 + C47526;
    const double C50086 = C50083 + C47529;
    const double C64641 = C64638 + C50082;
    const double C7445 = C7433 + C6697;
    const double C10066 = C10054 + C8113;
    const double C7446 = C7435 + C6698;
    const double C10067 = C10056 + C8112;
    const double C39686 = C39674 + C38952;
    const double C55065 = C55053 + C40351;
    const double C39687 = C39676 + C38953;
    const double C55066 = C55055 + C40350;
    const double C46332 = C46326 + C46312;
    const double C46329 = C46323 + C46303;
    const double C51422 = C51419 + C47831;
    const double C53268 = C53265 + C47834;
    const double C81634 = C81631 + C53264;
    const double C19983 = C19967 + C19968;
    const double C26095 = C26083 + C21345;
    const double C19984 = C19970 + C19971;
    const double C26096 = C26085 + C21344;
    const double C41296 = C41280 + C41281;
    const double C72340 = C72328 + C42641;
    const double C41297 = C41283 + C41284;
    const double C72341 = C72330 + C42640;
    const double C63871 = C63865 + C63851;
    const double C63868 = C63862 + C63842;
    const double C66211 = C66208 + C64551;
    const double C67141 = C67138 + C64554;
    const double C81216 = C81213 + C67137;
    const double C35686 = C35670 + C35671;
    const double C38216 = C38204 + C36300;
    const double C35687 = C35673 + C35674;
    const double C38217 = C38206 + C36299;
    const double C59154 = C59138 + C59139;
    const double C73880 = C73868 + C59767;
    const double C59155 = C59141 + C59142;
    const double C73881 = C73870 + C59766;
    const double C46777 = C46771 + C46754;
    const double C46774 = C46768 + C46748;
    const double C49157 = C49154 + C49146;
    const double C50089 = C50086 + C50072;
    const double C64644 = C64641 + C64630;
    const double C7449 = C7445 + C6697;
    const double C10070 = C10066 + C8113;
    const double C7450 = C7446 + C6698;
    const double C10071 = C10067 + C8112;
    const double C39690 = C39686 + C38952;
    const double C55069 = C55065 + C40351;
    const double C39691 = C39687 + C38953;
    const double C55070 = C55066 + C40350;
    const double C46338 = C46332 + C46313;
    const double C46335 = C46329 + C46304;
    const double C51425 = C51422 + C51414;
    const double C53271 = C53268 + C53254;
    const double C81637 = C81634 + C81623;
    const double C19987 = C19983 + C19968;
    const double C26099 = C26095 + C21345;
    const double C19988 = C19984 + C19971;
    const double C26100 = C26096 + C21344;
    const double C41300 = C41296 + C41281;
    const double C72344 = C72340 + C42641;
    const double C41301 = C41297 + C41284;
    const double C72345 = C72341 + C42640;
    const double C63877 = C63871 + C63852;
    const double C63874 = C63868 + C63843;
    const double C66214 = C66211 + C66203;
    const double C67144 = C67141 + C67127;
    const double C81219 = C81216 + C81205;
    const double C35690 = C35686 + C35671;
    const double C38220 = C38216 + C36300;
    const double C35691 = C35687 + C35674;
    const double C38221 = C38217 + C36299;
    const double C59158 = C59154 + C59139;
    const double C73884 = C73880 + C59767;
    const double C59159 = C59155 + C59142;
    const double C73885 = C73881 + C59766;
    const double C7453 = C7449 + C7434;
    const double C10074 = C10070 + C10055;
    const double C7454 = C7450 + C7436;
    const double C10075 = C10071 + C10057;
    const double C39694 = C39690 + C39675;
    const double C55073 = C55069 + C55054;
    const double C39695 = C39691 + C39677;
    const double C55074 = C55070 + C55056;
    const double C19991 = C19987 + C19969;
    const double C26103 = C26099 + C26084;
    const double C19992 = C19988 + C19972;
    const double C26104 = C26100 + C26086;
    const double C41304 = C41300 + C41282;
    const double C72348 = C72344 + C72329;
    const double C41305 = C41301 + C41285;
    const double C72349 = C72345 + C72331;
    const double C35694 = C35690 + C35672;
    const double C38224 = C38220 + C38205;
    const double C35695 = C35691 + C35675;
    const double C38225 = C38221 + C38207;
    const double C59162 = C59158 + C59140;
    const double C73888 = C73884 + C73869;
    const double C59163 = C59159 + C59143;
    const double C73889 = C73885 + C73871;
    d2eexx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                     C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                     C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                        C84257 * C84300 +
                    (C82052 * C723 + C45946 + C45946 + C84193 * C733 +
                     C82045 * C722 + C45947 + C45947 + C84201 * C732 +
                     C45940 * C721 + C45948 + C45948 + C45932 * C731) *
                        C84257 * C84307 +
                    (C82052 * C1681 + C45949 + C45949 + C84193 * C1689 +
                     C82045 * C1682 + C45950 + C45950 + C84201 * C1690 +
                     C45940 * C1683 + C45951 + C45951 + C45932 * C1691) *
                        C84257 * C45935) *
                       C84603 * C84604 * C90 -
                   ((C45940 * C1684 + C45952 + C45952 + C45932 * C1692 +
                     C82045 * C1683 + C45953 + C45953 + C84201 * C1691 +
                     C82052 * C1682 + C45954 + C45954 + C84193 * C1690) *
                        C84257 * C45935 +
                    (C45940 * C720 + C45955 + C45955 + C45932 * C730 +
                     C82045 * C721 + C45956 + C45956 + C84201 * C731 +
                     C82052 * C722 + C45957 + C45957 + C84193 * C732) *
                        C84257 * C84307 +
                    (C45940 * C105 + C45958 + C45958 + C45932 * C117 +
                     C82045 * C104 + C45959 + C45959 + C84201 * C116 +
                     C82052 * C103 + C45960 + C45960 + C84193 * C115) *
                        C84257 * C84300) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                     C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                        C82049 +
                    (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                     C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                        C84193 +
                    (C46062 + C46063 + C46064) * C82038 +
                    (C46065 + C46066 + C46067) * C84201 +
                    (C46068 + C46069 + C46070) * C82067 +
                    (C46071 + C46072 + C46073) * C45932) *
                       C84257 * C84603 * C84604 * C90 -
                   ((C82280 * C1688 + C45935 * C1795 + C82269 * C725 +
                     C84307 * C787 + C82272 * C111 + C84300 * C182) *
                        C45932 +
                    (C82280 * C1684 + C45935 * C1791 + C82269 * C720 +
                     C84307 * C782 + C82272 * C105 + C84300 * C176) *
                        C82067 +
                    (C46073 + C46072 + C46071) * C84201 +
                    (C46070 + C46069 + C46068) * C82038 +
                    (C46067 + C46066 + C46065) * C84193 +
                    (C46064 + C46063 + C46062) * C82049) *
                       C84257 * C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C82049 +
                     (C251 * C108 + C84257 * C258) * C84193 + C281 * C82038 +
                     C282 * C84201 + C283 * C82067 + C284 * C45932) *
                        C84300 +
                    (C2816 * C82049 + C2817 * C84193 + C1931 * C82038 +
                     C1932 * C84201 + C1933 * C82067 + C1934 * C45932) *
                        C84307 +
                    (C2818 * C82049 + C2819 * C84193 + C1935 * C82038 +
                     C1936 * C84201 + C1937 * C82067 + C1938 * C45932) *
                        C45935) *
                       C84603 * C84604 * C90 -
                   (((C251 * C1688 + C84257 * C1913) * C45932 +
                     (C251 * C1684 + C84257 * C1909) * C82067 + C1938 * C84201 +
                     C1937 * C82038 + C1936 * C84193 + C1935 * C82049) *
                        C45935 +
                    (C6884 * C45932 + C6883 * C82067 + C1934 * C84201 +
                     C1933 * C82038 + C1932 * C84193 + C1931 * C82049) *
                        C84307 +
                    (C286 * C45932 + C285 * C82067 + C284 * C84201 +
                     C283 * C82038 + C282 * C84193 + C281 * C82049) *
                        C84300) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                     C84201 * C109 + C82067 * C104 + C45932 * C110) *
                        C82272 +
                    (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                     C84201 * C331 + C82067 * C175 + C45932 * C332) *
                        C84300 +
                    (C82049 * C723 + C84193 * C728 + C82038 * C722 +
                     C84201 * C727 + C82067 * C721 + C45932 * C726) *
                        C82269 +
                    (C82049 * C785 + C84193 * C889 + C82038 * C784 +
                     C84201 * C888 + C82067 * C783 + C45932 * C887) *
                        C84307 +
                    (C82049 * C1681 + C84193 * C1685 + C82038 * C1682 +
                     C84201 * C1686 + C82067 * C1683 + C45932 * C1687) *
                        C82280 +
                    (C82049 * C1788 + C84193 * C2012 + C82038 * C1789 +
                     C84201 * C2013 + C82067 * C1790 + C45932 * C2014) *
                        C45935) *
                       C84257 * C84603 * C84604 * C90 -
                   ((C82067 * C1791 + C45932 * C2015 + C82038 * C1790 +
                     C84201 * C2014 + C82049 * C1789 + C84193 * C2013) *
                        C45935 +
                    (C82067 * C1684 + C45932 * C1688 + C82038 * C1683 +
                     C84201 * C1687 + C82049 * C1682 + C84193 * C1686) *
                        C82280 +
                    (C82067 * C782 + C45932 * C886 + C82038 * C783 +
                     C84201 * C887 + C82049 * C784 + C84193 * C888) *
                        C84307 +
                    (C82067 * C720 + C45932 * C725 + C82038 * C721 +
                     C84201 * C726 + C82049 * C722 + C84193 * C727) *
                        C82269 +
                    (C82067 * C176 + C45932 * C333 + C82038 * C175 +
                     C84201 * C332 + C82049 * C174 + C84193 * C331) *
                        C84300 +
                    (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                     C84201 * C110 + C82049 * C103 + C84193 * C109) *
                        C82272) *
                       C84257 * C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                     C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                     C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                        C84193 +
                    (C46335 + C46336 + C46337) * C84201 +
                    (C46338 + C46339 + C46340) * C45932) *
                       C84257 * C84603 * C84604 * C90 -
                   ((C46297 * C1684 + C46320 + C46320 + C45935 * C2096 +
                     C82317 * C720 + C46321 + C46321 + C84307 * C933 +
                     C82324 * C105 + C46322 + C46322 + C84300 * C382) *
                        C45932 +
                    (C46340 + C46339 + C46338) * C84201 +
                    (C46337 + C46336 + C46335) * C84193) *
                       C84257 * C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82272 +
            (C251 * C173 + C84257 * C453) * C84300 + C2816 * C82269 +
            C3104 * C84307 + C2818 * C82280 + C3105 * C45935) *
               C84193 +
           (C46415 + C46416 + C46417 + C46418 + C46419 + C46420) * C84201 +
           (C46421 + C46422 + C46423 + C46424 + C46425 + C46426) * C45932) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C45935 +
            (C251 * C1684 + C84257 * C1909) * C82280 + C7138 * C84307 +
            C6883 * C82269 + C474 * C84300 + C285 * C82272) *
               C45932 +
           (C46426 + C46425 + C46424 + C46423 + C46422 + C46421) * C84201 +
           (C46420 + C46419 + C46418 + C46417 + C46416 + C46415) * C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C251 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84257) *
                        C84300 +
                    ((C82049 * C723 + C84193 * C728 + C82038 * C722 +
                      C84201 * C727 + C82067 * C721 + C45932 * C726) *
                         C251 +
                     (C82049 * C837 + C84193 * C1035 + C82038 * C836 +
                      C84201 * C1034 + C82067 * C835 + C45932 * C1033) *
                         C84257) *
                        C84307 +
                    ((C82049 * C1681 + C84193 * C1685 + C82038 * C1682 +
                      C84201 * C1686 + C82067 * C1683 + C45932 * C1687) *
                         C251 +
                     (C82049 * C1906 + C84193 * C2315 + C82038 * C1907 +
                      C84201 * C2316 + C82067 * C1908 + C45932 * C2317) *
                         C84257) *
                        C45935) *
                       C84603 * C84604 * C90 -
                   (((C82067 * C1909 + C45932 * C2318 + C82038 * C1908 +
                      C84201 * C2317 + C82049 * C1907 + C84193 * C2316) *
                         C84257 +
                     (C82067 * C1684 + C45932 * C1688 + C82038 * C1683 +
                      C84201 * C1687 + C82049 * C1682 + C84193 * C1686) *
                         C251) *
                        C45935 +
                    ((C82067 * C834 + C45932 * C1032 + C82038 * C835 +
                      C84201 * C1033 + C82049 * C836 + C84193 * C1034) *
                         C84257 +
                     (C82067 * C720 + C45932 * C725 + C82038 * C721 +
                      C84201 * C726 + C82049 * C722 + C84193 * C727) *
                         C251) *
                        C84307 +
                    ((C82067 * C255 + C45932 * C524 + C82038 * C254 +
                      C84201 * C523 + C82049 * C253 + C84193 * C522) *
                         C84257 +
                     (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                      C84201 * C110 + C82049 * C103 + C84193 * C109) *
                         C251) *
                        C84300) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C251 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84257) *
                        C84193 +
                    ((C46062 + C46063 + C46064) * C251 +
                     (C46587 + C46588 + C46589) * C84257) *
                        C84201 +
                    ((C46068 + C46069 + C46070) * C251 +
                     (C46590 + C46591 + C46592) * C84257) *
                        C45932) *
                       C84603 * C84604 * C90 -
                   (((C82280 * C1909 + C45935 * C2396 + C82269 * C834 +
                      C84307 * C1079 + C82272 * C255 + C84300 * C572) *
                         C84257 +
                     (C82280 * C1684 + C45935 * C1791 + C82269 * C720 +
                      C84307 * C782 + C82272 * C105 + C84300 * C176) *
                         C251) *
                        C45932 +
                    ((C46592 + C46591 + C46590) * C84257 +
                     (C46070 + C46069 + C46068) * C251) *
                        C84201 +
                    ((C46589 + C46588 + C46587) * C84257 +
                     (C46064 + C46063 + C46062) * C251) *
                        C84193) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84300 +
                     C3366 * C84307 + C3367 * C45935) *
                        C84193 +
                    (C46667 + C46668 + C46669) * C84201 +
                    (C46670 + C46671 + C46672) * C45932) *
                       C84603 * C84604 * C90 -
                   (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C45935 +
                     C7365 * C84307 + C669 * C84300) *
                        C45932 +
                    (C46672 + C46671 + C46670) * C84201 +
                    (C46669 + C46668 + C46667) * C84193) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                     C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                     C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                        C84257 * C84300 +
                    (C46774 + C46775 + C46776) * C84257 * C84307 +
                    (C46777 + C46778 + C46779) * C84257 * C45935) *
                       C84603 * C716 -
                   ((C45940 * C2597 + C46759 + C46759 + C45932 * C2603 +
                     C82045 * C2598 + C46760 + C46760 + C84201 * C2604 +
                     C82052 * C2599 + C46761 + C46761 + C84193 * C2605) *
                        C84257 * C45935 +
                    (C46779 + C46778 + C46777) * C84257 * C84307 +
                    (C46776 + C46775 + C46774) * C84257 * C84300) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                     C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                        C82049 +
                    (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                     C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                        C84193 +
                    (C46062 + C46063 + C46064) * C82038 +
                    (C46065 + C46066 + C46067) * C84201 +
                    (C46068 + C46069 + C46070) * C82067 +
                    (C46071 + C46072 + C46073) * C45932) *
                       C84257 * C84603 * C716 -
                   ((C82280 * C2600 + C45935 * C2716 + C82269 * C1687 +
                     C84307 * C1794 + C82272 * C726 + C84300 * C788) *
                        C45932 +
                    (C82280 * C2597 + C45935 * C2713 + C82269 * C1683 +
                     C84307 * C1790 + C82272 * C721 + C84300 * C783) *
                        C82067 +
                    (C82280 * C2601 + C45935 * C2717 + C82269 * C1686 +
                     C84307 * C1793 + C82272 * C727 + C84300 * C789) *
                        C84201 +
                    (C82280 * C2598 + C45935 * C2714 + C82269 * C1682 +
                     C84307 * C1789 + C82272 * C722 + C84300 * C784) *
                        C82038 +
                    (C82280 * C2602 + C45935 * C2718 + C82269 * C1685 +
                     C84307 * C1792 + C82272 * C728 + C84300 * C790) *
                        C84193 +
                    (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                     C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                        C82049) *
                       C84257 * C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82049 +
            (C251 * C108 + C84257 * C258) * C84193 + C281 * C82038 +
            C282 * C84201 + C283 * C82067 + C284 * C45932) *
               C84300 +
           (C46928 + C46929 + C46930 + C46931 + C46932 + C46933) * C84307 +
           (C46934 + C46935 + C46936 + C46937 + C46938 + C46939) * C45935) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C45932 +
            (C251 * C2597 + C84257 * C2793) * C82067 + C19826 * C84201 +
            C19825 * C82038 + C16434 * C84193 + C16433 * C82049) *
               C45935 +
           (C46939 + C46938 + C46937 + C46936 + C46935 + C46934) * C84307 +
           (C46933 + C46932 + C46931 + C46930 + C46929 + C46928) * C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                     C84201 * C109 + C82067 * C104 + C45932 * C110) *
                        C82272 +
                    (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                     C84201 * C331 + C82067 * C175 + C45932 * C332) *
                        C84300 +
                    (C47038 + C47039 + C47040) * C82269 +
                    (C47041 + C47042 + C47043) * C84307 +
                    (C47044 + C47045 + C47046) * C82280 +
                    (C47047 + C47048 + C47049) * C45935) *
                       C84257 * C84603 * C716 -
                   ((C82067 * C2713 + C45932 * C2897 + C82038 * C2714 +
                     C84201 * C2898 + C82049 * C2715 + C84193 * C2899) *
                        C45935 +
                    (C82067 * C2597 + C45932 * C2600 + C82038 * C2598 +
                     C84201 * C2601 + C82049 * C2599 + C84193 * C2602) *
                        C82280 +
                    (C47049 + C47048 + C47047) * C84307 +
                    (C47046 + C47045 + C47044) * C82269 +
                    (C47043 + C47042 + C47041) * C84300 +
                    (C47040 + C47039 + C47038) * C82272) *
                       C84257 * C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                     C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                     C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                        C84193 +
                    (C46335 + C46336 + C46337) * C84201 +
                    (C46338 + C46339 + C46340) * C45932) *
                       C84257 * C84603 * C716 -
                   ((C46297 * C2597 + C47124 + C47124 + C45935 * C3010 +
                     C82317 * C1683 + C47125 + C47125 + C84307 * C2095 +
                     C82324 * C721 + C47126 + C47126 + C84300 * C934) *
                        C45932 +
                    (C46297 * C2598 + C47127 + C47127 + C45935 * C3011 +
                     C82317 * C1682 + C47128 + C47128 + C84307 * C2094 +
                     C82324 * C722 + C47129 + C47129 + C84300 * C935) *
                        C84201 +
                    (C46297 * C2599 + C47130 + C47130 + C45935 * C3012 +
                     C82317 * C1681 + C47131 + C47131 + C84307 * C2093 +
                     C82324 * C723 + C47132 + C47132 + C84300 * C936) *
                        C84193) *
                       C84257 * C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82272 +
            (C251 * C173 + C84257 * C453) * C84300 + C2816 * C82269 +
            C3104 * C84307 + C2818 * C82280 + C3105 * C45935) *
               C84193 +
           (C46415 + C46416 + C46417 + C46418 + C46419 + C46420) * C84201 +
           (C46421 + C46422 + C46423 + C46424 + C46425 + C46426) * C45932) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C45935 +
            (C251 * C2597 + C84257 * C2793) * C82280 + C2237 * C84307 +
            C1937 * C82269 + C2236 * C84300 + C1933 * C82272) *
               C45932 +
           (C20070 * C45935 + C19825 * C82280 + C2235 * C84307 +
            C1935 * C82269 + C2234 * C84300 + C1931 * C82272) *
               C84201 +
           (C16603 * C45935 + C16433 * C82280 + C3105 * C84307 +
            C2818 * C82269 + C3104 * C84300 + C2816 * C82272) *
               C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C251 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84257) *
                        C84300 +
                    ((C47038 + C47039 + C47040) * C251 +
                     (C47293 + C47294 + C47295) * C84257) *
                        C84307 +
                    ((C47044 + C47045 + C47046) * C251 +
                     (C47296 + C47297 + C47298) * C84257) *
                        C45935) *
                       C84603 * C716 -
                   (((C82067 * C2793 + C45932 * C3179 + C82038 * C2794 +
                      C84201 * C3180 + C82049 * C2795 + C84193 * C3181) *
                         C84257 +
                     (C82067 * C2597 + C45932 * C2600 + C82038 * C2598 +
                      C84201 * C2601 + C82049 * C2599 + C84193 * C2602) *
                         C251) *
                        C45935 +
                    ((C47298 + C47297 + C47296) * C84257 +
                     (C47046 + C47045 + C47044) * C251) *
                        C84307 +
                    ((C47295 + C47294 + C47293) * C84257 +
                     (C47040 + C47039 + C47038) * C251) *
                        C84300) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eezy[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C251 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84257) *
                        C84193 +
                    ((C46062 + C46063 + C46064) * C251 +
                     (C46587 + C46588 + C46589) * C84257) *
                        C84201 +
                    ((C46068 + C46069 + C46070) * C251 +
                     (C46590 + C46591 + C46592) * C84257) *
                        C45932) *
                       C84603 * C716 -
                   (((C82280 * C2793 + C45935 * C3274 + C82269 * C1908 +
                      C84307 * C2395 + C82272 * C835 + C84300 * C1080) *
                         C84257 +
                     (C82280 * C2597 + C45935 * C2713 + C82269 * C1683 +
                      C84307 * C1790 + C82272 * C721 + C84300 * C783) *
                         C251) *
                        C45932 +
                    ((C82280 * C2794 + C45935 * C3275 + C82269 * C1907 +
                      C84307 * C2394 + C82272 * C836 + C84300 * C1081) *
                         C84257 +
                     (C82280 * C2598 + C45935 * C2714 + C82269 * C1682 +
                      C84307 * C1789 + C82272 * C722 + C84300 * C784) *
                         C251) *
                        C84201 +
                    ((C82280 * C2795 + C45935 * C3276 + C82269 * C1906 +
                      C84307 * C2393 + C82272 * C837 + C84300 * C1082) *
                         C84257 +
                     (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                      C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                         C251) *
                        C84193) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84300 +
            C3366 * C84307 + C3367 * C45935) *
               C84193 +
           (C46667 + C46668 + C46669) * C84201 +
           (C46670 + C46671 + C46672) * C45932) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C45935 +
            C2519 * C84307 + C2518 * C84300) *
               C45932 +
           (C20289 * C45935 + C2517 * C84307 + C2516 * C84300) * C84201 +
           (C16763 * C45935 + C3367 * C84307 + C3366 * C84300) * C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                     C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                     C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                        C84257 * C84300 +
                    (C46774 + C46775 + C46776) * C84257 * C84307 +
                    (C46777 + C46778 + C46779) * C84257 * C45935) *
                       C1177 -
                   ((C45940 * C3441 + C47521 + C47521 + C45932 * C3453 +
                     C82045 * C3442 + C47522 + C47522 + C84201 * C3454 +
                     C82052 * C3443 + C47523 + C47523 + C84193 * C3455) *
                        C84257 * C45935 +
                    (C45940 * C3444 + C47524 + C47524 + C45932 * C3456 +
                     C82045 * C3445 + C47525 + C47525 + C84201 * C3457 +
                     C82052 * C3446 + C47526 + C47526 + C84193 * C3458) *
                        C84257 * C84307 +
                    (C45940 * C1181 + C47527 + C47527 + C45932 * C1191 +
                     C82045 * C1182 + C47528 + C47528 + C84201 * C1192 +
                     C82052 * C1183 + C47529 + C47529 + C84193 * C1193) *
                        C84257 * C84300) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexy[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                     C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                        C82049 +
                    (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                     C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                        C84193 +
                    (C46062 + C46063 + C46064) * C82038 +
                    (C46065 + C46066 + C46067) * C84201 +
                    (C46068 + C46069 + C46070) * C82067 +
                    (C46071 + C46072 + C46073) * C45932) *
                       C84257 * C1177 -
                   ((C82280 * C3447 + C45935 * C3548 + C82269 * C3450 +
                     C84307 * C3549 + C82272 * C1186 + C84300 * C1248) *
                        C45932 +
                    (C82280 * C3441 + C45935 * C3542 + C82269 * C3444 +
                     C84307 * C3543 + C82272 * C1181 + C84300 * C1243) *
                        C82067 +
                    (C82280 * C3448 + C45935 * C3550 + C82269 * C3451 +
                     C84307 * C3551 + C82272 * C1187 + C84300 * C1249) *
                        C84201 +
                    (C82280 * C3442 + C45935 * C3544 + C82269 * C3445 +
                     C84307 * C3545 + C82272 * C1182 + C84300 * C1244) *
                        C82038 +
                    (C82280 * C3449 + C45935 * C3552 + C82269 * C3452 +
                     C84307 * C3553 + C82272 * C1188 + C84300 * C1250) *
                        C84193 +
                    (C82280 * C3443 + C45935 * C3546 + C82269 * C3446 +
                     C84307 * C3547 + C82272 * C1183 + C84300 * C1245) *
                        C82049) *
                       C84257 * C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82049 +
            (C251 * C108 + C84257 * C258) * C84193 + C281 * C82038 +
            C282 * C84201 + C283 * C82067 + C284 * C45932) *
               C84300 +
           (C46928 + C46929 + C46930 + C46931 + C46932 + C46933) * C84307 +
           (C46934 + C46935 + C46936 + C46937 + C46938 + C46939) * C45935) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C45932 +
            (C251 * C3441 + C84257 * C3628) * C82067 +
            (C251 * C3448 + C84257 * C3635) * C84201 +
            (C251 * C3442 + C84257 * C3629) * C82038 +
            (C251 * C3449 + C84257 * C3636) * C84193 +
            (C251 * C3443 + C84257 * C3630) * C82049) *
               C45935 +
           ((C251 * C3450 + C84257 * C3637) * C45932 +
            (C251 * C3444 + C84257 * C3631) * C82067 +
            (C251 * C3451 + C84257 * C3638) * C84201 +
            (C251 * C3445 + C84257 * C3632) * C82038 +
            (C251 * C3452 + C84257 * C3639) * C84193 +
            (C251 * C3446 + C84257 * C3633) * C82049) *
               C84307 +
           ((C251 * C1186 + C84257 * C1300) * C45932 +
            (C251 * C1181 + C84257 * C1295) * C82067 +
            (C251 * C1187 + C84257 * C1301) * C84201 +
            (C251 * C1182 + C84257 * C1296) * C82038 +
            (C251 * C1188 + C84257 * C1302) * C84193 +
            (C251 * C1183 + C84257 * C1297) * C82049) *
               C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                     C84201 * C109 + C82067 * C104 + C45932 * C110) *
                        C82272 +
                    (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                     C84201 * C331 + C82067 * C175 + C45932 * C332) *
                        C84300 +
                    (C47038 + C47039 + C47040) * C82269 +
                    (C47041 + C47042 + C47043) * C84307 +
                    (C47044 + C47045 + C47046) * C82280 +
                    (C47047 + C47048 + C47049) * C45935) *
                       C84257 * C1177 -
                   ((C82067 * C3542 + C45932 * C3714 + C82038 * C3544 +
                     C84201 * C3715 + C82049 * C3546 + C84193 * C3716) *
                        C45935 +
                    (C82067 * C3441 + C45932 * C3447 + C82038 * C3442 +
                     C84201 * C3448 + C82049 * C3443 + C84193 * C3449) *
                        C82280 +
                    (C82067 * C3543 + C45932 * C3717 + C82038 * C3545 +
                     C84201 * C3718 + C82049 * C3547 + C84193 * C3719) *
                        C84307 +
                    (C82067 * C3444 + C45932 * C3450 + C82038 * C3445 +
                     C84201 * C3451 + C82049 * C3446 + C84193 * C3452) *
                        C82269 +
                    (C82067 * C1243 + C45932 * C1347 + C82038 * C1244 +
                     C84201 * C1348 + C82049 * C1245 + C84193 * C1349) *
                        C84300 +
                    (C82067 * C1181 + C45932 * C1186 + C82038 * C1182 +
                     C84201 * C1187 + C82049 * C1183 + C84193 * C1188) *
                        C82272) *
                       C84257 * C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                     C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                     C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                        C84193 +
                    (C46335 + C46336 + C46337) * C84201 +
                    (C46338 + C46339 + C46340) * C45932) *
                       C84257 * C1177 -
                   ((C46297 * C3441 + C47826 + C47826 + C45935 * C3794 +
                     C82317 * C3444 + C47827 + C47827 + C84307 * C3795 +
                     C82324 * C1181 + C47828 + C47828 + C84300 * C1394) *
                        C45932 +
                    (C46297 * C3442 + C47829 + C47829 + C45935 * C3796 +
                     C82317 * C3445 + C47830 + C47830 + C84307 * C3797 +
                     C82324 * C1182 + C47831 + C47831 + C84300 * C1395) *
                        C84201 +
                    (C46297 * C3443 + C47832 + C47832 + C45935 * C3798 +
                     C82317 * C3446 + C47833 + C47833 + C84307 * C3799 +
                     C82324 * C1183 + C47834 + C47834 + C84300 * C1396) *
                        C84193) *
                       C84257 * C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82272 +
            (C251 * C173 + C84257 * C453) * C84300 + C2816 * C82269 +
            C3104 * C84307 + C2818 * C82280 + C3105 * C45935) *
               C84193 +
           (C46415 + C46416 + C46417 + C46418 + C46419 + C46420) * C84201 +
           (C46421 + C46422 + C46423 + C46424 + C46425 + C46426) * C45932) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C45935 +
            (C251 * C3441 + C84257 * C3628) * C82280 +
            (C251 * C3543 + C84257 * C3884) * C84307 +
            (C251 * C3444 + C84257 * C3631) * C82269 +
            (C251 * C1243 + C84257 * C1446) * C84300 +
            (C251 * C1181 + C84257 * C1295) * C82272) *
               C45932 +
           ((C251 * C3544 + C84257 * C3885) * C45935 +
            (C251 * C3442 + C84257 * C3629) * C82280 +
            (C251 * C3545 + C84257 * C3886) * C84307 +
            (C251 * C3445 + C84257 * C3632) * C82269 +
            (C251 * C1244 + C84257 * C1447) * C84300 +
            (C251 * C1182 + C84257 * C1296) * C82272) *
               C84201 +
           ((C251 * C3546 + C84257 * C3887) * C45935 +
            (C251 * C3443 + C84257 * C3630) * C82280 +
            (C251 * C3547 + C84257 * C3888) * C84307 +
            (C251 * C3446 + C84257 * C3633) * C82269 +
            (C251 * C1245 + C84257 * C1448) * C84300 +
            (C251 * C1183 + C84257 * C1297) * C82272) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C251 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84257) *
                        C84300 +
                    ((C47038 + C47039 + C47040) * C251 +
                     (C47293 + C47294 + C47295) * C84257) *
                        C84307 +
                    ((C47044 + C47045 + C47046) * C251 +
                     (C47296 + C47297 + C47298) * C84257) *
                        C45935) *
                       C1177 -
                   (((C82067 * C3628 + C45932 * C3963 + C82038 * C3629 +
                      C84201 * C3964 + C82049 * C3630 + C84193 * C3965) *
                         C84257 +
                     (C82067 * C3441 + C45932 * C3447 + C82038 * C3442 +
                      C84201 * C3448 + C82049 * C3443 + C84193 * C3449) *
                         C251) *
                        C45935 +
                    ((C82067 * C3631 + C45932 * C3966 + C82038 * C3632 +
                      C84201 * C3967 + C82049 * C3633 + C84193 * C3968) *
                         C84257 +
                     (C82067 * C3444 + C45932 * C3450 + C82038 * C3445 +
                      C84201 * C3451 + C82049 * C3446 + C84193 * C3452) *
                         C251) *
                        C84307 +
                    ((C82067 * C1295 + C45932 * C1493 + C82038 * C1296 +
                      C84201 * C1494 + C82049 * C1297 + C84193 * C1495) *
                         C84257 +
                     (C82067 * C1181 + C45932 * C1186 + C82038 * C1182 +
                      C84201 * C1187 + C82049 * C1183 + C84193 * C1188) *
                         C251) *
                        C84300) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eezy[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C251 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84257) *
                        C84193 +
                    ((C46062 + C46063 + C46064) * C251 +
                     (C46587 + C46588 + C46589) * C84257) *
                        C84201 +
                    ((C46068 + C46069 + C46070) * C251 +
                     (C46590 + C46591 + C46592) * C84257) *
                        C45932) *
                       C1177 -
                   (((C82280 * C3628 + C45935 * C4043 + C82269 * C3631 +
                      C84307 * C4044 + C82272 * C1295 + C84300 * C1540) *
                         C84257 +
                     (C82280 * C3441 + C45935 * C3542 + C82269 * C3444 +
                      C84307 * C3543 + C82272 * C1181 + C84300 * C1243) *
                         C251) *
                        C45932 +
                    ((C82280 * C3629 + C45935 * C4045 + C82269 * C3632 +
                      C84307 * C4046 + C82272 * C1296 + C84300 * C1541) *
                         C84257 +
                     (C82280 * C3442 + C45935 * C3544 + C82269 * C3445 +
                      C84307 * C3545 + C82272 * C1182 + C84300 * C1244) *
                         C251) *
                        C84201 +
                    ((C82280 * C3630 + C45935 * C4047 + C82269 * C3633 +
                      C84307 * C4048 + C82272 * C1297 + C84300 * C1542) *
                         C84257 +
                     (C82280 * C3443 + C45935 * C3546 + C82269 * C3446 +
                      C84307 * C3547 + C82272 * C1183 + C84300 * C1245) *
                         C251) *
                        C84193) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eezz[2] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84300 +
                     C3366 * C84307 + C3367 * C45935) *
                        C84193 +
                    (C46667 + C46668 + C46669) * C84201 +
                    (C46670 + C46671 + C46672) * C45932) *
                       C1177 -
                   (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C45935 +
                     (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84307 +
                     (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84300) *
                        C45932 +
                    ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C45935 +
                     (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84307 +
                     (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84300) *
                        C84201 +
                    ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C45935 +
                     (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84307 +
                     (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84300) *
                        C84193) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C84529 +
            (C44970 + C44971) * C84344) *
               C84300 +
           ((C41688 + C41689) * C84529 + (C44020 + C44021) * C84344) * C84307 +
           ((C41690 + C41691) * C84529 +
            (C40959 * C3443 + C42365 + C42365 + C40953 * C3455 +
             C40961 * C3442 + C42364 + C42364 + C84198 * C3454) *
                C84344) *
               C45935) *
              C84603 * C84604 * C90 -
          (((C40961 * C3441 + C51001 + C51001 + C84198 * C3453 +
             C40959 * C3442 + C51002 + C51002 + C40953 * C3454) *
                C84344 +
            (C40961 * C1683 + C40974 + C40974 + C84198 * C1691 +
             C40959 * C1682 + C40975 + C40975 + C40953 * C1690) *
                C84529) *
               C45935 +
           ((C40961 * C3444 + C43010 + C43010 + C84198 * C3456 +
             C40959 * C3445 + C43011 + C43011 + C40953 * C3457) *
                C84344 +
            (C40961 * C721 + C40976 + C40976 + C84198 * C731 + C40959 * C722 +
             C40977 + C40977 + C40953 * C732) *
                C84529) *
               C84307 +
           ((C40961 * C1181 + C43014 + C43014 + C84198 * C1191 +
             C40959 * C1182 + C43015 + C43015 + C40953 * C1192) *
                C84344 +
            (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
             C40979 + C40979 + C40953 * C115) *
                C84529) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C40960 +
                     (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                      C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                         C40953 +
                     (C46062 + C46063 + C46064) * C40962 +
                     (C46065 + C46066 + C46067) * C84198) *
                        C84529 +
                    ((C82272 * C1183 + C84300 * C1245 + C82269 * C3446 +
                      C84307 * C3547 + C82280 * C3443 + C45935 * C3546) *
                         C40960 +
                     (C82272 * C1188 + C84300 * C1250 + C82269 * C3452 +
                      C84307 * C3553 + C82280 * C3449 + C45935 * C3552) *
                         C40953 +
                     (C51113 + C51114 + C51115) * C40962 +
                     (C51116 + C51117 + C51118) * C84198) *
                        C84344) *
                       C84603 * C84604 * C90 -
                   (((C82280 * C3447 + C45935 * C3548 + C82269 * C3450 +
                      C84307 * C3549 + C82272 * C1186 + C84300 * C1248) *
                         C84198 +
                     (C82280 * C3441 + C45935 * C3542 + C82269 * C3444 +
                      C84307 * C3543 + C82272 * C1181 + C84300 * C1243) *
                         C40962 +
                     (C51118 + C51117 + C51116) * C40953 +
                     (C51115 + C51114 + C51113) * C40960) *
                        C84344 +
                    ((C46073 + C46072 + C46071) * C84198 +
                     (C46070 + C46069 + C46068) * C40962 +
                     (C46067 + C46066 + C46065) * C40953 +
                     (C46064 + C46063 + C46062) * C40960) *
                        C84529) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C40960 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C40953 +
            (C8897 + C8898) * C40962 + (C8899 + C8900) * C84198) *
               C84300 +
           ((C11976 + C11977) * C40960 + (C11978 + C11979) * C40953 +
            (C10999 + C11000) * C40962 + (C11001 + C11002) * C84198) *
               C84307 +
           ((C22895 + C22896) * C40960 + (C22897 + C22898) * C40953 +
            (C21941 + C21942) * C40962 + (C21943 + C21944) * C84198) *
               C45935) *
              C84603 * C84604 * C90 -
          (((C8871 * C3447 + C84344 * C3634 + C8870 * C1687 + C84529 * C1912) *
                C84198 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C40962 +
            (C21944 + C21943) * C40953 + (C21942 + C21941) * C40960) *
               C45935 +
           ((C11006 + C11005) * C84198 + (C11004 + C11003) * C40962 +
            (C11002 + C11001) * C40953 + (C11000 + C10999) * C40960) *
               C84307 +
           ((C8904 + C8903) * C84198 + (C8902 + C8901) * C40962 +
            (C8900 + C8899) * C40953 + (C8898 + C8897) * C40960) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C82272 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84300 +
            (C41928 + C41929) * C82269 + (C41930 + C41931) * C84307 +
            (C41932 + C41933) * C82280 + (C41934 + C41935) * C45935) *
               C84529 +
           ((C45308 + C45309) * C82272 + (C45310 + C45311) * C84300 +
            (C44334 + C44335) * C82269 + (C44336 + C44337) * C84307 +
            (C40960 * C3443 + C40953 * C3449 + C40962 * C3442 +
             C84198 * C3448) *
                C82280 +
            (C40960 * C3546 + C40953 * C3716 + C40962 * C3544 +
             C84198 * C3715) *
                C45935) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C40962 * C3542 + C84198 * C3714 + C40960 * C3544 +
             C40953 * C3715) *
                C45935 +
            (C40962 * C3441 + C84198 * C3447 + C40960 * C3442 +
             C40953 * C3448) *
                C82280 +
            (C40962 * C3543 + C84198 * C3717 + C40960 * C3545 +
             C40953 * C3718) *
                C84307 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C82269 +
            (C40962 * C1243 + C84198 * C1347 + C40960 * C1244 +
             C40953 * C1348) *
                C84300 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C82272) *
               C84344 +
           ((C40962 * C1790 + C84198 * C2014 + C40960 * C1789 +
             C40953 * C2013) *
                C45935 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C82280 +
            (C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
                C84307 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C82269 +
            (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
                C84300 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C82272) *
               C84529) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                      C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                      C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                         C40953 +
                     (C46335 + C46336 + C46337) * C84198) *
                        C84529 +
                    ((C82324 * C1183 + C47834 + C47834 + C84300 * C1396 +
                      C82317 * C3446 + C47833 + C47833 + C84307 * C3799 +
                      C46297 * C3443 + C47832 + C47832 + C45935 * C3798) *
                         C40953 +
                     (C51425 + C51426 + C51427) * C84198) *
                        C84344) *
                       C84603 * C84604 * C90 -
                   (((C46297 * C3441 + C47826 + C47826 + C45935 * C3794 +
                      C82317 * C3444 + C47827 + C47827 + C84307 * C3795 +
                      C82324 * C1181 + C47828 + C47828 + C84300 * C1394) *
                         C84198 +
                     (C51427 + C51426 + C51425) * C40953) *
                        C84344 +
                    ((C46340 + C46339 + C46338) * C84198 +
                     (C46337 + C46336 + C46335) * C40953) *
                        C84529) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82272 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84300 +
            (C11976 + C11977) * C82269 + (C12302 + C12303) * C84307 +
            (C22895 + C22896) * C82280 + (C23224 + C23225) * C45935) *
               C40953 +
           ((C8897 + C8898) * C82272 + (C9124 + C9125) * C84300 +
            (C10999 + C11000) * C82269 + (C11329 + C11330) * C84307 +
            (C21941 + C21942) * C82280 + (C22258 + C22259) * C45935) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C8871 * C3542 + C84344 * C3883 + C8870 * C1790 + C84529 * C2215) *
                C45935 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C82280 +
            (C11332 + C11331) * C84307 + (C11004 + C11003) * C82269 +
            (C9127 + C9126) * C84300 + (C8902 + C8901) * C82272) *
               C84198 +
           ((C22259 + C22258) * C45935 + (C21942 + C21941) * C82280 +
            (C11330 + C11329) * C84307 + (C11000 + C10999) * C82269 +
            (C9125 + C9124) * C84300 + (C8898 + C8897) * C82272) *
               C40953) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C8870 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84529 +
            (C45308 + C45309) * C8871 + (C45642 + C45643) * C84344) *
               C84300 +
           ((C41928 + C41929) * C8870 + (C42158 + C42159) * C84529 +
            (C44334 + C44335) * C8871 + (C44652 + C44653) * C84344) *
               C84307 +
           ((C41932 + C41933) * C8870 + (C42160 + C42161) * C84529 +
            (C40960 * C3443 + C40953 * C3449 + C40962 * C3442 +
             C84198 * C3448) *
                C8871 +
            (C40960 * C3630 + C40953 * C3965 + C40962 * C3629 +
             C84198 * C3964) *
                C84344) *
               C45935) *
              C84603 * C84604 * C90 -
          (((C40962 * C3628 + C84198 * C3963 + C40960 * C3629 +
             C40953 * C3964) *
                C84344 +
            (C40962 * C3441 + C84198 * C3447 + C40960 * C3442 +
             C40953 * C3448) *
                C8871 +
            (C40962 * C1908 + C84198 * C2317 + C40960 * C1907 +
             C40953 * C2316) *
                C84529 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C8870) *
               C45935 +
           ((C40962 * C3631 + C84198 * C3966 + C40960 * C3632 +
             C40953 * C3967) *
                C84344 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C8871 +
            (C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C84529 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C8870) *
               C84307 +
           ((C40962 * C1295 + C84198 * C1493 + C40960 * C1296 +
             C40953 * C1494) *
                C84344 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C8871 +
            (C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C84529 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C8870) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C8870 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84529 +
                     (C82272 * C1183 + C84300 * C1245 + C82269 * C3446 +
                      C84307 * C3547 + C82280 * C3443 + C45935 * C3546) *
                         C8871 +
                     (C82272 * C1297 + C84300 * C1542 + C82269 * C3633 +
                      C84307 * C4048 + C82280 * C3630 + C45935 * C4047) *
                         C84344) *
                        C40953 +
                    ((C46062 + C46063 + C46064) * C8870 +
                     (C46587 + C46588 + C46589) * C84529 +
                     (C51113 + C51114 + C51115) * C8871 +
                     (C51728 + C51729 + C51730) * C84344) *
                        C84198) *
                       C84603 * C84604 * C90 -
                   (((C82280 * C3628 + C45935 * C4043 + C82269 * C3631 +
                      C84307 * C4044 + C82272 * C1295 + C84300 * C1540) *
                         C84344 +
                     (C82280 * C3441 + C45935 * C3542 + C82269 * C3444 +
                      C84307 * C3543 + C82272 * C1181 + C84300 * C1243) *
                         C8871 +
                     (C46592 + C46591 + C46590) * C84529 +
                     (C46070 + C46069 + C46068) * C8870) *
                        C84198 +
                    ((C51730 + C51729 + C51728) * C84344 +
                     (C51115 + C51114 + C51113) * C8871 +
                     (C46589 + C46588 + C46587) * C84529 +
                     (C46064 + C46063 + C46062) * C8870) *
                        C40953) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eezz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 +
                      C9343 * C1183 + C9346 + C9346 + C84344 * C1589) *
                         C84300 +
                     (C12621 + C12622) * C84307 + (C23544 + C23545) * C45935) *
                        C40953 +
                    ((C9379 + C9380) * C84300 + (C11655 + C11656) * C84307 +
                     (C22571 + C22572) * C45935) *
                        C84198) *
                       C84603 * C84604 * C90 -
                   (((C9343 * C3441 + C12611 + C12611 + C84344 * C4123 +
                      C9342 * C1683 + C12612 + C12612 + C84529 * C2491) *
                         C45935 +
                     (C11658 + C11657) * C84307 + (C9382 + C9381) * C84300) *
                        C84198 +
                    ((C22572 + C22571) * C45935 + (C11656 + C11655) * C84307 +
                     (C9380 + C9379) * C84300) *
                        C40953) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eexx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C84529 +
            (C44970 + C44971) * C84344) *
               C84300 +
           ((C41688 + C41689) * C84529 + (C44020 + C44021) * C84344) * C84307 +
           ((C41690 + C41691) * C84529 + (C51935 + C51936) * C84344) * C45935) *
              C84603 * C716 -
          (((C40961 * C21056 + C42362 + C42362 + C84198 * C21058 +
             C40959 * C16807 + C42363 + C42363 + C40953 * C16811) *
                C84344 +
            (C41693 + C41692) * C84529) *
               C45935 +
           ((C51936 + C51935) * C84344 + (C41691 + C41690) * C84529) * C84307 +
           ((C44021 + C44020) * C84344 + (C41689 + C41688) * C84529) * C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexy[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C40960 +
                     (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                      C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                         C40953 +
                     (C46062 + C46063 + C46064) * C40962 +
                     (C46065 + C46066 + C46067) * C84198) *
                        C84529 +
                    ((C82272 * C1183 + C84300 * C1245 + C82269 * C3446 +
                      C84307 * C3547 + C82280 * C3443 + C45935 * C3546) *
                         C40960 +
                     (C82272 * C1188 + C84300 * C1250 + C82269 * C3452 +
                      C84307 * C3553 + C82280 * C3449 + C45935 * C3552) *
                         C40953 +
                     (C51113 + C51114 + C51115) * C40962 +
                     (C51116 + C51117 + C51118) * C84198) *
                        C84344) *
                       C84603 * C716 -
                   (((C82280 * C21057 + C45935 * C21134 + C82269 * C3448 +
                      C84307 * C3550 + C82272 * C3451 + C84300 * C3551) *
                         C84198 +
                     (C82280 * C21056 + C45935 * C21133 + C82269 * C3442 +
                      C84307 * C3544 + C82272 * C3445 + C84300 * C3545) *
                         C40962 +
                     (C82280 * C16809 + C45935 * C16862 + C82269 * C3449 +
                      C84307 * C3552 + C82272 * C3452 + C84300 * C3553) *
                         C40953 +
                     (C82280 * C16807 + C45935 * C16860 + C82269 * C3443 +
                      C84307 * C3546 + C82272 * C3446 + C84300 * C3547) *
                         C40960) *
                        C84344 +
                    ((C82280 * C2601 + C45935 * C2717 + C82269 * C1686 +
                      C84307 * C1793 + C82272 * C727 + C84300 * C789) *
                         C84198 +
                     (C82280 * C2598 + C45935 * C2714 + C82269 * C1682 +
                      C84307 * C1789 + C82272 * C722 + C84300 * C784) *
                         C40962 +
                     (C82280 * C2602 + C45935 * C2718 + C82269 * C1685 +
                      C84307 * C1792 + C82272 * C728 + C84300 * C790) *
                         C40953 +
                     (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                      C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                         C40960) *
                        C84529) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C40960 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C40953 +
            (C8897 + C8898) * C40962 + (C8899 + C8900) * C84198) *
               C84300 +
           ((C11976 + C11977) * C40960 + (C11978 + C11979) * C40953 +
            (C10999 + C11000) * C40962 + (C11001 + C11002) * C84198) *
               C84307 +
           ((C22895 + C22896) * C40960 + (C22897 + C22898) * C40953 +
            (C21941 + C21942) * C40962 + (C21943 + C21944) * C84198) *
               C45935) *
              C84603 * C716 -
          (((C8871 * C21057 + C84344 * C21202 + C8870 * C2601 +
             C84529 * C2797) *
                C84198 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C40962 +
            (C25281 + C25280) * C40953 + (C25279 + C25278) * C40960) *
               C45935 +
           ((C21944 + C21943) * C84198 + (C21942 + C21941) * C40962 +
            (C22898 + C22897) * C40953 + (C22896 + C22895) * C40960) *
               C84307 +
           ((C11002 + C11001) * C84198 + (C11000 + C10999) * C40962 +
            (C11979 + C11978) * C40953 + (C11977 + C11976) * C40960) *
               C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C82272 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84300 +
            (C41928 + C41929) * C82269 + (C41930 + C41931) * C84307 +
            (C41932 + C41933) * C82280 + (C41934 + C41935) * C45935) *
               C84529 +
           ((C45308 + C45309) * C82272 + (C45310 + C45311) * C84300 +
            (C44334 + C44335) * C82269 + (C44336 + C44337) * C84307 +
            (C52239 + C52240) * C82280 + (C52241 + C52242) * C45935) *
               C84344) *
              C84603 * C716 -
          (((C40962 * C21133 + C84198 * C21269 + C40960 * C16860 +
             C40953 * C16952) *
                C45935 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C82280 +
            (C52242 + C52241) * C84307 + (C52240 + C52239) * C82269 +
            (C44337 + C44336) * C84300 + (C44335 + C44334) * C82272) *
               C84344 +
           ((C41939 + C41938) * C45935 + (C41937 + C41936) * C82280 +
            (C41935 + C41934) * C84307 + (C41933 + C41932) * C82269 +
            (C41931 + C41930) * C84300 + (C41929 + C41928) * C82272) *
               C84529) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                      C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                      C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                         C40953 +
                     (C46335 + C46336 + C46337) * C84198) *
                        C84529 +
                    ((C82324 * C1183 + C47834 + C47834 + C84300 * C1396 +
                      C82317 * C3446 + C47833 + C47833 + C84307 * C3799 +
                      C46297 * C3443 + C47832 + C47832 + C45935 * C3798) *
                         C40953 +
                     (C51425 + C51426 + C51427) * C84198) *
                        C84344) *
                       C84603 * C716 -
                   (((C46297 * C21056 + C52341 + C52341 + C45935 * C21336 +
                      C82317 * C3442 + C52342 + C52342 + C84307 * C3796 +
                      C82324 * C3445 + C52343 + C52343 + C84300 * C3797) *
                         C84198 +
                     (C46297 * C16807 + C52344 + C52344 + C45935 * C16996 +
                      C82317 * C3443 + C52345 + C52345 + C84307 * C3798 +
                      C82324 * C3446 + C52346 + C52346 + C84300 * C3799) *
                         C40953) *
                        C84344 +
                    ((C46297 * C2598 + C47127 + C47127 + C45935 * C3011 +
                      C82317 * C1682 + C47128 + C47128 + C84307 * C2094 +
                      C82324 * C722 + C47129 + C47129 + C84300 * C935) *
                         C84198 +
                     (C46297 * C2599 + C47130 + C47130 + C45935 * C3012 +
                      C82317 * C1681 + C47131 + C47131 + C84307 * C2093 +
                      C82324 * C723 + C47132 + C47132 + C84300 * C936) *
                         C40953) *
                        C84529) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82272 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84300 +
            (C11976 + C11977) * C82269 + (C12302 + C12303) * C84307 +
            (C22895 + C22896) * C82280 + (C23224 + C23225) * C45935) *
               C40953 +
           ((C8897 + C8898) * C82272 + (C9124 + C9125) * C84300 +
            (C10999 + C11000) * C82269 + (C11329 + C11330) * C84307 +
            (C21941 + C21942) * C82280 + (C22258 + C22259) * C45935) *
               C84198) *
              C84603 * C716 -
          (((C8871 * C21133 + C84344 * C21411 + C8870 * C2714 +
             C84529 * C3097) *
                C45935 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C82280 +
            (C22259 + C22258) * C84307 + (C21942 + C21941) * C82269 +
            (C11330 + C11329) * C84300 + (C11000 + C10999) * C82272) *
               C84198 +
           ((C25495 + C25494) * C45935 + (C25279 + C25278) * C82280 +
            (C23225 + C23224) * C84307 + (C22896 + C22895) * C82269 +
            (C12303 + C12302) * C84300 + (C11977 + C11976) * C82272) *
               C40953) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C8870 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84529 +
            (C45308 + C45309) * C8871 + (C45642 + C45643) * C84344) *
               C84300 +
           ((C41928 + C41929) * C8870 + (C42158 + C42159) * C84529 +
            (C44334 + C44335) * C8871 + (C44652 + C44653) * C84344) *
               C84307 +
           ((C41932 + C41933) * C8870 + (C42160 + C42161) * C84529 +
            (C52239 + C52240) * C8871 + (C52547 + C52548) * C84344) *
               C45935) *
              C84603 * C716 -
          (((C40962 * C21201 + C84198 * C21478 + C40960 * C16906 +
             C40953 * C17089) *
                C84344 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C8871 +
            (C42163 + C42162) * C84529 + (C41937 + C41936) * C8870) *
               C45935 +
           ((C52548 + C52547) * C84344 + (C52240 + C52239) * C8871 +
            (C42161 + C42160) * C84529 + (C41933 + C41932) * C8870) *
               C84307 +
           ((C44653 + C44652) * C84344 + (C44335 + C44334) * C8871 +
            (C42159 + C42158) * C84529 + (C41929 + C41928) * C8870) *
               C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C8870 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84529 +
                     (C82272 * C1183 + C84300 * C1245 + C82269 * C3446 +
                      C84307 * C3547 + C82280 * C3443 + C45935 * C3546) *
                         C8871 +
                     (C82272 * C1297 + C84300 * C1542 + C82269 * C3633 +
                      C84307 * C4048 + C82280 * C3630 + C45935 * C4047) *
                         C84344) *
                        C40953 +
                    ((C46062 + C46063 + C46064) * C8870 +
                     (C46587 + C46588 + C46589) * C84529 +
                     (C51113 + C51114 + C51115) * C8871 +
                     (C51728 + C51729 + C51730) * C84344) *
                        C84198) *
                       C84603 * C716 -
                   (((C82280 * C21201 + C45935 * C21545 + C82269 * C3629 +
                      C84307 * C4045 + C82272 * C3632 + C84300 * C4046) *
                         C84344 +
                     (C82280 * C21056 + C45935 * C21133 + C82269 * C3442 +
                      C84307 * C3544 + C82272 * C3445 + C84300 * C3545) *
                         C8871 +
                     (C82280 * C2794 + C45935 * C3275 + C82269 * C1907 +
                      C84307 * C2394 + C82272 * C836 + C84300 * C1081) *
                         C84529 +
                     (C82280 * C2598 + C45935 * C2714 + C82269 * C1682 +
                      C84307 * C1789 + C82272 * C722 + C84300 * C784) *
                         C8870) *
                        C84198 +
                    ((C82280 * C16906 + C45935 * C17133 + C82269 * C3630 +
                      C84307 * C4047 + C82272 * C3633 + C84300 * C4048) *
                         C84344 +
                     (C82280 * C16807 + C45935 * C16860 + C82269 * C3443 +
                      C84307 * C3546 + C82272 * C3446 + C84300 * C3547) *
                         C8871 +
                     (C82280 * C2795 + C45935 * C3276 + C82269 * C1906 +
                      C84307 * C2393 + C82272 * C837 + C84300 * C1082) *
                         C84529 +
                     (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                      C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                         C8870) *
                        C40953) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eezz[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 +
                      C9343 * C1183 + C9346 + C9346 + C84344 * C1589) *
                         C84300 +
                     (C12621 + C12622) * C84307 + (C23544 + C23545) * C45935) *
                        C40953 +
                    ((C9379 + C9380) * C84300 + (C11655 + C11656) * C84307 +
                     (C22571 + C22572) * C45935) *
                        C84198) *
                       C84603 * C716 -
                   (((C9343 * C21056 + C23536 + C23536 + C84344 * C21612 +
                      C9342 * C2598 + C23537 + C23537 + C84529 * C3352) *
                         C45935 +
                     (C22572 + C22571) * C84307 + (C11656 + C11655) * C84300) *
                        C84198 +
                    ((C25720 + C25719) * C45935 + (C23545 + C23544) * C84307 +
                     (C12622 + C12621) * C84300) *
                        C40953) *
                       C84603 * C717) *
                  C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C84529 +
            (C44970 + C44971) * C84344) *
               C84300 +
           ((C41688 + C41689) * C84529 + (C44020 + C44021) * C84344) * C84307 +
           ((C41690 + C41691) * C84529 + (C51935 + C51936) * C84344) * C45935) *
              C1177 -
          (((C40961 * C17255 + C44010 + C44010 + C84198 * C17259 +
             C40959 * C17254 + C44011 + C44011 + C40953 * C17258) *
                C84344 +
            (C51936 + C51935) * C84529) *
               C45935 +
           ((C44023 + C44022) * C84344 + (C44021 + C44020) * C84529) * C84307 +
           ((C44973 + C44972) * C84344 + (C44971 + C44970) * C84529) * C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C40960 +
                     (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                      C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                         C40953 +
                     (C46062 + C46063 + C46064) * C40962 +
                     (C46065 + C46066 + C46067) * C84198) *
                        C84529 +
                    ((C52953 + C52954 + C52955) * C40960 +
                     (C52956 + C52957 + C52958) * C40953 +
                     (C51113 + C51114 + C51115) * C40962 +
                     (C51116 + C51117 + C51118) * C84198) *
                        C84344) *
                       C1177 -
                   (((C82280 * C17257 + C45935 * C17346 + C82269 * C5117 +
                      C84307 * C5203 + C82272 * C4217 + C84300 * C4312) *
                         C84198 +
                     (C82280 * C17255 + C45935 * C17344 + C82269 * C5114 +
                      C84307 * C5200 + C82272 * C4213 + C84300 * C4308) *
                         C40962 +
                     (C82280 * C17256 + C45935 * C17345 + C82269 * C5118 +
                      C84307 * C5204 + C82272 * C4216 + C84300 * C4311) *
                         C40953 +
                     (C82280 * C17254 + C45935 * C17343 + C82269 * C5115 +
                      C84307 * C5201 + C82272 * C4212 + C84300 * C4307) *
                         C40960) *
                        C84344 +
                    ((C51118 + C51117 + C51116) * C84198 +
                     (C51115 + C51114 + C51113) * C40962 +
                     (C52958 + C52957 + C52956) * C40953 +
                     (C52955 + C52954 + C52953) * C40960) *
                        C84529) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C40960 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C40953 +
            (C8897 + C8898) * C40962 + (C8899 + C8900) * C84198) *
               C84300 +
           ((C11976 + C11977) * C40960 + (C11978 + C11979) * C40953 +
            (C10999 + C11000) * C40962 + (C11001 + C11002) * C84198) *
               C84307 +
           ((C22895 + C22896) * C40960 + (C22897 + C22898) * C40953 +
            (C21941 + C21942) * C40962 + (C21943 + C21944) * C84198) *
               C45935) *
              C1177 -
          (((C8871 * C17257 + C84344 * C17424 + C8870 * C3448 +
             C84529 * C3635) *
                C84198 +
            (C8871 * C17255 + C84344 * C17422 + C8870 * C3442 +
             C84529 * C3629) *
                C40962 +
            (C8871 * C17256 + C84344 * C17423 + C8870 * C3449 +
             C84529 * C3636) *
                C40953 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C40960) *
               C45935 +
           ((C8871 * C5117 + C84344 * C5283 + C8870 * C3451 + C84529 * C3638) *
                C84198 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C40962 +
            (C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C40953 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C40960) *
               C84307 +
           ((C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
                C84198 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C40962 +
            (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C40953 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C40960) *
               C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C82272 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84300 +
            (C41928 + C41929) * C82269 + (C41930 + C41931) * C84307 +
            (C41932 + C41933) * C82280 + (C41934 + C41935) * C45935) *
               C84529 +
           ((C45308 + C45309) * C82272 + (C45310 + C45311) * C84300 +
            (C44334 + C44335) * C82269 + (C44336 + C44337) * C84307 +
            (C52239 + C52240) * C82280 + (C52241 + C52242) * C45935) *
               C84344) *
              C1177 -
          (((C40962 * C17344 + C84198 * C17500 + C40960 * C17343 +
             C40953 * C17499) *
                C45935 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C82280 +
            (C44341 + C44340) * C84307 + (C44339 + C44338) * C82269 +
            (C45315 + C45314) * C84300 + (C45313 + C45312) * C82272) *
               C84344 +
           ((C52242 + C52241) * C45935 + (C52240 + C52239) * C82280 +
            (C44337 + C44336) * C84307 + (C44335 + C44334) * C82269 +
            (C45311 + C45310) * C84300 + (C45309 + C45308) * C82272) *
               C84529) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                      C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                      C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                         C40953 +
                     (C46335 + C46336 + C46337) * C84198) *
                        C84529 +
                    ((C53271 + C53272 + C53273) * C40953 +
                     (C51425 + C51426 + C51427) * C84198) *
                        C84344) *
                       C1177 -
                   (((C46297 * C17255 + C53259 + C53259 + C45935 * C17576 +
                      C82317 * C5114 + C53260 + C53260 + C84307 * C5437 +
                      C82324 * C4213 + C53261 + C53261 + C84300 * C4613) *
                         C84198 +
                     (C46297 * C17254 + C53262 + C53262 + C45935 * C17575 +
                      C82317 * C5115 + C53263 + C53263 + C84307 * C5438 +
                      C82324 * C4212 + C53264 + C53264 + C84300 * C4612) *
                         C40953) *
                        C84344 +
                    ((C51427 + C51426 + C51425) * C84198 +
                     (C53273 + C53272 + C53271) * C40953) *
                        C84529) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82272 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84300 +
            (C11976 + C11977) * C82269 + (C12302 + C12303) * C84307 +
            (C22895 + C22896) * C82280 + (C23224 + C23225) * C45935) *
               C40953 +
           ((C8897 + C8898) * C82272 + (C9124 + C9125) * C84300 +
            (C10999 + C11000) * C82269 + (C11329 + C11330) * C84307 +
            (C21941 + C21942) * C82280 + (C22258 + C22259) * C45935) *
               C84198) *
              C1177 -
          (((C8871 * C17344 + C84344 * C17658 + C8870 * C3544 +
             C84529 * C3885) *
                C45935 +
            (C8871 * C17255 + C84344 * C17422 + C8870 * C3442 +
             C84529 * C3629) *
                C82280 +
            (C8871 * C5200 + C84344 * C5520 + C8870 * C3545 + C84529 * C3886) *
                C84307 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C82269 +
            (C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C84300 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C82272) *
               C84198 +
           ((C8871 * C17343 + C84344 * C17657 + C8870 * C3546 +
             C84529 * C3887) *
                C45935 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C82280 +
            (C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
                C84307 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C82269 +
            (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C84300 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C82272) *
               C40953) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C8870 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84529 +
            (C45308 + C45309) * C8871 + (C45642 + C45643) * C84344) *
               C84300 +
           ((C41928 + C41929) * C8870 + (C42158 + C42159) * C84529 +
            (C44334 + C44335) * C8871 + (C44652 + C44653) * C84344) *
               C84307 +
           ((C41932 + C41933) * C8870 + (C42160 + C42161) * C84529 +
            (C52239 + C52240) * C8871 + (C52547 + C52548) * C84344) *
               C45935) *
              C1177 -
          (((C40962 * C17422 + C84198 * C17734 + C40960 * C17421 +
             C40953 * C17733) *
                C84344 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C8871 +
            (C52548 + C52547) * C84529 + (C52240 + C52239) * C8870) *
               C45935 +
           ((C44655 + C44654) * C84344 + (C44339 + C44338) * C8871 +
            (C44653 + C44652) * C84529 + (C44335 + C44334) * C8870) *
               C84307 +
           ((C45645 + C45644) * C84344 + (C45313 + C45312) * C8871 +
            (C45643 + C45642) * C84529 + (C45309 + C45308) * C8870) *
               C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C8870 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84529 +
                     (C52953 + C52954 + C52955) * C8871 +
                     (C53574 + C53575 + C53576) * C84344) *
                        C40953 +
                    ((C46062 + C46063 + C46064) * C8870 +
                     (C46587 + C46588 + C46589) * C84529 +
                     (C51113 + C51114 + C51115) * C8871 +
                     (C51728 + C51729 + C51730) * C84344) *
                        C84198) *
                       C1177 -
                   (((C82280 * C17422 + C45935 * C17810 + C82269 * C5280 +
                      C84307 * C5674 + C82272 * C4417 + C84300 * C4889) *
                         C84344 +
                     (C82280 * C17255 + C45935 * C17344 + C82269 * C5114 +
                      C84307 * C5200 + C82272 * C4213 + C84300 * C4308) *
                         C8871 +
                     (C51730 + C51729 + C51728) * C84529 +
                     (C51115 + C51114 + C51113) * C8870) *
                        C84198 +
                    ((C82280 * C17421 + C45935 * C17809 + C82269 * C5281 +
                      C84307 * C5675 + C82272 * C4416 + C84300 * C4888) *
                         C84344 +
                     (C82280 * C17254 + C45935 * C17343 + C82269 * C5115 +
                      C84307 * C5201 + C82272 * C4212 + C84300 * C4307) *
                         C8871 +
                     (C53576 + C53575 + C53574) * C84529 +
                     (C52955 + C52954 + C52953) * C8870) *
                        C40953) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eezz[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 +
                      C9343 * C1183 + C9346 + C9346 + C84344 * C1589) *
                         C84300 +
                     (C12621 + C12622) * C84307 + (C23544 + C23545) * C45935) *
                        C40953 +
                    ((C9379 + C9380) * C84300 + (C11655 + C11656) * C84307 +
                     (C22571 + C22572) * C45935) *
                        C84198) *
                       C1177 -
                   (((C9343 * C17255 + C24462 + C24462 + C84344 * C17886 +
                      C9342 * C3442 + C24463 + C24463 + C84529 * C4125) *
                         C45935 +
                     (C9343 * C5114 + C13541 + C13541 + C84344 * C5751 +
                      C9342 * C3445 + C13542 + C13542 + C84529 * C4126) *
                         C84307 +
                     (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 +
                      C9342 * C1182 + C10659 + C10659 + C84529 * C1588) *
                         C84300) *
                        C84198 +
                    ((C9343 * C17254 + C24464 + C24464 + C84344 * C17885 +
                      C9342 * C3443 + C24465 + C24465 + C84529 * C4127) *
                         C45935 +
                     (C9343 * C5115 + C13543 + C13543 + C84344 * C5752 +
                      C9342 * C3446 + C13544 + C13544 + C84529 * C4128) *
                         C84307 +
                     (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 +
                      C9342 * C1183 + C10661 + C10661 + C84529 * C1589) *
                         C84300) *
                        C40953) *
                       C1178) *
                  C84604 * C84605) /
                 (p * q * std::sqrt(p + q));
    d2eexx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84257 * C84606 +
           (C40959 * C723 + C40966 + C40966 + C40953 * C733 + C40961 * C722 +
            C40967 + C40967 + C84198 * C732) *
               C84257 * C84599 +
           (C40959 * C1681 + C40968 + C40968 + C40953 * C1689 + C40961 * C1682 +
            C40969 + C40969 + C84198 * C1690) *
               C84257 * C84586 +
           (C40959 * C2599 + C40970 + C40970 + C40953 * C2605 + C40961 * C2598 +
            C40971 + C40971 + C84198 * C2604) *
               C84257 * C84536) *
              C84603 * C84604 * C90 -
          ((C40961 * C2597 + C40972 + C40972 + C84198 * C2603 + C40959 * C2598 +
            C40973 + C40973 + C40953 * C2604) *
               C84257 * C84536 +
           (C40961 * C1683 + C40974 + C40974 + C84198 * C1691 + C40959 * C1682 +
            C40975 + C40975 + C40953 * C1690) *
               C84257 * C84586 +
           (C40961 * C721 + C40976 + C40976 + C84198 * C731 + C40959 * C722 +
            C40977 + C40977 + C40953 * C732) *
               C84257 * C84599 +
           (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
            C40979 + C40979 + C40953 * C115) *
               C84257 * C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C84257 * C38937 +
           (C38939 * C723 + C38952 + C38952 + C84602 * C733 + C38941 * C722 +
            C38953 + C38953 + C84592 * C732 + C38943 * C721 + C38954 + C38954 +
            C84576 * C731 + C38945 * C720 + C38955 + C38955 + C84527 * C730) *
               C84257 * C84304) *
              C84603 * C84604 * C90 -
          ((C38945 * C719 + C38956 + C38956 + C84527 * C729 + C38943 * C720 +
            C38957 + C38957 + C84576 * C730 + C38941 * C721 + C38958 + C38958 +
            C84592 * C731 + C38939 * C722 + C38959 + C38959 + C84602 * C732) *
               C84257 * C84304 +
           (C38945 * C106 + C38960 + C38960 + C84527 * C118 + C38943 * C105 +
            C38961 + C38961 + C84576 * C117 + C38941 * C104 + C38962 + C38962 +
            C84592 * C116 + C38939 * C103 + C38963 + C38963 + C84602 * C115) *
               C84257 * C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C84597 +
            (C40959 * C1183 + C42369 + C42369 + C40953 * C1193 +
             C40961 * C1182 + C42368 + C42368 + C84198 * C1192) *
                C84583 +
            (C40959 * C4212 + C43004 + C43004 + C40953 * C4220 +
             C40961 * C4213 + C43005 + C43005 + C84198 * C4221) *
                C84561) *
               C38937 +
           ((C41688 + C41689) * C84597 +
            (C40959 * C3446 + C42367 + C42367 + C40953 * C3458 +
             C40961 * C3445 + C42366 + C42366 + C84198 * C3457) *
                C84583 +
            (C40959 * C5115 + C43006 + C43006 + C40953 * C5121 +
             C40961 * C5114 + C43007 + C43007 + C84198 * C5120) *
                C84561) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C40961 * C5113 + C43008 + C43008 + C84198 * C5119 +
             C40959 * C5114 + C43009 + C43009 + C40953 * C5120) *
                C84561 +
            (C40961 * C3444 + C43010 + C43010 + C84198 * C3456 +
             C40959 * C3445 + C43011 + C43011 + C40953 * C3457) *
                C84583 +
            (C40961 * C721 + C40976 + C40976 + C84198 * C731 + C40959 * C722 +
             C40977 + C40977 + C40953 * C732) *
                C84597) *
               C84304 +
           ((C40961 * C4214 + C43012 + C43012 + C84198 * C4222 +
             C40959 * C4213 + C43013 + C43013 + C40953 * C4221) *
                C84561 +
            (C40961 * C1181 + C43014 + C43014 + C84198 * C1191 +
             C40959 * C1182 + C43015 + C43015 + C40953 * C1192) *
                C84583 +
            (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
             C40979 + C40979 + C40953 * C115) *
                C84597) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C40960 +
           (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
            C41047 * C1685 + C84586 * C1792 + C41048 * C2602 + C84536 * C2718) *
               C40953 +
           (C41066 + C41067 + C41068 + C41069) * C40962 +
           (C41070 + C41071 + C41072 + C41073) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C41048 * C2600 + C84536 * C2716 + C41047 * C1687 + C84586 * C1794 +
            C41046 * C726 + C84599 * C788 + C41045 * C110 + C84606 * C181) *
               C84198 +
           (C41048 * C2597 + C84536 * C2713 + C41047 * C1683 + C84586 * C1790 +
            C41046 * C721 + C84599 * C783 + C41045 * C104 + C84606 * C175) *
               C40962 +
           (C41073 + C41072 + C41071 + C41070) * C40953 +
           (C41069 + C41068 + C41067 + C41066) * C40960) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C38940 +
           (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
               C84602 +
           (C39056 + C39057) * C38942 + (C39058 + C39059) * C84592 +
           (C39060 + C39061) * C38944 + (C39062 + C39063) * C84576 +
           (C39064 + C39065) * C38946 + (C39066 + C39067) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C39030 * C724 + C84304 * C786 + C39029 * C112 + C38937 * C183) *
               C84527 +
           (C39030 * C719 + C84304 * C781 + C39029 * C106 + C38937 * C177) *
               C38946 +
           (C39067 + C39066) * C84576 + (C39065 + C39064) * C38944 +
           (C39063 + C39062) * C84592 + (C39061 + C39060) * C38942 +
           (C39059 + C39058) * C84602 + (C39057 + C39056) * C38940) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C40960 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C40953 +
            (C39056 + C39057) * C40962 + (C39058 + C39059) * C84198) *
               C84597 +
           ((C39029 * C1183 + C38937 * C1245 + C39030 * C3446 +
             C84304 * C3547) *
                C40960 +
            (C39029 * C1188 + C38937 * C1250 + C39030 * C3452 +
             C84304 * C3553) *
                C40953 +
            (C43130 + C43131) * C40962 + (C43132 + C43133) * C84198) *
               C84583 +
           ((C39029 * C4212 + C38937 * C4307 + C39030 * C5115 +
             C84304 * C5201) *
                C40960 +
            (C39029 * C4216 + C38937 * C4311 + C39030 * C5118 +
             C84304 * C5204) *
                C40953 +
            (C43134 + C43135) * C40962 + (C43136 + C43137) * C84198) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C39030 * C5116 + C84304 * C5202 + C39029 * C4218 +
             C38937 * C4313) *
                C84198 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C40962 +
            (C43137 + C43136) * C40953 + (C43135 + C43134) * C40960) *
               C84561 +
           ((C39030 * C3450 + C84304 * C3549 + C39029 * C1186 +
             C38937 * C1248) *
                C84198 +
            (C39030 * C3444 + C84304 * C3543 + C39029 * C1181 +
             C38937 * C1243) *
                C40962 +
            (C43133 + C43132) * C40953 + (C43131 + C43130) * C40960) *
               C84583 +
           ((C39063 + C39062) * C84198 + (C39061 + C39060) * C40962 +
            (C39059 + C39058) * C40953 + (C39057 + C39056) * C40960) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C40960 +
            (C251 * C108 + C84257 * C258) * C40953 + C281 * C40962 +
            C282 * C84198) *
               C84606 +
           (C2816 * C40960 + C2817 * C40953 + C1931 * C40962 + C1932 * C84198) *
               C84599 +
           (C2818 * C40960 + C2819 * C40953 + C1935 * C40962 + C1936 * C84198) *
               C84586 +
           (C16433 * C40960 + C16434 * C40953 + C19825 * C40962 +
            C19826 * C84198) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C251 * C2600 + C84257 * C2796) * C84198 +
            (C251 * C2597 + C84257 * C2793) * C40962 + C19826 * C40953 +
            C19825 * C40960) *
               C84536 +
           (C1938 * C84198 + C1937 * C40962 + C1936 * C40953 + C1935 * C40960) *
               C84586 +
           (C1934 * C84198 + C1933 * C40962 + C1932 * C40953 + C1931 * C40960) *
               C84599 +
           (C284 * C84198 + C283 * C40962 + C282 * C40953 + C281 * C40960) *
               C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C38940 +
            (C251 * C108 + C84257 * C258) * C84602 + C281 * C38942 +
            C282 * C84592 + C283 * C38944 + C284 * C84576 + C285 * C38946 +
            C286 * C84527) *
               C38937 +
           (C2816 * C38940 + C2817 * C84602 + C1931 * C38942 + C1932 * C84592 +
            C1933 * C38944 + C1934 * C84576 + C6883 * C38946 + C6884 * C84527) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C251 * C724 + C84257 * C838) * C84527 +
            (C251 * C719 + C84257 * C833) * C38946 + C6884 * C84576 +
            C6883 * C38944 + C1934 * C84592 + C1933 * C38942 + C1932 * C84602 +
            C1931 * C38940) *
               C84304 +
           (C288 * C84527 + C287 * C38946 + C286 * C84576 + C285 * C38944 +
            C284 * C84592 + C283 * C38942 + C282 * C84602 + C281 * C38940) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C40960 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C40953 +
            (C4449 + C4450 + C4451) * C40962 +
            (C4452 + C4453 + C4454) * C84198) *
               C38937 +
           ((C18174 + C18175 + C18176) * C40960 +
            (C18177 + C18178 + C18179) * C40953 +
            (C43248 + C43249 + C43250) * C40962 +
            (C43251 + C43252 + C43253) * C84198) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C4415 * C5116 + C84561 * C5282 + C4414 * C3450 + C84583 * C3637 +
             C4413 * C726 + C84597 * C840) *
                C84198 +
            (C4415 * C5113 + C84561 * C5279 + C4414 * C3444 + C84583 * C3631 +
             C4413 * C721 + C84597 * C835) *
                C40962 +
            (C43253 + C43252 + C43251) * C40953 +
            (C43250 + C43249 + C43248) * C40960) *
               C84304 +
           ((C4460 + C4459 + C4458) * C84198 +
            (C4457 + C4456 + C4455) * C40962 +
            (C4454 + C4453 + C4452) * C40953 +
            (C4451 + C4450 + C4449) * C40960) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C41045 +
           (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
               C84606 +
           (C40960 * C723 + C40953 * C728 + C40962 * C722 + C84198 * C727) *
               C41046 +
           (C40960 * C785 + C40953 * C889 + C40962 * C784 + C84198 * C888) *
               C84599 +
           (C40960 * C1681 + C40953 * C1685 + C40962 * C1682 + C84198 * C1686) *
               C41047 +
           (C40960 * C1788 + C40953 * C2012 + C40962 * C1789 + C84198 * C2013) *
               C84586 +
           (C40960 * C2599 + C40953 * C2602 + C40962 * C2598 + C84198 * C2601) *
               C41048 +
           (C40960 * C2715 + C40953 * C2899 + C40962 * C2714 + C84198 * C2898) *
               C84536) *
              C84257 * C84603 * C84604 * C90 -
          ((C40962 * C2713 + C84198 * C2897 + C40960 * C2714 + C40953 * C2898) *
               C84536 +
           (C40962 * C2597 + C84198 * C2600 + C40960 * C2598 + C40953 * C2601) *
               C41048 +
           (C40962 * C1790 + C84198 * C2014 + C40960 * C1789 + C40953 * C2013) *
               C84586 +
           (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 + C40953 * C1686) *
               C41047 +
           (C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
               C84599 +
           (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
               C41046 +
           (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
               C84606 +
           (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
               C41045) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C39029 +
           (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
            C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
               C38937 +
           (C38940 * C723 + C84602 * C728 + C38942 * C722 + C84592 * C727 +
            C38944 * C721 + C84576 * C726 + C38946 * C720 + C84527 * C725) *
               C39030 +
           (C38940 * C785 + C84602 * C889 + C38942 * C784 + C84592 * C888 +
            C38944 * C783 + C84576 * C887 + C38946 * C782 + C84527 * C886) *
               C84304) *
              C84257 * C84603 * C84604 * C90 -
          ((C38946 * C781 + C84527 * C885 + C38944 * C782 + C84576 * C886 +
            C38942 * C783 + C84592 * C887 + C38940 * C784 + C84602 * C888) *
               C84304 +
           (C38946 * C719 + C84527 * C724 + C38944 * C720 + C84576 * C725 +
            C38942 * C721 + C84592 * C726 + C38940 * C722 + C84602 * C727) *
               C39030 +
           (C38946 * C177 + C84527 * C334 + C38944 * C176 + C84576 * C333 +
            C38942 * C175 + C84592 * C332 + C38940 * C174 + C84602 * C331) *
               C38937 +
           (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
            C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
               C39029) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C39029 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C38937 +
            (C41928 + C41929) * C39030 + (C41930 + C41931) * C84304) *
               C84597 +
           ((C40960 * C1183 + C40953 * C1188 + C40962 * C1182 +
             C84198 * C1187) *
                C39029 +
            (C40960 * C1245 + C40953 * C1349 + C40962 * C1244 +
             C84198 * C1348) *
                C38937 +
            (C40960 * C3446 + C40953 * C3452 + C40962 * C3445 +
             C84198 * C3451) *
                C39030 +
            (C40960 * C3547 + C40953 * C3719 + C40962 * C3545 +
             C84198 * C3718) *
                C84304) *
               C84583 +
           ((C40960 * C4212 + C40953 * C4216 + C40962 * C4213 +
             C84198 * C4217) *
                C39029 +
            (C40960 * C4307 + C40953 * C4534 + C40962 * C4308 +
             C84198 * C4535) *
                C38937 +
            (C40960 * C5115 + C40953 * C5118 + C40962 * C5114 +
             C84198 * C5117) *
                C39030 +
            (C40960 * C5201 + C40953 * C5361 + C40962 * C5200 +
             C84198 * C5360) *
                C84304) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C40962 * C5199 + C84198 * C5359 + C40960 * C5200 +
             C40953 * C5360) *
                C84304 +
            (C40962 * C5113 + C84198 * C5116 + C40960 * C5114 +
             C40953 * C5117) *
                C39030 +
            (C40962 * C4309 + C84198 * C4536 + C40960 * C4308 +
             C40953 * C4535) *
                C38937 +
            (C40962 * C4214 + C84198 * C4218 + C40960 * C4213 +
             C40953 * C4217) *
                C39029) *
               C84561 +
           ((C40962 * C3543 + C84198 * C3717 + C40960 * C3545 +
             C40953 * C3718) *
                C84304 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C39030 +
            (C40962 * C1243 + C84198 * C1347 + C40960 * C1244 +
             C40953 * C1348) *
                C38937 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C39029) *
               C84583 +
           ((C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
                C84304 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C39030 +
            (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
                C38937 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C39029) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41271 * C102 + C41276 + C41276 + C84606 * C379 + C41272 * C723 +
            C41277 + C41277 + C84599 * C936 + C41273 * C1681 + C41278 + C41278 +
            C84586 * C2093 + C41274 * C2599 + C41279 + C41279 +
            C84536 * C3012) *
               C40953 +
           (C41304 + C41305 + C41306 + C41307) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C41274 * C2597 + C41292 + C41292 + C84536 * C3010 + C41273 * C1683 +
            C41293 + C41293 + C84586 * C2095 + C41272 * C721 + C41294 + C41294 +
            C84599 * C934 + C41271 * C104 + C41295 + C41295 + C84606 * C381) *
               C84198 +
           (C41307 + C41306 + C41305 + C41304) * C40953) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
            C39269 + C39269 + C84304 * C936) *
               C84602 +
           (C39302 + C39303) * C84592 + (C39304 + C39305) * C84576 +
           (C39306 + C39307) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C39266 * C719 + C39288 + C39288 + C84304 * C932 + C39265 * C106 +
            C39289 + C39289 + C38937 * C383) *
               C84527 +
           (C39307 + C39306) * C84576 + (C39305 + C39304) * C84592 +
           (C39303 + C39302) * C84602) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
             C39269 + C39269 + C84304 * C936) *
                C40953 +
            (C39302 + C39303) * C84198) *
               C84597 +
           ((C39265 * C1183 + C40623 + C40623 + C38937 * C1396 +
             C39266 * C3446 + C40622 + C40622 + C84304 * C3799) *
                C40953 +
            (C43472 + C43473) * C84198) *
               C84583 +
           ((C39265 * C4212 + C43454 + C43454 + C38937 * C4612 +
             C39266 * C5115 + C43455 + C43455 + C84304 * C5438) *
                C40953 +
            (C43474 + C43475) * C84198) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C39266 * C5113 + C43462 + C43462 + C84304 * C5436 +
             C39265 * C4214 + C43463 + C43463 + C38937 * C4614) *
                C84198 +
            (C43475 + C43474) * C40953) *
               C84561 +
           ((C39266 * C3444 + C40618 + C40618 + C84304 * C3795 +
             C39265 * C1181 + C40619 + C40619 + C38937 * C1394) *
                C84198 +
            (C43473 + C43472) * C40953) *
               C84583 +
           ((C39305 + C39304) * C84198 + (C39303 + C39302) * C40953) * C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[6] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C41045 +
                     (C251 * C173 + C84257 * C453) * C84606 + C2816 * C41046 +
                     C3104 * C84599 + C2818 * C41047 + C3105 * C84586 +
                     C16433 * C41048 + C16603 * C84536) *
                        C40953 +
                    (C41374 + C41375 + C41376 + C41377 + C41378 + C41379 +
                     C41380 + C41381) *
                        C84198) *
                       C84603 * C84604 * C90 -
                   (((C251 * C2713 + C84257 * C3096) * C84536 +
                     (C251 * C2597 + C84257 * C2793) * C41048 + C2237 * C84586 +
                     C1937 * C41047 + C2236 * C84599 + C1933 * C41046 +
                     C473 * C84606 + C283 * C41045) *
                        C84198 +
                    (C41381 + C41380 + C41379 + C41378 + C41377 + C41376 +
                     C41375 + C41374) *
                        C40953) *
                       C84603 * C84604 * C91)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C39029 +
                     (C251 * C173 + C84257 * C453) * C38937 + C2816 * C39030 +
                     C3104 * C84304) *
                        C84602 +
                    (C39374 + C39375 + C39376 + C39377) * C84592 +
                    (C39378 + C39379 + C39380 + C39381) * C84576 +
                    (C39382 + C39383 + C39384 + C39385) * C84527) *
                       C84603 * C84604 * C90 -
                   (((C251 * C781 + C84257 * C984) * C84304 +
                     (C251 * C719 + C84257 * C833) * C39030 + C475 * C38937 +
                     C287 * C39029) *
                        C84527 +
                    (C39385 + C39384 + C39383 + C39382) * C84576 +
                    (C39381 + C39380 + C39379 + C39378) * C84592 +
                    (C39377 + C39376 + C39375 + C39374) * C84602) *
                       C84603 * C84604 * C91)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 +
                      C84583 * C1297 + C4415 * C4212 + C84561 * C4416) *
                         C39029 +
                     (C4413 * C173 + C84597 * C453 + C4414 * C1245 +
                      C84583 * C1448 + C4415 * C4307 + C84561 * C4714) *
                         C38937 +
                     (C18174 + C18175 + C18176) * C39030 +
                     (C18453 + C18454 + C18455) * C84304) *
                        C40953 +
                    ((C4449 + C4450 + C4451) * C39029 +
                     (C4731 + C4732 + C4733) * C38937 +
                     (C43248 + C43249 + C43250) * C39030 +
                     (C43580 + C43581 + C43582) * C84304) *
                        C84198) *
                       C84603 * C84604 * C90 -
                   (((C4415 * C5199 + C84561 * C5519 + C4414 * C3543 +
                      C84583 * C3884 + C4413 * C783 + C84597 * C986) *
                         C84304 +
                     (C4415 * C5113 + C84561 * C5279 + C4414 * C3444 +
                      C84583 * C3631 + C4413 * C721 + C84597 * C835) *
                         C39030 +
                     (C4736 + C4735 + C4734) * C38937 +
                     (C4457 + C4456 + C4455) * C39029) *
                        C84198 +
                    ((C43582 + C43581 + C43580) * C84304 +
                     (C43250 + C43249 + C43248) * C39030 +
                     (C4733 + C4732 + C4731) * C38937 +
                     (C4451 + C4450 + C4449) * C39029) *
                        C40953) *
                       C84603 * C84604 * C91)) /
                     (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C251 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84257) *
               C84606 +
           ((C40960 * C723 + C40953 * C728 + C40962 * C722 + C84198 * C727) *
                C251 +
            (C40960 * C837 + C40953 * C1035 + C40962 * C836 + C84198 * C1034) *
                C84257) *
               C84599 +
           ((C40960 * C1681 + C40953 * C1685 + C40962 * C1682 +
             C84198 * C1686) *
                C251 +
            (C40960 * C1906 + C40953 * C2315 + C40962 * C1907 +
             C84198 * C2316) *
                C84257) *
               C84586 +
           ((C40960 * C2599 + C40953 * C2602 + C40962 * C2598 +
             C84198 * C2601) *
                C251 +
            (C40960 * C2795 + C40953 * C3181 + C40962 * C2794 +
             C84198 * C3180) *
                C84257) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C40962 * C2793 + C84198 * C3179 + C40960 * C2794 +
             C40953 * C3180) *
                C84257 +
            (C40962 * C2597 + C84198 * C2600 + C40960 * C2598 +
             C40953 * C2601) *
                C251) *
               C84536 +
           ((C40962 * C1908 + C84198 * C2317 + C40960 * C1907 +
             C40953 * C2316) *
                C84257 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C251) *
               C84586 +
           ((C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C84257 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C251) *
               C84599 +
           ((C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C84257 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C251) *
               C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C251 +
            (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
             C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
                C84257) *
               C38937 +
           ((C38940 * C723 + C84602 * C728 + C38942 * C722 + C84592 * C727 +
             C38944 * C721 + C84576 * C726 + C38946 * C720 + C84527 * C725) *
                C251 +
            (C38940 * C837 + C84602 * C1035 + C38942 * C836 + C84592 * C1034 +
             C38944 * C835 + C84576 * C1033 + C38946 * C834 + C84527 * C1032) *
                C84257) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C38946 * C833 + C84527 * C1031 + C38944 * C834 + C84576 * C1032 +
             C38942 * C835 + C84592 * C1033 + C38940 * C836 + C84602 * C1034) *
                C84257 +
            (C38946 * C719 + C84527 * C724 + C38944 * C720 + C84576 * C725 +
             C38942 * C721 + C84592 * C726 + C38940 * C722 + C84602 * C727) *
                C251) *
               C84304 +
           ((C38946 * C256 + C84527 * C525 + C38944 * C255 + C84576 * C524 +
             C38942 * C254 + C84592 * C523 + C38940 * C253 + C84602 * C522) *
                C84257 +
            (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
             C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
                C251) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C4413 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84597 +
            (C40960 * C1183 + C40953 * C1188 + C40962 * C1182 +
             C84198 * C1187) *
                C4414 +
            (C40960 * C1297 + C40953 * C1495 + C40962 * C1296 +
             C84198 * C1494) *
                C84583 +
            (C40960 * C4212 + C40953 * C4216 + C40962 * C4213 +
             C84198 * C4217) *
                C4415 +
            (C40960 * C4416 + C40953 * C4810 + C40962 * C4417 +
             C84198 * C4811) *
                C84561) *
               C38937 +
           ((C41928 + C41929) * C4413 + (C42158 + C42159) * C84597 +
            (C40960 * C3446 + C40953 * C3452 + C40962 * C3445 +
             C84198 * C3451) *
                C4414 +
            (C40960 * C3633 + C40953 * C3968 + C40962 * C3632 +
             C84198 * C3967) *
                C84583 +
            (C40960 * C5115 + C40953 * C5118 + C40962 * C5114 +
             C84198 * C5117) *
                C4415 +
            (C40960 * C5281 + C40953 * C5598 + C40962 * C5280 +
             C84198 * C5597) *
                C84561) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C40962 * C5279 + C84198 * C5596 + C40960 * C5280 +
             C40953 * C5597) *
                C84561 +
            (C40962 * C5113 + C84198 * C5116 + C40960 * C5114 +
             C40953 * C5117) *
                C4415 +
            (C40962 * C3631 + C84198 * C3966 + C40960 * C3632 +
             C40953 * C3967) *
                C84583 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C4414 +
            (C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C84597 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C4413) *
               C84304 +
           ((C40962 * C4418 + C84198 * C4812 + C40960 * C4417 +
             C40953 * C4811) *
                C84561 +
            (C40962 * C4214 + C84198 * C4218 + C40960 * C4213 +
             C40953 * C4217) *
                C4415 +
            (C40962 * C1295 + C84198 * C1493 + C40960 * C1296 +
             C40953 * C1494) *
                C84583 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C4414 +
            (C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C84597 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C4413) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C251 +
            (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
             C41047 * C1906 + C84586 * C2393 + C41048 * C2795 +
             C84536 * C3276) *
                C84257) *
               C40953 +
           ((C41066 + C41067 + C41068 + C41069) * C251 +
            (C41522 + C41523 + C41524 + C41525) * C84257) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C41048 * C2793 + C84536 * C3274 + C41047 * C1908 + C84586 * C2395 +
             C41046 * C835 + C84599 * C1080 + C41045 * C254 + C84606 * C571) *
                C84257 +
            (C41048 * C2597 + C84536 * C2713 + C41047 * C1683 + C84586 * C1790 +
             C41046 * C721 + C84599 * C783 + C41045 * C104 + C84606 * C175) *
                C251) *
               C84198 +
           ((C41525 + C41524 + C41523 + C41522) * C84257 +
            (C41069 + C41068 + C41067 + C41066) * C251) *
               C40953) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C251 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84257) *
               C84602 +
           ((C39056 + C39057) * C251 + (C39530 + C39531) * C84257) * C84592 +
           ((C39060 + C39061) * C251 + (C39532 + C39533) * C84257) * C84576 +
           ((C39064 + C39065) * C251 + (C39534 + C39535) * C84257) * C84527) *
              C84603 * C84604 * C90 -
          (((C39030 * C833 + C84304 * C1078 + C39029 * C256 + C38937 * C573) *
                C84257 +
            (C39030 * C719 + C84304 * C781 + C39029 * C106 + C38937 * C177) *
                C251) *
               C84527 +
           ((C39535 + C39534) * C84257 + (C39065 + C39064) * C251) * C84576 +
           ((C39533 + C39532) * C84257 + (C39061 + C39060) * C251) * C84592 +
           ((C39531 + C39530) * C84257 + (C39057 + C39056) * C251) * C84602) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C4413 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84597 +
            (C39029 * C1183 + C38937 * C1245 + C39030 * C3446 +
             C84304 * C3547) *
                C4414 +
            (C39029 * C1297 + C38937 * C1542 + C39030 * C3633 +
             C84304 * C4048) *
                C84583 +
            (C39029 * C4212 + C38937 * C4307 + C39030 * C5115 +
             C84304 * C5201) *
                C4415 +
            (C39029 * C4416 + C38937 * C4888 + C39030 * C5281 +
             C84304 * C5675) *
                C84561) *
               C40953 +
           ((C39056 + C39057) * C4413 + (C39530 + C39531) * C84597 +
            (C43130 + C43131) * C4414 + (C43787 + C43788) * C84583 +
            (C43134 + C43135) * C4415 + (C43789 + C43790) * C84561) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C39030 * C5279 + C84304 * C5673 + C39029 * C4418 +
             C38937 * C4890) *
                C84561 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C4415 +
            (C39030 * C3631 + C84304 * C4044 + C39029 * C1295 +
             C38937 * C1540) *
                C84583 +
            (C39030 * C3444 + C84304 * C3543 + C39029 * C1181 +
             C38937 * C1243) *
                C4414 +
            (C39533 + C39532) * C84597 + (C39061 + C39060) * C4413) *
               C84198 +
           ((C43790 + C43789) * C84561 + (C43135 + C43134) * C4415 +
            (C43788 + C43787) * C84583 + (C43131 + C43130) * C4414 +
            (C39531 + C39530) * C84597 + (C39057 + C39056) * C4413) *
               C40953) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[6] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84606 +
                     C3366 * C84599 + C3367 * C84586 + C16763 * C84536) *
                        C40953 +
                    (C41592 + C41593 + C41594 + C41595) * C84198) *
                       C84603 * C84604 * C90 -
                   (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84536 +
                     C2519 * C84586 + C2518 * C84599 + C668 * C84606) *
                        C84198 +
                    (C41595 + C41594 + C41593 + C41592) * C40953) *
                       C84603 * C84604 * C91)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C637 * C102 + C645 + C645 + C84257 * C638) * C38937 +
                     C3366 * C84304) *
                        C84602 +
                    (C39602 + C39603) * C84592 + (C39604 + C39605) * C84576 +
                    (C39606 + C39607) * C84527) *
                       C84603 * C84604 * C90 -
                   (((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84304 +
                     C670 * C38937) *
                        C84527 +
                    (C39607 + C39606) * C84576 + (C39605 + C39604) * C84592 +
                    (C39603 + C39602) * C84602) *
                       C84603 * C84604 * C91)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4990 * C102 + C4998 + C4998 + C84597 * C638 +
                      C4991 * C1183 + C4999 + C4999 + C84583 * C1589 +
                      C4992 * C4212 + C5000 + C5000 + C84561 * C4993) *
                         C38937 +
                     (C18735 + C18736 + C18737) * C84304) *
                        C40953 +
                    ((C5034 + C5035 + C5036) * C38937 +
                     (C43901 + C43902 + C43903) * C84304) *
                        C84198) *
                       C84603 * C84604 * C90 -
                   (((C4992 * C5113 + C5754 + C5754 + C84561 * C5750 +
                      C4991 * C3444 + C5755 + C5755 + C84583 * C4124 +
                      C4990 * C721 + C5756 + C5756 + C84597 * C1127) *
                         C84304 +
                     (C5039 + C5038 + C5037) * C38937) *
                        C84198 +
                    ((C43903 + C43902 + C43901) * C84304 +
                     (C5036 + C5035 + C5034) * C38937) *
                        C40953) *
                       C84603 * C84604 * C91)) /
                     (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84257 * C84606 +
           (C41688 + C41689) * C84257 * C84599 +
           (C41690 + C41691) * C84257 * C84586 +
           (C41692 + C41693) * C84257 * C84536) *
              C84603 * C716 -
          ((C40961 * C15869 + C41674 + C41674 + C84198 * C15873 +
            C40959 * C15868 + C41675 + C41675 + C40953 * C15872) *
               C84257 * C84536 +
           (C41693 + C41692) * C84257 * C84586 +
           (C41691 + C41690) * C84257 * C84599 +
           (C41689 + C41688) * C84257 * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C84257 * C38937 +
           (C39694 + C39695 + C39696 + C39697) * C84257 * C84304) *
              C84603 * C716 -
          ((C38945 * C1684 + C39682 + C39682 + C84527 * C1692 + C38943 * C1683 +
            C39683 + C39683 + C84576 * C1691 + C38941 * C1682 + C39684 +
            C39684 + C84592 * C1690 + C38939 * C1681 + C39685 + C39685 +
            C84602 * C1689) *
               C84257 * C84304 +
           (C39697 + C39696 + C39695 + C39694) * C84257 * C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C84597 +
            (C40959 * C1183 + C42369 + C42369 + C40953 * C1193 +
             C40961 * C1182 + C42368 + C42368 + C84198 * C1192) *
                C84583 +
            (C40959 * C4212 + C43004 + C43004 + C40953 * C4220 +
             C40961 * C4213 + C43005 + C43005 + C84198 * C4221) *
                C84561) *
               C38937 +
           ((C41688 + C41689) * C84597 + (C44020 + C44021) * C84583 +
            (C44022 + C44023) * C84561) *
               C84304) *
              C84603 * C716 -
          (((C40961 * C17255 + C44010 + C44010 + C84198 * C17259 +
             C40959 * C17254 + C44011 + C44011 + C40953 * C17258) *
                C84561 +
            (C40961 * C3442 + C42364 + C42364 + C84198 * C3454 +
             C40959 * C3443 + C42365 + C42365 + C40953 * C3455) *
                C84583 +
            (C41691 + C41690) * C84597) *
               C84304 +
           ((C44023 + C44022) * C84561 + (C44021 + C44020) * C84583 +
            (C41689 + C41688) * C84597) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C40960 +
           (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
            C41047 * C1685 + C84586 * C1792 + C41048 * C2602 + C84536 * C2718) *
               C40953 +
           (C41066 + C41067 + C41068 + C41069) * C40962 +
           (C41070 + C41071 + C41072 + C41073) * C84198) *
              C84257 * C84603 * C716 -
          ((C41048 * C15871 + C84536 * C15934 + C41047 * C2601 +
            C84586 * C2717 + C41046 * C1686 + C84599 * C1793 + C41045 * C727 +
            C84606 * C789) *
               C84198 +
           (C41048 * C15869 + C84536 * C15932 + C41047 * C2598 +
            C84586 * C2714 + C41046 * C1682 + C84599 * C1789 + C41045 * C722 +
            C84606 * C784) *
               C40962 +
           (C41048 * C15870 + C84536 * C15933 + C41047 * C2602 +
            C84586 * C2718 + C41046 * C1685 + C84599 * C1792 + C41045 * C728 +
            C84606 * C790) *
               C40953 +
           (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
            C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
            C84606 * C785) *
               C40960) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C38940 +
           (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
               C84602 +
           (C39056 + C39057) * C38942 + (C39058 + C39059) * C84592 +
           (C39060 + C39061) * C38944 + (C39062 + C39063) * C84576 +
           (C39064 + C39065) * C38946 + (C39066 + C39067) * C84527) *
              C84257 * C84603 * C716 -
          ((C39030 * C1688 + C84304 * C1795 + C39029 * C725 + C38937 * C787) *
               C84527 +
           (C39030 * C1684 + C84304 * C1791 + C39029 * C720 + C38937 * C782) *
               C38946 +
           (C39030 * C1687 + C84304 * C1794 + C39029 * C726 + C38937 * C788) *
               C84576 +
           (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
               C38944 +
           (C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
               C84592 +
           (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
               C38942 +
           (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
               C84602 +
           (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
               C38940) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C40960 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C40953 +
            (C39056 + C39057) * C40962 + (C39058 + C39059) * C84198) *
               C84597 +
           ((C39029 * C1183 + C38937 * C1245 + C39030 * C3446 +
             C84304 * C3547) *
                C40960 +
            (C39029 * C1188 + C38937 * C1250 + C39030 * C3452 +
             C84304 * C3553) *
                C40953 +
            (C43130 + C43131) * C40962 + (C43132 + C43133) * C84198) *
               C84583 +
           ((C39029 * C4212 + C38937 * C4307 + C39030 * C5115 +
             C84304 * C5201) *
                C40960 +
            (C39029 * C4216 + C38937 * C4311 + C39030 * C5118 +
             C84304 * C5204) *
                C40953 +
            (C43134 + C43135) * C40962 + (C43136 + C43137) * C84198) *
               C84561) *
              C84603 * C716 -
          (((C39030 * C17257 + C84304 * C17346 + C39029 * C5117 +
             C38937 * C5203) *
                C84198 +
            (C39030 * C17255 + C84304 * C17344 + C39029 * C5114 +
             C38937 * C5200) *
                C40962 +
            (C39030 * C17256 + C84304 * C17345 + C39029 * C5118 +
             C38937 * C5204) *
                C40953 +
            (C39030 * C17254 + C84304 * C17343 + C39029 * C5115 +
             C38937 * C5201) *
                C40960) *
               C84561 +
           ((C39030 * C3448 + C84304 * C3550 + C39029 * C3451 +
             C38937 * C3551) *
                C84198 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C40962 +
            (C39030 * C3449 + C84304 * C3552 + C39029 * C3452 +
             C38937 * C3553) *
                C40953 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C40960) *
               C84583 +
           ((C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
                C84198 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C40962 +
            (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
                C40953 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C40960) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C40960 +
                     (C251 * C108 + C84257 * C258) * C40953 + C281 * C40962 +
                     C282 * C84198) *
                        C84606 +
                    (C41826 + C41827 + C41828 + C41829) * C84599 +
                    (C41830 + C41831 + C41832 + C41833) * C84586 +
                    (C41834 + C41835 + C41836 + C41837) * C84536) *
                       C84603 * C716 -
                   (((C251 * C15871 + C84257 * C15980) * C84198 +
                     (C251 * C15869 + C84257 * C15978) * C40962 +
                     C16436 * C40953 + C16435 * C40960) *
                        C84536 +
                    (C41837 + C41836 + C41835 + C41834) * C84586 +
                    (C41833 + C41832 + C41831 + C41830) * C84599 +
                    (C41829 + C41828 + C41827 + C41826) * C84606) *
                       C84603 * C717) *
                  C84605) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C38940 +
                     (C251 * C108 + C84257 * C258) * C84602 + C281 * C38942 +
                     C282 * C84592 + C283 * C38944 + C284 * C84576 +
                     C285 * C38946 + C286 * C84527) *
                        C38937 +
                    (C39830 + C39831 + C39832 + C39833 + C39834 + C39835 +
                     C39836 + C39837) *
                        C84304) *
                       C84603 * C716 -
                   (((C251 * C1688 + C84257 * C1913) * C84527 +
                     (C251 * C1684 + C84257 * C1909) * C38946 + C1938 * C84576 +
                     C1937 * C38944 + C1936 * C84592 + C1935 * C38942 +
                     C2819 * C84602 + C2818 * C38940) *
                        C84304 +
                    (C39837 + C39836 + C39835 + C39834 + C39833 + C39832 +
                     C39831 + C39830) *
                        C38937) *
                       C84603 * C717) *
                  C84605) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 +
                      C84583 * C1297 + C4415 * C4212 + C84561 * C4416) *
                         C40960 +
                     (C4413 * C108 + C84597 * C258 + C4414 * C1188 +
                      C84583 * C1302 + C4415 * C4216 + C84561 * C4420) *
                         C40953 +
                     (C4449 + C4450 + C4451) * C40962 +
                     (C4452 + C4453 + C4454) * C84198) *
                        C38937 +
                    ((C18174 + C18175 + C18176) * C40960 +
                     (C18177 + C18178 + C18179) * C40953 +
                     (C43248 + C43249 + C43250) * C40962 +
                     (C43251 + C43252 + C43253) * C84198) *
                        C84304) *
                       C84603 * C716 -
                   (((C4415 * C17257 + C84561 * C17424 + C4414 * C3448 +
                      C84583 * C3635 + C4413 * C1686 + C84597 * C1911) *
                         C84198 +
                     (C4415 * C17255 + C84561 * C17422 + C4414 * C3442 +
                      C84583 * C3629 + C4413 * C1682 + C84597 * C1907) *
                         C40962 +
                     (C18185 + C18184 + C18183) * C40953 +
                     (C18182 + C18181 + C18180) * C40960) *
                        C84304 +
                    ((C43253 + C43252 + C43251) * C84198 +
                     (C43250 + C43249 + C43248) * C40962 +
                     (C18179 + C18178 + C18177) * C40953 +
                     (C18176 + C18175 + C18174) * C40960) *
                        C38937) *
                       C84603 * C717) *
                  C84605) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C41045 +
           (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
               C84606 +
           (C41928 + C41929) * C41046 + (C41930 + C41931) * C84599 +
           (C41932 + C41933) * C41047 + (C41934 + C41935) * C84586 +
           (C41936 + C41937) * C41048 + (C41938 + C41939) * C84536) *
              C84257 * C84603 * C716 -
          ((C40962 * C15932 + C84198 * C16024 + C40960 * C15931 +
            C40953 * C16023) *
               C84536 +
           (C40962 * C15869 + C84198 * C15871 + C40960 * C15868 +
            C40953 * C15870) *
               C41048 +
           (C41939 + C41938) * C84586 + (C41937 + C41936) * C41047 +
           (C41935 + C41934) * C84599 + (C41933 + C41932) * C41046 +
           (C41931 + C41930) * C84606 + (C41929 + C41928) * C41045) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C39029 +
           (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
            C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
               C38937 +
           (C39920 + C39921 + C39922 + C39923) * C39030 +
           (C39924 + C39925 + C39926 + C39927) * C84304) *
              C84257 * C84603 * C716 -
          ((C38946 * C1791 + C84527 * C2015 + C38944 * C1790 + C84576 * C2014 +
            C38942 * C1789 + C84592 * C2013 + C38940 * C1788 + C84602 * C2012) *
               C84304 +
           (C38946 * C1684 + C84527 * C1688 + C38944 * C1683 + C84576 * C1687 +
            C38942 * C1682 + C84592 * C1686 + C38940 * C1681 + C84602 * C1685) *
               C39030 +
           (C39927 + C39926 + C39925 + C39924) * C38937 +
           (C39923 + C39922 + C39921 + C39920) * C39029) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C39029 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C38937 +
            (C41928 + C41929) * C39030 + (C41930 + C41931) * C84304) *
               C84597 +
           ((C40960 * C1183 + C40953 * C1188 + C40962 * C1182 +
             C84198 * C1187) *
                C39029 +
            (C40960 * C1245 + C40953 * C1349 + C40962 * C1244 +
             C84198 * C1348) *
                C38937 +
            (C44334 + C44335) * C39030 + (C44336 + C44337) * C84304) *
               C84583 +
           ((C40960 * C4212 + C40953 * C4216 + C40962 * C4213 +
             C84198 * C4217) *
                C39029 +
            (C40960 * C4307 + C40953 * C4534 + C40962 * C4308 +
             C84198 * C4535) *
                C38937 +
            (C44338 + C44339) * C39030 + (C44340 + C44341) * C84304) *
               C84561) *
              C84603 * C716 -
          (((C40962 * C17344 + C84198 * C17500 + C40960 * C17343 +
             C40953 * C17499) *
                C84304 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C39030 +
            (C44341 + C44340) * C38937 + (C44339 + C44338) * C39029) *
               C84561 +
           ((C40962 * C3544 + C84198 * C3715 + C40960 * C3546 +
             C40953 * C3716) *
                C84304 +
            (C40962 * C3442 + C84198 * C3448 + C40960 * C3443 +
             C40953 * C3449) *
                C39030 +
            (C44337 + C44336) * C38937 + (C44335 + C44334) * C39029) *
               C84583 +
           ((C41935 + C41934) * C84304 + (C41933 + C41932) * C39030 +
            (C41931 + C41930) * C38937 + (C41929 + C41928) * C39029) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                     C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                     C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                     C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                        C40953 +
                    (C41304 + C41305 + C41306 + C41307) * C84198) *
                       C84257 * C84603 * C716 -
                   ((C41274 * C15869 + C42006 + C42006 + C84536 * C16073 +
                     C41273 * C2598 + C42007 + C42007 + C84586 * C3011 +
                     C41272 * C1682 + C42008 + C42008 + C84599 * C2094 +
                     C41271 * C722 + C42009 + C42009 + C84606 * C935) *
                        C84198 +
                    (C41274 * C15868 + C42010 + C42010 + C84536 * C16072 +
                     C41273 * C2599 + C42011 + C42011 + C84586 * C3012 +
                     C41272 * C1681 + C42012 + C42012 + C84599 * C2093 +
                     C41271 * C723 + C42013 + C42013 + C84606 * C936) *
                        C40953) *
                       C84257 * C84603 * C717) *
                  C84605) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                     C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                        C84602 +
                    (C39302 + C39303) * C84592 + (C39304 + C39305) * C84576 +
                    (C39306 + C39307) * C84527) *
                       C84257 * C84603 * C716 -
                   ((C39266 * C1684 + C39994 + C39994 + C84304 * C2096 +
                     C39265 * C720 + C39995 + C39995 + C38937 * C933) *
                        C84527 +
                    (C39266 * C1683 + C39996 + C39996 + C84304 * C2095 +
                     C39265 * C721 + C39997 + C39997 + C38937 * C934) *
                        C84576 +
                    (C39266 * C1682 + C39998 + C39998 + C84304 * C2094 +
                     C39265 * C722 + C39999 + C39999 + C38937 * C935) *
                        C84592 +
                    (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                     C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                        C84602) *
                       C84257 * C84603 * C717) *
                  C84605) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C40953 +
                     (C39302 + C39303) * C84198) *
                        C84597 +
                    ((C39265 * C1183 + C40623 + C40623 + C38937 * C1396 +
                      C39266 * C3446 + C40622 + C40622 + C84304 * C3799) *
                         C40953 +
                     (C43472 + C43473) * C84198) *
                        C84583 +
                    ((C39265 * C4212 + C43454 + C43454 + C38937 * C4612 +
                      C39266 * C5115 + C43455 + C43455 + C84304 * C5438) *
                         C40953 +
                     (C43474 + C43475) * C84198) *
                        C84561) *
                       C84603 * C716 -
                   (((C39266 * C17255 + C44440 + C44440 + C84304 * C17576 +
                      C39265 * C5114 + C44441 + C44441 + C38937 * C5437) *
                         C84198 +
                     (C39266 * C17254 + C44442 + C44442 + C84304 * C17575 +
                      C39265 * C5115 + C44443 + C44443 + C38937 * C5438) *
                         C40953) *
                        C84561 +
                    ((C39266 * C3442 + C44444 + C44444 + C84304 * C3796 +
                      C39265 * C3445 + C44445 + C44445 + C38937 * C3797) *
                         C84198 +
                     (C39266 * C3443 + C44446 + C44446 + C84304 * C3798 +
                      C39265 * C3446 + C44447 + C44447 + C38937 * C3799) *
                         C40953) *
                        C84583 +
                    ((C39266 * C1682 + C39998 + C39998 + C84304 * C2094 +
                      C39265 * C722 + C39999 + C39999 + C38937 * C935) *
                         C84198 +
                     (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                      C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                         C40953) *
                        C84597) *
                       C84603 * C717) *
                  C84605) /
                     (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C41045 +
            (C251 * C173 + C84257 * C453) * C84606 + C2816 * C41046 +
            C3104 * C84599 + C2818 * C41047 + C3105 * C84586 + C16433 * C41048 +
            C16603 * C84536) *
               C40953 +
           (C41374 + C41375 + C41376 + C41377 + C41378 + C41379 + C41380 +
            C41381) *
               C84198) *
              C84603 * C716 -
          (((C251 * C15932 + C84257 * C16127) * C84536 +
            (C251 * C15869 + C84257 * C15978) * C41048 + C20070 * C84586 +
            C19825 * C41047 + C2235 * C84599 + C1935 * C41046 + C2234 * C84606 +
            C1931 * C41045) *
               C84198 +
           (C16604 * C84536 + C16435 * C41048 + C16603 * C84586 +
            C16433 * C41047 + C3105 * C84599 + C2818 * C41046 + C3104 * C84606 +
            C2816 * C41045) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C39029 +
            (C251 * C173 + C84257 * C453) * C38937 + C2816 * C39030 +
            C3104 * C84304) *
               C84602 +
           (C39374 + C39375 + C39376 + C39377) * C84592 +
           (C39378 + C39379 + C39380 + C39381) * C84576 +
           (C39382 + C39383 + C39384 + C39385) * C84527) *
              C84603 * C716 -
          (((C251 * C1791 + C84257 * C2216) * C84304 +
            (C251 * C1684 + C84257 * C1909) * C39030 + C7138 * C38937 +
            C6883 * C39029) *
               C84527 +
           (C2237 * C84304 + C1937 * C39030 + C2236 * C38937 + C1933 * C39029) *
               C84576 +
           (C2235 * C84304 + C1935 * C39030 + C2234 * C38937 + C1931 * C39029) *
               C84592 +
           (C3105 * C84304 + C2818 * C39030 + C3104 * C38937 + C2816 * C39029) *
               C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C39029 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C38937 +
            (C18174 + C18175 + C18176) * C39030 +
            (C18453 + C18454 + C18455) * C84304) *
               C40953 +
           ((C4449 + C4450 + C4451) * C39029 +
            (C4731 + C4732 + C4733) * C38937 +
            (C43248 + C43249 + C43250) * C39030 +
            (C43580 + C43581 + C43582) * C84304) *
               C84198) *
              C84603 * C716 -
          (((C4415 * C17344 + C84561 * C17658 + C4414 * C3544 + C84583 * C3885 +
             C4413 * C1789 + C84597 * C2214) *
                C84304 +
            (C4415 * C17255 + C84561 * C17422 + C4414 * C3442 + C84583 * C3629 +
             C4413 * C1682 + C84597 * C1907) *
                C39030 +
            (C43582 + C43581 + C43580) * C38937 +
            (C43250 + C43249 + C43248) * C39029) *
               C84198 +
           ((C18458 + C18457 + C18456) * C84304 +
            (C18182 + C18181 + C18180) * C39030 +
            (C18455 + C18454 + C18453) * C38937 +
            (C18176 + C18175 + C18174) * C39029) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C251 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84257) *
               C84606 +
           ((C41928 + C41929) * C251 + (C42158 + C42159) * C84257) * C84599 +
           ((C41932 + C41933) * C251 + (C42160 + C42161) * C84257) * C84586 +
           ((C41936 + C41937) * C251 + (C42162 + C42163) * C84257) * C84536) *
              C84603 * C716 -
          (((C40962 * C15978 + C84198 * C16171 + C40960 * C15977 +
             C40953 * C16170) *
                C84257 +
            (C40962 * C15869 + C84198 * C15871 + C40960 * C15868 +
             C40953 * C15870) *
                C251) *
               C84536 +
           ((C42163 + C42162) * C84257 + (C41937 + C41936) * C251) * C84586 +
           ((C42161 + C42160) * C84257 + (C41933 + C41932) * C251) * C84599 +
           ((C42159 + C42158) * C84257 + (C41929 + C41928) * C251) * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C251 +
            (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
             C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
                C84257) *
               C38937 +
           ((C39920 + C39921 + C39922 + C39923) * C251 +
            (C40142 + C40143 + C40144 + C40145) * C84257) *
               C84304) *
              C84603 * C716 -
          (((C38946 * C1909 + C84527 * C2318 + C38944 * C1908 + C84576 * C2317 +
             C38942 * C1907 + C84592 * C2316 + C38940 * C1906 +
             C84602 * C2315) *
                C84257 +
            (C38946 * C1684 + C84527 * C1688 + C38944 * C1683 + C84576 * C1687 +
             C38942 * C1682 + C84592 * C1686 + C38940 * C1681 +
             C84602 * C1685) *
                C251) *
               C84304 +
           ((C40145 + C40144 + C40143 + C40142) * C84257 +
            (C39923 + C39922 + C39921 + C39920) * C251) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C4413 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84597 +
            (C40960 * C1183 + C40953 * C1188 + C40962 * C1182 +
             C84198 * C1187) *
                C4414 +
            (C40960 * C1297 + C40953 * C1495 + C40962 * C1296 +
             C84198 * C1494) *
                C84583 +
            (C40960 * C4212 + C40953 * C4216 + C40962 * C4213 +
             C84198 * C4217) *
                C4415 +
            (C40960 * C4416 + C40953 * C4810 + C40962 * C4417 +
             C84198 * C4811) *
                C84561) *
               C38937 +
           ((C41928 + C41929) * C4413 + (C42158 + C42159) * C84597 +
            (C44334 + C44335) * C4414 + (C44652 + C44653) * C84583 +
            (C44338 + C44339) * C4415 + (C44654 + C44655) * C84561) *
               C84304) *
              C84603 * C716 -
          (((C40962 * C17422 + C84198 * C17734 + C40960 * C17421 +
             C40953 * C17733) *
                C84561 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C4415 +
            (C40962 * C3629 + C84198 * C3964 + C40960 * C3630 +
             C40953 * C3965) *
                C84583 +
            (C40962 * C3442 + C84198 * C3448 + C40960 * C3443 +
             C40953 * C3449) *
                C4414 +
            (C42161 + C42160) * C84597 + (C41933 + C41932) * C4413) *
               C84304 +
           ((C44655 + C44654) * C84561 + (C44339 + C44338) * C4415 +
            (C44653 + C44652) * C84583 + (C44335 + C44334) * C4414 +
            (C42159 + C42158) * C84597 + (C41929 + C41928) * C4413) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C251 +
            (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
             C41047 * C1906 + C84586 * C2393 + C41048 * C2795 +
             C84536 * C3276) *
                C84257) *
               C40953 +
           ((C41066 + C41067 + C41068 + C41069) * C251 +
            (C41522 + C41523 + C41524 + C41525) * C84257) *
               C84198) *
              C84603 * C716 -
          (((C41048 * C15978 + C84536 * C16215 + C41047 * C2794 +
             C84586 * C3275 + C41046 * C1907 + C84599 * C2394 + C41045 * C836 +
             C84606 * C1081) *
                C84257 +
            (C41048 * C15869 + C84536 * C15932 + C41047 * C2598 +
             C84586 * C2714 + C41046 * C1682 + C84599 * C1789 + C41045 * C722 +
             C84606 * C784) *
                C251) *
               C84198 +
           ((C41048 * C15977 + C84536 * C16214 + C41047 * C2795 +
             C84586 * C3276 + C41046 * C1906 + C84599 * C2393 + C41045 * C837 +
             C84606 * C1082) *
                C84257 +
            (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
             C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
             C84606 * C785) *
                C251) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C251 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84257) *
               C84602 +
           ((C39056 + C39057) * C251 + (C39530 + C39531) * C84257) * C84592 +
           ((C39060 + C39061) * C251 + (C39532 + C39533) * C84257) * C84576 +
           ((C39064 + C39065) * C251 + (C39534 + C39535) * C84257) * C84527) *
              C84603 * C716 -
          (((C39030 * C1909 + C84304 * C2396 + C39029 * C834 + C38937 * C1079) *
                C84257 +
            (C39030 * C1684 + C84304 * C1791 + C39029 * C720 + C38937 * C782) *
                C251) *
               C84527 +
           ((C39030 * C1908 + C84304 * C2395 + C39029 * C835 + C38937 * C1080) *
                C84257 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C251) *
               C84576 +
           ((C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C84257 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C251) *
               C84592 +
           ((C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C84257 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C251) *
               C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C4413 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84597 +
            (C39029 * C1183 + C38937 * C1245 + C39030 * C3446 +
             C84304 * C3547) *
                C4414 +
            (C39029 * C1297 + C38937 * C1542 + C39030 * C3633 +
             C84304 * C4048) *
                C84583 +
            (C39029 * C4212 + C38937 * C4307 + C39030 * C5115 +
             C84304 * C5201) *
                C4415 +
            (C39029 * C4416 + C38937 * C4888 + C39030 * C5281 +
             C84304 * C5675) *
                C84561) *
               C40953 +
           ((C39056 + C39057) * C4413 + (C39530 + C39531) * C84597 +
            (C43130 + C43131) * C4414 + (C43787 + C43788) * C84583 +
            (C43134 + C43135) * C4415 + (C43789 + C43790) * C84561) *
               C84198) *
              C84603 * C716 -
          (((C39030 * C17422 + C84304 * C17810 + C39029 * C5280 +
             C38937 * C5674) *
                C84561 +
            (C39030 * C17255 + C84304 * C17344 + C39029 * C5114 +
             C38937 * C5200) *
                C4415 +
            (C39030 * C3629 + C84304 * C4045 + C39029 * C3632 +
             C38937 * C4046) *
                C84583 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C4414 +
            (C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C84597 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C4413) *
               C84198 +
           ((C39030 * C17421 + C84304 * C17809 + C39029 * C5281 +
             C38937 * C5675) *
                C84561 +
            (C39030 * C17254 + C84304 * C17343 + C39029 * C5115 +
             C38937 * C5201) *
                C4415 +
            (C39030 * C3630 + C84304 * C4047 + C39029 * C3633 +
             C38937 * C4048) *
                C84583 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C4414 +
            (C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C84597 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C4413) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84606 +
            C3366 * C84599 + C3367 * C84586 + C16763 * C84536) *
               C40953 +
           (C41592 + C41593 + C41594 + C41595) * C84198) *
              C84603 * C716 -
          (((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C84536 +
            C20289 * C84586 + C2517 * C84599 + C2516 * C84606) *
               C84198 +
           (C16764 * C84536 + C16763 * C84586 + C3367 * C84599 +
            C3366 * C84606) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C38937 +
            C3366 * C84304) *
               C84602 +
           (C39602 + C39603) * C84592 + (C39604 + C39605) * C84576 +
           (C39606 + C39607) * C84527) *
              C84603 * C716 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84304 +
            C7365 * C38937) *
               C84527 +
           (C2519 * C84304 + C2518 * C38937) * C84576 +
           (C2517 * C84304 + C2516 * C38937) * C84592 +
           (C3367 * C84304 + C3366 * C38937) * C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
             C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
             C84561 * C4993) *
                C38937 +
            (C18735 + C18736 + C18737) * C84304) *
               C40953 +
           ((C5034 + C5035 + C5036) * C38937 +
            (C43901 + C43902 + C43903) * C84304) *
               C84198) *
              C84603 * C716 -
          (((C4992 * C17255 + C17891 + C17891 + C84561 * C17886 +
             C4991 * C3442 + C17892 + C17892 + C84583 * C4125 + C4990 * C1682 +
             C17893 + C17893 + C84597 * C2490) *
                C84304 +
            (C43903 + C43902 + C43901) * C38937) *
               C84198 +
           ((C18740 + C18739 + C18738) * C84304 +
            (C18737 + C18736 + C18735) * C38937) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84257 * C84606 +
           (C41688 + C41689) * C84257 * C84599 +
           (C41690 + C41691) * C84257 * C84586 +
           (C41692 + C41693) * C84257 * C84536) *
              C1177 -
          ((C40961 * C21056 + C42362 + C42362 + C84198 * C21058 +
            C40959 * C16807 + C42363 + C42363 + C40953 * C16811) *
               C84257 * C84536 +
           (C40961 * C3442 + C42364 + C42364 + C84198 * C3454 + C40959 * C3443 +
            C42365 + C42365 + C40953 * C3455) *
               C84257 * C84586 +
           (C40961 * C3445 + C42366 + C42366 + C84198 * C3457 + C40959 * C3446 +
            C42367 + C42367 + C40953 * C3458) *
               C84257 * C84599 +
           (C40961 * C1182 + C42368 + C42368 + C84198 * C1192 + C40959 * C1183 +
            C42369 + C42369 + C40953 * C1193) *
               C84257 * C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C84257 * C38937 +
           (C39694 + C39695 + C39696 + C39697) * C84257 * C84304) *
              C1177 -
          ((C38945 * C8102 + C40344 + C40344 + C84527 * C8104 + C38943 * C3444 +
            C40345 + C40345 + C84576 * C3456 + C38941 * C3445 + C40346 +
            C40346 + C84592 * C3457 + C38939 * C3446 + C40347 + C40347 +
            C84602 * C3458) *
               C84257 * C84304 +
           (C38945 * C1180 + C40348 + C40348 + C84527 * C1190 + C38943 * C1181 +
            C40349 + C40349 + C84576 * C1191 + C38941 * C1182 + C40350 +
            C40350 + C84592 * C1192 + C38939 * C1183 + C40351 + C40351 +
            C84602 * C1193) *
               C84257 * C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C84597 +
            (C44970 + C44971) * C84583 + (C44972 + C44973) * C84561) *
               C38937 +
           ((C41688 + C41689) * C84597 + (C44020 + C44021) * C84583 +
            (C44022 + C44023) * C84561) *
               C84304) *
              C1177 -
          (((C40961 * C34135 + C44958 + C44958 + C84198 * C34137 +
             C40959 * C18815 + C44959 + C44959 + C40953 * C18819) *
                C84561 +
            (C44023 + C44022) * C84583 + (C44021 + C44020) * C84597) *
               C84304 +
           ((C40961 * C5837 + C44960 + C44960 + C84198 * C5843 +
             C40959 * C5838 + C44961 + C44961 + C40953 * C5844) *
                C84561 +
            (C44973 + C44972) * C84583 + (C44971 + C44970) * C84597) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C40960 +
           (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
            C41047 * C1685 + C84586 * C1792 + C41048 * C2602 + C84536 * C2718) *
               C40953 +
           (C41066 + C41067 + C41068 + C41069) * C40962 +
           (C41070 + C41071 + C41072 + C41073) * C84198) *
              C84257 * C1177 -
          ((C41048 * C21057 + C84536 * C21134 + C41047 * C3448 +
            C84586 * C3550 + C41046 * C3451 + C84599 * C3551 + C41045 * C1187 +
            C84606 * C1249) *
               C84198 +
           (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
            C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
            C84606 * C1244) *
               C40962 +
           (C41048 * C16809 + C84536 * C16862 + C41047 * C3449 +
            C84586 * C3552 + C41046 * C3452 + C84599 * C3553 + C41045 * C1188 +
            C84606 * C1250) *
               C40953 +
           (C41048 * C16807 + C84536 * C16860 + C41047 * C3443 +
            C84586 * C3546 + C41046 * C3446 + C84599 * C3547 + C41045 * C1183 +
            C84606 * C1245) *
               C40960) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C38940 +
           (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
               C84602 +
           (C39056 + C39057) * C38942 + (C39058 + C39059) * C84592 +
           (C39060 + C39061) * C38944 + (C39062 + C39063) * C84576 +
           (C39064 + C39065) * C38946 + (C39066 + C39067) * C84527) *
              C84257 * C1177 -
          ((C39030 * C8103 + C84304 * C8180 + C39029 * C1185 + C38937 * C1247) *
               C84527 +
           (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 + C38937 * C1242) *
               C38946 +
           (C39030 * C3450 + C84304 * C3549 + C39029 * C1186 + C38937 * C1248) *
               C84576 +
           (C39030 * C3444 + C84304 * C3543 + C39029 * C1181 + C38937 * C1243) *
               C38944 +
           (C39030 * C3451 + C84304 * C3551 + C39029 * C1187 + C38937 * C1249) *
               C84592 +
           (C39030 * C3445 + C84304 * C3545 + C39029 * C1182 + C38937 * C1244) *
               C38942 +
           (C39030 * C3452 + C84304 * C3553 + C39029 * C1188 + C38937 * C1250) *
               C84602 +
           (C39030 * C3446 + C84304 * C3547 + C39029 * C1183 + C38937 * C1245) *
               C38940) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C40960 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C40953 +
            (C39056 + C39057) * C40962 + (C39058 + C39059) * C84198) *
               C84597 +
           ((C45088 + C45089) * C40960 + (C45090 + C45091) * C40953 +
            (C43130 + C43131) * C40962 + (C43132 + C43133) * C84198) *
               C84583 +
           ((C45092 + C45093) * C40960 + (C45094 + C45095) * C40953 +
            (C43134 + C43135) * C40962 + (C43136 + C43137) * C84198) *
               C84561) *
              C1177 -
          (((C39030 * C34136 + C84304 * C34251 + C39029 * C5840 +
             C38937 * C5956) *
                C84198 +
            (C39030 * C34135 + C84304 * C34250 + C39029 * C5837 +
             C38937 * C5953) *
                C40962 +
            (C39030 * C18817 + C84304 * C18910 + C39029 * C5841 +
             C38937 * C5957) *
                C40953 +
            (C39030 * C18815 + C84304 * C18908 + C39029 * C5838 +
             C38937 * C5954) *
                C40960) *
               C84561 +
           ((C43137 + C43136) * C84198 + (C43135 + C43134) * C40962 +
            (C45095 + C45094) * C40953 + (C45093 + C45092) * C40960) *
               C84583 +
           ((C43133 + C43132) * C84198 + (C43131 + C43130) * C40962 +
            (C45091 + C45090) * C40953 + (C45089 + C45088) * C40960) *
               C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[8] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C40960 +
                     (C251 * C108 + C84257 * C258) * C40953 + C281 * C40962 +
                     C282 * C84198) *
                        C84606 +
                    (C41826 + C41827 + C41828 + C41829) * C84599 +
                    (C41830 + C41831 + C41832 + C41833) * C84586 +
                    (C41834 + C41835 + C41836 + C41837) * C84536) *
                       C1177 -
                   (((C251 * C21057 + C84257 * C21202) * C84198 +
                     (C251 * C21056 + C84257 * C21201) * C40962 +
                     (C251 * C16809 + C84257 * C16908) * C40953 +
                     (C251 * C16807 + C84257 * C16906) * C40960) *
                        C84536 +
                    ((C251 * C3448 + C84257 * C3635) * C84198 +
                     (C251 * C3442 + C84257 * C3629) * C40962 +
                     (C251 * C3449 + C84257 * C3636) * C40953 +
                     (C251 * C3443 + C84257 * C3630) * C40960) *
                        C84586 +
                    ((C251 * C3451 + C84257 * C3638) * C84198 +
                     (C251 * C3445 + C84257 * C3632) * C40962 +
                     (C251 * C3452 + C84257 * C3639) * C40953 +
                     (C251 * C3446 + C84257 * C3633) * C40960) *
                        C84599 +
                    ((C251 * C1187 + C84257 * C1301) * C84198 +
                     (C251 * C1182 + C84257 * C1296) * C40962 +
                     (C251 * C1188 + C84257 * C1302) * C40953 +
                     (C251 * C1183 + C84257 * C1297) * C40960) *
                        C84606) *
                       C1178) *
                  C84604 * C84605) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C38940 +
                     (C251 * C108 + C84257 * C258) * C84602 + C281 * C38942 +
                     C282 * C84592 + C283 * C38944 + C284 * C84576 +
                     C285 * C38946 + C286 * C84527) *
                        C38937 +
                    (C39830 + C39831 + C39832 + C39833 + C39834 + C39835 +
                     C39836 + C39837) *
                        C84304) *
                       C1177 -
                   (((C251 * C8103 + C84257 * C8248) * C84527 +
                     (C251 * C8102 + C84257 * C8247) * C38946 +
                     (C251 * C3450 + C84257 * C3637) * C84576 +
                     (C251 * C3444 + C84257 * C3631) * C38944 +
                     (C251 * C3451 + C84257 * C3638) * C84592 +
                     (C251 * C3445 + C84257 * C3632) * C38942 +
                     (C251 * C3452 + C84257 * C3639) * C84602 +
                     (C251 * C3446 + C84257 * C3633) * C38940) *
                        C84304 +
                    ((C251 * C1185 + C84257 * C1299) * C84527 +
                     (C251 * C1180 + C84257 * C1294) * C38946 +
                     (C251 * C1186 + C84257 * C1300) * C84576 +
                     (C251 * C1181 + C84257 * C1295) * C38944 +
                     (C251 * C1187 + C84257 * C1301) * C84592 +
                     (C251 * C1182 + C84257 * C1296) * C38942 +
                     (C251 * C1188 + C84257 * C1302) * C84602 +
                     (C251 * C1183 + C84257 * C1297) * C38940) *
                        C38937) *
                       C1178) *
                  C84604 * C84605) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 +
                      C84583 * C1297 + C4415 * C4212 + C84561 * C4416) *
                         C40960 +
                     (C4413 * C108 + C84597 * C258 + C4414 * C1188 +
                      C84583 * C1302 + C4415 * C4216 + C84561 * C4420) *
                         C40953 +
                     (C4449 + C4450 + C4451) * C40962 +
                     (C4452 + C4453 + C4454) * C84198) *
                        C38937 +
                    ((C18174 + C18175 + C18176) * C40960 +
                     (C18177 + C18178 + C18179) * C40953 +
                     (C43248 + C43249 + C43250) * C40962 +
                     (C43251 + C43252 + C43253) * C84198) *
                        C84304) *
                       C1177 -
                   (((C4415 * C34136 + C84561 * C34363 + C4414 * C5117 +
                      C84583 * C5283 + C4413 * C3451 + C84597 * C3638) *
                         C84198 +
                     (C4415 * C34135 + C84561 * C34362 + C4414 * C5114 +
                      C84583 * C5280 + C4413 * C3445 + C84597 * C3632) *
                         C40962 +
                     (C4415 * C18817 + C84561 * C19024 + C4414 * C5118 +
                      C84583 * C5284 + C4413 * C3452 + C84597 * C3639) *
                         C40953 +
                     (C4415 * C18815 + C84561 * C19022 + C4414 * C5115 +
                      C84583 * C5281 + C4413 * C3446 + C84597 * C3633) *
                         C40960) *
                        C84304 +
                    ((C4415 * C5840 + C84561 * C6060 + C4414 * C4217 +
                      C84583 * C4421 + C4413 * C1187 + C84597 * C1301) *
                         C84198 +
                     (C4415 * C5837 + C84561 * C6057 + C4414 * C4213 +
                      C84583 * C4417 + C4413 * C1182 + C84597 * C1296) *
                         C40962 +
                     (C4415 * C5841 + C84561 * C6061 + C4414 * C4216 +
                      C84583 * C4420 + C4413 * C1188 + C84597 * C1302) *
                         C40953 +
                     (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 +
                      C84583 * C4416 + C4413 * C1183 + C84597 * C1297) *
                         C40960) *
                        C38937) *
                       C1178) *
                  C84604 * C84605) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C41045 +
           (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
               C84606 +
           (C41928 + C41929) * C41046 + (C41930 + C41931) * C84599 +
           (C41932 + C41933) * C41047 + (C41934 + C41935) * C84586 +
           (C41936 + C41937) * C41048 + (C41938 + C41939) * C84536) *
              C84257 * C1177 -
          ((C40962 * C21133 + C84198 * C21269 + C40960 * C16860 +
            C40953 * C16952) *
               C84536 +
           (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
            C40953 * C16809) *
               C41048 +
           (C40962 * C3544 + C84198 * C3715 + C40960 * C3546 + C40953 * C3716) *
               C84586 +
           (C40962 * C3442 + C84198 * C3448 + C40960 * C3443 + C40953 * C3449) *
               C41047 +
           (C40962 * C3545 + C84198 * C3718 + C40960 * C3547 + C40953 * C3719) *
               C84599 +
           (C40962 * C3445 + C84198 * C3451 + C40960 * C3446 + C40953 * C3452) *
               C41046 +
           (C40962 * C1244 + C84198 * C1348 + C40960 * C1245 + C40953 * C1349) *
               C84606 +
           (C40962 * C1182 + C84198 * C1187 + C40960 * C1183 + C40953 * C1188) *
               C41045) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C39029 +
           (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
            C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
               C38937 +
           (C39920 + C39921 + C39922 + C39923) * C39030 +
           (C39924 + C39925 + C39926 + C39927) * C84304) *
              C84257 * C1177 -
          ((C38946 * C8179 + C84527 * C8315 + C38944 * C3543 + C84576 * C3717 +
            C38942 * C3545 + C84592 * C3718 + C38940 * C3547 + C84602 * C3719) *
               C84304 +
           (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
            C38942 * C3445 + C84592 * C3451 + C38940 * C3446 + C84602 * C3452) *
               C39030 +
           (C38946 * C1242 + C84527 * C1346 + C38944 * C1243 + C84576 * C1347 +
            C38942 * C1244 + C84592 * C1348 + C38940 * C1245 + C84602 * C1349) *
               C38937 +
           (C38946 * C1180 + C84527 * C1185 + C38944 * C1181 + C84576 * C1186 +
            C38942 * C1182 + C84592 * C1187 + C38940 * C1183 + C84602 * C1188) *
               C39029) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C39029 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C38937 +
            (C41928 + C41929) * C39030 + (C41930 + C41931) * C84304) *
               C84597 +
           ((C45308 + C45309) * C39029 + (C45310 + C45311) * C38937 +
            (C44334 + C44335) * C39030 + (C44336 + C44337) * C84304) *
               C84583 +
           ((C45312 + C45313) * C39029 + (C45314 + C45315) * C38937 +
            (C44338 + C44339) * C39030 + (C44340 + C44341) * C84304) *
               C84561) *
              C1177 -
          (((C40962 * C34250 + C84198 * C34462 + C40960 * C18908 +
             C40953 * C19100) *
                C84304 +
            (C40962 * C34135 + C84198 * C34136 + C40960 * C18815 +
             C40953 * C18817) *
                C39030 +
            (C40962 * C5953 + C84198 * C6137 + C40960 * C5954 +
             C40953 * C6138) *
                C38937 +
            (C40962 * C5837 + C84198 * C5840 + C40960 * C5838 +
             C40953 * C5841) *
                C39029) *
               C84561 +
           ((C44341 + C44340) * C84304 + (C44339 + C44338) * C39030 +
            (C45315 + C45314) * C38937 + (C45313 + C45312) * C39029) *
               C84583 +
           ((C44337 + C44336) * C84304 + (C44335 + C44334) * C39030 +
            (C45311 + C45310) * C38937 + (C45309 + C45308) * C39029) *
               C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41271 * C102 + C41276 + C41276 + C84606 * C379 + C41272 * C723 +
            C41277 + C41277 + C84599 * C936 + C41273 * C1681 + C41278 + C41278 +
            C84586 * C2093 + C41274 * C2599 + C41279 + C41279 +
            C84536 * C3012) *
               C40953 +
           (C41304 + C41305 + C41306 + C41307) * C84198) *
              C84257 * C1177 -
          ((C41274 * C21056 + C42634 + C42634 + C84536 * C21336 +
            C41273 * C3442 + C42635 + C42635 + C84586 * C3796 + C41272 * C3445 +
            C42636 + C42636 + C84599 * C3797 + C41271 * C1182 + C42637 +
            C42637 + C84606 * C1395) *
               C84198 +
           (C41274 * C16807 + C42638 + C42638 + C84536 * C16996 +
            C41273 * C3443 + C42639 + C42639 + C84586 * C3798 + C41272 * C3446 +
            C42640 + C42640 + C84599 * C3799 + C41271 * C1183 + C42641 +
            C42641 + C84606 * C1396) *
               C40953) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
            C39269 + C39269 + C84304 * C936) *
               C84602 +
           (C39302 + C39303) * C84592 + (C39304 + C39305) * C84576 +
           (C39306 + C39307) * C84527) *
              C84257 * C1177 -
          ((C39266 * C8102 + C40616 + C40616 + C84304 * C8382 + C39265 * C1180 +
            C40617 + C40617 + C38937 * C1393) *
               C84527 +
           (C39266 * C3444 + C40618 + C40618 + C84304 * C3795 + C39265 * C1181 +
            C40619 + C40619 + C38937 * C1394) *
               C84576 +
           (C39266 * C3445 + C40620 + C40620 + C84304 * C3797 + C39265 * C1182 +
            C40621 + C40621 + C38937 * C1395) *
               C84592 +
           (C39266 * C3446 + C40622 + C40622 + C84304 * C3799 + C39265 * C1183 +
            C40623 + C40623 + C38937 * C1396) *
               C84602) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
             C39269 + C39269 + C84304 * C936) *
                C40953 +
            (C39302 + C39303) * C84198) *
               C84597 +
           ((C45434 + C45435) * C40953 + (C43472 + C43473) * C84198) * C84583 +
           ((C45436 + C45437) * C40953 + (C43474 + C43475) * C84198) * C84561) *
              C1177 -
          (((C39266 * C34135 + C45422 + C45422 + C84304 * C34573 +
             C39265 * C5837 + C45423 + C45423 + C38937 * C6250) *
                C84198 +
            (C39266 * C18815 + C45424 + C45424 + C84304 * C19200 +
             C39265 * C5838 + C45425 + C45425 + C38937 * C6251) *
                C40953) *
               C84561 +
           ((C43475 + C43474) * C84198 + (C45437 + C45436) * C40953) * C84583 +
           ((C43473 + C43472) * C84198 + (C45435 + C45434) * C40953) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[8] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C41045 +
                     (C251 * C173 + C84257 * C453) * C84606 + C2816 * C41046 +
                     C3104 * C84599 + C2818 * C41047 + C3105 * C84586 +
                     C16433 * C41048 + C16603 * C84536) *
                        C40953 +
                    (C41374 + C41375 + C41376 + C41377 + C41378 + C41379 +
                     C41380 + C41381) *
                        C84198) *
                       C1177 -
                   (((C251 * C21133 + C84257 * C21411) * C84536 +
                     (C251 * C21056 + C84257 * C21201) * C41048 +
                     (C251 * C3544 + C84257 * C3885) * C84586 +
                     (C251 * C3442 + C84257 * C3629) * C41047 +
                     (C251 * C3545 + C84257 * C3886) * C84599 +
                     (C251 * C3445 + C84257 * C3632) * C41046 +
                     (C251 * C1244 + C84257 * C1447) * C84606 +
                     (C251 * C1182 + C84257 * C1296) * C41045) *
                        C84198 +
                    ((C251 * C16860 + C84257 * C17045) * C84536 +
                     (C251 * C16807 + C84257 * C16906) * C41048 +
                     (C251 * C3546 + C84257 * C3887) * C84586 +
                     (C251 * C3443 + C84257 * C3630) * C41047 +
                     (C251 * C3547 + C84257 * C3888) * C84599 +
                     (C251 * C3446 + C84257 * C3633) * C41046 +
                     (C251 * C1245 + C84257 * C1448) * C84606 +
                     (C251 * C1183 + C84257 * C1297) * C41045) *
                        C40953) *
                       C1178) *
                  C84604 * C84605) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C251 * C102 + C84257 * C252) * C39029 +
                     (C251 * C173 + C84257 * C453) * C38937 + C2816 * C39030 +
                     C3104 * C84304) *
                        C84602 +
                    (C39374 + C39375 + C39376 + C39377) * C84592 +
                    (C39378 + C39379 + C39380 + C39381) * C84576 +
                    (C39382 + C39383 + C39384 + C39385) * C84527) *
                       C1177 -
                   (((C251 * C8179 + C84257 * C8457) * C84304 +
                     (C251 * C8102 + C84257 * C8247) * C39030 +
                     (C251 * C1242 + C84257 * C1445) * C38937 +
                     (C251 * C1180 + C84257 * C1294) * C39029) *
                        C84527 +
                    ((C251 * C3543 + C84257 * C3884) * C84304 +
                     (C251 * C3444 + C84257 * C3631) * C39030 +
                     (C251 * C1243 + C84257 * C1446) * C38937 +
                     (C251 * C1181 + C84257 * C1295) * C39029) *
                        C84576 +
                    ((C251 * C3545 + C84257 * C3886) * C84304 +
                     (C251 * C3445 + C84257 * C3632) * C39030 +
                     (C251 * C1244 + C84257 * C1447) * C38937 +
                     (C251 * C1182 + C84257 * C1296) * C39029) *
                        C84592 +
                    ((C251 * C3547 + C84257 * C3888) * C84304 +
                     (C251 * C3446 + C84257 * C3633) * C39030 +
                     (C251 * C1245 + C84257 * C1448) * C38937 +
                     (C251 * C1183 + C84257 * C1297) * C39029) *
                        C84602) *
                       C1178) *
                  C84604 * C84605) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 +
                      C84583 * C1297 + C4415 * C4212 + C84561 * C4416) *
                         C39029 +
                     (C4413 * C173 + C84597 * C453 + C4414 * C1245 +
                      C84583 * C1448 + C4415 * C4307 + C84561 * C4714) *
                         C38937 +
                     (C18174 + C18175 + C18176) * C39030 +
                     (C18453 + C18454 + C18455) * C84304) *
                        C40953 +
                    ((C4449 + C4450 + C4451) * C39029 +
                     (C4731 + C4732 + C4733) * C38937 +
                     (C43248 + C43249 + C43250) * C39030 +
                     (C43580 + C43581 + C43582) * C84304) *
                        C84198) *
                       C1177 -
                   (((C4415 * C34250 + C84561 * C34686 + C4414 * C5200 +
                      C84583 * C5520 + C4413 * C3545 + C84597 * C3886) *
                         C84304 +
                     (C4415 * C34135 + C84561 * C34362 + C4414 * C5114 +
                      C84583 * C5280 + C4413 * C3445 + C84597 * C3632) *
                         C39030 +
                     (C4415 * C5953 + C84561 * C6346 + C4414 * C4308 +
                      C84583 * C4715 + C4413 * C1244 + C84597 * C1447) *
                         C38937 +
                     (C4415 * C5837 + C84561 * C6057 + C4414 * C4213 +
                      C84583 * C4417 + C4413 * C1182 + C84597 * C1296) *
                         C39029) *
                        C84198 +
                    ((C4415 * C18908 + C84561 * C19309 + C4414 * C5201 +
                      C84583 * C5521 + C4413 * C3547 + C84597 * C3888) *
                         C84304 +
                     (C4415 * C18815 + C84561 * C19022 + C4414 * C5115 +
                      C84583 * C5281 + C4413 * C3446 + C84597 * C3633) *
                         C39030 +
                     (C4415 * C5954 + C84561 * C6347 + C4414 * C4307 +
                      C84583 * C4714 + C4413 * C1245 + C84597 * C1448) *
                         C38937 +
                     (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 +
                      C84583 * C4416 + C4413 * C1183 + C84597 * C1297) *
                         C39029) *
                        C40953) *
                       C1178) *
                  C84604 * C84605) /
                     (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C251 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84257) *
               C84606 +
           ((C41928 + C41929) * C251 + (C42158 + C42159) * C84257) * C84599 +
           ((C41932 + C41933) * C251 + (C42160 + C42161) * C84257) * C84586 +
           ((C41936 + C41937) * C251 + (C42162 + C42163) * C84257) * C84536) *
              C1177 -
          (((C40962 * C21201 + C84198 * C21478 + C40960 * C16906 +
             C40953 * C17089) *
                C84257 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C251) *
               C84536 +
           ((C40962 * C3629 + C84198 * C3964 + C40960 * C3630 +
             C40953 * C3965) *
                C84257 +
            (C40962 * C3442 + C84198 * C3448 + C40960 * C3443 +
             C40953 * C3449) *
                C251) *
               C84586 +
           ((C40962 * C3632 + C84198 * C3967 + C40960 * C3633 +
             C40953 * C3968) *
                C84257 +
            (C40962 * C3445 + C84198 * C3451 + C40960 * C3446 +
             C40953 * C3452) *
                C251) *
               C84599 +
           ((C40962 * C1296 + C84198 * C1494 + C40960 * C1297 +
             C40953 * C1495) *
                C84257 +
            (C40962 * C1182 + C84198 * C1187 + C40960 * C1183 +
             C40953 * C1188) *
                C251) *
               C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C251 +
            (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
             C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
                C84257) *
               C38937 +
           ((C39920 + C39921 + C39922 + C39923) * C251 +
            (C40142 + C40143 + C40144 + C40145) * C84257) *
               C84304) *
              C1177 -
          (((C38946 * C8247 + C84527 * C8524 + C38944 * C3631 + C84576 * C3966 +
             C38942 * C3632 + C84592 * C3967 + C38940 * C3633 +
             C84602 * C3968) *
                C84257 +
            (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
             C38942 * C3445 + C84592 * C3451 + C38940 * C3446 +
             C84602 * C3452) *
                C251) *
               C84304 +
           ((C38946 * C1294 + C84527 * C1492 + C38944 * C1295 + C84576 * C1493 +
             C38942 * C1296 + C84592 * C1494 + C38940 * C1297 +
             C84602 * C1495) *
                C84257 +
            (C38946 * C1180 + C84527 * C1185 + C38944 * C1181 + C84576 * C1186 +
             C38942 * C1182 + C84592 * C1187 + C38940 * C1183 +
             C84602 * C1188) *
                C251) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C4413 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84597 +
            (C45308 + C45309) * C4414 + (C45642 + C45643) * C84583 +
            (C45312 + C45313) * C4415 + (C45644 + C45645) * C84561) *
               C38937 +
           ((C41928 + C41929) * C4413 + (C42158 + C42159) * C84597 +
            (C44334 + C44335) * C4414 + (C44652 + C44653) * C84583 +
            (C44338 + C44339) * C4415 + (C44654 + C44655) * C84561) *
               C84304) *
              C1177 -
          (((C40962 * C34362 + C84198 * C34785 + C40960 * C19022 +
             C40953 * C19385) *
                C84561 +
            (C40962 * C34135 + C84198 * C34136 + C40960 * C18815 +
             C40953 * C18817) *
                C4415 +
            (C44655 + C44654) * C84583 + (C44339 + C44338) * C4414 +
            (C44653 + C44652) * C84597 + (C44335 + C44334) * C4413) *
               C84304 +
           ((C40962 * C6057 + C84198 * C6423 + C40960 * C6058 +
             C40953 * C6424) *
                C84561 +
            (C40962 * C5837 + C84198 * C5840 + C40960 * C5838 +
             C40953 * C5841) *
                C4415 +
            (C45645 + C45644) * C84583 + (C45313 + C45312) * C4414 +
            (C45643 + C45642) * C84597 + (C45309 + C45308) * C4413) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C251 +
            (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
             C41047 * C1906 + C84586 * C2393 + C41048 * C2795 +
             C84536 * C3276) *
                C84257) *
               C40953 +
           ((C41066 + C41067 + C41068 + C41069) * C251 +
            (C41522 + C41523 + C41524 + C41525) * C84257) *
               C84198) *
              C1177 -
          (((C41048 * C21201 + C84536 * C21545 + C41047 * C3629 +
             C84586 * C4045 + C41046 * C3632 + C84599 * C4046 + C41045 * C1296 +
             C84606 * C1541) *
                C84257 +
            (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
             C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
             C84606 * C1244) *
                C251) *
               C84198 +
           ((C41048 * C16906 + C84536 * C17133 + C41047 * C3630 +
             C84586 * C4047 + C41046 * C3633 + C84599 * C4048 + C41045 * C1297 +
             C84606 * C1542) *
                C84257 +
            (C41048 * C16807 + C84536 * C16860 + C41047 * C3443 +
             C84586 * C3546 + C41046 * C3446 + C84599 * C3547 + C41045 * C1183 +
             C84606 * C1245) *
                C251) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C251 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84257) *
               C84602 +
           ((C39056 + C39057) * C251 + (C39530 + C39531) * C84257) * C84592 +
           ((C39060 + C39061) * C251 + (C39532 + C39533) * C84257) * C84576 +
           ((C39064 + C39065) * C251 + (C39534 + C39535) * C84257) * C84527) *
              C1177 -
          (((C39030 * C8247 + C84304 * C8591 + C39029 * C1294 +
             C38937 * C1539) *
                C84257 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C251) *
               C84527 +
           ((C39030 * C3631 + C84304 * C4044 + C39029 * C1295 +
             C38937 * C1540) *
                C84257 +
            (C39030 * C3444 + C84304 * C3543 + C39029 * C1181 +
             C38937 * C1243) *
                C251) *
               C84576 +
           ((C39030 * C3632 + C84304 * C4046 + C39029 * C1296 +
             C38937 * C1541) *
                C84257 +
            (C39030 * C3445 + C84304 * C3545 + C39029 * C1182 +
             C38937 * C1244) *
                C251) *
               C84592 +
           ((C39030 * C3633 + C84304 * C4048 + C39029 * C1297 +
             C38937 * C1542) *
                C84257 +
            (C39030 * C3446 + C84304 * C3547 + C39029 * C1183 +
             C38937 * C1245) *
                C251) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C4413 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84597 +
            (C45088 + C45089) * C4414 + (C45752 + C45753) * C84583 +
            (C45092 + C45093) * C4415 + (C45754 + C45755) * C84561) *
               C40953 +
           ((C39056 + C39057) * C4413 + (C39530 + C39531) * C84597 +
            (C43130 + C43131) * C4414 + (C43787 + C43788) * C84583 +
            (C43134 + C43135) * C4415 + (C43789 + C43790) * C84561) *
               C84198) *
              C1177 -
          (((C39030 * C34362 + C84304 * C34890 + C39029 * C6057 +
             C38937 * C6518) *
                C84561 +
            (C39030 * C34135 + C84304 * C34250 + C39029 * C5837 +
             C38937 * C5953) *
                C4415 +
            (C43790 + C43789) * C84583 + (C43135 + C43134) * C4414 +
            (C43788 + C43787) * C84597 + (C43131 + C43130) * C4413) *
               C84198 +
           ((C39030 * C19022 + C84304 * C19467 + C39029 * C6058 +
             C38937 * C6519) *
                C84561 +
            (C39030 * C18815 + C84304 * C18908 + C39029 * C5838 +
             C38937 * C5954) *
                C4415 +
            (C45755 + C45754) * C84583 + (C45093 + C45092) * C4414 +
            (C45753 + C45752) * C84597 + (C45089 + C45088) * C4413) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84606 +
            C3366 * C84599 + C3367 * C84586 + C16763 * C84536) *
               C40953 +
           (C41592 + C41593 + C41594 + C41595) * C84198) *
              C1177 -
          (((C637 * C21056 + C21614 + C21614 + C84257 * C21612) * C84536 +
            (C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84586 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84599 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84606) *
               C84198 +
           ((C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C84536 +
            (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84586 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84599 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84606) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C38937 +
            C3366 * C84304) *
               C84602 +
           (C39602 + C39603) * C84592 + (C39604 + C39605) * C84576 +
           (C39606 + C39607) * C84527) *
              C1177 -
          (((C637 * C8102 + C8660 + C8660 + C84257 * C8658) * C84304 +
            (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C38937) *
               C84527 +
           ((C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84304 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C38937) *
               C84576 +
           ((C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84304 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C38937) *
               C84592 +
           ((C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84304 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C38937) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
             C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
             C84561 * C4993) *
                C38937 +
            (C18735 + C18736 + C18737) * C84304) *
               C40953 +
           ((C5034 + C5035 + C5036) * C38937 +
            (C43901 + C43902 + C43903) * C84304) *
               C84198) *
              C1177 -
          (((C4992 * C34135 + C45854 + C45854 + C84561 * C34995 +
             C4991 * C5114 + C45855 + C45855 + C84583 * C5751 + C4990 * C3445 +
             C45856 + C45856 + C84597 * C4126) *
                C84304 +
            (C4992 * C5837 + C6607 + C6607 + C84561 * C6601 + C4991 * C4213 +
             C6608 + C6608 + C84583 * C4994 + C4990 * C1182 + C6609 + C6609 +
             C84597 * C1588) *
                C38937) *
               C84198 +
           ((C4992 * C18815 + C19566 + C19566 + C84561 * C19561 +
             C4991 * C5115 + C19567 + C19567 + C84583 * C5752 + C4990 * C3446 +
             C19568 + C19568 + C84597 * C4128) *
                C84304 +
            (C4992 * C5838 + C6610 + C6610 + C84561 * C6602 + C4991 * C4212 +
             C6611 + C6611 + C84583 * C4993 + C4990 * C1183 + C6612 + C6612 +
             C84597 * C1589) *
                C38937) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                      C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                      C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                         C84529 +
                     (C82052 * C1183 + C47529 + C47529 + C84193 * C1193 +
                      C82045 * C1182 + C47528 + C47528 + C84201 * C1192 +
                      C45940 * C1181 + C47527 + C47527 + C45932 * C1191) *
                         C84344) *
                        C38937 +
                    ((C46774 + C46775 + C46776) * C84529 +
                     (C82052 * C3446 + C47526 + C47526 + C84193 * C3458 +
                      C82045 * C3445 + C47525 + C47525 + C84201 * C3457 +
                      C45940 * C3444 + C47524 + C47524 + C45932 * C3456) *
                         C84344) *
                        C84304) *
                       C84603 * C84604 * C90 -
                   (((C45940 * C8102 + C48229 + C48229 + C45932 * C8104 +
                      C82045 * C3444 + C48230 + C48230 + C84201 * C3456 +
                      C82052 * C3445 + C48231 + C48231 + C84193 * C3457) *
                         C84344 +
                     (C45940 * C720 + C45955 + C45955 + C45932 * C730 +
                      C82045 * C721 + C45956 + C45956 + C84201 * C731 +
                      C82052 * C722 + C45957 + C45957 + C84193 * C732) *
                         C84529) *
                        C84304 +
                    ((C45940 * C1180 + C48232 + C48232 + C45932 * C1190 +
                      C82045 * C1181 + C48233 + C48233 + C84201 * C1191 +
                      C82052 * C1182 + C48234 + C48234 + C84193 * C1192) *
                         C84344 +
                     (C45940 * C105 + C45958 + C45958 + C45932 * C117 +
                      C82045 * C104 + C45959 + C45959 + C84201 * C116 +
                      C82052 * C103 + C45960 + C45960 + C84193 * C115) *
                         C84529) *
                        C38937) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82049 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84193 +
            (C39056 + C39057) * C82038 + (C39058 + C39059) * C84201 +
            (C39060 + C39061) * C82067 + (C39062 + C39063) * C45932) *
               C84529 +
           ((C45088 + C45089) * C82049 + (C45090 + C45091) * C84193 +
            (C43130 + C43131) * C82038 + (C43132 + C43133) * C84201 +
            (C48341 + C48342) * C82067 + (C48343 + C48344) * C45932) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C39030 * C8103 + C84304 * C8180 + C39029 * C1185 +
             C38937 * C1247) *
                C45932 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C82067 +
            (C48344 + C48343) * C84201 + (C48342 + C48341) * C82038 +
            (C43133 + C43132) * C84193 + (C43131 + C43130) * C82049) *
               C84344 +
           ((C39067 + C39066) * C45932 + (C39065 + C39064) * C82067 +
            (C39063 + C39062) * C84201 + (C39061 + C39060) * C82038 +
            (C39059 + C39058) * C84193 + (C39057 + C39056) * C82049) *
               C84529) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82049 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84193 +
            (C8897 + C8898) * C82038 + (C8899 + C8900) * C84201 +
            (C8901 + C8902) * C82067 + (C8903 + C8904) * C45932) *
               C38937 +
           ((C11976 + C11977) * C82049 + (C11978 + C11979) * C84193 +
            (C10999 + C11000) * C82038 + (C11001 + C11002) * C84201 +
            (C11003 + C11004) * C82067 + (C11005 + C11006) * C45932) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C8871 * C8103 + C84344 * C8248 + C8870 * C725 + C84529 * C839) *
                C45932 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C82067 +
            (C11006 + C11005) * C84201 + (C11004 + C11003) * C82038 +
            (C11002 + C11001) * C84193 + (C11000 + C10999) * C82049) *
               C84304 +
           ((C8908 + C8907) * C45932 + (C8906 + C8905) * C82067 +
            (C8904 + C8903) * C84201 + (C8902 + C8901) * C82038 +
            (C8900 + C8899) * C84193 + (C8898 + C8897) * C82049) *
               C38937) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C39029 +
                     (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                      C84201 * C331 + C82067 * C175 + C45932 * C332) *
                         C38937 +
                     (C47038 + C47039 + C47040) * C39030 +
                     (C47041 + C47042 + C47043) * C84304) *
                        C84529 +
                    ((C82049 * C1183 + C84193 * C1188 + C82038 * C1182 +
                      C84201 * C1187 + C82067 * C1181 + C45932 * C1186) *
                         C39029 +
                     (C82049 * C1245 + C84193 * C1349 + C82038 * C1244 +
                      C84201 * C1348 + C82067 * C1243 + C45932 * C1347) *
                         C38937 +
                     (C82049 * C3446 + C84193 * C3452 + C82038 * C3445 +
                      C84201 * C3451 + C82067 * C3444 + C45932 * C3450) *
                         C39030 +
                     (C82049 * C3547 + C84193 * C3719 + C82038 * C3545 +
                      C84201 * C3718 + C82067 * C3543 + C45932 * C3717) *
                         C84304) *
                        C84344) *
                       C84603 * C84604 * C90 -
                   (((C82067 * C8179 + C45932 * C8315 + C82038 * C3543 +
                      C84201 * C3717 + C82049 * C3545 + C84193 * C3718) *
                         C84304 +
                     (C82067 * C8102 + C45932 * C8103 + C82038 * C3444 +
                      C84201 * C3450 + C82049 * C3445 + C84193 * C3451) *
                         C39030 +
                     (C82067 * C1242 + C45932 * C1346 + C82038 * C1243 +
                      C84201 * C1347 + C82049 * C1244 + C84193 * C1348) *
                         C38937 +
                     (C82067 * C1180 + C45932 * C1185 + C82038 * C1181 +
                      C84201 * C1186 + C82049 * C1182 + C84193 * C1187) *
                         C39029) *
                        C84344 +
                    ((C82067 * C782 + C45932 * C886 + C82038 * C783 +
                      C84201 * C887 + C82049 * C784 + C84193 * C888) *
                         C84304 +
                     (C82067 * C720 + C45932 * C725 + C82038 * C721 +
                      C84201 * C726 + C82049 * C722 + C84193 * C727) *
                         C39030 +
                     (C82067 * C176 + C45932 * C333 + C82038 * C175 +
                      C84201 * C332 + C82049 * C174 + C84193 * C331) *
                         C38937 +
                     (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                      C84201 * C110 + C82049 * C103 + C84193 * C109) *
                         C39029) *
                        C84529) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyy[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C84193 +
                     (C39302 + C39303) * C84201 + (C39304 + C39305) * C45932) *
                        C84529 +
                    ((C45434 + C45435) * C84193 + (C43472 + C43473) * C84201 +
                     (C48647 + C48648) * C45932) *
                        C84344) *
                       C84603 * C84604 * C90 -
                   (((C39266 * C8102 + C40616 + C40616 + C84304 * C8382 +
                      C39265 * C1180 + C40617 + C40617 + C38937 * C1393) *
                         C45932 +
                     (C48648 + C48647) * C84201 + (C43473 + C43472) * C84193) *
                        C84344 +
                    ((C39307 + C39306) * C45932 + (C39305 + C39304) * C84201 +
                     (C39303 + C39302) * C84193) *
                        C84529) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C39029 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C38937 +
            (C11976 + C11977) * C39030 + (C12302 + C12303) * C84304) *
               C84193 +
           ((C8897 + C8898) * C39029 + (C9124 + C9125) * C38937 +
            (C10999 + C11000) * C39030 + (C11329 + C11330) * C84304) *
               C84201 +
           ((C8901 + C8902) * C39029 + (C9126 + C9127) * C38937 +
            (C11003 + C11004) * C39030 + (C11331 + C11332) * C84304) *
               C45932) *
              C84603 * C84604 * C90 -
          (((C8871 * C8179 + C84344 * C8457 + C8870 * C782 + C84529 * C985) *
                C84304 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C39030 +
            (C9129 + C9128) * C38937 + (C8906 + C8905) * C39029) *
               C45932 +
           ((C11332 + C11331) * C84304 + (C11004 + C11003) * C39030 +
            (C9127 + C9126) * C38937 + (C8902 + C8901) * C39029) *
               C84201 +
           ((C11330 + C11329) * C84304 + (C11000 + C10999) * C39030 +
            (C9125 + C9124) * C38937 + (C8898 + C8897) * C39029) *
               C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[9] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C8870 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84529 +
                     (C82049 * C1183 + C84193 * C1188 + C82038 * C1182 +
                      C84201 * C1187 + C82067 * C1181 + C45932 * C1186) *
                         C8871 +
                     (C82049 * C1297 + C84193 * C1495 + C82038 * C1296 +
                      C84201 * C1494 + C82067 * C1295 + C45932 * C1493) *
                         C84344) *
                        C38937 +
                    ((C47038 + C47039 + C47040) * C8870 +
                     (C47293 + C47294 + C47295) * C84529 +
                     (C82049 * C3446 + C84193 * C3452 + C82038 * C3445 +
                      C84201 * C3451 + C82067 * C3444 + C45932 * C3450) *
                         C8871 +
                     (C82049 * C3633 + C84193 * C3968 + C82038 * C3632 +
                      C84201 * C3967 + C82067 * C3631 + C45932 * C3966) *
                         C84344) *
                        C84304) *
                       C84603 * C84604 * C90 -
                   (((C82067 * C8247 + C45932 * C8524 + C82038 * C3631 +
                      C84201 * C3966 + C82049 * C3632 + C84193 * C3967) *
                         C84344 +
                     (C82067 * C8102 + C45932 * C8103 + C82038 * C3444 +
                      C84201 * C3450 + C82049 * C3445 + C84193 * C3451) *
                         C8871 +
                     (C82067 * C834 + C45932 * C1032 + C82038 * C835 +
                      C84201 * C1033 + C82049 * C836 + C84193 * C1034) *
                         C84529 +
                     (C82067 * C720 + C45932 * C725 + C82038 * C721 +
                      C84201 * C726 + C82049 * C722 + C84193 * C727) *
                         C8870) *
                        C84304 +
                    ((C82067 * C1294 + C45932 * C1492 + C82038 * C1295 +
                      C84201 * C1493 + C82049 * C1296 + C84193 * C1494) *
                         C84344 +
                     (C82067 * C1180 + C45932 * C1185 + C82038 * C1181 +
                      C84201 * C1186 + C82049 * C1182 + C84193 * C1187) *
                         C8871 +
                     (C82067 * C255 + C45932 * C524 + C82038 * C254 +
                      C84201 * C523 + C82049 * C253 + C84193 * C522) *
                         C84529 +
                     (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                      C84201 * C110 + C82049 * C103 + C84193 * C109) *
                         C8870) *
                        C38937) *
                       C84603 * C84604 * C91)) /
                 (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C8870 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84529 +
            (C45088 + C45089) * C8871 + (C45752 + C45753) * C84344) *
               C84193 +
           ((C39056 + C39057) * C8870 + (C39530 + C39531) * C84529 +
            (C43130 + C43131) * C8871 + (C43787 + C43788) * C84344) *
               C84201 +
           ((C39060 + C39061) * C8870 + (C39532 + C39533) * C84529 +
            (C48341 + C48342) * C8871 + (C48947 + C48948) * C84344) *
               C45932) *
              C84603 * C84604 * C90 -
          (((C39030 * C8247 + C84304 * C8591 + C39029 * C1294 +
             C38937 * C1539) *
                C84344 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C8871 +
            (C39535 + C39534) * C84529 + (C39065 + C39064) * C8870) *
               C45932 +
           ((C48948 + C48947) * C84344 + (C48342 + C48341) * C8871 +
            (C39533 + C39532) * C84529 + (C39061 + C39060) * C8870) *
               C84201 +
           ((C43788 + C43787) * C84344 + (C43131 + C43130) * C8871 +
            (C39531 + C39530) * C84529 + (C39057 + C39056) * C8870) *
               C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C38937 +
            (C12621 + C12622) * C84304) *
               C84193 +
           ((C9379 + C9380) * C38937 + (C11655 + C11656) * C84304) * C84201 +
           ((C9381 + C9382) * C38937 + (C11657 + C11658) * C84304) * C45932) *
              C84603 * C84604 * C90 -
          (((C9343 * C8102 + C9980 + C9980 + C84344 * C8658 + C9342 * C720 +
             C9981 + C9981 + C84529 * C1126) *
                C84304 +
            (C9384 + C9383) * C38937) *
               C45932 +
           ((C11658 + C11657) * C84304 + (C9382 + C9381) * C38937) * C84201 +
           ((C11656 + C11655) * C84304 + (C9380 + C9379) * C38937) * C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                       C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                       C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                          C84529 +
                      (C82052 * C1183 + C47529 + C47529 + C84193 * C1193 +
                       C82045 * C1182 + C47528 + C47528 + C84201 * C1192 +
                       C45940 * C1181 + C47527 + C47527 + C45932 * C1191) *
                          C84344) *
                         C38937 +
                     ((C46774 + C46775 + C46776) * C84529 +
                      (C49157 + C49158 + C49159) * C84344) *
                         C84304) *
                        C84603 * C716 -
                    (((C45940 * C3441 + C47521 + C47521 + C45932 * C3453 +
                       C82045 * C3442 + C47522 + C47522 + C84201 * C3454 +
                       C82052 * C3443 + C47523 + C47523 + C84193 * C3455) *
                          C84344 +
                      (C46779 + C46778 + C46777) * C84529) *
                         C84304 +
                     ((C49159 + C49158 + C49157) * C84344 +
                      (C46776 + C46775 + C46774) * C84529) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82049 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84193 +
            (C39056 + C39057) * C82038 + (C39058 + C39059) * C84201 +
            (C39060 + C39061) * C82067 + (C39062 + C39063) * C45932) *
               C84529 +
           ((C45088 + C45089) * C82049 + (C45090 + C45091) * C84193 +
            (C43130 + C43131) * C82038 + (C43132 + C43133) * C84201 +
            (C48341 + C48342) * C82067 + (C48343 + C48344) * C45932) *
               C84344) *
              C84603 * C716 -
          (((C39030 * C3447 + C84304 * C3548 + C39029 * C3450 +
             C38937 * C3549) *
                C45932 +
            (C39030 * C3441 + C84304 * C3542 + C39029 * C3444 +
             C38937 * C3543) *
                C82067 +
            (C39030 * C3448 + C84304 * C3550 + C39029 * C3451 +
             C38937 * C3551) *
                C84201 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C82038 +
            (C39030 * C3449 + C84304 * C3552 + C39029 * C3452 +
             C38937 * C3553) *
                C84193 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C82049) *
               C84344 +
           ((C39030 * C1687 + C84304 * C1794 + C39029 * C726 + C38937 * C788) *
                C45932 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C82067 +
            (C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
                C84201 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C82038 +
            (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
                C84193 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C82049) *
               C84529) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82049 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84193 +
            (C8897 + C8898) * C82038 + (C8899 + C8900) * C84201 +
            (C8901 + C8902) * C82067 + (C8903 + C8904) * C45932) *
               C38937 +
           ((C11976 + C11977) * C82049 + (C11978 + C11979) * C84193 +
            (C10999 + C11000) * C82038 + (C11001 + C11002) * C84201 +
            (C11003 + C11004) * C82067 + (C11005 + C11006) * C45932) *
               C84304) *
              C84603 * C716 -
          (((C8871 * C3447 + C84344 * C3634 + C8870 * C1687 + C84529 * C1912) *
                C45932 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C82067 +
            (C21944 + C21943) * C84201 + (C21942 + C21941) * C82038 +
            (C22898 + C22897) * C84193 + (C22896 + C22895) * C82049) *
               C84304 +
           ((C11006 + C11005) * C45932 + (C11004 + C11003) * C82067 +
            (C11002 + C11001) * C84201 + (C11000 + C10999) * C82038 +
            (C11979 + C11978) * C84193 + (C11977 + C11976) * C82049) *
               C38937) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C39029 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C38937 +
                      (C47038 + C47039 + C47040) * C39030 +
                      (C47041 + C47042 + C47043) * C84304) *
                         C84529 +
                     ((C82049 * C1183 + C84193 * C1188 + C82038 * C1182 +
                       C84201 * C1187 + C82067 * C1181 + C45932 * C1186) *
                          C39029 +
                      (C82049 * C1245 + C84193 * C1349 + C82038 * C1244 +
                       C84201 * C1348 + C82067 * C1243 + C45932 * C1347) *
                          C38937 +
                      (C49466 + C49467 + C49468) * C39030 +
                      (C49469 + C49470 + C49471) * C84304) *
                         C84344) *
                        C84603 * C716 -
                    (((C82067 * C3542 + C45932 * C3714 + C82038 * C3544 +
                       C84201 * C3715 + C82049 * C3546 + C84193 * C3716) *
                          C84304 +
                      (C82067 * C3441 + C45932 * C3447 + C82038 * C3442 +
                       C84201 * C3448 + C82049 * C3443 + C84193 * C3449) *
                          C39030 +
                      (C49471 + C49470 + C49469) * C38937 +
                      (C49468 + C49467 + C49466) * C39029) *
                         C84344 +
                     ((C47049 + C47048 + C47047) * C84304 +
                      (C47046 + C47045 + C47044) * C39030 +
                      (C47043 + C47042 + C47041) * C38937 +
                      (C47040 + C47039 + C47038) * C39029) *
                         C84529) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84193 +
                      (C39302 + C39303) * C84201 + (C39304 + C39305) * C45932) *
                         C84529 +
                     ((C45434 + C45435) * C84193 + (C43472 + C43473) * C84201 +
                      (C48647 + C48648) * C45932) *
                         C84344) *
                        C84603 * C716 -
                    (((C39266 * C3441 + C49570 + C49570 + C84304 * C3794 +
                       C39265 * C3444 + C49571 + C49571 + C38937 * C3795) *
                          C45932 +
                      (C39266 * C3442 + C44444 + C44444 + C84304 * C3796 +
                       C39265 * C3445 + C44445 + C44445 + C38937 * C3797) *
                          C84201 +
                      (C39266 * C3443 + C44446 + C44446 + C84304 * C3798 +
                       C39265 * C3446 + C44447 + C44447 + C38937 * C3799) *
                          C84193) *
                         C84344 +
                     ((C39266 * C1683 + C39996 + C39996 + C84304 * C2095 +
                       C39265 * C721 + C39997 + C39997 + C38937 * C934) *
                          C45932 +
                      (C39266 * C1682 + C39998 + C39998 + C84304 * C2094 +
                       C39265 * C722 + C39999 + C39999 + C38937 * C935) *
                          C84201 +
                      (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                       C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                          C84193) *
                         C84529) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C39029 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C38937 +
            (C11976 + C11977) * C39030 + (C12302 + C12303) * C84304) *
               C84193 +
           ((C8897 + C8898) * C39029 + (C9124 + C9125) * C38937 +
            (C10999 + C11000) * C39030 + (C11329 + C11330) * C84304) *
               C84201 +
           ((C8901 + C8902) * C39029 + (C9126 + C9127) * C38937 +
            (C11003 + C11004) * C39030 + (C11331 + C11332) * C84304) *
               C45932) *
              C84603 * C716 -
          (((C8871 * C3542 + C84344 * C3883 + C8870 * C1790 + C84529 * C2215) *
                C84304 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C39030 +
            (C11332 + C11331) * C38937 + (C11004 + C11003) * C39029) *
               C45932 +
           ((C22259 + C22258) * C84304 + (C21942 + C21941) * C39030 +
            (C11330 + C11329) * C38937 + (C11000 + C10999) * C39029) *
               C84201 +
           ((C23225 + C23224) * C84304 + (C22896 + C22895) * C39030 +
            (C12303 + C12302) * C38937 + (C11977 + C11976) * C39029) *
               C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C8870 +
                      (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                       C84201 * C522 + C82067 * C254 + C45932 * C523) *
                          C84529 +
                      (C82049 * C1183 + C84193 * C1188 + C82038 * C1182 +
                       C84201 * C1187 + C82067 * C1181 + C45932 * C1186) *
                          C8871 +
                      (C82049 * C1297 + C84193 * C1495 + C82038 * C1296 +
                       C84201 * C1494 + C82067 * C1295 + C45932 * C1493) *
                          C84344) *
                         C38937 +
                     ((C47038 + C47039 + C47040) * C8870 +
                      (C47293 + C47294 + C47295) * C84529 +
                      (C49466 + C49467 + C49468) * C8871 +
                      (C49774 + C49775 + C49776) * C84344) *
                         C84304) *
                        C84603 * C716 -
                    (((C82067 * C3628 + C45932 * C3963 + C82038 * C3629 +
                       C84201 * C3964 + C82049 * C3630 + C84193 * C3965) *
                          C84344 +
                      (C82067 * C3441 + C45932 * C3447 + C82038 * C3442 +
                       C84201 * C3448 + C82049 * C3443 + C84193 * C3449) *
                          C8871 +
                      (C47298 + C47297 + C47296) * C84529 +
                      (C47046 + C47045 + C47044) * C8870) *
                         C84304 +
                     ((C49776 + C49775 + C49774) * C84344 +
                      (C49468 + C49467 + C49466) * C8871 +
                      (C47295 + C47294 + C47293) * C84529 +
                      (C47040 + C47039 + C47038) * C8870) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C8870 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84529 +
            (C45088 + C45089) * C8871 + (C45752 + C45753) * C84344) *
               C84193 +
           ((C39056 + C39057) * C8870 + (C39530 + C39531) * C84529 +
            (C43130 + C43131) * C8871 + (C43787 + C43788) * C84344) *
               C84201 +
           ((C39060 + C39061) * C8870 + (C39532 + C39533) * C84529 +
            (C48341 + C48342) * C8871 + (C48947 + C48948) * C84344) *
               C45932) *
              C84603 * C716 -
          (((C39030 * C3628 + C84304 * C4043 + C39029 * C3631 +
             C38937 * C4044) *
                C84344 +
            (C39030 * C3441 + C84304 * C3542 + C39029 * C3444 +
             C38937 * C3543) *
                C8871 +
            (C39030 * C1908 + C84304 * C2395 + C39029 * C835 + C38937 * C1080) *
                C84529 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C8870) *
               C45932 +
           ((C39030 * C3629 + C84304 * C4045 + C39029 * C3632 +
             C38937 * C4046) *
                C84344 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C8871 +
            (C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C84529 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C8870) *
               C84201 +
           ((C39030 * C3630 + C84304 * C4047 + C39029 * C3633 +
             C38937 * C4048) *
                C84344 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C8871 +
            (C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C84529 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C8870) *
               C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C38937 +
            (C12621 + C12622) * C84304) *
               C84193 +
           ((C9379 + C9380) * C38937 + (C11655 + C11656) * C84304) * C84201 +
           ((C9381 + C9382) * C38937 + (C11657 + C11658) * C84304) * C45932) *
              C84603 * C716 -
          (((C9343 * C3441 + C12611 + C12611 + C84344 * C4123 + C9342 * C1683 +
             C12612 + C12612 + C84529 * C2491) *
                C84304 +
            (C11658 + C11657) * C38937) *
               C45932 +
           ((C22572 + C22571) * C84304 + (C11656 + C11655) * C38937) * C84201 +
           ((C23545 + C23544) * C84304 + (C12622 + C12621) * C38937) * C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                       C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                       C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                          C84529 +
                      (C50089 + C50090 + C50091) * C84344) *
                         C38937 +
                     ((C46774 + C46775 + C46776) * C84529 +
                      (C49157 + C49158 + C49159) * C84344) *
                         C84304) *
                        C1177 -
                    (((C45940 * C5113 + C50077 + C50077 + C45932 * C5119 +
                       C82045 * C5114 + C50078 + C50078 + C84201 * C5120 +
                       C82052 * C5115 + C50079 + C50079 + C84193 * C5121) *
                          C84344 +
                      (C49159 + C49158 + C49157) * C84529) *
                         C84304 +
                     ((C45940 * C4214 + C50080 + C50080 + C45932 * C4222 +
                       C82045 * C4213 + C50081 + C50081 + C84201 * C4221 +
                       C82052 * C4212 + C50082 + C50082 + C84193 * C4220) *
                          C84344 +
                      (C50091 + C50090 + C50089) * C84529) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82049 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84193 +
            (C39056 + C39057) * C82038 + (C39058 + C39059) * C84201 +
            (C39060 + C39061) * C82067 + (C39062 + C39063) * C45932) *
               C84529 +
           ((C45088 + C45089) * C82049 + (C45090 + C45091) * C84193 +
            (C43130 + C43131) * C82038 + (C43132 + C43133) * C84201 +
            (C48341 + C48342) * C82067 + (C48343 + C48344) * C45932) *
               C84344) *
              C1177 -
          (((C39030 * C5116 + C84304 * C5202 + C39029 * C4218 +
             C38937 * C4313) *
                C45932 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C82067 +
            (C43137 + C43136) * C84201 + (C43135 + C43134) * C82038 +
            (C45095 + C45094) * C84193 + (C45093 + C45092) * C82049) *
               C84344 +
           ((C48344 + C48343) * C45932 + (C48342 + C48341) * C82067 +
            (C43133 + C43132) * C84201 + (C43131 + C43130) * C82038 +
            (C45091 + C45090) * C84193 + (C45089 + C45088) * C82049) *
               C84529) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82049 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84193 +
            (C8897 + C8898) * C82038 + (C8899 + C8900) * C84201 +
            (C8901 + C8902) * C82067 + (C8903 + C8904) * C45932) *
               C38937 +
           ((C11976 + C11977) * C82049 + (C11978 + C11979) * C84193 +
            (C10999 + C11000) * C82038 + (C11001 + C11002) * C84201 +
            (C11003 + C11004) * C82067 + (C11005 + C11006) * C45932) *
               C84304) *
              C1177 -
          (((C8871 * C5116 + C84344 * C5282 + C8870 * C3450 + C84529 * C3637) *
                C45932 +
            (C8871 * C5113 + C84344 * C5279 + C8870 * C3444 + C84529 * C3631) *
                C82067 +
            (C8871 * C5117 + C84344 * C5283 + C8870 * C3451 + C84529 * C3638) *
                C84201 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C82038 +
            (C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C84193 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C82049) *
               C84304 +
           ((C8871 * C4218 + C84344 * C4422 + C8870 * C1186 + C84529 * C1300) *
                C45932 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C82067 +
            (C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
                C84201 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C82038 +
            (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C84193 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C82049) *
               C38937) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C39029 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C38937 +
                      (C47038 + C47039 + C47040) * C39030 +
                      (C47041 + C47042 + C47043) * C84304) *
                         C84529 +
                     ((C50398 + C50399 + C50400) * C39029 +
                      (C50401 + C50402 + C50403) * C38937 +
                      (C49466 + C49467 + C49468) * C39030 +
                      (C49469 + C49470 + C49471) * C84304) *
                         C84344) *
                        C1177 -
                    (((C82067 * C5199 + C45932 * C5359 + C82038 * C5200 +
                       C84201 * C5360 + C82049 * C5201 + C84193 * C5361) *
                          C84304 +
                      (C82067 * C5113 + C45932 * C5116 + C82038 * C5114 +
                       C84201 * C5117 + C82049 * C5115 + C84193 * C5118) *
                          C39030 +
                      (C82067 * C4309 + C45932 * C4536 + C82038 * C4308 +
                       C84201 * C4535 + C82049 * C4307 + C84193 * C4534) *
                          C38937 +
                      (C82067 * C4214 + C45932 * C4218 + C82038 * C4213 +
                       C84201 * C4217 + C82049 * C4212 + C84193 * C4216) *
                          C39029) *
                         C84344 +
                     ((C49471 + C49470 + C49469) * C84304 +
                      (C49468 + C49467 + C49466) * C39030 +
                      (C50403 + C50402 + C50401) * C38937 +
                      (C50400 + C50399 + C50398) * C39029) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84193 +
                      (C39302 + C39303) * C84201 + (C39304 + C39305) * C45932) *
                         C84529 +
                     ((C45434 + C45435) * C84193 + (C43472 + C43473) * C84201 +
                      (C48647 + C48648) * C45932) *
                         C84344) *
                        C1177 -
                    (((C39266 * C5113 + C43462 + C43462 + C84304 * C5436 +
                       C39265 * C4214 + C43463 + C43463 + C38937 * C4614) *
                          C45932 +
                      (C43475 + C43474) * C84201 + (C45437 + C45436) * C84193) *
                         C84344 +
                     ((C48648 + C48647) * C45932 + (C43473 + C43472) * C84201 +
                      (C45435 + C45434) * C84193) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C39029 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C38937 +
            (C11976 + C11977) * C39030 + (C12302 + C12303) * C84304) *
               C84193 +
           ((C8897 + C8898) * C39029 + (C9124 + C9125) * C38937 +
            (C10999 + C11000) * C39030 + (C11329 + C11330) * C84304) *
               C84201 +
           ((C8901 + C8902) * C39029 + (C9126 + C9127) * C38937 +
            (C11003 + C11004) * C39030 + (C11331 + C11332) * C84304) *
               C45932) *
              C1177 -
          (((C8871 * C5199 + C84344 * C5519 + C8870 * C3543 + C84529 * C3884) *
                C84304 +
            (C8871 * C5113 + C84344 * C5279 + C8870 * C3444 + C84529 * C3631) *
                C39030 +
            (C8871 * C4309 + C84344 * C4716 + C8870 * C1243 + C84529 * C1446) *
                C38937 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C39029) *
               C45932 +
           ((C8871 * C5200 + C84344 * C5520 + C8870 * C3545 + C84529 * C3886) *
                C84304 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C39030 +
            (C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C38937 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C39029) *
               C84201 +
           ((C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
                C84304 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C39030 +
            (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C38937 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C39029) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C8870 +
                      (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                       C84201 * C522 + C82067 * C254 + C45932 * C523) *
                          C84529 +
                      (C50398 + C50399 + C50400) * C8871 +
                      (C50704 + C50705 + C50706) * C84344) *
                         C38937 +
                     ((C47038 + C47039 + C47040) * C8870 +
                      (C47293 + C47294 + C47295) * C84529 +
                      (C49466 + C49467 + C49468) * C8871 +
                      (C49774 + C49775 + C49776) * C84344) *
                         C84304) *
                        C1177 -
                    (((C82067 * C5279 + C45932 * C5596 + C82038 * C5280 +
                       C84201 * C5597 + C82049 * C5281 + C84193 * C5598) *
                          C84344 +
                      (C82067 * C5113 + C45932 * C5116 + C82038 * C5114 +
                       C84201 * C5117 + C82049 * C5115 + C84193 * C5118) *
                          C8871 +
                      (C49776 + C49775 + C49774) * C84529 +
                      (C49468 + C49467 + C49466) * C8870) *
                         C84304 +
                     ((C82067 * C4418 + C45932 * C4812 + C82038 * C4417 +
                       C84201 * C4811 + C82049 * C4416 + C84193 * C4810) *
                          C84344 +
                      (C82067 * C4214 + C45932 * C4218 + C82038 * C4213 +
                       C84201 * C4217 + C82049 * C4212 + C84193 * C4216) *
                          C8871 +
                      (C50706 + C50705 + C50704) * C84529 +
                      (C50400 + C50399 + C50398) * C8870) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C8870 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84529 +
            (C45088 + C45089) * C8871 + (C45752 + C45753) * C84344) *
               C84193 +
           ((C39056 + C39057) * C8870 + (C39530 + C39531) * C84529 +
            (C43130 + C43131) * C8871 + (C43787 + C43788) * C84344) *
               C84201 +
           ((C39060 + C39061) * C8870 + (C39532 + C39533) * C84529 +
            (C48341 + C48342) * C8871 + (C48947 + C48948) * C84344) *
               C45932) *
              C1177 -
          (((C39030 * C5279 + C84304 * C5673 + C39029 * C4418 +
             C38937 * C4890) *
                C84344 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C8871 +
            (C48948 + C48947) * C84529 + (C48342 + C48341) * C8870) *
               C45932 +
           ((C43790 + C43789) * C84344 + (C43135 + C43134) * C8871 +
            (C43788 + C43787) * C84529 + (C43131 + C43130) * C8870) *
               C84201 +
           ((C45755 + C45754) * C84344 + (C45093 + C45092) * C8871 +
            (C45753 + C45752) * C84529 + (C45089 + C45088) * C8870) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C38937 +
            (C12621 + C12622) * C84304) *
               C84193 +
           ((C9379 + C9380) * C38937 + (C11655 + C11656) * C84304) * C84201 +
           ((C9381 + C9382) * C38937 + (C11657 + C11658) * C84304) * C45932) *
              C1177 -
          (((C9343 * C5113 + C13539 + C13539 + C84344 * C5750 + C9342 * C3444 +
             C13540 + C13540 + C84529 * C4124) *
                C84304 +
            (C9343 * C4214 + C10656 + C10656 + C84344 * C4995 + C9342 * C1181 +
             C10657 + C10657 + C84529 * C1587) *
                C38937) *
               C45932 +
           ((C9343 * C5114 + C13541 + C13541 + C84344 * C5751 + C9342 * C3445 +
             C13542 + C13542 + C84529 * C4126) *
                C84304 +
            (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
             C10659 + C10659 + C84529 * C1588) *
                C38937) *
               C84201 +
           ((C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
             C13544 + C13544 + C84529 * C4128) *
                C84304 +
            (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
             C10661 + C10661 + C84529 * C1589) *
                C38937) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C84257 * C38937 +
           (C38939 * C723 + C38952 + C38952 + C84602 * C733 + C38941 * C722 +
            C38953 + C38953 + C84592 * C732 + C38943 * C721 + C38954 + C38954 +
            C84576 * C731 + C38945 * C720 + C38955 + C38955 + C84527 * C730) *
               C84257 * C84304) *
              C84603 * C84604 * C90 -
          ((C38945 * C719 + C38956 + C38956 + C84527 * C729 + C38943 * C720 +
            C38957 + C38957 + C84576 * C730 + C38941 * C721 + C38958 + C38958 +
            C84592 * C731 + C38939 * C722 + C38959 + C38959 + C84602 * C732) *
               C84257 * C84304 +
           (C38945 * C106 + C38960 + C38960 + C84527 * C118 + C38943 * C105 +
            C38961 + C38961 + C84576 * C117 + C38941 * C104 + C38962 + C38962 +
            C84592 * C116 + C38939 * C103 + C38963 + C38963 + C84602 * C115) *
               C84257 * C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84257 * C84606 +
           (C40959 * C723 + C40966 + C40966 + C40953 * C733 + C40961 * C722 +
            C40967 + C40967 + C84198 * C732) *
               C84257 * C84599 +
           (C40959 * C1681 + C40968 + C40968 + C40953 * C1689 + C40961 * C1682 +
            C40969 + C40969 + C84198 * C1690) *
               C84257 * C84586 +
           (C40959 * C2599 + C40970 + C40970 + C40953 * C2605 + C40961 * C2598 +
            C40971 + C40971 + C84198 * C2604) *
               C84257 * C84536) *
              C84603 * C84604 * C90 -
          ((C40961 * C2597 + C40972 + C40972 + C84198 * C2603 + C40959 * C2598 +
            C40973 + C40973 + C40953 * C2604) *
               C84257 * C84536 +
           (C40961 * C1683 + C40974 + C40974 + C84198 * C1691 + C40959 * C1682 +
            C40975 + C40975 + C40953 * C1690) *
               C84257 * C84586 +
           (C40961 * C721 + C40976 + C40976 + C84198 * C731 + C40959 * C722 +
            C40977 + C40977 + C40953 * C732) *
               C84257 * C84599 +
           (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
            C40979 + C40979 + C40953 * C115) *
               C84257 * C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C38940 +
           (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
               C84602 +
           (C39056 + C39057) * C38942 + (C39058 + C39059) * C84592 +
           (C39060 + C39061) * C38944 + (C39062 + C39063) * C84576 +
           (C39064 + C39065) * C38946 + (C39066 + C39067) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C39030 * C724 + C84304 * C786 + C39029 * C112 + C38937 * C183) *
               C84527 +
           (C39030 * C719 + C84304 * C781 + C39029 * C106 + C38937 * C177) *
               C38946 +
           (C39067 + C39066) * C84576 + (C39065 + C39064) * C38944 +
           (C39063 + C39062) * C84592 + (C39061 + C39060) * C38942 +
           (C39059 + C39058) * C84602 + (C39057 + C39056) * C38940) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C40960 +
           (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
            C41047 * C1685 + C84586 * C1792 + C41048 * C2602 + C84536 * C2718) *
               C40953 +
           (C41066 + C41067 + C41068 + C41069) * C40962 +
           (C41070 + C41071 + C41072 + C41073) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C41048 * C2600 + C84536 * C2716 + C41047 * C1687 + C84586 * C1794 +
            C41046 * C726 + C84599 * C788 + C41045 * C110 + C84606 * C181) *
               C84198 +
           (C41048 * C2597 + C84536 * C2713 + C41047 * C1683 + C84586 * C1790 +
            C41046 * C721 + C84599 * C783 + C41045 * C104 + C84606 * C175) *
               C40962 +
           (C41073 + C41072 + C41071 + C41070) * C40953 +
           (C41069 + C41068 + C41067 + C41066) * C40960) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C38940 +
            (C251 * C108 + C84257 * C258) * C84602 + C281 * C38942 +
            C282 * C84592 + C283 * C38944 + C284 * C84576 + C285 * C38946 +
            C286 * C84527) *
               C38937 +
           (C2816 * C38940 + C2817 * C84602 + C1931 * C38942 + C1932 * C84592 +
            C1933 * C38944 + C1934 * C84576 + C6883 * C38946 + C6884 * C84527) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C251 * C724 + C84257 * C838) * C84527 +
            (C251 * C719 + C84257 * C833) * C38946 + C6884 * C84576 +
            C6883 * C38944 + C1934 * C84592 + C1933 * C38942 + C1932 * C84602 +
            C1931 * C38940) *
               C84304 +
           (C288 * C84527 + C287 * C38946 + C286 * C84576 + C285 * C38944 +
            C284 * C84592 + C283 * C38942 + C282 * C84602 + C281 * C38940) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C40960 +
            (C251 * C108 + C84257 * C258) * C40953 + C281 * C40962 +
            C282 * C84198) *
               C84606 +
           (C2816 * C40960 + C2817 * C40953 + C1931 * C40962 + C1932 * C84198) *
               C84599 +
           (C2818 * C40960 + C2819 * C40953 + C1935 * C40962 + C1936 * C84198) *
               C84586 +
           (C16433 * C40960 + C16434 * C40953 + C19825 * C40962 +
            C19826 * C84198) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C251 * C2600 + C84257 * C2796) * C84198 +
            (C251 * C2597 + C84257 * C2793) * C40962 + C19826 * C40953 +
            C19825 * C40960) *
               C84536 +
           (C1938 * C84198 + C1937 * C40962 + C1936 * C40953 + C1935 * C40960) *
               C84586 +
           (C1934 * C84198 + C1933 * C40962 + C1932 * C40953 + C1931 * C40960) *
               C84599 +
           (C284 * C84198 + C283 * C40962 + C282 * C40953 + C281 * C40960) *
               C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C39029 +
           (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
            C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
               C38937 +
           (C38940 * C723 + C84602 * C728 + C38942 * C722 + C84592 * C727 +
            C38944 * C721 + C84576 * C726 + C38946 * C720 + C84527 * C725) *
               C39030 +
           (C38940 * C785 + C84602 * C889 + C38942 * C784 + C84592 * C888 +
            C38944 * C783 + C84576 * C887 + C38946 * C782 + C84527 * C886) *
               C84304) *
              C84257 * C84603 * C84604 * C90 -
          ((C38946 * C781 + C84527 * C885 + C38944 * C782 + C84576 * C886 +
            C38942 * C783 + C84592 * C887 + C38940 * C784 + C84602 * C888) *
               C84304 +
           (C38946 * C719 + C84527 * C724 + C38944 * C720 + C84576 * C725 +
            C38942 * C721 + C84592 * C726 + C38940 * C722 + C84602 * C727) *
               C39030 +
           (C38946 * C177 + C84527 * C334 + C38944 * C176 + C84576 * C333 +
            C38942 * C175 + C84592 * C332 + C38940 * C174 + C84602 * C331) *
               C38937 +
           (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
            C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
               C39029) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C41045 +
           (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
               C84606 +
           (C40960 * C723 + C40953 * C728 + C40962 * C722 + C84198 * C727) *
               C41046 +
           (C40960 * C785 + C40953 * C889 + C40962 * C784 + C84198 * C888) *
               C84599 +
           (C40960 * C1681 + C40953 * C1685 + C40962 * C1682 + C84198 * C1686) *
               C41047 +
           (C40960 * C1788 + C40953 * C2012 + C40962 * C1789 + C84198 * C2013) *
               C84586 +
           (C40960 * C2599 + C40953 * C2602 + C40962 * C2598 + C84198 * C2601) *
               C41048 +
           (C40960 * C2715 + C40953 * C2899 + C40962 * C2714 + C84198 * C2898) *
               C84536) *
              C84257 * C84603 * C84604 * C90 -
          ((C40962 * C2713 + C84198 * C2897 + C40960 * C2714 + C40953 * C2898) *
               C84536 +
           (C40962 * C2597 + C84198 * C2600 + C40960 * C2598 + C40953 * C2601) *
               C41048 +
           (C40962 * C1790 + C84198 * C2014 + C40960 * C1789 + C40953 * C2013) *
               C84586 +
           (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 + C40953 * C1686) *
               C41047 +
           (C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
               C84599 +
           (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
               C41046 +
           (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
               C84606 +
           (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
               C41045) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
            C39269 + C39269 + C84304 * C936) *
               C84602 +
           (C39302 + C39303) * C84592 + (C39304 + C39305) * C84576 +
           (C39306 + C39307) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C39266 * C719 + C39288 + C39288 + C84304 * C932 + C39265 * C106 +
            C39289 + C39289 + C38937 * C383) *
               C84527 +
           (C39307 + C39306) * C84576 + (C39305 + C39304) * C84592 +
           (C39303 + C39302) * C84602) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41271 * C102 + C41276 + C41276 + C84606 * C379 + C41272 * C723 +
            C41277 + C41277 + C84599 * C936 + C41273 * C1681 + C41278 + C41278 +
            C84586 * C2093 + C41274 * C2599 + C41279 + C41279 +
            C84536 * C3012) *
               C40953 +
           (C41304 + C41305 + C41306 + C41307) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C41274 * C2597 + C41292 + C41292 + C84536 * C3010 + C41273 * C1683 +
            C41293 + C41293 + C84586 * C2095 + C41272 * C721 + C41294 + C41294 +
            C84599 * C934 + C41271 * C104 + C41295 + C41295 + C84606 * C381) *
               C84198 +
           (C41307 + C41306 + C41305 + C41304) * C40953) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C39029 +
                      (C251 * C173 + C84257 * C453) * C38937 + C2816 * C39030 +
                      C3104 * C84304) *
                         C84602 +
                     (C39374 + C39375 + C39376 + C39377) * C84592 +
                     (C39378 + C39379 + C39380 + C39381) * C84576 +
                     (C39382 + C39383 + C39384 + C39385) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C251 * C781 + C84257 * C984) * C84304 +
                      (C251 * C719 + C84257 * C833) * C39030 + C475 * C38937 +
                      C287 * C39029) *
                         C84527 +
                     (C39385 + C39384 + C39383 + C39382) * C84576 +
                     (C39381 + C39380 + C39379 + C39378) * C84592 +
                     (C39377 + C39376 + C39375 + C39374) * C84602) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C41045 +
                      (C251 * C173 + C84257 * C453) * C84606 + C2816 * C41046 +
                      C3104 * C84599 + C2818 * C41047 + C3105 * C84586 +
                      C16433 * C41048 + C16603 * C84536) *
                         C40953 +
                     (C41374 + C41375 + C41376 + C41377 + C41378 + C41379 +
                      C41380 + C41381) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C251 * C2713 + C84257 * C3096) * C84536 +
                      (C251 * C2597 + C84257 * C2793) * C41048 +
                      C2237 * C84586 + C1937 * C41047 + C2236 * C84599 +
                      C1933 * C41046 + C473 * C84606 + C283 * C41045) *
                         C84198 +
                     (C41381 + C41380 + C41379 + C41378 + C41377 + C41376 +
                      C41375 + C41374) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C251 +
            (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
             C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
                C84257) *
               C38937 +
           ((C38940 * C723 + C84602 * C728 + C38942 * C722 + C84592 * C727 +
             C38944 * C721 + C84576 * C726 + C38946 * C720 + C84527 * C725) *
                C251 +
            (C38940 * C837 + C84602 * C1035 + C38942 * C836 + C84592 * C1034 +
             C38944 * C835 + C84576 * C1033 + C38946 * C834 + C84527 * C1032) *
                C84257) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C38946 * C833 + C84527 * C1031 + C38944 * C834 + C84576 * C1032 +
             C38942 * C835 + C84592 * C1033 + C38940 * C836 + C84602 * C1034) *
                C84257 +
            (C38946 * C719 + C84527 * C724 + C38944 * C720 + C84576 * C725 +
             C38942 * C721 + C84592 * C726 + C38940 * C722 + C84602 * C727) *
                C251) *
               C84304 +
           ((C38946 * C256 + C84527 * C525 + C38944 * C255 + C84576 * C524 +
             C38942 * C254 + C84592 * C523 + C38940 * C253 + C84602 * C522) *
                C84257 +
            (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
             C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
                C251) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C251 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84257) *
               C84606 +
           ((C40960 * C723 + C40953 * C728 + C40962 * C722 + C84198 * C727) *
                C251 +
            (C40960 * C837 + C40953 * C1035 + C40962 * C836 + C84198 * C1034) *
                C84257) *
               C84599 +
           ((C40960 * C1681 + C40953 * C1685 + C40962 * C1682 +
             C84198 * C1686) *
                C251 +
            (C40960 * C1906 + C40953 * C2315 + C40962 * C1907 +
             C84198 * C2316) *
                C84257) *
               C84586 +
           ((C40960 * C2599 + C40953 * C2602 + C40962 * C2598 +
             C84198 * C2601) *
                C251 +
            (C40960 * C2795 + C40953 * C3181 + C40962 * C2794 +
             C84198 * C3180) *
                C84257) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C40962 * C2793 + C84198 * C3179 + C40960 * C2794 +
             C40953 * C3180) *
                C84257 +
            (C40962 * C2597 + C84198 * C2600 + C40960 * C2598 +
             C40953 * C2601) *
                C251) *
               C84536 +
           ((C40962 * C1908 + C84198 * C2317 + C40960 * C1907 +
             C40953 * C2316) *
                C84257 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C251) *
               C84586 +
           ((C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C84257 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C251) *
               C84599 +
           ((C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C84257 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C251) *
               C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C251 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84257) *
               C84602 +
           ((C39056 + C39057) * C251 + (C39530 + C39531) * C84257) * C84592 +
           ((C39060 + C39061) * C251 + (C39532 + C39533) * C84257) * C84576 +
           ((C39064 + C39065) * C251 + (C39534 + C39535) * C84257) * C84527) *
              C84603 * C84604 * C90 -
          (((C39030 * C833 + C84304 * C1078 + C39029 * C256 + C38937 * C573) *
                C84257 +
            (C39030 * C719 + C84304 * C781 + C39029 * C106 + C38937 * C177) *
                C251) *
               C84527 +
           ((C39535 + C39534) * C84257 + (C39065 + C39064) * C251) * C84576 +
           ((C39533 + C39532) * C84257 + (C39061 + C39060) * C251) * C84592 +
           ((C39531 + C39530) * C84257 + (C39057 + C39056) * C251) * C84602) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C251 +
            (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
             C41047 * C1906 + C84586 * C2393 + C41048 * C2795 +
             C84536 * C3276) *
                C84257) *
               C40953 +
           ((C41066 + C41067 + C41068 + C41069) * C251 +
            (C41522 + C41523 + C41524 + C41525) * C84257) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C41048 * C2793 + C84536 * C3274 + C41047 * C1908 + C84586 * C2395 +
             C41046 * C835 + C84599 * C1080 + C41045 * C254 + C84606 * C571) *
                C84257 +
            (C41048 * C2597 + C84536 * C2713 + C41047 * C1683 + C84586 * C1790 +
             C41046 * C721 + C84599 * C783 + C41045 * C104 + C84606 * C175) *
                C251) *
               C84198 +
           ((C41525 + C41524 + C41523 + C41522) * C84257 +
            (C41069 + C41068 + C41067 + C41066) * C251) *
               C40953) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C637 * C102 + C645 + C645 + C84257 * C638) * C38937 +
                      C3366 * C84304) *
                         C84602 +
                     (C39602 + C39603) * C84592 + (C39604 + C39605) * C84576 +
                     (C39606 + C39607) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84304 +
                      C670 * C38937) *
                         C84527 +
                     (C39607 + C39606) * C84576 + (C39605 + C39604) * C84592 +
                     (C39603 + C39602) * C84602) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84606 +
                      C3366 * C84599 + C3367 * C84586 + C16763 * C84536) *
                         C40953 +
                     (C41592 + C41593 + C41594 + C41595) * C84198) *
                        C84603 * C84604 * C90 -
                    (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84536 +
                      C2519 * C84586 + C2518 * C84599 + C668 * C84606) *
                         C84198 +
                     (C41595 + C41594 + C41593 + C41592) * C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C84257 * C38937 +
           (C39694 + C39695 + C39696 + C39697) * C84257 * C84304) *
              C84603 * C716 -
          ((C38945 * C1684 + C39682 + C39682 + C84527 * C1692 + C38943 * C1683 +
            C39683 + C39683 + C84576 * C1691 + C38941 * C1682 + C39684 +
            C39684 + C84592 * C1690 + C38939 * C1681 + C39685 + C39685 +
            C84602 * C1689) *
               C84257 * C84304 +
           (C39697 + C39696 + C39695 + C39694) * C84257 * C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84257 * C84606 +
           (C41688 + C41689) * C84257 * C84599 +
           (C41690 + C41691) * C84257 * C84586 +
           (C41692 + C41693) * C84257 * C84536) *
              C84603 * C716 -
          ((C40961 * C15869 + C41674 + C41674 + C84198 * C15873 +
            C40959 * C15868 + C41675 + C41675 + C40953 * C15872) *
               C84257 * C84536 +
           (C41693 + C41692) * C84257 * C84586 +
           (C41691 + C41690) * C84257 * C84599 +
           (C41689 + C41688) * C84257 * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C38940 +
           (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
               C84602 +
           (C39056 + C39057) * C38942 + (C39058 + C39059) * C84592 +
           (C39060 + C39061) * C38944 + (C39062 + C39063) * C84576 +
           (C39064 + C39065) * C38946 + (C39066 + C39067) * C84527) *
              C84257 * C84603 * C716 -
          ((C39030 * C1688 + C84304 * C1795 + C39029 * C725 + C38937 * C787) *
               C84527 +
           (C39030 * C1684 + C84304 * C1791 + C39029 * C720 + C38937 * C782) *
               C38946 +
           (C39030 * C1687 + C84304 * C1794 + C39029 * C726 + C38937 * C788) *
               C84576 +
           (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
               C38944 +
           (C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
               C84592 +
           (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
               C38942 +
           (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
               C84602 +
           (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
               C38940) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C40960 +
           (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
            C41047 * C1685 + C84586 * C1792 + C41048 * C2602 + C84536 * C2718) *
               C40953 +
           (C41066 + C41067 + C41068 + C41069) * C40962 +
           (C41070 + C41071 + C41072 + C41073) * C84198) *
              C84257 * C84603 * C716 -
          ((C41048 * C15871 + C84536 * C15934 + C41047 * C2601 +
            C84586 * C2717 + C41046 * C1686 + C84599 * C1793 + C41045 * C727 +
            C84606 * C789) *
               C84198 +
           (C41048 * C15869 + C84536 * C15932 + C41047 * C2598 +
            C84586 * C2714 + C41046 * C1682 + C84599 * C1789 + C41045 * C722 +
            C84606 * C784) *
               C40962 +
           (C41048 * C15870 + C84536 * C15933 + C41047 * C2602 +
            C84586 * C2718 + C41046 * C1685 + C84599 * C1792 + C41045 * C728 +
            C84606 * C790) *
               C40953 +
           (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
            C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
            C84606 * C785) *
               C40960) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C38940 +
                      (C251 * C108 + C84257 * C258) * C84602 + C281 * C38942 +
                      C282 * C84592 + C283 * C38944 + C284 * C84576 +
                      C285 * C38946 + C286 * C84527) *
                         C38937 +
                     (C39830 + C39831 + C39832 + C39833 + C39834 + C39835 +
                      C39836 + C39837) *
                         C84304) *
                        C84603 * C716 -
                    (((C251 * C1688 + C84257 * C1913) * C84527 +
                      (C251 * C1684 + C84257 * C1909) * C38946 +
                      C1938 * C84576 + C1937 * C38944 + C1936 * C84592 +
                      C1935 * C38942 + C2819 * C84602 + C2818 * C38940) *
                         C84304 +
                     (C39837 + C39836 + C39835 + C39834 + C39833 + C39832 +
                      C39831 + C39830) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C40960 +
                      (C251 * C108 + C84257 * C258) * C40953 + C281 * C40962 +
                      C282 * C84198) *
                         C84606 +
                     (C41826 + C41827 + C41828 + C41829) * C84599 +
                     (C41830 + C41831 + C41832 + C41833) * C84586 +
                     (C41834 + C41835 + C41836 + C41837) * C84536) *
                        C84603 * C716 -
                    (((C251 * C15871 + C84257 * C15980) * C84198 +
                      (C251 * C15869 + C84257 * C15978) * C40962 +
                      C16436 * C40953 + C16435 * C40960) *
                         C84536 +
                     (C41837 + C41836 + C41835 + C41834) * C84586 +
                     (C41833 + C41832 + C41831 + C41830) * C84599 +
                     (C41829 + C41828 + C41827 + C41826) * C84606) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C39029 +
           (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
            C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
               C38937 +
           (C39920 + C39921 + C39922 + C39923) * C39030 +
           (C39924 + C39925 + C39926 + C39927) * C84304) *
              C84257 * C84603 * C716 -
          ((C38946 * C1791 + C84527 * C2015 + C38944 * C1790 + C84576 * C2014 +
            C38942 * C1789 + C84592 * C2013 + C38940 * C1788 + C84602 * C2012) *
               C84304 +
           (C38946 * C1684 + C84527 * C1688 + C38944 * C1683 + C84576 * C1687 +
            C38942 * C1682 + C84592 * C1686 + C38940 * C1681 + C84602 * C1685) *
               C39030 +
           (C39927 + C39926 + C39925 + C39924) * C38937 +
           (C39923 + C39922 + C39921 + C39920) * C39029) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C41045 +
           (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
               C84606 +
           (C41928 + C41929) * C41046 + (C41930 + C41931) * C84599 +
           (C41932 + C41933) * C41047 + (C41934 + C41935) * C84586 +
           (C41936 + C41937) * C41048 + (C41938 + C41939) * C84536) *
              C84257 * C84603 * C716 -
          ((C40962 * C15932 + C84198 * C16024 + C40960 * C15931 +
            C40953 * C16023) *
               C84536 +
           (C40962 * C15869 + C84198 * C15871 + C40960 * C15868 +
            C40953 * C15870) *
               C41048 +
           (C41939 + C41938) * C84586 + (C41937 + C41936) * C41047 +
           (C41935 + C41934) * C84599 + (C41933 + C41932) * C41046 +
           (C41931 + C41930) * C84606 + (C41929 + C41928) * C41045) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[13] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C84602 +
                     (C39302 + C39303) * C84592 + (C39304 + C39305) * C84576 +
                     (C39306 + C39307) * C84527) *
                        C84257 * C84603 * C716 -
                    ((C39266 * C1684 + C39994 + C39994 + C84304 * C2096 +
                      C39265 * C720 + C39995 + C39995 + C38937 * C933) *
                         C84527 +
                     (C39266 * C1683 + C39996 + C39996 + C84304 * C2095 +
                      C39265 * C721 + C39997 + C39997 + C38937 * C934) *
                         C84576 +
                     (C39266 * C1682 + C39998 + C39998 + C84304 * C2094 +
                      C39265 * C722 + C39999 + C39999 + C38937 * C935) *
                         C84592 +
                     (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                      C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                         C84602) *
                        C84257 * C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C40953 +
                     (C41304 + C41305 + C41306 + C41307) * C84198) *
                        C84257 * C84603 * C716 -
                    ((C41274 * C15869 + C42006 + C42006 + C84536 * C16073 +
                      C41273 * C2598 + C42007 + C42007 + C84586 * C3011 +
                      C41272 * C1682 + C42008 + C42008 + C84599 * C2094 +
                      C41271 * C722 + C42009 + C42009 + C84606 * C935) *
                         C84198 +
                     (C41274 * C15868 + C42010 + C42010 + C84536 * C16072 +
                      C41273 * C2599 + C42011 + C42011 + C84586 * C3012 +
                      C41272 * C1681 + C42012 + C42012 + C84599 * C2093 +
                      C41271 * C723 + C42013 + C42013 + C84606 * C936) *
                         C40953) *
                        C84257 * C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C39029 +
            (C251 * C173 + C84257 * C453) * C38937 + C2816 * C39030 +
            C3104 * C84304) *
               C84602 +
           (C39374 + C39375 + C39376 + C39377) * C84592 +
           (C39378 + C39379 + C39380 + C39381) * C84576 +
           (C39382 + C39383 + C39384 + C39385) * C84527) *
              C84603 * C716 -
          (((C251 * C1791 + C84257 * C2216) * C84304 +
            (C251 * C1684 + C84257 * C1909) * C39030 + C7138 * C38937 +
            C6883 * C39029) *
               C84527 +
           (C2237 * C84304 + C1937 * C39030 + C2236 * C38937 + C1933 * C39029) *
               C84576 +
           (C2235 * C84304 + C1935 * C39030 + C2234 * C38937 + C1931 * C39029) *
               C84592 +
           (C3105 * C84304 + C2818 * C39030 + C3104 * C38937 + C2816 * C39029) *
               C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C41045 +
            (C251 * C173 + C84257 * C453) * C84606 + C2816 * C41046 +
            C3104 * C84599 + C2818 * C41047 + C3105 * C84586 + C16433 * C41048 +
            C16603 * C84536) *
               C40953 +
           (C41374 + C41375 + C41376 + C41377 + C41378 + C41379 + C41380 +
            C41381) *
               C84198) *
              C84603 * C716 -
          (((C251 * C15932 + C84257 * C16127) * C84536 +
            (C251 * C15869 + C84257 * C15978) * C41048 + C20070 * C84586 +
            C19825 * C41047 + C2235 * C84599 + C1935 * C41046 + C2234 * C84606 +
            C1931 * C41045) *
               C84198 +
           (C16604 * C84536 + C16435 * C41048 + C16603 * C84586 +
            C16433 * C41047 + C3105 * C84599 + C2818 * C41046 + C3104 * C84606 +
            C2816 * C41045) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C251 +
            (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
             C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
                C84257) *
               C38937 +
           ((C39920 + C39921 + C39922 + C39923) * C251 +
            (C40142 + C40143 + C40144 + C40145) * C84257) *
               C84304) *
              C84603 * C716 -
          (((C38946 * C1909 + C84527 * C2318 + C38944 * C1908 + C84576 * C2317 +
             C38942 * C1907 + C84592 * C2316 + C38940 * C1906 +
             C84602 * C2315) *
                C84257 +
            (C38946 * C1684 + C84527 * C1688 + C38944 * C1683 + C84576 * C1687 +
             C38942 * C1682 + C84592 * C1686 + C38940 * C1681 +
             C84602 * C1685) *
                C251) *
               C84304 +
           ((C40145 + C40144 + C40143 + C40142) * C84257 +
            (C39923 + C39922 + C39921 + C39920) * C251) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C251 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84257) *
               C84606 +
           ((C41928 + C41929) * C251 + (C42158 + C42159) * C84257) * C84599 +
           ((C41932 + C41933) * C251 + (C42160 + C42161) * C84257) * C84586 +
           ((C41936 + C41937) * C251 + (C42162 + C42163) * C84257) * C84536) *
              C84603 * C716 -
          (((C40962 * C15978 + C84198 * C16171 + C40960 * C15977 +
             C40953 * C16170) *
                C84257 +
            (C40962 * C15869 + C84198 * C15871 + C40960 * C15868 +
             C40953 * C15870) *
                C251) *
               C84536 +
           ((C42163 + C42162) * C84257 + (C41937 + C41936) * C251) * C84586 +
           ((C42161 + C42160) * C84257 + (C41933 + C41932) * C251) * C84599 +
           ((C42159 + C42158) * C84257 + (C41929 + C41928) * C251) * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C251 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84257) *
               C84602 +
           ((C39056 + C39057) * C251 + (C39530 + C39531) * C84257) * C84592 +
           ((C39060 + C39061) * C251 + (C39532 + C39533) * C84257) * C84576 +
           ((C39064 + C39065) * C251 + (C39534 + C39535) * C84257) * C84527) *
              C84603 * C716 -
          (((C39030 * C1909 + C84304 * C2396 + C39029 * C834 + C38937 * C1079) *
                C84257 +
            (C39030 * C1684 + C84304 * C1791 + C39029 * C720 + C38937 * C782) *
                C251) *
               C84527 +
           ((C39030 * C1908 + C84304 * C2395 + C39029 * C835 + C38937 * C1080) *
                C84257 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C251) *
               C84576 +
           ((C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C84257 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C251) *
               C84592 +
           ((C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C84257 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C251) *
               C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C251 +
            (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
             C41047 * C1906 + C84586 * C2393 + C41048 * C2795 +
             C84536 * C3276) *
                C84257) *
               C40953 +
           ((C41066 + C41067 + C41068 + C41069) * C251 +
            (C41522 + C41523 + C41524 + C41525) * C84257) *
               C84198) *
              C84603 * C716 -
          (((C41048 * C15978 + C84536 * C16215 + C41047 * C2794 +
             C84586 * C3275 + C41046 * C1907 + C84599 * C2394 + C41045 * C836 +
             C84606 * C1081) *
                C84257 +
            (C41048 * C15869 + C84536 * C15932 + C41047 * C2598 +
             C84586 * C2714 + C41046 * C1682 + C84599 * C1789 + C41045 * C722 +
             C84606 * C784) *
                C251) *
               C84198 +
           ((C41048 * C15977 + C84536 * C16214 + C41047 * C2795 +
             C84586 * C3276 + C41046 * C1906 + C84599 * C2393 + C41045 * C837 +
             C84606 * C1082) *
                C84257 +
            (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
             C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
             C84606 * C785) *
                C251) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C38937 +
            C3366 * C84304) *
               C84602 +
           (C39602 + C39603) * C84592 + (C39604 + C39605) * C84576 +
           (C39606 + C39607) * C84527) *
              C84603 * C716 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84304 +
            C7365 * C38937) *
               C84527 +
           (C2519 * C84304 + C2518 * C38937) * C84576 +
           (C2517 * C84304 + C2516 * C38937) * C84592 +
           (C3367 * C84304 + C3366 * C38937) * C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84606 +
            C3366 * C84599 + C3367 * C84586 + C16763 * C84536) *
               C40953 +
           (C41592 + C41593 + C41594 + C41595) * C84198) *
              C84603 * C716 -
          (((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C84536 +
            C20289 * C84586 + C2517 * C84599 + C2516 * C84606) *
               C84198 +
           (C16764 * C84536 + C16763 * C84586 + C3367 * C84599 +
            C3366 * C84606) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C84257 * C38937 +
           (C39694 + C39695 + C39696 + C39697) * C84257 * C84304) *
              C1177 -
          ((C38945 * C8102 + C40344 + C40344 + C84527 * C8104 + C38943 * C3444 +
            C40345 + C40345 + C84576 * C3456 + C38941 * C3445 + C40346 +
            C40346 + C84592 * C3457 + C38939 * C3446 + C40347 + C40347 +
            C84602 * C3458) *
               C84257 * C84304 +
           (C38945 * C1180 + C40348 + C40348 + C84527 * C1190 + C38943 * C1181 +
            C40349 + C40349 + C84576 * C1191 + C38941 * C1182 + C40350 +
            C40350 + C84592 * C1192 + C38939 * C1183 + C40351 + C40351 +
            C84602 * C1193) *
               C84257 * C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84257 * C84606 +
           (C41688 + C41689) * C84257 * C84599 +
           (C41690 + C41691) * C84257 * C84586 +
           (C41692 + C41693) * C84257 * C84536) *
              C1177 -
          ((C40961 * C21056 + C42362 + C42362 + C84198 * C21058 +
            C40959 * C16807 + C42363 + C42363 + C40953 * C16811) *
               C84257 * C84536 +
           (C40961 * C3442 + C42364 + C42364 + C84198 * C3454 + C40959 * C3443 +
            C42365 + C42365 + C40953 * C3455) *
               C84257 * C84586 +
           (C40961 * C3445 + C42366 + C42366 + C84198 * C3457 + C40959 * C3446 +
            C42367 + C42367 + C40953 * C3458) *
               C84257 * C84599 +
           (C40961 * C1182 + C42368 + C42368 + C84198 * C1192 + C40959 * C1183 +
            C42369 + C42369 + C40953 * C1193) *
               C84257 * C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C38940 +
           (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
               C84602 +
           (C39056 + C39057) * C38942 + (C39058 + C39059) * C84592 +
           (C39060 + C39061) * C38944 + (C39062 + C39063) * C84576 +
           (C39064 + C39065) * C38946 + (C39066 + C39067) * C84527) *
              C84257 * C1177 -
          ((C39030 * C8103 + C84304 * C8180 + C39029 * C1185 + C38937 * C1247) *
               C84527 +
           (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 + C38937 * C1242) *
               C38946 +
           (C39030 * C3450 + C84304 * C3549 + C39029 * C1186 + C38937 * C1248) *
               C84576 +
           (C39030 * C3444 + C84304 * C3543 + C39029 * C1181 + C38937 * C1243) *
               C38944 +
           (C39030 * C3451 + C84304 * C3551 + C39029 * C1187 + C38937 * C1249) *
               C84592 +
           (C39030 * C3445 + C84304 * C3545 + C39029 * C1182 + C38937 * C1244) *
               C38942 +
           (C39030 * C3452 + C84304 * C3553 + C39029 * C1188 + C38937 * C1250) *
               C84602 +
           (C39030 * C3446 + C84304 * C3547 + C39029 * C1183 + C38937 * C1245) *
               C38940) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C40960 +
           (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
            C41047 * C1685 + C84586 * C1792 + C41048 * C2602 + C84536 * C2718) *
               C40953 +
           (C41066 + C41067 + C41068 + C41069) * C40962 +
           (C41070 + C41071 + C41072 + C41073) * C84198) *
              C84257 * C1177 -
          ((C41048 * C21057 + C84536 * C21134 + C41047 * C3448 +
            C84586 * C3550 + C41046 * C3451 + C84599 * C3551 + C41045 * C1187 +
            C84606 * C1249) *
               C84198 +
           (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
            C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
            C84606 * C1244) *
               C40962 +
           (C41048 * C16809 + C84536 * C16862 + C41047 * C3449 +
            C84586 * C3552 + C41046 * C3452 + C84599 * C3553 + C41045 * C1188 +
            C84606 * C1250) *
               C40953 +
           (C41048 * C16807 + C84536 * C16860 + C41047 * C3443 +
            C84586 * C3546 + C41046 * C3446 + C84599 * C3547 + C41045 * C1183 +
            C84606 * C1245) *
               C40960) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C38940 +
                      (C251 * C108 + C84257 * C258) * C84602 + C281 * C38942 +
                      C282 * C84592 + C283 * C38944 + C284 * C84576 +
                      C285 * C38946 + C286 * C84527) *
                         C38937 +
                     (C39830 + C39831 + C39832 + C39833 + C39834 + C39835 +
                      C39836 + C39837) *
                         C84304) *
                        C1177 -
                    (((C251 * C8103 + C84257 * C8248) * C84527 +
                      (C251 * C8102 + C84257 * C8247) * C38946 +
                      (C251 * C3450 + C84257 * C3637) * C84576 +
                      (C251 * C3444 + C84257 * C3631) * C38944 +
                      (C251 * C3451 + C84257 * C3638) * C84592 +
                      (C251 * C3445 + C84257 * C3632) * C38942 +
                      (C251 * C3452 + C84257 * C3639) * C84602 +
                      (C251 * C3446 + C84257 * C3633) * C38940) *
                         C84304 +
                     ((C251 * C1185 + C84257 * C1299) * C84527 +
                      (C251 * C1180 + C84257 * C1294) * C38946 +
                      (C251 * C1186 + C84257 * C1300) * C84576 +
                      (C251 * C1181 + C84257 * C1295) * C38944 +
                      (C251 * C1187 + C84257 * C1301) * C84592 +
                      (C251 * C1182 + C84257 * C1296) * C38942 +
                      (C251 * C1188 + C84257 * C1302) * C84602 +
                      (C251 * C1183 + C84257 * C1297) * C38940) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C40960 +
                      (C251 * C108 + C84257 * C258) * C40953 + C281 * C40962 +
                      C282 * C84198) *
                         C84606 +
                     (C41826 + C41827 + C41828 + C41829) * C84599 +
                     (C41830 + C41831 + C41832 + C41833) * C84586 +
                     (C41834 + C41835 + C41836 + C41837) * C84536) *
                        C1177 -
                    (((C251 * C21057 + C84257 * C21202) * C84198 +
                      (C251 * C21056 + C84257 * C21201) * C40962 +
                      (C251 * C16809 + C84257 * C16908) * C40953 +
                      (C251 * C16807 + C84257 * C16906) * C40960) *
                         C84536 +
                     ((C251 * C3448 + C84257 * C3635) * C84198 +
                      (C251 * C3442 + C84257 * C3629) * C40962 +
                      (C251 * C3449 + C84257 * C3636) * C40953 +
                      (C251 * C3443 + C84257 * C3630) * C40960) *
                         C84586 +
                     ((C251 * C3451 + C84257 * C3638) * C84198 +
                      (C251 * C3445 + C84257 * C3632) * C40962 +
                      (C251 * C3452 + C84257 * C3639) * C40953 +
                      (C251 * C3446 + C84257 * C3633) * C40960) *
                         C84599 +
                     ((C251 * C1187 + C84257 * C1301) * C84198 +
                      (C251 * C1182 + C84257 * C1296) * C40962 +
                      (C251 * C1188 + C84257 * C1302) * C40953 +
                      (C251 * C1183 + C84257 * C1297) * C40960) *
                         C84606) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C39029 +
           (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
            C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
               C38937 +
           (C39920 + C39921 + C39922 + C39923) * C39030 +
           (C39924 + C39925 + C39926 + C39927) * C84304) *
              C84257 * C1177 -
          ((C38946 * C8179 + C84527 * C8315 + C38944 * C3543 + C84576 * C3717 +
            C38942 * C3545 + C84592 * C3718 + C38940 * C3547 + C84602 * C3719) *
               C84304 +
           (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
            C38942 * C3445 + C84592 * C3451 + C38940 * C3446 + C84602 * C3452) *
               C39030 +
           (C38946 * C1242 + C84527 * C1346 + C38944 * C1243 + C84576 * C1347 +
            C38942 * C1244 + C84592 * C1348 + C38940 * C1245 + C84602 * C1349) *
               C38937 +
           (C38946 * C1180 + C84527 * C1185 + C38944 * C1181 + C84576 * C1186 +
            C38942 * C1182 + C84592 * C1187 + C38940 * C1183 + C84602 * C1188) *
               C39029) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C41045 +
           (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
               C84606 +
           (C41928 + C41929) * C41046 + (C41930 + C41931) * C84599 +
           (C41932 + C41933) * C41047 + (C41934 + C41935) * C84586 +
           (C41936 + C41937) * C41048 + (C41938 + C41939) * C84536) *
              C84257 * C1177 -
          ((C40962 * C21133 + C84198 * C21269 + C40960 * C16860 +
            C40953 * C16952) *
               C84536 +
           (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
            C40953 * C16809) *
               C41048 +
           (C40962 * C3544 + C84198 * C3715 + C40960 * C3546 + C40953 * C3716) *
               C84586 +
           (C40962 * C3442 + C84198 * C3448 + C40960 * C3443 + C40953 * C3449) *
               C41047 +
           (C40962 * C3545 + C84198 * C3718 + C40960 * C3547 + C40953 * C3719) *
               C84599 +
           (C40962 * C3445 + C84198 * C3451 + C40960 * C3446 + C40953 * C3452) *
               C41046 +
           (C40962 * C1244 + C84198 * C1348 + C40960 * C1245 + C40953 * C1349) *
               C84606 +
           (C40962 * C1182 + C84198 * C1187 + C40960 * C1183 + C40953 * C1188) *
               C41045) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C84602 +
                     (C39302 + C39303) * C84592 + (C39304 + C39305) * C84576 +
                     (C39306 + C39307) * C84527) *
                        C84257 * C1177 -
                    ((C39266 * C8102 + C40616 + C40616 + C84304 * C8382 +
                      C39265 * C1180 + C40617 + C40617 + C38937 * C1393) *
                         C84527 +
                     (C39266 * C3444 + C40618 + C40618 + C84304 * C3795 +
                      C39265 * C1181 + C40619 + C40619 + C38937 * C1394) *
                         C84576 +
                     (C39266 * C3445 + C40620 + C40620 + C84304 * C3797 +
                      C39265 * C1182 + C40621 + C40621 + C38937 * C1395) *
                         C84592 +
                     (C39266 * C3446 + C40622 + C40622 + C84304 * C3799 +
                      C39265 * C1183 + C40623 + C40623 + C38937 * C1396) *
                         C84602) *
                        C84257 * C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C40953 +
                     (C41304 + C41305 + C41306 + C41307) * C84198) *
                        C84257 * C1177 -
                    ((C41274 * C21056 + C42634 + C42634 + C84536 * C21336 +
                      C41273 * C3442 + C42635 + C42635 + C84586 * C3796 +
                      C41272 * C3445 + C42636 + C42636 + C84599 * C3797 +
                      C41271 * C1182 + C42637 + C42637 + C84606 * C1395) *
                         C84198 +
                     (C41274 * C16807 + C42638 + C42638 + C84536 * C16996 +
                      C41273 * C3443 + C42639 + C42639 + C84586 * C3798 +
                      C41272 * C3446 + C42640 + C42640 + C84599 * C3799 +
                      C41271 * C1183 + C42641 + C42641 + C84606 * C1396) *
                         C40953) *
                        C84257 * C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C39029 +
                      (C251 * C173 + C84257 * C453) * C38937 + C2816 * C39030 +
                      C3104 * C84304) *
                         C84602 +
                     (C39374 + C39375 + C39376 + C39377) * C84592 +
                     (C39378 + C39379 + C39380 + C39381) * C84576 +
                     (C39382 + C39383 + C39384 + C39385) * C84527) *
                        C1177 -
                    (((C251 * C8179 + C84257 * C8457) * C84304 +
                      (C251 * C8102 + C84257 * C8247) * C39030 +
                      (C251 * C1242 + C84257 * C1445) * C38937 +
                      (C251 * C1180 + C84257 * C1294) * C39029) *
                         C84527 +
                     ((C251 * C3543 + C84257 * C3884) * C84304 +
                      (C251 * C3444 + C84257 * C3631) * C39030 +
                      (C251 * C1243 + C84257 * C1446) * C38937 +
                      (C251 * C1181 + C84257 * C1295) * C39029) *
                         C84576 +
                     ((C251 * C3545 + C84257 * C3886) * C84304 +
                      (C251 * C3445 + C84257 * C3632) * C39030 +
                      (C251 * C1244 + C84257 * C1447) * C38937 +
                      (C251 * C1182 + C84257 * C1296) * C39029) *
                         C84592 +
                     ((C251 * C3547 + C84257 * C3888) * C84304 +
                      (C251 * C3446 + C84257 * C3633) * C39030 +
                      (C251 * C1245 + C84257 * C1448) * C38937 +
                      (C251 * C1183 + C84257 * C1297) * C39029) *
                         C84602) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C41045 +
                      (C251 * C173 + C84257 * C453) * C84606 + C2816 * C41046 +
                      C3104 * C84599 + C2818 * C41047 + C3105 * C84586 +
                      C16433 * C41048 + C16603 * C84536) *
                         C40953 +
                     (C41374 + C41375 + C41376 + C41377 + C41378 + C41379 +
                      C41380 + C41381) *
                         C84198) *
                        C1177 -
                    (((C251 * C21133 + C84257 * C21411) * C84536 +
                      (C251 * C21056 + C84257 * C21201) * C41048 +
                      (C251 * C3544 + C84257 * C3885) * C84586 +
                      (C251 * C3442 + C84257 * C3629) * C41047 +
                      (C251 * C3545 + C84257 * C3886) * C84599 +
                      (C251 * C3445 + C84257 * C3632) * C41046 +
                      (C251 * C1244 + C84257 * C1447) * C84606 +
                      (C251 * C1182 + C84257 * C1296) * C41045) *
                         C84198 +
                     ((C251 * C16860 + C84257 * C17045) * C84536 +
                      (C251 * C16807 + C84257 * C16906) * C41048 +
                      (C251 * C3546 + C84257 * C3887) * C84586 +
                      (C251 * C3443 + C84257 * C3630) * C41047 +
                      (C251 * C3547 + C84257 * C3888) * C84599 +
                      (C251 * C3446 + C84257 * C3633) * C41046 +
                      (C251 * C1245 + C84257 * C1448) * C84606 +
                      (C251 * C1183 + C84257 * C1297) * C41045) *
                         C40953) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C251 +
            (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
             C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
                C84257) *
               C38937 +
           ((C39920 + C39921 + C39922 + C39923) * C251 +
            (C40142 + C40143 + C40144 + C40145) * C84257) *
               C84304) *
              C1177 -
          (((C38946 * C8247 + C84527 * C8524 + C38944 * C3631 + C84576 * C3966 +
             C38942 * C3632 + C84592 * C3967 + C38940 * C3633 +
             C84602 * C3968) *
                C84257 +
            (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
             C38942 * C3445 + C84592 * C3451 + C38940 * C3446 +
             C84602 * C3452) *
                C251) *
               C84304 +
           ((C38946 * C1294 + C84527 * C1492 + C38944 * C1295 + C84576 * C1493 +
             C38942 * C1296 + C84592 * C1494 + C38940 * C1297 +
             C84602 * C1495) *
                C84257 +
            (C38946 * C1180 + C84527 * C1185 + C38944 * C1181 + C84576 * C1186 +
             C38942 * C1182 + C84592 * C1187 + C38940 * C1183 +
             C84602 * C1188) *
                C251) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C251 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84257) *
               C84606 +
           ((C41928 + C41929) * C251 + (C42158 + C42159) * C84257) * C84599 +
           ((C41932 + C41933) * C251 + (C42160 + C42161) * C84257) * C84586 +
           ((C41936 + C41937) * C251 + (C42162 + C42163) * C84257) * C84536) *
              C1177 -
          (((C40962 * C21201 + C84198 * C21478 + C40960 * C16906 +
             C40953 * C17089) *
                C84257 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C251) *
               C84536 +
           ((C40962 * C3629 + C84198 * C3964 + C40960 * C3630 +
             C40953 * C3965) *
                C84257 +
            (C40962 * C3442 + C84198 * C3448 + C40960 * C3443 +
             C40953 * C3449) *
                C251) *
               C84586 +
           ((C40962 * C3632 + C84198 * C3967 + C40960 * C3633 +
             C40953 * C3968) *
                C84257 +
            (C40962 * C3445 + C84198 * C3451 + C40960 * C3446 +
             C40953 * C3452) *
                C251) *
               C84599 +
           ((C40962 * C1296 + C84198 * C1494 + C40960 * C1297 +
             C40953 * C1495) *
                C84257 +
            (C40962 * C1182 + C84198 * C1187 + C40960 * C1183 +
             C40953 * C1188) *
                C251) *
               C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C251 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84257) *
               C84602 +
           ((C39056 + C39057) * C251 + (C39530 + C39531) * C84257) * C84592 +
           ((C39060 + C39061) * C251 + (C39532 + C39533) * C84257) * C84576 +
           ((C39064 + C39065) * C251 + (C39534 + C39535) * C84257) * C84527) *
              C1177 -
          (((C39030 * C8247 + C84304 * C8591 + C39029 * C1294 +
             C38937 * C1539) *
                C84257 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C251) *
               C84527 +
           ((C39030 * C3631 + C84304 * C4044 + C39029 * C1295 +
             C38937 * C1540) *
                C84257 +
            (C39030 * C3444 + C84304 * C3543 + C39029 * C1181 +
             C38937 * C1243) *
                C251) *
               C84576 +
           ((C39030 * C3632 + C84304 * C4046 + C39029 * C1296 +
             C38937 * C1541) *
                C84257 +
            (C39030 * C3445 + C84304 * C3545 + C39029 * C1182 +
             C38937 * C1244) *
                C251) *
               C84592 +
           ((C39030 * C3633 + C84304 * C4048 + C39029 * C1297 +
             C38937 * C1542) *
                C84257 +
            (C39030 * C3446 + C84304 * C3547 + C39029 * C1183 +
             C38937 * C1245) *
                C251) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C251 +
            (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
             C41047 * C1906 + C84586 * C2393 + C41048 * C2795 +
             C84536 * C3276) *
                C84257) *
               C40953 +
           ((C41066 + C41067 + C41068 + C41069) * C251 +
            (C41522 + C41523 + C41524 + C41525) * C84257) *
               C84198) *
              C1177 -
          (((C41048 * C21201 + C84536 * C21545 + C41047 * C3629 +
             C84586 * C4045 + C41046 * C3632 + C84599 * C4046 + C41045 * C1296 +
             C84606 * C1541) *
                C84257 +
            (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
             C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
             C84606 * C1244) *
                C251) *
               C84198 +
           ((C41048 * C16906 + C84536 * C17133 + C41047 * C3630 +
             C84586 * C4047 + C41046 * C3633 + C84599 * C4048 + C41045 * C1297 +
             C84606 * C1542) *
                C84257 +
            (C41048 * C16807 + C84536 * C16860 + C41047 * C3443 +
             C84586 * C3546 + C41046 * C3446 + C84599 * C3547 + C41045 * C1183 +
             C84606 * C1245) *
                C251) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C38937 +
            C3366 * C84304) *
               C84602 +
           (C39602 + C39603) * C84592 + (C39604 + C39605) * C84576 +
           (C39606 + C39607) * C84527) *
              C1177 -
          (((C637 * C8102 + C8660 + C8660 + C84257 * C8658) * C84304 +
            (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C38937) *
               C84527 +
           ((C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84304 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C38937) *
               C84576 +
           ((C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84304 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C38937) *
               C84592 +
           ((C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84304 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C38937) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84606 +
            C3366 * C84599 + C3367 * C84586 + C16763 * C84536) *
               C40953 +
           (C41592 + C41593 + C41594 + C41595) * C84198) *
              C1177 -
          (((C637 * C21056 + C21614 + C21614 + C84257 * C21612) * C84536 +
            (C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84586 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84599 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84606) *
               C84198 +
           ((C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C84536 +
            (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84586 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84599 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84606) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C53740 +
            (C23658 + C23659) * C84344) *
               C84300 +
           ((C20383 + C20384) * C53740 + (C22687 + C22688) * C84344) * C84307 +
           ((C20385 + C20386) * C53740 + (C22689 + C22690) * C84344) * C45935) *
              C84603 * C84604 * C90 -
          (((C19642 * C3441 + C21713 + C21713 + C84198 * C3453 +
             C19640 * C3442 + C21714 + C21714 + C84509 * C3454) *
                C84344 +
            (C19642 * C1683 + C19655 + C19655 + C84198 * C1691 +
             C19640 * C1682 + C19656 + C19656 + C84509 * C1690) *
                C53740) *
               C45935 +
           ((C19642 * C3444 + C21715 + C21715 + C84198 * C3456 +
             C19640 * C3445 + C21716 + C21716 + C84509 * C3457) *
                C84344 +
            (C19642 * C721 + C19657 + C19657 + C84198 * C731 + C19640 * C722 +
             C19658 + C19658 + C84509 * C732) *
                C53740) *
               C84307 +
           ((C19642 * C1181 + C21717 + C21717 + C84198 * C1191 +
             C19640 * C1182 + C21718 + C21718 + C84509 * C1192) *
                C84344 +
            (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
             C19660 + C19660 + C84509 * C115) *
                C53740) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C82024 +
                      (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                       C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                          C84509 +
                      (C46062 + C46063 + C46064) * C81997 +
                      (C46065 + C46066 + C46067) * C84198) *
                         C53740 +
                     ((C52953 + C52954 + C52955) * C82024 +
                      (C52956 + C52957 + C52958) * C84509 +
                      (C51113 + C51114 + C51115) * C81997 +
                      (C51116 + C51117 + C51118) * C84198) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C82280 * C3447 + C45935 * C3548 + C82269 * C3450 +
                       C84307 * C3549 + C82272 * C1186 + C84300 * C1248) *
                          C84198 +
                      (C82280 * C3441 + C45935 * C3542 + C82269 * C3444 +
                       C84307 * C3543 + C82272 * C1181 + C84300 * C1243) *
                          C81997 +
                      (C51118 + C51117 + C51116) * C84509 +
                      (C51115 + C51114 + C51113) * C82024) *
                         C84344 +
                     ((C46073 + C46072 + C46071) * C84198 +
                      (C46070 + C46069 + C46068) * C81997 +
                      (C46067 + C46066 + C46065) * C84509 +
                      (C46064 + C46063 + C46062) * C82024) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82024 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84509 +
            (C53905 + C53906) * C81997 + (C53907 + C53908) * C84198) *
               C84300 +
           ((C56957 + C56958) * C82024 + (C56959 + C56960) * C84509 +
            (C55989 + C55990) * C81997 + (C55991 + C55992) * C84198) *
               C84307 +
           ((C56961 + C56962) * C82024 + (C56963 + C56964) * C84509 +
            (C55993 + C55994) * C81997 + (C55995 + C55996) * C84198) *
               C45935) *
              C84603 * C84604 * C90 -
          (((C53879 * C3447 + C84344 * C3634 + C53878 * C1687 +
             C53740 * C1912) *
                C84198 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C81997 +
            (C55996 + C55995) * C84509 + (C55994 + C55993) * C82024) *
               C45935 +
           ((C60723 + C60722) * C84198 + (C60721 + C60720) * C81997 +
            (C55992 + C55991) * C84509 + (C55990 + C55989) * C82024) *
               C84307 +
           ((C53912 + C53911) * C84198 + (C53910 + C53909) * C81997 +
            (C53908 + C53907) * C84509 + (C53906 + C53905) * C82024) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C82272 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84300 +
            (C20623 + C20624) * C82269 + (C20625 + C20626) * C84307 +
            (C20627 + C20628) * C82280 + (C20629 + C20630) * C45935) *
               C53740 +
           ((C23962 + C23963) * C82272 + (C23964 + C23965) * C84300 +
            (C23013 + C23014) * C82269 + (C23015 + C23016) * C84307 +
            (C23017 + C23018) * C82280 + (C23019 + C23020) * C45935) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C81997 * C3542 + C84198 * C3714 + C82024 * C3544 +
             C84509 * C3715) *
                C45935 +
            (C81997 * C3441 + C84198 * C3447 + C82024 * C3442 +
             C84509 * C3448) *
                C82280 +
            (C81997 * C3543 + C84198 * C3717 + C82024 * C3545 +
             C84509 * C3718) *
                C84307 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C82269 +
            (C81997 * C1243 + C84198 * C1347 + C82024 * C1244 +
             C84509 * C1348) *
                C84300 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C82272) *
               C84344 +
           ((C81997 * C1790 + C84198 * C2014 + C82024 * C1789 +
             C84509 * C2013) *
                C45935 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C82280 +
            (C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
                C84307 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C82269 +
            (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
                C84300 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C82272) *
               C53740) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                       C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                       C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                          C84509 +
                      (C46335 + C46336 + C46337) * C84198) *
                         C53740 +
                     ((C53271 + C53272 + C53273) * C84509 +
                      (C51425 + C51426 + C51427) * C84198) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C46297 * C3441 + C47826 + C47826 + C45935 * C3794 +
                       C82317 * C3444 + C47827 + C47827 + C84307 * C3795 +
                       C82324 * C1181 + C47828 + C47828 + C84300 * C1394) *
                          C84198 +
                      (C51427 + C51426 + C51425) * C84509) *
                         C84344 +
                     ((C46340 + C46339 + C46338) * C84198 +
                      (C46337 + C46336 + C46335) * C84509) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82272 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84300 +
            (C56957 + C56958) * C82269 + (C57270 + C57271) * C84307 +
            (C56961 + C56962) * C82280 + (C57272 + C57273) * C45935) *
               C84509 +
           ((C53905 + C53906) * C82272 + (C54127 + C54128) * C84300 +
            (C55989 + C55990) * C82269 + (C56314 + C56315) * C84307 +
            (C55993 + C55994) * C82280 + (C56316 + C56317) * C45935) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C53879 * C3542 + C84344 * C3883 + C53878 * C1790 +
             C53740 * C2215) *
                C45935 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C82280 +
            (C61023 + C61022) * C84307 + (C60721 + C60720) * C82269 +
            (C54130 + C54129) * C84300 + (C53910 + C53909) * C82272) *
               C84198 +
           ((C56317 + C56316) * C45935 + (C55994 + C55993) * C82280 +
            (C56315 + C56314) * C84307 + (C55990 + C55989) * C82269 +
            (C54128 + C54127) * C84300 + (C53906 + C53905) * C82272) *
               C84509) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C53878 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C53740 +
            (C23962 + C23963) * C53879 + (C24264 + C24265) * C84344) *
               C84300 +
           ((C20623 + C20624) * C53878 + (C20853 + C20854) * C53740 +
            (C23013 + C23014) * C53879 + (C23332 + C23333) * C84344) *
               C84307 +
           ((C20627 + C20628) * C53878 + (C20855 + C20856) * C53740 +
            (C23017 + C23018) * C53879 + (C23334 + C23335) * C84344) *
               C45935) *
              C84603 * C84604 * C90 -
          (((C81997 * C3628 + C84198 * C3963 + C82024 * C3629 +
             C84509 * C3964) *
                C84344 +
            (C81997 * C3441 + C84198 * C3447 + C82024 * C3442 +
             C84509 * C3448) *
                C53879 +
            (C81997 * C1908 + C84198 * C2317 + C82024 * C1907 +
             C84509 * C2316) *
                C53740 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C53878) *
               C45935 +
           ((C81997 * C3631 + C84198 * C3966 + C82024 * C3632 +
             C84509 * C3967) *
                C84344 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C53879 +
            (C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C53740 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C53878) *
               C84307 +
           ((C81997 * C1295 + C84198 * C1493 + C82024 * C1296 +
             C84509 * C1494) *
                C84344 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C53879 +
            (C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C53740 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C53878) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C53878 +
                      (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                       C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                          C53740 +
                      (C52953 + C52954 + C52955) * C53879 +
                      (C53574 + C53575 + C53576) * C84344) *
                         C84509 +
                     ((C46062 + C46063 + C46064) * C53878 +
                      (C46587 + C46588 + C46589) * C53740 +
                      (C51113 + C51114 + C51115) * C53879 +
                      (C51728 + C51729 + C51730) * C84344) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C82280 * C3628 + C45935 * C4043 + C82269 * C3631 +
                       C84307 * C4044 + C82272 * C1295 + C84300 * C1540) *
                          C84344 +
                      (C82280 * C3441 + C45935 * C3542 + C82269 * C3444 +
                       C84307 * C3543 + C82272 * C1181 + C84300 * C1243) *
                          C53879 +
                      (C46592 + C46591 + C46590) * C53740 +
                      (C46070 + C46069 + C46068) * C53878) *
                         C84198 +
                     ((C51730 + C51729 + C51728) * C84344 +
                      (C51115 + C51114 + C51113) * C53879 +
                      (C46589 + C46588 + C46587) * C53740 +
                      (C46064 + C46063 + C46062) * C53878) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84300 +
                      (C57588 + C57589) * C84307 + (C57590 + C57591) * C45935) *
                         C84509 +
                     ((C54379 + C54380) * C84300 + (C56643 + C56644) * C84307 +
                      (C56645 + C56646) * C45935) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C54343 * C3441 + C56633 + C56633 + C84344 * C4123 +
                       C54342 * C1683 + C56634 + C56634 + C53740 * C2491) *
                          C45935 +
                      (C61327 + C61326) * C84307 + (C54382 + C54381) * C84300) *
                         C84198 +
                     ((C56646 + C56645) * C45935 + (C56644 + C56643) * C84307 +
                      (C54380 + C54379) * C84300) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C53740 +
            (C23658 + C23659) * C84344) *
               C84300 +
           ((C20383 + C20384) * C53740 + (C22687 + C22688) * C84344) * C84307 +
           ((C20385 + C20386) * C53740 + (C22689 + C22690) * C84344) * C45935) *
              C84603 * C716 -
          (((C19642 * C21056 + C21060 + C21060 + C84198 * C21058 +
             C19640 * C16807 + C21061 + C21061 + C84509 * C16811) *
                C84344 +
            (C20388 + C20387) * C53740) *
               C45935 +
           ((C22690 + C22689) * C84344 + (C20386 + C20385) * C53740) * C84307 +
           ((C22688 + C22687) * C84344 + (C20384 + C20383) * C53740) * C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C82024 +
                      (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                       C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                          C84509 +
                      (C46062 + C46063 + C46064) * C81997 +
                      (C46065 + C46066 + C46067) * C84198) *
                         C53740 +
                     ((C52953 + C52954 + C52955) * C82024 +
                      (C52956 + C52957 + C52958) * C84509 +
                      (C51113 + C51114 + C51115) * C81997 +
                      (C51116 + C51117 + C51118) * C84198) *
                         C84344) *
                        C84603 * C716 -
                    (((C82280 * C21057 + C45935 * C21134 + C82269 * C3448 +
                       C84307 * C3550 + C82272 * C3451 + C84300 * C3551) *
                          C84198 +
                      (C82280 * C21056 + C45935 * C21133 + C82269 * C3442 +
                       C84307 * C3544 + C82272 * C3445 + C84300 * C3545) *
                          C81997 +
                      (C82280 * C16809 + C45935 * C16862 + C82269 * C3449 +
                       C84307 * C3552 + C82272 * C3452 + C84300 * C3553) *
                          C84509 +
                      (C82280 * C16807 + C45935 * C16860 + C82269 * C3443 +
                       C84307 * C3546 + C82272 * C3446 + C84300 * C3547) *
                          C82024) *
                         C84344 +
                     ((C82280 * C2601 + C45935 * C2717 + C82269 * C1686 +
                       C84307 * C1793 + C82272 * C727 + C84300 * C789) *
                          C84198 +
                      (C82280 * C2598 + C45935 * C2714 + C82269 * C1682 +
                       C84307 * C1789 + C82272 * C722 + C84300 * C784) *
                          C81997 +
                      (C82280 * C2602 + C45935 * C2718 + C82269 * C1685 +
                       C84307 * C1792 + C82272 * C728 + C84300 * C790) *
                          C84509 +
                      (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                       C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                          C82024) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82024 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84509 +
            (C53905 + C53906) * C81997 + (C53907 + C53908) * C84198) *
               C84300 +
           ((C56957 + C56958) * C82024 + (C56959 + C56960) * C84509 +
            (C55989 + C55990) * C81997 + (C55991 + C55992) * C84198) *
               C84307 +
           ((C56961 + C56962) * C82024 + (C56963 + C56964) * C84509 +
            (C55993 + C55994) * C81997 + (C55995 + C55996) * C84198) *
               C45935) *
              C84603 * C716 -
          (((C53879 * C21057 + C84344 * C21202 + C53878 * C2601 +
             C53740 * C2797) *
                C84198 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C81997 +
            (C71535 + C71534) * C84509 + (C71533 + C71532) * C82024) *
               C45935 +
           ((C55996 + C55995) * C84198 + (C55994 + C55993) * C81997 +
            (C56964 + C56963) * C84509 + (C56962 + C56961) * C82024) *
               C84307 +
           ((C55992 + C55991) * C84198 + (C55990 + C55989) * C81997 +
            (C56960 + C56959) * C84509 + (C56958 + C56957) * C82024) *
               C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C82272 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84300 +
            (C20623 + C20624) * C82269 + (C20625 + C20626) * C84307 +
            (C20627 + C20628) * C82280 + (C20629 + C20630) * C45935) *
               C53740 +
           ((C23962 + C23963) * C82272 + (C23964 + C23965) * C84300 +
            (C23013 + C23014) * C82269 + (C23015 + C23016) * C84307 +
            (C23017 + C23018) * C82280 + (C23019 + C23020) * C45935) *
               C84344) *
              C84603 * C716 -
          (((C81997 * C21133 + C84198 * C21269 + C82024 * C16860 +
             C84509 * C16952) *
                C45935 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C82280 +
            (C23020 + C23019) * C84307 + (C23018 + C23017) * C82269 +
            (C23016 + C23015) * C84300 + (C23014 + C23013) * C82272) *
               C84344 +
           ((C20634 + C20633) * C45935 + (C20632 + C20631) * C82280 +
            (C20630 + C20629) * C84307 + (C20628 + C20627) * C82269 +
            (C20626 + C20625) * C84300 + (C20624 + C20623) * C82272) *
               C53740) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                       C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                       C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                          C84509 +
                      (C46335 + C46336 + C46337) * C84198) *
                         C53740 +
                     ((C53271 + C53272 + C53273) * C84509 +
                      (C51425 + C51426 + C51427) * C84198) *
                         C84344) *
                        C84603 * C716 -
                    (((C46297 * C21056 + C52341 + C52341 + C45935 * C21336 +
                       C82317 * C3442 + C52342 + C52342 + C84307 * C3796 +
                       C82324 * C3445 + C52343 + C52343 + C84300 * C3797) *
                          C84198 +
                      (C46297 * C16807 + C52344 + C52344 + C45935 * C16996 +
                       C82317 * C3443 + C52345 + C52345 + C84307 * C3798 +
                       C82324 * C3446 + C52346 + C52346 + C84300 * C3799) *
                          C84509) *
                         C84344 +
                     ((C46297 * C2598 + C47127 + C47127 + C45935 * C3011 +
                       C82317 * C1682 + C47128 + C47128 + C84307 * C2094 +
                       C82324 * C722 + C47129 + C47129 + C84300 * C935) *
                          C84198 +
                      (C46297 * C2599 + C47130 + C47130 + C45935 * C3012 +
                       C82317 * C1681 + C47131 + C47131 + C84307 * C2093 +
                       C82324 * C723 + C47132 + C47132 + C84300 * C936) *
                          C84509) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82272 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84300 +
            (C56957 + C56958) * C82269 + (C57270 + C57271) * C84307 +
            (C56961 + C56962) * C82280 + (C57272 + C57273) * C45935) *
               C84509 +
           ((C53905 + C53906) * C82272 + (C54127 + C54128) * C84300 +
            (C55989 + C55990) * C82269 + (C56314 + C56315) * C84307 +
            (C55993 + C55994) * C82280 + (C56316 + C56317) * C45935) *
               C84198) *
              C84603 * C716 -
          (((C53879 * C21133 + C84344 * C21411 + C53878 * C2714 +
             C53740 * C3097) *
                C45935 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C82280 +
            (C56317 + C56316) * C84307 + (C55994 + C55993) * C82269 +
            (C56315 + C56314) * C84300 + (C55990 + C55989) * C82272) *
               C84198 +
           ((C71743 + C71742) * C45935 + (C71533 + C71532) * C82280 +
            (C57273 + C57272) * C84307 + (C56962 + C56961) * C82269 +
            (C57271 + C57270) * C84300 + (C56958 + C56957) * C82272) *
               C84509) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C53878 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C53740 +
            (C23962 + C23963) * C53879 + (C24264 + C24265) * C84344) *
               C84300 +
           ((C20623 + C20624) * C53878 + (C20853 + C20854) * C53740 +
            (C23013 + C23014) * C53879 + (C23332 + C23333) * C84344) *
               C84307 +
           ((C20627 + C20628) * C53878 + (C20855 + C20856) * C53740 +
            (C23017 + C23018) * C53879 + (C23334 + C23335) * C84344) *
               C45935) *
              C84603 * C716 -
          (((C81997 * C21201 + C84198 * C21478 + C82024 * C16906 +
             C84509 * C17089) *
                C84344 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C53879 +
            (C20858 + C20857) * C53740 + (C20632 + C20631) * C53878) *
               C45935 +
           ((C23335 + C23334) * C84344 + (C23018 + C23017) * C53879 +
            (C20856 + C20855) * C53740 + (C20628 + C20627) * C53878) *
               C84307 +
           ((C23333 + C23332) * C84344 + (C23014 + C23013) * C53879 +
            (C20854 + C20853) * C53740 + (C20624 + C20623) * C53878) *
               C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C53878 +
                      (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                       C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                          C53740 +
                      (C52953 + C52954 + C52955) * C53879 +
                      (C53574 + C53575 + C53576) * C84344) *
                         C84509 +
                     ((C46062 + C46063 + C46064) * C53878 +
                      (C46587 + C46588 + C46589) * C53740 +
                      (C51113 + C51114 + C51115) * C53879 +
                      (C51728 + C51729 + C51730) * C84344) *
                         C84198) *
                        C84603 * C716 -
                    (((C82280 * C21201 + C45935 * C21545 + C82269 * C3629 +
                       C84307 * C4045 + C82272 * C3632 + C84300 * C4046) *
                          C84344 +
                      (C82280 * C21056 + C45935 * C21133 + C82269 * C3442 +
                       C84307 * C3544 + C82272 * C3445 + C84300 * C3545) *
                          C53879 +
                      (C82280 * C2794 + C45935 * C3275 + C82269 * C1907 +
                       C84307 * C2394 + C82272 * C836 + C84300 * C1081) *
                          C53740 +
                      (C82280 * C2598 + C45935 * C2714 + C82269 * C1682 +
                       C84307 * C1789 + C82272 * C722 + C84300 * C784) *
                          C53878) *
                         C84198 +
                     ((C82280 * C16906 + C45935 * C17133 + C82269 * C3630 +
                       C84307 * C4047 + C82272 * C3633 + C84300 * C4048) *
                          C84344 +
                      (C82280 * C16807 + C45935 * C16860 + C82269 * C3443 +
                       C84307 * C3546 + C82272 * C3446 + C84300 * C3547) *
                          C53879 +
                      (C82280 * C2795 + C45935 * C3276 + C82269 * C1906 +
                       C84307 * C2393 + C82272 * C837 + C84300 * C1082) *
                          C53740 +
                      (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                       C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                          C53878) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezz[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84300 +
                      (C57588 + C57589) * C84307 + (C57590 + C57591) * C45935) *
                         C84509 +
                     ((C54379 + C54380) * C84300 + (C56643 + C56644) * C84307 +
                      (C56645 + C56646) * C45935) *
                         C84198) *
                        C84603 * C716 -
                    (((C54343 * C21056 + C57576 + C57576 + C84344 * C21612 +
                       C54342 * C2598 + C57577 + C57577 + C53740 * C3352) *
                          C45935 +
                      (C56646 + C56645) * C84307 + (C56644 + C56643) * C84300) *
                         C84198 +
                     ((C71965 + C71964) * C45935 + (C57591 + C57590) * C84307 +
                      (C57589 + C57588) * C84300) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C53740 +
            (C23658 + C23659) * C84344) *
               C84300 +
           ((C20383 + C20384) * C53740 + (C22687 + C22688) * C84344) * C84307 +
           ((C20385 + C20386) * C53740 + (C22689 + C22690) * C84344) * C45935) *
              C1177 -
          (((C19642 * C17255 + C23648 + C23648 + C84198 * C17259 +
             C19640 * C17254 + C23649 + C23649 + C84509 * C17258) *
                C84344 +
            (C22690 + C22689) * C53740) *
               C45935 +
           ((C33231 + C33230) * C84344 + (C22688 + C22687) * C53740) * C84307 +
           ((C34152 + C34151) * C84344 + (C23659 + C23658) * C53740) * C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexy[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C82024 +
                      (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                       C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                          C84509 +
                      (C46062 + C46063 + C46064) * C81997 +
                      (C46065 + C46066 + C46067) * C84198) *
                         C53740 +
                     ((C52953 + C52954 + C52955) * C82024 +
                      (C52956 + C52957 + C52958) * C84509 +
                      (C51113 + C51114 + C51115) * C81997 +
                      (C51116 + C51117 + C51118) * C84198) *
                         C84344) *
                        C1177 -
                    (((C82280 * C17257 + C45935 * C17346 + C82269 * C5117 +
                       C84307 * C5203 + C82272 * C4217 + C84300 * C4312) *
                          C84198 +
                      (C82280 * C17255 + C45935 * C17344 + C82269 * C5114 +
                       C84307 * C5200 + C82272 * C4213 + C84300 * C4308) *
                          C81997 +
                      (C82280 * C17256 + C45935 * C17345 + C82269 * C5118 +
                       C84307 * C5204 + C82272 * C4216 + C84300 * C4311) *
                          C84509 +
                      (C82280 * C17254 + C45935 * C17343 + C82269 * C5115 +
                       C84307 * C5201 + C82272 * C4212 + C84300 * C4307) *
                          C82024) *
                         C84344 +
                     ((C51118 + C51117 + C51116) * C84198 +
                      (C51115 + C51114 + C51113) * C81997 +
                      (C52958 + C52957 + C52956) * C84509 +
                      (C52955 + C52954 + C52953) * C82024) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82024 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84509 +
            (C53905 + C53906) * C81997 + (C53907 + C53908) * C84198) *
               C84300 +
           ((C56957 + C56958) * C82024 + (C56959 + C56960) * C84509 +
            (C55989 + C55990) * C81997 + (C55991 + C55992) * C84198) *
               C84307 +
           ((C56961 + C56962) * C82024 + (C56963 + C56964) * C84509 +
            (C55993 + C55994) * C81997 + (C55995 + C55996) * C84198) *
               C45935) *
              C1177 -
          (((C53879 * C17257 + C84344 * C17424 + C53878 * C3448 +
             C53740 * C3635) *
                C84198 +
            (C53879 * C17255 + C84344 * C17422 + C53878 * C3442 +
             C53740 * C3629) *
                C81997 +
            (C53879 * C17256 + C84344 * C17423 + C53878 * C3449 +
             C53740 * C3636) *
                C84509 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C82024) *
               C45935 +
           ((C53879 * C5117 + C84344 * C5283 + C53878 * C3451 +
             C53740 * C3638) *
                C84198 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C81997 +
            (C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C84509 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C82024) *
               C84307 +
           ((C53879 * C4217 + C84344 * C4421 + C53878 * C1187 +
             C53740 * C1301) *
                C84198 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C81997 +
            (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C84509 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C82024) *
               C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C82272 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84300 +
            (C20623 + C20624) * C82269 + (C20625 + C20626) * C84307 +
            (C20627 + C20628) * C82280 + (C20629 + C20630) * C45935) *
               C53740 +
           ((C23962 + C23963) * C82272 + (C23964 + C23965) * C84300 +
            (C23013 + C23014) * C82269 + (C23015 + C23016) * C84307 +
            (C23017 + C23018) * C82280 + (C23019 + C23020) * C45935) *
               C84344) *
              C1177 -
          (((C81997 * C17344 + C84198 * C17500 + C82024 * C17343 +
             C84509 * C17499) *
                C45935 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C82280 +
            (C33537 + C33536) * C84307 + (C33535 + C33534) * C82269 +
            (C34475 + C34474) * C84300 + (C34473 + C34472) * C82272) *
               C84344 +
           ((C23020 + C23019) * C45935 + (C23018 + C23017) * C82280 +
            (C23016 + C23015) * C84307 + (C23014 + C23013) * C82269 +
            (C23965 + C23964) * C84300 + (C23963 + C23962) * C82272) *
               C53740) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                       C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                       C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                          C84509 +
                      (C46335 + C46336 + C46337) * C84198) *
                         C53740 +
                     ((C53271 + C53272 + C53273) * C84509 +
                      (C51425 + C51426 + C51427) * C84198) *
                         C84344) *
                        C1177 -
                    (((C46297 * C17255 + C53259 + C53259 + C45935 * C17576 +
                       C82317 * C5114 + C53260 + C53260 + C84307 * C5437 +
                       C82324 * C4213 + C53261 + C53261 + C84300 * C4613) *
                          C84198 +
                      (C46297 * C17254 + C53262 + C53262 + C45935 * C17575 +
                       C82317 * C5115 + C53263 + C53263 + C84307 * C5438 +
                       C82324 * C4212 + C53264 + C53264 + C84300 * C4612) *
                          C84509) *
                         C84344 +
                     ((C51427 + C51426 + C51425) * C84198 +
                      (C53273 + C53272 + C53271) * C84509) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82272 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84300 +
            (C56957 + C56958) * C82269 + (C57270 + C57271) * C84307 +
            (C56961 + C56962) * C82280 + (C57272 + C57273) * C45935) *
               C84509 +
           ((C53905 + C53906) * C82272 + (C54127 + C54128) * C84300 +
            (C55989 + C55990) * C82269 + (C56314 + C56315) * C84307 +
            (C55993 + C55994) * C82280 + (C56316 + C56317) * C45935) *
               C84198) *
              C1177 -
          (((C53879 * C17344 + C84344 * C17658 + C53878 * C3544 +
             C53740 * C3885) *
                C45935 +
            (C53879 * C17255 + C84344 * C17422 + C53878 * C3442 +
             C53740 * C3629) *
                C82280 +
            (C53879 * C5200 + C84344 * C5520 + C53878 * C3545 +
             C53740 * C3886) *
                C84307 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C82269 +
            (C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C84300 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C82272) *
               C84198 +
           ((C53879 * C17343 + C84344 * C17657 + C53878 * C3546 +
             C53740 * C3887) *
                C45935 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C82280 +
            (C53879 * C5201 + C84344 * C5521 + C53878 * C3547 +
             C53740 * C3888) *
                C84307 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C82269 +
            (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C84300 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C82272) *
               C84509) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C53878 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C53740 +
            (C23962 + C23963) * C53879 + (C24264 + C24265) * C84344) *
               C84300 +
           ((C20623 + C20624) * C53878 + (C20853 + C20854) * C53740 +
            (C23013 + C23014) * C53879 + (C23332 + C23333) * C84344) *
               C84307 +
           ((C20627 + C20628) * C53878 + (C20855 + C20856) * C53740 +
            (C23017 + C23018) * C53879 + (C23334 + C23335) * C84344) *
               C45935) *
              C1177 -
          (((C81997 * C17422 + C84198 * C17734 + C82024 * C17421 +
             C84509 * C17733) *
                C84344 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C53879 +
            (C23335 + C23334) * C53740 + (C23018 + C23017) * C53878) *
               C45935 +
           ((C33841 + C33840) * C84344 + (C33535 + C33534) * C53879 +
            (C23333 + C23332) * C53740 + (C23014 + C23013) * C53878) *
               C84307 +
           ((C34792 + C34791) * C84344 + (C34473 + C34472) * C53879 +
            (C24265 + C24264) * C53740 + (C23963 + C23962) * C53878) *
               C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C53878 +
                      (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                       C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                          C53740 +
                      (C52953 + C52954 + C52955) * C53879 +
                      (C53574 + C53575 + C53576) * C84344) *
                         C84509 +
                     ((C46062 + C46063 + C46064) * C53878 +
                      (C46587 + C46588 + C46589) * C53740 +
                      (C51113 + C51114 + C51115) * C53879 +
                      (C51728 + C51729 + C51730) * C84344) *
                         C84198) *
                        C1177 -
                    (((C82280 * C17422 + C45935 * C17810 + C82269 * C5280 +
                       C84307 * C5674 + C82272 * C4417 + C84300 * C4889) *
                          C84344 +
                      (C82280 * C17255 + C45935 * C17344 + C82269 * C5114 +
                       C84307 * C5200 + C82272 * C4213 + C84300 * C4308) *
                          C53879 +
                      (C51730 + C51729 + C51728) * C53740 +
                      (C51115 + C51114 + C51113) * C53878) *
                         C84198 +
                     ((C82280 * C17421 + C45935 * C17809 + C82269 * C5281 +
                       C84307 * C5675 + C82272 * C4416 + C84300 * C4888) *
                          C84344 +
                      (C82280 * C17254 + C45935 * C17343 + C82269 * C5115 +
                       C84307 * C5201 + C82272 * C4212 + C84300 * C4307) *
                          C53879 +
                      (C53576 + C53575 + C53574) * C53740 +
                      (C52955 + C52954 + C52953) * C53878) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezz[17] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84300 +
                      (C57588 + C57589) * C84307 + (C57590 + C57591) * C45935) *
                         C84509 +
                     ((C54379 + C54380) * C84300 + (C56643 + C56644) * C84307 +
                      (C56645 + C56646) * C45935) *
                         C84198) *
                        C1177 -
                    (((C54343 * C17255 + C58474 + C58474 + C84344 * C17886 +
                       C54342 * C3442 + C58475 + C58475 + C53740 * C4125) *
                          C45935 +
                      (C54343 * C5114 + C58476 + C58476 + C84344 * C5751 +
                       C54342 * C3445 + C58477 + C58477 + C53740 * C4126) *
                          C84307 +
                      (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
                       C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                          C84300) *
                         C84198 +
                     ((C54343 * C17254 + C58478 + C58478 + C84344 * C17885 +
                       C54342 * C3443 + C58479 + C58479 + C53740 * C4127) *
                          C45935 +
                      (C54343 * C5115 + C58480 + C58480 + C84344 * C5752 +
                       C54342 * C3446 + C58481 + C58481 + C53740 * C4128) *
                          C84307 +
                      (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
                       C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                          C84300) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84340 +
            C18832 * C84347 + C18833 * C63169) *
               C84300 +
           (C16325 * C84340 + C17990 * C84347 + C17991 * C63169) * C84307 +
           (C16326 * C84340 + C17992 * C84347 + C17993 * C63169) * C45935) *
              C84603 * C84604 * C90 -
          (((C15866 * C17255 + C17264 + C17264 + C84188 * C17259) * C63169 +
            (C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84347 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84340) *
               C45935 +
           ((C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C63169 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84347 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84340) *
               C84307 +
           ((C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C63169 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84347 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84340) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C15867 +
                      (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                       C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                          C84188) *
                         C84340 +
                     ((C52953 + C52954 + C52955) * C15867 +
                      (C52956 + C52957 + C52958) * C84188) *
                         C84347 +
                     ((C82272 * C4212 + C84300 * C4307 + C82269 * C5115 +
                       C84307 * C5201 + C82280 * C17254 + C45935 * C17343) *
                          C15867 +
                      (C82272 * C4216 + C84300 * C4311 + C82269 * C5118 +
                       C84307 * C5204 + C82280 * C17256 + C45935 * C17345) *
                          C84188) *
                         C63169) *
                        C84603 * C84604 * C90 -
                    (((C82280 * C17257 + C45935 * C17346 + C82269 * C5117 +
                       C84307 * C5203 + C82272 * C4217 + C84300 * C4312) *
                          C84188 +
                      (C82280 * C17255 + C45935 * C17344 + C82269 * C5114 +
                       C84307 * C5200 + C82272 * C4213 + C84300 * C4308) *
                          C15867) *
                         C63169 +
                     ((C51118 + C51117 + C51116) * C84188 +
                      (C51115 + C51114 + C51113) * C15867) *
                         C84347 +
                     ((C46067 + C46066 + C46065) * C84188 +
                      (C46064 + C46063 + C46062) * C15867) *
                         C84340) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C15867 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C84188) *
                         C84300 +
                     ((C66523 + C66524 + C66525) * C15867 +
                      (C66526 + C66527 + C66528) * C84188) *
                         C84307 +
                     ((C82422 * C1681 + C84340 * C1906 + C82419 * C3443 +
                       C84347 * C3630 + C82430 * C17254 + C63169 * C17421) *
                          C15867 +
                      (C82422 * C1685 + C84340 * C1910 + C82419 * C3449 +
                       C84347 * C3636 + C82430 * C17256 + C63169 * C17423) *
                          C84188) *
                         C45935) *
                        C84603 * C84604 * C90 -
                    (((C82430 * C17257 + C63169 * C17424 + C82419 * C3448 +
                       C84347 * C3635 + C82422 * C1686 + C84340 * C1911) *
                          C84188 +
                      (C82430 * C17255 + C63169 * C17422 + C82419 * C3442 +
                       C84347 * C3629 + C82422 * C1682 + C84340 * C1907) *
                          C15867) *
                         C45935 +
                     ((C65604 + C65603 + C65602) * C84188 +
                      (C65601 + C65600 + C65599) * C15867) *
                         C84307 +
                     ((C63354 + C63353 + C63352) * C84188 +
                      (C63351 + C63350 + C63349) * C15867) *
                         C84300) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C82272 +
            (C15867 * C173 + C84188 * C330) * C84300 + C16500 * C82269 +
            C16501 * C84307 + C16502 * C82280 + C16503 * C45935) *
               C84340 +
           (C19118 * C82272 + C19119 * C84300 + C18277 * C82269 +
            C18278 * C84307 + C18279 * C82280 + C18280 * C45935) *
               C84347 +
           (C19120 * C82272 + C19121 * C84300 + C18281 * C82269 +
            C18282 * C84307 + C18283 * C82280 + C18284 * C45935) *
               C63169) *
              C84603 * C84604 * C90 -
          (((C15867 * C17344 + C84188 * C17500) * C45935 +
            (C15867 * C17255 + C84188 * C17257) * C82280 +
            (C15867 * C5200 + C84188 * C5360) * C84307 +
            (C15867 * C5114 + C84188 * C5117) * C82269 +
            (C15867 * C4308 + C84188 * C4535) * C84300 +
            (C15867 * C4213 + C84188 * C4217) * C82272) *
               C63169 +
           ((C15867 * C3544 + C84188 * C3715) * C45935 +
            (C15867 * C3442 + C84188 * C3448) * C82280 +
            (C15867 * C3545 + C84188 * C3718) * C84307 +
            (C15867 * C3445 + C84188 * C3451) * C82269 +
            (C15867 * C1244 + C84188 * C1348) * C84300 +
            (C15867 * C1182 + C84188 * C1187) * C82272) *
               C84347 +
           ((C15867 * C1789 + C84188 * C2013) * C45935 +
            (C15867 * C1682 + C84188 * C1686) * C82280 +
            (C15867 * C784 + C84188 * C888) * C84307 +
            (C15867 * C722 + C84188 * C727) * C82269 +
            (C15867 * C174 + C84188 * C331) * C84300 +
            (C15867 * C103 + C84188 * C109) * C82272) *
               C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                      C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                      C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                         C84188 * C84340 +
                     (C53271 + C53272 + C53273) * C84188 * C84347 +
                     (C82324 * C4212 + C53264 + C53264 + C84300 * C4612 +
                      C82317 * C5115 + C53263 + C53263 + C84307 * C5438 +
                      C46297 * C17254 + C53262 + C53262 + C45935 * C17575) *
                         C84188 * C63169) *
                        C84603 * C84604 * C90 -
                    ((C46297 * C17255 + C53259 + C53259 + C45935 * C17576 +
                      C82317 * C5114 + C53260 + C53260 + C84307 * C5437 +
                      C82324 * C4213 + C53261 + C53261 + C84300 * C4613) *
                         C84188 * C63169 +
                     (C51427 + C51426 + C51425) * C84188 * C84347 +
                     (C46337 + C46336 + C46335) * C84188 * C84340) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                      C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                         C82272 +
                     (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                      C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                         C84300 +
                     (C66523 + C66524 + C66525) * C82269 +
                     (C66829 + C66830 + C66831) * C84307 +
                     (C82422 * C1681 + C84340 * C1906 + C82419 * C3443 +
                      C84347 * C3630 + C82430 * C17254 + C63169 * C17421) *
                         C82280 +
                     (C82422 * C1788 + C84340 * C2213 + C82419 * C3546 +
                      C84347 * C3887 + C82430 * C17343 + C63169 * C17657) *
                         C45935) *
                        C84188 * C84603 * C84604 * C90 -
                    ((C82430 * C17344 + C63169 * C17658 + C82419 * C3544 +
                      C84347 * C3885 + C82422 * C1789 + C84340 * C2214) *
                         C45935 +
                     (C82430 * C17255 + C63169 * C17422 + C82419 * C3442 +
                      C84347 * C3629 + C82422 * C1682 + C84340 * C1907) *
                         C82280 +
                     (C65907 + C65906 + C65905) * C84307 +
                     (C65601 + C65600 + C65599) * C82269 +
                     (C63597 + C63596 + C63595) * C84300 +
                     (C63351 + C63350 + C63349) * C82272) *
                        C84188 * C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C82422 +
            (C15867 * C252 + C84188 * C521) * C84340 + C19118 * C82419 +
            C19391 * C84347 + C19120 * C82430 + C19392 * C63169) *
               C84300 +
           (C16500 * C82422 + C16660 * C84340 + C18277 * C82419 +
            C18550 * C84347 + C18281 * C82430 + C18551 * C63169) *
               C84307 +
           (C16502 * C82422 + C16661 * C84340 + C18279 * C82419 +
            C18552 * C84347 + C18283 * C82430 + C18553 * C63169) *
               C45935) *
              C84603 * C84604 * C90 -
          (((C15867 * C17422 + C84188 * C17734) * C63169 +
            (C15867 * C17255 + C84188 * C17257) * C82430 +
            (C15867 * C3629 + C84188 * C3964) * C84347 +
            (C15867 * C3442 + C84188 * C3448) * C82419 +
            (C15867 * C1907 + C84188 * C2316) * C84340 +
            (C15867 * C1682 + C84188 * C1686) * C82422) *
               C45935 +
           ((C15867 * C5280 + C84188 * C5597) * C63169 +
            (C15867 * C5114 + C84188 * C5117) * C82430 +
            (C15867 * C3632 + C84188 * C3967) * C84347 +
            (C15867 * C3445 + C84188 * C3451) * C82419 +
            (C15867 * C836 + C84188 * C1034) * C84340 +
            (C15867 * C722 + C84188 * C727) * C82422) *
               C84307 +
           ((C15867 * C4417 + C84188 * C4811) * C63169 +
            (C15867 * C4213 + C84188 * C4217) * C82430 +
            (C15867 * C1296 + C84188 * C1494) * C84347 +
            (C15867 * C1182 + C84188 * C1187) * C82419 +
            (C15867 * C253 + C84188 * C522) * C84340 +
            (C15867 * C103 + C84188 * C109) * C82422) *
               C84300) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C82422 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84340 +
                     (C52953 + C52954 + C52955) * C82419 +
                     (C53574 + C53575 + C53576) * C84347 +
                     (C82272 * C4212 + C84300 * C4307 + C82269 * C5115 +
                      C84307 * C5201 + C82280 * C17254 + C45935 * C17343) *
                         C82430 +
                     (C82272 * C4416 + C84300 * C4888 + C82269 * C5281 +
                      C84307 * C5675 + C82280 * C17421 + C45935 * C17809) *
                         C63169) *
                        C84188 * C84603 * C84604 * C90 -
                    ((C82280 * C17422 + C45935 * C17810 + C82269 * C5280 +
                      C84307 * C5674 + C82272 * C4417 + C84300 * C4889) *
                         C63169 +
                     (C82280 * C17255 + C45935 * C17344 + C82269 * C5114 +
                      C84307 * C5200 + C82272 * C4213 + C84300 * C4308) *
                         C82430 +
                     (C51730 + C51729 + C51728) * C84347 +
                     (C51115 + C51114 + C51113) * C82419 +
                     (C46589 + C46588 + C46587) * C84340 +
                     (C46064 + C46063 + C46062) * C82422) *
                        C84188 * C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                      C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                      C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                         C84300 +
                     (C67144 + C67145 + C67146) * C84307 +
                     (C82474 * C1681 + C67137 + C67137 + C84340 * C2489 +
                      C82467 * C3443 + C67136 + C67136 + C84347 * C4127 +
                      C63836 * C17254 + C67135 + C67135 + C63169 * C17885) *
                         C45935) *
                        C84188 * C84603 * C84604 * C90 -
                    ((C63836 * C17255 + C67132 + C67132 + C63169 * C17886 +
                      C82467 * C3442 + C67133 + C67133 + C84347 * C4125 +
                      C82474 * C1682 + C67134 + C67134 + C84340 * C2490) *
                         C45935 +
                     (C66216 + C66215 + C66214) * C84307 +
                     (C63876 + C63875 + C63874) * C84300) *
                        C84188 * C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84340 +
            C18832 * C84347 + C18833 * C63169) *
               C84300 +
           (C80564 + C80565 + C80566) * C84307 +
           (C80567 + C80568 + C80569) * C45935) *
              C84603 * C716 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C63169 +
            C25136 * C84347 + C16327 * C84340) *
               C45935 +
           (C80569 + C80568 + C80567) * C84307 +
           (C80566 + C80565 + C80564) * C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexy[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C15867 +
                      (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                       C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                          C84188) *
                         C84340 +
                     ((C52953 + C52954 + C52955) * C15867 +
                      (C52956 + C52957 + C52958) * C84188) *
                         C84347 +
                     ((C82272 * C4212 + C84300 * C4307 + C82269 * C5115 +
                       C84307 * C5201 + C82280 * C17254 + C45935 * C17343) *
                          C15867 +
                      (C82272 * C4216 + C84300 * C4311 + C82269 * C5118 +
                       C84307 * C5204 + C82280 * C17256 + C45935 * C17345) *
                          C84188) *
                         C63169) *
                        C84603 * C716 -
                    (((C82280 * C17968 + C45935 * C18072 + C82269 * C17256 +
                       C84307 * C17345 + C82272 * C5118 + C84300 * C5204) *
                          C84188 +
                      (C82280 * C17967 + C45935 * C18071 + C82269 * C17254 +
                       C84307 * C17343 + C82272 * C5115 + C84300 * C5201) *
                          C15867) *
                         C63169 +
                     ((C82280 * C16809 + C45935 * C16862 + C82269 * C3449 +
                       C84307 * C3552 + C82272 * C3452 + C84300 * C3553) *
                          C84188 +
                      (C82280 * C16807 + C45935 * C16860 + C82269 * C3443 +
                       C84307 * C3546 + C82272 * C3446 + C84300 * C3547) *
                          C15867) *
                         C84347 +
                     ((C82280 * C2602 + C45935 * C2718 + C82269 * C1685 +
                       C84307 * C1792 + C82272 * C728 + C84300 * C790) *
                          C84188 +
                      (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                       C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                          C15867) *
                         C84340) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexz[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C15867 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C84188) *
                         C84300 +
                     ((C66523 + C66524 + C66525) * C15867 +
                      (C66526 + C66527 + C66528) * C84188) *
                         C84307 +
                     ((C80730 + C80731 + C80732) * C15867 +
                      (C80733 + C80734 + C80735) * C84188) *
                         C45935) *
                        C84603 * C716 -
                    (((C82430 * C17968 + C63169 * C18148 + C82419 * C16809 +
                       C84347 * C16908 + C82422 * C2602 + C84340 * C2798) *
                          C84188 +
                      (C82430 * C17967 + C63169 * C18147 + C82419 * C16807 +
                       C84347 * C16906 + C82422 * C2599 + C84340 * C2795) *
                          C15867) *
                         C45935 +
                     ((C80735 + C80734 + C80733) * C84188 +
                      (C80732 + C80731 + C80730) * C15867) *
                         C84307 +
                     ((C66528 + C66527 + C66526) * C84188 +
                      (C66525 + C66524 + C66523) * C15867) *
                         C84300) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C82272 +
            (C15867 * C173 + C84188 * C330) * C84300 + C16500 * C82269 +
            C16501 * C84307 + C16502 * C82280 + C16503 * C45935) *
               C84340 +
           (C19118 * C82272 + C19119 * C84300 + C18277 * C82269 +
            C18278 * C84307 + C18279 * C82280 + C18280 * C45935) *
               C84347 +
           (C19120 * C82272 + C19121 * C84300 + C18281 * C82269 +
            C18282 * C84307 + C18283 * C82280 + C18284 * C45935) *
               C63169) *
              C84603 * C716 -
          (((C15867 * C18071 + C84188 * C18259) * C45935 +
            (C15867 * C17967 + C84188 * C17968) * C82280 + C18284 * C84307 +
            C18283 * C82269 + C18282 * C84300 + C18281 * C82272) *
               C63169 +
           (C25353 * C45935 + C25352 * C82280 + C18280 * C84307 +
            C18279 * C82269 + C18278 * C84300 + C18277 * C82272) *
               C84347 +
           (C16505 * C45935 + C16504 * C82280 + C16503 * C84307 +
            C16502 * C82269 + C16501 * C84300 + C16500 * C82272) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                      C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                      C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                         C84188 * C84340 +
                     (C53271 + C53272 + C53273) * C84188 * C84347 +
                     (C82324 * C4212 + C53264 + C53264 + C84300 * C4612 +
                      C82317 * C5115 + C53263 + C53263 + C84307 * C5438 +
                      C46297 * C17254 + C53262 + C53262 + C45935 * C17575) *
                         C84188 * C63169) *
                        C84603 * C716 -
                    ((C46297 * C17967 + C80884 + C80884 + C45935 * C18358 +
                      C82317 * C17254 + C80885 + C80885 + C84307 * C17575 +
                      C82324 * C5115 + C80886 + C80886 + C84300 * C5438) *
                         C84188 * C63169 +
                     (C46297 * C16807 + C52344 + C52344 + C45935 * C16996 +
                      C82317 * C3443 + C52345 + C52345 + C84307 * C3798 +
                      C82324 * C3446 + C52346 + C52346 + C84300 * C3799) *
                         C84188 * C84347 +
                     (C46297 * C2599 + C47130 + C47130 + C45935 * C3012 +
                      C82317 * C1681 + C47131 + C47131 + C84307 * C2093 +
                      C82324 * C723 + C47132 + C47132 + C84300 * C936) *
                         C84188 * C84340) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                      C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                         C82272 +
                     (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                      C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                         C84300 +
                     (C66523 + C66524 + C66525) * C82269 +
                     (C66829 + C66830 + C66831) * C84307 +
                     (C80730 + C80731 + C80732) * C82280 +
                     (C80967 + C80968 + C80969) * C45935) *
                        C84188 * C84603 * C716 -
                    ((C82430 * C18071 + C63169 * C18439 + C82419 * C16860 +
                      C84347 * C17045 + C82422 * C2715 + C84340 * C3098) *
                         C45935 +
                     (C82430 * C17967 + C63169 * C18147 + C82419 * C16807 +
                      C84347 * C16906 + C82422 * C2599 + C84340 * C2795) *
                         C82280 +
                     (C80969 + C80968 + C80967) * C84307 +
                     (C80732 + C80731 + C80730) * C82269 +
                     (C66831 + C66830 + C66829) * C84300 +
                     (C66525 + C66524 + C66523) * C82272) *
                        C84188 * C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C82422 +
            (C15867 * C252 + C84188 * C521) * C84340 + C19118 * C82419 +
            C19391 * C84347 + C19120 * C82430 + C19392 * C63169) *
               C84300 +
           (C81044 + C81045 + C81046 + C81047 + C81048 + C81049) * C84307 +
           (C81050 + C81051 + C81052 + C81053 + C81054 + C81055) * C45935) *
              C84603 * C716 -
          (((C15867 * C18147 + C84188 * C18532) * C63169 +
            (C15867 * C17967 + C84188 * C17968) * C82430 + C25575 * C84347 +
            C25352 * C82419 + C16662 * C84340 + C16504 * C82422) *
               C45935 +
           (C81055 + C81054 + C81053 + C81052 + C81051 + C81050) * C84307 +
           (C81049 + C81048 + C81047 + C81046 + C81045 + C81044) * C84300) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C82422 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84340 +
                     (C52953 + C52954 + C52955) * C82419 +
                     (C53574 + C53575 + C53576) * C84347 +
                     (C82272 * C4212 + C84300 * C4307 + C82269 * C5115 +
                      C84307 * C5201 + C82280 * C17254 + C45935 * C17343) *
                         C82430 +
                     (C82272 * C4416 + C84300 * C4888 + C82269 * C5281 +
                      C84307 * C5675 + C82280 * C17421 + C45935 * C17809) *
                         C63169) *
                        C84188 * C84603 * C716 -
                    ((C82280 * C18147 + C45935 * C18631 + C82269 * C17421 +
                      C84307 * C17809 + C82272 * C5281 + C84300 * C5675) *
                         C63169 +
                     (C82280 * C17967 + C45935 * C18071 + C82269 * C17254 +
                      C84307 * C17343 + C82272 * C5115 + C84300 * C5201) *
                         C82430 +
                     (C82280 * C16906 + C45935 * C17133 + C82269 * C3630 +
                      C84307 * C4047 + C82272 * C3633 + C84300 * C4048) *
                         C84347 +
                     (C82280 * C16807 + C45935 * C16860 + C82269 * C3443 +
                      C84307 * C3546 + C82272 * C3446 + C84300 * C3547) *
                         C82419 +
                     (C82280 * C2795 + C45935 * C3276 + C82269 * C1906 +
                      C84307 * C2393 + C82272 * C837 + C84300 * C1082) *
                         C84340 +
                     (C82280 * C2599 + C45935 * C2715 + C82269 * C1681 +
                      C84307 * C1788 + C82272 * C723 + C84300 * C785) *
                         C82422) *
                        C84188 * C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezz[19] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                      C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                      C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                         C84300 +
                     (C67144 + C67145 + C67146) * C84307 +
                     (C81219 + C81220 + C81221) * C45935) *
                        C84188 * C84603 * C716 -
                    ((C63836 * C17967 + C81210 + C81210 + C63169 * C18706 +
                      C82467 * C16807 + C81211 + C81211 + C84347 * C17177 +
                      C82474 * C2599 + C81212 + C81212 + C84340 * C3353) *
                         C45935 +
                     (C81221 + C81220 + C81219) * C84307 +
                     (C67146 + C67145 + C67144) * C84300) *
                        C84188 * C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84340 +
            C18832 * C84347 + C18833 * C63169) *
               C84300 +
           (C80564 + C80565 + C80566) * C84307 +
           (C80567 + C80568 + C80569) * C45935) *
              C1177 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C63169 +
            C17993 * C84347 + C17992 * C84340) *
               C45935 +
           (C37619 * C63169 + C17991 * C84347 + C17990 * C84340) * C84307 +
           (C31748 * C63169 + C18833 * C84347 + C18832 * C84340) * C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                       C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                          C15867 +
                      (C82272 * C108 + C84300 * C179 + C82269 * C728 +
                       C84307 * C790 + C82280 * C1685 + C45935 * C1792) *
                          C84188) *
                         C84340 +
                     ((C52953 + C52954 + C52955) * C15867 +
                      (C52956 + C52957 + C52958) * C84188) *
                         C84347 +
                     ((C81382 + C81383 + C81384) * C15867 +
                      (C81385 + C81386 + C81387) * C84188) *
                         C63169) *
                        C1177 -
                    (((C82280 * C18816 + C45935 * C18909 + C82269 * C18817 +
                       C84307 * C18910 + C82272 * C5841 + C84300 * C5957) *
                          C84188 +
                      (C82280 * C18814 + C45935 * C18907 + C82269 * C18815 +
                       C84307 * C18908 + C82272 * C5838 + C84300 * C5954) *
                          C15867) *
                         C63169 +
                     ((C81387 + C81386 + C81385) * C84188 +
                      (C81384 + C81383 + C81382) * C15867) *
                         C84347 +
                     ((C52958 + C52957 + C52956) * C84188 +
                      (C52955 + C52954 + C52953) * C15867) *
                         C84340) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexz[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C15867 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C84188) *
                         C84300 +
                     ((C66523 + C66524 + C66525) * C15867 +
                      (C66526 + C66527 + C66528) * C84188) *
                         C84307 +
                     ((C80730 + C80731 + C80732) * C15867 +
                      (C80733 + C80734 + C80735) * C84188) *
                         C45935) *
                        C1177 -
                    (((C82430 * C18816 + C63169 * C19023 + C82419 * C17256 +
                       C84347 * C17423 + C82422 * C3449 + C84340 * C3636) *
                          C84188 +
                      (C82430 * C18814 + C63169 * C19021 + C82419 * C17254 +
                       C84347 * C17421 + C82422 * C3443 + C84340 * C3630) *
                          C15867) *
                         C45935 +
                     ((C82430 * C18817 + C63169 * C19024 + C82419 * C5118 +
                       C84347 * C5284 + C82422 * C3452 + C84340 * C3639) *
                          C84188 +
                      (C82430 * C18815 + C63169 * C19022 + C82419 * C5115 +
                       C84347 * C5281 + C82422 * C3446 + C84340 * C3633) *
                          C15867) *
                         C84307 +
                     ((C82430 * C5841 + C63169 * C6061 + C82419 * C4216 +
                       C84347 * C4420 + C82422 * C1188 + C84340 * C1302) *
                          C84188 +
                      (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                       C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                          C15867) *
                         C84300) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C82272 +
            (C15867 * C173 + C84188 * C330) * C84300 + C16500 * C82269 +
            C16501 * C84307 + C16502 * C82280 + C16503 * C45935) *
               C84340 +
           (C81536 + C81537 + C81538 + C81539 + C81540 + C81541) * C84347 +
           (C81542 + C81543 + C81544 + C81545 + C81546 + C81547) * C63169) *
              C1177 -
          (((C15867 * C18907 + C84188 * C19099) * C45935 +
            (C15867 * C18814 + C84188 * C18816) * C82280 + C37848 * C84307 +
            C37847 * C82269 + C31914 * C84300 + C31913 * C82272) *
               C63169 +
           (C81547 + C81546 + C81545 + C81544 + C81543 + C81542) * C84347 +
           (C81541 + C81540 + C81539 + C81538 + C81537 + C81536) * C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82324 * C102 + C46299 + C46299 + C84300 * C379 +
                      C82317 * C723 + C46300 + C46300 + C84307 * C936 +
                      C46297 * C1681 + C46301 + C46301 + C45935 * C2093) *
                         C84188 * C84340 +
                     (C53271 + C53272 + C53273) * C84188 * C84347 +
                     (C81637 + C81638 + C81639) * C84188 * C63169) *
                        C1177 -
                    ((C46297 * C18814 + C81628 + C81628 + C45935 * C19199 +
                      C82317 * C18815 + C81629 + C81629 + C84307 * C19200 +
                      C82324 * C5838 + C81630 + C81630 + C84300 * C6251) *
                         C84188 * C63169 +
                     (C81639 + C81638 + C81637) * C84188 * C84347 +
                     (C53273 + C53272 + C53271) * C84188 * C84340) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                      C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                         C82272 +
                     (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                      C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                         C84300 +
                     (C66523 + C66524 + C66525) * C82269 +
                     (C66829 + C66830 + C66831) * C84307 +
                     (C80730 + C80731 + C80732) * C82280 +
                     (C80967 + C80968 + C80969) * C45935) *
                        C84188 * C1177 -
                    ((C82430 * C18907 + C63169 * C19308 + C82419 * C17343 +
                      C84347 * C17657 + C82422 * C3546 + C84340 * C3887) *
                         C45935 +
                     (C82430 * C18814 + C63169 * C19021 + C82419 * C17254 +
                      C84347 * C17421 + C82422 * C3443 + C84340 * C3630) *
                         C82280 +
                     (C82430 * C18908 + C63169 * C19309 + C82419 * C5201 +
                      C84347 * C5521 + C82422 * C3547 + C84340 * C3888) *
                         C84307 +
                     (C82430 * C18815 + C63169 * C19022 + C82419 * C5115 +
                      C84347 * C5281 + C82422 * C3446 + C84340 * C3633) *
                         C82269 +
                     (C82430 * C5954 + C63169 * C6347 + C82419 * C4307 +
                      C84347 * C4714 + C82422 * C1245 + C84340 * C1448) *
                         C84300 +
                     (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                      C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                         C82272) *
                        C84188 * C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C82422 +
            (C15867 * C252 + C84188 * C521) * C84340 + C19118 * C82419 +
            C19391 * C84347 + C19120 * C82430 + C19392 * C63169) *
               C84300 +
           (C81044 + C81045 + C81046 + C81047 + C81048 + C81049) * C84307 +
           (C81050 + C81051 + C81052 + C81053 + C81054 + C81055) * C45935) *
              C1177 -
          (((C15867 * C19021 + C84188 * C19384) * C63169 +
            (C15867 * C18814 + C84188 * C18816) * C82430 + C18553 * C84347 +
            C18283 * C82419 + C18552 * C84340 + C18279 * C82422) *
               C45935 +
           (C38070 * C63169 + C37847 * C82430 + C18551 * C84347 +
            C18281 * C82419 + C18550 * C84340 + C18277 * C82422) *
               C84307 +
           (C32069 * C63169 + C31913 * C82430 + C19392 * C84347 +
            C19120 * C82419 + C19391 * C84340 + C19118 * C82422) *
               C84300) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82272 * C102 + C84300 * C173 + C82269 * C723 +
                      C84307 * C785 + C82280 * C1681 + C45935 * C1788) *
                         C82422 +
                     (C82272 * C252 + C84300 * C569 + C82269 * C837 +
                      C84307 * C1082 + C82280 * C1906 + C45935 * C2393) *
                         C84340 +
                     (C52953 + C52954 + C52955) * C82419 +
                     (C53574 + C53575 + C53576) * C84347 +
                     (C81382 + C81383 + C81384) * C82430 +
                     (C81868 + C81869 + C81870) * C63169) *
                        C84188 * C1177 -
                    ((C82280 * C19021 + C45935 * C19466 + C82269 * C19022 +
                      C84307 * C19467 + C82272 * C6058 + C84300 * C6519) *
                         C63169 +
                     (C82280 * C18814 + C45935 * C18907 + C82269 * C18815 +
                      C84307 * C18908 + C82272 * C5838 + C84300 * C5954) *
                         C82430 +
                     (C81870 + C81869 + C81868) * C84347 +
                     (C81384 + C81383 + C81382) * C82419 +
                     (C53576 + C53575 + C53574) * C84340 +
                     (C52955 + C52954 + C52953) * C82422) *
                        C84188 * C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezz[20] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                      C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                      C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                         C84300 +
                     (C67144 + C67145 + C67146) * C84307 +
                     (C81219 + C81220 + C81221) * C45935) *
                        C84188 * C1177 -
                    ((C63836 * C18814 + C81945 + C81945 + C63169 * C19560 +
                      C82467 * C17254 + C81946 + C81946 + C84347 * C17885 +
                      C82474 * C3443 + C81947 + C81947 + C84340 * C4127) *
                         C45935 +
                     (C63836 * C18815 + C68032 + C68032 + C63169 * C19561 +
                      C82467 * C5115 + C68033 + C68033 + C84347 * C5752 +
                      C82474 * C3446 + C68034 + C68034 + C84340 * C4128) *
                         C84307 +
                     (C63836 * C5838 + C65290 + C65290 + C63169 * C6602 +
                      C82467 * C4212 + C65291 + C65291 + C84347 * C4993 +
                      C82474 * C1183 + C65292 + C65292 + C84340 * C1589) *
                         C84300) *
                        C84188 * C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C53740 +
            C18832 * C84344) *
               C84606 +
           (C16325 * C53740 + C17990 * C84344) * C84599 +
           (C16326 * C53740 + C17992 * C84344) * C84586 +
           (C16327 * C53740 + C25136 * C84344) * C84536) *
              C84603 * C84604 * C90 -
          (((C15866 * C21056 + C24532 + C24532 + C84188 * C21058) * C84344 +
            (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C53740) *
               C84536 +
           ((C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84344 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C53740) *
               C84586 +
           ((C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84344 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C53740) *
               C84599 +
           ((C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84344 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C53740) *
               C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
             C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
             C84550 * C116) *
                C53740 +
            (C27956 + C27957 + C27958) * C84344) *
               C38937 +
           ((C14462 + C14463 + C14464) * C53740 +
            (C13624 * C3446 + C15214 + C15214 + C84590 * C3458 +
             C13626 * C3445 + C15213 + C15213 + C84574 * C3457 +
             C13628 * C3444 + C15212 + C15212 + C84550 * C3456) *
                C84344) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C13628 * C8102 + C68133 + C68133 + C84550 * C8104 +
             C13626 * C3444 + C68134 + C68134 + C84574 * C3456 +
             C13624 * C3445 + C68135 + C68135 + C84590 * C3457) *
                C84344 +
            (C13628 * C720 + C13643 + C13643 + C84550 * C730 + C13626 * C721 +
             C13644 + C13644 + C84574 * C731 + C13624 * C722 + C13645 + C13645 +
             C84590 * C732) *
                C53740) *
               C84304 +
           ((C13628 * C1180 + C26468 + C26468 + C84550 * C1190 +
             C13626 * C1181 + C26469 + C26469 + C84574 * C1191 +
             C13624 * C1182 + C26470 + C26470 + C84590 * C1192) *
                C84344 +
            (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
             C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
             C84590 * C115) *
                C53740) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84607 +
            C18832 * C84601 + C18833 * C84589 + C31748 * C84543) *
               C38937 +
           (C16325 * C84607 + C17990 * C84601 + C17991 * C84589 +
            C37619 * C84543) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C15866 * C34135 + C37017 + C37017 + C84188 * C34137) * C84543 +
            (C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C84589 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84601 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84607) *
               C84304 +
           ((C15866 * C5837 + C30916 + C30916 + C84188 * C5843) * C84543 +
            (C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C84589 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84601 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84607) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
             C41047 * C1685 + C84586 * C1792 + C41048 * C2602 +
             C84536 * C2718) *
                C84188) *
               C53740 +
           ((C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
             C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C41045 * C1188 + C84606 * C1250 + C41046 * C3452 + C84599 * C3553 +
             C41047 * C3449 + C84586 * C3552 + C41048 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C41048 * C21057 + C84536 * C21134 + C41047 * C3448 +
             C84586 * C3550 + C41046 * C3451 + C84599 * C3551 + C41045 * C1187 +
             C84606 * C1249) *
                C84188 +
            (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
             C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
             C84606 * C1244) *
                C15867) *
               C84344 +
           ((C41073 + C41072 + C41071 + C41070) * C84188 +
            (C41069 + C41068 + C41067 + C41066) * C15867) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C13625 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84590 +
            (C39056 + C39057) * C13627 + (C39058 + C39059) * C84574 +
            (C39060 + C39061) * C13629 + (C39062 + C39063) * C84550) *
               C53740 +
           ((C45088 + C45089) * C13625 + (C45090 + C45091) * C84590 +
            (C43130 + C43131) * C13627 + (C43132 + C43133) * C84574 +
            (C48341 + C48342) * C13629 + (C48343 + C48344) * C84550) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C39030 * C8103 + C84304 * C8180 + C39029 * C1185 +
             C38937 * C1247) *
                C84550 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C13629 +
            (C48344 + C48343) * C84574 + (C48342 + C48341) * C13627 +
            (C43133 + C43132) * C84590 + (C43131 + C43130) * C13625) *
               C84344 +
           ((C39067 + C39066) * C84550 + (C39065 + C39064) * C13629 +
            (C39063 + C39062) * C84574 + (C39061 + C39060) * C13627 +
            (C39059 + C39058) * C84590 + (C39057 + C39056) * C13625) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C15867 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84188) *
               C84607 +
           ((C45088 + C45089) * C15867 + (C45090 + C45091) * C84188) * C84601 +
           ((C45092 + C45093) * C15867 + (C45094 + C45095) * C84188) * C84589 +
           ((C39029 * C5838 + C38937 * C5954 + C39030 * C18815 +
             C84304 * C18908) *
                C15867 +
            (C39029 * C5841 + C38937 * C5957 + C39030 * C18817 +
             C84304 * C18910) *
                C84188) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C39030 * C34136 + C84304 * C34251 + C39029 * C5840 +
             C38937 * C5956) *
                C84188 +
            (C39030 * C34135 + C84304 * C34250 + C39029 * C5837 +
             C38937 * C5953) *
                C15867) *
               C84543 +
           ((C43137 + C43136) * C84188 + (C43135 + C43134) * C15867) * C84589 +
           ((C43133 + C43132) * C84188 + (C43131 + C43130) * C15867) * C84601 +
           ((C39059 + C39058) * C84188 + (C39057 + C39056) * C15867) * C84607) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C15867 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84188) *
               C84606 +
           ((C56957 + C56958) * C15867 + (C56959 + C56960) * C84188) * C84599 +
           ((C56961 + C56962) * C15867 + (C56963 + C56964) * C84188) * C84586 +
           ((C53878 * C2599 + C53740 * C2795 + C53879 * C16807 +
             C84344 * C16906) *
                C15867 +
            (C53878 * C2602 + C53740 * C2798 + C53879 * C16809 +
             C84344 * C16908) *
                C84188) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C53879 * C21057 + C84344 * C21202 + C53878 * C2601 +
             C53740 * C2797) *
                C84188 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C15867) *
               C84536 +
           ((C55996 + C55995) * C84188 + (C55994 + C55993) * C15867) * C84586 +
           ((C55992 + C55991) * C84188 + (C55990 + C55989) * C15867) * C84599 +
           ((C53908 + C53907) * C84188 + (C53906 + C53905) * C15867) * C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C13625 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84590 +
            (C53905 + C53906) * C13627 + (C53907 + C53908) * C84574 +
            (C53909 + C53910) * C13629 + (C53911 + C53912) * C84550) *
               C38937 +
           ((C56957 + C56958) * C13625 + (C56959 + C56960) * C84590 +
            (C55989 + C55990) * C13627 + (C55991 + C55992) * C84574 +
            (C60720 + C60721) * C13629 + (C60722 + C60723) * C84550) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C53879 * C8103 + C84344 * C8248 + C53878 * C725 + C53740 * C839) *
                C84550 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C13629 +
            (C60723 + C60722) * C84574 + (C60721 + C60720) * C13627 +
            (C55992 + C55991) * C84590 + (C55990 + C55989) * C13625) *
               C84304 +
           ((C53916 + C53915) * C84550 + (C53914 + C53913) * C13629 +
            (C53912 + C53911) * C84574 + (C53910 + C53909) * C13627 +
            (C53908 + C53907) * C84590 + (C53906 + C53905) * C13625) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
             C58687 * C4212 + C84589 * C4416 + C58688 * C5838 +
             C84543 * C6058) *
                C15867 +
            (C58685 * C108 + C84607 * C258 + C58686 * C1188 + C84601 * C1302 +
             C58687 * C4216 + C84589 * C4420 + C58688 * C5841 +
             C84543 * C6061) *
                C84188) *
               C38937 +
           ((C58685 * C723 + C84607 * C837 + C58686 * C3446 + C84601 * C3633 +
             C58687 * C5115 + C84589 * C5281 + C58688 * C18815 +
             C84543 * C19022) *
                C15867 +
            (C58685 * C728 + C84607 * C842 + C58686 * C3452 + C84601 * C3639 +
             C58687 * C5118 + C84589 * C5284 + C58688 * C18817 +
             C84543 * C19024) *
                C84188) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C58688 * C34136 + C84543 * C34363 + C58687 * C5117 +
             C84589 * C5283 + C58686 * C3451 + C84601 * C3638 + C58685 * C727 +
             C84607 * C841) *
                C84188 +
            (C58688 * C34135 + C84543 * C34362 + C58687 * C5114 +
             C84589 * C5280 + C58686 * C3445 + C84601 * C3632 + C58685 * C722 +
             C84607 * C836) *
                C15867) *
               C84304 +
           ((C58713 + C58712 + C58711 + C58710) * C84188 +
            (C58709 + C58708 + C58707 + C58706) * C15867) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[21] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C41045 +
                      (C15867 * C173 + C84188 * C330) * C84606 +
                      C16500 * C41046 + C16501 * C84599 + C16502 * C41047 +
                      C16503 * C84586 + C16504 * C41048 + C16505 * C84536) *
                         C53740 +
                     (C19118 * C41045 + C19119 * C84606 + C18277 * C41046 +
                      C18278 * C84599 + C18279 * C41047 + C18280 * C84586 +
                      C25352 * C41048 + C25353 * C84536) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C15867 * C21133 + C84188 * C21269) * C84536 +
                      (C15867 * C21056 + C84188 * C21057) * C41048 +
                      (C15867 * C3544 + C84188 * C3715) * C84586 +
                      (C15867 * C3442 + C84188 * C3448) * C41047 +
                      (C15867 * C3545 + C84188 * C3718) * C84599 +
                      (C15867 * C3445 + C84188 * C3451) * C41046 +
                      (C15867 * C1244 + C84188 * C1348) * C84606 +
                      (C15867 * C1182 + C84188 * C1187) * C41045) *
                         C84344 +
                     ((C15867 * C2714 + C84188 * C2898) * C84536 +
                      (C15867 * C2598 + C84188 * C2601) * C41048 +
                      (C15867 * C1789 + C84188 * C2013) * C84586 +
                      (C15867 * C1682 + C84188 * C1686) * C41047 +
                      (C15867 * C784 + C84188 * C888) * C84599 +
                      (C15867 * C722 + C84188 * C727) * C41046 +
                      (C15867 * C174 + C84188 * C331) * C84606 +
                      (C15867 * C103 + C84188 * C109) * C41045) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C39029 +
                      (C13625 * C173 + C84590 * C330 + C13627 * C174 +
                       C84574 * C331 + C13629 * C175 + C84550 * C332) *
                          C38937 +
                      (C14726 + C14727 + C14728) * C39030 +
                      (C14729 + C14730 + C14731) * C84304) *
                         C53740 +
                     ((C28220 + C28221 + C28222) * C39029 +
                      (C28223 + C28224 + C28225) * C38937 +
                      (C13625 * C3446 + C84590 * C3452 + C13627 * C3445 +
                       C84574 * C3451 + C13629 * C3444 + C84550 * C3450) *
                          C39030 +
                      (C13625 * C3547 + C84590 * C3719 + C13627 * C3545 +
                       C84574 * C3718 + C13629 * C3543 + C84550 * C3717) *
                          C84304) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C13629 * C8179 + C84550 * C8315 + C13627 * C3543 +
                       C84574 * C3717 + C13625 * C3545 + C84590 * C3718) *
                          C84304 +
                      (C13629 * C8102 + C84550 * C8103 + C13627 * C3444 +
                       C84574 * C3450 + C13625 * C3445 + C84590 * C3451) *
                          C39030 +
                      (C13629 * C1242 + C84550 * C1346 + C13627 * C1243 +
                       C84574 * C1347 + C13625 * C1244 + C84590 * C1348) *
                          C38937 +
                      (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 +
                       C84574 * C1186 + C13625 * C1182 + C84590 * C1187) *
                          C39029) *
                         C84344 +
                     ((C13629 * C782 + C84550 * C886 + C13627 * C783 +
                       C84574 * C887 + C13625 * C784 + C84590 * C888) *
                          C84304 +
                      (C13629 * C720 + C84550 * C725 + C13627 * C721 +
                       C84574 * C726 + C13625 * C722 + C84590 * C727) *
                          C39030 +
                      (C13629 * C176 + C84550 * C333 + C13627 * C175 +
                       C84574 * C332 + C13625 * C174 + C84590 * C331) *
                          C38937 +
                      (C13629 * C105 + C84550 * C111 + C13627 * C104 +
                       C84574 * C110 + C13625 * C103 + C84590 * C109) *
                          C39029) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C39029 +
                      (C15867 * C173 + C84188 * C330) * C38937 +
                      C16500 * C39030 + C16501 * C84304) *
                         C84607 +
                     (C19118 * C39029 + C19119 * C38937 + C18277 * C39030 +
                      C18278 * C84304) *
                         C84601 +
                     (C19120 * C39029 + C19121 * C38937 + C18281 * C39030 +
                      C18282 * C84304) *
                         C84589 +
                     (C31913 * C39029 + C31914 * C38937 + C37847 * C39030 +
                      C37848 * C84304) *
                         C84543) *
                        C84603 * C84604 * C90 -
                    (((C15867 * C34250 + C84188 * C34462) * C84304 +
                      (C15867 * C34135 + C84188 * C34136) * C39030 +
                      (C15867 * C5953 + C84188 * C6137) * C38937 +
                      (C15867 * C5837 + C84188 * C5840) * C39029) *
                         C84543 +
                     ((C15867 * C5200 + C84188 * C5360) * C84304 +
                      (C15867 * C5114 + C84188 * C5117) * C39030 +
                      (C15867 * C4308 + C84188 * C4535) * C38937 +
                      (C15867 * C4213 + C84188 * C4217) * C39029) *
                         C84589 +
                     ((C15867 * C3545 + C84188 * C3718) * C84304 +
                      (C15867 * C3445 + C84188 * C3451) * C39030 +
                      (C15867 * C1244 + C84188 * C1348) * C38937 +
                      (C15867 * C1182 + C84188 * C1187) * C39029) *
                         C84601 +
                     ((C15867 * C784 + C84188 * C888) * C84304 +
                      (C15867 * C722 + C84188 * C727) * C39030 +
                      (C15867 * C174 + C84188 * C331) * C38937 +
                      (C15867 * C103 + C84188 * C109) * C39029) *
                         C84607) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[21] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C84188 * C53740 +
                     (C41271 * C1183 + C42641 + C42641 + C84606 * C1396 +
                      C41272 * C3446 + C42640 + C42640 + C84599 * C3799 +
                      C41273 * C3443 + C42639 + C42639 + C84586 * C3798 +
                      C41274 * C16807 + C42638 + C42638 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C84604 * C90 -
                    ((C41274 * C21056 + C42634 + C42634 + C84536 * C21336 +
                      C41273 * C3442 + C42635 + C42635 + C84586 * C3796 +
                      C41272 * C3445 + C42636 + C42636 + C84599 * C3797 +
                      C41271 * C1182 + C42637 + C42637 + C84606 * C1395) *
                         C84188 * C84344 +
                     (C41307 + C41306 + C41305 + C41304) * C84188 * C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84590 +
                      (C39302 + C39303) * C84574 + (C39304 + C39305) * C84550) *
                         C53740 +
                     ((C45434 + C45435) * C84590 + (C43472 + C43473) * C84574 +
                      (C48647 + C48648) * C84550) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C39266 * C8102 + C40616 + C40616 + C84304 * C8382 +
                       C39265 * C1180 + C40617 + C40617 + C38937 * C1393) *
                          C84550 +
                      (C48648 + C48647) * C84574 + (C43473 + C43472) * C84590) *
                         C84344 +
                     ((C39307 + C39306) * C84550 + (C39305 + C39304) * C84574 +
                      (C39303 + C39302) * C84590) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C84188 * C84607 +
                     (C45434 + C45435) * C84188 * C84601 +
                     (C45436 + C45437) * C84188 * C84589 +
                     (C39265 * C5838 + C45425 + C45425 + C38937 * C6251 +
                      C39266 * C18815 + C45424 + C45424 + C84304 * C19200) *
                         C84188 * C84543) *
                        C84603 * C84604 * C90 -
                    ((C39266 * C34135 + C45422 + C45422 + C84304 * C34573 +
                      C39265 * C5837 + C45423 + C45423 + C38937 * C6250) *
                         C84188 * C84543 +
                     (C43475 + C43474) * C84188 * C84589 +
                     (C43473 + C43472) * C84188 * C84601 +
                     (C39303 + C39302) * C84188 * C84607) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C41045 +
           (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
               C84606 +
           (C56957 + C56958) * C41046 + (C57270 + C57271) * C84599 +
           (C56961 + C56962) * C41047 + (C57272 + C57273) * C84586 +
           (C53878 * C2599 + C53740 * C2795 + C53879 * C16807 +
            C84344 * C16906) *
               C41048 +
           (C53878 * C2715 + C53740 * C3098 + C53879 * C16860 +
            C84344 * C17045) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C53879 * C21133 + C84344 * C21411 + C53878 * C2714 +
            C53740 * C3097) *
               C84536 +
           (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
            C53740 * C2794) *
               C41048 +
           (C56317 + C56316) * C84586 + (C55994 + C55993) * C41047 +
           (C56315 + C56314) * C84599 + (C55990 + C55989) * C41046 +
           (C54128 + C54127) * C84606 + (C53906 + C53905) * C41045) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C39029 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C38937 +
            (C56957 + C56958) * C39030 + (C57270 + C57271) * C84304) *
               C84590 +
           ((C53905 + C53906) * C39029 + (C54127 + C54128) * C38937 +
            (C55989 + C55990) * C39030 + (C56314 + C56315) * C84304) *
               C84574 +
           ((C53909 + C53910) * C39029 + (C54129 + C54130) * C38937 +
            (C60720 + C60721) * C39030 + (C61022 + C61023) * C84304) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C53879 * C8179 + C84344 * C8457 + C53878 * C782 + C53740 * C985) *
                C84304 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C39030 +
            (C54132 + C54131) * C38937 + (C53914 + C53913) * C39029) *
               C84550 +
           ((C61023 + C61022) * C84304 + (C60721 + C60720) * C39030 +
            (C54130 + C54129) * C38937 + (C53910 + C53909) * C39029) *
               C84574 +
           ((C56315 + C56314) * C84304 + (C55990 + C55989) * C39030 +
            (C54128 + C54127) * C38937 + (C53906 + C53905) * C39029) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
            C58687 * C4212 + C84589 * C4416 + C58688 * C5838 + C84543 * C6058) *
               C39029 +
           (C58685 * C173 + C84607 * C453 + C58686 * C1245 + C84601 * C1448 +
            C58687 * C4307 + C84589 * C4714 + C58688 * C5954 + C84543 * C6347) *
               C38937 +
           (C58685 * C723 + C84607 * C837 + C58686 * C3446 + C84601 * C3633 +
            C58687 * C5115 + C84589 * C5281 + C58688 * C18815 +
            C84543 * C19022) *
               C39030 +
           (C58685 * C785 + C84607 * C988 + C58686 * C3547 + C84601 * C3888 +
            C58687 * C5201 + C84589 * C5521 + C58688 * C18908 +
            C84543 * C19309) *
               C84304) *
              C84188 * C84603 * C84604 * C90 -
          ((C58688 * C34250 + C84543 * C34686 + C58687 * C5200 +
            C84589 * C5520 + C58686 * C3545 + C84601 * C3886 + C58685 * C784 +
            C84607 * C987) *
               C84304 +
           (C58688 * C34135 + C84543 * C34362 + C58687 * C5114 +
            C84589 * C5280 + C58686 * C3445 + C84601 * C3632 + C58685 * C722 +
            C84607 * C836) *
               C39030 +
           (C58923 + C58922 + C58921 + C58920) * C38937 +
           (C58709 + C58708 + C58707 + C58706) * C39029) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C53878 +
                      (C15867 * C252 + C84188 * C521) * C53740 +
                      C19118 * C53879 + C19391 * C84344) *
                         C84606 +
                     (C16500 * C53878 + C16660 * C53740 + C18277 * C53879 +
                      C18550 * C84344) *
                         C84599 +
                     (C16502 * C53878 + C16661 * C53740 + C18279 * C53879 +
                      C18552 * C84344) *
                         C84586 +
                     (C16504 * C53878 + C16662 * C53740 + C25352 * C53879 +
                      C25575 * C84344) *
                         C84536) *
                        C84603 * C84604 * C90 -
                    (((C15867 * C21201 + C84188 * C21478) * C84344 +
                      (C15867 * C21056 + C84188 * C21057) * C53879 +
                      (C15867 * C2794 + C84188 * C3180) * C53740 +
                      (C15867 * C2598 + C84188 * C2601) * C53878) *
                         C84536 +
                     ((C15867 * C3629 + C84188 * C3964) * C84344 +
                      (C15867 * C3442 + C84188 * C3448) * C53879 +
                      (C15867 * C1907 + C84188 * C2316) * C53740 +
                      (C15867 * C1682 + C84188 * C1686) * C53878) *
                         C84586 +
                     ((C15867 * C3632 + C84188 * C3967) * C84344 +
                      (C15867 * C3445 + C84188 * C3451) * C53879 +
                      (C15867 * C836 + C84188 * C1034) * C53740 +
                      (C15867 * C722 + C84188 * C727) * C53878) *
                         C84599 +
                     ((C15867 * C1296 + C84188 * C1494) * C84344 +
                      (C15867 * C1182 + C84188 * C1187) * C53879 +
                      (C15867 * C253 + C84188 * C522) * C53740 +
                      (C15867 * C103 + C84188 * C109) * C53878) *
                         C84606) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C53878 +
                      (C13625 * C252 + C84590 * C521 + C13627 * C253 +
                       C84574 * C522 + C13629 * C254 + C84550 * C523) *
                          C53740 +
                      (C28220 + C28221 + C28222) * C53879 +
                      (C28472 + C28473 + C28474) * C84344) *
                         C38937 +
                     ((C14726 + C14727 + C14728) * C53878 +
                      (C14981 + C14982 + C14983) * C53740 +
                      (C13625 * C3446 + C84590 * C3452 + C13627 * C3445 +
                       C84574 * C3451 + C13629 * C3444 + C84550 * C3450) *
                          C53879 +
                      (C13625 * C3633 + C84590 * C3968 + C13627 * C3632 +
                       C84574 * C3967 + C13629 * C3631 + C84550 * C3966) *
                          C84344) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C13629 * C8247 + C84550 * C8524 + C13627 * C3631 +
                       C84574 * C3966 + C13625 * C3632 + C84590 * C3967) *
                          C84344 +
                      (C13629 * C8102 + C84550 * C8103 + C13627 * C3444 +
                       C84574 * C3450 + C13625 * C3445 + C84590 * C3451) *
                          C53879 +
                      (C13629 * C834 + C84550 * C1032 + C13627 * C835 +
                       C84574 * C1033 + C13625 * C836 + C84590 * C1034) *
                          C53740 +
                      (C13629 * C720 + C84550 * C725 + C13627 * C721 +
                       C84574 * C726 + C13625 * C722 + C84590 * C727) *
                          C53878) *
                         C84304 +
                     ((C13629 * C1294 + C84550 * C1492 + C13627 * C1295 +
                       C84574 * C1493 + C13625 * C1296 + C84590 * C1494) *
                          C84344 +
                      (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 +
                       C84574 * C1186 + C13625 * C1182 + C84590 * C1187) *
                          C53879 +
                      (C13629 * C255 + C84550 * C524 + C13627 * C254 +
                       C84574 * C523 + C13625 * C253 + C84590 * C522) *
                          C53740 +
                      (C13629 * C105 + C84550 * C111 + C13627 * C104 +
                       C84574 * C110 + C13625 * C103 + C84590 * C109) *
                          C53878) *
                         C38937) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C58685 +
                      (C15867 * C252 + C84188 * C521) * C84607 +
                      C19118 * C58686 + C19391 * C84601 + C19120 * C58687 +
                      C19392 * C84589 + C31913 * C58688 + C32069 * C84543) *
                         C38937 +
                     (C16500 * C58685 + C16660 * C84607 + C18277 * C58686 +
                      C18550 * C84601 + C18281 * C58687 + C18551 * C84589 +
                      C37847 * C58688 + C38070 * C84543) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C15867 * C34362 + C84188 * C34785) * C84543 +
                      (C15867 * C34135 + C84188 * C34136) * C58688 +
                      (C15867 * C5280 + C84188 * C5597) * C84589 +
                      (C15867 * C5114 + C84188 * C5117) * C58687 +
                      (C15867 * C3632 + C84188 * C3967) * C84601 +
                      (C15867 * C3445 + C84188 * C3451) * C58686 +
                      (C15867 * C836 + C84188 * C1034) * C84607 +
                      (C15867 * C722 + C84188 * C727) * C58685) *
                         C84304 +
                     ((C15867 * C6057 + C84188 * C6423) * C84543 +
                      (C15867 * C5837 + C84188 * C5840) * C58688 +
                      (C15867 * C4417 + C84188 * C4811) * C84589 +
                      (C15867 * C4213 + C84188 * C4217) * C58687 +
                      (C15867 * C1296 + C84188 * C1494) * C84601 +
                      (C15867 * C1182 + C84188 * C1187) * C58686 +
                      (C15867 * C253 + C84188 * C522) * C84607 +
                      (C15867 * C103 + C84188 * C109) * C58685) *
                         C38937) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C53878 +
           (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
            C41047 * C1906 + C84586 * C2393 + C41048 * C2795 + C84536 * C3276) *
               C53740 +
           (C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
            C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
            C84536 * C16860) *
               C53879 +
           (C41045 * C1297 + C84606 * C1542 + C41046 * C3633 + C84599 * C4048 +
            C41047 * C3630 + C84586 * C4047 + C41048 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C84604 * C90 -
          ((C41048 * C21201 + C84536 * C21545 + C41047 * C3629 +
            C84586 * C4045 + C41046 * C3632 + C84599 * C4046 + C41045 * C1296 +
            C84606 * C1541) *
               C84344 +
           (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
            C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
            C84606 * C1244) *
               C53879 +
           (C41525 + C41524 + C41523 + C41522) * C53740 +
           (C41069 + C41068 + C41067 + C41066) * C53878) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C53878 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C53740 +
            (C45088 + C45089) * C53879 + (C45752 + C45753) * C84344) *
               C84590 +
           ((C39056 + C39057) * C53878 + (C39530 + C39531) * C53740 +
            (C43130 + C43131) * C53879 + (C43787 + C43788) * C84344) *
               C84574 +
           ((C39060 + C39061) * C53878 + (C39532 + C39533) * C53740 +
            (C48341 + C48342) * C53879 + (C48947 + C48948) * C84344) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C39030 * C8247 + C84304 * C8591 + C39029 * C1294 +
             C38937 * C1539) *
                C84344 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C53879 +
            (C39535 + C39534) * C53740 + (C39065 + C39064) * C53878) *
               C84550 +
           ((C48948 + C48947) * C84344 + (C48342 + C48341) * C53879 +
            (C39533 + C39532) * C53740 + (C39061 + C39060) * C53878) *
               C84574 +
           ((C43788 + C43787) * C84344 + (C43131 + C43130) * C53879 +
            (C39531 + C39530) * C53740 + (C39057 + C39056) * C53878) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C58685 +
           (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
               C84607 +
           (C45088 + C45089) * C58686 + (C45752 + C45753) * C84601 +
           (C45092 + C45093) * C58687 + (C45754 + C45755) * C84589 +
           (C39029 * C5838 + C38937 * C5954 + C39030 * C18815 +
            C84304 * C18908) *
               C58688 +
           (C39029 * C6058 + C38937 * C6519 + C39030 * C19022 +
            C84304 * C19467) *
               C84543) *
              C84188 * C84603 * C84604 * C90 -
          ((C39030 * C34362 + C84304 * C34890 + C39029 * C6057 +
            C38937 * C6518) *
               C84543 +
           (C39030 * C34135 + C84304 * C34250 + C39029 * C5837 +
            C38937 * C5953) *
               C58688 +
           (C43790 + C43789) * C84589 + (C43135 + C43134) * C58687 +
           (C43788 + C43787) * C84601 + (C43131 + C43130) * C58686 +
           (C39531 + C39530) * C84607 + (C39057 + C39056) * C58685) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
            C54346 + C54346 + C84344 * C1589) *
               C84606 +
           (C57588 + C57589) * C84599 + (C57590 + C57591) * C84586 +
           (C54342 * C2599 + C57579 + C57579 + C53740 * C3353 +
            C54343 * C16807 + C57578 + C57578 + C84344 * C17177) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C54343 * C21056 + C57576 + C57576 + C84344 * C21612 +
            C54342 * C2598 + C57577 + C57577 + C53740 * C3352) *
               C84536 +
           (C56646 + C56645) * C84586 + (C56644 + C56643) * C84599 +
           (C54380 + C54379) * C84606) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C38937 +
            (C57588 + C57589) * C84304) *
               C84590 +
           ((C54379 + C54380) * C38937 + (C56643 + C56644) * C84304) * C84574 +
           ((C54381 + C54382) * C38937 + (C61326 + C61327) * C84304) * C84550) *
              C84603 * C84604 * C90 -
          (((C54343 * C8102 + C54979 + C54979 + C84344 * C8658 + C54342 * C720 +
             C54980 + C54980 + C53740 * C1126) *
                C84304 +
            (C54384 + C54383) * C38937) *
               C84550 +
           ((C61327 + C61326) * C84304 + (C54382 + C54381) * C38937) * C84574 +
           ((C56644 + C56643) * C84304 + (C54380 + C54379) * C38937) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C59129 * C102 + C59134 + C59134 + C84607 * C638 + C59130 * C1183 +
            C59135 + C59135 + C84601 * C1589 + C59131 * C4212 + C59136 +
            C59136 + C84589 * C4993 + C59132 * C5838 + C59137 + C59137 +
            C84543 * C6602) *
               C38937 +
           (C59129 * C723 + C59767 + C59767 + C84607 * C1129 + C59130 * C3446 +
            C59766 + C59766 + C84601 * C4128 + C59131 * C5115 + C59765 +
            C59765 + C84589 * C5752 + C59132 * C18815 + C59764 + C59764 +
            C84543 * C19561) *
               C84304) *
              C84188 * C84603 * C84604 * C90 -
          ((C59132 * C34135 + C59760 + C59760 + C84543 * C34995 +
            C59131 * C5114 + C59761 + C59761 + C84589 * C5751 + C59130 * C3445 +
            C59762 + C59762 + C84601 * C4126 + C59129 * C722 + C59763 + C59763 +
            C84607 * C1128) *
               C84304 +
           (C59165 + C59164 + C59163 + C59162) * C38937) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C53740 +
            C18832 * C84344) *
               C84606 +
           (C71386 + C71387) * C84599 + (C71388 + C71389) * C84586 +
           (C71390 + C71391) * C84536) *
              C84603 * C716 -
          (((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84344 +
            C16328 * C53740) *
               C84536 +
           (C71391 + C71390) * C84586 + (C71389 + C71388) * C84599 +
           (C71387 + C71386) * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
             C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
             C84550 * C116) *
                C53740 +
            (C27956 + C27957 + C27958) * C84344) *
               C38937 +
           ((C14462 + C14463 + C14464) * C53740 +
            (C69030 + C69031 + C69032) * C84344) *
               C84304) *
              C84603 * C716 -
          (((C13628 * C3441 + C15209 + C15209 + C84550 * C3453 +
             C13626 * C3442 + C15210 + C15210 + C84574 * C3454 +
             C13624 * C3443 + C15211 + C15211 + C84590 * C3455) *
                C84344 +
            (C14467 + C14466 + C14465) * C53740) *
               C84304 +
           ((C69032 + C69031 + C69030) * C84344 +
            (C14464 + C14463 + C14462) * C53740) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84607 +
            C18832 * C84601 + C18833 * C84589 + C31748 * C84543) *
               C38937 +
           (C73290 + C73291 + C73292 + C73293) * C84304) *
              C84603 * C716 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C84543 +
            C17993 * C84589 + C17992 * C84601 + C16326 * C84607) *
               C84304 +
           (C73293 + C73292 + C73291 + C73290) * C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
             C41047 * C1685 + C84586 * C1792 + C41048 * C2602 +
             C84536 * C2718) *
                C84188) *
               C53740 +
           ((C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
             C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C41045 * C1188 + C84606 * C1250 + C41046 * C3452 + C84599 * C3553 +
             C41047 * C3449 + C84586 * C3552 + C41048 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C716 -
          (((C41048 * C16808 + C84536 * C16861 + C41047 * C16809 +
             C84586 * C16862 + C41046 * C3449 + C84599 * C3552 +
             C41045 * C3452 + C84606 * C3553) *
                C84188 +
            (C41048 * C16806 + C84536 * C16859 + C41047 * C16807 +
             C84586 * C16860 + C41046 * C3443 + C84599 * C3546 +
             C41045 * C3446 + C84606 * C3547) *
                C15867) *
               C84344 +
           ((C41048 * C15870 + C84536 * C15933 + C41047 * C2602 +
             C84586 * C2718 + C41046 * C1685 + C84599 * C1792 + C41045 * C728 +
             C84606 * C790) *
                C84188 +
            (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
             C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
             C84606 * C785) *
                C15867) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C13625 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84590 +
            (C39056 + C39057) * C13627 + (C39058 + C39059) * C84574 +
            (C39060 + C39061) * C13629 + (C39062 + C39063) * C84550) *
               C53740 +
           ((C45088 + C45089) * C13625 + (C45090 + C45091) * C84590 +
            (C43130 + C43131) * C13627 + (C43132 + C43133) * C84574 +
            (C48341 + C48342) * C13629 + (C48343 + C48344) * C84550) *
               C84344) *
              C84603 * C716 -
          (((C39030 * C3447 + C84304 * C3548 + C39029 * C3450 +
             C38937 * C3549) *
                C84550 +
            (C39030 * C3441 + C84304 * C3542 + C39029 * C3444 +
             C38937 * C3543) *
                C13629 +
            (C39030 * C3448 + C84304 * C3550 + C39029 * C3451 +
             C38937 * C3551) *
                C84574 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C13627 +
            (C39030 * C3449 + C84304 * C3552 + C39029 * C3452 +
             C38937 * C3553) *
                C84590 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C13625) *
               C84344 +
           ((C39030 * C1687 + C84304 * C1794 + C39029 * C726 + C38937 * C788) *
                C84550 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C13629 +
            (C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
                C84574 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C13627 +
            (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
                C84590 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C13625) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C15867 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84188) *
               C84607 +
           ((C45088 + C45089) * C15867 + (C45090 + C45091) * C84188) * C84601 +
           ((C45092 + C45093) * C15867 + (C45094 + C45095) * C84188) * C84589 +
           ((C39029 * C5838 + C38937 * C5954 + C39030 * C18815 +
             C84304 * C18908) *
                C15867 +
            (C39029 * C5841 + C38937 * C5957 + C39030 * C18817 +
             C84304 * C18910) *
                C84188) *
               C84543) *
              C84603 * C716 -
          (((C39030 * C18816 + C84304 * C18909 + C39029 * C18817 +
             C38937 * C18910) *
                C84188 +
            (C39030 * C18814 + C84304 * C18907 + C39029 * C18815 +
             C38937 * C18908) *
                C15867) *
               C84543 +
           ((C39030 * C17256 + C84304 * C17345 + C39029 * C5118 +
             C38937 * C5204) *
                C84188 +
            (C39030 * C17254 + C84304 * C17343 + C39029 * C5115 +
             C38937 * C5201) *
                C15867) *
               C84589 +
           ((C39030 * C3449 + C84304 * C3552 + C39029 * C3452 +
             C38937 * C3553) *
                C84188 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C15867) *
               C84601 +
           ((C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
                C84188 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C15867) *
               C84607) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C15867 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84188) *
               C84606 +
           ((C56957 + C56958) * C15867 + (C56959 + C56960) * C84188) * C84599 +
           ((C56961 + C56962) * C15867 + (C56963 + C56964) * C84188) * C84586 +
           ((C71532 + C71533) * C15867 + (C71534 + C71535) * C84188) * C84536) *
              C84603 * C716 -
          (((C53879 * C16808 + C84344 * C16907 + C53878 * C15870 +
             C53740 * C15979) *
                C84188 +
            (C53879 * C16806 + C84344 * C16905 + C53878 * C15868 +
             C53740 * C15977) *
                C15867) *
               C84536 +
           ((C71535 + C71534) * C84188 + (C71533 + C71532) * C15867) * C84586 +
           ((C56964 + C56963) * C84188 + (C56962 + C56961) * C15867) * C84599 +
           ((C56960 + C56959) * C84188 + (C56958 + C56957) * C15867) * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C13625 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84590 +
            (C53905 + C53906) * C13627 + (C53907 + C53908) * C84574 +
            (C53909 + C53910) * C13629 + (C53911 + C53912) * C84550) *
               C38937 +
           ((C56957 + C56958) * C13625 + (C56959 + C56960) * C84590 +
            (C55989 + C55990) * C13627 + (C55991 + C55992) * C84574 +
            (C60720 + C60721) * C13629 + (C60722 + C60723) * C84550) *
               C84304) *
              C84603 * C716 -
          (((C53879 * C3447 + C84344 * C3634 + C53878 * C1687 +
             C53740 * C1912) *
                C84550 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C13629 +
            (C55996 + C55995) * C84574 + (C55994 + C55993) * C13627 +
            (C56964 + C56963) * C84590 + (C56962 + C56961) * C13625) *
               C84304 +
           ((C60723 + C60722) * C84550 + (C60721 + C60720) * C13629 +
            (C55992 + C55991) * C84574 + (C55990 + C55989) * C13627 +
            (C56960 + C56959) * C84590 + (C56958 + C56957) * C13625) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
             C58687 * C4212 + C84589 * C4416 + C58688 * C5838 +
             C84543 * C6058) *
                C15867 +
            (C58685 * C108 + C84607 * C258 + C58686 * C1188 + C84601 * C1302 +
             C58687 * C4216 + C84589 * C4420 + C58688 * C5841 +
             C84543 * C6061) *
                C84188) *
               C38937 +
           ((C73442 + C73443 + C73444 + C73445) * C15867 +
            (C73446 + C73447 + C73448 + C73449) * C84188) *
               C84304) *
              C84603 * C716 -
          (((C58688 * C18816 + C84543 * C19023 + C58687 * C17256 +
             C84589 * C17423 + C58686 * C3449 + C84601 * C3636 +
             C58685 * C1685 + C84607 * C1910) *
                C84188 +
            (C58688 * C18814 + C84543 * C19021 + C58687 * C17254 +
             C84589 * C17421 + C58686 * C3443 + C84601 * C3630 +
             C58685 * C1681 + C84607 * C1906) *
                C15867) *
               C84304 +
           ((C73449 + C73448 + C73447 + C73446) * C84188 +
            (C73445 + C73444 + C73443 + C73442) * C15867) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C41045 +
                      (C15867 * C173 + C84188 * C330) * C84606 +
                      C16500 * C41046 + C16501 * C84599 + C16502 * C41047 +
                      C16503 * C84586 + C16504 * C41048 + C16505 * C84536) *
                         C53740 +
                     (C19118 * C41045 + C19119 * C84606 + C18277 * C41046 +
                      C18278 * C84599 + C18279 * C41047 + C18280 * C84586 +
                      C25352 * C41048 + C25353 * C84536) *
                         C84344) *
                        C84603 * C716 -
                    (((C15867 * C16859 + C84188 * C16951) * C84536 +
                      (C15867 * C16806 + C84188 * C16808) * C41048 +
                      C25353 * C84586 + C25352 * C41047 + C18280 * C84599 +
                      C18279 * C41046 + C18278 * C84606 + C18277 * C41045) *
                         C84344 +
                     (C16507 * C84536 + C16506 * C41048 + C16505 * C84586 +
                      C16504 * C41047 + C16503 * C84599 + C16502 * C41046 +
                      C16501 * C84606 + C16500 * C41045) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C39029 +
                      (C13625 * C173 + C84590 * C330 + C13627 * C174 +
                       C84574 * C331 + C13629 * C175 + C84550 * C332) *
                          C38937 +
                      (C14726 + C14727 + C14728) * C39030 +
                      (C14729 + C14730 + C14731) * C84304) *
                         C53740 +
                     ((C28220 + C28221 + C28222) * C39029 +
                      (C28223 + C28224 + C28225) * C38937 +
                      (C69339 + C69340 + C69341) * C39030 +
                      (C69342 + C69343 + C69344) * C84304) *
                         C84344) *
                        C84603 * C716 -
                    (((C13629 * C3542 + C84550 * C3714 + C13627 * C3544 +
                       C84574 * C3715 + C13625 * C3546 + C84590 * C3716) *
                          C84304 +
                      (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 +
                       C84574 * C3448 + C13625 * C3443 + C84590 * C3449) *
                          C39030 +
                      (C69344 + C69343 + C69342) * C38937 +
                      (C69341 + C69340 + C69339) * C39029) *
                         C84344 +
                     ((C14737 + C14736 + C14735) * C84304 +
                      (C14734 + C14733 + C14732) * C39030 +
                      (C14731 + C14730 + C14729) * C38937 +
                      (C14728 + C14727 + C14726) * C39029) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C39029 +
                      (C15867 * C173 + C84188 * C330) * C38937 +
                      C16500 * C39030 + C16501 * C84304) *
                         C84607 +
                     (C19118 * C39029 + C19119 * C38937 + C18277 * C39030 +
                      C18278 * C84304) *
                         C84601 +
                     (C19120 * C39029 + C19121 * C38937 + C18281 * C39030 +
                      C18282 * C84304) *
                         C84589 +
                     (C31913 * C39029 + C31914 * C38937 + C37847 * C39030 +
                      C37848 * C84304) *
                         C84543) *
                        C84603 * C716 -
                    (((C15867 * C18907 + C84188 * C19099) * C84304 +
                      (C15867 * C18814 + C84188 * C18816) * C39030 +
                      C37848 * C38937 + C37847 * C39029) *
                         C84543 +
                     (C18284 * C84304 + C18283 * C39030 + C18282 * C38937 +
                      C18281 * C39029) *
                         C84589 +
                     (C18280 * C84304 + C18279 * C39030 + C18278 * C38937 +
                      C18277 * C39029) *
                         C84601 +
                     (C16503 * C84304 + C16502 * C39030 + C16501 * C38937 +
                      C16500 * C39029) *
                         C84607) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C84188 * C53740 +
                     (C41271 * C1183 + C42641 + C42641 + C84606 * C1396 +
                      C41272 * C3446 + C42640 + C42640 + C84599 * C3799 +
                      C41273 * C3443 + C42639 + C42639 + C84586 * C3798 +
                      C41274 * C16807 + C42638 + C42638 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C716 -
                    ((C41274 * C16806 + C71668 + C71668 + C84536 * C16995 +
                      C41273 * C16807 + C71669 + C71669 + C84586 * C16996 +
                      C41272 * C3443 + C71670 + C71670 + C84599 * C3798 +
                      C41271 * C3446 + C71671 + C71671 + C84606 * C3799) *
                         C84188 * C84344 +
                     (C41274 * C15868 + C42010 + C42010 + C84536 * C16072 +
                      C41273 * C2599 + C42011 + C42011 + C84586 * C3012 +
                      C41272 * C1681 + C42012 + C42012 + C84599 * C2093 +
                      C41271 * C723 + C42013 + C42013 + C84606 * C936) *
                         C84188 * C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84590 +
                      (C39302 + C39303) * C84574 + (C39304 + C39305) * C84550) *
                         C53740 +
                     ((C45434 + C45435) * C84590 + (C43472 + C43473) * C84574 +
                      (C48647 + C48648) * C84550) *
                         C84344) *
                        C84603 * C716 -
                    (((C39266 * C3441 + C49570 + C49570 + C84304 * C3794 +
                       C39265 * C3444 + C49571 + C49571 + C38937 * C3795) *
                          C84550 +
                      (C39266 * C3442 + C44444 + C44444 + C84304 * C3796 +
                       C39265 * C3445 + C44445 + C44445 + C38937 * C3797) *
                          C84574 +
                      (C39266 * C3443 + C44446 + C44446 + C84304 * C3798 +
                       C39265 * C3446 + C44447 + C44447 + C38937 * C3799) *
                          C84590) *
                         C84344 +
                     ((C39266 * C1683 + C39996 + C39996 + C84304 * C2095 +
                       C39265 * C721 + C39997 + C39997 + C38937 * C934) *
                          C84550 +
                      (C39266 * C1682 + C39998 + C39998 + C84304 * C2094 +
                       C39265 * C722 + C39999 + C39999 + C38937 * C935) *
                          C84574 +
                      (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                       C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                          C84590) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C84188 * C84607 +
                     (C45434 + C45435) * C84188 * C84601 +
                     (C45436 + C45437) * C84188 * C84589 +
                     (C39265 * C5838 + C45425 + C45425 + C38937 * C6251 +
                      C39266 * C18815 + C45424 + C45424 + C84304 * C19200) *
                         C84188 * C84543) *
                        C84603 * C716 -
                    ((C39266 * C18814 + C73582 + C73582 + C84304 * C19199 +
                      C39265 * C18815 + C73583 + C73583 + C38937 * C19200) *
                         C84188 * C84543 +
                     (C39266 * C17254 + C44442 + C44442 + C84304 * C17575 +
                      C39265 * C5115 + C44443 + C44443 + C38937 * C5438) *
                         C84188 * C84589 +
                     (C39266 * C3443 + C44446 + C44446 + C84304 * C3798 +
                      C39265 * C3446 + C44447 + C44447 + C38937 * C3799) *
                         C84188 * C84601 +
                     (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                      C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                         C84188 * C84607) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C41045 +
           (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
               C84606 +
           (C56957 + C56958) * C41046 + (C57270 + C57271) * C84599 +
           (C56961 + C56962) * C41047 + (C57272 + C57273) * C84586 +
           (C71532 + C71533) * C41048 + (C71742 + C71743) * C84536) *
              C84188 * C84603 * C716 -
          ((C53879 * C16859 + C84344 * C17044 + C53878 * C15931 +
            C53740 * C16126) *
               C84536 +
           (C53879 * C16806 + C84344 * C16905 + C53878 * C15868 +
            C53740 * C15977) *
               C41048 +
           (C71743 + C71742) * C84586 + (C71533 + C71532) * C41047 +
           (C57273 + C57272) * C84599 + (C56962 + C56961) * C41046 +
           (C57271 + C57270) * C84606 + (C56958 + C56957) * C41045) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C39029 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C38937 +
            (C56957 + C56958) * C39030 + (C57270 + C57271) * C84304) *
               C84590 +
           ((C53905 + C53906) * C39029 + (C54127 + C54128) * C38937 +
            (C55989 + C55990) * C39030 + (C56314 + C56315) * C84304) *
               C84574 +
           ((C53909 + C53910) * C39029 + (C54129 + C54130) * C38937 +
            (C60720 + C60721) * C39030 + (C61022 + C61023) * C84304) *
               C84550) *
              C84603 * C716 -
          (((C53879 * C3542 + C84344 * C3883 + C53878 * C1790 +
             C53740 * C2215) *
                C84304 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C39030 +
            (C61023 + C61022) * C38937 + (C60721 + C60720) * C39029) *
               C84550 +
           ((C56317 + C56316) * C84304 + (C55994 + C55993) * C39030 +
            (C56315 + C56314) * C38937 + (C55990 + C55989) * C39029) *
               C84574 +
           ((C57273 + C57272) * C84304 + (C56962 + C56961) * C39030 +
            (C57271 + C57270) * C38937 + (C56958 + C56957) * C39029) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
            C58687 * C4212 + C84589 * C4416 + C58688 * C5838 + C84543 * C6058) *
               C39029 +
           (C58685 * C173 + C84607 * C453 + C58686 * C1245 + C84601 * C1448 +
            C58687 * C4307 + C84589 * C4714 + C58688 * C5954 + C84543 * C6347) *
               C38937 +
           (C73442 + C73443 + C73444 + C73445) * C39030 +
           (C73658 + C73659 + C73660 + C73661) * C84304) *
              C84188 * C84603 * C716 -
          ((C58688 * C18907 + C84543 * C19308 + C58687 * C17343 +
            C84589 * C17657 + C58686 * C3546 + C84601 * C3887 + C58685 * C1788 +
            C84607 * C2213) *
               C84304 +
           (C58688 * C18814 + C84543 * C19021 + C58687 * C17254 +
            C84589 * C17421 + C58686 * C3443 + C84601 * C3630 + C58685 * C1681 +
            C84607 * C1906) *
               C39030 +
           (C73661 + C73660 + C73659 + C73658) * C38937 +
           (C73445 + C73444 + C73443 + C73442) * C39029) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C53878 +
                      (C15867 * C252 + C84188 * C521) * C53740 +
                      C19118 * C53879 + C19391 * C84344) *
                         C84606 +
                     (C71810 + C71811 + C71812 + C71813) * C84599 +
                     (C71814 + C71815 + C71816 + C71817) * C84586 +
                     (C71818 + C71819 + C71820 + C71821) * C84536) *
                        C84603 * C716 -
                    (((C15867 * C16905 + C84188 * C17088) * C84344 +
                      (C15867 * C16806 + C84188 * C16808) * C53879 +
                      C16663 * C53740 + C16506 * C53878) *
                         C84536 +
                     (C71821 + C71820 + C71819 + C71818) * C84586 +
                     (C71817 + C71816 + C71815 + C71814) * C84599 +
                     (C71813 + C71812 + C71811 + C71810) * C84606) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C53878 +
                      (C13625 * C252 + C84590 * C521 + C13627 * C253 +
                       C84574 * C522 + C13629 * C254 + C84550 * C523) *
                          C53740 +
                      (C28220 + C28221 + C28222) * C53879 +
                      (C28472 + C28473 + C28474) * C84344) *
                         C38937 +
                     ((C14726 + C14727 + C14728) * C53878 +
                      (C14981 + C14982 + C14983) * C53740 +
                      (C69339 + C69340 + C69341) * C53879 +
                      (C69645 + C69646 + C69647) * C84344) *
                         C84304) *
                        C84603 * C716 -
                    (((C13629 * C3628 + C84550 * C3963 + C13627 * C3629 +
                       C84574 * C3964 + C13625 * C3630 + C84590 * C3965) *
                          C84344 +
                      (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 +
                       C84574 * C3448 + C13625 * C3443 + C84590 * C3449) *
                          C53879 +
                      (C14986 + C14985 + C14984) * C53740 +
                      (C14734 + C14733 + C14732) * C53878) *
                         C84304 +
                     ((C69647 + C69646 + C69645) * C84344 +
                      (C69341 + C69340 + C69339) * C53879 +
                      (C14983 + C14982 + C14981) * C53740 +
                      (C14728 + C14727 + C14726) * C53878) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C58685 +
                      (C15867 * C252 + C84188 * C521) * C84607 +
                      C19118 * C58686 + C19391 * C84601 + C19120 * C58687 +
                      C19392 * C84589 + C31913 * C58688 + C32069 * C84543) *
                         C38937 +
                     (C73728 + C73729 + C73730 + C73731 + C73732 + C73733 +
                      C73734 + C73735) *
                         C84304) *
                        C84603 * C716 -
                    (((C15867 * C19021 + C84188 * C19384) * C84543 +
                      (C15867 * C18814 + C84188 * C18816) * C58688 +
                      C18553 * C84589 + C18283 * C58687 + C18552 * C84601 +
                      C18279 * C58686 + C16661 * C84607 + C16502 * C58685) *
                         C84304 +
                     (C73735 + C73734 + C73733 + C73732 + C73731 + C73730 +
                      C73729 + C73728) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C53878 +
           (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
            C41047 * C1906 + C84586 * C2393 + C41048 * C2795 + C84536 * C3276) *
               C53740 +
           (C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
            C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
            C84536 * C16860) *
               C53879 +
           (C41045 * C1297 + C84606 * C1542 + C41046 * C3633 + C84599 * C4048 +
            C41047 * C3630 + C84586 * C4047 + C41048 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C716 -
          ((C41048 * C16905 + C84536 * C17132 + C41047 * C16906 +
            C84586 * C17133 + C41046 * C3630 + C84599 * C4047 + C41045 * C3633 +
            C84606 * C4048) *
               C84344 +
           (C41048 * C16806 + C84536 * C16859 + C41047 * C16807 +
            C84586 * C16860 + C41046 * C3443 + C84599 * C3546 + C41045 * C3446 +
            C84606 * C3547) *
               C53879 +
           (C41048 * C15977 + C84536 * C16214 + C41047 * C2795 +
            C84586 * C3276 + C41046 * C1906 + C84599 * C2393 + C41045 * C837 +
            C84606 * C1082) *
               C53740 +
           (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
            C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
            C84606 * C785) *
               C53878) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C53878 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C53740 +
            (C45088 + C45089) * C53879 + (C45752 + C45753) * C84344) *
               C84590 +
           ((C39056 + C39057) * C53878 + (C39530 + C39531) * C53740 +
            (C43130 + C43131) * C53879 + (C43787 + C43788) * C84344) *
               C84574 +
           ((C39060 + C39061) * C53878 + (C39532 + C39533) * C53740 +
            (C48341 + C48342) * C53879 + (C48947 + C48948) * C84344) *
               C84550) *
              C84603 * C716 -
          (((C39030 * C3628 + C84304 * C4043 + C39029 * C3631 +
             C38937 * C4044) *
                C84344 +
            (C39030 * C3441 + C84304 * C3542 + C39029 * C3444 +
             C38937 * C3543) *
                C53879 +
            (C39030 * C1908 + C84304 * C2395 + C39029 * C835 + C38937 * C1080) *
                C53740 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C53878) *
               C84550 +
           ((C39030 * C3629 + C84304 * C4045 + C39029 * C3632 +
             C38937 * C4046) *
                C84344 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C53879 +
            (C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C53740 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C53878) *
               C84574 +
           ((C39030 * C3630 + C84304 * C4047 + C39029 * C3633 +
             C38937 * C4048) *
                C84344 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C53879 +
            (C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C53740 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C53878) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C58685 +
           (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
               C84607 +
           (C45088 + C45089) * C58686 + (C45752 + C45753) * C84601 +
           (C45092 + C45093) * C58687 + (C45754 + C45755) * C84589 +
           (C39029 * C5838 + C38937 * C5954 + C39030 * C18815 +
            C84304 * C18908) *
               C58688 +
           (C39029 * C6058 + C38937 * C6519 + C39030 * C19022 +
            C84304 * C19467) *
               C84543) *
              C84188 * C84603 * C716 -
          ((C39030 * C19021 + C84304 * C19466 + C39029 * C19022 +
            C38937 * C19467) *
               C84543 +
           (C39030 * C18814 + C84304 * C18907 + C39029 * C18815 +
            C38937 * C18908) *
               C58688 +
           (C39030 * C17421 + C84304 * C17809 + C39029 * C5281 +
            C38937 * C5675) *
               C84589 +
           (C39030 * C17254 + C84304 * C17343 + C39029 * C5115 +
            C38937 * C5201) *
               C58687 +
           (C39030 * C3630 + C84304 * C4047 + C39029 * C3633 + C38937 * C4048) *
               C84601 +
           (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 + C38937 * C3547) *
               C58686 +
           (C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
               C84607 +
           (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
               C58685) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
            C54346 + C54346 + C84344 * C1589) *
               C84606 +
           (C57588 + C57589) * C84599 + (C57590 + C57591) * C84586 +
           (C71964 + C71965) * C84536) *
              C84188 * C84603 * C716 -
          ((C54343 * C16806 + C71958 + C71958 + C84344 * C17176 +
            C54342 * C15868 + C71959 + C71959 + C53740 * C16258) *
               C84536 +
           (C71965 + C71964) * C84586 + (C57591 + C57590) * C84599 +
           (C57589 + C57588) * C84606) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C38937 +
            (C57588 + C57589) * C84304) *
               C84590 +
           ((C54379 + C54380) * C38937 + (C56643 + C56644) * C84304) * C84574 +
           ((C54381 + C54382) * C38937 + (C61326 + C61327) * C84304) * C84550) *
              C84603 * C716 -
          (((C54343 * C3441 + C56633 + C56633 + C84344 * C4123 +
             C54342 * C1683 + C56634 + C56634 + C53740 * C2491) *
                C84304 +
            (C61327 + C61326) * C38937) *
               C84550 +
           ((C56646 + C56645) * C84304 + (C56644 + C56643) * C38937) * C84574 +
           ((C57591 + C57590) * C84304 + (C57589 + C57588) * C38937) * C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C59129 * C102 + C59134 + C59134 + C84607 * C638 + C59130 * C1183 +
            C59135 + C59135 + C84601 * C1589 + C59131 * C4212 + C59136 +
            C59136 + C84589 * C4993 + C59132 * C5838 + C59137 + C59137 +
            C84543 * C6602) *
               C38937 +
           (C73888 + C73889 + C73890 + C73891) * C84304) *
              C84188 * C84603 * C716 -
          ((C59132 * C18814 + C73876 + C73876 + C84543 * C19560 +
            C59131 * C17254 + C73877 + C73877 + C84589 * C17885 +
            C59130 * C3443 + C73878 + C73878 + C84601 * C4127 + C59129 * C1681 +
            C73879 + C73879 + C84607 * C2489) *
               C84304 +
           (C73891 + C73890 + C73889 + C73888) * C38937) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C53740 +
            C18832 * C84344) *
               C84606 +
           (C71386 + C71387) * C84599 + (C71388 + C71389) * C84586 +
           (C71390 + C71391) * C84536) *
              C1177 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84344 +
            C25136 * C53740) *
               C84536 +
           (C17993 * C84344 + C17992 * C53740) * C84586 +
           (C17991 * C84344 + C17990 * C53740) * C84599 +
           (C18833 * C84344 + C18832 * C53740) * C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
             C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
             C84550 * C116) *
                C53740 +
            (C27956 + C27957 + C27958) * C84344) *
               C38937 +
           ((C14462 + C14463 + C14464) * C53740 +
            (C69030 + C69031 + C69032) * C84344) *
               C84304) *
              C1177 -
          (((C13628 * C5113 + C27251 + C27251 + C84550 * C5119 +
             C13626 * C5114 + C27252 + C27252 + C84574 * C5120 +
             C13624 * C5115 + C27253 + C27253 + C84590 * C5121) *
                C84344 +
            (C69032 + C69031 + C69030) * C53740) *
               C84304 +
           ((C27961 + C27960 + C27959) * C84344 +
            (C27958 + C27957 + C27956) * C53740) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84607 +
            C18832 * C84601 + C18833 * C84589 + C31748 * C84543) *
               C38937 +
           (C73290 + C73291 + C73292 + C73293) * C84304) *
              C1177 -
          (((C15866 * C31336 + C31340 + C31340 + C84188 * C31338) * C84543 +
            C37619 * C84589 + C17991 * C84601 + C17990 * C84607) *
               C84304 +
           (C31749 * C84543 + C31748 * C84589 + C18833 * C84601 +
            C18832 * C84607) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
             C41047 * C1685 + C84586 * C1792 + C41048 * C2602 +
             C84536 * C2718) *
                C84188) *
               C53740 +
           ((C72114 + C72115 + C72116 + C72117) * C15867 +
            (C72118 + C72119 + C72120 + C72121) * C84188) *
               C84344) *
              C1177 -
          (((C41048 * C17968 + C84536 * C18072 + C41047 * C17256 +
             C84586 * C17345 + C41046 * C5118 + C84599 * C5204 +
             C41045 * C4216 + C84606 * C4311) *
                C84188 +
            (C41048 * C17967 + C84536 * C18071 + C41047 * C17254 +
             C84586 * C17343 + C41046 * C5115 + C84599 * C5201 +
             C41045 * C4212 + C84606 * C4307) *
                C15867) *
               C84344 +
           ((C72121 + C72120 + C72119 + C72118) * C84188 +
            (C72117 + C72116 + C72115 + C72114) * C15867) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C13625 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84590 +
            (C39056 + C39057) * C13627 + (C39058 + C39059) * C84574 +
            (C39060 + C39061) * C13629 + (C39062 + C39063) * C84550) *
               C53740 +
           ((C45088 + C45089) * C13625 + (C45090 + C45091) * C84590 +
            (C43130 + C43131) * C13627 + (C43132 + C43133) * C84574 +
            (C48341 + C48342) * C13629 + (C48343 + C48344) * C84550) *
               C84344) *
              C1177 -
          (((C39030 * C5116 + C84304 * C5202 + C39029 * C4218 +
             C38937 * C4313) *
                C84550 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C13629 +
            (C43137 + C43136) * C84574 + (C43135 + C43134) * C13627 +
            (C45095 + C45094) * C84590 + (C45093 + C45092) * C13625) *
               C84344 +
           ((C48344 + C48343) * C84550 + (C48342 + C48341) * C13629 +
            (C43133 + C43132) * C84574 + (C43131 + C43130) * C13627 +
            (C45091 + C45090) * C84590 + (C45089 + C45088) * C13625) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C15867 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84188) *
               C84607 +
           ((C45088 + C45089) * C15867 + (C45090 + C45091) * C84188) * C84601 +
           ((C45092 + C45093) * C15867 + (C45094 + C45095) * C84188) * C84589 +
           ((C74032 + C74033) * C15867 + (C74034 + C74035) * C84188) * C84543) *
              C1177 -
          (((C39030 * C31337 + C84304 * C31383 + C39029 * C30909 +
             C38937 * C30960) *
                C84188 +
            (C39030 * C31336 + C84304 * C31382 + C39029 * C30907 +
             C38937 * C30958) *
                C15867) *
               C84543 +
           ((C74035 + C74034) * C84188 + (C74033 + C74032) * C15867) * C84589 +
           ((C45095 + C45094) * C84188 + (C45093 + C45092) * C15867) * C84601 +
           ((C45091 + C45090) * C84188 + (C45089 + C45088) * C15867) * C84607) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C15867 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84188) *
               C84606 +
           ((C56957 + C56958) * C15867 + (C56959 + C56960) * C84188) * C84599 +
           ((C56961 + C56962) * C15867 + (C56963 + C56964) * C84188) * C84586 +
           ((C71532 + C71533) * C15867 + (C71534 + C71535) * C84188) * C84536) *
              C1177 -
          (((C53879 * C17968 + C84344 * C18148 + C53878 * C16809 +
             C53740 * C16908) *
                C84188 +
            (C53879 * C17967 + C84344 * C18147 + C53878 * C16807 +
             C53740 * C16906) *
                C15867) *
               C84536 +
           ((C53879 * C17256 + C84344 * C17423 + C53878 * C3449 +
             C53740 * C3636) *
                C84188 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C15867) *
               C84586 +
           ((C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C84188 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C15867) *
               C84599 +
           ((C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C84188 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C15867) *
               C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C13625 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84590 +
            (C53905 + C53906) * C13627 + (C53907 + C53908) * C84574 +
            (C53909 + C53910) * C13629 + (C53911 + C53912) * C84550) *
               C38937 +
           ((C56957 + C56958) * C13625 + (C56959 + C56960) * C84590 +
            (C55989 + C55990) * C13627 + (C55991 + C55992) * C84574 +
            (C60720 + C60721) * C13629 + (C60722 + C60723) * C84550) *
               C84304) *
              C1177 -
          (((C53879 * C5116 + C84344 * C5282 + C53878 * C3450 +
             C53740 * C3637) *
                C84550 +
            (C53879 * C5113 + C84344 * C5279 + C53878 * C3444 +
             C53740 * C3631) *
                C13629 +
            (C53879 * C5117 + C84344 * C5283 + C53878 * C3451 +
             C53740 * C3638) *
                C84574 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C13627 +
            (C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C84590 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C13625) *
               C84304 +
           ((C53879 * C4218 + C84344 * C4422 + C53878 * C1186 +
             C53740 * C1300) *
                C84550 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C13629 +
            (C53879 * C4217 + C84344 * C4421 + C53878 * C1187 +
             C53740 * C1301) *
                C84574 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C13627 +
            (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C84590 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C13625) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
             C58687 * C4212 + C84589 * C4416 + C58688 * C5838 +
             C84543 * C6058) *
                C15867 +
            (C58685 * C108 + C84607 * C258 + C58686 * C1188 + C84601 * C1302 +
             C58687 * C4216 + C84589 * C4420 + C58688 * C5841 +
             C84543 * C6061) *
                C84188) *
               C38937 +
           ((C73442 + C73443 + C73444 + C73445) * C15867 +
            (C73446 + C73447 + C73448 + C73449) * C84188) *
               C84304) *
              C1177 -
          (((C58688 * C31337 + C84543 * C31427 + C58687 * C18817 +
             C84589 * C19024 + C58686 * C5118 + C84601 * C5284 +
             C58685 * C3452 + C84607 * C3639) *
                C84188 +
            (C58688 * C31336 + C84543 * C31426 + C58687 * C18815 +
             C84589 * C19022 + C58686 * C5115 + C84601 * C5281 +
             C58685 * C3446 + C84607 * C3633) *
                C15867) *
               C84304 +
           ((C58688 * C30909 + C84543 * C31011 + C58687 * C5841 +
             C84589 * C6061 + C58686 * C4216 + C84601 * C4420 + C58685 * C1188 +
             C84607 * C1302) *
                C84188 +
            (C58688 * C30907 + C84543 * C31009 + C58687 * C5838 +
             C84589 * C6058 + C58686 * C4212 + C84601 * C4416 + C58685 * C1183 +
             C84607 * C1297) *
                C15867) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[23] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C41045 +
                      (C15867 * C173 + C84188 * C330) * C84606 +
                      C16500 * C41046 + C16501 * C84599 + C16502 * C41047 +
                      C16503 * C84586 + C16504 * C41048 + C16505 * C84536) *
                         C53740 +
                     (C72254 + C72255 + C72256 + C72257 + C72258 + C72259 +
                      C72260 + C72261) *
                         C84344) *
                        C1177 -
                    (((C15867 * C18071 + C84188 * C18259) * C84536 +
                      (C15867 * C17967 + C84188 * C17968) * C41048 +
                      C18284 * C84586 + C18283 * C41047 + C18282 * C84599 +
                      C18281 * C41046 + C19121 * C84606 + C19120 * C41045) *
                         C84344 +
                     (C72261 + C72260 + C72259 + C72258 + C72257 + C72256 +
                      C72255 + C72254) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C39029 +
                      (C13625 * C173 + C84590 * C330 + C13627 * C174 +
                       C84574 * C331 + C13629 * C175 + C84550 * C332) *
                          C38937 +
                      (C14726 + C14727 + C14728) * C39030 +
                      (C14729 + C14730 + C14731) * C84304) *
                         C53740 +
                     ((C28220 + C28221 + C28222) * C39029 +
                      (C28223 + C28224 + C28225) * C38937 +
                      (C69339 + C69340 + C69341) * C39030 +
                      (C69342 + C69343 + C69344) * C84304) *
                         C84344) *
                        C1177 -
                    (((C13629 * C5199 + C84550 * C5359 + C13627 * C5200 +
                       C84574 * C5360 + C13625 * C5201 + C84590 * C5361) *
                          C84304 +
                      (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 +
                       C84574 * C5117 + C13625 * C5115 + C84590 * C5118) *
                          C39030 +
                      (C28231 + C28230 + C28229) * C38937 +
                      (C28228 + C28227 + C28226) * C39029) *
                         C84344 +
                     ((C69344 + C69343 + C69342) * C84304 +
                      (C69341 + C69340 + C69339) * C39030 +
                      (C28225 + C28224 + C28223) * C38937 +
                      (C28222 + C28221 + C28220) * C39029) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C39029 +
                      (C15867 * C173 + C84188 * C330) * C38937 +
                      C16500 * C39030 + C16501 * C84304) *
                         C84607 +
                     (C74168 + C74169 + C74170 + C74171) * C84601 +
                     (C74172 + C74173 + C74174 + C74175) * C84589 +
                     (C74176 + C74177 + C74178 + C74179) * C84543) *
                        C1177 -
                    (((C15867 * C31382 + C84188 * C31470) * C84304 +
                      (C15867 * C31336 + C84188 * C31337) * C39030 +
                      C31916 * C38937 + C31915 * C39029) *
                         C84543 +
                     (C74179 + C74178 + C74177 + C74176) * C84589 +
                     (C74175 + C74174 + C74173 + C74172) * C84601 +
                     (C74171 + C74170 + C74169 + C74168) * C84607) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[23] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C84188 * C53740 +
                     (C72348 + C72349 + C72350 + C72351) * C84188 * C84344) *
                        C1177 -
                    ((C41274 * C17967 + C72336 + C72336 + C84536 * C18358 +
                      C41273 * C17254 + C72337 + C72337 + C84586 * C17575 +
                      C41272 * C5115 + C72338 + C72338 + C84599 * C5438 +
                      C41271 * C4212 + C72339 + C72339 + C84606 * C4612) *
                         C84188 * C84344 +
                     (C72351 + C72350 + C72349 + C72348) * C84188 * C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84590 +
                      (C39302 + C39303) * C84574 + (C39304 + C39305) * C84550) *
                         C53740 +
                     ((C45434 + C45435) * C84590 + (C43472 + C43473) * C84574 +
                      (C48647 + C48648) * C84550) *
                         C84344) *
                        C1177 -
                    (((C39266 * C5113 + C43462 + C43462 + C84304 * C5436 +
                       C39265 * C4214 + C43463 + C43463 + C38937 * C4614) *
                          C84550 +
                      (C43475 + C43474) * C84574 + (C45437 + C45436) * C84590) *
                         C84344 +
                     ((C48648 + C48647) * C84550 + (C43473 + C43472) * C84574 +
                      (C45435 + C45434) * C84590) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                      C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                         C84188 * C84607 +
                     (C45434 + C45435) * C84188 * C84601 +
                     (C45436 + C45437) * C84188 * C84589 +
                     (C74256 + C74257) * C84188 * C84543) *
                        C1177 -
                    ((C39266 * C31336 + C74250 + C74250 + C84304 * C31513 +
                      C39265 * C30907 + C74251 + C74251 + C38937 * C31099) *
                         C84188 * C84543 +
                     (C74257 + C74256) * C84188 * C84589 +
                     (C45437 + C45436) * C84188 * C84601 +
                     (C45435 + C45434) * C84188 * C84607) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C41045 +
           (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
               C84606 +
           (C56957 + C56958) * C41046 + (C57270 + C57271) * C84599 +
           (C56961 + C56962) * C41047 + (C57272 + C57273) * C84586 +
           (C71532 + C71533) * C41048 + (C71742 + C71743) * C84536) *
              C84188 * C1177 -
          ((C53879 * C18071 + C84344 * C18439 + C53878 * C16860 +
            C53740 * C17045) *
               C84536 +
           (C53879 * C17967 + C84344 * C18147 + C53878 * C16807 +
            C53740 * C16906) *
               C41048 +
           (C53879 * C17343 + C84344 * C17657 + C53878 * C3546 +
            C53740 * C3887) *
               C84586 +
           (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
            C53740 * C3630) *
               C41047 +
           (C53879 * C5201 + C84344 * C5521 + C53878 * C3547 + C53740 * C3888) *
               C84599 +
           (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 + C53740 * C3633) *
               C41046 +
           (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 + C53740 * C1448) *
               C84606 +
           (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 + C53740 * C1297) *
               C41045) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C39029 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C38937 +
            (C56957 + C56958) * C39030 + (C57270 + C57271) * C84304) *
               C84590 +
           ((C53905 + C53906) * C39029 + (C54127 + C54128) * C38937 +
            (C55989 + C55990) * C39030 + (C56314 + C56315) * C84304) *
               C84574 +
           ((C53909 + C53910) * C39029 + (C54129 + C54130) * C38937 +
            (C60720 + C60721) * C39030 + (C61022 + C61023) * C84304) *
               C84550) *
              C1177 -
          (((C53879 * C5199 + C84344 * C5519 + C53878 * C3543 +
             C53740 * C3884) *
                C84304 +
            (C53879 * C5113 + C84344 * C5279 + C53878 * C3444 +
             C53740 * C3631) *
                C39030 +
            (C53879 * C4309 + C84344 * C4716 + C53878 * C1243 +
             C53740 * C1446) *
                C38937 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C39029) *
               C84550 +
           ((C53879 * C5200 + C84344 * C5520 + C53878 * C3545 +
             C53740 * C3886) *
                C84304 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C39030 +
            (C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C38937 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C39029) *
               C84574 +
           ((C53879 * C5201 + C84344 * C5521 + C53878 * C3547 +
             C53740 * C3888) *
                C84304 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C39030 +
            (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C38937 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C39029) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
            C58687 * C4212 + C84589 * C4416 + C58688 * C5838 + C84543 * C6058) *
               C39029 +
           (C58685 * C173 + C84607 * C453 + C58686 * C1245 + C84601 * C1448 +
            C58687 * C4307 + C84589 * C4714 + C58688 * C5954 + C84543 * C6347) *
               C38937 +
           (C73442 + C73443 + C73444 + C73445) * C39030 +
           (C73658 + C73659 + C73660 + C73661) * C84304) *
              C84188 * C1177 -
          ((C58688 * C31382 + C84543 * C31558 + C58687 * C18908 +
            C84589 * C19309 + C58686 * C5201 + C84601 * C5521 + C58685 * C3547 +
            C84607 * C3888) *
               C84304 +
           (C58688 * C31336 + C84543 * C31426 + C58687 * C18815 +
            C84589 * C19022 + C58686 * C5115 + C84601 * C5281 + C58685 * C3446 +
            C84607 * C3633) *
               C39030 +
           (C58688 * C30958 + C84543 * C31145 + C58687 * C5954 +
            C84589 * C6347 + C58686 * C4307 + C84601 * C4714 + C58685 * C1245 +
            C84607 * C1448) *
               C38937 +
           (C58688 * C30907 + C84543 * C31009 + C58687 * C5838 +
            C84589 * C6058 + C58686 * C4212 + C84601 * C4416 + C58685 * C1183 +
            C84607 * C1297) *
               C39029) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C53878 +
                      (C15867 * C252 + C84188 * C521) * C53740 +
                      C19118 * C53879 + C19391 * C84344) *
                         C84606 +
                     (C71810 + C71811 + C71812 + C71813) * C84599 +
                     (C71814 + C71815 + C71816 + C71817) * C84586 +
                     (C71818 + C71819 + C71820 + C71821) * C84536) *
                        C1177 -
                    (((C15867 * C18147 + C84188 * C18532) * C84344 +
                      (C15867 * C17967 + C84188 * C17968) * C53879 +
                      C25575 * C53740 + C25352 * C53878) *
                         C84536 +
                     (C18553 * C84344 + C18283 * C53879 + C18552 * C53740 +
                      C18279 * C53878) *
                         C84586 +
                     (C18551 * C84344 + C18281 * C53879 + C18550 * C53740 +
                      C18277 * C53878) *
                         C84599 +
                     (C19392 * C84344 + C19120 * C53879 + C19391 * C53740 +
                      C19118 * C53878) *
                         C84606) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C53878 +
                      (C13625 * C252 + C84590 * C521 + C13627 * C253 +
                       C84574 * C522 + C13629 * C254 + C84550 * C523) *
                          C53740 +
                      (C28220 + C28221 + C28222) * C53879 +
                      (C28472 + C28473 + C28474) * C84344) *
                         C38937 +
                     ((C14726 + C14727 + C14728) * C53878 +
                      (C14981 + C14982 + C14983) * C53740 +
                      (C69339 + C69340 + C69341) * C53879 +
                      (C69645 + C69646 + C69647) * C84344) *
                         C84304) *
                        C1177 -
                    (((C13629 * C5279 + C84550 * C5596 + C13627 * C5280 +
                       C84574 * C5597 + C13625 * C5281 + C84590 * C5598) *
                          C84344 +
                      (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 +
                       C84574 * C5117 + C13625 * C5115 + C84590 * C5118) *
                          C53879 +
                      (C69647 + C69646 + C69645) * C53740 +
                      (C69341 + C69340 + C69339) * C53878) *
                         C84304 +
                     ((C28477 + C28476 + C28475) * C84344 +
                      (C28228 + C28227 + C28226) * C53879 +
                      (C28474 + C28473 + C28472) * C53740 +
                      (C28222 + C28221 + C28220) * C53878) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C58685 +
                      (C15867 * C252 + C84188 * C521) * C84607 +
                      C19118 * C58686 + C19391 * C84601 + C19120 * C58687 +
                      C19392 * C84589 + C31913 * C58688 + C32069 * C84543) *
                         C38937 +
                     (C73728 + C73729 + C73730 + C73731 + C73732 + C73733 +
                      C73734 + C73735) *
                         C84304) *
                        C1177 -
                    (((C15867 * C31426 + C84188 * C31601) * C84543 +
                      (C15867 * C31336 + C84188 * C31337) * C58688 +
                      C38070 * C84589 + C37847 * C58687 + C18551 * C84601 +
                      C18281 * C58686 + C18550 * C84607 + C18277 * C58685) *
                         C84304 +
                     (C32070 * C84543 + C31915 * C58688 + C32069 * C84589 +
                      C31913 * C58687 + C19392 * C84601 + C19120 * C58686 +
                      C19391 * C84607 + C19118 * C58685) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C53878 +
           (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
            C41047 * C1906 + C84586 * C2393 + C41048 * C2795 + C84536 * C3276) *
               C53740 +
           (C72114 + C72115 + C72116 + C72117) * C53879 +
           (C72558 + C72559 + C72560 + C72561) * C84344) *
              C84188 * C1177 -
          ((C41048 * C18147 + C84536 * C18631 + C41047 * C17421 +
            C84586 * C17809 + C41046 * C5281 + C84599 * C5675 + C41045 * C4416 +
            C84606 * C4888) *
               C84344 +
           (C41048 * C17967 + C84536 * C18071 + C41047 * C17254 +
            C84586 * C17343 + C41046 * C5115 + C84599 * C5201 + C41045 * C4212 +
            C84606 * C4307) *
               C53879 +
           (C72561 + C72560 + C72559 + C72558) * C53740 +
           (C72117 + C72116 + C72115 + C72114) * C53878) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C53878 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C53740 +
            (C45088 + C45089) * C53879 + (C45752 + C45753) * C84344) *
               C84590 +
           ((C39056 + C39057) * C53878 + (C39530 + C39531) * C53740 +
            (C43130 + C43131) * C53879 + (C43787 + C43788) * C84344) *
               C84574 +
           ((C39060 + C39061) * C53878 + (C39532 + C39533) * C53740 +
            (C48341 + C48342) * C53879 + (C48947 + C48948) * C84344) *
               C84550) *
              C1177 -
          (((C39030 * C5279 + C84304 * C5673 + C39029 * C4418 +
             C38937 * C4890) *
                C84344 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C53879 +
            (C48948 + C48947) * C53740 + (C48342 + C48341) * C53878) *
               C84550 +
           ((C43790 + C43789) * C84344 + (C43135 + C43134) * C53879 +
            (C43788 + C43787) * C53740 + (C43131 + C43130) * C53878) *
               C84574 +
           ((C45755 + C45754) * C84344 + (C45093 + C45092) * C53879 +
            (C45753 + C45752) * C53740 + (C45089 + C45088) * C53878) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
               C58685 +
           (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
               C84607 +
           (C45088 + C45089) * C58686 + (C45752 + C45753) * C84601 +
           (C45092 + C45093) * C58687 + (C45754 + C45755) * C84589 +
           (C74032 + C74033) * C58688 + (C74460 + C74461) * C84543) *
              C84188 * C1177 -
          ((C39030 * C31426 + C84304 * C31644 + C39029 * C31009 +
            C38937 * C31233) *
               C84543 +
           (C39030 * C31336 + C84304 * C31382 + C39029 * C30907 +
            C38937 * C30958) *
               C58688 +
           (C74461 + C74460) * C84589 + (C74033 + C74032) * C58687 +
           (C45755 + C45754) * C84601 + (C45093 + C45092) * C58686 +
           (C45753 + C45752) * C84607 + (C45089 + C45088) * C58685) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
            C54346 + C54346 + C84344 * C1589) *
               C84606 +
           (C57588 + C57589) * C84599 + (C57590 + C57591) * C84586 +
           (C71964 + C71965) * C84536) *
              C84188 * C1177 -
          ((C54343 * C17967 + C72628 + C72628 + C84344 * C18706 +
            C54342 * C16807 + C72629 + C72629 + C53740 * C17177) *
               C84536 +
           (C54343 * C17254 + C58478 + C58478 + C84344 * C17885 +
            C54342 * C3443 + C58479 + C58479 + C53740 * C4127) *
               C84586 +
           (C54343 * C5115 + C58480 + C58480 + C84344 * C5752 + C54342 * C3446 +
            C58481 + C58481 + C53740 * C4128) *
               C84599 +
           (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 + C54342 * C1183 +
            C55660 + C55660 + C53740 * C1589) *
               C84606) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C38937 +
            (C57588 + C57589) * C84304) *
               C84590 +
           ((C54379 + C54380) * C38937 + (C56643 + C56644) * C84304) * C84574 +
           ((C54381 + C54382) * C38937 + (C61326 + C61327) * C84304) * C84550) *
              C1177 -
          (((C54343 * C5113 + C63092 + C63092 + C84344 * C5750 +
             C54342 * C3444 + C63093 + C63093 + C53740 * C4124) *
                C84304 +
            (C54343 * C4214 + C55655 + C55655 + C84344 * C4995 +
             C54342 * C1181 + C55656 + C55656 + C53740 * C1587) *
                C38937) *
               C84550 +
           ((C54343 * C5114 + C58476 + C58476 + C84344 * C5751 +
             C54342 * C3445 + C58477 + C58477 + C53740 * C4126) *
                C84304 +
            (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
             C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                C38937) *
               C84574 +
           ((C54343 * C5115 + C58480 + C58480 + C84344 * C5752 +
             C54342 * C3446 + C58481 + C58481 + C53740 * C4128) *
                C84304 +
            (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
             C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                C38937) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C59129 * C102 + C59134 + C59134 + C84607 * C638 + C59130 * C1183 +
            C59135 + C59135 + C84601 * C1589 + C59131 * C4212 + C59136 +
            C59136 + C84589 * C4993 + C59132 * C5838 + C59137 + C59137 +
            C84543 * C6602) *
               C38937 +
           (C73888 + C73889 + C73890 + C73891) * C84304) *
              C84188 * C1177 -
          ((C59132 * C31336 + C74528 + C74528 + C84543 * C31687 +
            C59131 * C18815 + C74529 + C74529 + C84589 * C19561 +
            C59130 * C5115 + C74530 + C74530 + C84601 * C5752 + C59129 * C3446 +
            C74531 + C74531 + C84607 * C4128) *
               C84304 +
           (C59132 * C30907 + C60414 + C60414 + C84543 * C31282 +
            C59131 * C5838 + C60415 + C60415 + C84589 * C6602 + C59130 * C4212 +
            C60416 + C60416 + C84601 * C4993 + C59129 * C1183 + C60417 +
            C60417 + C84607 * C1589) *
               C38937) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 +
                       C19642 * C103 + C19646 + C19646 + C84198 * C115) *
                          C84340 +
                      (C23658 + C23659) * C84347 + (C34151 + C34152) * C63169) *
                         C38937 +
                     ((C20383 + C20384) * C84340 + (C22687 + C22688) * C84347 +
                      (C33230 + C33231) * C63169) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C19642 * C5113 + C32266 + C32266 + C84198 * C5119 +
                       C19640 * C5114 + C32267 + C32267 + C84509 * C5120) *
                          C63169 +
                      (C19642 * C3444 + C21715 + C21715 + C84198 * C3456 +
                       C19640 * C3445 + C21716 + C21716 + C84509 * C3457) *
                          C84347 +
                      (C19642 * C721 + C19657 + C19657 + C84198 * C731 +
                       C19640 * C722 + C19658 + C19658 + C84509 * C732) *
                          C84340) *
                         C84304 +
                     ((C19642 * C4214 + C32268 + C32268 + C84198 * C4222 +
                       C19640 * C4213 + C32269 + C32269 + C84509 * C4221) *
                          C63169 +
                      (C19642 * C1181 + C21717 + C21717 + C84198 * C1191 +
                       C19640 * C1182 + C21718 + C21718 + C84509 * C1192) *
                          C84347 +
                      (C19642 * C104 + C19659 + C19659 + C84198 * C116 +
                       C19640 * C103 + C19660 + C19660 + C84509 * C115) *
                          C84340) *
                         C38937) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82024 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84509 +
            (C39056 + C39057) * C81997 + (C39058 + C39059) * C84198) *
               C84340 +
           ((C45088 + C45089) * C82024 + (C45090 + C45091) * C84509 +
            (C43130 + C43131) * C81997 + (C43132 + C43133) * C84198) *
               C84347 +
           ((C45092 + C45093) * C82024 + (C45094 + C45095) * C84509 +
            (C43134 + C43135) * C81997 + (C43136 + C43137) * C84198) *
               C63169) *
              C84603 * C84604 * C90 -
          (((C39030 * C5116 + C84304 * C5202 + C39029 * C4218 +
             C38937 * C4313) *
                C84198 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C81997 +
            (C43137 + C43136) * C84509 + (C43135 + C43134) * C82024) *
               C63169 +
           ((C48344 + C48343) * C84198 + (C48342 + C48341) * C81997 +
            (C43133 + C43132) * C84509 + (C43131 + C43130) * C82024) *
               C84347 +
           ((C39063 + C39062) * C84198 + (C39061 + C39060) * C81997 +
            (C39059 + C39058) * C84509 + (C39057 + C39056) * C82024) *
               C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[24] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C82024 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C84509 +
                      (C63349 + C63350 + C63351) * C81997 +
                      (C63352 + C63353 + C63354) * C84198) *
                         C38937 +
                     ((C66523 + C66524 + C66525) * C82024 +
                      (C66526 + C66527 + C66528) * C84509 +
                      (C65599 + C65600 + C65601) * C81997 +
                      (C65602 + C65603 + C65604) * C84198) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C82430 * C5116 + C63169 * C5282 + C82419 * C3450 +
                       C84347 * C3637 + C82422 * C726 + C84340 * C840) *
                          C84198 +
                      (C82430 * C5113 + C63169 * C5279 + C82419 * C3444 +
                       C84347 * C3631 + C82422 * C721 + C84340 * C835) *
                          C81997 +
                      (C65604 + C65603 + C65602) * C84509 +
                      (C65601 + C65600 + C65599) * C82024) *
                         C84304 +
                     ((C63360 + C63359 + C63358) * C84198 +
                      (C63357 + C63356 + C63355) * C81997 +
                      (C63354 + C63353 + C63352) * C84509 +
                      (C63351 + C63350 + C63349) * C82024) *
                         C38937) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C39029 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C38937 +
            (C20623 + C20624) * C39030 + (C20625 + C20626) * C84304) *
               C84340 +
           ((C23962 + C23963) * C39029 + (C23964 + C23965) * C38937 +
            (C23013 + C23014) * C39030 + (C23015 + C23016) * C84304) *
               C84347 +
           ((C34472 + C34473) * C39029 + (C34474 + C34475) * C38937 +
            (C33534 + C33535) * C39030 + (C33536 + C33537) * C84304) *
               C63169) *
              C84603 * C84604 * C90 -
          (((C81997 * C5199 + C84198 * C5359 + C82024 * C5200 +
             C84509 * C5360) *
                C84304 +
            (C81997 * C5113 + C84198 * C5116 + C82024 * C5114 +
             C84509 * C5117) *
                C39030 +
            (C81997 * C4309 + C84198 * C4536 + C82024 * C4308 +
             C84509 * C4535) *
                C38937 +
            (C81997 * C4214 + C84198 * C4218 + C82024 * C4213 +
             C84509 * C4217) *
                C39029) *
               C63169 +
           ((C81997 * C3543 + C84198 * C3717 + C82024 * C3545 +
             C84509 * C3718) *
                C84304 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C39030 +
            (C81997 * C1243 + C84198 * C1347 + C82024 * C1244 +
             C84509 * C1348) *
                C38937 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C39029) *
               C84347 +
           ((C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
                C84304 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C39030 +
            (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
                C38937 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C39029) *
               C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
             C39269 + C39269 + C84304 * C936) *
                C84509 +
            (C39302 + C39303) * C84198) *
               C84340 +
           ((C45434 + C45435) * C84509 + (C43472 + C43473) * C84198) * C84347 +
           ((C45436 + C45437) * C84509 + (C43474 + C43475) * C84198) * C63169) *
              C84603 * C84604 * C90 -
          (((C39266 * C5113 + C43462 + C43462 + C84304 * C5436 +
             C39265 * C4214 + C43463 + C43463 + C38937 * C4614) *
                C84198 +
            (C43475 + C43474) * C84509) *
               C63169 +
           ((C48648 + C48647) * C84198 + (C43473 + C43472) * C84509) * C84347 +
           ((C39305 + C39304) * C84198 + (C39303 + C39302) * C84509) * C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[24] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C39029 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C38937 +
                      (C66523 + C66524 + C66525) * C39030 +
                      (C66829 + C66830 + C66831) * C84304) *
                         C84509 +
                     ((C63349 + C63350 + C63351) * C39029 +
                      (C63595 + C63596 + C63597) * C38937 +
                      (C65599 + C65600 + C65601) * C39030 +
                      (C65905 + C65906 + C65907) * C84304) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C82430 * C5199 + C63169 * C5519 + C82419 * C3543 +
                       C84347 * C3884 + C82422 * C783 + C84340 * C986) *
                          C84304 +
                      (C82430 * C5113 + C63169 * C5279 + C82419 * C3444 +
                       C84347 * C3631 + C82422 * C721 + C84340 * C835) *
                          C39030 +
                      (C63600 + C63599 + C63598) * C38937 +
                      (C63357 + C63356 + C63355) * C39029) *
                         C84198 +
                     ((C65907 + C65906 + C65905) * C84304 +
                      (C65601 + C65600 + C65599) * C39030 +
                      (C63597 + C63596 + C63595) * C38937 +
                      (C63351 + C63350 + C63349) * C39029) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C82422 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84340 +
            (C23962 + C23963) * C82419 + (C24264 + C24265) * C84347 +
            (C34472 + C34473) * C82430 + (C34791 + C34792) * C63169) *
               C38937 +
           ((C20623 + C20624) * C82422 + (C20853 + C20854) * C84340 +
            (C23013 + C23014) * C82419 + (C23332 + C23333) * C84347 +
            (C33534 + C33535) * C82430 + (C33840 + C33841) * C63169) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C81997 * C5279 + C84198 * C5596 + C82024 * C5280 +
             C84509 * C5597) *
                C63169 +
            (C81997 * C5113 + C84198 * C5116 + C82024 * C5114 +
             C84509 * C5117) *
                C82430 +
            (C81997 * C3631 + C84198 * C3966 + C82024 * C3632 +
             C84509 * C3967) *
                C84347 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C82419 +
            (C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C84340 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C82422) *
               C84304 +
           ((C81997 * C4418 + C84198 * C4812 + C82024 * C4417 +
             C84509 * C4811) *
                C63169 +
            (C81997 * C4214 + C84198 * C4218 + C82024 * C4213 +
             C84509 * C4217) *
                C82430 +
            (C81997 * C1295 + C84198 * C1493 + C82024 * C1296 +
             C84509 * C1494) *
                C84347 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C82419 +
            (C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C84340 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C82422) *
               C38937) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82422 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84340 +
            (C45088 + C45089) * C82419 + (C45752 + C45753) * C84347 +
            (C45092 + C45093) * C82430 + (C45754 + C45755) * C63169) *
               C84509 +
           ((C39056 + C39057) * C82422 + (C39530 + C39531) * C84340 +
            (C43130 + C43131) * C82419 + (C43787 + C43788) * C84347 +
            (C43134 + C43135) * C82430 + (C43789 + C43790) * C63169) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C39030 * C5279 + C84304 * C5673 + C39029 * C4418 +
             C38937 * C4890) *
                C63169 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C82430 +
            (C48948 + C48947) * C84347 + (C48342 + C48341) * C82419 +
            (C39533 + C39532) * C84340 + (C39061 + C39060) * C82422) *
               C84198 +
           ((C43790 + C43789) * C63169 + (C43135 + C43134) * C82430 +
            (C43788 + C43787) * C84347 + (C43131 + C43130) * C82419 +
            (C39531 + C39530) * C84340 + (C39057 + C39056) * C82422) *
               C84509) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[24] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                       C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                       C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                          C38937 +
                      (C67144 + C67145 + C67146) * C84304) *
                         C84509 +
                     ((C63874 + C63875 + C63876) * C38937 +
                      (C66214 + C66215 + C66216) * C84304) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C63836 * C5113 + C64546 + C64546 + C63169 * C5750 +
                       C82467 * C3444 + C64547 + C64547 + C84347 * C4124 +
                       C82474 * C721 + C64548 + C64548 + C84340 * C1127) *
                          C84304 +
                      (C63879 + C63878 + C63877) * C38937) *
                         C84198 +
                     ((C66216 + C66215 + C66214) * C84304 +
                      (C63876 + C63875 + C63874) * C38937) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 +
                       C19642 * C103 + C19646 + C19646 + C84198 * C115) *
                          C84340 +
                      (C23658 + C23659) * C84347 + (C34151 + C34152) * C63169) *
                         C38937 +
                     ((C20383 + C20384) * C84340 + (C22687 + C22688) * C84347 +
                      (C33230 + C33231) * C63169) *
                         C84304) *
                        C84603 * C716 -
                    (((C19642 * C17255 + C23648 + C23648 + C84198 * C17259 +
                       C19640 * C17254 + C23649 + C23649 + C84509 * C17258) *
                          C63169 +
                      (C22690 + C22689) * C84347 + (C20386 + C20385) * C84340) *
                         C84304 +
                     ((C33231 + C33230) * C63169 + (C22688 + C22687) * C84347 +
                      (C20384 + C20383) * C84340) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82024 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84509 +
            (C39056 + C39057) * C81997 + (C39058 + C39059) * C84198) *
               C84340 +
           ((C45088 + C45089) * C82024 + (C45090 + C45091) * C84509 +
            (C43130 + C43131) * C81997 + (C43132 + C43133) * C84198) *
               C84347 +
           ((C45092 + C45093) * C82024 + (C45094 + C45095) * C84509 +
            (C43134 + C43135) * C81997 + (C43136 + C43137) * C84198) *
               C63169) *
              C84603 * C716 -
          (((C39030 * C17257 + C84304 * C17346 + C39029 * C5117 +
             C38937 * C5203) *
                C84198 +
            (C39030 * C17255 + C84304 * C17344 + C39029 * C5114 +
             C38937 * C5200) *
                C81997 +
            (C39030 * C17256 + C84304 * C17345 + C39029 * C5118 +
             C38937 * C5204) *
                C84509 +
            (C39030 * C17254 + C84304 * C17343 + C39029 * C5115 +
             C38937 * C5201) *
                C82024) *
               C63169 +
           ((C39030 * C3448 + C84304 * C3550 + C39029 * C3451 +
             C38937 * C3551) *
                C84198 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C81997 +
            (C39030 * C3449 + C84304 * C3552 + C39029 * C3452 +
             C38937 * C3553) *
                C84509 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C82024) *
               C84347 +
           ((C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
                C84198 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C81997 +
            (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
                C84509 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C82024) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C82024 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C84509 +
                      (C63349 + C63350 + C63351) * C81997 +
                      (C63352 + C63353 + C63354) * C84198) *
                         C38937 +
                     ((C66523 + C66524 + C66525) * C82024 +
                      (C66526 + C66527 + C66528) * C84509 +
                      (C65599 + C65600 + C65601) * C81997 +
                      (C65602 + C65603 + C65604) * C84198) *
                         C84304) *
                        C84603 * C716 -
                    (((C82430 * C17257 + C63169 * C17424 + C82419 * C3448 +
                       C84347 * C3635 + C82422 * C1686 + C84340 * C1911) *
                          C84198 +
                      (C82430 * C17255 + C63169 * C17422 + C82419 * C3442 +
                       C84347 * C3629 + C82422 * C1682 + C84340 * C1907) *
                          C81997 +
                      (C82430 * C17256 + C63169 * C17423 + C82419 * C3449 +
                       C84347 * C3636 + C82422 * C1685 + C84340 * C1910) *
                          C84509 +
                      (C82430 * C17254 + C63169 * C17421 + C82419 * C3443 +
                       C84347 * C3630 + C82422 * C1681 + C84340 * C1906) *
                          C82024) *
                         C84304 +
                     ((C65604 + C65603 + C65602) * C84198 +
                      (C65601 + C65600 + C65599) * C81997 +
                      (C66528 + C66527 + C66526) * C84509 +
                      (C66525 + C66524 + C66523) * C82024) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C39029 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C38937 +
            (C20623 + C20624) * C39030 + (C20625 + C20626) * C84304) *
               C84340 +
           ((C23962 + C23963) * C39029 + (C23964 + C23965) * C38937 +
            (C23013 + C23014) * C39030 + (C23015 + C23016) * C84304) *
               C84347 +
           ((C34472 + C34473) * C39029 + (C34474 + C34475) * C38937 +
            (C33534 + C33535) * C39030 + (C33536 + C33537) * C84304) *
               C63169) *
              C84603 * C716 -
          (((C81997 * C17344 + C84198 * C17500 + C82024 * C17343 +
             C84509 * C17499) *
                C84304 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C39030 +
            (C33537 + C33536) * C38937 + (C33535 + C33534) * C39029) *
               C63169 +
           ((C23020 + C23019) * C84304 + (C23018 + C23017) * C39030 +
            (C23016 + C23015) * C38937 + (C23014 + C23013) * C39029) *
               C84347 +
           ((C20630 + C20629) * C84304 + (C20628 + C20627) * C39030 +
            (C20626 + C20625) * C38937 + (C20624 + C20623) * C39029) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
             C39269 + C39269 + C84304 * C936) *
                C84509 +
            (C39302 + C39303) * C84198) *
               C84340 +
           ((C45434 + C45435) * C84509 + (C43472 + C43473) * C84198) * C84347 +
           ((C45436 + C45437) * C84509 + (C43474 + C43475) * C84198) * C63169) *
              C84603 * C716 -
          (((C39266 * C17255 + C44440 + C44440 + C84304 * C17576 +
             C39265 * C5114 + C44441 + C44441 + C38937 * C5437) *
                C84198 +
            (C39266 * C17254 + C44442 + C44442 + C84304 * C17575 +
             C39265 * C5115 + C44443 + C44443 + C38937 * C5438) *
                C84509) *
               C63169 +
           ((C39266 * C3442 + C44444 + C44444 + C84304 * C3796 +
             C39265 * C3445 + C44445 + C44445 + C38937 * C3797) *
                C84198 +
            (C39266 * C3443 + C44446 + C44446 + C84304 * C3798 +
             C39265 * C3446 + C44447 + C44447 + C38937 * C3799) *
                C84509) *
               C84347 +
           ((C39266 * C1682 + C39998 + C39998 + C84304 * C2094 + C39265 * C722 +
             C39999 + C39999 + C38937 * C935) *
                C84198 +
            (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 + C39265 * C723 +
             C40001 + C40001 + C38937 * C936) *
                C84509) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C39029 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C38937 +
                      (C66523 + C66524 + C66525) * C39030 +
                      (C66829 + C66830 + C66831) * C84304) *
                         C84509 +
                     ((C63349 + C63350 + C63351) * C39029 +
                      (C63595 + C63596 + C63597) * C38937 +
                      (C65599 + C65600 + C65601) * C39030 +
                      (C65905 + C65906 + C65907) * C84304) *
                         C84198) *
                        C84603 * C716 -
                    (((C82430 * C17344 + C63169 * C17658 + C82419 * C3544 +
                       C84347 * C3885 + C82422 * C1789 + C84340 * C2214) *
                          C84304 +
                      (C82430 * C17255 + C63169 * C17422 + C82419 * C3442 +
                       C84347 * C3629 + C82422 * C1682 + C84340 * C1907) *
                          C39030 +
                      (C65907 + C65906 + C65905) * C38937 +
                      (C65601 + C65600 + C65599) * C39029) *
                         C84198 +
                     ((C82430 * C17343 + C63169 * C17657 + C82419 * C3546 +
                       C84347 * C3887 + C82422 * C1788 + C84340 * C2213) *
                          C84304 +
                      (C82430 * C17254 + C63169 * C17421 + C82419 * C3443 +
                       C84347 * C3630 + C82422 * C1681 + C84340 * C1906) *
                          C39030 +
                      (C66831 + C66830 + C66829) * C38937 +
                      (C66525 + C66524 + C66523) * C39029) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C82422 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84340 +
            (C23962 + C23963) * C82419 + (C24264 + C24265) * C84347 +
            (C34472 + C34473) * C82430 + (C34791 + C34792) * C63169) *
               C38937 +
           ((C20623 + C20624) * C82422 + (C20853 + C20854) * C84340 +
            (C23013 + C23014) * C82419 + (C23332 + C23333) * C84347 +
            (C33534 + C33535) * C82430 + (C33840 + C33841) * C63169) *
               C84304) *
              C84603 * C716 -
          (((C81997 * C17422 + C84198 * C17734 + C82024 * C17421 +
             C84509 * C17733) *
                C63169 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C82430 +
            (C23335 + C23334) * C84347 + (C23018 + C23017) * C82419 +
            (C20856 + C20855) * C84340 + (C20628 + C20627) * C82422) *
               C84304 +
           ((C33841 + C33840) * C63169 + (C33535 + C33534) * C82430 +
            (C23333 + C23332) * C84347 + (C23014 + C23013) * C82419 +
            (C20854 + C20853) * C84340 + (C20624 + C20623) * C82422) *
               C38937) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82422 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84340 +
            (C45088 + C45089) * C82419 + (C45752 + C45753) * C84347 +
            (C45092 + C45093) * C82430 + (C45754 + C45755) * C63169) *
               C84509 +
           ((C39056 + C39057) * C82422 + (C39530 + C39531) * C84340 +
            (C43130 + C43131) * C82419 + (C43787 + C43788) * C84347 +
            (C43134 + C43135) * C82430 + (C43789 + C43790) * C63169) *
               C84198) *
              C84603 * C716 -
          (((C39030 * C17422 + C84304 * C17810 + C39029 * C5280 +
             C38937 * C5674) *
                C63169 +
            (C39030 * C17255 + C84304 * C17344 + C39029 * C5114 +
             C38937 * C5200) *
                C82430 +
            (C39030 * C3629 + C84304 * C4045 + C39029 * C3632 +
             C38937 * C4046) *
                C84347 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C82419 +
            (C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C84340 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C82422) *
               C84198 +
           ((C39030 * C17421 + C84304 * C17809 + C39029 * C5281 +
             C38937 * C5675) *
                C63169 +
            (C39030 * C17254 + C84304 * C17343 + C39029 * C5115 +
             C38937 * C5201) *
                C82430 +
            (C39030 * C3630 + C84304 * C4047 + C39029 * C3633 +
             C38937 * C4048) *
                C84347 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C82419 +
            (C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C84340 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C82422) *
               C84509) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                       C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                       C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                          C38937 +
                      (C67144 + C67145 + C67146) * C84304) *
                         C84509 +
                     ((C63874 + C63875 + C63876) * C38937 +
                      (C66214 + C66215 + C66216) * C84304) *
                         C84198) *
                        C84603 * C716 -
                    (((C63836 * C17255 + C67132 + C67132 + C63169 * C17886 +
                       C82467 * C3442 + C67133 + C67133 + C84347 * C4125 +
                       C82474 * C1682 + C67134 + C67134 + C84340 * C2490) *
                          C84304 +
                      (C66216 + C66215 + C66214) * C38937) *
                         C84198 +
                     ((C63836 * C17254 + C67135 + C67135 + C63169 * C17885 +
                       C82467 * C3443 + C67136 + C67136 + C84347 * C4127 +
                       C82474 * C1681 + C67137 + C67137 + C84340 * C2489) *
                          C84304 +
                      (C67146 + C67145 + C67144) * C38937) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 +
                       C19642 * C103 + C19646 + C19646 + C84198 * C115) *
                          C84340 +
                      (C23658 + C23659) * C84347 + (C34151 + C34152) * C63169) *
                         C38937 +
                     ((C20383 + C20384) * C84340 + (C22687 + C22688) * C84347 +
                      (C33230 + C33231) * C63169) *
                         C84304) *
                        C1177 -
                    (((C19642 * C34135 + C34143 + C34143 + C84198 * C34137 +
                       C19640 * C18815 + C34144 + C34144 + C84509 * C18819) *
                          C63169 +
                      (C33231 + C33230) * C84347 + (C22688 + C22687) * C84340) *
                         C84304 +
                     ((C36378 + C36377) * C63169 + (C34152 + C34151) * C84347 +
                      (C23659 + C23658) * C84340) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82024 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84509 +
            (C39056 + C39057) * C81997 + (C39058 + C39059) * C84198) *
               C84340 +
           ((C45088 + C45089) * C82024 + (C45090 + C45091) * C84509 +
            (C43130 + C43131) * C81997 + (C43132 + C43133) * C84198) *
               C84347 +
           ((C45092 + C45093) * C82024 + (C45094 + C45095) * C84509 +
            (C43134 + C43135) * C81997 + (C43136 + C43137) * C84198) *
               C63169) *
              C1177 -
          (((C39030 * C34136 + C84304 * C34251 + C39029 * C5840 +
             C38937 * C5956) *
                C84198 +
            (C39030 * C34135 + C84304 * C34250 + C39029 * C5837 +
             C38937 * C5953) *
                C81997 +
            (C74035 + C74034) * C84509 + (C74033 + C74032) * C82024) *
               C63169 +
           ((C43137 + C43136) * C84198 + (C43135 + C43134) * C81997 +
            (C45095 + C45094) * C84509 + (C45093 + C45092) * C82024) *
               C84347 +
           ((C43133 + C43132) * C84198 + (C43131 + C43130) * C81997 +
            (C45091 + C45090) * C84509 + (C45089 + C45088) * C82024) *
               C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C82024 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C84509 +
                      (C63349 + C63350 + C63351) * C81997 +
                      (C63352 + C63353 + C63354) * C84198) *
                         C38937 +
                     ((C66523 + C66524 + C66525) * C82024 +
                      (C66526 + C66527 + C66528) * C84509 +
                      (C65599 + C65600 + C65601) * C81997 +
                      (C65602 + C65603 + C65604) * C84198) *
                         C84304) *
                        C1177 -
                    (((C82430 * C34136 + C63169 * C34363 + C82419 * C5117 +
                       C84347 * C5283 + C82422 * C3451 + C84340 * C3638) *
                          C84198 +
                      (C82430 * C34135 + C63169 * C34362 + C82419 * C5114 +
                       C84347 * C5280 + C82422 * C3445 + C84340 * C3632) *
                          C81997 +
                      (C82430 * C18817 + C63169 * C19024 + C82419 * C5118 +
                       C84347 * C5284 + C82422 * C3452 + C84340 * C3639) *
                          C84509 +
                      (C82430 * C18815 + C63169 * C19022 + C82419 * C5115 +
                       C84347 * C5281 + C82422 * C3446 + C84340 * C3633) *
                          C82024) *
                         C84304 +
                     ((C82430 * C5840 + C63169 * C6060 + C82419 * C4217 +
                       C84347 * C4421 + C82422 * C1187 + C84340 * C1301) *
                          C84198 +
                      (C82430 * C5837 + C63169 * C6057 + C82419 * C4213 +
                       C84347 * C4417 + C82422 * C1182 + C84340 * C1296) *
                          C81997 +
                      (C82430 * C5841 + C63169 * C6061 + C82419 * C4216 +
                       C84347 * C4420 + C82422 * C1188 + C84340 * C1302) *
                          C84509 +
                      (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                       C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                          C82024) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C39029 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C38937 +
            (C20623 + C20624) * C39030 + (C20625 + C20626) * C84304) *
               C84340 +
           ((C23962 + C23963) * C39029 + (C23964 + C23965) * C38937 +
            (C23013 + C23014) * C39030 + (C23015 + C23016) * C84304) *
               C84347 +
           ((C34472 + C34473) * C39029 + (C34474 + C34475) * C38937 +
            (C33534 + C33535) * C39030 + (C33536 + C33537) * C84304) *
               C63169) *
              C1177 -
          (((C81997 * C34250 + C84198 * C34462 + C82024 * C18908 +
             C84509 * C19100) *
                C84304 +
            (C81997 * C34135 + C84198 * C34136 + C82024 * C18815 +
             C84509 * C18817) *
                C39030 +
            (C36600 + C36599) * C38937 + (C36598 + C36597) * C39029) *
               C63169 +
           ((C33537 + C33536) * C84304 + (C33535 + C33534) * C39030 +
            (C34475 + C34474) * C38937 + (C34473 + C34472) * C39029) *
               C84347 +
           ((C23016 + C23015) * C84304 + (C23014 + C23013) * C39030 +
            (C23965 + C23964) * C38937 + (C23963 + C23962) * C39029) *
               C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 + C39266 * C723 +
             C39269 + C39269 + C84304 * C936) *
                C84509 +
            (C39302 + C39303) * C84198) *
               C84340 +
           ((C45434 + C45435) * C84509 + (C43472 + C43473) * C84198) * C84347 +
           ((C45436 + C45437) * C84509 + (C43474 + C43475) * C84198) * C63169) *
              C1177 -
          (((C39266 * C34135 + C45422 + C45422 + C84304 * C34573 +
             C39265 * C5837 + C45423 + C45423 + C38937 * C6250) *
                C84198 +
            (C74257 + C74256) * C84509) *
               C63169 +
           ((C43475 + C43474) * C84198 + (C45437 + C45436) * C84509) * C84347 +
           ((C43473 + C43472) * C84198 + (C45435 + C45434) * C84509) * C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C39029 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C38937 +
                      (C66523 + C66524 + C66525) * C39030 +
                      (C66829 + C66830 + C66831) * C84304) *
                         C84509 +
                     ((C63349 + C63350 + C63351) * C39029 +
                      (C63595 + C63596 + C63597) * C38937 +
                      (C65599 + C65600 + C65601) * C39030 +
                      (C65905 + C65906 + C65907) * C84304) *
                         C84198) *
                        C1177 -
                    (((C82430 * C34250 + C63169 * C34686 + C82419 * C5200 +
                       C84347 * C5520 + C82422 * C3545 + C84340 * C3886) *
                          C84304 +
                      (C82430 * C34135 + C63169 * C34362 + C82419 * C5114 +
                       C84347 * C5280 + C82422 * C3445 + C84340 * C3632) *
                          C39030 +
                      (C82430 * C5953 + C63169 * C6346 + C82419 * C4308 +
                       C84347 * C4715 + C82422 * C1244 + C84340 * C1447) *
                          C38937 +
                      (C82430 * C5837 + C63169 * C6057 + C82419 * C4213 +
                       C84347 * C4417 + C82422 * C1182 + C84340 * C1296) *
                          C39029) *
                         C84198 +
                     ((C82430 * C18908 + C63169 * C19309 + C82419 * C5201 +
                       C84347 * C5521 + C82422 * C3547 + C84340 * C3888) *
                          C84304 +
                      (C82430 * C18815 + C63169 * C19022 + C82419 * C5115 +
                       C84347 * C5281 + C82422 * C3446 + C84340 * C3633) *
                          C39030 +
                      (C82430 * C5954 + C63169 * C6347 + C82419 * C4307 +
                       C84347 * C4714 + C82422 * C1245 + C84340 * C1448) *
                          C38937 +
                      (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                       C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                          C39029) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C82422 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84340 +
            (C23962 + C23963) * C82419 + (C24264 + C24265) * C84347 +
            (C34472 + C34473) * C82430 + (C34791 + C34792) * C63169) *
               C38937 +
           ((C20623 + C20624) * C82422 + (C20853 + C20854) * C84340 +
            (C23013 + C23014) * C82419 + (C23332 + C23333) * C84347 +
            (C33534 + C33535) * C82430 + (C33840 + C33841) * C63169) *
               C84304) *
              C1177 -
          (((C81997 * C34362 + C84198 * C34785 + C82024 * C19022 +
             C84509 * C19385) *
                C63169 +
            (C81997 * C34135 + C84198 * C34136 + C82024 * C18815 +
             C84509 * C18817) *
                C82430 +
            (C33841 + C33840) * C84347 + (C33535 + C33534) * C82419 +
            (C23333 + C23332) * C84340 + (C23014 + C23013) * C82422) *
               C84304 +
           ((C36810 + C36809) * C63169 + (C36598 + C36597) * C82430 +
            (C34792 + C34791) * C84347 + (C34473 + C34472) * C82419 +
            (C24265 + C24264) * C84340 + (C23963 + C23962) * C82422) *
               C38937) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C82422 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C84340 +
            (C45088 + C45089) * C82419 + (C45752 + C45753) * C84347 +
            (C45092 + C45093) * C82430 + (C45754 + C45755) * C63169) *
               C84509 +
           ((C39056 + C39057) * C82422 + (C39530 + C39531) * C84340 +
            (C43130 + C43131) * C82419 + (C43787 + C43788) * C84347 +
            (C43134 + C43135) * C82430 + (C43789 + C43790) * C63169) *
               C84198) *
              C1177 -
          (((C39030 * C34362 + C84304 * C34890 + C39029 * C6057 +
             C38937 * C6518) *
                C63169 +
            (C39030 * C34135 + C84304 * C34250 + C39029 * C5837 +
             C38937 * C5953) *
                C82430 +
            (C43790 + C43789) * C84347 + (C43135 + C43134) * C82419 +
            (C43788 + C43787) * C84340 + (C43131 + C43130) * C82422) *
               C84198 +
           ((C74461 + C74460) * C63169 + (C74033 + C74032) * C82430 +
            (C45755 + C45754) * C84347 + (C45093 + C45092) * C82419 +
            (C45753 + C45752) * C84340 + (C45089 + C45088) * C82422) *
               C84509) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                       C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                       C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                          C38937 +
                      (C67144 + C67145 + C67146) * C84304) *
                         C84509 +
                     ((C63874 + C63875 + C63876) * C38937 +
                      (C66214 + C66215 + C66216) * C84304) *
                         C84198) *
                        C1177 -
                    (((C63836 * C34135 + C68029 + C68029 + C63169 * C34995 +
                       C82467 * C5114 + C68030 + C68030 + C84347 * C5751 +
                       C82474 * C3445 + C68031 + C68031 + C84340 * C4126) *
                          C84304 +
                      (C63836 * C5837 + C65287 + C65287 + C63169 * C6601 +
                       C82467 * C4213 + C65288 + C65288 + C84347 * C4994 +
                       C82474 * C1182 + C65289 + C65289 + C84340 * C1588) *
                          C38937) *
                         C84198 +
                     ((C63836 * C18815 + C68032 + C68032 + C63169 * C19561 +
                       C82467 * C5115 + C68033 + C68033 + C84347 * C5752 +
                       C82474 * C3446 + C68034 + C68034 + C84340 * C4128) *
                          C84304 +
                      (C63836 * C5838 + C65290 + C65290 + C63169 * C6602 +
                       C82467 * C4212 + C65291 + C65291 + C84347 * C4993 +
                       C82474 * C1183 + C65292 + C65292 + C84340 * C1589) *
                          C38937) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
             C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
             C84550 * C116) *
                C53740 +
            (C27956 + C27957 + C27958) * C84344) *
               C38937 +
           ((C14462 + C14463 + C14464) * C53740 +
            (C13624 * C3446 + C15214 + C15214 + C84590 * C3458 +
             C13626 * C3445 + C15213 + C15213 + C84574 * C3457 +
             C13628 * C3444 + C15212 + C15212 + C84550 * C3456) *
                C84344) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C13628 * C8102 + C68133 + C68133 + C84550 * C8104 +
             C13626 * C3444 + C68134 + C68134 + C84574 * C3456 +
             C13624 * C3445 + C68135 + C68135 + C84590 * C3457) *
                C84344 +
            (C13628 * C720 + C13643 + C13643 + C84550 * C730 + C13626 * C721 +
             C13644 + C13644 + C84574 * C731 + C13624 * C722 + C13645 + C13645 +
             C84590 * C732) *
                C53740) *
               C84304 +
           ((C13628 * C1180 + C26468 + C26468 + C84550 * C1190 +
             C13626 * C1181 + C26469 + C26469 + C84574 * C1191 +
             C13624 * C1182 + C26470 + C26470 + C84590 * C1192) *
                C84344 +
            (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
             C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
             C84590 * C115) *
                C53740) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C53740 +
            C18832 * C84344) *
               C84606 +
           (C16325 * C53740 + C17990 * C84344) * C84599 +
           (C16326 * C53740 + C17992 * C84344) * C84586 +
           (C16327 * C53740 + C25136 * C84344) * C84536) *
              C84603 * C84604 * C90 -
          (((C15866 * C21056 + C24532 + C24532 + C84188 * C21058) * C84344 +
            (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C53740) *
               C84536 +
           ((C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84344 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C53740) *
               C84586 +
           ((C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84344 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C53740) *
               C84599 +
           ((C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84344 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C53740) *
               C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C13625 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84590 +
            (C39056 + C39057) * C13627 + (C39058 + C39059) * C84574 +
            (C39060 + C39061) * C13629 + (C39062 + C39063) * C84550) *
               C53740 +
           ((C45088 + C45089) * C13625 + (C45090 + C45091) * C84590 +
            (C43130 + C43131) * C13627 + (C43132 + C43133) * C84574 +
            (C48341 + C48342) * C13629 + (C48343 + C48344) * C84550) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C39030 * C8103 + C84304 * C8180 + C39029 * C1185 +
             C38937 * C1247) *
                C84550 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C13629 +
            (C48344 + C48343) * C84574 + (C48342 + C48341) * C13627 +
            (C43133 + C43132) * C84590 + (C43131 + C43130) * C13625) *
               C84344 +
           ((C39067 + C39066) * C84550 + (C39065 + C39064) * C13629 +
            (C39063 + C39062) * C84574 + (C39061 + C39060) * C13627 +
            (C39059 + C39058) * C84590 + (C39057 + C39056) * C13625) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
             C41047 * C1685 + C84586 * C1792 + C41048 * C2602 +
             C84536 * C2718) *
                C84188) *
               C53740 +
           ((C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
             C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C41045 * C1188 + C84606 * C1250 + C41046 * C3452 + C84599 * C3553 +
             C41047 * C3449 + C84586 * C3552 + C41048 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C41048 * C21057 + C84536 * C21134 + C41047 * C3448 +
             C84586 * C3550 + C41046 * C3451 + C84599 * C3551 + C41045 * C1187 +
             C84606 * C1249) *
                C84188 +
            (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
             C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
             C84606 * C1244) *
                C15867) *
               C84344 +
           ((C41073 + C41072 + C41071 + C41070) * C84188 +
            (C41069 + C41068 + C41067 + C41066) * C15867) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C13625 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84590 +
            (C53905 + C53906) * C13627 + (C53907 + C53908) * C84574 +
            (C53909 + C53910) * C13629 + (C53911 + C53912) * C84550) *
               C38937 +
           ((C56957 + C56958) * C13625 + (C56959 + C56960) * C84590 +
            (C55989 + C55990) * C13627 + (C55991 + C55992) * C84574 +
            (C60720 + C60721) * C13629 + (C60722 + C60723) * C84550) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C53879 * C8103 + C84344 * C8248 + C53878 * C725 + C53740 * C839) *
                C84550 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C13629 +
            (C60723 + C60722) * C84574 + (C60721 + C60720) * C13627 +
            (C55992 + C55991) * C84590 + (C55990 + C55989) * C13625) *
               C84304 +
           ((C53916 + C53915) * C84550 + (C53914 + C53913) * C13629 +
            (C53912 + C53911) * C84574 + (C53910 + C53909) * C13627 +
            (C53908 + C53907) * C84590 + (C53906 + C53905) * C13625) *
               C38937) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C15867 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84188) *
               C84606 +
           ((C56957 + C56958) * C15867 + (C56959 + C56960) * C84188) * C84599 +
           ((C56961 + C56962) * C15867 + (C56963 + C56964) * C84188) * C84586 +
           ((C53878 * C2599 + C53740 * C2795 + C53879 * C16807 +
             C84344 * C16906) *
                C15867 +
            (C53878 * C2602 + C53740 * C2798 + C53879 * C16809 +
             C84344 * C16908) *
                C84188) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C53879 * C21057 + C84344 * C21202 + C53878 * C2601 +
             C53740 * C2797) *
                C84188 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C15867) *
               C84536 +
           ((C55996 + C55995) * C84188 + (C55994 + C55993) * C15867) * C84586 +
           ((C55992 + C55991) * C84188 + (C55990 + C55989) * C15867) * C84599 +
           ((C53908 + C53907) * C84188 + (C53906 + C53905) * C15867) * C84606) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C39029 +
                      (C13625 * C173 + C84590 * C330 + C13627 * C174 +
                       C84574 * C331 + C13629 * C175 + C84550 * C332) *
                          C38937 +
                      (C14726 + C14727 + C14728) * C39030 +
                      (C14729 + C14730 + C14731) * C84304) *
                         C53740 +
                     ((C28220 + C28221 + C28222) * C39029 +
                      (C28223 + C28224 + C28225) * C38937 +
                      (C13625 * C3446 + C84590 * C3452 + C13627 * C3445 +
                       C84574 * C3451 + C13629 * C3444 + C84550 * C3450) *
                          C39030 +
                      (C13625 * C3547 + C84590 * C3719 + C13627 * C3545 +
                       C84574 * C3718 + C13629 * C3543 + C84550 * C3717) *
                          C84304) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C13629 * C8179 + C84550 * C8315 + C13627 * C3543 +
                       C84574 * C3717 + C13625 * C3545 + C84590 * C3718) *
                          C84304 +
                      (C13629 * C8102 + C84550 * C8103 + C13627 * C3444 +
                       C84574 * C3450 + C13625 * C3445 + C84590 * C3451) *
                          C39030 +
                      (C13629 * C1242 + C84550 * C1346 + C13627 * C1243 +
                       C84574 * C1347 + C13625 * C1244 + C84590 * C1348) *
                          C38937 +
                      (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 +
                       C84574 * C1186 + C13625 * C1182 + C84590 * C1187) *
                          C39029) *
                         C84344 +
                     ((C13629 * C782 + C84550 * C886 + C13627 * C783 +
                       C84574 * C887 + C13625 * C784 + C84590 * C888) *
                          C84304 +
                      (C13629 * C720 + C84550 * C725 + C13627 * C721 +
                       C84574 * C726 + C13625 * C722 + C84590 * C727) *
                          C39030 +
                      (C13629 * C176 + C84550 * C333 + C13627 * C175 +
                       C84574 * C332 + C13625 * C174 + C84590 * C331) *
                          C38937 +
                      (C13629 * C105 + C84550 * C111 + C13627 * C104 +
                       C84574 * C110 + C13625 * C103 + C84590 * C109) *
                          C39029) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C41045 +
                      (C15867 * C173 + C84188 * C330) * C84606 +
                      C16500 * C41046 + C16501 * C84599 + C16502 * C41047 +
                      C16503 * C84586 + C16504 * C41048 + C16505 * C84536) *
                         C53740 +
                     (C19118 * C41045 + C19119 * C84606 + C18277 * C41046 +
                      C18278 * C84599 + C18279 * C41047 + C18280 * C84586 +
                      C25352 * C41048 + C25353 * C84536) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C15867 * C21133 + C84188 * C21269) * C84536 +
                      (C15867 * C21056 + C84188 * C21057) * C41048 +
                      (C15867 * C3544 + C84188 * C3715) * C84586 +
                      (C15867 * C3442 + C84188 * C3448) * C41047 +
                      (C15867 * C3545 + C84188 * C3718) * C84599 +
                      (C15867 * C3445 + C84188 * C3451) * C41046 +
                      (C15867 * C1244 + C84188 * C1348) * C84606 +
                      (C15867 * C1182 + C84188 * C1187) * C41045) *
                         C84344 +
                     ((C15867 * C2714 + C84188 * C2898) * C84536 +
                      (C15867 * C2598 + C84188 * C2601) * C41048 +
                      (C15867 * C1789 + C84188 * C2013) * C84586 +
                      (C15867 * C1682 + C84188 * C1686) * C41047 +
                      (C15867 * C784 + C84188 * C888) * C84599 +
                      (C15867 * C722 + C84188 * C727) * C41046 +
                      (C15867 * C174 + C84188 * C331) * C84606 +
                      (C15867 * C103 + C84188 * C109) * C41045) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[27] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84590 +
                      (C39302 + C39303) * C84574 + (C39304 + C39305) * C84550) *
                         C53740 +
                     ((C45434 + C45435) * C84590 + (C43472 + C43473) * C84574 +
                      (C48647 + C48648) * C84550) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C39266 * C8102 + C40616 + C40616 + C84304 * C8382 +
                       C39265 * C1180 + C40617 + C40617 + C38937 * C1393) *
                          C84550 +
                      (C48648 + C48647) * C84574 + (C43473 + C43472) * C84590) *
                         C84344 +
                     ((C39307 + C39306) * C84550 + (C39305 + C39304) * C84574 +
                      (C39303 + C39302) * C84590) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C84188 * C53740 +
                     (C41271 * C1183 + C42641 + C42641 + C84606 * C1396 +
                      C41272 * C3446 + C42640 + C42640 + C84599 * C3799 +
                      C41273 * C3443 + C42639 + C42639 + C84586 * C3798 +
                      C41274 * C16807 + C42638 + C42638 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C84604 * C90 -
                    ((C41274 * C21056 + C42634 + C42634 + C84536 * C21336 +
                      C41273 * C3442 + C42635 + C42635 + C84586 * C3796 +
                      C41272 * C3445 + C42636 + C42636 + C84599 * C3797 +
                      C41271 * C1182 + C42637 + C42637 + C84606 * C1395) *
                         C84188 * C84344 +
                     (C41307 + C41306 + C41305 + C41304) * C84188 * C53740) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C39029 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C38937 +
            (C56957 + C56958) * C39030 + (C57270 + C57271) * C84304) *
               C84590 +
           ((C53905 + C53906) * C39029 + (C54127 + C54128) * C38937 +
            (C55989 + C55990) * C39030 + (C56314 + C56315) * C84304) *
               C84574 +
           ((C53909 + C53910) * C39029 + (C54129 + C54130) * C38937 +
            (C60720 + C60721) * C39030 + (C61022 + C61023) * C84304) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C53879 * C8179 + C84344 * C8457 + C53878 * C782 + C53740 * C985) *
                C84304 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C39030 +
            (C54132 + C54131) * C38937 + (C53914 + C53913) * C39029) *
               C84550 +
           ((C61023 + C61022) * C84304 + (C60721 + C60720) * C39030 +
            (C54130 + C54129) * C38937 + (C53910 + C53909) * C39029) *
               C84574 +
           ((C56315 + C56314) * C84304 + (C55990 + C55989) * C39030 +
            (C54128 + C54127) * C38937 + (C53906 + C53905) * C39029) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C41045 +
           (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
               C84606 +
           (C56957 + C56958) * C41046 + (C57270 + C57271) * C84599 +
           (C56961 + C56962) * C41047 + (C57272 + C57273) * C84586 +
           (C53878 * C2599 + C53740 * C2795 + C53879 * C16807 +
            C84344 * C16906) *
               C41048 +
           (C53878 * C2715 + C53740 * C3098 + C53879 * C16860 +
            C84344 * C17045) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C53879 * C21133 + C84344 * C21411 + C53878 * C2714 +
            C53740 * C3097) *
               C84536 +
           (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
            C53740 * C2794) *
               C41048 +
           (C56317 + C56316) * C84586 + (C55994 + C55993) * C41047 +
           (C56315 + C56314) * C84599 + (C55990 + C55989) * C41046 +
           (C54128 + C54127) * C84606 + (C53906 + C53905) * C41045) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C53878 +
                      (C13625 * C252 + C84590 * C521 + C13627 * C253 +
                       C84574 * C522 + C13629 * C254 + C84550 * C523) *
                          C53740 +
                      (C28220 + C28221 + C28222) * C53879 +
                      (C28472 + C28473 + C28474) * C84344) *
                         C38937 +
                     ((C14726 + C14727 + C14728) * C53878 +
                      (C14981 + C14982 + C14983) * C53740 +
                      (C13625 * C3446 + C84590 * C3452 + C13627 * C3445 +
                       C84574 * C3451 + C13629 * C3444 + C84550 * C3450) *
                          C53879 +
                      (C13625 * C3633 + C84590 * C3968 + C13627 * C3632 +
                       C84574 * C3967 + C13629 * C3631 + C84550 * C3966) *
                          C84344) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C13629 * C8247 + C84550 * C8524 + C13627 * C3631 +
                       C84574 * C3966 + C13625 * C3632 + C84590 * C3967) *
                          C84344 +
                      (C13629 * C8102 + C84550 * C8103 + C13627 * C3444 +
                       C84574 * C3450 + C13625 * C3445 + C84590 * C3451) *
                          C53879 +
                      (C13629 * C834 + C84550 * C1032 + C13627 * C835 +
                       C84574 * C1033 + C13625 * C836 + C84590 * C1034) *
                          C53740 +
                      (C13629 * C720 + C84550 * C725 + C13627 * C721 +
                       C84574 * C726 + C13625 * C722 + C84590 * C727) *
                          C53878) *
                         C84304 +
                     ((C13629 * C1294 + C84550 * C1492 + C13627 * C1295 +
                       C84574 * C1493 + C13625 * C1296 + C84590 * C1494) *
                          C84344 +
                      (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 +
                       C84574 * C1186 + C13625 * C1182 + C84590 * C1187) *
                          C53879 +
                      (C13629 * C255 + C84550 * C524 + C13627 * C254 +
                       C84574 * C523 + C13625 * C253 + C84590 * C522) *
                          C53740 +
                      (C13629 * C105 + C84550 * C111 + C13627 * C104 +
                       C84574 * C110 + C13625 * C103 + C84590 * C109) *
                          C53878) *
                         C38937) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C53878 +
                      (C15867 * C252 + C84188 * C521) * C53740 +
                      C19118 * C53879 + C19391 * C84344) *
                         C84606 +
                     (C16500 * C53878 + C16660 * C53740 + C18277 * C53879 +
                      C18550 * C84344) *
                         C84599 +
                     (C16502 * C53878 + C16661 * C53740 + C18279 * C53879 +
                      C18552 * C84344) *
                         C84586 +
                     (C16504 * C53878 + C16662 * C53740 + C25352 * C53879 +
                      C25575 * C84344) *
                         C84536) *
                        C84603 * C84604 * C90 -
                    (((C15867 * C21201 + C84188 * C21478) * C84344 +
                      (C15867 * C21056 + C84188 * C21057) * C53879 +
                      (C15867 * C2794 + C84188 * C3180) * C53740 +
                      (C15867 * C2598 + C84188 * C2601) * C53878) *
                         C84536 +
                     ((C15867 * C3629 + C84188 * C3964) * C84344 +
                      (C15867 * C3442 + C84188 * C3448) * C53879 +
                      (C15867 * C1907 + C84188 * C2316) * C53740 +
                      (C15867 * C1682 + C84188 * C1686) * C53878) *
                         C84586 +
                     ((C15867 * C3632 + C84188 * C3967) * C84344 +
                      (C15867 * C3445 + C84188 * C3451) * C53879 +
                      (C15867 * C836 + C84188 * C1034) * C53740 +
                      (C15867 * C722 + C84188 * C727) * C53878) *
                         C84599 +
                     ((C15867 * C1296 + C84188 * C1494) * C84344 +
                      (C15867 * C1182 + C84188 * C1187) * C53879 +
                      (C15867 * C253 + C84188 * C522) * C53740 +
                      (C15867 * C103 + C84188 * C109) * C53878) *
                         C84606) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C53878 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C53740 +
            (C45088 + C45089) * C53879 + (C45752 + C45753) * C84344) *
               C84590 +
           ((C39056 + C39057) * C53878 + (C39530 + C39531) * C53740 +
            (C43130 + C43131) * C53879 + (C43787 + C43788) * C84344) *
               C84574 +
           ((C39060 + C39061) * C53878 + (C39532 + C39533) * C53740 +
            (C48341 + C48342) * C53879 + (C48947 + C48948) * C84344) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C39030 * C8247 + C84304 * C8591 + C39029 * C1294 +
             C38937 * C1539) *
                C84344 +
            (C39030 * C8102 + C84304 * C8179 + C39029 * C1180 +
             C38937 * C1242) *
                C53879 +
            (C39535 + C39534) * C53740 + (C39065 + C39064) * C53878) *
               C84550 +
           ((C48948 + C48947) * C84344 + (C48342 + C48341) * C53879 +
            (C39533 + C39532) * C53740 + (C39061 + C39060) * C53878) *
               C84574 +
           ((C43788 + C43787) * C84344 + (C43131 + C43130) * C53879 +
            (C39531 + C39530) * C53740 + (C39057 + C39056) * C53878) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C53878 +
           (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
            C41047 * C1906 + C84586 * C2393 + C41048 * C2795 + C84536 * C3276) *
               C53740 +
           (C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
            C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
            C84536 * C16860) *
               C53879 +
           (C41045 * C1297 + C84606 * C1542 + C41046 * C3633 + C84599 * C4048 +
            C41047 * C3630 + C84586 * C4047 + C41048 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C84604 * C90 -
          ((C41048 * C21201 + C84536 * C21545 + C41047 * C3629 +
            C84586 * C4045 + C41046 * C3632 + C84599 * C4046 + C41045 * C1296 +
            C84606 * C1541) *
               C84344 +
           (C41048 * C21056 + C84536 * C21133 + C41047 * C3442 +
            C84586 * C3544 + C41046 * C3445 + C84599 * C3545 + C41045 * C1182 +
            C84606 * C1244) *
               C53879 +
           (C41525 + C41524 + C41523 + C41522) * C53740 +
           (C41069 + C41068 + C41067 + C41066) * C53878) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C38937 +
            (C57588 + C57589) * C84304) *
               C84590 +
           ((C54379 + C54380) * C38937 + (C56643 + C56644) * C84304) * C84574 +
           ((C54381 + C54382) * C38937 + (C61326 + C61327) * C84304) * C84550) *
              C84603 * C84604 * C90 -
          (((C54343 * C8102 + C54979 + C54979 + C84344 * C8658 + C54342 * C720 +
             C54980 + C54980 + C53740 * C1126) *
                C84304 +
            (C54384 + C54383) * C38937) *
               C84550 +
           ((C61327 + C61326) * C84304 + (C54382 + C54381) * C38937) * C84574 +
           ((C56644 + C56643) * C84304 + (C54380 + C54379) * C38937) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
            C54346 + C54346 + C84344 * C1589) *
               C84606 +
           (C57588 + C57589) * C84599 + (C57590 + C57591) * C84586 +
           (C54342 * C2599 + C57579 + C57579 + C53740 * C3353 +
            C54343 * C16807 + C57578 + C57578 + C84344 * C17177) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C54343 * C21056 + C57576 + C57576 + C84344 * C21612 +
            C54342 * C2598 + C57577 + C57577 + C53740 * C3352) *
               C84536 +
           (C56646 + C56645) * C84586 + (C56644 + C56643) * C84599 +
           (C54380 + C54379) * C84606) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
             C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
             C84550 * C116) *
                C53740 +
            (C27956 + C27957 + C27958) * C84344) *
               C38937 +
           ((C14462 + C14463 + C14464) * C53740 +
            (C69030 + C69031 + C69032) * C84344) *
               C84304) *
              C84603 * C716 -
          (((C13628 * C3441 + C15209 + C15209 + C84550 * C3453 +
             C13626 * C3442 + C15210 + C15210 + C84574 * C3454 +
             C13624 * C3443 + C15211 + C15211 + C84590 * C3455) *
                C84344 +
            (C14467 + C14466 + C14465) * C53740) *
               C84304 +
           ((C69032 + C69031 + C69030) * C84344 +
            (C14464 + C14463 + C14462) * C53740) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C53740 +
            C18832 * C84344) *
               C84606 +
           (C71386 + C71387) * C84599 + (C71388 + C71389) * C84586 +
           (C71390 + C71391) * C84536) *
              C84603 * C716 -
          (((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84344 +
            C16328 * C53740) *
               C84536 +
           (C71391 + C71390) * C84586 + (C71389 + C71388) * C84599 +
           (C71387 + C71386) * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C13625 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84590 +
            (C39056 + C39057) * C13627 + (C39058 + C39059) * C84574 +
            (C39060 + C39061) * C13629 + (C39062 + C39063) * C84550) *
               C53740 +
           ((C45088 + C45089) * C13625 + (C45090 + C45091) * C84590 +
            (C43130 + C43131) * C13627 + (C43132 + C43133) * C84574 +
            (C48341 + C48342) * C13629 + (C48343 + C48344) * C84550) *
               C84344) *
              C84603 * C716 -
          (((C39030 * C3447 + C84304 * C3548 + C39029 * C3450 +
             C38937 * C3549) *
                C84550 +
            (C39030 * C3441 + C84304 * C3542 + C39029 * C3444 +
             C38937 * C3543) *
                C13629 +
            (C39030 * C3448 + C84304 * C3550 + C39029 * C3451 +
             C38937 * C3551) *
                C84574 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C13627 +
            (C39030 * C3449 + C84304 * C3552 + C39029 * C3452 +
             C38937 * C3553) *
                C84590 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C13625) *
               C84344 +
           ((C39030 * C1687 + C84304 * C1794 + C39029 * C726 + C38937 * C788) *
                C84550 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C13629 +
            (C39030 * C1686 + C84304 * C1793 + C39029 * C727 + C38937 * C789) *
                C84574 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C13627 +
            (C39030 * C1685 + C84304 * C1792 + C39029 * C728 + C38937 * C790) *
                C84590 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C13625) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
             C41047 * C1685 + C84586 * C1792 + C41048 * C2602 +
             C84536 * C2718) *
                C84188) *
               C53740 +
           ((C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
             C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C41045 * C1188 + C84606 * C1250 + C41046 * C3452 + C84599 * C3553 +
             C41047 * C3449 + C84586 * C3552 + C41048 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C716 -
          (((C41048 * C16808 + C84536 * C16861 + C41047 * C16809 +
             C84586 * C16862 + C41046 * C3449 + C84599 * C3552 +
             C41045 * C3452 + C84606 * C3553) *
                C84188 +
            (C41048 * C16806 + C84536 * C16859 + C41047 * C16807 +
             C84586 * C16860 + C41046 * C3443 + C84599 * C3546 +
             C41045 * C3446 + C84606 * C3547) *
                C15867) *
               C84344 +
           ((C41048 * C15870 + C84536 * C15933 + C41047 * C2602 +
             C84586 * C2718 + C41046 * C1685 + C84599 * C1792 + C41045 * C728 +
             C84606 * C790) *
                C84188 +
            (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
             C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
             C84606 * C785) *
                C15867) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C13625 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84590 +
            (C53905 + C53906) * C13627 + (C53907 + C53908) * C84574 +
            (C53909 + C53910) * C13629 + (C53911 + C53912) * C84550) *
               C38937 +
           ((C56957 + C56958) * C13625 + (C56959 + C56960) * C84590 +
            (C55989 + C55990) * C13627 + (C55991 + C55992) * C84574 +
            (C60720 + C60721) * C13629 + (C60722 + C60723) * C84550) *
               C84304) *
              C84603 * C716 -
          (((C53879 * C3447 + C84344 * C3634 + C53878 * C1687 +
             C53740 * C1912) *
                C84550 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C13629 +
            (C55996 + C55995) * C84574 + (C55994 + C55993) * C13627 +
            (C56964 + C56963) * C84590 + (C56962 + C56961) * C13625) *
               C84304 +
           ((C60723 + C60722) * C84550 + (C60721 + C60720) * C13629 +
            (C55992 + C55991) * C84574 + (C55990 + C55989) * C13627 +
            (C56960 + C56959) * C84590 + (C56958 + C56957) * C13625) *
               C38937) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C15867 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84188) *
               C84606 +
           ((C56957 + C56958) * C15867 + (C56959 + C56960) * C84188) * C84599 +
           ((C56961 + C56962) * C15867 + (C56963 + C56964) * C84188) * C84586 +
           ((C71532 + C71533) * C15867 + (C71534 + C71535) * C84188) * C84536) *
              C84603 * C716 -
          (((C53879 * C16808 + C84344 * C16907 + C53878 * C15870 +
             C53740 * C15979) *
                C84188 +
            (C53879 * C16806 + C84344 * C16905 + C53878 * C15868 +
             C53740 * C15977) *
                C15867) *
               C84536 +
           ((C71535 + C71534) * C84188 + (C71533 + C71532) * C15867) * C84586 +
           ((C56964 + C56963) * C84188 + (C56962 + C56961) * C15867) * C84599 +
           ((C56960 + C56959) * C84188 + (C56958 + C56957) * C15867) * C84606) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[28] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C39029 +
                      (C13625 * C173 + C84590 * C330 + C13627 * C174 +
                       C84574 * C331 + C13629 * C175 + C84550 * C332) *
                          C38937 +
                      (C14726 + C14727 + C14728) * C39030 +
                      (C14729 + C14730 + C14731) * C84304) *
                         C53740 +
                     ((C28220 + C28221 + C28222) * C39029 +
                      (C28223 + C28224 + C28225) * C38937 +
                      (C69339 + C69340 + C69341) * C39030 +
                      (C69342 + C69343 + C69344) * C84304) *
                         C84344) *
                        C84603 * C716 -
                    (((C13629 * C3542 + C84550 * C3714 + C13627 * C3544 +
                       C84574 * C3715 + C13625 * C3546 + C84590 * C3716) *
                          C84304 +
                      (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 +
                       C84574 * C3448 + C13625 * C3443 + C84590 * C3449) *
                          C39030 +
                      (C69344 + C69343 + C69342) * C38937 +
                      (C69341 + C69340 + C69339) * C39029) *
                         C84344 +
                     ((C14737 + C14736 + C14735) * C84304 +
                      (C14734 + C14733 + C14732) * C39030 +
                      (C14731 + C14730 + C14729) * C38937 +
                      (C14728 + C14727 + C14726) * C39029) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C41045 +
                      (C15867 * C173 + C84188 * C330) * C84606 +
                      C16500 * C41046 + C16501 * C84599 + C16502 * C41047 +
                      C16503 * C84586 + C16504 * C41048 + C16505 * C84536) *
                         C53740 +
                     (C19118 * C41045 + C19119 * C84606 + C18277 * C41046 +
                      C18278 * C84599 + C18279 * C41047 + C18280 * C84586 +
                      C25352 * C41048 + C25353 * C84536) *
                         C84344) *
                        C84603 * C716 -
                    (((C15867 * C16859 + C84188 * C16951) * C84536 +
                      (C15867 * C16806 + C84188 * C16808) * C41048 +
                      C25353 * C84586 + C25352 * C41047 + C18280 * C84599 +
                      C18279 * C41046 + C18278 * C84606 + C18277 * C41045) *
                         C84344 +
                     (C16507 * C84536 + C16506 * C41048 + C16505 * C84586 +
                      C16504 * C41047 + C16503 * C84599 + C16502 * C41046 +
                      C16501 * C84606 + C16500 * C41045) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[28] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84590 +
                      (C39302 + C39303) * C84574 + (C39304 + C39305) * C84550) *
                         C53740 +
                     ((C45434 + C45435) * C84590 + (C43472 + C43473) * C84574 +
                      (C48647 + C48648) * C84550) *
                         C84344) *
                        C84603 * C716 -
                    (((C39266 * C3441 + C49570 + C49570 + C84304 * C3794 +
                       C39265 * C3444 + C49571 + C49571 + C38937 * C3795) *
                          C84550 +
                      (C39266 * C3442 + C44444 + C44444 + C84304 * C3796 +
                       C39265 * C3445 + C44445 + C44445 + C38937 * C3797) *
                          C84574 +
                      (C39266 * C3443 + C44446 + C44446 + C84304 * C3798 +
                       C39265 * C3446 + C44447 + C44447 + C38937 * C3799) *
                          C84590) *
                         C84344 +
                     ((C39266 * C1683 + C39996 + C39996 + C84304 * C2095 +
                       C39265 * C721 + C39997 + C39997 + C38937 * C934) *
                          C84550 +
                      (C39266 * C1682 + C39998 + C39998 + C84304 * C2094 +
                       C39265 * C722 + C39999 + C39999 + C38937 * C935) *
                          C84574 +
                      (C39266 * C1681 + C40000 + C40000 + C84304 * C2093 +
                       C39265 * C723 + C40001 + C40001 + C38937 * C936) *
                          C84590) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C84188 * C53740 +
                     (C41271 * C1183 + C42641 + C42641 + C84606 * C1396 +
                      C41272 * C3446 + C42640 + C42640 + C84599 * C3799 +
                      C41273 * C3443 + C42639 + C42639 + C84586 * C3798 +
                      C41274 * C16807 + C42638 + C42638 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C716 -
                    ((C41274 * C16806 + C71668 + C71668 + C84536 * C16995 +
                      C41273 * C16807 + C71669 + C71669 + C84586 * C16996 +
                      C41272 * C3443 + C71670 + C71670 + C84599 * C3798 +
                      C41271 * C3446 + C71671 + C71671 + C84606 * C3799) *
                         C84188 * C84344 +
                     (C41274 * C15868 + C42010 + C42010 + C84536 * C16072 +
                      C41273 * C2599 + C42011 + C42011 + C84586 * C3012 +
                      C41272 * C1681 + C42012 + C42012 + C84599 * C2093 +
                      C41271 * C723 + C42013 + C42013 + C84606 * C936) *
                         C84188 * C53740) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C39029 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C38937 +
            (C56957 + C56958) * C39030 + (C57270 + C57271) * C84304) *
               C84590 +
           ((C53905 + C53906) * C39029 + (C54127 + C54128) * C38937 +
            (C55989 + C55990) * C39030 + (C56314 + C56315) * C84304) *
               C84574 +
           ((C53909 + C53910) * C39029 + (C54129 + C54130) * C38937 +
            (C60720 + C60721) * C39030 + (C61022 + C61023) * C84304) *
               C84550) *
              C84603 * C716 -
          (((C53879 * C3542 + C84344 * C3883 + C53878 * C1790 +
             C53740 * C2215) *
                C84304 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C39030 +
            (C61023 + C61022) * C38937 + (C60721 + C60720) * C39029) *
               C84550 +
           ((C56317 + C56316) * C84304 + (C55994 + C55993) * C39030 +
            (C56315 + C56314) * C38937 + (C55990 + C55989) * C39029) *
               C84574 +
           ((C57273 + C57272) * C84304 + (C56962 + C56961) * C39030 +
            (C57271 + C57270) * C38937 + (C56958 + C56957) * C39029) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C41045 +
           (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
               C84606 +
           (C56957 + C56958) * C41046 + (C57270 + C57271) * C84599 +
           (C56961 + C56962) * C41047 + (C57272 + C57273) * C84586 +
           (C71532 + C71533) * C41048 + (C71742 + C71743) * C84536) *
              C84188 * C84603 * C716 -
          ((C53879 * C16859 + C84344 * C17044 + C53878 * C15931 +
            C53740 * C16126) *
               C84536 +
           (C53879 * C16806 + C84344 * C16905 + C53878 * C15868 +
            C53740 * C15977) *
               C41048 +
           (C71743 + C71742) * C84586 + (C71533 + C71532) * C41047 +
           (C57273 + C57272) * C84599 + (C56962 + C56961) * C41046 +
           (C57271 + C57270) * C84606 + (C56958 + C56957) * C41045) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[28] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C53878 +
                      (C13625 * C252 + C84590 * C521 + C13627 * C253 +
                       C84574 * C522 + C13629 * C254 + C84550 * C523) *
                          C53740 +
                      (C28220 + C28221 + C28222) * C53879 +
                      (C28472 + C28473 + C28474) * C84344) *
                         C38937 +
                     ((C14726 + C14727 + C14728) * C53878 +
                      (C14981 + C14982 + C14983) * C53740 +
                      (C69339 + C69340 + C69341) * C53879 +
                      (C69645 + C69646 + C69647) * C84344) *
                         C84304) *
                        C84603 * C716 -
                    (((C13629 * C3628 + C84550 * C3963 + C13627 * C3629 +
                       C84574 * C3964 + C13625 * C3630 + C84590 * C3965) *
                          C84344 +
                      (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 +
                       C84574 * C3448 + C13625 * C3443 + C84590 * C3449) *
                          C53879 +
                      (C14986 + C14985 + C14984) * C53740 +
                      (C14734 + C14733 + C14732) * C53878) *
                         C84304 +
                     ((C69647 + C69646 + C69645) * C84344 +
                      (C69341 + C69340 + C69339) * C53879 +
                      (C14983 + C14982 + C14981) * C53740 +
                      (C14728 + C14727 + C14726) * C53878) *
                         C38937) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C53878 +
                      (C15867 * C252 + C84188 * C521) * C53740 +
                      C19118 * C53879 + C19391 * C84344) *
                         C84606 +
                     (C71810 + C71811 + C71812 + C71813) * C84599 +
                     (C71814 + C71815 + C71816 + C71817) * C84586 +
                     (C71818 + C71819 + C71820 + C71821) * C84536) *
                        C84603 * C716 -
                    (((C15867 * C16905 + C84188 * C17088) * C84344 +
                      (C15867 * C16806 + C84188 * C16808) * C53879 +
                      C16663 * C53740 + C16506 * C53878) *
                         C84536 +
                     (C71821 + C71820 + C71819 + C71818) * C84586 +
                     (C71817 + C71816 + C71815 + C71814) * C84599 +
                     (C71813 + C71812 + C71811 + C71810) * C84606) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C53878 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C53740 +
            (C45088 + C45089) * C53879 + (C45752 + C45753) * C84344) *
               C84590 +
           ((C39056 + C39057) * C53878 + (C39530 + C39531) * C53740 +
            (C43130 + C43131) * C53879 + (C43787 + C43788) * C84344) *
               C84574 +
           ((C39060 + C39061) * C53878 + (C39532 + C39533) * C53740 +
            (C48341 + C48342) * C53879 + (C48947 + C48948) * C84344) *
               C84550) *
              C84603 * C716 -
          (((C39030 * C3628 + C84304 * C4043 + C39029 * C3631 +
             C38937 * C4044) *
                C84344 +
            (C39030 * C3441 + C84304 * C3542 + C39029 * C3444 +
             C38937 * C3543) *
                C53879 +
            (C39030 * C1908 + C84304 * C2395 + C39029 * C835 + C38937 * C1080) *
                C53740 +
            (C39030 * C1683 + C84304 * C1790 + C39029 * C721 + C38937 * C783) *
                C53878) *
               C84550 +
           ((C39030 * C3629 + C84304 * C4045 + C39029 * C3632 +
             C38937 * C4046) *
                C84344 +
            (C39030 * C3442 + C84304 * C3544 + C39029 * C3445 +
             C38937 * C3545) *
                C53879 +
            (C39030 * C1907 + C84304 * C2394 + C39029 * C836 + C38937 * C1081) *
                C53740 +
            (C39030 * C1682 + C84304 * C1789 + C39029 * C722 + C38937 * C784) *
                C53878) *
               C84574 +
           ((C39030 * C3630 + C84304 * C4047 + C39029 * C3633 +
             C38937 * C4048) *
                C84344 +
            (C39030 * C3443 + C84304 * C3546 + C39029 * C3446 +
             C38937 * C3547) *
                C53879 +
            (C39030 * C1906 + C84304 * C2393 + C39029 * C837 + C38937 * C1082) *
                C53740 +
            (C39030 * C1681 + C84304 * C1788 + C39029 * C723 + C38937 * C785) *
                C53878) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C53878 +
           (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
            C41047 * C1906 + C84586 * C2393 + C41048 * C2795 + C84536 * C3276) *
               C53740 +
           (C41045 * C1183 + C84606 * C1245 + C41046 * C3446 + C84599 * C3547 +
            C41047 * C3443 + C84586 * C3546 + C41048 * C16807 +
            C84536 * C16860) *
               C53879 +
           (C41045 * C1297 + C84606 * C1542 + C41046 * C3633 + C84599 * C4048 +
            C41047 * C3630 + C84586 * C4047 + C41048 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C716 -
          ((C41048 * C16905 + C84536 * C17132 + C41047 * C16906 +
            C84586 * C17133 + C41046 * C3630 + C84599 * C4047 + C41045 * C3633 +
            C84606 * C4048) *
               C84344 +
           (C41048 * C16806 + C84536 * C16859 + C41047 * C16807 +
            C84586 * C16860 + C41046 * C3443 + C84599 * C3546 + C41045 * C3446 +
            C84606 * C3547) *
               C53879 +
           (C41048 * C15977 + C84536 * C16214 + C41047 * C2795 +
            C84586 * C3276 + C41046 * C1906 + C84599 * C2393 + C41045 * C837 +
            C84606 * C1082) *
               C53740 +
           (C41048 * C15868 + C84536 * C15931 + C41047 * C2599 +
            C84586 * C2715 + C41046 * C1681 + C84599 * C1788 + C41045 * C723 +
            C84606 * C785) *
               C53878) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C38937 +
            (C57588 + C57589) * C84304) *
               C84590 +
           ((C54379 + C54380) * C38937 + (C56643 + C56644) * C84304) * C84574 +
           ((C54381 + C54382) * C38937 + (C61326 + C61327) * C84304) * C84550) *
              C84603 * C716 -
          (((C54343 * C3441 + C56633 + C56633 + C84344 * C4123 +
             C54342 * C1683 + C56634 + C56634 + C53740 * C2491) *
                C84304 +
            (C61327 + C61326) * C38937) *
               C84550 +
           ((C56646 + C56645) * C84304 + (C56644 + C56643) * C38937) * C84574 +
           ((C57591 + C57590) * C84304 + (C57589 + C57588) * C38937) * C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
            C54346 + C54346 + C84344 * C1589) *
               C84606 +
           (C57588 + C57589) * C84599 + (C57590 + C57591) * C84586 +
           (C71964 + C71965) * C84536) *
              C84188 * C84603 * C716 -
          ((C54343 * C16806 + C71958 + C71958 + C84344 * C17176 +
            C54342 * C15868 + C71959 + C71959 + C53740 * C16258) *
               C84536 +
           (C71965 + C71964) * C84586 + (C57591 + C57590) * C84599 +
           (C57589 + C57588) * C84606) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
             C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
             C84550 * C116) *
                C53740 +
            (C27956 + C27957 + C27958) * C84344) *
               C38937 +
           ((C14462 + C14463 + C14464) * C53740 +
            (C69030 + C69031 + C69032) * C84344) *
               C84304) *
              C1177 -
          (((C13628 * C5113 + C27251 + C27251 + C84550 * C5119 +
             C13626 * C5114 + C27252 + C27252 + C84574 * C5120 +
             C13624 * C5115 + C27253 + C27253 + C84590 * C5121) *
                C84344 +
            (C69032 + C69031 + C69030) * C53740) *
               C84304 +
           ((C27961 + C27960 + C27959) * C84344 +
            (C27958 + C27957 + C27956) * C53740) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C53740 +
            C18832 * C84344) *
               C84606 +
           (C71386 + C71387) * C84599 + (C71388 + C71389) * C84586 +
           (C71390 + C71391) * C84536) *
              C1177 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84344 +
            C25136 * C53740) *
               C84536 +
           (C17993 * C84344 + C17992 * C53740) * C84586 +
           (C17991 * C84344 + C17990 * C53740) * C84599 +
           (C18833 * C84344 + C18832 * C53740) * C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C13625 +
            (C39029 * C108 + C38937 * C179 + C39030 * C728 + C84304 * C790) *
                C84590 +
            (C39056 + C39057) * C13627 + (C39058 + C39059) * C84574 +
            (C39060 + C39061) * C13629 + (C39062 + C39063) * C84550) *
               C53740 +
           ((C45088 + C45089) * C13625 + (C45090 + C45091) * C84590 +
            (C43130 + C43131) * C13627 + (C43132 + C43133) * C84574 +
            (C48341 + C48342) * C13629 + (C48343 + C48344) * C84550) *
               C84344) *
              C1177 -
          (((C39030 * C5116 + C84304 * C5202 + C39029 * C4218 +
             C38937 * C4313) *
                C84550 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C13629 +
            (C43137 + C43136) * C84574 + (C43135 + C43134) * C13627 +
            (C45095 + C45094) * C84590 + (C45093 + C45092) * C13625) *
               C84344 +
           ((C48344 + C48343) * C84550 + (C48342 + C48341) * C13629 +
            (C43133 + C43132) * C84574 + (C43131 + C43130) * C13627 +
            (C45091 + C45090) * C84590 + (C45089 + C45088) * C13625) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
             C41047 * C1681 + C84586 * C1788 + C41048 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C41045 * C108 + C84606 * C179 + C41046 * C728 + C84599 * C790 +
             C41047 * C1685 + C84586 * C1792 + C41048 * C2602 +
             C84536 * C2718) *
                C84188) *
               C53740 +
           ((C72114 + C72115 + C72116 + C72117) * C15867 +
            (C72118 + C72119 + C72120 + C72121) * C84188) *
               C84344) *
              C1177 -
          (((C41048 * C17968 + C84536 * C18072 + C41047 * C17256 +
             C84586 * C17345 + C41046 * C5118 + C84599 * C5204 +
             C41045 * C4216 + C84606 * C4311) *
                C84188 +
            (C41048 * C17967 + C84536 * C18071 + C41047 * C17254 +
             C84586 * C17343 + C41046 * C5115 + C84599 * C5201 +
             C41045 * C4212 + C84606 * C4307) *
                C15867) *
               C84344 +
           ((C72121 + C72120 + C72119 + C72118) * C84188 +
            (C72117 + C72116 + C72115 + C72114) * C15867) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C13625 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84590 +
            (C53905 + C53906) * C13627 + (C53907 + C53908) * C84574 +
            (C53909 + C53910) * C13629 + (C53911 + C53912) * C84550) *
               C38937 +
           ((C56957 + C56958) * C13625 + (C56959 + C56960) * C84590 +
            (C55989 + C55990) * C13627 + (C55991 + C55992) * C84574 +
            (C60720 + C60721) * C13629 + (C60722 + C60723) * C84550) *
               C84304) *
              C1177 -
          (((C53879 * C5116 + C84344 * C5282 + C53878 * C3450 +
             C53740 * C3637) *
                C84550 +
            (C53879 * C5113 + C84344 * C5279 + C53878 * C3444 +
             C53740 * C3631) *
                C13629 +
            (C53879 * C5117 + C84344 * C5283 + C53878 * C3451 +
             C53740 * C3638) *
                C84574 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C13627 +
            (C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C84590 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C13625) *
               C84304 +
           ((C53879 * C4218 + C84344 * C4422 + C53878 * C1186 +
             C53740 * C1300) *
                C84550 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C13629 +
            (C53879 * C4217 + C84344 * C4421 + C53878 * C1187 +
             C53740 * C1301) *
                C84574 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C13627 +
            (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C84590 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C13625) *
               C38937) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C15867 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84188) *
               C84606 +
           ((C56957 + C56958) * C15867 + (C56959 + C56960) * C84188) * C84599 +
           ((C56961 + C56962) * C15867 + (C56963 + C56964) * C84188) * C84586 +
           ((C71532 + C71533) * C15867 + (C71534 + C71535) * C84188) * C84536) *
              C1177 -
          (((C53879 * C17968 + C84344 * C18148 + C53878 * C16809 +
             C53740 * C16908) *
                C84188 +
            (C53879 * C17967 + C84344 * C18147 + C53878 * C16807 +
             C53740 * C16906) *
                C15867) *
               C84536 +
           ((C53879 * C17256 + C84344 * C17423 + C53878 * C3449 +
             C53740 * C3636) *
                C84188 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C15867) *
               C84586 +
           ((C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C84188 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C15867) *
               C84599 +
           ((C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C84188 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C15867) *
               C84606) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C39029 +
                      (C13625 * C173 + C84590 * C330 + C13627 * C174 +
                       C84574 * C331 + C13629 * C175 + C84550 * C332) *
                          C38937 +
                      (C14726 + C14727 + C14728) * C39030 +
                      (C14729 + C14730 + C14731) * C84304) *
                         C53740 +
                     ((C28220 + C28221 + C28222) * C39029 +
                      (C28223 + C28224 + C28225) * C38937 +
                      (C69339 + C69340 + C69341) * C39030 +
                      (C69342 + C69343 + C69344) * C84304) *
                         C84344) *
                        C1177 -
                    (((C13629 * C5199 + C84550 * C5359 + C13627 * C5200 +
                       C84574 * C5360 + C13625 * C5201 + C84590 * C5361) *
                          C84304 +
                      (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 +
                       C84574 * C5117 + C13625 * C5115 + C84590 * C5118) *
                          C39030 +
                      (C28231 + C28230 + C28229) * C38937 +
                      (C28228 + C28227 + C28226) * C39029) *
                         C84344 +
                     ((C69344 + C69343 + C69342) * C84304 +
                      (C69341 + C69340 + C69339) * C39030 +
                      (C28225 + C28224 + C28223) * C38937 +
                      (C28222 + C28221 + C28220) * C39029) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C41045 +
                      (C15867 * C173 + C84188 * C330) * C84606 +
                      C16500 * C41046 + C16501 * C84599 + C16502 * C41047 +
                      C16503 * C84586 + C16504 * C41048 + C16505 * C84536) *
                         C53740 +
                     (C72254 + C72255 + C72256 + C72257 + C72258 + C72259 +
                      C72260 + C72261) *
                         C84344) *
                        C1177 -
                    (((C15867 * C18071 + C84188 * C18259) * C84536 +
                      (C15867 * C17967 + C84188 * C17968) * C41048 +
                      C18284 * C84586 + C18283 * C41047 + C18282 * C84599 +
                      C18281 * C41046 + C19121 * C84606 + C19120 * C41045) *
                         C84344 +
                     (C72261 + C72260 + C72259 + C72258 + C72257 + C72256 +
                      C72255 + C72254) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C39265 * C102 + C39268 + C39268 + C38937 * C379 +
                       C39266 * C723 + C39269 + C39269 + C84304 * C936) *
                          C84590 +
                      (C39302 + C39303) * C84574 + (C39304 + C39305) * C84550) *
                         C53740 +
                     ((C45434 + C45435) * C84590 + (C43472 + C43473) * C84574 +
                      (C48647 + C48648) * C84550) *
                         C84344) *
                        C1177 -
                    (((C39266 * C5113 + C43462 + C43462 + C84304 * C5436 +
                       C39265 * C4214 + C43463 + C43463 + C38937 * C4614) *
                          C84550 +
                      (C43475 + C43474) * C84574 + (C45437 + C45436) * C84590) *
                         C84344 +
                     ((C48648 + C48647) * C84550 + (C43473 + C43472) * C84574 +
                      (C45435 + C45434) * C84590) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C41271 * C102 + C41276 + C41276 + C84606 * C379 +
                      C41272 * C723 + C41277 + C41277 + C84599 * C936 +
                      C41273 * C1681 + C41278 + C41278 + C84586 * C2093 +
                      C41274 * C2599 + C41279 + C41279 + C84536 * C3012) *
                         C84188 * C53740 +
                     (C72348 + C72349 + C72350 + C72351) * C84188 * C84344) *
                        C1177 -
                    ((C41274 * C17967 + C72336 + C72336 + C84536 * C18358 +
                      C41273 * C17254 + C72337 + C72337 + C84586 * C17575 +
                      C41272 * C5115 + C72338 + C72338 + C84599 * C5438 +
                      C41271 * C4212 + C72339 + C72339 + C84606 * C4612) *
                         C84188 * C84344 +
                     (C72351 + C72350 + C72349 + C72348) * C84188 * C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C39029 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C38937 +
            (C56957 + C56958) * C39030 + (C57270 + C57271) * C84304) *
               C84590 +
           ((C53905 + C53906) * C39029 + (C54127 + C54128) * C38937 +
            (C55989 + C55990) * C39030 + (C56314 + C56315) * C84304) *
               C84574 +
           ((C53909 + C53910) * C39029 + (C54129 + C54130) * C38937 +
            (C60720 + C60721) * C39030 + (C61022 + C61023) * C84304) *
               C84550) *
              C1177 -
          (((C53879 * C5199 + C84344 * C5519 + C53878 * C3543 +
             C53740 * C3884) *
                C84304 +
            (C53879 * C5113 + C84344 * C5279 + C53878 * C3444 +
             C53740 * C3631) *
                C39030 +
            (C53879 * C4309 + C84344 * C4716 + C53878 * C1243 +
             C53740 * C1446) *
                C38937 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C39029) *
               C84550 +
           ((C53879 * C5200 + C84344 * C5520 + C53878 * C3545 +
             C53740 * C3886) *
                C84304 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C39030 +
            (C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C38937 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C39029) *
               C84574 +
           ((C53879 * C5201 + C84344 * C5521 + C53878 * C3547 +
             C53740 * C3888) *
                C84304 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C39030 +
            (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C38937 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C39029) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C41045 +
           (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
               C84606 +
           (C56957 + C56958) * C41046 + (C57270 + C57271) * C84599 +
           (C56961 + C56962) * C41047 + (C57272 + C57273) * C84586 +
           (C71532 + C71533) * C41048 + (C71742 + C71743) * C84536) *
              C84188 * C1177 -
          ((C53879 * C18071 + C84344 * C18439 + C53878 * C16860 +
            C53740 * C17045) *
               C84536 +
           (C53879 * C17967 + C84344 * C18147 + C53878 * C16807 +
            C53740 * C16906) *
               C41048 +
           (C53879 * C17343 + C84344 * C17657 + C53878 * C3546 +
            C53740 * C3887) *
               C84586 +
           (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
            C53740 * C3630) *
               C41047 +
           (C53879 * C5201 + C84344 * C5521 + C53878 * C3547 + C53740 * C3888) *
               C84599 +
           (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 + C53740 * C3633) *
               C41046 +
           (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 + C53740 * C1448) *
               C84606 +
           (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 + C53740 * C1297) *
               C41045) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13625 * C102 + C84590 * C108 + C13627 * C103 +
                       C84574 * C109 + C13629 * C104 + C84550 * C110) *
                          C53878 +
                      (C13625 * C252 + C84590 * C521 + C13627 * C253 +
                       C84574 * C522 + C13629 * C254 + C84550 * C523) *
                          C53740 +
                      (C28220 + C28221 + C28222) * C53879 +
                      (C28472 + C28473 + C28474) * C84344) *
                         C38937 +
                     ((C14726 + C14727 + C14728) * C53878 +
                      (C14981 + C14982 + C14983) * C53740 +
                      (C69339 + C69340 + C69341) * C53879 +
                      (C69645 + C69646 + C69647) * C84344) *
                         C84304) *
                        C1177 -
                    (((C13629 * C5279 + C84550 * C5596 + C13627 * C5280 +
                       C84574 * C5597 + C13625 * C5281 + C84590 * C5598) *
                          C84344 +
                      (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 +
                       C84574 * C5117 + C13625 * C5115 + C84590 * C5118) *
                          C53879 +
                      (C69647 + C69646 + C69645) * C53740 +
                      (C69341 + C69340 + C69339) * C53878) *
                         C84304 +
                     ((C28477 + C28476 + C28475) * C84344 +
                      (C28228 + C28227 + C28226) * C53879 +
                      (C28474 + C28473 + C28472) * C53740 +
                      (C28222 + C28221 + C28220) * C53878) *
                         C38937) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C15867 * C102 + C84188 * C108) * C53878 +
                      (C15867 * C252 + C84188 * C521) * C53740 +
                      C19118 * C53879 + C19391 * C84344) *
                         C84606 +
                     (C71810 + C71811 + C71812 + C71813) * C84599 +
                     (C71814 + C71815 + C71816 + C71817) * C84586 +
                     (C71818 + C71819 + C71820 + C71821) * C84536) *
                        C1177 -
                    (((C15867 * C18147 + C84188 * C18532) * C84344 +
                      (C15867 * C17967 + C84188 * C17968) * C53879 +
                      C25575 * C53740 + C25352 * C53878) *
                         C84536 +
                     (C18553 * C84344 + C18283 * C53879 + C18552 * C53740 +
                      C18279 * C53878) *
                         C84586 +
                     (C18551 * C84344 + C18281 * C53879 + C18550 * C53740 +
                      C18277 * C53878) *
                         C84599 +
                     (C19392 * C84344 + C19120 * C53879 + C19391 * C53740 +
                      C19118 * C53878) *
                         C84606) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C39029 * C102 + C38937 * C173 + C39030 * C723 + C84304 * C785) *
                C53878 +
            (C39029 * C252 + C38937 * C569 + C39030 * C837 + C84304 * C1082) *
                C53740 +
            (C45088 + C45089) * C53879 + (C45752 + C45753) * C84344) *
               C84590 +
           ((C39056 + C39057) * C53878 + (C39530 + C39531) * C53740 +
            (C43130 + C43131) * C53879 + (C43787 + C43788) * C84344) *
               C84574 +
           ((C39060 + C39061) * C53878 + (C39532 + C39533) * C53740 +
            (C48341 + C48342) * C53879 + (C48947 + C48948) * C84344) *
               C84550) *
              C1177 -
          (((C39030 * C5279 + C84304 * C5673 + C39029 * C4418 +
             C38937 * C4890) *
                C84344 +
            (C39030 * C5113 + C84304 * C5199 + C39029 * C4214 +
             C38937 * C4309) *
                C53879 +
            (C48948 + C48947) * C53740 + (C48342 + C48341) * C53878) *
               C84550 +
           ((C43790 + C43789) * C84344 + (C43135 + C43134) * C53879 +
            (C43788 + C43787) * C53740 + (C43131 + C43130) * C53878) *
               C84574 +
           ((C45755 + C45754) * C84344 + (C45093 + C45092) * C53879 +
            (C45753 + C45752) * C53740 + (C45089 + C45088) * C53878) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C41045 * C102 + C84606 * C173 + C41046 * C723 + C84599 * C785 +
            C41047 * C1681 + C84586 * C1788 + C41048 * C2599 + C84536 * C2715) *
               C53878 +
           (C41045 * C252 + C84606 * C569 + C41046 * C837 + C84599 * C1082 +
            C41047 * C1906 + C84586 * C2393 + C41048 * C2795 + C84536 * C3276) *
               C53740 +
           (C72114 + C72115 + C72116 + C72117) * C53879 +
           (C72558 + C72559 + C72560 + C72561) * C84344) *
              C84188 * C1177 -
          ((C41048 * C18147 + C84536 * C18631 + C41047 * C17421 +
            C84586 * C17809 + C41046 * C5281 + C84599 * C5675 + C41045 * C4416 +
            C84606 * C4888) *
               C84344 +
           (C41048 * C17967 + C84536 * C18071 + C41047 * C17254 +
            C84586 * C17343 + C41046 * C5115 + C84599 * C5201 + C41045 * C4212 +
            C84606 * C4307) *
               C53879 +
           (C72561 + C72560 + C72559 + C72558) * C53740 +
           (C72117 + C72116 + C72115 + C72114) * C53878) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C38937 +
            (C57588 + C57589) * C84304) *
               C84590 +
           ((C54379 + C54380) * C38937 + (C56643 + C56644) * C84304) * C84574 +
           ((C54381 + C54382) * C38937 + (C61326 + C61327) * C84304) * C84550) *
              C1177 -
          (((C54343 * C5113 + C63092 + C63092 + C84344 * C5750 +
             C54342 * C3444 + C63093 + C63093 + C53740 * C4124) *
                C84304 +
            (C54343 * C4214 + C55655 + C55655 + C84344 * C4995 +
             C54342 * C1181 + C55656 + C55656 + C53740 * C1587) *
                C38937) *
               C84550 +
           ((C54343 * C5114 + C58476 + C58476 + C84344 * C5751 +
             C54342 * C3445 + C58477 + C58477 + C53740 * C4126) *
                C84304 +
            (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
             C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                C38937) *
               C84574 +
           ((C54343 * C5115 + C58480 + C58480 + C84344 * C5752 +
             C54342 * C3446 + C58481 + C58481 + C53740 * C4128) *
                C84304 +
            (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
             C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                C38937) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
            C54346 + C54346 + C84344 * C1589) *
               C84606 +
           (C57588 + C57589) * C84599 + (C57590 + C57591) * C84586 +
           (C71964 + C71965) * C84536) *
              C84188 * C1177 -
          ((C54343 * C17967 + C72628 + C72628 + C84344 * C18706 +
            C54342 * C16807 + C72629 + C72629 + C53740 * C17177) *
               C84536 +
           (C54343 * C17254 + C58478 + C58478 + C84344 * C17885 +
            C54342 * C3443 + C58479 + C58479 + C53740 * C4127) *
               C84586 +
           (C54343 * C5115 + C58480 + C58480 + C84344 * C5752 + C54342 * C3446 +
            C58481 + C58481 + C53740 * C4128) *
               C84599 +
           (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 + C54342 * C1183 +
            C55660 + C55660 + C53740 * C1589) *
               C84606) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C84257 * C19636 +
           (C19640 * C723 + C19647 + C19647 + C84509 * C733 + C19642 * C722 +
            C19648 + C19648 + C84198 * C732) *
               C84257 * C19637 +
           (C19640 * C1681 + C19649 + C19649 + C84509 * C1689 + C19642 * C1682 +
            C19650 + C19650 + C84198 * C1690) *
               C84257 * C19638 +
           (C19640 * C2599 + C19651 + C19651 + C84509 * C2605 + C19642 * C2598 +
            C19652 + C19652 + C84198 * C2604) *
               C84257 * C84536) *
              C84603 * C84604 * C90 -
          ((C19642 * C2597 + C19653 + C19653 + C84198 * C2603 + C19640 * C2598 +
            C19654 + C19654 + C84509 * C2604) *
               C84257 * C84536 +
           (C19642 * C1683 + C19655 + C19655 + C84198 * C1691 + C19640 * C1682 +
            C19656 + C19656 + C84509 * C1690) *
               C84257 * C19638 +
           (C19642 * C721 + C19657 + C19657 + C84198 * C731 + C19640 * C722 +
            C19658 + C19658 + C84509 * C732) *
               C84257 * C19637 +
           (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
            C19660 + C19660 + C84509 * C115) *
               C84257 * C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84257 * C84528 +
           (C6684 * C723 + C6697 + C6697 + C6678 * C733 + C6686 * C722 + C6698 +
            C6698 + C6679 * C732 + C6688 * C721 + C6699 + C6699 + C6680 * C731 +
            C6690 * C720 + C6700 + C6700 + C84527 * C730) *
               C84257 * C84304) *
              C84603 * C84604 * C90 -
          ((C6690 * C719 + C6701 + C6701 + C84527 * C729 + C6688 * C720 +
            C6702 + C6702 + C6680 * C730 + C6686 * C721 + C6703 + C6703 +
            C6679 * C731 + C6684 * C722 + C6704 + C6704 + C6678 * C732) *
               C84257 * C84304 +
           (C6690 * C106 + C6705 + C6705 + C84527 * C118 + C6688 * C105 +
            C6706 + C6706 + C6680 * C117 + C6686 * C104 + C6707 + C6707 +
            C6679 * C116 + C6684 * C103 + C6708 + C6708 + C6678 * C115) *
               C84257 * C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C26458 +
            (C23658 + C23659) * C26459 +
            (C19640 * C4212 + C23653 + C23653 + C84509 * C4220 +
             C19642 * C4213 + C23652 + C23652 + C84198 * C4221) *
                C84561) *
               C84528 +
           ((C20383 + C20384) * C26458 + (C22687 + C22688) * C26459 +
            (C19640 * C5115 + C23651 + C23651 + C84509 * C5121 +
             C19642 * C5114 + C23650 + C23650 + C84198 * C5120) *
                C84561) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C19642 * C5113 + C32266 + C32266 + C84198 * C5119 +
             C19640 * C5114 + C32267 + C32267 + C84509 * C5120) *
                C84561 +
            (C19642 * C3444 + C21715 + C21715 + C84198 * C3456 +
             C19640 * C3445 + C21716 + C21716 + C84509 * C3457) *
                C26459 +
            (C19642 * C721 + C19657 + C19657 + C84198 * C731 + C19640 * C722 +
             C19658 + C19658 + C84509 * C732) *
                C26458) *
               C84304 +
           ((C19642 * C4214 + C32268 + C32268 + C84198 * C4222 +
             C19640 * C4213 + C32269 + C32269 + C84509 * C4221) *
                C84561 +
            (C19642 * C1181 + C21717 + C21717 + C84198 * C1191 +
             C19640 * C1182 + C21718 + C21718 + C84509 * C1192) *
                C26459 +
            (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
             C19660 + C19660 + C84509 * C115) *
                C26458) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C82024 +
           (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
            C19728 * C1685 + C19638 * C1792 + C19729 * C2602 + C84536 * C2718) *
               C84509 +
           (C19747 + C19748 + C19749 + C19750) * C81997 +
           (C19751 + C19752 + C19753 + C19754) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C19729 * C2600 + C84536 * C2716 + C19728 * C1687 + C19638 * C1794 +
            C19727 * C726 + C19637 * C788 + C19726 * C110 + C19636 * C181) *
               C84198 +
           (C19729 * C2597 + C84536 * C2713 + C19728 * C1683 + C19638 * C1790 +
            C19727 * C721 + C19637 * C783 + C19726 * C104 + C19636 * C175) *
               C81997 +
           (C19754 + C19753 + C19752 + C19751) * C84509 +
           (C19750 + C19749 + C19748 + C19747) * C82024) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C6685 +
           (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
               C6678 +
           (C6801 + C6802) * C6687 + (C6803 + C6804) * C6679 +
           (C6805 + C6806) * C6689 + (C6807 + C6808) * C6680 +
           (C6809 + C6810) * C6691 + (C6811 + C6812) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C6775 * C724 + C84304 * C786 + C6774 * C112 + C84528 * C183) *
               C84527 +
           (C6775 * C719 + C84304 * C781 + C6774 * C106 + C84528 * C177) *
               C6691 +
           (C6812 + C6811) * C6680 + (C6810 + C6809) * C6689 +
           (C6808 + C6807) * C6679 + (C6806 + C6805) * C6687 +
           (C6804 + C6803) * C6678 + (C6802 + C6801) * C6685) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82024 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84509 +
            (C6801 + C6802) * C81997 + (C6803 + C6804) * C84198) *
               C26458 +
           ((C12827 + C12828) * C82024 + (C12829 + C12830) * C84509 +
            (C10877 + C10878) * C81997 + (C10879 + C10880) * C84198) *
               C26459 +
           ((C6774 * C4212 + C84528 * C4307 + C6775 * C5115 + C84304 * C5201) *
                C82024 +
            (C6774 * C4216 + C84528 * C4311 + C6775 * C5118 + C84304 * C5204) *
                C84509 +
            (C32376 + C32377) * C81997 + (C32378 + C32379) * C84198) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C6775 * C5116 + C84304 * C5202 + C6774 * C4218 + C84528 * C4313) *
                C84198 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C81997 +
            (C32379 + C32378) * C84509 + (C32377 + C32376) * C82024) *
               C84561 +
           ((C10884 + C10883) * C84198 + (C10882 + C10881) * C81997 +
            (C10880 + C10879) * C84509 + (C10878 + C10877) * C82024) *
               C26459 +
           ((C6808 + C6807) * C84198 + (C6806 + C6805) * C81997 +
            (C6804 + C6803) * C84509 + (C6802 + C6801) * C82024) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82024 +
            (C251 * C108 + C84257 * C258) * C84509 + C281 * C81997 +
            C282 * C84198) *
               C19636 +
           (C2816 * C82024 + C2817 * C84509 + C1931 * C81997 + C1932 * C84198) *
               C19637 +
           (C2818 * C82024 + C2819 * C84509 + C1935 * C81997 + C1936 * C84198) *
               C19638 +
           (C16433 * C82024 + C16434 * C84509 + C19825 * C81997 +
            C19826 * C84198) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C251 * C2600 + C84257 * C2796) * C84198 +
            (C251 * C2597 + C84257 * C2793) * C81997 + C19826 * C84509 +
            C19825 * C82024) *
               C84536 +
           (C1938 * C84198 + C1937 * C81997 + C1936 * C84509 + C1935 * C82024) *
               C19638 +
           (C1934 * C84198 + C1933 * C81997 + C1932 * C84509 + C1931 * C82024) *
               C19637 +
           (C284 * C84198 + C283 * C81997 + C282 * C84509 + C281 * C82024) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6685 +
            (C251 * C108 + C84257 * C258) * C6678 + C281 * C6687 +
            C282 * C6679 + C283 * C6689 + C284 * C6680 + C285 * C6691 +
            C286 * C84527) *
               C84528 +
           (C2816 * C6685 + C2817 * C6678 + C1931 * C6687 + C1932 * C6679 +
            C1933 * C6689 + C1934 * C6680 + C6883 * C6691 + C6884 * C84527) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C251 * C724 + C84257 * C838) * C84527 +
            (C251 * C719 + C84257 * C833) * C6691 + C6884 * C6680 +
            C6883 * C6689 + C1934 * C6679 + C1933 * C6687 + C1932 * C6678 +
            C1931 * C6685) *
               C84304 +
           (C288 * C84527 + C287 * C6691 + C286 * C6680 + C285 * C6689 +
            C284 * C6679 + C283 * C6687 + C282 * C6678 + C281 * C6685) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C82024 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84509 +
            (C26646 + C26647 + C26648) * C81997 +
            (C26649 + C26650 + C26651) * C84198) *
               C84528 +
           ((C29565 + C29566 + C29567) * C82024 +
            (C29568 + C29569 + C29570) * C84509 +
            (C32490 + C32491 + C32492) * C81997 +
            (C32493 + C32494 + C32495) * C84198) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C26620 * C5116 + C84561 * C5282 + C26619 * C3450 + C26459 * C3637 +
             C26618 * C726 + C26458 * C840) *
                C84198 +
            (C26620 * C5113 + C84561 * C5279 + C26619 * C3444 + C26459 * C3631 +
             C26618 * C721 + C26458 * C835) *
                C81997 +
            (C32495 + C32494 + C32493) * C84509 +
            (C32492 + C32491 + C32490) * C82024) *
               C84304 +
           ((C26657 + C26656 + C26655) * C84198 +
            (C26654 + C26653 + C26652) * C81997 +
            (C26651 + C26650 + C26649) * C84509 +
            (C26648 + C26647 + C26646) * C82024) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C19726 +
           (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
               C19636 +
           (C82024 * C723 + C84509 * C728 + C81997 * C722 + C84198 * C727) *
               C19727 +
           (C82024 * C785 + C84509 * C889 + C81997 * C784 + C84198 * C888) *
               C19637 +
           (C82024 * C1681 + C84509 * C1685 + C81997 * C1682 + C84198 * C1686) *
               C19728 +
           (C82024 * C1788 + C84509 * C2012 + C81997 * C1789 + C84198 * C2013) *
               C19638 +
           (C82024 * C2599 + C84509 * C2602 + C81997 * C2598 + C84198 * C2601) *
               C19729 +
           (C82024 * C2715 + C84509 * C2899 + C81997 * C2714 + C84198 * C2898) *
               C84536) *
              C84257 * C84603 * C84604 * C90 -
          ((C81997 * C2713 + C84198 * C2897 + C82024 * C2714 + C84509 * C2898) *
               C84536 +
           (C81997 * C2597 + C84198 * C2600 + C82024 * C2598 + C84509 * C2601) *
               C19729 +
           (C81997 * C1790 + C84198 * C2014 + C82024 * C1789 + C84509 * C2013) *
               C19638 +
           (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 + C84509 * C1686) *
               C19728 +
           (C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
               C19637 +
           (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
               C19727 +
           (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
               C19636 +
           (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
               C19726) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C6774 +
           (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
            C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
               C84528 +
           (C6685 * C723 + C6678 * C728 + C6687 * C722 + C6679 * C727 +
            C6689 * C721 + C6680 * C726 + C6691 * C720 + C84527 * C725) *
               C6775 +
           (C6685 * C785 + C6678 * C889 + C6687 * C784 + C6679 * C888 +
            C6689 * C783 + C6680 * C887 + C6691 * C782 + C84527 * C886) *
               C84304) *
              C84257 * C84603 * C84604 * C90 -
          ((C6691 * C781 + C84527 * C885 + C6689 * C782 + C6680 * C886 +
            C6687 * C783 + C6679 * C887 + C6685 * C784 + C6678 * C888) *
               C84304 +
           (C6691 * C719 + C84527 * C724 + C6689 * C720 + C6680 * C725 +
            C6687 * C721 + C6679 * C726 + C6685 * C722 + C6678 * C727) *
               C6775 +
           (C6691 * C177 + C84527 * C334 + C6689 * C176 + C6680 * C333 +
            C6687 * C175 + C6679 * C332 + C6685 * C174 + C6678 * C331) *
               C84528 +
           (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
            C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
               C6774) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C6774 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84528 +
            (C20623 + C20624) * C6775 + (C20625 + C20626) * C84304) *
               C26458 +
           ((C23962 + C23963) * C6774 + (C23964 + C23965) * C84528 +
            (C23013 + C23014) * C6775 + (C23015 + C23016) * C84304) *
               C26459 +
           ((C82024 * C4212 + C84509 * C4216 + C81997 * C4213 +
             C84198 * C4217) *
                C6774 +
            (C82024 * C4307 + C84509 * C4534 + C81997 * C4308 +
             C84198 * C4535) *
                C84528 +
            (C82024 * C5115 + C84509 * C5118 + C81997 * C5114 +
             C84198 * C5117) *
                C6775 +
            (C82024 * C5201 + C84509 * C5361 + C81997 * C5200 +
             C84198 * C5360) *
                C84304) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C81997 * C5199 + C84198 * C5359 + C82024 * C5200 +
             C84509 * C5360) *
                C84304 +
            (C81997 * C5113 + C84198 * C5116 + C82024 * C5114 +
             C84509 * C5117) *
                C6775 +
            (C81997 * C4309 + C84198 * C4536 + C82024 * C4308 +
             C84509 * C4535) *
                C84528 +
            (C81997 * C4214 + C84198 * C4218 + C82024 * C4213 +
             C84509 * C4217) *
                C6774) *
               C84561 +
           ((C81997 * C3543 + C84198 * C3717 + C82024 * C3545 +
             C84509 * C3718) *
                C84304 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C6775 +
            (C81997 * C1243 + C84198 * C1347 + C82024 * C1244 +
             C84509 * C1348) *
                C84528 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C6774) *
               C26459 +
           ((C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
                C84304 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C6775 +
            (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
                C84528 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C6774) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19958 * C102 + C19963 + C19963 + C19636 * C379 + C19959 * C723 +
            C19964 + C19964 + C19637 * C936 + C19960 * C1681 + C19965 + C19965 +
            C19638 * C2093 + C19961 * C2599 + C19966 + C19966 +
            C84536 * C3012) *
               C84509 +
           (C19991 + C19992 + C19993 + C19994) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C19961 * C2597 + C19979 + C19979 + C84536 * C3010 + C19960 * C1683 +
            C19980 + C19980 + C19638 * C2095 + C19959 * C721 + C19981 + C19981 +
            C19637 * C934 + C19958 * C104 + C19982 + C19982 + C19636 * C381) *
               C84198 +
           (C19994 + C19993 + C19992 + C19991) * C84509) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
            C7020 + C7020 + C84304 * C936) *
               C6678 +
           (C7053 + C7054) * C6679 + (C7055 + C7056) * C6680 +
           (C7057 + C7058) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C7017 * C719 + C7039 + C7039 + C84304 * C932 + C7016 * C106 +
            C7040 + C7040 + C84528 * C383) *
               C84527 +
           (C7058 + C7057) * C6680 + (C7056 + C7055) * C6679 +
           (C7054 + C7053) * C6678) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
             C7020 + C7020 + C84304 * C936) *
                C84509 +
            (C7053 + C7054) * C84198) *
               C26458 +
           ((C13139 + C13140) * C84509 + (C11219 + C11220) * C84198) * C26459 +
           ((C7016 * C4212 + C13134 + C13134 + C84528 * C4612 + C7017 * C5115 +
             C13133 + C13133 + C84304 * C5438) *
                C84509 +
            (C32700 + C32701) * C84198) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C7017 * C5113 + C13129 + C13129 + C84304 * C5436 + C7016 * C4214 +
             C13130 + C13130 + C84528 * C4614) *
                C84198 +
            (C32701 + C32700) * C84509) *
               C84561 +
           ((C11222 + C11221) * C84198 + (C11220 + C11219) * C84509) * C26459 +
           ((C7056 + C7055) * C84198 + (C7054 + C7053) * C84509) * C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C19726 +
                      (C251 * C173 + C84257 * C453) * C19636 + C2816 * C19727 +
                      C3104 * C19637 + C2818 * C19728 + C3105 * C19638 +
                      C16433 * C19729 + C16603 * C84536) *
                         C84509 +
                     (C20061 + C20062 + C20063 + C20064 + C20065 + C20066 +
                      C20067 + C20071) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C251 * C2713 + C84257 * C3096) * C84536 +
                      (C251 * C2597 + C84257 * C2793) * C19729 +
                      C2237 * C19638 + C1937 * C19728 + C2236 * C19637 +
                      C1933 * C19727 + C473 * C19636 + C283 * C19726) *
                         C84198 +
                     (C20071 + C20067 + C20066 + C20065 + C20064 + C20063 +
                      C20062 + C20061) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C6774 +
                      (C251 * C173 + C84257 * C453) * C84528 + C2816 * C6775 +
                      C3104 * C84304) *
                         C6678 +
                     (C7125 + C7126 + C7127 + C7128) * C6679 +
                     (C7129 + C7130 + C7131 + C7132) * C6680 +
                     (C7133 + C7134 + C7135 + C7139) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C251 * C781 + C84257 * C984) * C84304 +
                      (C251 * C719 + C84257 * C833) * C6775 + C475 * C84528 +
                      C287 * C6774) *
                         C84527 +
                     (C7139 + C7135 + C7134 + C7133) * C6680 +
                     (C7132 + C7131 + C7130 + C7129) * C6679 +
                     (C7128 + C7127 + C7126 + C7125) * C6678) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 +
                       C26459 * C1297 + C26620 * C4212 + C84561 * C4416) *
                          C6774 +
                      (C26618 * C173 + C26458 * C453 + C26619 * C1245 +
                       C26459 * C1448 + C26620 * C4307 + C84561 * C4714) *
                          C84528 +
                      (C29565 + C29566 + C29567) * C6775 +
                      (C29817 + C29818 + C29819) * C84304) *
                         C84509 +
                     ((C26646 + C26647 + C26648) * C6774 +
                      (C26892 + C26893 + C26894) * C84528 +
                      (C32490 + C32491 + C32492) * C6775 +
                      (C32806 + C32807 + C32808) * C84304) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C26620 * C5199 + C84561 * C5519 + C26619 * C3543 +
                       C26459 * C3884 + C26618 * C783 + C26458 * C986) *
                          C84304 +
                      (C26620 * C5113 + C84561 * C5279 + C26619 * C3444 +
                       C26459 * C3631 + C26618 * C721 + C26458 * C835) *
                          C6775 +
                      (C26897 + C26896 + C26895) * C84528 +
                      (C26654 + C26653 + C26652) * C6774) *
                         C84198 +
                     ((C32808 + C32807 + C32806) * C84304 +
                      (C32492 + C32491 + C32490) * C6775 +
                      (C26894 + C26893 + C26892) * C84528 +
                      (C26648 + C26647 + C26646) * C6774) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C251 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84257) *
               C19636 +
           ((C82024 * C723 + C84509 * C728 + C81997 * C722 + C84198 * C727) *
                C251 +
            (C82024 * C837 + C84509 * C1035 + C81997 * C836 + C84198 * C1034) *
                C84257) *
               C19637 +
           ((C82024 * C1681 + C84509 * C1685 + C81997 * C1682 +
             C84198 * C1686) *
                C251 +
            (C82024 * C1906 + C84509 * C2315 + C81997 * C1907 +
             C84198 * C2316) *
                C84257) *
               C19638 +
           ((C82024 * C2599 + C84509 * C2602 + C81997 * C2598 +
             C84198 * C2601) *
                C251 +
            (C82024 * C2795 + C84509 * C3181 + C81997 * C2794 +
             C84198 * C3180) *
                C84257) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C81997 * C2793 + C84198 * C3179 + C82024 * C2794 +
             C84509 * C3180) *
                C84257 +
            (C81997 * C2597 + C84198 * C2600 + C82024 * C2598 +
             C84509 * C2601) *
                C251) *
               C84536 +
           ((C81997 * C1908 + C84198 * C2317 + C82024 * C1907 +
             C84509 * C2316) *
                C84257 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C251) *
               C19638 +
           ((C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C84257 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C251) *
               C19637 +
           ((C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C84257 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C251) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C251 +
            (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
             C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
                C84257) *
               C84528 +
           ((C6685 * C723 + C6678 * C728 + C6687 * C722 + C6679 * C727 +
             C6689 * C721 + C6680 * C726 + C6691 * C720 + C84527 * C725) *
                C251 +
            (C6685 * C837 + C6678 * C1035 + C6687 * C836 + C6679 * C1034 +
             C6689 * C835 + C6680 * C1033 + C6691 * C834 + C84527 * C1032) *
                C84257) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C6691 * C833 + C84527 * C1031 + C6689 * C834 + C6680 * C1032 +
             C6687 * C835 + C6679 * C1033 + C6685 * C836 + C6678 * C1034) *
                C84257 +
            (C6691 * C719 + C84527 * C724 + C6689 * C720 + C6680 * C725 +
             C6687 * C721 + C6679 * C726 + C6685 * C722 + C6678 * C727) *
                C251) *
               C84304 +
           ((C6691 * C256 + C84527 * C525 + C6689 * C255 + C6680 * C524 +
             C6687 * C254 + C6679 * C523 + C6685 * C253 + C6678 * C522) *
                C84257 +
            (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
             C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
                C251) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C26618 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C26458 +
            (C23962 + C23963) * C26619 + (C24264 + C24265) * C26459 +
            (C82024 * C4212 + C84509 * C4216 + C81997 * C4213 +
             C84198 * C4217) *
                C26620 +
            (C82024 * C4416 + C84509 * C4810 + C81997 * C4417 +
             C84198 * C4811) *
                C84561) *
               C84528 +
           ((C20623 + C20624) * C26618 + (C20853 + C20854) * C26458 +
            (C23013 + C23014) * C26619 + (C23332 + C23333) * C26459 +
            (C82024 * C5115 + C84509 * C5118 + C81997 * C5114 +
             C84198 * C5117) *
                C26620 +
            (C82024 * C5281 + C84509 * C5598 + C81997 * C5280 +
             C84198 * C5597) *
                C84561) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C81997 * C5279 + C84198 * C5596 + C82024 * C5280 +
             C84509 * C5597) *
                C84561 +
            (C81997 * C5113 + C84198 * C5116 + C82024 * C5114 +
             C84509 * C5117) *
                C26620 +
            (C81997 * C3631 + C84198 * C3966 + C82024 * C3632 +
             C84509 * C3967) *
                C26459 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C26619 +
            (C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C26458 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C26618) *
               C84304 +
           ((C81997 * C4418 + C84198 * C4812 + C82024 * C4417 +
             C84509 * C4811) *
                C84561 +
            (C81997 * C4214 + C84198 * C4218 + C82024 * C4213 +
             C84509 * C4217) *
                C26620 +
            (C81997 * C1295 + C84198 * C1493 + C82024 * C1296 +
             C84509 * C1494) *
                C26459 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C26619 +
            (C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C26458 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C26618) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C251 +
            (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
             C19728 * C1906 + C19638 * C2393 + C19729 * C2795 +
             C84536 * C3276) *
                C84257) *
               C84509 +
           ((C19747 + C19748 + C19749 + C19750) * C251 +
            (C20212 + C20213 + C20214 + C20215) * C84257) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C19729 * C2793 + C84536 * C3274 + C19728 * C1908 + C19638 * C2395 +
             C19727 * C835 + C19637 * C1080 + C19726 * C254 + C19636 * C571) *
                C84257 +
            (C19729 * C2597 + C84536 * C2713 + C19728 * C1683 + C19638 * C1790 +
             C19727 * C721 + C19637 * C783 + C19726 * C104 + C19636 * C175) *
                C251) *
               C84198 +
           ((C20215 + C20214 + C20213 + C20212) * C84257 +
            (C19750 + C19749 + C19748 + C19747) * C251) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C251 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84257) *
               C6678 +
           ((C6801 + C6802) * C251 + (C7284 + C7285) * C84257) * C6679 +
           ((C6805 + C6806) * C251 + (C7286 + C7287) * C84257) * C6680 +
           ((C6809 + C6810) * C251 + (C7288 + C7289) * C84257) * C84527) *
              C84603 * C84604 * C90 -
          (((C6775 * C833 + C84304 * C1078 + C6774 * C256 + C84528 * C573) *
                C84257 +
            (C6775 * C719 + C84304 * C781 + C6774 * C106 + C84528 * C177) *
                C251) *
               C84527 +
           ((C7289 + C7288) * C84257 + (C6810 + C6809) * C251) * C6680 +
           ((C7287 + C7286) * C84257 + (C6806 + C6805) * C251) * C6679 +
           ((C7285 + C7284) * C84257 + (C6802 + C6801) * C251) * C6678) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C26618 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C26458 +
            (C12827 + C12828) * C26619 + (C13439 + C13440) * C26459 +
            (C6774 * C4212 + C84528 * C4307 + C6775 * C5115 + C84304 * C5201) *
                C26620 +
            (C6774 * C4416 + C84528 * C4888 + C6775 * C5281 + C84304 * C5675) *
                C84561) *
               C84509 +
           ((C6801 + C6802) * C26618 + (C7284 + C7285) * C26458 +
            (C10877 + C10878) * C26619 + (C11537 + C11538) * C26459 +
            (C32376 + C32377) * C26620 + (C33009 + C33010) * C84561) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C6775 * C5279 + C84304 * C5673 + C6774 * C4418 + C84528 * C4890) *
                C84561 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C26620 +
            (C11540 + C11539) * C26459 + (C10882 + C10881) * C26619 +
            (C7287 + C7286) * C26458 + (C6806 + C6805) * C26618) *
               C84198 +
           ((C33010 + C33009) * C84561 + (C32377 + C32376) * C26620 +
            (C11538 + C11537) * C26459 + (C10878 + C10877) * C26619 +
            (C7285 + C7284) * C26458 + (C6802 + C6801) * C26618) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C637 * C102 + C645 + C645 + C84257 * C638) * C19636 +
                      C3366 * C19637 + C3367 * C19638 + C16763 * C84536) *
                         C84509 +
                     (C20282 + C20283 + C20284 + C20290) * C84198) *
                        C84603 * C84604 * C90 -
                    (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84536 +
                      C2519 * C19638 + C2518 * C19637 + C668 * C19636) *
                         C84198 +
                     (C20290 + C20284 + C20283 + C20282) * C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84528 +
                      C3366 * C84304) *
                         C6678 +
                     (C7356 + C7357) * C6679 + (C7358 + C7359) * C6680 +
                     (C7360 + C7366) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84304 +
                      C670 * C84528) *
                         C84527 +
                     (C7366 + C7360) * C6680 + (C7359 + C7358) * C6679 +
                     (C7357 + C7356) * C6678) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C27131 * C102 + C27135 + C27135 + C26458 * C638 +
                       C27132 * C1183 + C27136 + C27136 + C26459 * C1589 +
                       C27133 * C4212 + C27137 + C27137 + C84561 * C4993) *
                          C84528 +
                      (C30084 + C30085 + C30086) * C84304) *
                         C84509 +
                     ((C27171 + C27172 + C27173) * C84528 +
                      (C33121 + C33122 + C33123) * C84304) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C27133 * C5113 + C27846 + C27846 + C84561 * C5750 +
                       C27132 * C3444 + C27847 + C27847 + C26459 * C4124 +
                       C27131 * C721 + C27848 + C27848 + C26458 * C1127) *
                          C84304 +
                      (C27176 + C27175 + C27174) * C84528) *
                         C84198 +
                     ((C33123 + C33122 + C33121) * C84304 +
                      (C27173 + C27172 + C27171) * C84528) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C84257 * C19636 +
           (C20383 + C20384) * C84257 * C19637 +
           (C20385 + C20386) * C84257 * C19638 +
           (C20387 + C20388) * C84257 * C84536) *
              C84603 * C716 -
          ((C19642 * C15869 + C20369 + C20369 + C84198 * C15873 +
            C19640 * C15868 + C20370 + C20370 + C84509 * C15872) *
               C84257 * C84536 +
           (C20388 + C20387) * C84257 * C19638 +
           (C20386 + C20385) * C84257 * C19637 +
           (C20384 + C20383) * C84257 * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84257 * C84528 +
           (C7453 + C7454 + C7455 + C7456) * C84257 * C84304) *
              C84603 * C716 -
          ((C6690 * C1684 + C7441 + C7441 + C84527 * C1692 + C6688 * C1683 +
            C7442 + C7442 + C6680 * C1691 + C6686 * C1682 + C7443 + C7443 +
            C6679 * C1690 + C6684 * C1681 + C7444 + C7444 + C6678 * C1689) *
               C84257 * C84304 +
           (C7456 + C7455 + C7454 + C7453) * C84257 * C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C26458 +
            (C23658 + C23659) * C26459 +
            (C19640 * C4212 + C23653 + C23653 + C84509 * C4220 +
             C19642 * C4213 + C23652 + C23652 + C84198 * C4221) *
                C84561) *
               C84528 +
           ((C20383 + C20384) * C26458 + (C22687 + C22688) * C26459 +
            (C33230 + C33231) * C84561) *
               C84304) *
              C84603 * C716 -
          (((C19642 * C17255 + C23648 + C23648 + C84198 * C17259 +
             C19640 * C17254 + C23649 + C23649 + C84509 * C17258) *
                C84561 +
            (C22690 + C22689) * C26459 + (C20386 + C20385) * C26458) *
               C84304 +
           ((C33231 + C33230) * C84561 + (C22688 + C22687) * C26459 +
            (C20384 + C20383) * C26458) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C82024 +
           (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
            C19728 * C1685 + C19638 * C1792 + C19729 * C2602 + C84536 * C2718) *
               C84509 +
           (C19747 + C19748 + C19749 + C19750) * C81997 +
           (C19751 + C19752 + C19753 + C19754) * C84198) *
              C84257 * C84603 * C716 -
          ((C19729 * C15871 + C84536 * C15934 + C19728 * C2601 +
            C19638 * C2717 + C19727 * C1686 + C19637 * C1793 + C19726 * C727 +
            C19636 * C789) *
               C84198 +
           (C19729 * C15869 + C84536 * C15932 + C19728 * C2598 +
            C19638 * C2714 + C19727 * C1682 + C19637 * C1789 + C19726 * C722 +
            C19636 * C784) *
               C81997 +
           (C19729 * C15870 + C84536 * C15933 + C19728 * C2602 +
            C19638 * C2718 + C19727 * C1685 + C19637 * C1792 + C19726 * C728 +
            C19636 * C790) *
               C84509 +
           (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
            C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
            C19636 * C785) *
               C82024) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C6685 +
           (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
               C6678 +
           (C6801 + C6802) * C6687 + (C6803 + C6804) * C6679 +
           (C6805 + C6806) * C6689 + (C6807 + C6808) * C6680 +
           (C6809 + C6810) * C6691 + (C6811 + C6812) * C84527) *
              C84257 * C84603 * C716 -
          ((C6775 * C1688 + C84304 * C1795 + C6774 * C725 + C84528 * C787) *
               C84527 +
           (C6775 * C1684 + C84304 * C1791 + C6774 * C720 + C84528 * C782) *
               C6691 +
           (C6775 * C1687 + C84304 * C1794 + C6774 * C726 + C84528 * C788) *
               C6680 +
           (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
               C6689 +
           (C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
               C6679 +
           (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
               C6687 +
           (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
               C6678 +
           (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
               C6685) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82024 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84509 +
            (C6801 + C6802) * C81997 + (C6803 + C6804) * C84198) *
               C26458 +
           ((C12827 + C12828) * C82024 + (C12829 + C12830) * C84509 +
            (C10877 + C10878) * C81997 + (C10879 + C10880) * C84198) *
               C26459 +
           ((C6774 * C4212 + C84528 * C4307 + C6775 * C5115 + C84304 * C5201) *
                C82024 +
            (C6774 * C4216 + C84528 * C4311 + C6775 * C5118 + C84304 * C5204) *
                C84509 +
            (C32376 + C32377) * C81997 + (C32378 + C32379) * C84198) *
               C84561) *
              C84603 * C716 -
          (((C6775 * C17257 + C84304 * C17346 + C6774 * C5117 +
             C84528 * C5203) *
                C84198 +
            (C6775 * C17255 + C84304 * C17344 + C6774 * C5114 +
             C84528 * C5200) *
                C81997 +
            (C6775 * C17256 + C84304 * C17345 + C6774 * C5118 +
             C84528 * C5204) *
                C84509 +
            (C6775 * C17254 + C84304 * C17343 + C6774 * C5115 +
             C84528 * C5201) *
                C82024) *
               C84561 +
           ((C6775 * C3448 + C84304 * C3550 + C6774 * C3451 + C84528 * C3551) *
                C84198 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C81997 +
            (C6775 * C3449 + C84304 * C3552 + C6774 * C3452 + C84528 * C3553) *
                C84509 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C82024) *
               C26459 +
           ((C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
                C84198 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C81997 +
            (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
                C84509 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C82024) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82024 +
            (C251 * C108 + C84257 * C258) * C84509 + C281 * C81997 +
            C282 * C84198) *
               C19636 +
           (C20521 + C20522 + C20523 + C20524) * C19637 +
           (C20525 + C20526 + C20527 + C20528) * C19638 +
           (C20529 + C20530 + C20531 + C20532) * C84536) *
              C84603 * C716 -
          (((C251 * C15871 + C84257 * C15980) * C84198 +
            (C251 * C15869 + C84257 * C15978) * C81997 + C16436 * C84509 +
            C16435 * C82024) *
               C84536 +
           (C20532 + C20531 + C20530 + C20529) * C19638 +
           (C20528 + C20527 + C20526 + C20525) * C19637 +
           (C20524 + C20523 + C20522 + C20521) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6685 +
            (C251 * C108 + C84257 * C258) * C6678 + C281 * C6687 +
            C282 * C6679 + C283 * C6689 + C284 * C6680 + C285 * C6691 +
            C286 * C84527) *
               C84528 +
           (C7589 + C7590 + C7591 + C7592 + C7593 + C7594 + C7595 + C7596) *
               C84304) *
              C84603 * C716 -
          (((C251 * C1688 + C84257 * C1913) * C84527 +
            (C251 * C1684 + C84257 * C1909) * C6691 + C1938 * C6680 +
            C1937 * C6689 + C1936 * C6679 + C1935 * C6687 + C2819 * C6678 +
            C2818 * C6685) *
               C84304 +
           (C7596 + C7595 + C7594 + C7593 + C7592 + C7591 + C7590 + C7589) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C82024 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84509 +
            (C26646 + C26647 + C26648) * C81997 +
            (C26649 + C26650 + C26651) * C84198) *
               C84528 +
           ((C29565 + C29566 + C29567) * C82024 +
            (C29568 + C29569 + C29570) * C84509 +
            (C32490 + C32491 + C32492) * C81997 +
            (C32493 + C32494 + C32495) * C84198) *
               C84304) *
              C84603 * C716 -
          (((C26620 * C17257 + C84561 * C17424 + C26619 * C3448 +
             C26459 * C3635 + C26618 * C1686 + C26458 * C1911) *
                C84198 +
            (C26620 * C17255 + C84561 * C17422 + C26619 * C3442 +
             C26459 * C3629 + C26618 * C1682 + C26458 * C1907) *
                C81997 +
            (C29576 + C29575 + C29574) * C84509 +
            (C29573 + C29572 + C29571) * C82024) *
               C84304 +
           ((C32495 + C32494 + C32493) * C84198 +
            (C32492 + C32491 + C32490) * C81997 +
            (C29570 + C29569 + C29568) * C84509 +
            (C29567 + C29566 + C29565) * C82024) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C19726 +
           (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
               C19636 +
           (C20623 + C20624) * C19727 + (C20625 + C20626) * C19637 +
           (C20627 + C20628) * C19728 + (C20629 + C20630) * C19638 +
           (C20631 + C20632) * C19729 + (C20633 + C20634) * C84536) *
              C84257 * C84603 * C716 -
          ((C81997 * C15932 + C84198 * C16024 + C82024 * C15931 +
            C84509 * C16023) *
               C84536 +
           (C81997 * C15869 + C84198 * C15871 + C82024 * C15868 +
            C84509 * C15870) *
               C19729 +
           (C20634 + C20633) * C19638 + (C20632 + C20631) * C19728 +
           (C20630 + C20629) * C19637 + (C20628 + C20627) * C19727 +
           (C20626 + C20625) * C19636 + (C20624 + C20623) * C19726) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C6774 +
           (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
            C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
               C84528 +
           (C7679 + C7680 + C7681 + C7682) * C6775 +
           (C7683 + C7684 + C7685 + C7686) * C84304) *
              C84257 * C84603 * C716 -
          ((C6691 * C1791 + C84527 * C2015 + C6689 * C1790 + C6680 * C2014 +
            C6687 * C1789 + C6679 * C2013 + C6685 * C1788 + C6678 * C2012) *
               C84304 +
           (C6691 * C1684 + C84527 * C1688 + C6689 * C1683 + C6680 * C1687 +
            C6687 * C1682 + C6679 * C1686 + C6685 * C1681 + C6678 * C1685) *
               C6775 +
           (C7686 + C7685 + C7684 + C7683) * C84528 +
           (C7682 + C7681 + C7680 + C7679) * C6774) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C6774 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84528 +
            (C20623 + C20624) * C6775 + (C20625 + C20626) * C84304) *
               C26458 +
           ((C23962 + C23963) * C6774 + (C23964 + C23965) * C84528 +
            (C23013 + C23014) * C6775 + (C23015 + C23016) * C84304) *
               C26459 +
           ((C82024 * C4212 + C84509 * C4216 + C81997 * C4213 +
             C84198 * C4217) *
                C6774 +
            (C82024 * C4307 + C84509 * C4534 + C81997 * C4308 +
             C84198 * C4535) *
                C84528 +
            (C33534 + C33535) * C6775 + (C33536 + C33537) * C84304) *
               C84561) *
              C84603 * C716 -
          (((C81997 * C17344 + C84198 * C17500 + C82024 * C17343 +
             C84509 * C17499) *
                C84304 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C6775 +
            (C33537 + C33536) * C84528 + (C33535 + C33534) * C6774) *
               C84561 +
           ((C23020 + C23019) * C84304 + (C23018 + C23017) * C6775 +
            (C23016 + C23015) * C84528 + (C23014 + C23013) * C6774) *
               C26459 +
           ((C20630 + C20629) * C84304 + (C20628 + C20627) * C6775 +
            (C20626 + C20625) * C84528 + (C20624 + C20623) * C6774) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19958 * C102 + C19963 + C19963 + C19636 * C379 + C19959 * C723 +
            C19964 + C19964 + C19637 * C936 + C19960 * C1681 + C19965 + C19965 +
            C19638 * C2093 + C19961 * C2599 + C19966 + C19966 +
            C84536 * C3012) *
               C84509 +
           (C19991 + C19992 + C19993 + C19994) * C84198) *
              C84257 * C84603 * C716 -
          ((C19961 * C15869 + C20701 + C20701 + C84536 * C16073 +
            C19960 * C2598 + C20702 + C20702 + C19638 * C3011 + C19959 * C1682 +
            C20703 + C20703 + C19637 * C2094 + C19958 * C722 + C20704 + C20704 +
            C19636 * C935) *
               C84198 +
           (C19961 * C15868 + C20705 + C20705 + C84536 * C16072 +
            C19960 * C2599 + C20706 + C20706 + C19638 * C3012 + C19959 * C1681 +
            C20707 + C20707 + C19637 * C2093 + C19958 * C723 + C20708 + C20708 +
            C19636 * C936) *
               C84509) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
            C7020 + C7020 + C84304 * C936) *
               C6678 +
           (C7053 + C7054) * C6679 + (C7055 + C7056) * C6680 +
           (C7057 + C7058) * C84527) *
              C84257 * C84603 * C716 -
          ((C7017 * C1684 + C7753 + C7753 + C84304 * C2096 + C7016 * C720 +
            C7754 + C7754 + C84528 * C933) *
               C84527 +
           (C7017 * C1683 + C7755 + C7755 + C84304 * C2095 + C7016 * C721 +
            C7756 + C7756 + C84528 * C934) *
               C6680 +
           (C7017 * C1682 + C7757 + C7757 + C84304 * C2094 + C7016 * C722 +
            C7758 + C7758 + C84528 * C935) *
               C6679 +
           (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 + C7016 * C723 +
            C7760 + C7760 + C84528 * C936) *
               C6678) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
             C7020 + C7020 + C84304 * C936) *
                C84509 +
            (C7053 + C7054) * C84198) *
               C26458 +
           ((C13139 + C13140) * C84509 + (C11219 + C11220) * C84198) * C26459 +
           ((C7016 * C4212 + C13134 + C13134 + C84528 * C4612 + C7017 * C5115 +
             C13133 + C13133 + C84304 * C5438) *
                C84509 +
            (C32700 + C32701) * C84198) *
               C84561) *
              C84603 * C716 -
          (((C7017 * C17255 + C33636 + C33636 + C84304 * C17576 +
             C7016 * C5114 + C33637 + C33637 + C84528 * C5437) *
                C84198 +
            (C7017 * C17254 + C33638 + C33638 + C84304 * C17575 +
             C7016 * C5115 + C33639 + C33639 + C84528 * C5438) *
                C84509) *
               C84561 +
           ((C7017 * C3442 + C12196 + C12196 + C84304 * C3796 + C7016 * C3445 +
             C12197 + C12197 + C84528 * C3797) *
                C84198 +
            (C7017 * C3443 + C12198 + C12198 + C84304 * C3798 + C7016 * C3446 +
             C12199 + C12199 + C84528 * C3799) *
                C84509) *
               C26459 +
           ((C7017 * C1682 + C7757 + C7757 + C84304 * C2094 + C7016 * C722 +
             C7758 + C7758 + C84528 * C935) *
                C84198 +
            (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 + C7016 * C723 +
             C7760 + C7760 + C84528 * C936) *
                C84509) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C19726 +
            (C251 * C173 + C84257 * C453) * C19636 + C2816 * C19727 +
            C3104 * C19637 + C2818 * C19728 + C3105 * C19638 + C16433 * C19729 +
            C16603 * C84536) *
               C84509 +
           (C20061 + C20062 + C20063 + C20064 + C20065 + C20066 + C20067 +
            C20071) *
               C84198) *
              C84603 * C716 -
          (((C251 * C15932 + C84257 * C16127) * C84536 +
            (C251 * C15869 + C84257 * C15978) * C19729 + C20070 * C19638 +
            C19825 * C19728 + C2235 * C19637 + C1935 * C19727 + C2234 * C19636 +
            C1931 * C19726) *
               C84198 +
           (C16604 * C84536 + C16435 * C19729 + C16603 * C19638 +
            C16433 * C19728 + C3105 * C19637 + C2818 * C19727 + C3104 * C19636 +
            C2816 * C19726) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6774 +
            (C251 * C173 + C84257 * C453) * C84528 + C2816 * C6775 +
            C3104 * C84304) *
               C6678 +
           (C7125 + C7126 + C7127 + C7128) * C6679 +
           (C7129 + C7130 + C7131 + C7132) * C6680 +
           (C7133 + C7134 + C7135 + C7139) * C84527) *
              C84603 * C716 -
          (((C251 * C1791 + C84257 * C2216) * C84304 +
            (C251 * C1684 + C84257 * C1909) * C6775 + C7138 * C84528 +
            C6883 * C6774) *
               C84527 +
           (C2237 * C84304 + C1937 * C6775 + C2236 * C84528 + C1933 * C6774) *
               C6680 +
           (C2235 * C84304 + C1935 * C6775 + C2234 * C84528 + C1931 * C6774) *
               C6679 +
           (C3105 * C84304 + C2818 * C6775 + C3104 * C84528 + C2816 * C6774) *
               C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C6774 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84528 +
            (C29565 + C29566 + C29567) * C6775 +
            (C29817 + C29818 + C29819) * C84304) *
               C84509 +
           ((C26646 + C26647 + C26648) * C6774 +
            (C26892 + C26893 + C26894) * C84528 +
            (C32490 + C32491 + C32492) * C6775 +
            (C32806 + C32807 + C32808) * C84304) *
               C84198) *
              C84603 * C716 -
          (((C26620 * C17344 + C84561 * C17658 + C26619 * C3544 +
             C26459 * C3885 + C26618 * C1789 + C26458 * C2214) *
                C84304 +
            (C26620 * C17255 + C84561 * C17422 + C26619 * C3442 +
             C26459 * C3629 + C26618 * C1682 + C26458 * C1907) *
                C6775 +
            (C32808 + C32807 + C32806) * C84528 +
            (C32492 + C32491 + C32490) * C6774) *
               C84198 +
           ((C29822 + C29821 + C29820) * C84304 +
            (C29573 + C29572 + C29571) * C6775 +
            (C29819 + C29818 + C29817) * C84528 +
            (C29567 + C29566 + C29565) * C6774) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C251 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84257) *
               C19636 +
           ((C20623 + C20624) * C251 + (C20853 + C20854) * C84257) * C19637 +
           ((C20627 + C20628) * C251 + (C20855 + C20856) * C84257) * C19638 +
           ((C20631 + C20632) * C251 + (C20857 + C20858) * C84257) * C84536) *
              C84603 * C716 -
          (((C81997 * C15978 + C84198 * C16171 + C82024 * C15977 +
             C84509 * C16170) *
                C84257 +
            (C81997 * C15869 + C84198 * C15871 + C82024 * C15868 +
             C84509 * C15870) *
                C251) *
               C84536 +
           ((C20858 + C20857) * C84257 + (C20632 + C20631) * C251) * C19638 +
           ((C20856 + C20855) * C84257 + (C20628 + C20627) * C251) * C19637 +
           ((C20854 + C20853) * C84257 + (C20624 + C20623) * C251) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C251 +
            (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
             C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
                C84257) *
               C84528 +
           ((C7679 + C7680 + C7681 + C7682) * C251 +
            (C7901 + C7902 + C7903 + C7904) * C84257) *
               C84304) *
              C84603 * C716 -
          (((C6691 * C1909 + C84527 * C2318 + C6689 * C1908 + C6680 * C2317 +
             C6687 * C1907 + C6679 * C2316 + C6685 * C1906 + C6678 * C2315) *
                C84257 +
            (C6691 * C1684 + C84527 * C1688 + C6689 * C1683 + C6680 * C1687 +
             C6687 * C1682 + C6679 * C1686 + C6685 * C1681 + C6678 * C1685) *
                C251) *
               C84304 +
           ((C7904 + C7903 + C7902 + C7901) * C84257 +
            (C7682 + C7681 + C7680 + C7679) * C251) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C26618 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C26458 +
            (C23962 + C23963) * C26619 + (C24264 + C24265) * C26459 +
            (C82024 * C4212 + C84509 * C4216 + C81997 * C4213 +
             C84198 * C4217) *
                C26620 +
            (C82024 * C4416 + C84509 * C4810 + C81997 * C4417 +
             C84198 * C4811) *
                C84561) *
               C84528 +
           ((C20623 + C20624) * C26618 + (C20853 + C20854) * C26458 +
            (C23013 + C23014) * C26619 + (C23332 + C23333) * C26459 +
            (C33534 + C33535) * C26620 + (C33840 + C33841) * C84561) *
               C84304) *
              C84603 * C716 -
          (((C81997 * C17422 + C84198 * C17734 + C82024 * C17421 +
             C84509 * C17733) *
                C84561 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C26620 +
            (C23335 + C23334) * C26459 + (C23018 + C23017) * C26619 +
            (C20856 + C20855) * C26458 + (C20628 + C20627) * C26618) *
               C84304 +
           ((C33841 + C33840) * C84561 + (C33535 + C33534) * C26620 +
            (C23333 + C23332) * C26459 + (C23014 + C23013) * C26619 +
            (C20854 + C20853) * C26458 + (C20624 + C20623) * C26618) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C251 +
            (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
             C19728 * C1906 + C19638 * C2393 + C19729 * C2795 +
             C84536 * C3276) *
                C84257) *
               C84509 +
           ((C19747 + C19748 + C19749 + C19750) * C251 +
            (C20212 + C20213 + C20214 + C20215) * C84257) *
               C84198) *
              C84603 * C716 -
          (((C19729 * C15978 + C84536 * C16215 + C19728 * C2794 +
             C19638 * C3275 + C19727 * C1907 + C19637 * C2394 + C19726 * C836 +
             C19636 * C1081) *
                C84257 +
            (C19729 * C15869 + C84536 * C15932 + C19728 * C2598 +
             C19638 * C2714 + C19727 * C1682 + C19637 * C1789 + C19726 * C722 +
             C19636 * C784) *
                C251) *
               C84198 +
           ((C19729 * C15977 + C84536 * C16214 + C19728 * C2795 +
             C19638 * C3276 + C19727 * C1906 + C19637 * C2393 + C19726 * C837 +
             C19636 * C1082) *
                C84257 +
            (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
             C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
             C19636 * C785) *
                C251) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C251 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84257) *
               C6678 +
           ((C6801 + C6802) * C251 + (C7284 + C7285) * C84257) * C6679 +
           ((C6805 + C6806) * C251 + (C7286 + C7287) * C84257) * C6680 +
           ((C6809 + C6810) * C251 + (C7288 + C7289) * C84257) * C84527) *
              C84603 * C716 -
          (((C6775 * C1909 + C84304 * C2396 + C6774 * C834 + C84528 * C1079) *
                C84257 +
            (C6775 * C1684 + C84304 * C1791 + C6774 * C720 + C84528 * C782) *
                C251) *
               C84527 +
           ((C6775 * C1908 + C84304 * C2395 + C6774 * C835 + C84528 * C1080) *
                C84257 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C251) *
               C6680 +
           ((C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C84257 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C251) *
               C6679 +
           ((C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C84257 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C251) *
               C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C26618 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C26458 +
            (C12827 + C12828) * C26619 + (C13439 + C13440) * C26459 +
            (C6774 * C4212 + C84528 * C4307 + C6775 * C5115 + C84304 * C5201) *
                C26620 +
            (C6774 * C4416 + C84528 * C4888 + C6775 * C5281 + C84304 * C5675) *
                C84561) *
               C84509 +
           ((C6801 + C6802) * C26618 + (C7284 + C7285) * C26458 +
            (C10877 + C10878) * C26619 + (C11537 + C11538) * C26459 +
            (C32376 + C32377) * C26620 + (C33009 + C33010) * C84561) *
               C84198) *
              C84603 * C716 -
          (((C6775 * C17422 + C84304 * C17810 + C6774 * C5280 +
             C84528 * C5674) *
                C84561 +
            (C6775 * C17255 + C84304 * C17344 + C6774 * C5114 +
             C84528 * C5200) *
                C26620 +
            (C6775 * C3629 + C84304 * C4045 + C6774 * C3632 + C84528 * C4046) *
                C26459 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C26619 +
            (C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C26458 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C26618) *
               C84198 +
           ((C6775 * C17421 + C84304 * C17809 + C6774 * C5281 +
             C84528 * C5675) *
                C84561 +
            (C6775 * C17254 + C84304 * C17343 + C6774 * C5115 +
             C84528 * C5201) *
                C26620 +
            (C6775 * C3630 + C84304 * C4047 + C6774 * C3633 + C84528 * C4048) *
                C26459 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C26619 +
            (C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C26458 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C26618) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C19636 +
            C3366 * C19637 + C3367 * C19638 + C16763 * C84536) *
               C84509 +
           (C20282 + C20283 + C20284 + C20290) * C84198) *
              C84603 * C716 -
          (((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C84536 +
            C20289 * C19638 + C2517 * C19637 + C2516 * C19636) *
               C84198 +
           (C16764 * C84536 + C16763 * C19638 + C3367 * C19637 +
            C3366 * C19636) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84528 +
            C3366 * C84304) *
               C6678 +
           (C7356 + C7357) * C6679 + (C7358 + C7359) * C6680 +
           (C7360 + C7366) * C84527) *
              C84603 * C716 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84304 +
            C7365 * C84528) *
               C84527 +
           (C2519 * C84304 + C2518 * C84528) * C6680 +
           (C2517 * C84304 + C2516 * C84528) * C6679 +
           (C3367 * C84304 + C3366 * C84528) * C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
             C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
             C27137 + C84561 * C4993) *
                C84528 +
            (C30084 + C30085 + C30086) * C84304) *
               C84509 +
           ((C27171 + C27172 + C27173) * C84528 +
            (C33121 + C33122 + C33123) * C84304) *
               C84198) *
              C84603 * C716 -
          (((C27133 * C17255 + C29310 + C29310 + C84561 * C17886 +
             C27132 * C3442 + C29311 + C29311 + C26459 * C4125 +
             C27131 * C1682 + C29312 + C29312 + C26458 * C2490) *
                C84304 +
            (C33123 + C33122 + C33121) * C84528) *
               C84198 +
           ((C30089 + C30088 + C30087) * C84304 +
            (C30086 + C30085 + C30084) * C84528) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C84257 * C19636 +
           (C20383 + C20384) * C84257 * C19637 +
           (C20385 + C20386) * C84257 * C19638 +
           (C20387 + C20388) * C84257 * C84536) *
              C1177 -
          ((C19642 * C21056 + C21060 + C21060 + C84198 * C21058 +
            C19640 * C16807 + C21061 + C21061 + C84509 * C16811) *
               C84257 * C84536 +
           (C19642 * C3442 + C21062 + C21062 + C84198 * C3454 + C19640 * C3443 +
            C21063 + C21063 + C84509 * C3455) *
               C84257 * C19638 +
           (C19642 * C3445 + C21064 + C21064 + C84198 * C3457 + C19640 * C3446 +
            C21065 + C21065 + C84509 * C3458) *
               C84257 * C19637 +
           (C19642 * C1182 + C21066 + C21066 + C84198 * C1192 + C19640 * C1183 +
            C21067 + C21067 + C84509 * C1193) *
               C84257 * C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84257 * C84528 +
           (C7453 + C7454 + C7455 + C7456) * C84257 * C84304) *
              C1177 -
          ((C6690 * C8102 + C8106 + C8106 + C84527 * C8104 + C6688 * C3444 +
            C8107 + C8107 + C6680 * C3456 + C6686 * C3445 + C8108 + C8108 +
            C6679 * C3457 + C6684 * C3446 + C8109 + C8109 + C6678 * C3458) *
               C84257 * C84304 +
           (C6690 * C1180 + C8110 + C8110 + C84527 * C1190 + C6688 * C1181 +
            C8111 + C8111 + C6680 * C1191 + C6686 * C1182 + C8112 + C8112 +
            C6679 * C1192 + C6684 * C1183 + C8113 + C8113 + C6678 * C1193) *
               C84257 * C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C26458 +
            (C23658 + C23659) * C26459 + (C34151 + C34152) * C84561) *
               C84528 +
           ((C20383 + C20384) * C26458 + (C22687 + C22688) * C26459 +
            (C33230 + C33231) * C84561) *
               C84304) *
              C1177 -
          (((C19642 * C34135 + C34143 + C34143 + C84198 * C34137 +
             C19640 * C18815 + C34144 + C34144 + C84509 * C18819) *
                C84561 +
            (C33231 + C33230) * C26459 + (C22688 + C22687) * C26458) *
               C84304 +
           ((C19642 * C5837 + C34145 + C34145 + C84198 * C5843 +
             C19640 * C5838 + C34146 + C34146 + C84509 * C5844) *
                C84561 +
            (C34152 + C34151) * C26459 + (C23659 + C23658) * C26458) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C82024 +
           (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
            C19728 * C1685 + C19638 * C1792 + C19729 * C2602 + C84536 * C2718) *
               C84509 +
           (C19747 + C19748 + C19749 + C19750) * C81997 +
           (C19751 + C19752 + C19753 + C19754) * C84198) *
              C84257 * C1177 -
          ((C19729 * C21057 + C84536 * C21134 + C19728 * C3448 +
            C19638 * C3550 + C19727 * C3451 + C19637 * C3551 + C19726 * C1187 +
            C19636 * C1249) *
               C84198 +
           (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
            C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
            C19636 * C1244) *
               C81997 +
           (C19729 * C16809 + C84536 * C16862 + C19728 * C3449 +
            C19638 * C3552 + C19727 * C3452 + C19637 * C3553 + C19726 * C1188 +
            C19636 * C1250) *
               C84509 +
           (C19729 * C16807 + C84536 * C16860 + C19728 * C3443 +
            C19638 * C3546 + C19727 * C3446 + C19637 * C3547 + C19726 * C1183 +
            C19636 * C1245) *
               C82024) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C6685 +
           (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
               C6678 +
           (C6801 + C6802) * C6687 + (C6803 + C6804) * C6679 +
           (C6805 + C6806) * C6689 + (C6807 + C6808) * C6680 +
           (C6809 + C6810) * C6691 + (C6811 + C6812) * C84527) *
              C84257 * C1177 -
          ((C6775 * C8103 + C84304 * C8180 + C6774 * C1185 + C84528 * C1247) *
               C84527 +
           (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
               C6691 +
           (C6775 * C3450 + C84304 * C3549 + C6774 * C1186 + C84528 * C1248) *
               C6680 +
           (C6775 * C3444 + C84304 * C3543 + C6774 * C1181 + C84528 * C1243) *
               C6689 +
           (C6775 * C3451 + C84304 * C3551 + C6774 * C1187 + C84528 * C1249) *
               C6679 +
           (C6775 * C3445 + C84304 * C3545 + C6774 * C1182 + C84528 * C1244) *
               C6687 +
           (C6775 * C3452 + C84304 * C3553 + C6774 * C1188 + C84528 * C1250) *
               C6678 +
           (C6775 * C3446 + C84304 * C3547 + C6774 * C1183 + C84528 * C1245) *
               C6685) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82024 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84509 +
            (C6801 + C6802) * C81997 + (C6803 + C6804) * C84198) *
               C26458 +
           ((C12827 + C12828) * C82024 + (C12829 + C12830) * C84509 +
            (C10877 + C10878) * C81997 + (C10879 + C10880) * C84198) *
               C26459 +
           ((C34261 + C34262) * C82024 + (C34263 + C34264) * C84509 +
            (C32376 + C32377) * C81997 + (C32378 + C32379) * C84198) *
               C84561) *
              C1177 -
          (((C6775 * C34136 + C84304 * C34251 + C6774 * C5840 +
             C84528 * C5956) *
                C84198 +
            (C6775 * C34135 + C84304 * C34250 + C6774 * C5837 +
             C84528 * C5953) *
                C81997 +
            (C6775 * C18817 + C84304 * C18910 + C6774 * C5841 +
             C84528 * C5957) *
                C84509 +
            (C6775 * C18815 + C84304 * C18908 + C6774 * C5838 +
             C84528 * C5954) *
                C82024) *
               C84561 +
           ((C32379 + C32378) * C84198 + (C32377 + C32376) * C81997 +
            (C34264 + C34263) * C84509 + (C34262 + C34261) * C82024) *
               C26459 +
           ((C10880 + C10879) * C84198 + (C10878 + C10877) * C81997 +
            (C12830 + C12829) * C84509 + (C12828 + C12827) * C82024) *
               C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82024 +
            (C251 * C108 + C84257 * C258) * C84509 + C281 * C81997 +
            C282 * C84198) *
               C19636 +
           (C20521 + C20522 + C20523 + C20524) * C19637 +
           (C20525 + C20526 + C20527 + C20528) * C19638 +
           (C20529 + C20530 + C20531 + C20532) * C84536) *
              C1177 -
          (((C251 * C21057 + C84257 * C21202) * C84198 +
            (C251 * C21056 + C84257 * C21201) * C81997 +
            (C251 * C16809 + C84257 * C16908) * C84509 +
            (C251 * C16807 + C84257 * C16906) * C82024) *
               C84536 +
           ((C251 * C3448 + C84257 * C3635) * C84198 +
            (C251 * C3442 + C84257 * C3629) * C81997 +
            (C251 * C3449 + C84257 * C3636) * C84509 +
            (C251 * C3443 + C84257 * C3630) * C82024) *
               C19638 +
           ((C251 * C3451 + C84257 * C3638) * C84198 +
            (C251 * C3445 + C84257 * C3632) * C81997 +
            (C251 * C3452 + C84257 * C3639) * C84509 +
            (C251 * C3446 + C84257 * C3633) * C82024) *
               C19637 +
           ((C251 * C1187 + C84257 * C1301) * C84198 +
            (C251 * C1182 + C84257 * C1296) * C81997 +
            (C251 * C1188 + C84257 * C1302) * C84509 +
            (C251 * C1183 + C84257 * C1297) * C82024) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6685 +
            (C251 * C108 + C84257 * C258) * C6678 + C281 * C6687 +
            C282 * C6679 + C283 * C6689 + C284 * C6680 + C285 * C6691 +
            C286 * C84527) *
               C84528 +
           (C7589 + C7590 + C7591 + C7592 + C7593 + C7594 + C7595 + C7596) *
               C84304) *
              C1177 -
          (((C251 * C8103 + C84257 * C8248) * C84527 +
            (C251 * C8102 + C84257 * C8247) * C6691 +
            (C251 * C3450 + C84257 * C3637) * C6680 +
            (C251 * C3444 + C84257 * C3631) * C6689 +
            (C251 * C3451 + C84257 * C3638) * C6679 +
            (C251 * C3445 + C84257 * C3632) * C6687 +
            (C251 * C3452 + C84257 * C3639) * C6678 +
            (C251 * C3446 + C84257 * C3633) * C6685) *
               C84304 +
           ((C251 * C1185 + C84257 * C1299) * C84527 +
            (C251 * C1180 + C84257 * C1294) * C6691 +
            (C251 * C1186 + C84257 * C1300) * C6680 +
            (C251 * C1181 + C84257 * C1295) * C6689 +
            (C251 * C1187 + C84257 * C1301) * C6679 +
            (C251 * C1182 + C84257 * C1296) * C6687 +
            (C251 * C1188 + C84257 * C1302) * C6678 +
            (C251 * C1183 + C84257 * C1297) * C6685) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C82024 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84509 +
            (C26646 + C26647 + C26648) * C81997 +
            (C26649 + C26650 + C26651) * C84198) *
               C84528 +
           ((C29565 + C29566 + C29567) * C82024 +
            (C29568 + C29569 + C29570) * C84509 +
            (C32490 + C32491 + C32492) * C81997 +
            (C32493 + C32494 + C32495) * C84198) *
               C84304) *
              C1177 -
          (((C26620 * C34136 + C84561 * C34363 + C26619 * C5117 +
             C26459 * C5283 + C26618 * C3451 + C26458 * C3638) *
                C84198 +
            (C26620 * C34135 + C84561 * C34362 + C26619 * C5114 +
             C26459 * C5280 + C26618 * C3445 + C26458 * C3632) *
                C81997 +
            (C26620 * C18817 + C84561 * C19024 + C26619 * C5118 +
             C26459 * C5284 + C26618 * C3452 + C26458 * C3639) *
                C84509 +
            (C26620 * C18815 + C84561 * C19022 + C26619 * C5115 +
             C26459 * C5281 + C26618 * C3446 + C26458 * C3633) *
                C82024) *
               C84304 +
           ((C26620 * C5840 + C84561 * C6060 + C26619 * C4217 + C26459 * C4421 +
             C26618 * C1187 + C26458 * C1301) *
                C84198 +
            (C26620 * C5837 + C84561 * C6057 + C26619 * C4213 + C26459 * C4417 +
             C26618 * C1182 + C26458 * C1296) *
                C81997 +
            (C26620 * C5841 + C84561 * C6061 + C26619 * C4216 + C26459 * C4420 +
             C26618 * C1188 + C26458 * C1302) *
                C84509 +
            (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
             C26618 * C1183 + C26458 * C1297) *
                C82024) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C19726 +
           (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
               C19636 +
           (C20623 + C20624) * C19727 + (C20625 + C20626) * C19637 +
           (C20627 + C20628) * C19728 + (C20629 + C20630) * C19638 +
           (C20631 + C20632) * C19729 + (C20633 + C20634) * C84536) *
              C84257 * C1177 -
          ((C81997 * C21133 + C84198 * C21269 + C82024 * C16860 +
            C84509 * C16952) *
               C84536 +
           (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
            C84509 * C16809) *
               C19729 +
           (C81997 * C3544 + C84198 * C3715 + C82024 * C3546 + C84509 * C3716) *
               C19638 +
           (C81997 * C3442 + C84198 * C3448 + C82024 * C3443 + C84509 * C3449) *
               C19728 +
           (C81997 * C3545 + C84198 * C3718 + C82024 * C3547 + C84509 * C3719) *
               C19637 +
           (C81997 * C3445 + C84198 * C3451 + C82024 * C3446 + C84509 * C3452) *
               C19727 +
           (C81997 * C1244 + C84198 * C1348 + C82024 * C1245 + C84509 * C1349) *
               C19636 +
           (C81997 * C1182 + C84198 * C1187 + C82024 * C1183 + C84509 * C1188) *
               C19726) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C6774 +
           (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
            C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
               C84528 +
           (C7679 + C7680 + C7681 + C7682) * C6775 +
           (C7683 + C7684 + C7685 + C7686) * C84304) *
              C84257 * C1177 -
          ((C6691 * C8179 + C84527 * C8315 + C6689 * C3543 + C6680 * C3717 +
            C6687 * C3545 + C6679 * C3718 + C6685 * C3547 + C6678 * C3719) *
               C84304 +
           (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
            C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
               C6775 +
           (C6691 * C1242 + C84527 * C1346 + C6689 * C1243 + C6680 * C1347 +
            C6687 * C1244 + C6679 * C1348 + C6685 * C1245 + C6678 * C1349) *
               C84528 +
           (C6691 * C1180 + C84527 * C1185 + C6689 * C1181 + C6680 * C1186 +
            C6687 * C1182 + C6679 * C1187 + C6685 * C1183 + C6678 * C1188) *
               C6774) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C6774 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84528 +
            (C20623 + C20624) * C6775 + (C20625 + C20626) * C84304) *
               C26458 +
           ((C23962 + C23963) * C6774 + (C23964 + C23965) * C84528 +
            (C23013 + C23014) * C6775 + (C23015 + C23016) * C84304) *
               C26459 +
           ((C34472 + C34473) * C6774 + (C34474 + C34475) * C84528 +
            (C33534 + C33535) * C6775 + (C33536 + C33537) * C84304) *
               C84561) *
              C1177 -
          (((C81997 * C34250 + C84198 * C34462 + C82024 * C18908 +
             C84509 * C19100) *
                C84304 +
            (C81997 * C34135 + C84198 * C34136 + C82024 * C18815 +
             C84509 * C18817) *
                C6775 +
            (C81997 * C5953 + C84198 * C6137 + C82024 * C5954 +
             C84509 * C6138) *
                C84528 +
            (C81997 * C5837 + C84198 * C5840 + C82024 * C5838 +
             C84509 * C5841) *
                C6774) *
               C84561 +
           ((C33537 + C33536) * C84304 + (C33535 + C33534) * C6775 +
            (C34475 + C34474) * C84528 + (C34473 + C34472) * C6774) *
               C26459 +
           ((C23016 + C23015) * C84304 + (C23014 + C23013) * C6775 +
            (C23965 + C23964) * C84528 + (C23963 + C23962) * C6774) *
               C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19958 * C102 + C19963 + C19963 + C19636 * C379 + C19959 * C723 +
            C19964 + C19964 + C19637 * C936 + C19960 * C1681 + C19965 + C19965 +
            C19638 * C2093 + C19961 * C2599 + C19966 + C19966 +
            C84536 * C3012) *
               C84509 +
           (C19991 + C19992 + C19993 + C19994) * C84198) *
              C84257 * C1177 -
          ((C19961 * C21056 + C21338 + C21338 + C84536 * C21336 +
            C19960 * C3442 + C21339 + C21339 + C19638 * C3796 + C19959 * C3445 +
            C21340 + C21340 + C19637 * C3797 + C19958 * C1182 + C21341 +
            C21341 + C19636 * C1395) *
               C84198 +
           (C19961 * C16807 + C21342 + C21342 + C84536 * C16996 +
            C19960 * C3443 + C21343 + C21343 + C19638 * C3798 + C19959 * C3446 +
            C21344 + C21344 + C19637 * C3799 + C19958 * C1183 + C21345 +
            C21345 + C19636 * C1396) *
               C84509) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
            C7020 + C7020 + C84304 * C936) *
               C6678 +
           (C7053 + C7054) * C6679 + (C7055 + C7056) * C6680 +
           (C7057 + C7058) * C84527) *
              C84257 * C1177 -
          ((C7017 * C8102 + C8384 + C8384 + C84304 * C8382 + C7016 * C1180 +
            C8385 + C8385 + C84528 * C1393) *
               C84527 +
           (C7017 * C3444 + C8386 + C8386 + C84304 * C3795 + C7016 * C1181 +
            C8387 + C8387 + C84528 * C1394) *
               C6680 +
           (C7017 * C3445 + C8388 + C8388 + C84304 * C3797 + C7016 * C1182 +
            C8389 + C8389 + C84528 * C1395) *
               C6679 +
           (C7017 * C3446 + C8390 + C8390 + C84304 * C3799 + C7016 * C1183 +
            C8391 + C8391 + C84528 * C1396) *
               C6678) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
             C7020 + C7020 + C84304 * C936) *
                C84509 +
            (C7053 + C7054) * C84198) *
               C26458 +
           ((C13139 + C13140) * C84509 + (C11219 + C11220) * C84198) * C26459 +
           ((C34587 + C34588) * C84509 + (C32700 + C32701) * C84198) * C84561) *
              C1177 -
          (((C7017 * C34135 + C34579 + C34579 + C84304 * C34573 +
             C7016 * C5837 + C34580 + C34580 + C84528 * C6250) *
                C84198 +
            (C7017 * C18815 + C34581 + C34581 + C84304 * C19200 +
             C7016 * C5838 + C34582 + C34582 + C84528 * C6251) *
                C84509) *
               C84561 +
           ((C32701 + C32700) * C84198 + (C34588 + C34587) * C84509) * C26459 +
           ((C11220 + C11219) * C84198 + (C13140 + C13139) * C84509) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C19726 +
                      (C251 * C173 + C84257 * C453) * C19636 + C2816 * C19727 +
                      C3104 * C19637 + C2818 * C19728 + C3105 * C19638 +
                      C16433 * C19729 + C16603 * C84536) *
                         C84509 +
                     (C20061 + C20062 + C20063 + C20064 + C20065 + C20066 +
                      C20067 + C20071) *
                         C84198) *
                        C1177 -
                    (((C251 * C21133 + C84257 * C21411) * C84536 +
                      (C251 * C21056 + C84257 * C21201) * C19729 +
                      (C251 * C3544 + C84257 * C3885) * C19638 +
                      (C251 * C3442 + C84257 * C3629) * C19728 +
                      (C251 * C3545 + C84257 * C3886) * C19637 +
                      (C251 * C3445 + C84257 * C3632) * C19727 +
                      (C251 * C1244 + C84257 * C1447) * C19636 +
                      (C251 * C1182 + C84257 * C1296) * C19726) *
                         C84198 +
                     ((C251 * C16860 + C84257 * C17045) * C84536 +
                      (C251 * C16807 + C84257 * C16906) * C19729 +
                      (C251 * C3546 + C84257 * C3887) * C19638 +
                      (C251 * C3443 + C84257 * C3630) * C19728 +
                      (C251 * C3547 + C84257 * C3888) * C19637 +
                      (C251 * C3446 + C84257 * C3633) * C19727 +
                      (C251 * C1245 + C84257 * C1448) * C19636 +
                      (C251 * C1183 + C84257 * C1297) * C19726) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C6774 +
                      (C251 * C173 + C84257 * C453) * C84528 + C2816 * C6775 +
                      C3104 * C84304) *
                         C6678 +
                     (C7125 + C7126 + C7127 + C7128) * C6679 +
                     (C7129 + C7130 + C7131 + C7132) * C6680 +
                     (C7133 + C7134 + C7135 + C7139) * C84527) *
                        C1177 -
                    (((C251 * C8179 + C84257 * C8457) * C84304 +
                      (C251 * C8102 + C84257 * C8247) * C6775 +
                      (C251 * C1242 + C84257 * C1445) * C84528 +
                      (C251 * C1180 + C84257 * C1294) * C6774) *
                         C84527 +
                     ((C251 * C3543 + C84257 * C3884) * C84304 +
                      (C251 * C3444 + C84257 * C3631) * C6775 +
                      (C251 * C1243 + C84257 * C1446) * C84528 +
                      (C251 * C1181 + C84257 * C1295) * C6774) *
                         C6680 +
                     ((C251 * C3545 + C84257 * C3886) * C84304 +
                      (C251 * C3445 + C84257 * C3632) * C6775 +
                      (C251 * C1244 + C84257 * C1447) * C84528 +
                      (C251 * C1182 + C84257 * C1296) * C6774) *
                         C6679 +
                     ((C251 * C3547 + C84257 * C3888) * C84304 +
                      (C251 * C3446 + C84257 * C3633) * C6775 +
                      (C251 * C1245 + C84257 * C1448) * C84528 +
                      (C251 * C1183 + C84257 * C1297) * C6774) *
                         C6678) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 +
                       C26459 * C1297 + C26620 * C4212 + C84561 * C4416) *
                          C6774 +
                      (C26618 * C173 + C26458 * C453 + C26619 * C1245 +
                       C26459 * C1448 + C26620 * C4307 + C84561 * C4714) *
                          C84528 +
                      (C29565 + C29566 + C29567) * C6775 +
                      (C29817 + C29818 + C29819) * C84304) *
                         C84509 +
                     ((C26646 + C26647 + C26648) * C6774 +
                      (C26892 + C26893 + C26894) * C84528 +
                      (C32490 + C32491 + C32492) * C6775 +
                      (C32806 + C32807 + C32808) * C84304) *
                         C84198) *
                        C1177 -
                    (((C26620 * C34250 + C84561 * C34686 + C26619 * C5200 +
                       C26459 * C5520 + C26618 * C3545 + C26458 * C3886) *
                          C84304 +
                      (C26620 * C34135 + C84561 * C34362 + C26619 * C5114 +
                       C26459 * C5280 + C26618 * C3445 + C26458 * C3632) *
                          C6775 +
                      (C26620 * C5953 + C84561 * C6346 + C26619 * C4308 +
                       C26459 * C4715 + C26618 * C1244 + C26458 * C1447) *
                          C84528 +
                      (C26620 * C5837 + C84561 * C6057 + C26619 * C4213 +
                       C26459 * C4417 + C26618 * C1182 + C26458 * C1296) *
                          C6774) *
                         C84198 +
                     ((C26620 * C18908 + C84561 * C19309 + C26619 * C5201 +
                       C26459 * C5521 + C26618 * C3547 + C26458 * C3888) *
                          C84304 +
                      (C26620 * C18815 + C84561 * C19022 + C26619 * C5115 +
                       C26459 * C5281 + C26618 * C3446 + C26458 * C3633) *
                          C6775 +
                      (C26620 * C5954 + C84561 * C6347 + C26619 * C4307 +
                       C26459 * C4714 + C26618 * C1245 + C26458 * C1448) *
                          C84528 +
                      (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 +
                       C26459 * C4416 + C26618 * C1183 + C26458 * C1297) *
                          C6774) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C251 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84257) *
               C19636 +
           ((C20623 + C20624) * C251 + (C20853 + C20854) * C84257) * C19637 +
           ((C20627 + C20628) * C251 + (C20855 + C20856) * C84257) * C19638 +
           ((C20631 + C20632) * C251 + (C20857 + C20858) * C84257) * C84536) *
              C1177 -
          (((C81997 * C21201 + C84198 * C21478 + C82024 * C16906 +
             C84509 * C17089) *
                C84257 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C251) *
               C84536 +
           ((C81997 * C3629 + C84198 * C3964 + C82024 * C3630 +
             C84509 * C3965) *
                C84257 +
            (C81997 * C3442 + C84198 * C3448 + C82024 * C3443 +
             C84509 * C3449) *
                C251) *
               C19638 +
           ((C81997 * C3632 + C84198 * C3967 + C82024 * C3633 +
             C84509 * C3968) *
                C84257 +
            (C81997 * C3445 + C84198 * C3451 + C82024 * C3446 +
             C84509 * C3452) *
                C251) *
               C19637 +
           ((C81997 * C1296 + C84198 * C1494 + C82024 * C1297 +
             C84509 * C1495) *
                C84257 +
            (C81997 * C1182 + C84198 * C1187 + C82024 * C1183 +
             C84509 * C1188) *
                C251) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C251 +
            (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
             C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
                C84257) *
               C84528 +
           ((C7679 + C7680 + C7681 + C7682) * C251 +
            (C7901 + C7902 + C7903 + C7904) * C84257) *
               C84304) *
              C1177 -
          (((C6691 * C8247 + C84527 * C8524 + C6689 * C3631 + C6680 * C3966 +
             C6687 * C3632 + C6679 * C3967 + C6685 * C3633 + C6678 * C3968) *
                C84257 +
            (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
             C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
                C251) *
               C84304 +
           ((C6691 * C1294 + C84527 * C1492 + C6689 * C1295 + C6680 * C1493 +
             C6687 * C1296 + C6679 * C1494 + C6685 * C1297 + C6678 * C1495) *
                C84257 +
            (C6691 * C1180 + C84527 * C1185 + C6689 * C1181 + C6680 * C1186 +
             C6687 * C1182 + C6679 * C1187 + C6685 * C1183 + C6678 * C1188) *
                C251) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C26618 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C26458 +
            (C23962 + C23963) * C26619 + (C24264 + C24265) * C26459 +
            (C34472 + C34473) * C26620 + (C34791 + C34792) * C84561) *
               C84528 +
           ((C20623 + C20624) * C26618 + (C20853 + C20854) * C26458 +
            (C23013 + C23014) * C26619 + (C23332 + C23333) * C26459 +
            (C33534 + C33535) * C26620 + (C33840 + C33841) * C84561) *
               C84304) *
              C1177 -
          (((C81997 * C34362 + C84198 * C34785 + C82024 * C19022 +
             C84509 * C19385) *
                C84561 +
            (C81997 * C34135 + C84198 * C34136 + C82024 * C18815 +
             C84509 * C18817) *
                C26620 +
            (C33841 + C33840) * C26459 + (C33535 + C33534) * C26619 +
            (C23333 + C23332) * C26458 + (C23014 + C23013) * C26618) *
               C84304 +
           ((C81997 * C6057 + C84198 * C6423 + C82024 * C6058 +
             C84509 * C6424) *
                C84561 +
            (C81997 * C5837 + C84198 * C5840 + C82024 * C5838 +
             C84509 * C5841) *
                C26620 +
            (C34792 + C34791) * C26459 + (C34473 + C34472) * C26619 +
            (C24265 + C24264) * C26458 + (C23963 + C23962) * C26618) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C251 +
            (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
             C19728 * C1906 + C19638 * C2393 + C19729 * C2795 +
             C84536 * C3276) *
                C84257) *
               C84509 +
           ((C19747 + C19748 + C19749 + C19750) * C251 +
            (C20212 + C20213 + C20214 + C20215) * C84257) *
               C84198) *
              C1177 -
          (((C19729 * C21201 + C84536 * C21545 + C19728 * C3629 +
             C19638 * C4045 + C19727 * C3632 + C19637 * C4046 + C19726 * C1296 +
             C19636 * C1541) *
                C84257 +
            (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
             C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
             C19636 * C1244) *
                C251) *
               C84198 +
           ((C19729 * C16906 + C84536 * C17133 + C19728 * C3630 +
             C19638 * C4047 + C19727 * C3633 + C19637 * C4048 + C19726 * C1297 +
             C19636 * C1542) *
                C84257 +
            (C19729 * C16807 + C84536 * C16860 + C19728 * C3443 +
             C19638 * C3546 + C19727 * C3446 + C19637 * C3547 + C19726 * C1183 +
             C19636 * C1245) *
                C251) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C251 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84257) *
               C6678 +
           ((C6801 + C6802) * C251 + (C7284 + C7285) * C84257) * C6679 +
           ((C6805 + C6806) * C251 + (C7286 + C7287) * C84257) * C6680 +
           ((C6809 + C6810) * C251 + (C7288 + C7289) * C84257) * C84527) *
              C1177 -
          (((C6775 * C8247 + C84304 * C8591 + C6774 * C1294 + C84528 * C1539) *
                C84257 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C251) *
               C84527 +
           ((C6775 * C3631 + C84304 * C4044 + C6774 * C1295 + C84528 * C1540) *
                C84257 +
            (C6775 * C3444 + C84304 * C3543 + C6774 * C1181 + C84528 * C1243) *
                C251) *
               C6680 +
           ((C6775 * C3632 + C84304 * C4046 + C6774 * C1296 + C84528 * C1541) *
                C84257 +
            (C6775 * C3445 + C84304 * C3545 + C6774 * C1182 + C84528 * C1244) *
                C251) *
               C6679 +
           ((C6775 * C3633 + C84304 * C4048 + C6774 * C1297 + C84528 * C1542) *
                C84257 +
            (C6775 * C3446 + C84304 * C3547 + C6774 * C1183 + C84528 * C1245) *
                C251) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C26618 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C26458 +
            (C12827 + C12828) * C26619 + (C13439 + C13440) * C26459 +
            (C34261 + C34262) * C26620 + (C34896 + C34897) * C84561) *
               C84509 +
           ((C6801 + C6802) * C26618 + (C7284 + C7285) * C26458 +
            (C10877 + C10878) * C26619 + (C11537 + C11538) * C26459 +
            (C32376 + C32377) * C26620 + (C33009 + C33010) * C84561) *
               C84198) *
              C1177 -
          (((C6775 * C34362 + C84304 * C34890 + C6774 * C6057 +
             C84528 * C6518) *
                C84561 +
            (C6775 * C34135 + C84304 * C34250 + C6774 * C5837 +
             C84528 * C5953) *
                C26620 +
            (C33010 + C33009) * C26459 + (C32377 + C32376) * C26619 +
            (C11538 + C11537) * C26458 + (C10878 + C10877) * C26618) *
               C84198 +
           ((C6775 * C19022 + C84304 * C19467 + C6774 * C6058 +
             C84528 * C6519) *
                C84561 +
            (C6775 * C18815 + C84304 * C18908 + C6774 * C5838 +
             C84528 * C5954) *
                C26620 +
            (C34897 + C34896) * C26459 + (C34262 + C34261) * C26619 +
            (C13440 + C13439) * C26458 + (C12828 + C12827) * C26618) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C19636 +
            C3366 * C19637 + C3367 * C19638 + C16763 * C84536) *
               C84509 +
           (C20282 + C20283 + C20284 + C20290) * C84198) *
              C1177 -
          (((C637 * C21056 + C21614 + C21614 + C84257 * C21612) * C84536 +
            (C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C19638 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C19637 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C19636) *
               C84198 +
           ((C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C84536 +
            (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C19638 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C19637 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C19636) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84528 +
            C3366 * C84304) *
               C6678 +
           (C7356 + C7357) * C6679 + (C7358 + C7359) * C6680 +
           (C7360 + C7366) * C84527) *
              C1177 -
          (((C637 * C8102 + C8660 + C8660 + C84257 * C8658) * C84304 +
            (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C84528) *
               C84527 +
           ((C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84304 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84528) *
               C6680 +
           ((C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84304 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84528) *
               C6679 +
           ((C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84304 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84528) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
             C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
             C27137 + C84561 * C4993) *
                C84528 +
            (C30084 + C30085 + C30086) * C84304) *
               C84509 +
           ((C27171 + C27172 + C27173) * C84528 +
            (C33121 + C33122 + C33123) * C84304) *
               C84198) *
              C1177 -
          (((C27133 * C34135 + C34997 + C34997 + C84561 * C34995 +
             C27132 * C5114 + C34998 + C34998 + C26459 * C5751 +
             C27131 * C3445 + C34999 + C34999 + C26458 * C4126) *
                C84304 +
            (C27133 * C5837 + C28629 + C28629 + C84561 * C6601 +
             C27132 * C4213 + C28630 + C28630 + C26459 * C4994 +
             C27131 * C1182 + C28631 + C28631 + C26458 * C1588) *
                C84528) *
               C84198 +
           ((C27133 * C18815 + C30858 + C30858 + C84561 * C19561 +
             C27132 * C5115 + C30859 + C30859 + C26459 * C5752 +
             C27131 * C3446 + C30860 + C30860 + C26458 * C4128) *
                C84304 +
            (C27133 * C5838 + C28632 + C28632 + C84561 * C6602 +
             C27132 * C4212 + C28633 + C28633 + C26459 * C4993 +
             C27131 * C1183 + C28634 + C28634 + C26458 * C1589) *
                C84528) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84529 +
            C18832 * C84344) *
               C19636 +
           (C16325 * C84529 + C17990 * C84344) * C19637 +
           (C16326 * C84529 + C17992 * C84344) * C19638 +
           (C16327 * C84529 +
            (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84344) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C15866 * C21056 + C24532 + C24532 + C84188 * C21058) * C84344 +
            (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C84529) *
               C84536 +
           ((C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84344 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84529) *
               C19638 +
           ((C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84344 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84529) *
               C19637 +
           ((C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84344 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84529) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
             C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
             C84550 * C116) *
                C84529 +
            (C5873 + C5874 + C5875) * C84344) *
               C84528 +
           ((C2634 + C2635 + C2636) * C84529 +
            (C1675 * C3446 + C3465 + C3465 + C1669 * C3458 + C1677 * C3445 +
             C3464 + C3464 + C1670 * C3457 + C1679 * C3444 + C3463 + C3463 +
             C84550 * C3456) *
                C84344) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C1679 * C8102 + C10760 + C10760 + C84550 * C8104 + C1677 * C3444 +
             C10761 + C10761 + C1670 * C3456 + C1675 * C3445 + C10762 + C10762 +
             C1669 * C3457) *
                C84344 +
            (C1679 * C720 + C1706 + C1706 + C84550 * C730 + C1677 * C721 +
             C1707 + C1707 + C1670 * C731 + C1675 * C722 + C1708 + C1708 +
             C1669 * C732) *
                C84529) *
               C84304 +
           ((C1679 * C1180 + C4231 + C4231 + C84550 * C1190 + C1677 * C1181 +
             C4232 + C4232 + C1670 * C1191 + C1675 * C1182 + C4233 + C4233 +
             C1669 * C1192) *
                C84344 +
            (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
             C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
             C1669 * C115) *
                C84529) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C35065 +
            C18832 * C35066 + C18833 * C35067 + C31748 * C84543) *
               C84528 +
           (C16325 * C35065 + C17990 * C35066 + C17991 * C35067 +
            (C15866 * C18815 + C18826 + C18826 + C84188 * C18819) * C84543) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C15866 * C34135 + C37017 + C37017 + C84188 * C34137) * C84543 +
            (C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C35067 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C35066 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C35065) *
               C84304 +
           ((C15866 * C5837 + C30916 + C30916 + C84188 * C5843) * C84543 +
            (C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C35067 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C35066 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C35065) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
             C19728 * C1685 + C19638 * C1792 + C19729 * C2602 +
             C84536 * C2718) *
                C84188) *
               C84529 +
           ((C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
             C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C19726 * C1188 + C19636 * C1250 + C19727 * C3452 + C19637 * C3553 +
             C19728 * C3449 + C19638 * C3552 + C19729 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C19729 * C21057 + C84536 * C21134 + C19728 * C3448 +
             C19638 * C3550 + C19727 * C3451 + C19637 * C3551 + C19726 * C1187 +
             C19636 * C1249) *
                C84188 +
            (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
             C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
             C19636 * C1244) *
                C15867) *
               C84344 +
           ((C19754 + C19753 + C19752 + C19751) * C84188 +
            (C19750 + C19749 + C19748 + C19747) * C15867) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C1676 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C1669 +
            (C6801 + C6802) * C1678 + (C6803 + C6804) * C1670 +
            (C6805 + C6806) * C1680 + (C6807 + C6808) * C84550) *
               C84529 +
           ((C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C1676 +
            (C6774 * C1188 + C84528 * C1250 + C6775 * C3452 + C84304 * C3553) *
                C1669 +
            (C10877 + C10878) * C1678 + (C10879 + C10880) * C1670 +
            (C10881 + C10882) * C1680 + (C10883 + C10884) * C84550) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C6775 * C8103 + C84304 * C8180 + C6774 * C1185 + C84528 * C1247) *
                C84550 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C1680 +
            (C10884 + C10883) * C1670 + (C10882 + C10881) * C1678 +
            (C10880 + C10879) * C1669 + (C10878 + C10877) * C1676) *
               C84344 +
           ((C6812 + C6811) * C84550 + (C6810 + C6809) * C1680 +
            (C6808 + C6807) * C1670 + (C6806 + C6805) * C1678 +
            (C6804 + C6803) * C1669 + (C6802 + C6801) * C1676) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C15867 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84188) *
               C35065 +
           ((C12827 + C12828) * C15867 + (C12829 + C12830) * C84188) * C35066 +
           ((C34261 + C34262) * C15867 + (C34263 + C34264) * C84188) * C35067 +
           ((C6774 * C5838 + C84528 * C5954 + C6775 * C18815 +
             C84304 * C18908) *
                C15867 +
            (C6774 * C5841 + C84528 * C5957 + C6775 * C18817 +
             C84304 * C18910) *
                C84188) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C6775 * C34136 + C84304 * C34251 + C6774 * C5840 +
             C84528 * C5956) *
                C84188 +
            (C6775 * C34135 + C84304 * C34250 + C6774 * C5837 +
             C84528 * C5953) *
                C15867) *
               C84543 +
           ((C32379 + C32378) * C84188 + (C32377 + C32376) * C15867) * C35067 +
           ((C10880 + C10879) * C84188 + (C10878 + C10877) * C15867) * C35066 +
           ((C6804 + C6803) * C84188 + (C6802 + C6801) * C15867) * C35065) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C15867 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84188) *
               C19636 +
           ((C11976 + C11977) * C15867 + (C11978 + C11979) * C84188) * C19637 +
           ((C22895 + C22896) * C15867 + (C22897 + C22898) * C84188) * C19638 +
           ((C8870 * C2599 + C84529 * C2795 + C8871 * C16807 +
             C84344 * C16906) *
                C15867 +
            (C8870 * C2602 + C84529 * C2798 + C8871 * C16809 +
             C84344 * C16908) *
                C84188) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C8871 * C21057 + C84344 * C21202 + C8870 * C2601 +
             C84529 * C2797) *
                C84188 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C15867) *
               C84536 +
           ((C21944 + C21943) * C84188 + (C21942 + C21941) * C15867) * C19638 +
           ((C11002 + C11001) * C84188 + (C11000 + C10999) * C15867) * C19637 +
           ((C8900 + C8899) * C84188 + (C8898 + C8897) * C15867) * C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C1676 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C1669 +
            (C8897 + C8898) * C1678 + (C8899 + C8900) * C1670 +
            (C8901 + C8902) * C1680 + (C8903 + C8904) * C84550) *
               C84528 +
           ((C8870 * C723 + C84529 * C837 + C8871 * C3446 + C84344 * C3633) *
                C1676 +
            (C8870 * C728 + C84529 * C842 + C8871 * C3452 + C84344 * C3639) *
                C1669 +
            (C10999 + C11000) * C1678 + (C11001 + C11002) * C1670 +
            (C11003 + C11004) * C1680 + (C11005 + C11006) * C84550) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C8871 * C8103 + C84344 * C8248 + C8870 * C725 + C84529 * C839) *
                C84550 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C1680 +
            (C11006 + C11005) * C1670 + (C11004 + C11003) * C1678 +
            (C11002 + C11001) * C1669 + (C11000 + C10999) * C1676) *
               C84304 +
           ((C8908 + C8907) * C84550 + (C8906 + C8905) * C1680 +
            (C8904 + C8903) * C1670 + (C8902 + C8901) * C1678 +
            (C8900 + C8899) * C1669 + (C8898 + C8897) * C1676) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
             C35211 * C4212 + C35067 * C4416 + C35212 * C5838 +
             C84543 * C6058) *
                C15867 +
            (C35209 * C108 + C35065 * C258 + C35210 * C1188 + C35066 * C1302 +
             C35211 * C4216 + C35067 * C4420 + C35212 * C5841 +
             C84543 * C6061) *
                C84188) *
               C84528 +
           ((C35209 * C723 + C35065 * C837 + C35210 * C3446 + C35066 * C3633 +
             C35211 * C5115 + C35067 * C5281 + C35212 * C18815 +
             C84543 * C19022) *
                C15867 +
            (C35209 * C728 + C35065 * C842 + C35210 * C3452 + C35066 * C3639 +
             C35211 * C5118 + C35067 * C5284 + C35212 * C18817 +
             C84543 * C19024) *
                C84188) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C35212 * C34136 + C84543 * C34363 + C35211 * C5117 +
             C35067 * C5283 + C35210 * C3451 + C35066 * C3638 + C35209 * C727 +
             C35065 * C841) *
                C84188 +
            (C35212 * C34135 + C84543 * C34362 + C35211 * C5114 +
             C35067 * C5280 + C35210 * C3445 + C35066 * C3632 + C35209 * C722 +
             C35065 * C836) *
                C15867) *
               C84304 +
           ((C35237 + C35236 + C35235 + C35234) * C84188 +
            (C35233 + C35232 + C35231 + C35230) * C15867) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C19726 +
            (C15867 * C173 + C84188 * C330) * C19636 + C16500 * C19727 +
            C16501 * C19637 + C16502 * C19728 + C16503 * C19638 +
            C16504 * C19729 + C16505 * C84536) *
               C84529 +
           (C19118 * C19726 + C19119 * C19636 + C18277 * C19727 +
            C18278 * C19637 + C18279 * C19728 + C18280 * C19638 +
            (C15867 * C16807 + C84188 * C16809) * C19729 +
            (C15867 * C16860 + C84188 * C16952) * C84536) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C15867 * C21133 + C84188 * C21269) * C84536 +
            (C15867 * C21056 + C84188 * C21057) * C19729 +
            (C15867 * C3544 + C84188 * C3715) * C19638 +
            (C15867 * C3442 + C84188 * C3448) * C19728 +
            (C15867 * C3545 + C84188 * C3718) * C19637 +
            (C15867 * C3445 + C84188 * C3451) * C19727 +
            (C15867 * C1244 + C84188 * C1348) * C19636 +
            (C15867 * C1182 + C84188 * C1187) * C19726) *
               C84344 +
           ((C15867 * C2714 + C84188 * C2898) * C84536 +
            (C15867 * C2598 + C84188 * C2601) * C19729 +
            (C15867 * C1789 + C84188 * C2013) * C19638 +
            (C15867 * C1682 + C84188 * C1686) * C19728 +
            (C15867 * C784 + C84188 * C888) * C19637 +
            (C15867 * C722 + C84188 * C727) * C19727 +
            (C15867 * C174 + C84188 * C331) * C19636 +
            (C15867 * C103 + C84188 * C109) * C19726) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C6774 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84528 +
            (C2925 + C2926 + C2927) * C6775 +
            (C2928 + C2929 + C2930) * C84304) *
               C84529 +
           ((C6164 + C6165 + C6166) * C6774 + (C6167 + C6168 + C6169) * C84528 +
            (C1676 * C3446 + C1669 * C3452 + C1678 * C3445 + C1670 * C3451 +
             C1680 * C3444 + C84550 * C3450) *
                C6775 +
            (C1676 * C3547 + C1669 * C3719 + C1678 * C3545 + C1670 * C3718 +
             C1680 * C3543 + C84550 * C3717) *
                C84304) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C1680 * C8179 + C84550 * C8315 + C1678 * C3543 + C1670 * C3717 +
             C1676 * C3545 + C1669 * C3718) *
                C84304 +
            (C1680 * C8102 + C84550 * C8103 + C1678 * C3444 + C1670 * C3450 +
             C1676 * C3445 + C1669 * C3451) *
                C6775 +
            (C1680 * C1242 + C84550 * C1346 + C1678 * C1243 + C1670 * C1347 +
             C1676 * C1244 + C1669 * C1348) *
                C84528 +
            (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
             C1676 * C1182 + C1669 * C1187) *
                C6774) *
               C84344 +
           ((C1680 * C782 + C84550 * C886 + C1678 * C783 + C1670 * C887 +
             C1676 * C784 + C1669 * C888) *
                C84304 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C6775 +
            (C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
             C1676 * C174 + C1669 * C331) *
                C84528 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C6774) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C6774 +
            (C15867 * C173 + C84188 * C330) * C84528 + C16500 * C6775 +
            C16501 * C84304) *
               C35065 +
           (C19118 * C6774 + C19119 * C84528 + C18277 * C6775 +
            C18278 * C84304) *
               C35066 +
           (C19120 * C6774 + C19121 * C84528 + C18281 * C6775 +
            C18282 * C84304) *
               C35067 +
           (C31913 * C6774 + C31914 * C84528 +
            (C15867 * C18815 + C84188 * C18817) * C6775 +
            (C15867 * C18908 + C84188 * C19100) * C84304) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C15867 * C34250 + C84188 * C34462) * C84304 +
            (C15867 * C34135 + C84188 * C34136) * C6775 +
            (C15867 * C5953 + C84188 * C6137) * C84528 +
            (C15867 * C5837 + C84188 * C5840) * C6774) *
               C84543 +
           ((C15867 * C5200 + C84188 * C5360) * C84304 +
            (C15867 * C5114 + C84188 * C5117) * C6775 +
            (C15867 * C4308 + C84188 * C4535) * C84528 +
            (C15867 * C4213 + C84188 * C4217) * C6774) *
               C35067 +
           ((C15867 * C3545 + C84188 * C3718) * C84304 +
            (C15867 * C3445 + C84188 * C3451) * C6775 +
            (C15867 * C1244 + C84188 * C1348) * C84528 +
            (C15867 * C1182 + C84188 * C1187) * C6774) *
               C35066 +
           ((C15867 * C784 + C84188 * C888) * C84304 +
            (C15867 * C722 + C84188 * C727) * C6775 +
            (C15867 * C174 + C84188 * C331) * C84528 +
            (C15867 * C103 + C84188 * C109) * C6774) *
               C35065) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[33] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84188 * C84529 +
                     (C19958 * C1183 + C21345 + C21345 + C19636 * C1396 +
                      C19959 * C3446 + C21344 + C21344 + C19637 * C3799 +
                      C19960 * C3443 + C21343 + C21343 + C19638 * C3798 +
                      C19961 * C16807 + C21342 + C21342 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C84604 * C90 -
                    ((C19961 * C21056 + C21338 + C21338 + C84536 * C21336 +
                      C19960 * C3442 + C21339 + C21339 + C19638 * C3796 +
                      C19959 * C3445 + C21340 + C21340 + C19637 * C3797 +
                      C19958 * C1182 + C21341 + C21341 + C19636 * C1395) *
                         C84188 * C84344 +
                     (C19994 + C19993 + C19992 + C19991) * C84188 * C84529) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C1669 +
                      (C7053 + C7054) * C1670 + (C7055 + C7056) * C84550) *
                         C84529 +
                     ((C7016 * C1183 + C8391 + C8391 + C84528 * C1396 +
                       C7017 * C3446 + C8390 + C8390 + C84304 * C3799) *
                          C1669 +
                      (C11219 + C11220) * C1670 + (C11221 + C11222) * C84550) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C7017 * C8102 + C8384 + C8384 + C84304 * C8382 +
                       C7016 * C1180 + C8385 + C8385 + C84528 * C1393) *
                          C84550 +
                      (C11222 + C11221) * C1670 + (C11220 + C11219) * C1669) *
                         C84344 +
                     ((C7058 + C7057) * C84550 + (C7056 + C7055) * C1670 +
                      (C7054 + C7053) * C1669) *
                         C84529) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                      C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                         C84188 * C35065 +
                     (C13139 + C13140) * C84188 * C35066 +
                     (C34587 + C34588) * C84188 * C35067 +
                     (C7016 * C5838 + C34582 + C34582 + C84528 * C6251 +
                      C7017 * C18815 + C34581 + C34581 + C84304 * C19200) *
                         C84188 * C84543) *
                        C84603 * C84604 * C90 -
                    ((C7017 * C34135 + C34579 + C34579 + C84304 * C34573 +
                      C7016 * C5837 + C34580 + C34580 + C84528 * C6250) *
                         C84188 * C84543 +
                     (C32701 + C32700) * C84188 * C35067 +
                     (C11220 + C11219) * C84188 * C35066 +
                     (C7054 + C7053) * C84188 * C35065) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C19726 +
           (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
               C19636 +
           (C11976 + C11977) * C19727 + (C12302 + C12303) * C19637 +
           (C22895 + C22896) * C19728 + (C23224 + C23225) * C19638 +
           (C8870 * C2599 + C84529 * C2795 + C8871 * C16807 + C84344 * C16906) *
               C19729 +
           (C8870 * C2715 + C84529 * C3098 + C8871 * C16860 + C84344 * C17045) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C8871 * C21133 + C84344 * C21411 + C8870 * C2714 + C84529 * C3097) *
               C84536 +
           (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 + C84529 * C2794) *
               C19729 +
           (C22259 + C22258) * C19638 + (C21942 + C21941) * C19728 +
           (C11330 + C11329) * C19637 + (C11000 + C10999) * C19727 +
           (C9125 + C9124) * C19636 + (C8898 + C8897) * C19726) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C6774 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84528 +
            (C8870 * C723 + C84529 * C837 + C8871 * C3446 + C84344 * C3633) *
                C6775 +
            (C8870 * C785 + C84529 * C988 + C8871 * C3547 + C84344 * C3888) *
                C84304) *
               C1669 +
           ((C8897 + C8898) * C6774 + (C9124 + C9125) * C84528 +
            (C10999 + C11000) * C6775 + (C11329 + C11330) * C84304) *
               C1670 +
           ((C8901 + C8902) * C6774 + (C9126 + C9127) * C84528 +
            (C11003 + C11004) * C6775 + (C11331 + C11332) * C84304) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C8871 * C8179 + C84344 * C8457 + C8870 * C782 + C84529 * C985) *
                C84304 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C6775 +
            (C9129 + C9128) * C84528 + (C8906 + C8905) * C6774) *
               C84550 +
           ((C11332 + C11331) * C84304 + (C11004 + C11003) * C6775 +
            (C9127 + C9126) * C84528 + (C8902 + C8901) * C6774) *
               C1670 +
           ((C11330 + C11329) * C84304 + (C11000 + C10999) * C6775 +
            (C9125 + C9124) * C84528 + (C8898 + C8897) * C6774) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
            C35211 * C4212 + C35067 * C4416 + C35212 * C5838 + C84543 * C6058) *
               C6774 +
           (C35209 * C173 + C35065 * C453 + C35210 * C1245 + C35066 * C1448 +
            C35211 * C4307 + C35067 * C4714 + C35212 * C5954 + C84543 * C6347) *
               C84528 +
           (C35209 * C723 + C35065 * C837 + C35210 * C3446 + C35066 * C3633 +
            C35211 * C5115 + C35067 * C5281 + C35212 * C18815 +
            C84543 * C19022) *
               C6775 +
           (C35209 * C785 + C35065 * C988 + C35210 * C3547 + C35066 * C3888 +
            C35211 * C5201 + C35067 * C5521 + C35212 * C18908 +
            C84543 * C19309) *
               C84304) *
              C84188 * C84603 * C84604 * C90 -
          ((C35212 * C34250 + C84543 * C34686 + C35211 * C5200 +
            C35067 * C5520 + C35210 * C3545 + C35066 * C3886 + C35209 * C784 +
            C35065 * C987) *
               C84304 +
           (C35212 * C34135 + C84543 * C34362 + C35211 * C5114 +
            C35067 * C5280 + C35210 * C3445 + C35066 * C3632 + C35209 * C722 +
            C35065 * C836) *
               C6775 +
           (C35452 + C35451 + C35450 + C35449) * C84528 +
           (C35233 + C35232 + C35231 + C35230) * C6774) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C8870 +
            (C15867 * C252 + C84188 * C521) * C84529 + C19118 * C8871 +
            C19391 * C84344) *
               C19636 +
           (C16500 * C8870 + C16660 * C84529 + C18277 * C8871 +
            C18550 * C84344) *
               C19637 +
           (C16502 * C8870 + C16661 * C84529 + C18279 * C8871 +
            C18552 * C84344) *
               C19638 +
           (C16504 * C8870 + C16662 * C84529 +
            (C15867 * C16807 + C84188 * C16809) * C8871 +
            (C15867 * C16906 + C84188 * C17089) * C84344) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C15867 * C21201 + C84188 * C21478) * C84344 +
            (C15867 * C21056 + C84188 * C21057) * C8871 +
            (C15867 * C2794 + C84188 * C3180) * C84529 +
            (C15867 * C2598 + C84188 * C2601) * C8870) *
               C84536 +
           ((C15867 * C3629 + C84188 * C3964) * C84344 +
            (C15867 * C3442 + C84188 * C3448) * C8871 +
            (C15867 * C1907 + C84188 * C2316) * C84529 +
            (C15867 * C1682 + C84188 * C1686) * C8870) *
               C19638 +
           ((C15867 * C3632 + C84188 * C3967) * C84344 +
            (C15867 * C3445 + C84188 * C3451) * C8871 +
            (C15867 * C836 + C84188 * C1034) * C84529 +
            (C15867 * C722 + C84188 * C727) * C8870) *
               C19637 +
           ((C15867 * C1296 + C84188 * C1494) * C84344 +
            (C15867 * C1182 + C84188 * C1187) * C8871 +
            (C15867 * C253 + C84188 * C522) * C84529 +
            (C15867 * C103 + C84188 * C109) * C8870) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C8870 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84529 +
            (C6164 + C6165 + C6166) * C8871 +
            (C6438 + C6439 + C6440) * C84344) *
               C84528 +
           ((C2925 + C2926 + C2927) * C8870 + (C3195 + C3196 + C3197) * C84529 +
            (C1676 * C3446 + C1669 * C3452 + C1678 * C3445 + C1670 * C3451 +
             C1680 * C3444 + C84550 * C3450) *
                C8871 +
            (C1676 * C3633 + C1669 * C3968 + C1678 * C3632 + C1670 * C3967 +
             C1680 * C3631 + C84550 * C3966) *
                C84344) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C1680 * C8247 + C84550 * C8524 + C1678 * C3631 + C1670 * C3966 +
             C1676 * C3632 + C1669 * C3967) *
                C84344 +
            (C1680 * C8102 + C84550 * C8103 + C1678 * C3444 + C1670 * C3450 +
             C1676 * C3445 + C1669 * C3451) *
                C8871 +
            (C1680 * C834 + C84550 * C1032 + C1678 * C835 + C1670 * C1033 +
             C1676 * C836 + C1669 * C1034) *
                C84529 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C8870) *
               C84304 +
           ((C1680 * C1294 + C84550 * C1492 + C1678 * C1295 + C1670 * C1493 +
             C1676 * C1296 + C1669 * C1494) *
                C84344 +
            (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
             C1676 * C1182 + C1669 * C1187) *
                C8871 +
            (C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
             C1676 * C253 + C1669 * C522) *
                C84529 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C8870) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C35209 +
            (C15867 * C252 + C84188 * C521) * C35065 + C19118 * C35210 +
            C19391 * C35066 + C19120 * C35211 + C19392 * C35067 +
            C31913 * C35212 + C32069 * C84543) *
               C84528 +
           (C16500 * C35209 + C16660 * C35065 + C18277 * C35210 +
            C18550 * C35066 + C18281 * C35211 + C18551 * C35067 +
            (C15867 * C18815 + C84188 * C18817) * C35212 +
            (C15867 * C19022 + C84188 * C19385) * C84543) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C15867 * C34362 + C84188 * C34785) * C84543 +
            (C15867 * C34135 + C84188 * C34136) * C35212 +
            (C15867 * C5280 + C84188 * C5597) * C35067 +
            (C15867 * C5114 + C84188 * C5117) * C35211 +
            (C15867 * C3632 + C84188 * C3967) * C35066 +
            (C15867 * C3445 + C84188 * C3451) * C35210 +
            (C15867 * C836 + C84188 * C1034) * C35065 +
            (C15867 * C722 + C84188 * C727) * C35209) *
               C84304 +
           ((C15867 * C6057 + C84188 * C6423) * C84543 +
            (C15867 * C5837 + C84188 * C5840) * C35212 +
            (C15867 * C4417 + C84188 * C4811) * C35067 +
            (C15867 * C4213 + C84188 * C4217) * C35211 +
            (C15867 * C1296 + C84188 * C1494) * C35066 +
            (C15867 * C1182 + C84188 * C1187) * C35210 +
            (C15867 * C253 + C84188 * C522) * C35065 +
            (C15867 * C103 + C84188 * C109) * C35209) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C8870 +
           (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
            C19728 * C1906 + C19638 * C2393 + C19729 * C2795 + C84536 * C3276) *
               C84529 +
           (C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
            C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
            C84536 * C16860) *
               C8871 +
           (C19726 * C1297 + C19636 * C1542 + C19727 * C3633 + C19637 * C4048 +
            C19728 * C3630 + C19638 * C4047 + C19729 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C84604 * C90 -
          ((C19729 * C21201 + C84536 * C21545 + C19728 * C3629 +
            C19638 * C4045 + C19727 * C3632 + C19637 * C4046 + C19726 * C1296 +
            C19636 * C1541) *
               C84344 +
           (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
            C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
            C19636 * C1244) *
               C8871 +
           (C20215 + C20214 + C20213 + C20212) * C84529 +
           (C19750 + C19749 + C19748 + C19747) * C8870) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C8870 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84529 +
            (C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C8871 +
            (C6774 * C1297 + C84528 * C1542 + C6775 * C3633 + C84304 * C4048) *
                C84344) *
               C1669 +
           ((C6801 + C6802) * C8870 + (C7284 + C7285) * C84529 +
            (C10877 + C10878) * C8871 + (C11537 + C11538) * C84344) *
               C1670 +
           ((C6805 + C6806) * C8870 + (C7286 + C7287) * C84529 +
            (C10881 + C10882) * C8871 + (C11539 + C11540) * C84344) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C6775 * C8247 + C84304 * C8591 + C6774 * C1294 + C84528 * C1539) *
                C84344 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C8871 +
            (C7289 + C7288) * C84529 + (C6810 + C6809) * C8870) *
               C84550 +
           ((C11540 + C11539) * C84344 + (C10882 + C10881) * C8871 +
            (C7287 + C7286) * C84529 + (C6806 + C6805) * C8870) *
               C1670 +
           ((C11538 + C11537) * C84344 + (C10878 + C10877) * C8871 +
            (C7285 + C7284) * C84529 + (C6802 + C6801) * C8870) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C35209 +
           (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
               C35065 +
           (C12827 + C12828) * C35210 + (C13439 + C13440) * C35066 +
           (C34261 + C34262) * C35211 + (C34896 + C34897) * C35067 +
           (C6774 * C5838 + C84528 * C5954 + C6775 * C18815 + C84304 * C18908) *
               C35212 +
           (C6774 * C6058 + C84528 * C6519 + C6775 * C19022 + C84304 * C19467) *
               C84543) *
              C84188 * C84603 * C84604 * C90 -
          ((C6775 * C34362 + C84304 * C34890 + C6774 * C6057 + C84528 * C6518) *
               C84543 +
           (C6775 * C34135 + C84304 * C34250 + C6774 * C5837 + C84528 * C5953) *
               C35212 +
           (C33010 + C33009) * C35067 + (C32377 + C32376) * C35211 +
           (C11538 + C11537) * C35066 + (C10878 + C10877) * C35210 +
           (C7285 + C7284) * C35065 + (C6802 + C6801) * C35209) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C19636 +
           (C12621 + C12622) * C19637 + (C23544 + C23545) * C19638 +
           (C9342 * C2599 + C23539 + C23539 + C84529 * C3353 + C9343 * C16807 +
            C23538 + C23538 + C84344 * C17177) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C9343 * C21056 + C23536 + C23536 + C84344 * C21612 + C9342 * C2598 +
            C23537 + C23537 + C84529 * C3352) *
               C84536 +
           (C22572 + C22571) * C19638 + (C11656 + C11655) * C19637 +
           (C9380 + C9379) * C19636) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C84528 +
            (C9342 * C723 + C9987 + C9987 + C84529 * C1129 + C9343 * C3446 +
             C9986 + C9986 + C84344 * C4128) *
                C84304) *
               C1669 +
           ((C9379 + C9380) * C84528 + (C11655 + C11656) * C84304) * C1670 +
           ((C9381 + C9382) * C84528 + (C11657 + C11658) * C84304) * C84550) *
              C84603 * C84604 * C90 -
          (((C9343 * C8102 + C9980 + C9980 + C84344 * C8658 + C9342 * C720 +
             C9981 + C9981 + C84529 * C1126) *
                C84304 +
            (C9384 + C9383) * C84528) *
               C84550 +
           ((C11658 + C11657) * C84304 + (C9382 + C9381) * C84528) * C1670 +
           ((C11656 + C11655) * C84304 + (C9380 + C9379) * C84528) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35661 * C102 + C35666 + C35666 + C35065 * C638 + C35662 * C1183 +
            C35667 + C35667 + C35066 * C1589 + C35663 * C4212 + C35668 +
            C35668 + C35067 * C4993 + C35664 * C5838 + C35669 + C35669 +
            C84543 * C6602) *
               C84528 +
           (C35661 * C723 + C36300 + C36300 + C35065 * C1129 + C35662 * C3446 +
            C36299 + C36299 + C35066 * C4128 + C35663 * C5115 + C36298 +
            C36298 + C35067 * C5752 + C35664 * C18815 + C36297 + C36297 +
            C84543 * C19561) *
               C84304) *
              C84188 * C84603 * C84604 * C90 -
          ((C35664 * C34135 + C36293 + C36293 + C84543 * C34995 +
            C35663 * C5114 + C36294 + C36294 + C35067 * C5751 + C35662 * C3445 +
            C36295 + C36295 + C35066 * C4126 + C35661 * C722 + C36296 + C36296 +
            C35065 * C1128) *
               C84304 +
           (C35697 + C35696 + C35695 + C35694) * C84528) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84529 +
            C18832 * C84344) *
               C19636 +
           (C25127 + C25128) * C19637 + (C25129 + C25130) * C19638 +
           (C25131 + C25137) * C84536) *
              C84603 * C716 -
          (((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84344 +
            C16328 * C84529) *
               C84536 +
           (C25137 + C25131) * C19638 + (C25130 + C25129) * C19637 +
           (C25128 + C25127) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
             C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
             C84550 * C116) *
                C84529 +
            (C5873 + C5874 + C5875) * C84344) *
               C84528 +
           ((C2634 + C2635 + C2636) * C84529 +
            (C11769 + C11770 + C11771) * C84344) *
               C84304) *
              C84603 * C716 -
          (((C1679 * C3441 + C3460 + C3460 + C84550 * C3453 + C1677 * C3442 +
             C3461 + C3461 + C1670 * C3454 + C1675 * C3443 + C3462 + C3462 +
             C1669 * C3455) *
                C84344 +
            (C2639 + C2638 + C2637) * C84529) *
               C84304 +
           ((C11771 + C11770 + C11769) * C84344 +
            (C2636 + C2635 + C2634) * C84529) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C35065 +
            C18832 * C35066 + C18833 * C35067 + C31748 * C84543) *
               C84528 +
           (C37612 + C37613 + C37614 + C37620) * C84304) *
              C84603 * C716 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C84543 +
            C17993 * C35067 + C17992 * C35066 + C16326 * C35065) *
               C84304 +
           (C37620 + C37614 + C37613 + C37612) * C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
             C19728 * C1685 + C19638 * C1792 + C19729 * C2602 +
             C84536 * C2718) *
                C84188) *
               C84529 +
           ((C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
             C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C19726 * C1188 + C19636 * C1250 + C19727 * C3452 + C19637 * C3553 +
             C19728 * C3449 + C19638 * C3552 + C19729 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C716 -
          (((C19729 * C16808 + C84536 * C16861 + C19728 * C16809 +
             C19638 * C16862 + C19727 * C3449 + C19637 * C3552 +
             C19726 * C3452 + C19636 * C3553) *
                C84188 +
            (C19729 * C16806 + C84536 * C16859 + C19728 * C16807 +
             C19638 * C16860 + C19727 * C3443 + C19637 * C3546 +
             C19726 * C3446 + C19636 * C3547) *
                C15867) *
               C84344 +
           ((C19729 * C15870 + C84536 * C15933 + C19728 * C2602 +
             C19638 * C2718 + C19727 * C1685 + C19637 * C1792 + C19726 * C728 +
             C19636 * C790) *
                C84188 +
            (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
             C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
             C19636 * C785) *
                C15867) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C1676 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C1669 +
            (C6801 + C6802) * C1678 + (C6803 + C6804) * C1670 +
            (C6805 + C6806) * C1680 + (C6807 + C6808) * C84550) *
               C84529 +
           ((C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C1676 +
            (C6774 * C1188 + C84528 * C1250 + C6775 * C3452 + C84304 * C3553) *
                C1669 +
            (C10877 + C10878) * C1678 + (C10879 + C10880) * C1670 +
            (C10881 + C10882) * C1680 + (C10883 + C10884) * C84550) *
               C84344) *
              C84603 * C716 -
          (((C6775 * C3447 + C84304 * C3548 + C6774 * C3450 + C84528 * C3549) *
                C84550 +
            (C6775 * C3441 + C84304 * C3542 + C6774 * C3444 + C84528 * C3543) *
                C1680 +
            (C6775 * C3448 + C84304 * C3550 + C6774 * C3451 + C84528 * C3551) *
                C1670 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C1678 +
            (C6775 * C3449 + C84304 * C3552 + C6774 * C3452 + C84528 * C3553) *
                C1669 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C1676) *
               C84344 +
           ((C6775 * C1687 + C84304 * C1794 + C6774 * C726 + C84528 * C788) *
                C84550 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C1680 +
            (C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
                C1670 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C1678 +
            (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
                C1669 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C1676) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C15867 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84188) *
               C35065 +
           ((C12827 + C12828) * C15867 + (C12829 + C12830) * C84188) * C35066 +
           ((C34261 + C34262) * C15867 + (C34263 + C34264) * C84188) * C35067 +
           ((C6774 * C5838 + C84528 * C5954 + C6775 * C18815 +
             C84304 * C18908) *
                C15867 +
            (C6774 * C5841 + C84528 * C5957 + C6775 * C18817 +
             C84304 * C18910) *
                C84188) *
               C84543) *
              C84603 * C716 -
          (((C6775 * C18816 + C84304 * C18909 + C6774 * C18817 +
             C84528 * C18910) *
                C84188 +
            (C6775 * C18814 + C84304 * C18907 + C6774 * C18815 +
             C84528 * C18908) *
                C15867) *
               C84543 +
           ((C6775 * C17256 + C84304 * C17345 + C6774 * C5118 +
             C84528 * C5204) *
                C84188 +
            (C6775 * C17254 + C84304 * C17343 + C6774 * C5115 +
             C84528 * C5201) *
                C15867) *
               C35067 +
           ((C6775 * C3449 + C84304 * C3552 + C6774 * C3452 + C84528 * C3553) *
                C84188 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C15867) *
               C35066 +
           ((C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
                C84188 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C15867) *
               C35065) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C15867 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84188) *
               C19636 +
           ((C11976 + C11977) * C15867 + (C11978 + C11979) * C84188) * C19637 +
           ((C22895 + C22896) * C15867 + (C22897 + C22898) * C84188) * C19638 +
           ((C25278 + C25279) * C15867 + (C25280 + C25281) * C84188) * C84536) *
              C84603 * C716 -
          (((C8871 * C16808 + C84344 * C16907 + C8870 * C15870 +
             C84529 * C15979) *
                C84188 +
            (C8871 * C16806 + C84344 * C16905 + C8870 * C15868 +
             C84529 * C15977) *
                C15867) *
               C84536 +
           ((C25281 + C25280) * C84188 + (C25279 + C25278) * C15867) * C19638 +
           ((C22898 + C22897) * C84188 + (C22896 + C22895) * C15867) * C19637 +
           ((C11979 + C11978) * C84188 + (C11977 + C11976) * C15867) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C1676 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C1669 +
            (C8897 + C8898) * C1678 + (C8899 + C8900) * C1670 +
            (C8901 + C8902) * C1680 + (C8903 + C8904) * C84550) *
               C84528 +
           ((C11976 + C11977) * C1676 + (C11978 + C11979) * C1669 +
            (C10999 + C11000) * C1678 + (C11001 + C11002) * C1670 +
            (C11003 + C11004) * C1680 + (C11005 + C11006) * C84550) *
               C84304) *
              C84603 * C716 -
          (((C8871 * C3447 + C84344 * C3634 + C8870 * C1687 + C84529 * C1912) *
                C84550 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C1680 +
            (C8871 * C3448 + C84344 * C3635 + C8870 * C1686 + C84529 * C1911) *
                C1670 +
            (C8871 * C3442 + C84344 * C3629 + C8870 * C1682 + C84529 * C1907) *
                C1678 +
            (C8871 * C3449 + C84344 * C3636 + C8870 * C1685 + C84529 * C1910) *
                C1669 +
            (C8871 * C3443 + C84344 * C3630 + C8870 * C1681 + C84529 * C1906) *
                C1676) *
               C84304 +
           ((C11006 + C11005) * C84550 + (C11004 + C11003) * C1680 +
            (C11002 + C11001) * C1670 + (C11000 + C10999) * C1678 +
            (C11979 + C11978) * C1669 + (C11977 + C11976) * C1676) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
             C35211 * C4212 + C35067 * C4416 + C35212 * C5838 +
             C84543 * C6058) *
                C15867 +
            (C35209 * C108 + C35065 * C258 + C35210 * C1188 + C35066 * C1302 +
             C35211 * C4216 + C35067 * C4420 + C35212 * C5841 +
             C84543 * C6061) *
                C84188) *
               C84528 +
           ((C37769 + C37770 + C37771 + C37772) * C15867 +
            (C37773 + C37774 + C37775 + C37776) * C84188) *
               C84304) *
              C84603 * C716 -
          (((C35212 * C18816 + C84543 * C19023 + C35211 * C17256 +
             C35067 * C17423 + C35210 * C3449 + C35066 * C3636 +
             C35209 * C1685 + C35065 * C1910) *
                C84188 +
            (C35212 * C18814 + C84543 * C19021 + C35211 * C17254 +
             C35067 * C17421 + C35210 * C3443 + C35066 * C3630 +
             C35209 * C1681 + C35065 * C1906) *
                C15867) *
               C84304 +
           ((C37776 + C37775 + C37774 + C37773) * C84188 +
            (C37772 + C37771 + C37770 + C37769) * C15867) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C19726 +
            (C15867 * C173 + C84188 * C330) * C19636 + C16500 * C19727 +
            C16501 * C19637 + C16502 * C19728 + C16503 * C19638 +
            C16504 * C19729 + C16505 * C84536) *
               C84529 +
           (C19118 * C19726 + C19119 * C19636 + C18277 * C19727 +
            C18278 * C19637 + C18279 * C19728 + C18280 * C19638 +
            C25352 * C19729 + C25353 * C84536) *
               C84344) *
              C84603 * C716 -
          (((C15867 * C16859 + C84188 * C16951) * C84536 +
            (C15867 * C16806 + C84188 * C16808) * C19729 + C25353 * C19638 +
            C25352 * C19728 + C18280 * C19637 + C18279 * C19727 +
            C18278 * C19636 + C18277 * C19726) *
               C84344 +
           (C16507 * C84536 + C16506 * C19729 + C16505 * C19638 +
            C16504 * C19728 + C16503 * C19637 + C16502 * C19727 +
            C16501 * C19636 + C16500 * C19726) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C6774 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84528 +
            (C2925 + C2926 + C2927) * C6775 +
            (C2928 + C2929 + C2930) * C84304) *
               C84529 +
           ((C6164 + C6165 + C6166) * C6774 + (C6167 + C6168 + C6169) * C84528 +
            (C12090 + C12091 + C12092) * C6775 +
            (C12093 + C12094 + C12095) * C84304) *
               C84344) *
              C84603 * C716 -
          (((C1680 * C3542 + C84550 * C3714 + C1678 * C3544 + C1670 * C3715 +
             C1676 * C3546 + C1669 * C3716) *
                C84304 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C6775 +
            (C12095 + C12094 + C12093) * C84528 +
            (C12092 + C12091 + C12090) * C6774) *
               C84344 +
           ((C2936 + C2935 + C2934) * C84304 + (C2933 + C2932 + C2931) * C6775 +
            (C2930 + C2929 + C2928) * C84528 +
            (C2927 + C2926 + C2925) * C6774) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C6774 +
            (C15867 * C173 + C84188 * C330) * C84528 + C16500 * C6775 +
            C16501 * C84304) *
               C35065 +
           (C19118 * C6774 + C19119 * C84528 + C18277 * C6775 +
            C18278 * C84304) *
               C35066 +
           (C19120 * C6774 + C19121 * C84528 + C18281 * C6775 +
            C18282 * C84304) *
               C35067 +
           (C31913 * C6774 + C31914 * C84528 + C37847 * C6775 +
            C37848 * C84304) *
               C84543) *
              C84603 * C716 -
          (((C15867 * C18907 + C84188 * C19099) * C84304 +
            (C15867 * C18814 + C84188 * C18816) * C6775 + C37848 * C84528 +
            C37847 * C6774) *
               C84543 +
           (C18284 * C84304 + C18283 * C6775 + C18282 * C84528 +
            C18281 * C6774) *
               C35067 +
           (C18280 * C84304 + C18279 * C6775 + C18278 * C84528 +
            C18277 * C6774) *
               C35066 +
           (C16503 * C84304 + C16502 * C6775 + C16501 * C84528 +
            C16500 * C6774) *
               C35065) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84188 * C84529 +
                     (C19958 * C1183 + C21345 + C21345 + C19636 * C1396 +
                      C19959 * C3446 + C21344 + C21344 + C19637 * C3799 +
                      C19960 * C3443 + C21343 + C21343 + C19638 * C3798 +
                      C19961 * C16807 + C21342 + C21342 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C716 -
                    ((C19961 * C16806 + C25420 + C25420 + C84536 * C16995 +
                      C19960 * C16807 + C25421 + C25421 + C19638 * C16996 +
                      C19959 * C3443 + C25422 + C25422 + C19637 * C3798 +
                      C19958 * C3446 + C25423 + C25423 + C19636 * C3799) *
                         C84188 * C84344 +
                     (C19961 * C15868 + C20705 + C20705 + C84536 * C16072 +
                      C19960 * C2599 + C20706 + C20706 + C19638 * C3012 +
                      C19959 * C1681 + C20707 + C20707 + C19637 * C2093 +
                      C19958 * C723 + C20708 + C20708 + C19636 * C936) *
                         C84188 * C84529) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C1669 +
                      (C7053 + C7054) * C1670 + (C7055 + C7056) * C84550) *
                         C84529 +
                     ((C7016 * C1183 + C8391 + C8391 + C84528 * C1396 +
                       C7017 * C3446 + C8390 + C8390 + C84304 * C3799) *
                          C1669 +
                      (C11219 + C11220) * C1670 + (C11221 + C11222) * C84550) *
                         C84344) *
                        C84603 * C716 -
                    (((C7017 * C3441 + C12194 + C12194 + C84304 * C3794 +
                       C7016 * C3444 + C12195 + C12195 + C84528 * C3795) *
                          C84550 +
                      (C7017 * C3442 + C12196 + C12196 + C84304 * C3796 +
                       C7016 * C3445 + C12197 + C12197 + C84528 * C3797) *
                          C1670 +
                      (C7017 * C3443 + C12198 + C12198 + C84304 * C3798 +
                       C7016 * C3446 + C12199 + C12199 + C84528 * C3799) *
                          C1669) *
                         C84344 +
                     ((C7017 * C1683 + C7755 + C7755 + C84304 * C2095 +
                       C7016 * C721 + C7756 + C7756 + C84528 * C934) *
                          C84550 +
                      (C7017 * C1682 + C7757 + C7757 + C84304 * C2094 +
                       C7016 * C722 + C7758 + C7758 + C84528 * C935) *
                          C1670 +
                      (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 +
                       C7016 * C723 + C7760 + C7760 + C84528 * C936) *
                          C1669) *
                         C84529) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                      C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                         C84188 * C35065 +
                     (C13139 + C13140) * C84188 * C35066 +
                     (C34587 + C34588) * C84188 * C35067 +
                     (C7016 * C5838 + C34582 + C34582 + C84528 * C6251 +
                      C7017 * C18815 + C34581 + C34581 + C84304 * C19200) *
                         C84188 * C84543) *
                        C84603 * C716 -
                    ((C7017 * C18814 + C37915 + C37915 + C84304 * C19199 +
                      C7016 * C18815 + C37916 + C37916 + C84528 * C19200) *
                         C84188 * C84543 +
                     (C7017 * C17254 + C33638 + C33638 + C84304 * C17575 +
                      C7016 * C5115 + C33639 + C33639 + C84528 * C5438) *
                         C84188 * C35067 +
                     (C7017 * C3443 + C12198 + C12198 + C84304 * C3798 +
                      C7016 * C3446 + C12199 + C12199 + C84528 * C3799) *
                         C84188 * C35066 +
                     (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 +
                      C7016 * C723 + C7760 + C7760 + C84528 * C936) *
                         C84188 * C35065) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C19726 +
           (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
               C19636 +
           (C11976 + C11977) * C19727 + (C12302 + C12303) * C19637 +
           (C22895 + C22896) * C19728 + (C23224 + C23225) * C19638 +
           (C25278 + C25279) * C19729 + (C25494 + C25495) * C84536) *
              C84188 * C84603 * C716 -
          ((C8871 * C16859 + C84344 * C17044 + C8870 * C15931 +
            C84529 * C16126) *
               C84536 +
           (C8871 * C16806 + C84344 * C16905 + C8870 * C15868 +
            C84529 * C15977) *
               C19729 +
           (C25495 + C25494) * C19638 + (C25279 + C25278) * C19728 +
           (C23225 + C23224) * C19637 + (C22896 + C22895) * C19727 +
           (C12303 + C12302) * C19636 + (C11977 + C11976) * C19726) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C6774 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84528 +
            (C11976 + C11977) * C6775 + (C12302 + C12303) * C84304) *
               C1669 +
           ((C8897 + C8898) * C6774 + (C9124 + C9125) * C84528 +
            (C10999 + C11000) * C6775 + (C11329 + C11330) * C84304) *
               C1670 +
           ((C8901 + C8902) * C6774 + (C9126 + C9127) * C84528 +
            (C11003 + C11004) * C6775 + (C11331 + C11332) * C84304) *
               C84550) *
              C84603 * C716 -
          (((C8871 * C3542 + C84344 * C3883 + C8870 * C1790 + C84529 * C2215) *
                C84304 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C6775 +
            (C11332 + C11331) * C84528 + (C11004 + C11003) * C6774) *
               C84550 +
           ((C8871 * C3544 + C84344 * C3885 + C8870 * C1789 + C84529 * C2214) *
                C84304 +
            (C8871 * C3442 + C84344 * C3629 + C8870 * C1682 + C84529 * C1907) *
                C6775 +
            (C11330 + C11329) * C84528 + (C11000 + C10999) * C6774) *
               C1670 +
           ((C8871 * C3546 + C84344 * C3887 + C8870 * C1788 + C84529 * C2213) *
                C84304 +
            (C8871 * C3443 + C84344 * C3630 + C8870 * C1681 + C84529 * C1906) *
                C6775 +
            (C12303 + C12302) * C84528 + (C11977 + C11976) * C6774) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
            C35211 * C4212 + C35067 * C4416 + C35212 * C5838 + C84543 * C6058) *
               C6774 +
           (C35209 * C173 + C35065 * C453 + C35210 * C1245 + C35066 * C1448 +
            C35211 * C4307 + C35067 * C4714 + C35212 * C5954 + C84543 * C6347) *
               C84528 +
           (C37769 + C37770 + C37771 + C37772) * C6775 +
           (C37991 + C37992 + C37993 + C37994) * C84304) *
              C84188 * C84603 * C716 -
          ((C35212 * C18907 + C84543 * C19308 + C35211 * C17343 +
            C35067 * C17657 + C35210 * C3546 + C35066 * C3887 + C35209 * C1788 +
            C35065 * C2213) *
               C84304 +
           (C35212 * C18814 + C84543 * C19021 + C35211 * C17254 +
            C35067 * C17421 + C35210 * C3443 + C35066 * C3630 + C35209 * C1681 +
            C35065 * C1906) *
               C6775 +
           (C37994 + C37993 + C37992 + C37991) * C84528 +
           (C37772 + C37771 + C37770 + C37769) * C6774) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C8870 +
            (C15867 * C252 + C84188 * C521) * C84529 + C19118 * C8871 +
            C19391 * C84344) *
               C19636 +
           (C25562 + C25563 + C25564 + C25565) * C19637 +
           (C25566 + C25567 + C25568 + C25569) * C19638 +
           (C25570 + C25571 + C25572 + C25576) * C84536) *
              C84603 * C716 -
          (((C15867 * C16905 + C84188 * C17088) * C84344 +
            (C15867 * C16806 + C84188 * C16808) * C8871 + C16663 * C84529 +
            C16506 * C8870) *
               C84536 +
           (C25576 + C25572 + C25571 + C25570) * C19638 +
           (C25569 + C25568 + C25567 + C25566) * C19637 +
           (C25565 + C25564 + C25563 + C25562) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C8870 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84529 +
            (C6164 + C6165 + C6166) * C8871 +
            (C6438 + C6439 + C6440) * C84344) *
               C84528 +
           ((C2925 + C2926 + C2927) * C8870 + (C3195 + C3196 + C3197) * C84529 +
            (C12090 + C12091 + C12092) * C8871 +
            (C12408 + C12409 + C12410) * C84344) *
               C84304) *
              C84603 * C716 -
          (((C1680 * C3628 + C84550 * C3963 + C1678 * C3629 + C1670 * C3964 +
             C1676 * C3630 + C1669 * C3965) *
                C84344 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C8871 +
            (C3200 + C3199 + C3198) * C84529 +
            (C2933 + C2932 + C2931) * C8870) *
               C84304 +
           ((C12410 + C12409 + C12408) * C84344 +
            (C12092 + C12091 + C12090) * C8871 +
            (C3197 + C3196 + C3195) * C84529 +
            (C2927 + C2926 + C2925) * C8870) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C35209 +
            (C15867 * C252 + C84188 * C521) * C35065 + C19118 * C35210 +
            C19391 * C35066 + C19120 * C35211 + C19392 * C35067 +
            C31913 * C35212 + C32069 * C84543) *
               C84528 +
           (C38061 + C38062 + C38063 + C38064 + C38065 + C38066 + C38067 +
            C38071) *
               C84304) *
              C84603 * C716 -
          (((C15867 * C19021 + C84188 * C19384) * C84543 +
            (C15867 * C18814 + C84188 * C18816) * C35212 + C18553 * C35067 +
            C18283 * C35211 + C18552 * C35066 + C18279 * C35210 +
            C16661 * C35065 + C16502 * C35209) *
               C84304 +
           (C38071 + C38067 + C38066 + C38065 + C38064 + C38063 + C38062 +
            C38061) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C8870 +
           (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
            C19728 * C1906 + C19638 * C2393 + C19729 * C2795 + C84536 * C3276) *
               C84529 +
           (C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
            C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
            C84536 * C16860) *
               C8871 +
           (C19726 * C1297 + C19636 * C1542 + C19727 * C3633 + C19637 * C4048 +
            C19728 * C3630 + C19638 * C4047 + C19729 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C716 -
          ((C19729 * C16905 + C84536 * C17132 + C19728 * C16906 +
            C19638 * C17133 + C19727 * C3630 + C19637 * C4047 + C19726 * C3633 +
            C19636 * C4048) *
               C84344 +
           (C19729 * C16806 + C84536 * C16859 + C19728 * C16807 +
            C19638 * C16860 + C19727 * C3443 + C19637 * C3546 + C19726 * C3446 +
            C19636 * C3547) *
               C8871 +
           (C19729 * C15977 + C84536 * C16214 + C19728 * C2795 +
            C19638 * C3276 + C19727 * C1906 + C19637 * C2393 + C19726 * C837 +
            C19636 * C1082) *
               C84529 +
           (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
            C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
            C19636 * C785) *
               C8870) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C8870 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84529 +
            (C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C8871 +
            (C6774 * C1297 + C84528 * C1542 + C6775 * C3633 + C84304 * C4048) *
                C84344) *
               C1669 +
           ((C6801 + C6802) * C8870 + (C7284 + C7285) * C84529 +
            (C10877 + C10878) * C8871 + (C11537 + C11538) * C84344) *
               C1670 +
           ((C6805 + C6806) * C8870 + (C7286 + C7287) * C84529 +
            (C10881 + C10882) * C8871 + (C11539 + C11540) * C84344) *
               C84550) *
              C84603 * C716 -
          (((C6775 * C3628 + C84304 * C4043 + C6774 * C3631 + C84528 * C4044) *
                C84344 +
            (C6775 * C3441 + C84304 * C3542 + C6774 * C3444 + C84528 * C3543) *
                C8871 +
            (C6775 * C1908 + C84304 * C2395 + C6774 * C835 + C84528 * C1080) *
                C84529 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C8870) *
               C84550 +
           ((C6775 * C3629 + C84304 * C4045 + C6774 * C3632 + C84528 * C4046) *
                C84344 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C8871 +
            (C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C84529 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C8870) *
               C1670 +
           ((C6775 * C3630 + C84304 * C4047 + C6774 * C3633 + C84528 * C4048) *
                C84344 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C8871 +
            (C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C84529 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C8870) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C35209 +
           (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
               C35065 +
           (C12827 + C12828) * C35210 + (C13439 + C13440) * C35066 +
           (C34261 + C34262) * C35211 + (C34896 + C34897) * C35067 +
           (C6774 * C5838 + C84528 * C5954 + C6775 * C18815 + C84304 * C18908) *
               C35212 +
           (C6774 * C6058 + C84528 * C6519 + C6775 * C19022 + C84304 * C19467) *
               C84543) *
              C84188 * C84603 * C716 -
          ((C6775 * C19021 + C84304 * C19466 + C6774 * C19022 +
            C84528 * C19467) *
               C84543 +
           (C6775 * C18814 + C84304 * C18907 + C6774 * C18815 +
            C84528 * C18908) *
               C35212 +
           (C6775 * C17421 + C84304 * C17809 + C6774 * C5281 + C84528 * C5675) *
               C35067 +
           (C6775 * C17254 + C84304 * C17343 + C6774 * C5115 + C84528 * C5201) *
               C35211 +
           (C6775 * C3630 + C84304 * C4047 + C6774 * C3633 + C84528 * C4048) *
               C35066 +
           (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
               C35210 +
           (C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
               C35065 +
           (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
               C35209) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C19636 +
           (C12621 + C12622) * C19637 + (C23544 + C23545) * C19638 +
           (C25719 + C25720) * C84536) *
              C84188 * C84603 * C716 -
          ((C9343 * C16806 + C25713 + C25713 + C84344 * C17176 +
            C9342 * C15868 + C25714 + C25714 + C84529 * C16258) *
               C84536 +
           (C25720 + C25719) * C19638 + (C23545 + C23544) * C19637 +
           (C12622 + C12621) * C19636) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C84528 +
            (C12621 + C12622) * C84304) *
               C1669 +
           ((C9379 + C9380) * C84528 + (C11655 + C11656) * C84304) * C1670 +
           ((C9381 + C9382) * C84528 + (C11657 + C11658) * C84304) * C84550) *
              C84603 * C716 -
          (((C9343 * C3441 + C12611 + C12611 + C84344 * C4123 + C9342 * C1683 +
             C12612 + C12612 + C84529 * C2491) *
                C84304 +
            (C11658 + C11657) * C84528) *
               C84550 +
           ((C9343 * C3442 + C12613 + C12613 + C84344 * C4125 + C9342 * C1682 +
             C12614 + C12614 + C84529 * C2490) *
                C84304 +
            (C11656 + C11655) * C84528) *
               C1670 +
           ((C9343 * C3443 + C12615 + C12615 + C84344 * C4127 + C9342 * C1681 +
             C12616 + C12616 + C84529 * C2489) *
                C84304 +
            (C12622 + C12621) * C84528) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35661 * C102 + C35666 + C35666 + C35065 * C638 + C35662 * C1183 +
            C35667 + C35667 + C35066 * C1589 + C35663 * C4212 + C35668 +
            C35668 + C35067 * C4993 + C35664 * C5838 + C35669 + C35669 +
            C84543 * C6602) *
               C84528 +
           (C38224 + C38225 + C38226 + C38227) * C84304) *
              C84188 * C84603 * C716 -
          ((C35664 * C18814 + C38212 + C38212 + C84543 * C19560 +
            C35663 * C17254 + C38213 + C38213 + C35067 * C17885 +
            C35662 * C3443 + C38214 + C38214 + C35066 * C4127 + C35661 * C1681 +
            C38215 + C38215 + C35065 * C2489) *
               C84304 +
           (C38227 + C38226 + C38225 + C38224) * C84528) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84529 +
            C18832 * C84344) *
               C19636 +
           (C25127 + C25128) * C19637 + (C25129 + C25130) * C19638 +
           (C25131 + C25137) * C84536) *
              C1177 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84344 +
            C25136 * C84529) *
               C84536 +
           (C17993 * C84344 + C17992 * C84529) * C19638 +
           (C17991 * C84344 + C17990 * C84529) * C19637 +
           (C18833 * C84344 + C18832 * C84529) * C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
             C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
             C84550 * C116) *
                C84529 +
            (C5873 + C5874 + C5875) * C84344) *
               C84528 +
           ((C2634 + C2635 + C2636) * C84529 +
            (C11769 + C11770 + C11771) * C84344) *
               C84304) *
              C1177 -
          (((C1679 * C5113 + C5123 + C5123 + C84550 * C5119 + C1677 * C5114 +
             C5124 + C5124 + C1670 * C5120 + C1675 * C5115 + C5125 + C5125 +
             C1669 * C5121) *
                C84344 +
            (C11771 + C11770 + C11769) * C84529) *
               C84304 +
           ((C5878 + C5877 + C5876) * C84344 +
            (C5875 + C5874 + C5873) * C84529) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C35065 +
            C18832 * C35066 + C18833 * C35067 + C31748 * C84543) *
               C84528 +
           (C37612 + C37613 + C37614 + C37620) * C84304) *
              C1177 -
          (((C15866 * C31336 + C31340 + C31340 + C84188 * C31338) * C84543 +
            C37619 * C35067 + C17991 * C35066 + C17990 * C35065) *
               C84304 +
           (C31749 * C84543 + C31748 * C35067 + C18833 * C35066 +
            C18832 * C35065) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
             C19728 * C1685 + C19638 * C1792 + C19729 * C2602 +
             C84536 * C2718) *
                C84188) *
               C84529 +
           ((C25869 + C25870 + C25871 + C25872) * C15867 +
            (C25873 + C25874 + C25875 + C25876) * C84188) *
               C84344) *
              C1177 -
          (((C19729 * C17968 + C84536 * C18072 + C19728 * C17256 +
             C19638 * C17345 + C19727 * C5118 + C19637 * C5204 +
             C19726 * C4216 + C19636 * C4311) *
                C84188 +
            (C19729 * C17967 + C84536 * C18071 + C19728 * C17254 +
             C19638 * C17343 + C19727 * C5115 + C19637 * C5201 +
             C19726 * C4212 + C19636 * C4307) *
                C15867) *
               C84344 +
           ((C25876 + C25875 + C25874 + C25873) * C84188 +
            (C25872 + C25871 + C25870 + C25869) * C15867) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C1676 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C1669 +
            (C6801 + C6802) * C1678 + (C6803 + C6804) * C1670 +
            (C6805 + C6806) * C1680 + (C6807 + C6808) * C84550) *
               C84529 +
           ((C12827 + C12828) * C1676 + (C12829 + C12830) * C1669 +
            (C10877 + C10878) * C1678 + (C10879 + C10880) * C1670 +
            (C10881 + C10882) * C1680 + (C10883 + C10884) * C84550) *
               C84344) *
              C1177 -
          (((C6775 * C5116 + C84304 * C5202 + C6774 * C4218 + C84528 * C4313) *
                C84550 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C1680 +
            (C6775 * C5117 + C84304 * C5203 + C6774 * C4217 + C84528 * C4312) *
                C1670 +
            (C6775 * C5114 + C84304 * C5200 + C6774 * C4213 + C84528 * C4308) *
                C1678 +
            (C6775 * C5118 + C84304 * C5204 + C6774 * C4216 + C84528 * C4311) *
                C1669 +
            (C6775 * C5115 + C84304 * C5201 + C6774 * C4212 + C84528 * C4307) *
                C1676) *
               C84344 +
           ((C10884 + C10883) * C84550 + (C10882 + C10881) * C1680 +
            (C10880 + C10879) * C1670 + (C10878 + C10877) * C1678 +
            (C12830 + C12829) * C1669 + (C12828 + C12827) * C1676) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C15867 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84188) *
               C35065 +
           ((C12827 + C12828) * C15867 + (C12829 + C12830) * C84188) * C35066 +
           ((C34261 + C34262) * C15867 + (C34263 + C34264) * C84188) * C35067 +
           ((C38368 + C38369) * C15867 + (C38370 + C38371) * C84188) * C84543) *
              C1177 -
          (((C6775 * C31337 + C84304 * C31383 + C6774 * C30909 +
             C84528 * C30960) *
                C84188 +
            (C6775 * C31336 + C84304 * C31382 + C6774 * C30907 +
             C84528 * C30958) *
                C15867) *
               C84543 +
           ((C38371 + C38370) * C84188 + (C38369 + C38368) * C15867) * C35067 +
           ((C34264 + C34263) * C84188 + (C34262 + C34261) * C15867) * C35066 +
           ((C12830 + C12829) * C84188 + (C12828 + C12827) * C15867) * C35065) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C15867 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84188) *
               C19636 +
           ((C11976 + C11977) * C15867 + (C11978 + C11979) * C84188) * C19637 +
           ((C22895 + C22896) * C15867 + (C22897 + C22898) * C84188) * C19638 +
           ((C25278 + C25279) * C15867 + (C25280 + C25281) * C84188) * C84536) *
              C1177 -
          (((C8871 * C17968 + C84344 * C18148 + C8870 * C16809 +
             C84529 * C16908) *
                C84188 +
            (C8871 * C17967 + C84344 * C18147 + C8870 * C16807 +
             C84529 * C16906) *
                C15867) *
               C84536 +
           ((C8871 * C17256 + C84344 * C17423 + C8870 * C3449 +
             C84529 * C3636) *
                C84188 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C15867) *
               C19638 +
           ((C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C84188 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C15867) *
               C19637 +
           ((C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C84188 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C15867) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C1676 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C1669 +
            (C8897 + C8898) * C1678 + (C8899 + C8900) * C1670 +
            (C8901 + C8902) * C1680 + (C8903 + C8904) * C84550) *
               C84528 +
           ((C11976 + C11977) * C1676 + (C11978 + C11979) * C1669 +
            (C10999 + C11000) * C1678 + (C11001 + C11002) * C1670 +
            (C11003 + C11004) * C1680 + (C11005 + C11006) * C84550) *
               C84304) *
              C1177 -
          (((C8871 * C5116 + C84344 * C5282 + C8870 * C3450 + C84529 * C3637) *
                C84550 +
            (C8871 * C5113 + C84344 * C5279 + C8870 * C3444 + C84529 * C3631) *
                C1680 +
            (C8871 * C5117 + C84344 * C5283 + C8870 * C3451 + C84529 * C3638) *
                C1670 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C1678 +
            (C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C1669 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C1676) *
               C84304 +
           ((C8871 * C4218 + C84344 * C4422 + C8870 * C1186 + C84529 * C1300) *
                C84550 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C1680 +
            (C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
                C1670 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C1678 +
            (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C1669 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C1676) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
             C35211 * C4212 + C35067 * C4416 + C35212 * C5838 +
             C84543 * C6058) *
                C15867 +
            (C35209 * C108 + C35065 * C258 + C35210 * C1188 + C35066 * C1302 +
             C35211 * C4216 + C35067 * C4420 + C35212 * C5841 +
             C84543 * C6061) *
                C84188) *
               C84528 +
           ((C37769 + C37770 + C37771 + C37772) * C15867 +
            (C37773 + C37774 + C37775 + C37776) * C84188) *
               C84304) *
              C1177 -
          (((C35212 * C31337 + C84543 * C31427 + C35211 * C18817 +
             C35067 * C19024 + C35210 * C5118 + C35066 * C5284 +
             C35209 * C3452 + C35065 * C3639) *
                C84188 +
            (C35212 * C31336 + C84543 * C31426 + C35211 * C18815 +
             C35067 * C19022 + C35210 * C5115 + C35066 * C5281 +
             C35209 * C3446 + C35065 * C3633) *
                C15867) *
               C84304 +
           ((C35212 * C30909 + C84543 * C31011 + C35211 * C5841 +
             C35067 * C6061 + C35210 * C4216 + C35066 * C4420 + C35209 * C1188 +
             C35065 * C1302) *
                C84188 +
            (C35212 * C30907 + C84543 * C31009 + C35211 * C5838 +
             C35067 * C6058 + C35210 * C4212 + C35066 * C4416 + C35209 * C1183 +
             C35065 * C1297) *
                C15867) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C19726 +
            (C15867 * C173 + C84188 * C330) * C19636 + C16500 * C19727 +
            C16501 * C19637 + C16502 * C19728 + C16503 * C19638 +
            C16504 * C19729 + C16505 * C84536) *
               C84529 +
           (C26009 + C26010 + C26011 + C26012 + C26013 + C26014 + C26015 +
            C26016) *
               C84344) *
              C1177 -
          (((C15867 * C18071 + C84188 * C18259) * C84536 +
            (C15867 * C17967 + C84188 * C17968) * C19729 + C18284 * C19638 +
            C18283 * C19728 + C18282 * C19637 + C18281 * C19727 +
            C19121 * C19636 + C19120 * C19726) *
               C84344 +
           (C26016 + C26015 + C26014 + C26013 + C26012 + C26011 + C26010 +
            C26009) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C6774 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84528 +
            (C2925 + C2926 + C2927) * C6775 +
            (C2928 + C2929 + C2930) * C84304) *
               C84529 +
           ((C6164 + C6165 + C6166) * C6774 + (C6167 + C6168 + C6169) * C84528 +
            (C12090 + C12091 + C12092) * C6775 +
            (C12093 + C12094 + C12095) * C84304) *
               C84344) *
              C1177 -
          (((C1680 * C5199 + C84550 * C5359 + C1678 * C5200 + C1670 * C5360 +
             C1676 * C5201 + C1669 * C5361) *
                C84304 +
            (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
             C1676 * C5115 + C1669 * C5118) *
                C6775 +
            (C6175 + C6174 + C6173) * C84528 +
            (C6172 + C6171 + C6170) * C6774) *
               C84344 +
           ((C12095 + C12094 + C12093) * C84304 +
            (C12092 + C12091 + C12090) * C6775 +
            (C6169 + C6168 + C6167) * C84528 +
            (C6166 + C6165 + C6164) * C6774) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C6774 +
            (C15867 * C173 + C84188 * C330) * C84528 + C16500 * C6775 +
            C16501 * C84304) *
               C35065 +
           (C38504 + C38505 + C38506 + C38507) * C35066 +
           (C38508 + C38509 + C38510 + C38511) * C35067 +
           (C38512 + C38513 + C38514 + C38515) * C84543) *
              C1177 -
          (((C15867 * C31382 + C84188 * C31470) * C84304 +
            (C15867 * C31336 + C84188 * C31337) * C6775 + C31916 * C84528 +
            C31915 * C6774) *
               C84543 +
           (C38515 + C38514 + C38513 + C38512) * C35067 +
           (C38511 + C38510 + C38509 + C38508) * C35066 +
           (C38507 + C38506 + C38505 + C38504) * C35065) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84188 * C84529 +
                     (C26103 + C26104 + C26105 + C26106) * C84188 * C84344) *
                        C1177 -
                    ((C19961 * C17967 + C26091 + C26091 + C84536 * C18358 +
                      C19960 * C17254 + C26092 + C26092 + C19638 * C17575 +
                      C19959 * C5115 + C26093 + C26093 + C19637 * C5438 +
                      C19958 * C4212 + C26094 + C26094 + C19636 * C4612) *
                         C84188 * C84344 +
                     (C26106 + C26105 + C26104 + C26103) * C84188 * C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C1669 +
                      (C7053 + C7054) * C1670 + (C7055 + C7056) * C84550) *
                         C84529 +
                     ((C13139 + C13140) * C1669 + (C11219 + C11220) * C1670 +
                      (C11221 + C11222) * C84550) *
                         C84344) *
                        C1177 -
                    (((C7017 * C5113 + C13129 + C13129 + C84304 * C5436 +
                       C7016 * C4214 + C13130 + C13130 + C84528 * C4614) *
                          C84550 +
                      (C7017 * C5114 + C13131 + C13131 + C84304 * C5437 +
                       C7016 * C4213 + C13132 + C13132 + C84528 * C4613) *
                          C1670 +
                      (C7017 * C5115 + C13133 + C13133 + C84304 * C5438 +
                       C7016 * C4212 + C13134 + C13134 + C84528 * C4612) *
                          C1669) *
                         C84344 +
                     ((C11222 + C11221) * C84550 + (C11220 + C11219) * C1670 +
                      (C13140 + C13139) * C1669) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                      C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                         C84188 * C35065 +
                     (C13139 + C13140) * C84188 * C35066 +
                     (C34587 + C34588) * C84188 * C35067 +
                     (C38592 + C38593) * C84188 * C84543) *
                        C1177 -
                    ((C7017 * C31336 + C38586 + C38586 + C84304 * C31513 +
                      C7016 * C30907 + C38587 + C38587 + C84528 * C31099) *
                         C84188 * C84543 +
                     (C38593 + C38592) * C84188 * C35067 +
                     (C34588 + C34587) * C84188 * C35066 +
                     (C13140 + C13139) * C84188 * C35065) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C19726 +
           (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
               C19636 +
           (C11976 + C11977) * C19727 + (C12302 + C12303) * C19637 +
           (C22895 + C22896) * C19728 + (C23224 + C23225) * C19638 +
           (C25278 + C25279) * C19729 + (C25494 + C25495) * C84536) *
              C84188 * C1177 -
          ((C8871 * C18071 + C84344 * C18439 + C8870 * C16860 +
            C84529 * C17045) *
               C84536 +
           (C8871 * C17967 + C84344 * C18147 + C8870 * C16807 +
            C84529 * C16906) *
               C19729 +
           (C8871 * C17343 + C84344 * C17657 + C8870 * C3546 + C84529 * C3887) *
               C19638 +
           (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 + C84529 * C3630) *
               C19728 +
           (C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
               C19637 +
           (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
               C19727 +
           (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
               C19636 +
           (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
               C19726) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C6774 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84528 +
            (C11976 + C11977) * C6775 + (C12302 + C12303) * C84304) *
               C1669 +
           ((C8897 + C8898) * C6774 + (C9124 + C9125) * C84528 +
            (C10999 + C11000) * C6775 + (C11329 + C11330) * C84304) *
               C1670 +
           ((C8901 + C8902) * C6774 + (C9126 + C9127) * C84528 +
            (C11003 + C11004) * C6775 + (C11331 + C11332) * C84304) *
               C84550) *
              C1177 -
          (((C8871 * C5199 + C84344 * C5519 + C8870 * C3543 + C84529 * C3884) *
                C84304 +
            (C8871 * C5113 + C84344 * C5279 + C8870 * C3444 + C84529 * C3631) *
                C6775 +
            (C8871 * C4309 + C84344 * C4716 + C8870 * C1243 + C84529 * C1446) *
                C84528 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C6774) *
               C84550 +
           ((C8871 * C5200 + C84344 * C5520 + C8870 * C3545 + C84529 * C3886) *
                C84304 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C6775 +
            (C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C84528 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C6774) *
               C1670 +
           ((C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
                C84304 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C6775 +
            (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C84528 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C6774) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
            C35211 * C4212 + C35067 * C4416 + C35212 * C5838 + C84543 * C6058) *
               C6774 +
           (C35209 * C173 + C35065 * C453 + C35210 * C1245 + C35066 * C1448 +
            C35211 * C4307 + C35067 * C4714 + C35212 * C5954 + C84543 * C6347) *
               C84528 +
           (C37769 + C37770 + C37771 + C37772) * C6775 +
           (C37991 + C37992 + C37993 + C37994) * C84304) *
              C84188 * C1177 -
          ((C35212 * C31382 + C84543 * C31558 + C35211 * C18908 +
            C35067 * C19309 + C35210 * C5201 + C35066 * C5521 + C35209 * C3547 +
            C35065 * C3888) *
               C84304 +
           (C35212 * C31336 + C84543 * C31426 + C35211 * C18815 +
            C35067 * C19022 + C35210 * C5115 + C35066 * C5281 + C35209 * C3446 +
            C35065 * C3633) *
               C6775 +
           (C35212 * C30958 + C84543 * C31145 + C35211 * C5954 +
            C35067 * C6347 + C35210 * C4307 + C35066 * C4714 + C35209 * C1245 +
            C35065 * C1448) *
               C84528 +
           (C35212 * C30907 + C84543 * C31009 + C35211 * C5838 +
            C35067 * C6058 + C35210 * C4212 + C35066 * C4416 + C35209 * C1183 +
            C35065 * C1297) *
               C6774) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C8870 +
            (C15867 * C252 + C84188 * C521) * C84529 + C19118 * C8871 +
            C19391 * C84344) *
               C19636 +
           (C25562 + C25563 + C25564 + C25565) * C19637 +
           (C25566 + C25567 + C25568 + C25569) * C19638 +
           (C25570 + C25571 + C25572 + C25576) * C84536) *
              C1177 -
          (((C15867 * C18147 + C84188 * C18532) * C84344 +
            (C15867 * C17967 + C84188 * C17968) * C8871 + C25575 * C84529 +
            C25352 * C8870) *
               C84536 +
           (C18553 * C84344 + C18283 * C8871 + C18552 * C84529 +
            C18279 * C8870) *
               C19638 +
           (C18551 * C84344 + C18281 * C8871 + C18550 * C84529 +
            C18277 * C8870) *
               C19637 +
           (C19392 * C84344 + C19120 * C8871 + C19391 * C84529 +
            C19118 * C8870) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C8870 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84529 +
            (C6164 + C6165 + C6166) * C8871 +
            (C6438 + C6439 + C6440) * C84344) *
               C84528 +
           ((C2925 + C2926 + C2927) * C8870 + (C3195 + C3196 + C3197) * C84529 +
            (C12090 + C12091 + C12092) * C8871 +
            (C12408 + C12409 + C12410) * C84344) *
               C84304) *
              C1177 -
          (((C1680 * C5279 + C84550 * C5596 + C1678 * C5280 + C1670 * C5597 +
             C1676 * C5281 + C1669 * C5598) *
                C84344 +
            (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
             C1676 * C5115 + C1669 * C5118) *
                C8871 +
            (C12410 + C12409 + C12408) * C84529 +
            (C12092 + C12091 + C12090) * C8870) *
               C84304 +
           ((C6443 + C6442 + C6441) * C84344 + (C6172 + C6171 + C6170) * C8871 +
            (C6440 + C6439 + C6438) * C84529 +
            (C6166 + C6165 + C6164) * C8870) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C35209 +
            (C15867 * C252 + C84188 * C521) * C35065 + C19118 * C35210 +
            C19391 * C35066 + C19120 * C35211 + C19392 * C35067 +
            C31913 * C35212 + C32069 * C84543) *
               C84528 +
           (C38061 + C38062 + C38063 + C38064 + C38065 + C38066 + C38067 +
            C38071) *
               C84304) *
              C1177 -
          (((C15867 * C31426 + C84188 * C31601) * C84543 +
            (C15867 * C31336 + C84188 * C31337) * C35212 + C38070 * C35067 +
            C37847 * C35211 + C18551 * C35066 + C18281 * C35210 +
            C18550 * C35065 + C18277 * C35209) *
               C84304 +
           (C32070 * C84543 + C31915 * C35212 + C32069 * C35067 +
            C31913 * C35211 + C19392 * C35066 + C19120 * C35210 +
            C19391 * C35065 + C19118 * C35209) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C8870 +
           (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
            C19728 * C1906 + C19638 * C2393 + C19729 * C2795 + C84536 * C3276) *
               C84529 +
           (C25869 + C25870 + C25871 + C25872) * C8871 +
           (C26313 + C26314 + C26315 + C26316) * C84344) *
              C84188 * C1177 -
          ((C19729 * C18147 + C84536 * C18631 + C19728 * C17421 +
            C19638 * C17809 + C19727 * C5281 + C19637 * C5675 + C19726 * C4416 +
            C19636 * C4888) *
               C84344 +
           (C19729 * C17967 + C84536 * C18071 + C19728 * C17254 +
            C19638 * C17343 + C19727 * C5115 + C19637 * C5201 + C19726 * C4212 +
            C19636 * C4307) *
               C8871 +
           (C26316 + C26315 + C26314 + C26313) * C84529 +
           (C25872 + C25871 + C25870 + C25869) * C8870) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C8870 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84529 +
            (C12827 + C12828) * C8871 + (C13439 + C13440) * C84344) *
               C1669 +
           ((C6801 + C6802) * C8870 + (C7284 + C7285) * C84529 +
            (C10877 + C10878) * C8871 + (C11537 + C11538) * C84344) *
               C1670 +
           ((C6805 + C6806) * C8870 + (C7286 + C7287) * C84529 +
            (C10881 + C10882) * C8871 + (C11539 + C11540) * C84344) *
               C84550) *
              C1177 -
          (((C6775 * C5279 + C84304 * C5673 + C6774 * C4418 + C84528 * C4890) *
                C84344 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C8871 +
            (C11540 + C11539) * C84529 + (C10882 + C10881) * C8870) *
               C84550 +
           ((C6775 * C5280 + C84304 * C5674 + C6774 * C4417 + C84528 * C4889) *
                C84344 +
            (C6775 * C5114 + C84304 * C5200 + C6774 * C4213 + C84528 * C4308) *
                C8871 +
            (C11538 + C11537) * C84529 + (C10878 + C10877) * C8870) *
               C1670 +
           ((C6775 * C5281 + C84304 * C5675 + C6774 * C4416 + C84528 * C4888) *
                C84344 +
            (C6775 * C5115 + C84304 * C5201 + C6774 * C4212 + C84528 * C4307) *
                C8871 +
            (C13440 + C13439) * C84529 + (C12828 + C12827) * C8870) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C35209 +
           (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
               C35065 +
           (C12827 + C12828) * C35210 + (C13439 + C13440) * C35066 +
           (C34261 + C34262) * C35211 + (C34896 + C34897) * C35067 +
           (C38368 + C38369) * C35212 + (C38796 + C38797) * C84543) *
              C84188 * C1177 -
          ((C6775 * C31426 + C84304 * C31644 + C6774 * C31009 +
            C84528 * C31233) *
               C84543 +
           (C6775 * C31336 + C84304 * C31382 + C6774 * C30907 +
            C84528 * C30958) *
               C35212 +
           (C38797 + C38796) * C35067 + (C38369 + C38368) * C35211 +
           (C34897 + C34896) * C35066 + (C34262 + C34261) * C35210 +
           (C13440 + C13439) * C35065 + (C12828 + C12827) * C35209) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C19636 +
           (C12621 + C12622) * C19637 + (C23544 + C23545) * C19638 +
           (C25719 + C25720) * C84536) *
              C84188 * C1177 -
          ((C9343 * C17967 + C26383 + C26383 + C84344 * C18706 +
            C9342 * C16807 + C26384 + C26384 + C84529 * C17177) *
               C84536 +
           (C9343 * C17254 + C24464 + C24464 + C84344 * C17885 + C9342 * C3443 +
            C24465 + C24465 + C84529 * C4127) *
               C19638 +
           (C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
            C13544 + C13544 + C84529 * C4128) *
               C19637 +
           (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
            C10661 + C10661 + C84529 * C1589) *
               C19636) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C84528 +
            (C12621 + C12622) * C84304) *
               C1669 +
           ((C9379 + C9380) * C84528 + (C11655 + C11656) * C84304) * C1670 +
           ((C9381 + C9382) * C84528 + (C11657 + C11658) * C84304) * C84550) *
              C1177 -
          (((C9343 * C5113 + C13539 + C13539 + C84344 * C5750 + C9342 * C3444 +
             C13540 + C13540 + C84529 * C4124) *
                C84304 +
            (C9343 * C4214 + C10656 + C10656 + C84344 * C4995 + C9342 * C1181 +
             C10657 + C10657 + C84529 * C1587) *
                C84528) *
               C84550 +
           ((C9343 * C5114 + C13541 + C13541 + C84344 * C5751 + C9342 * C3445 +
             C13542 + C13542 + C84529 * C4126) *
                C84304 +
            (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
             C10659 + C10659 + C84529 * C1588) *
                C84528) *
               C1670 +
           ((C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
             C13544 + C13544 + C84529 * C4128) *
                C84304 +
            (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
             C10661 + C10661 + C84529 * C1589) *
                C84528) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35661 * C102 + C35666 + C35666 + C35065 * C638 + C35662 * C1183 +
            C35667 + C35667 + C35066 * C1589 + C35663 * C4212 + C35668 +
            C35668 + C35067 * C4993 + C35664 * C5838 + C35669 + C35669 +
            C84543 * C6602) *
               C84528 +
           (C38224 + C38225 + C38226 + C38227) * C84304) *
              C84188 * C1177 -
          ((C35664 * C31336 + C38864 + C38864 + C84543 * C31687 +
            C35663 * C18815 + C38865 + C38865 + C35067 * C19561 +
            C35662 * C5115 + C38866 + C38866 + C35066 * C5752 + C35661 * C3446 +
            C38867 + C38867 + C35065 * C4128) *
               C84304 +
           (C35664 * C30907 + C36947 + C36947 + C84543 * C31282 +
            C35663 * C5838 + C36948 + C36948 + C35067 * C6602 + C35662 * C4212 +
            C36949 + C36949 + C35066 * C4993 + C35661 * C1183 + C36950 +
            C36950 + C35065 * C1589) *
               C84528) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 +
               C122 + C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 +
               C98 * C105 + C124 + C124 + C84 * C117 + C100 * C106 + C125 +
               C125 + C85 * C118) *
                  C84257 * C84246 * C84603 * C84604 * C90 -
              (C100 * C107 + C126 + C126 + C85 * C119 + C98 * C106 + C127 +
               C127 + C84 * C118 + C96 * C105 + C128 + C128 + C83 * C117 +
               C94 * C104 + C129 + C129 + C82 * C116 + C92 * C103 + C130 +
               C130 + C81 * C115) *
                  C84257 * C84246 * C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
                C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
                C84550 * C116) *
                   C84257 * C84596 +
               (C1675 * C723 + C1697 + C1697 + C1669 * C733 + C1677 * C722 +
                C1698 + C1698 + C1670 * C732 + C1679 * C721 + C1699 + C1699 +
                C84550 * C731) *
                   C84257 * C84581 +
               (C1675 * C1681 + C1700 + C1700 + C1669 * C1689 + C1677 * C1682 +
                C1701 + C1701 + C1670 * C1690 + C1679 * C1683 + C1702 + C1702 +
                C84550 * C1691) *
                   C84257 * C84558) *
                  C84603 * C84604 * C90 -
              ((C1679 * C1684 + C1703 + C1703 + C84550 * C1692 + C1677 * C1683 +
                C1704 + C1704 + C1670 * C1691 + C1675 * C1682 + C1705 + C1705 +
                C1669 * C1690) *
                   C84257 * C84558 +
               (C1679 * C720 + C1706 + C1706 + C84550 * C730 + C1677 * C721 +
                C1707 + C1707 + C1670 * C731 + C1675 * C722 + C1708 + C1708 +
                C1669 * C732) *
                   C84257 * C84581 +
               (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
                C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
                C1669 * C115) *
                   C84257 * C84596) *
                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84597 +
           (C1675 * C1183 + C3468 + C3468 + C1669 * C1193 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1679 * C1181 + C3466 + C3466 +
            C84550 * C1191) *
               C84583 +
           (C1675 * C4212 + C4225 + C4225 + C1669 * C4220 + C1677 * C4213 +
            C4226 + C4226 + C1670 * C4221 + C1679 * C4214 + C4227 + C4227 +
            C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C1679 * C4215 + C4228 + C4228 + C84550 * C4223 + C1677 * C4214 +
            C4229 + C4229 + C1670 * C4222 + C1675 * C4213 + C4230 + C4230 +
            C1669 * C4221) *
               C84561 +
           (C1679 * C1180 + C4231 + C4231 + C84550 * C1190 + C1677 * C1181 +
            C4232 + C4232 + C1670 * C1191 + C1675 * C1182 + C4233 + C4233 +
            C1669 * C1192) *
               C84583 +
           (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
            C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
            C1669 * C115) *
               C84597) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C13624 * C723 + C13634 + C13634 + C84590 * C733 + C13626 * C722 +
            C13635 + C13635 + C84574 * C732 + C13628 * C721 + C13636 + C13636 +
            C84550 * C731) *
               C84257 * C13622 +
           (C13624 * C1681 + C13637 + C13637 + C84590 * C1689 + C13626 * C1682 +
            C13638 + C13638 + C84574 * C1690 + C13628 * C1683 + C13639 +
            C13639 + C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C13628 * C1684 + C13640 + C13640 + C84550 * C1692 + C13626 * C1683 +
            C13641 + C13641 + C84574 * C1691 + C13624 * C1682 + C13642 +
            C13642 + C84590 * C1690) *
               C84257 * C84558 +
           (C13628 * C720 + C13643 + C13643 + C84550 * C730 + C13626 * C721 +
            C13644 + C13644 + C84574 * C731 + C13624 * C722 + C13645 + C13645 +
            C84590 * C732) *
               C84257 * C13622 +
           (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
            C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
            C84590 * C115) *
               C84257 * C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           (C15866 * C723 + C15876 + C15876 + C84188 * C733) * C84257 * C15862 +
           (C15866 * C1681 + C15877 + C15877 + C84188 * C1689) * C84257 *
               C15863 +
           (C15866 * C2599 + C15878 + C15878 + C84188 * C2605) * C84257 *
               C15864 +
           (C15866 * C15868 + C15879 + C15879 + C84188 * C15872) * C84257 *
               C15865) *
              C84603 * C84604 * C90 -
          ((C15866 * C15869 + C15880 + C15880 + C84188 * C15873) * C84257 *
               C15865 +
           (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C84257 *
               C15864 +
           (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84257 *
               C15863 +
           (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84257 * C15862 +
           (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84257 *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84597 +
            (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84583 +
            (C15866 * C4212 + C17261 + C17261 + C84188 * C4220) * C84561) *
               C13621 +
           (C16325 * C84597 +
            (C15866 * C3446 + C16816 + C16816 + C84188 * C3458) * C84583 +
            (C15866 * C5115 + C17262 + C17262 + C84188 * C5121) * C84561) *
               C13622 +
           (C16326 * C84597 +
            (C15866 * C3443 + C16815 + C16815 + C84188 * C3455) * C84583 +
            (C15866 * C17254 + C17263 + C17263 + C84188 * C17258) * C84561) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C15866 * C17255 + C17264 + C17264 + C84188 * C17259) * C84561 +
            (C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84583 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84597) *
               C84558 +
           ((C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C84561 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84583 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84597) *
               C13622 +
           ((C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C84561 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84583 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84597) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C26458 +
           (C13624 * C1183 + C15217 + C15217 + C84590 * C1193 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13628 * C1181 + C15215 +
            C15215 + C84550 * C1191) *
               C26459 +
           (C13624 * C4212 + C26462 + C26462 + C84590 * C4220 + C13626 * C4213 +
            C26463 + C26463 + C84574 * C4221 + C13628 * C4214 + C26464 +
            C26464 + C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C13628 * C4215 + C26465 + C26465 + C84550 * C4223 + C13626 * C4214 +
            C26466 + C26466 + C84574 * C4222 + C13624 * C4213 + C26467 +
            C26467 + C84590 * C4221) *
               C84561 +
           (C13628 * C1180 + C26468 + C26468 + C84550 * C1190 + C13626 * C1181 +
            C26469 + C26469 + C84574 * C1191 + C13624 * C1182 + C26470 +
            C26470 + C84590 * C1192) *
               C26459 +
           (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
            C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
            C84590 * C115) *
               C26458) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C26458 +
            C18832 * C26459 + C18833 * C84561) *
               C84596 +
           (C16325 * C26458 + C17990 * C26459 + C17991 * C84561) * C84581 +
           (C16326 * C26458 + C17992 * C26459 + C17993 * C84561) * C84558) *
              C84603 * C84604 * C90 -
          (((C15866 * C17255 + C17264 + C17264 + C84188 * C17259) * C84561 +
            (C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C26459 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C26458) *
               C84558 +
           ((C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C84561 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C26459 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C26458) *
               C84581 +
           ((C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C84561 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C26459 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C26458) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C30902 +
           C18832 * C30903 + C18833 * C30904 +
           (C15866 * C5838 + C18827 + C18827 + C84188 * C5844) * C30905 +
           (C15866 * C30907 + C30914 + C30914 + C84188 * C30911) * C30906) *
              C84246 * C84603 * C84604 * C90 -
          ((C15866 * C30908 + C30915 + C30915 + C84188 * C30912) * C30906 +
           (C15866 * C5837 + C30916 + C30916 + C84188 * C5843) * C30905 +
           (C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C30904 +
           (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C30903 +
           (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C30902) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C172 * C102 + C84246 * C173) * C93 +
               (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
               C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
               C209 * C85) *
                  C84257 * C84603 * C84604 * C90 -
              ((C172 * C113 + C84246 * C184) * C85 +
               (C172 * C107 + C84246 * C178) * C101 + C209 * C84 + C208 * C99 +
               C207 * C83 + C206 * C97 + C205 * C82 + C204 * C95 + C203 * C81 +
               C202 * C93) *
                  C84257 * C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
                C1787 * C1681 + C84558 * C1788) *
                   C1676 +
               (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
                C1787 * C1685 + C84558 * C1792) *
                   C1669 +
               (C1821 + C1822 + C1823) * C1678 +
               (C1824 + C1825 + C1826) * C1670 +
               (C1827 + C1828 + C1829) * C1680 +
               (C1830 + C1831 + C1832) * C84550) *
                  C84257 * C84603 * C84604 * C90 -
              ((C1787 * C1688 + C84558 * C1795 + C1786 * C725 + C84581 * C787 +
                C1785 * C111 + C84596 * C182) *
                   C84550 +
               (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
                C1785 * C105 + C84596 * C176) *
                   C1680 +
               (C1832 + C1831 + C1830) * C1670 +
               (C1829 + C1828 + C1827) * C1678 +
               (C1826 + C1825 + C1824) * C1669 +
               (C1823 + C1822 + C1821) * C1676) *
                  C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C1676 +
            (C172 * C108 + C84246 * C179) * C1669 + C202 * C1678 +
            C203 * C1670 + C204 * C1680 + C205 * C84550) *
               C84597 +
           ((C172 * C1183 + C84246 * C1245) * C1676 +
            (C172 * C1188 + C84246 * C1250) * C1669 + C4332 * C1678 +
            C4333 * C1670 + C4334 * C1680 + C4335 * C84550) *
               C84583 +
           ((C172 * C4212 + C84246 * C4307) * C1676 +
            (C172 * C4216 + C84246 * C4311) * C1669 + C4336 * C1678 +
            C4337 * C1670 + C4338 * C1680 + C4339 * C84550) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C172 * C4219 + C84246 * C4314) * C84550 +
            (C172 * C4215 + C84246 * C4310) * C1680 + C4339 * C1670 +
            C4338 * C1678 + C4337 * C1669 + C4336 * C1676) *
               C84561 +
           ((C172 * C1185 + C84246 * C1247) * C84550 +
            (C172 * C1180 + C84246 * C1242) * C1680 + C4335 * C1670 +
            C4334 * C1678 + C4333 * C1669 + C4332 * C1676) *
               C84583 +
           (C207 * C84550 + C206 * C1680 + C205 * C1670 + C204 * C1678 +
            C203 * C1669 + C202 * C1676) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13724 * C1688 + C84558 * C1795 + C13723 * C725 + C13622 * C787 +
            C13722 * C111 + C13621 * C182) *
               C84550 +
           (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
            C13722 * C105 + C13621 * C176) *
               C13629 +
           (C13761 + C13760 + C13759) * C84574 +
           (C13758 + C13757 + C13756) * C13627 +
           (C13755 + C13754 + C13753) * C84590 +
           (C13752 + C13751 + C13750) * C13625) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C84604 * C90 -
          ((C15930 * C15871 + C15865 * C15934 + C15929 * C2601 +
            C15864 * C2717 + C15928 * C1686 + C15863 * C1793 + C15927 * C727 +
            C15862 * C789 + C15926 * C109 + C15861 * C180) *
               C84188 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C15867) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C15867 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84188) *
               C84597 +
           ((C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
             C13724 * C3443 + C84558 * C3546) *
                C15867 +
            (C13722 * C1188 + C13621 * C1250 + C13723 * C3452 + C13622 * C3553 +
             C13724 * C3449 + C84558 * C3552) *
                C84188) *
               C84583 +
           ((C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
             C13724 * C17254 + C84558 * C17343) *
                C15867 +
            (C13722 * C4216 + C13621 * C4311 + C13723 * C5118 + C13622 * C5204 +
             C13724 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C13724 * C17257 + C84558 * C17346 + C13723 * C5117 +
             C13622 * C5203 + C13722 * C4217 + C13621 * C4312) *
                C84188 +
            (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
             C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
                C15867) *
               C84561 +
           ((C13724 * C3448 + C84558 * C3550 + C13723 * C3451 + C13622 * C3551 +
             C13722 * C1187 + C13621 * C1249) *
                C84188 +
            (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
             C13722 * C1182 + C13621 * C1244) *
                C15867) *
               C84583 +
           ((C13755 + C13754 + C13753) * C84188 +
            (C13752 + C13751 + C13750) * C15867) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C13625 +
            (C172 * C108 + C84246 * C179) * C84590 + C202 * C13627 +
            C203 * C84574 + C204 * C13629 + C205 * C84550) *
               C26458 +
           (C5975 * C13625 + C5976 * C84590 + C4332 * C13627 + C4333 * C84574 +
            C4334 * C13629 + C4335 * C84550) *
               C26459 +
           (C5977 * C13625 + C5978 * C84590 + C4336 * C13627 + C4337 * C84574 +
            C4338 * C13629 + C4339 * C84550) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C172 * C4219 + C84246 * C4314) * C84550 +
            (C172 * C4215 + C84246 * C4310) * C13629 + C4339 * C84574 +
            C4338 * C13627 + C4337 * C84590 + C4336 * C13625) *
               C84561 +
           (C8804 * C84550 + C8803 * C13629 + C4335 * C84574 + C4334 * C13627 +
            C4333 * C84590 + C4332 * C13625) *
               C26459 +
           (C207 * C84550 + C206 * C13629 + C205 * C84574 + C204 * C13627 +
            C203 * C84590 + C202 * C13625) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C15867 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C84188) *
               C26458 +
           ((C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
             C1787 * C3443 + C84558 * C3546) *
                C15867 +
            (C1785 * C1188 + C84596 * C1250 + C1786 * C3452 + C84581 * C3553 +
             C1787 * C3449 + C84558 * C3552) *
                C84188) *
               C26459 +
           ((C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
             C1787 * C17254 + C84558 * C17343) *
                C15867 +
            (C1785 * C4216 + C84596 * C4311 + C1786 * C5118 + C84581 * C5204 +
             C1787 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C1787 * C17257 + C84558 * C17346 + C1786 * C5117 + C84581 * C5203 +
             C1785 * C4217 + C84596 * C4312) *
                C84188 +
            (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 + C84581 * C5200 +
             C1785 * C4213 + C84596 * C4308) *
                C15867) *
               C84561 +
           ((C1787 * C3448 + C84558 * C3550 + C1786 * C3451 + C84581 * C3551 +
             C1785 * C1187 + C84596 * C1249) *
                C84188 +
            (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
             C1785 * C1182 + C84596 * C1244) *
                C15867) *
               C26459 +
           ((C1826 + C1825 + C1824) * C84188 +
            (C1823 + C1822 + C1821) * C15867) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C15867 +
            (C172 * C108 + C84246 * C179) * C84188) *
               C30902 +
           (C5975 * C15867 + C5976 * C84188) * C30903 +
           (C5977 * C15867 + C5978 * C84188) * C30904 +
           ((C172 * C5838 + C84246 * C5954) * C15867 +
            (C172 * C5841 + C84246 * C5957) * C84188) *
               C30905 +
           ((C172 * C30907 + C84246 * C30958) * C15867 +
            (C172 * C30909 + C84246 * C30960) * C84188) *
               C30906) *
              C84603 * C84604 * C90 -
          (((C172 * C30910 + C84246 * C30961) * C84188 +
            (C172 * C30908 + C84246 * C30959) * C15867) *
               C30906 +
           ((C172 * C5840 + C84246 * C5956) * C84188 +
            (C172 * C5837 + C84246 * C5953) * C15867) *
               C30905 +
           (C4337 * C84188 + C4336 * C15867) * C30904 +
           (C4333 * C84188 + C4332 * C15867) * C30903 +
           (C203 * C84188 + C202 * C15867) * C30902) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C251 * C102 + C84257 * C252) * C93 +
               (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
               C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
               C288 * C85) *
                  C84246 * C84603 * C84604 * C90 -
              ((C251 * C113 + C84257 * C263) * C85 +
               (C251 * C107 + C84257 * C257) * C101 + C288 * C84 + C287 * C99 +
               C286 * C83 + C285 * C97 + C284 * C82 + C283 * C95 + C282 * C81 +
               C281 * C93) *
                  C84246 * C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C1676 +
                (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
                C282 * C1670 + C283 * C1680 + C284 * C84550) *
                   C84596 +
               ((C251 * C723 + C84257 * C837) * C1676 +
                (C251 * C728 + C84257 * C842) * C1669 + C1931 * C1678 +
                C1932 * C1670 + C1933 * C1680 + C1934 * C84550) *
                   C84581 +
               ((C251 * C1681 + C84257 * C1906) * C1676 +
                (C251 * C1685 + C84257 * C1910) * C1669 + C1935 * C1678 +
                C1936 * C1670 + C1937 * C1680 + C1938 * C84550) *
                   C84558) *
                  C84603 * C84604 * C90 -
              (((C251 * C1688 + C84257 * C1913) * C84550 +
                (C251 * C1684 + C84257 * C1909) * C1680 + C1938 * C1670 +
                C1937 * C1678 + C1936 * C1669 + C1935 * C1676) *
                   C84558 +
               ((C251 * C725 + C84257 * C839) * C84550 +
                (C251 * C720 + C84257 * C834) * C1680 + C1934 * C1670 +
                C1933 * C1678 + C1932 * C1669 + C1931 * C1676) *
                   C84581 +
               (C286 * C84550 + C285 * C1680 + C284 * C1670 + C283 * C1678 +
                C282 * C1669 + C281 * C1676) *
                   C84596) *
                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C1676 +
           (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
            C4415 * C4216 + C84561 * C4420) *
               C1669 +
           (C4449 + C4450 + C4451) * C1678 + (C4452 + C4453 + C4454) * C1670 +
           (C4455 + C4456 + C4457) * C1680 + (C4458 + C4459 + C4460) * C84550) *
              C84246 * C84603 * C84604 * C90 -
          ((C4415 * C4219 + C84561 * C4423 + C4414 * C1185 + C84583 * C1299 +
            C4413 * C111 + C84597 * C261) *
               C84550 +
           (C4415 * C4215 + C84561 * C4419 + C4414 * C1180 + C84583 * C1294 +
            C4413 * C105 + C84597 * C255) *
               C1680 +
           (C4460 + C4459 + C4458) * C1670 + (C4457 + C4456 + C4455) * C1678 +
           (C4454 + C4453 + C4452) * C1669 + (C4451 + C4450 + C4449) * C1676) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C2816 * C13625 + C2817 * C84590 + C1931 * C13627 + C1932 * C84574 +
            C1933 * C13629 + C1934 * C84550) *
               C13622 +
           (C2818 * C13625 + C2819 * C84590 + C1935 * C13627 + C1936 * C84574 +
            C1937 * C13629 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C13629 + C1938 * C84574 +
            C1937 * C13627 + C1936 * C84590 + C1935 * C13625) *
               C84558 +
           (C6884 * C84550 + C6883 * C13629 + C1934 * C84574 + C1933 * C13627 +
            C1932 * C84590 + C1931 * C13625) *
               C13622 +
           (C286 * C84550 + C285 * C13629 + C284 * C84574 + C283 * C13627 +
            C282 * C84590 + C281 * C13625) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C2816 * C15867 + C2817 * C84188) * C15862 +
           (C2818 * C15867 + C2819 * C84188) * C15863 +
           ((C251 * C2599 + C84257 * C2795) * C15867 +
            (C251 * C2602 + C84257 * C2798) * C84188) *
               C15864 +
           ((C251 * C15868 + C84257 * C15977) * C15867 +
            (C251 * C15870 + C84257 * C15979) * C84188) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C251 * C15871 + C84257 * C15980) * C84188 +
            (C251 * C15869 + C84257 * C15978) * C15867) *
               C15865 +
           ((C251 * C2601 + C84257 * C2797) * C84188 +
            (C251 * C2598 + C84257 * C2794) * C15867) *
               C15864 +
           (C1936 * C84188 + C1935 * C15867) * C15863 +
           (C1932 * C84188 + C1931 * C15867) * C15862 +
           (C282 * C84188 + C281 * C15867) * C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C15867 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C84188) *
               C13621 +
           ((C4413 * C723 + C84597 * C837 + C4414 * C3446 + C84583 * C3633 +
             C4415 * C5115 + C84561 * C5281) *
                C15867 +
            (C4413 * C728 + C84597 * C842 + C4414 * C3452 + C84583 * C3639 +
             C4415 * C5118 + C84561 * C5284) *
                C84188) *
               C13622 +
           ((C4413 * C1681 + C84597 * C1906 + C4414 * C3443 + C84583 * C3630 +
             C4415 * C17254 + C84561 * C17421) *
                C15867 +
            (C4413 * C1685 + C84597 * C1910 + C4414 * C3449 + C84583 * C3636 +
             C4415 * C17256 + C84561 * C17423) *
                C84188) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C4415 * C17257 + C84561 * C17424 + C4414 * C3448 + C84583 * C3635 +
             C4413 * C1686 + C84597 * C1911) *
                C84188 +
            (C4415 * C17255 + C84561 * C17422 + C4414 * C3442 + C84583 * C3629 +
             C4413 * C1682 + C84597 * C1907) *
                C15867) *
               C84558 +
           ((C4415 * C5117 + C84561 * C5283 + C4414 * C3451 + C84583 * C3638 +
             C4413 * C727 + C84597 * C841) *
                C84188 +
            (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
             C4413 * C722 + C84597 * C836) *
                C15867) *
               C13622 +
           ((C4454 + C4453 + C4452) * C84188 +
            (C4451 + C4450 + C4449) * C15867) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C13625 +
           (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
            C26620 * C4216 + C84561 * C4420) *
               C84590 +
           (C26646 + C26647 + C26648) * C13627 +
           (C26649 + C26650 + C26651) * C84574 +
           (C26652 + C26653 + C26654) * C13629 +
           (C26655 + C26656 + C26657) * C84550) *
              C84246 * C84603 * C84604 * C90 -
          ((C26620 * C4219 + C84561 * C4423 + C26619 * C1185 + C26459 * C1299 +
            C26618 * C111 + C26458 * C261) *
               C84550 +
           (C26620 * C4215 + C84561 * C4419 + C26619 * C1180 + C26459 * C1294 +
            C26618 * C105 + C26458 * C255) *
               C13629 +
           (C26657 + C26656 + C26655) * C84574 +
           (C26654 + C26653 + C26652) * C13627 +
           (C26651 + C26650 + C26649) * C84590 +
           (C26648 + C26647 + C26646) * C13625) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C15867 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84188) *
               C84596 +
           ((C26618 * C723 + C26458 * C837 + C26619 * C3446 + C26459 * C3633 +
             C26620 * C5115 + C84561 * C5281) *
                C15867 +
            (C26618 * C728 + C26458 * C842 + C26619 * C3452 + C26459 * C3639 +
             C26620 * C5118 + C84561 * C5284) *
                C84188) *
               C84581 +
           ((C26618 * C1681 + C26458 * C1906 + C26619 * C3443 + C26459 * C3630 +
             C26620 * C17254 + C84561 * C17421) *
                C15867 +
            (C26618 * C1685 + C26458 * C1910 + C26619 * C3449 + C26459 * C3636 +
             C26620 * C17256 + C84561 * C17423) *
                C84188) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C26620 * C17257 + C84561 * C17424 + C26619 * C3448 +
             C26459 * C3635 + C26618 * C1686 + C26458 * C1911) *
                C84188 +
            (C26620 * C17255 + C84561 * C17422 + C26619 * C3442 +
             C26459 * C3629 + C26618 * C1682 + C26458 * C1907) *
                C15867) *
               C84558 +
           ((C26620 * C5117 + C84561 * C5283 + C26619 * C3451 + C26459 * C3638 +
             C26618 * C727 + C26458 * C841) *
                C84188 +
            (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
             C26618 * C722 + C26458 * C836) *
                C15867) *
               C84581 +
           ((C26651 + C26650 + C26649) * C84188 +
            (C26648 + C26647 + C26646) * C15867) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31004 * C102 + C30902 * C252 + C31005 * C1183 + C30903 * C1297 +
            C31006 * C4212 + C30904 * C4416 + C31007 * C5838 + C30905 * C6058 +
            C31008 * C30907 + C30906 * C31009) *
               C15867 +
           (C31004 * C108 + C30902 * C258 + C31005 * C1188 + C30903 * C1302 +
            C31006 * C4216 + C30904 * C4420 + C31007 * C5841 + C30905 * C6061 +
            C31008 * C30909 + C30906 * C31011) *
               C84188) *
              C84246 * C84603 * C84604 * C90 -
          ((C31008 * C30910 + C30906 * C31012 + C31007 * C5840 +
            C30905 * C6060 + C31006 * C4217 + C30904 * C4421 + C31005 * C1187 +
            C30903 * C1301 + C31004 * C109 + C30902 * C259) *
               C84188 +
           (C31008 * C30908 + C30906 * C31010 + C31007 * C5837 +
            C30905 * C6057 + C31006 * C4213 + C30904 * C4417 + C31005 * C1182 +
            C30903 * C1296 + C31004 * C103 + C30902 * C253) *
               C15867) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
                C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 +
                C85 * C112) *
                   C172 +
               (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
                C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 +
                C85 * C334) *
                   C84246) *
                  C84257 * C84603 * C84604 * C90 -
              ((C101 * C178 + C85 * C335 + C99 * C177 + C84 * C334 +
                C97 * C176 + C83 * C333 + C95 * C175 + C82 * C332 + C93 * C174 +
                C81 * C331) *
                   C84246 +
               (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 +
                C97 * C105 + C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 +
                C81 * C109) *
                   C172) *
                  C84257 * C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
                C1680 * C104 + C84550 * C110) *
                   C1785 +
               (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
                C1680 * C175 + C84550 * C332) *
                   C84596 +
               (C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
                C1680 * C721 + C84550 * C726) *
                   C1786 +
               (C1676 * C785 + C1669 * C889 + C1678 * C784 + C1670 * C888 +
                C1680 * C783 + C84550 * C887) *
                   C84581 +
               (C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
                C1680 * C1683 + C84550 * C1687) *
                   C1787 +
               (C1676 * C1788 + C1669 * C2012 + C1678 * C1789 + C1670 * C2013 +
                C1680 * C1790 + C84550 * C2014) *
                   C84558) *
                  C84257 * C84603 * C84604 * C90 -
              ((C1680 * C1791 + C84550 * C2015 + C1678 * C1790 + C1670 * C2014 +
                C1676 * C1789 + C1669 * C2013) *
                   C84558 +
               (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
                C1676 * C1682 + C1669 * C1686) *
                   C1787 +
               (C1680 * C782 + C84550 * C886 + C1678 * C783 + C1670 * C887 +
                C1676 * C784 + C1669 * C888) *
                   C84581 +
               (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
                C1676 * C722 + C1669 * C727) *
                   C1786 +
               (C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
                C1676 * C174 + C1669 * C331) *
                   C84596 +
               (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
                C1676 * C103 + C1669 * C109) *
                   C1785) *
                  C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C172 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84246) *
               C84597 +
           ((C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
             C1680 * C1181 + C84550 * C1186) *
                C172 +
            (C1676 * C1245 + C1669 * C1349 + C1678 * C1244 + C1670 * C1348 +
             C1680 * C1243 + C84550 * C1347) *
                C84246) *
               C84583 +
           ((C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
             C1680 * C4214 + C84550 * C4218) *
                C172 +
            (C1676 * C4307 + C1669 * C4534 + C1678 * C4308 + C1670 * C4535 +
             C1680 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C1680 * C4310 + C84550 * C4537 + C1678 * C4309 + C1670 * C4536 +
             C1676 * C4308 + C1669 * C4535) *
                C84246 +
            (C1680 * C4215 + C84550 * C4219 + C1678 * C4214 + C1670 * C4218 +
             C1676 * C4213 + C1669 * C4217) *
                C172) *
               C84561 +
           ((C1680 * C1242 + C84550 * C1346 + C1678 * C1243 + C1670 * C1347 +
             C1676 * C1244 + C1669 * C1348) *
                C84246 +
            (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
             C1676 * C1182 + C1669 * C1187) *
                C172) *
               C84583 +
           ((C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
             C1676 * C174 + C1669 * C331) *
                C84246 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C172) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
            C13629 * C721 + C84550 * C726) *
               C13723 +
           (C13625 * C785 + C84590 * C889 + C13627 * C784 + C84574 * C888 +
            C13629 * C783 + C84550 * C887) *
               C13622 +
           (C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
            C13629 * C1683 + C84550 * C1687) *
               C13724 +
           (C13625 * C1788 + C84590 * C2012 + C13627 * C1789 + C84574 * C2013 +
            C13629 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C13629 * C1791 + C84550 * C2015 + C13627 * C1790 + C84574 * C2014 +
            C13625 * C1789 + C84590 * C2013) *
               C84558 +
           (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
            C13625 * C1682 + C84590 * C1686) *
               C13724 +
           (C13629 * C782 + C84550 * C886 + C13627 * C783 + C84574 * C887 +
            C13625 * C784 + C84590 * C888) *
               C13622 +
           (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
            C13625 * C722 + C84590 * C727) *
               C13723 +
           (C13629 * C176 + C84550 * C333 + C13627 * C175 + C84574 * C332 +
            C13625 * C174 + C84590 * C331) *
               C13621 +
           (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
            C13625 * C103 + C84590 * C109) *
               C13722) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 +
           (C15867 * C723 + C84188 * C728) * C15927 +
           (C15867 * C785 + C84188 * C889) * C15862 +
           (C15867 * C1681 + C84188 * C1685) * C15928 +
           (C15867 * C1788 + C84188 * C2012) * C15863 +
           (C15867 * C2599 + C84188 * C2602) * C15929 +
           (C15867 * C2715 + C84188 * C2899) * C15864 +
           (C15867 * C15868 + C84188 * C15870) * C15930 +
           (C15867 * C15931 + C84188 * C16023) * C15865) *
              C84257 * C84603 * C84604 * C90 -
          ((C15867 * C15932 + C84188 * C16024) * C15865 +
           (C15867 * C15869 + C84188 * C15871) * C15930 +
           (C15867 * C2714 + C84188 * C2898) * C15864 +
           (C15867 * C2598 + C84188 * C2601) * C15929 +
           (C15867 * C1789 + C84188 * C2013) * C15863 +
           (C15867 * C1682 + C84188 * C1686) * C15928 +
           (C15867 * C784 + C84188 * C888) * C15862 +
           (C15867 * C722 + C84188 * C727) * C15927 +
           (C15867 * C174 + C84188 * C331) * C15861 +
           (C15867 * C103 + C84188 * C109) * C15926) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C13722 +
            (C15867 * C173 + C84188 * C330) * C13621 + C16500 * C13723 +
            C16501 * C13622 + C16502 * C13724 + C16503 * C84558) *
               C84597 +
           ((C15867 * C1183 + C84188 * C1188) * C13722 +
            (C15867 * C1245 + C84188 * C1349) * C13621 +
            (C15867 * C3446 + C84188 * C3452) * C13723 +
            (C15867 * C3547 + C84188 * C3719) * C13622 +
            (C15867 * C3443 + C84188 * C3449) * C13724 +
            (C15867 * C3546 + C84188 * C3716) * C84558) *
               C84583 +
           ((C15867 * C4212 + C84188 * C4216) * C13722 +
            (C15867 * C4307 + C84188 * C4534) * C13621 +
            (C15867 * C5115 + C84188 * C5118) * C13723 +
            (C15867 * C5201 + C84188 * C5361) * C13622 +
            (C15867 * C17254 + C84188 * C17256) * C13724 +
            (C15867 * C17343 + C84188 * C17499) * C84558) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C15867 * C17344 + C84188 * C17500) * C84558 +
            (C15867 * C17255 + C84188 * C17257) * C13724 +
            (C15867 * C5200 + C84188 * C5360) * C13622 +
            (C15867 * C5114 + C84188 * C5117) * C13723 +
            (C15867 * C4308 + C84188 * C4535) * C13621 +
            (C15867 * C4213 + C84188 * C4217) * C13722) *
               C84561 +
           ((C15867 * C3544 + C84188 * C3715) * C84558 +
            (C15867 * C3442 + C84188 * C3448) * C13724 +
            (C15867 * C3545 + C84188 * C3718) * C13622 +
            (C15867 * C3445 + C84188 * C3451) * C13723 +
            (C15867 * C1244 + C84188 * C1348) * C13621 +
            (C15867 * C1182 + C84188 * C1187) * C13722) *
               C84583 +
           ((C15867 * C1789 + C84188 * C2013) * C84558 +
            (C15867 * C1682 + C84188 * C1686) * C13724 +
            (C15867 * C784 + C84188 * C888) * C13622 +
            (C15867 * C722 + C84188 * C727) * C13723 +
            (C15867 * C174 + C84188 * C331) * C13621 +
            (C15867 * C103 + C84188 * C109) * C13722) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C172 +
            (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
             C13629 * C175 + C84550 * C332) *
                C84246) *
               C26458 +
           ((C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
             C13629 * C1181 + C84550 * C1186) *
                C172 +
            (C13625 * C1245 + C84590 * C1349 + C13627 * C1244 + C84574 * C1348 +
             C13629 * C1243 + C84550 * C1347) *
                C84246) *
               C26459 +
           ((C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
             C13629 * C4214 + C84550 * C4218) *
                C172 +
            (C13625 * C4307 + C84590 * C4534 + C13627 * C4308 + C84574 * C4535 +
             C13629 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C13629 * C4310 + C84550 * C4537 + C13627 * C4309 + C84574 * C4536 +
             C13625 * C4308 + C84590 * C4535) *
                C84246 +
            (C13629 * C4215 + C84550 * C4219 + C13627 * C4214 + C84574 * C4218 +
             C13625 * C4213 + C84590 * C4217) *
                C172) *
               C84561 +
           ((C13629 * C1242 + C84550 * C1346 + C13627 * C1243 + C84574 * C1347 +
             C13625 * C1244 + C84590 * C1348) *
                C84246 +
            (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 + C84574 * C1186 +
             C13625 * C1182 + C84590 * C1187) *
                C172) *
               C26459 +
           ((C13629 * C176 + C84550 * C333 + C13627 * C175 + C84574 * C332 +
             C13625 * C174 + C84590 * C331) *
                C84246 +
            (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
             C13625 * C103 + C84590 * C109) *
                C172) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C1785 +
            (C15867 * C173 + C84188 * C330) * C84596 + C16500 * C1786 +
            C16501 * C84581 + C16502 * C1787 + C16503 * C84558) *
               C26458 +
           (C19118 * C1785 + C19119 * C84596 + C18277 * C1786 +
            C18278 * C84581 + C18279 * C1787 + C18280 * C84558) *
               C26459 +
           (C19120 * C1785 + C19121 * C84596 + C18281 * C1786 +
            C18282 * C84581 + C18283 * C1787 + C18284 * C84558) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C15867 * C17344 + C84188 * C17500) * C84558 +
            (C15867 * C17255 + C84188 * C17257) * C1787 +
            (C15867 * C5200 + C84188 * C5360) * C84581 +
            (C15867 * C5114 + C84188 * C5117) * C1786 +
            (C15867 * C4308 + C84188 * C4535) * C84596 +
            (C15867 * C4213 + C84188 * C4217) * C1785) *
               C84561 +
           ((C15867 * C3544 + C84188 * C3715) * C84558 +
            (C15867 * C3442 + C84188 * C3448) * C1787 +
            (C15867 * C3545 + C84188 * C3718) * C84581 +
            (C15867 * C3445 + C84188 * C3451) * C1786 +
            (C15867 * C1244 + C84188 * C1348) * C84596 +
            (C15867 * C1182 + C84188 * C1187) * C1785) *
               C26459 +
           ((C15867 * C1789 + C84188 * C2013) * C84558 +
            (C15867 * C1682 + C84188 * C1686) * C1787 +
            (C15867 * C784 + C84188 * C888) * C84581 +
            (C15867 * C722 + C84188 * C727) * C1786 +
            (C15867 * C174 + C84188 * C331) * C84596 +
            (C15867 * C103 + C84188 * C109) * C1785) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C172 +
            (C15867 * C173 + C84188 * C330) * C84246) *
               C30902 +
           (C19118 * C172 + C19119 * C84246) * C30903 +
           (C19120 * C172 + C19121 * C84246) * C30904 +
           ((C15867 * C5838 + C84188 * C5841) * C172 +
            (C15867 * C5954 + C84188 * C6138) * C84246) *
               C30905 +
           ((C15867 * C30907 + C84188 * C30909) * C172 +
            (C15867 * C30958 + C84188 * C31055) * C84246) *
               C30906) *
              C84603 * C84604 * C90 -
          (((C15867 * C30959 + C84188 * C31056) * C84246 +
            (C15867 * C30908 + C84188 * C30910) * C172) *
               C30906 +
           ((C15867 * C5953 + C84188 * C6137) * C84246 +
            (C15867 * C5837 + C84188 * C5840) * C172) *
               C30905 +
           ((C15867 * C4308 + C84188 * C4535) * C84246 +
            (C15867 * C4213 + C84188 * C4217) * C172) *
               C30904 +
           ((C15867 * C1244 + C84188 * C1348) * C84246 +
            (C15867 * C1182 + C84188 * C1187) * C172) *
               C30903 +
           ((C15867 * C174 + C84188 * C331) * C84246 +
            (C15867 * C103 + C84188 * C109) * C172) *
               C30902) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
               C409 * C83 + C410 * C84 + C411 * C85) *
                  C84257 * C84603 * C84604 * C90 -
              ((C378 * C107 + C399 + C399 + C84246 * C384) * C85 + C411 * C84 +
               C410 * C83 + C409 * C82 + C408 * C81) *
                  C84257 * C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
                C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
                C84558 * C2093) *
                   C1669 +
               (C2134 + C2135 + C2136) * C1670 +
               (C2137 + C2138 + C2139) * C84550) *
                  C84257 * C84603 * C84604 * C90 -
              ((C2092 * C1684 + C2119 + C2119 + C84558 * C2096 + C2091 * C720 +
                C2120 + C2120 + C84581 * C933 + C2090 * C105 + C2121 + C2121 +
                C84596 * C382) *
                   C84550 +
               (C2139 + C2138 + C2137) * C1670 +
               (C2136 + C2135 + C2134) * C1669) *
                  C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C1669 + C408 * C1670 +
            C409 * C84550) *
               C84597 +
           ((C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C1669 +
            C4637 * C1670 + C4638 * C84550) *
               C84583 +
           ((C378 * C4212 + C4621 + C4621 + C84246 * C4612) * C1669 +
            C4639 * C1670 + C4640 * C84550) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84550 +
            C4640 * C1670 + C4639 * C1669) *
               C84561 +
           ((C378 * C1180 + C1399 + C1399 + C84246 * C1393) * C84550 +
            C4638 * C1670 + C4637 * C1669) *
               C84583 +
           (C410 * C84550 + C409 * C1670 + C408 * C1669) * C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13985 * C1684 + C14008 + C14008 + C84558 * C2096 + C13984 * C720 +
            C14009 + C14009 + C13622 * C933 + C13983 * C105 + C14010 + C14010 +
            C13621 * C382) *
               C84550 +
           (C14028 + C14027 + C14026) * C84574 +
           (C14025 + C14024 + C14023) * C84590) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C84604 * C90 -
          (C16071 * C15869 + C16080 + C16080 + C15865 * C16073 +
           C16070 * C2598 + C16081 + C16081 + C15864 * C3011 + C16069 * C1682 +
           C16082 + C16082 + C15863 * C2094 + C16068 * C722 + C16083 + C16083 +
           C15862 * C935 + C16067 * C103 + C16084 + C16084 + C15861 * C380) *
              C84188 * C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84188 * C84597 +
           (C13983 * C1183 + C15522 + C15522 + C13621 * C1396 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13985 * C3443 + C15520 +
            C15520 + C84558 * C3798) *
               C84188 * C84583 +
           (C13983 * C4212 + C17578 + C17578 + C13621 * C4612 + C13984 * C5115 +
            C17579 + C17579 + C13622 * C5438 + C13985 * C17254 + C17580 +
            C17580 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C84604 * C90 -
          ((C13985 * C17255 + C17581 + C17581 + C84558 * C17576 +
            C13984 * C5114 + C17582 + C17582 + C13622 * C5437 + C13983 * C4213 +
            C17583 + C17583 + C13621 * C4613) *
               C84188 * C84561 +
           (C13985 * C3442 + C15517 + C15517 + C84558 * C3796 + C13984 * C3445 +
            C15518 + C15518 + C13622 * C3797 + C13983 * C1182 + C15519 +
            C15519 + C13621 * C1395) *
               C84188 * C84583 +
           (C14025 + C14024 + C14023) * C84188 * C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84590 +
            C408 * C84574 + C409 * C84550) *
               C26458 +
           (C6268 * C84590 + C4637 * C84574 + C4638 * C84550) * C26459 +
           (C6269 * C84590 + C4639 * C84574 + C4640 * C84550) * C84561) *
              C84603 * C84604 * C90 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84550 +
            C4640 * C84574 + C4639 * C84590) *
               C84561 +
           (C9045 * C84550 + C4638 * C84574 + C4637 * C84590) * C26459 +
           (C410 * C84550 + C409 * C84574 + C408 * C84590) * C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C84188 * C26458 +
           (C2090 * C1183 + C3809 + C3809 + C84596 * C1396 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2092 * C3443 + C3807 + C3807 +
            C84558 * C3798) *
               C84188 * C26459 +
           (C2090 * C4212 + C29005 + C29005 + C84596 * C4612 + C2091 * C5115 +
            C29006 + C29006 + C84581 * C5438 + C2092 * C17254 + C29007 +
            C29007 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C84604 * C90 -
          ((C2092 * C17255 + C29008 + C29008 + C84558 * C17576 + C2091 * C5114 +
            C29009 + C29009 + C84581 * C5437 + C2090 * C4213 + C29010 + C29010 +
            C84596 * C4613) *
               C84188 * C84561 +
           (C2092 * C3442 + C3804 + C3804 + C84558 * C3796 + C2091 * C3445 +
            C3805 + C3805 + C84581 * C3797 + C2090 * C1182 + C3806 + C3806 +
            C84596 * C1395) *
               C84188 * C26459 +
           (C2136 + C2135 + C2134) * C84188 * C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C84188 * C30902 +
           C6268 * C84188 * C30903 + C6269 * C84188 * C30904 +
           (C378 * C5838 + C6263 + C6263 + C84246 * C6251) * C84188 * C30905 +
           (C378 * C30907 + C31102 + C31102 + C84246 * C31099) * C84188 *
               C30906) *
              C84603 * C84604 * C90 -
          ((C378 * C30908 + C31103 + C31103 + C84246 * C31100) * C84188 *
               C30906 +
           (C378 * C5837 + C6262 + C6262 + C84246 * C6250) * C84188 * C30905 +
           C4639 * C84188 * C30904 + C4637 * C84188 * C30903 +
           C408 * C84188 * C30902) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C172 +
                (C251 * C173 + C84257 * C453) * C84246) *
                   C81 +
               (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
               (C469 + C479) * C85) *
                  C84603 * C84604 * C90 -
              (((C251 * C178 + C84257 * C458) * C84246 +
                (C251 * C107 + C84257 * C257) * C172) *
                   C85 +
               (C479 + C469) * C84 + (C478 + C466) * C83 + (C477 + C463) * C82 +
               (C476 + C460) * C81) *
                  C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C1785 +
                (C251 * C173 + C84257 * C453) * C84596 +
                (C251 * C723 + C84257 * C837) * C1786 +
                (C251 * C785 + C84257 * C988) * C84581 +
                (C251 * C1681 + C84257 * C1906) * C1787 +
                (C251 * C1788 + C84257 * C2213) * C84558) *
                   C1669 +
               (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
               (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
                  C84603 * C84604 * C90 -
              (((C251 * C1791 + C84257 * C2216) * C84558 +
                (C251 * C1684 + C84257 * C1909) * C1787 +
                (C251 * C782 + C84257 * C985) * C84581 +
                (C251 * C720 + C84257 * C834) * C1786 + C474 * C84596 +
                C285 * C1785) *
                   C84550 +
               (C2241 + C2231 + C2240 + C2228 + C2227 + C2226) * C1670 +
               (C2239 + C2223 + C2238 + C2220 + C2219 + C2218) * C1669) *
                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C172 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C84246) *
               C1669 +
           ((C4449 + C4450 + C4451) * C172 + (C4731 + C4732 + C4733) * C84246) *
               C1670 +
           ((C4455 + C4456 + C4457) * C172 + (C4734 + C4735 + C4736) * C84246) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C4415 * C4310 + C84561 * C4717 + C4414 * C1242 + C84583 * C1445 +
             C4413 * C176 + C84597 * C456) *
                C84246 +
            (C4415 * C4215 + C84561 * C4419 + C4414 * C1180 + C84583 * C1294 +
             C4413 * C105 + C84597 * C255) *
                C172) *
               C84550 +
           ((C4736 + C4735 + C4734) * C84246 + (C4457 + C4456 + C4455) * C172) *
               C1670 +
           ((C4733 + C4732 + C4731) * C84246 + (C4451 + C4450 + C4449) * C172) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C13724 + C7138 * C13622 +
            C6883 * C13723 + C474 * C13621 + C285 * C13722) *
               C84550 +
           (C14114 + C14113 + C14112 + C14111 + C14110 + C14109) * C84574 +
           (C14108 + C14107 + C14106 + C14105 + C14104 + C14103) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 +
           (C251 * C2599 + C84257 * C2795) * C15929 +
           (C251 * C2715 + C84257 * C3098) * C15864 +
           (C251 * C15868 + C84257 * C15977) * C15930 +
           (C251 * C15931 + C84257 * C16126) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C251 * C15932 + C84257 * C16127) * C15865 +
           (C251 * C15869 + C84257 * C15978) * C15930 +
           (C251 * C2714 + C84257 * C3097) * C15864 +
           (C251 * C2598 + C84257 * C2794) * C15929 + C2235 * C15863 +
           C1935 * C15928 + C2234 * C15862 + C1931 * C15927 + C472 * C15861 +
           C281 * C15926) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C13722 +
           (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
            C4415 * C4307 + C84561 * C4714) *
               C13621 +
           (C4413 * C723 + C84597 * C837 + C4414 * C3446 + C84583 * C3633 +
            C4415 * C5115 + C84561 * C5281) *
               C13723 +
           (C4413 * C785 + C84597 * C988 + C4414 * C3547 + C84583 * C3888 +
            C4415 * C5201 + C84561 * C5521) *
               C13622 +
           (C4413 * C1681 + C84597 * C1906 + C4414 * C3443 + C84583 * C3630 +
            C4415 * C17254 + C84561 * C17421) *
               C13724 +
           (C4413 * C1788 + C84597 * C2213 + C4414 * C3546 + C84583 * C3887 +
            C4415 * C17343 + C84561 * C17657) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C4415 * C17344 + C84561 * C17658 + C4414 * C3544 + C84583 * C3885 +
            C4413 * C1789 + C84597 * C2214) *
               C84558 +
           (C4415 * C17255 + C84561 * C17422 + C4414 * C3442 + C84583 * C3629 +
            C4413 * C1682 + C84597 * C1907) *
               C13724 +
           (C4415 * C5200 + C84561 * C5520 + C4414 * C3545 + C84583 * C3886 +
            C4413 * C784 + C84597 * C987) *
               C13622 +
           (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
            C4413 * C722 + C84597 * C836) *
               C13723 +
           (C4733 + C4732 + C4731) * C13621 +
           (C4451 + C4450 + C4449) * C13722) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C172 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84246) *
               C84590 +
           ((C26646 + C26647 + C26648) * C172 +
            (C26892 + C26893 + C26894) * C84246) *
               C84574 +
           ((C26652 + C26653 + C26654) * C172 +
            (C26895 + C26896 + C26897) * C84246) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C26620 * C4310 + C84561 * C4717 + C26619 * C1242 + C26459 * C1445 +
             C26618 * C176 + C26458 * C456) *
                C84246 +
            (C26620 * C4215 + C84561 * C4419 + C26619 * C1180 + C26459 * C1294 +
             C26618 * C105 + C26458 * C255) *
                C172) *
               C84550 +
           ((C26897 + C26896 + C26895) * C84246 +
            (C26654 + C26653 + C26652) * C172) *
               C84574 +
           ((C26894 + C26893 + C26892) * C84246 +
            (C26648 + C26647 + C26646) * C172) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C1785 +
           (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
            C26620 * C4307 + C84561 * C4714) *
               C84596 +
           (C26618 * C723 + C26458 * C837 + C26619 * C3446 + C26459 * C3633 +
            C26620 * C5115 + C84561 * C5281) *
               C1786 +
           (C26618 * C785 + C26458 * C988 + C26619 * C3547 + C26459 * C3888 +
            C26620 * C5201 + C84561 * C5521) *
               C84581 +
           (C26618 * C1681 + C26458 * C1906 + C26619 * C3443 + C26459 * C3630 +
            C26620 * C17254 + C84561 * C17421) *
               C1787 +
           (C26618 * C1788 + C26458 * C2213 + C26619 * C3546 + C26459 * C3887 +
            C26620 * C17343 + C84561 * C17657) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C26620 * C17344 + C84561 * C17658 + C26619 * C3544 +
            C26459 * C3885 + C26618 * C1789 + C26458 * C2214) *
               C84558 +
           (C26620 * C17255 + C84561 * C17422 + C26619 * C3442 +
            C26459 * C3629 + C26618 * C1682 + C26458 * C1907) *
               C1787 +
           (C26620 * C5200 + C84561 * C5520 + C26619 * C3545 + C26459 * C3886 +
            C26618 * C784 + C26458 * C987) *
               C84581 +
           (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
            C26618 * C722 + C26458 * C836) *
               C1786 +
           (C26894 + C26893 + C26892) * C84596 +
           (C26648 + C26647 + C26646) * C1785) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31004 * C102 + C30902 * C252 + C31005 * C1183 + C30903 * C1297 +
            C31006 * C4212 + C30904 * C4416 + C31007 * C5838 + C30905 * C6058 +
            C31008 * C30907 + C30906 * C31009) *
               C172 +
           (C31004 * C173 + C30902 * C453 + C31005 * C1245 + C30903 * C1448 +
            C31006 * C4307 + C30904 * C4714 + C31007 * C5954 + C30905 * C6347 +
            C31008 * C30958 + C30906 * C31145) *
               C84246) *
              C84188 * C84603 * C84604 * C90 -
          ((C31008 * C30959 + C30906 * C31146 + C31007 * C5953 +
            C30905 * C6346 + C31006 * C4308 + C30904 * C4715 + C31005 * C1244 +
            C30903 * C1447 + C31004 * C174 + C30902 * C454) *
               C84246 +
           (C31008 * C30908 + C30906 * C31010 + C31007 * C5837 +
            C30905 * C6057 + C31006 * C4213 + C30904 * C4417 + C31005 * C1182 +
            C30903 * C1296 + C31004 * C103 + C30902 * C253) *
               C172) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
                C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 +
                C85 * C112) *
                   C251 +
               (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
                C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 +
                C85 * C525) *
                   C84257) *
                  C84246 * C84603 * C84604 * C90 -
              ((C101 * C257 + C85 * C526 + C99 * C256 + C84 * C525 +
                C97 * C255 + C83 * C524 + C95 * C254 + C82 * C523 + C93 * C253 +
                C81 * C522) *
                   C84257 +
               (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 +
                C97 * C105 + C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 +
                C81 * C109) *
                   C251) *
                  C84246 * C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
                 C1680 * C104 + C84550 * C110) *
                    C251 +
                (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
                 C1680 * C254 + C84550 * C523) *
                    C84257) *
                   C84596 +
               ((C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
                 C1680 * C721 + C84550 * C726) *
                    C251 +
                (C1676 * C837 + C1669 * C1035 + C1678 * C836 + C1670 * C1034 +
                 C1680 * C835 + C84550 * C1033) *
                    C84257) *
                   C84581 +
               ((C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
                 C1680 * C1683 + C84550 * C1687) *
                    C251 +
                (C1676 * C1906 + C1669 * C2315 + C1678 * C1907 + C1670 * C2316 +
                 C1680 * C1908 + C84550 * C2317) *
                    C84257) *
                   C84558) *
                  C84603 * C84604 * C90 -
              (((C1680 * C1909 + C84550 * C2318 + C1678 * C1908 +
                 C1670 * C2317 + C1676 * C1907 + C1669 * C2316) *
                    C84257 +
                (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 +
                 C1670 * C1687 + C1676 * C1682 + C1669 * C1686) *
                    C251) *
                   C84558 +
               ((C1680 * C834 + C84550 * C1032 + C1678 * C835 + C1670 * C1033 +
                 C1676 * C836 + C1669 * C1034) *
                    C84257 +
                (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
                 C1676 * C722 + C1669 * C727) *
                    C251) *
                   C84581 +
               ((C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
                 C1676 * C253 + C1669 * C522) *
                    C84257 +
                (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
                 C1676 * C103 + C1669 * C109) *
                    C251) *
                   C84596) *
                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C4413 +
           (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
            C1680 * C254 + C84550 * C523) *
               C84597 +
           (C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
            C1680 * C1181 + C84550 * C1186) *
               C4414 +
           (C1676 * C1297 + C1669 * C1495 + C1678 * C1296 + C1670 * C1494 +
            C1680 * C1295 + C84550 * C1493) *
               C84583 +
           (C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
            C1680 * C4214 + C84550 * C4218) *
               C4415 +
           (C1676 * C4416 + C1669 * C4810 + C1678 * C4417 + C1670 * C4811 +
            C1680 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C1680 * C4419 + C84550 * C4813 + C1678 * C4418 + C1670 * C4812 +
            C1676 * C4417 + C1669 * C4811) *
               C84561 +
           (C1680 * C4215 + C84550 * C4219 + C1678 * C4214 + C1670 * C4218 +
            C1676 * C4213 + C1669 * C4217) *
               C4415 +
           (C1680 * C1294 + C84550 * C1492 + C1678 * C1295 + C1670 * C1493 +
            C1676 * C1296 + C1669 * C1494) *
               C84583 +
           (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
            C1676 * C1182 + C1669 * C1187) *
               C4414 +
           (C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
            C1676 * C253 + C1669 * C522) *
               C84597 +
           (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
            C1676 * C103 + C1669 * C109) *
               C4413) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
             C13629 * C721 + C84550 * C726) *
                C251 +
            (C13625 * C837 + C84590 * C1035 + C13627 * C836 + C84574 * C1034 +
             C13629 * C835 + C84550 * C1033) *
                C84257) *
               C13622 +
           ((C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
             C13629 * C1683 + C84550 * C1687) *
                C251 +
            (C13625 * C1906 + C84590 * C2315 + C13627 * C1907 + C84574 * C2316 +
             C13629 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C13629 * C1909 + C84550 * C2318 + C13627 * C1908 + C84574 * C2317 +
             C13625 * C1907 + C84590 * C2316) *
                C84257 +
            (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
             C13625 * C1682 + C84590 * C1686) *
                C251) *
               C84558 +
           ((C13629 * C834 + C84550 * C1032 + C13627 * C835 + C84574 * C1033 +
             C13625 * C836 + C84590 * C1034) *
                C84257 +
            (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
             C13625 * C722 + C84590 * C727) *
                C251) *
               C13622 +
           ((C13629 * C255 + C84550 * C524 + C13627 * C254 + C84574 * C523 +
             C13625 * C253 + C84590 * C522) *
                C84257 +
            (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
             C13625 * C103 + C84590 * C109) *
                C251) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           ((C15867 * C723 + C84188 * C728) * C251 +
            (C15867 * C837 + C84188 * C1035) * C84257) *
               C15862 +
           ((C15867 * C1681 + C84188 * C1685) * C251 +
            (C15867 * C1906 + C84188 * C2315) * C84257) *
               C15863 +
           ((C15867 * C2599 + C84188 * C2602) * C251 +
            (C15867 * C2795 + C84188 * C3181) * C84257) *
               C15864 +
           ((C15867 * C15868 + C84188 * C15870) * C251 +
            (C15867 * C15977 + C84188 * C16170) * C84257) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C15867 * C15978 + C84188 * C16171) * C84257 +
            (C15867 * C15869 + C84188 * C15871) * C251) *
               C15865 +
           ((C15867 * C2794 + C84188 * C3180) * C84257 +
            (C15867 * C2598 + C84188 * C2601) * C251) *
               C15864 +
           ((C15867 * C1907 + C84188 * C2316) * C84257 +
            (C15867 * C1682 + C84188 * C1686) * C251) *
               C15863 +
           ((C15867 * C836 + C84188 * C1034) * C84257 +
            (C15867 * C722 + C84188 * C727) * C251) *
               C15862 +
           ((C15867 * C253 + C84188 * C522) * C84257 +
            (C15867 * C103 + C84188 * C109) * C251) *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C15867 * C102 + C84188 * C108) * C4413 +
                                (C15867 * C252 + C84188 * C521) * C84597 +
                                (C15867 * C1183 + C84188 * C1188) * C4414 +
                                (C15867 * C1297 + C84188 * C1495) * C84583 +
                                (C15867 * C4212 + C84188 * C4216) * C4415 +
                                (C15867 * C4416 + C84188 * C4810) * C84561) *
                                   C13621 +
                               (C16500 * C4413 + C16660 * C84597 +
                                (C15867 * C3446 + C84188 * C3452) * C4414 +
                                (C15867 * C3633 + C84188 * C3968) * C84583 +
                                (C15867 * C5115 + C84188 * C5118) * C4415 +
                                (C15867 * C5281 + C84188 * C5598) * C84561) *
                                   C13622 +
                               (C16502 * C4413 + C16661 * C84597 +
                                (C15867 * C3443 + C84188 * C3449) * C4414 +
                                (C15867 * C3630 + C84188 * C3965) * C84583 +
                                (C15867 * C17254 + C84188 * C17256) * C4415 +
                                (C15867 * C17421 + C84188 * C17733) * C84561) *
                                   C84558) *
                                  C84603 * C84604 * C90 -
                              (((C15867 * C17422 + C84188 * C17734) * C84561 +
                                (C15867 * C17255 + C84188 * C17257) * C4415 +
                                (C15867 * C3629 + C84188 * C3964) * C84583 +
                                (C15867 * C3442 + C84188 * C3448) * C4414 +
                                (C15867 * C1907 + C84188 * C2316) * C84597 +
                                (C15867 * C1682 + C84188 * C1686) * C4413) *
                                   C84558 +
                               ((C15867 * C5280 + C84188 * C5597) * C84561 +
                                (C15867 * C5114 + C84188 * C5117) * C4415 +
                                (C15867 * C3632 + C84188 * C3967) * C84583 +
                                (C15867 * C3445 + C84188 * C3451) * C4414 +
                                (C15867 * C836 + C84188 * C1034) * C84597 +
                                (C15867 * C722 + C84188 * C727) * C4413) *
                                   C13622 +
                               ((C15867 * C4417 + C84188 * C4811) * C84561 +
                                (C15867 * C4213 + C84188 * C4217) * C4415 +
                                (C15867 * C1296 + C84188 * C1494) * C84583 +
                                (C15867 * C1182 + C84188 * C1187) * C4414 +
                                (C15867 * C253 + C84188 * C522) * C84597 +
                                (C15867 * C103 + C84188 * C109) * C4413) *
                                   C13621) *
                                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C26618 +
           (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
            C13629 * C254 + C84550 * C523) *
               C26458 +
           (C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
            C13629 * C1181 + C84550 * C1186) *
               C26619 +
           (C13625 * C1297 + C84590 * C1495 + C13627 * C1296 + C84574 * C1494 +
            C13629 * C1295 + C84550 * C1493) *
               C26459 +
           (C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
            C13629 * C4214 + C84550 * C4218) *
               C26620 +
           (C13625 * C4416 + C84590 * C4810 + C13627 * C4417 + C84574 * C4811 +
            C13629 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C13629 * C4419 + C84550 * C4813 + C13627 * C4418 + C84574 * C4812 +
            C13625 * C4417 + C84590 * C4811) *
               C84561 +
           (C13629 * C4215 + C84550 * C4219 + C13627 * C4214 + C84574 * C4218 +
            C13625 * C4213 + C84590 * C4217) *
               C26620 +
           (C13629 * C1294 + C84550 * C1492 + C13627 * C1295 + C84574 * C1493 +
            C13625 * C1296 + C84590 * C1494) *
               C26459 +
           (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 + C84574 * C1186 +
            C13625 * C1182 + C84590 * C1187) *
               C26619 +
           (C13629 * C255 + C84550 * C524 + C13627 * C254 + C84574 * C523 +
            C13625 * C253 + C84590 * C522) *
               C26458 +
           (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
            C13625 * C103 + C84590 * C109) *
               C26618) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C26618 +
            (C15867 * C252 + C84188 * C521) * C26458 + C19118 * C26619 +
            C19391 * C26459 + C19120 * C26620 + C19392 * C84561) *
               C84596 +
           (C16500 * C26618 + C16660 * C26458 + C18277 * C26619 +
            C18550 * C26459 + C18281 * C26620 + C18551 * C84561) *
               C84581 +
           (C16502 * C26618 + C16661 * C26458 + C18279 * C26619 +
            C18552 * C26459 + C18283 * C26620 + C18553 * C84561) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C15867 * C17422 + C84188 * C17734) * C84561 +
            (C15867 * C17255 + C84188 * C17257) * C26620 +
            (C15867 * C3629 + C84188 * C3964) * C26459 +
            (C15867 * C3442 + C84188 * C3448) * C26619 +
            (C15867 * C1907 + C84188 * C2316) * C26458 +
            (C15867 * C1682 + C84188 * C1686) * C26618) *
               C84558 +
           ((C15867 * C5280 + C84188 * C5597) * C84561 +
            (C15867 * C5114 + C84188 * C5117) * C26620 +
            (C15867 * C3632 + C84188 * C3967) * C26459 +
            (C15867 * C3445 + C84188 * C3451) * C26619 +
            (C15867 * C836 + C84188 * C1034) * C26458 +
            (C15867 * C722 + C84188 * C727) * C26618) *
               C84581 +
           ((C15867 * C4417 + C84188 * C4811) * C84561 +
            (C15867 * C4213 + C84188 * C4217) * C26620 +
            (C15867 * C1296 + C84188 * C1494) * C26459 +
            (C15867 * C1182 + C84188 * C1187) * C26619 +
            (C15867 * C253 + C84188 * C522) * C26458 +
            (C15867 * C103 + C84188 * C109) * C26618) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C31004 +
           (C15867 * C252 + C84188 * C521) * C30902 + C19118 * C31005 +
           C19391 * C30903 + C19120 * C31006 + C19392 * C30904 +
           (C15867 * C5838 + C84188 * C5841) * C31007 +
           (C15867 * C6058 + C84188 * C6424) * C30905 +
           (C15867 * C30907 + C84188 * C30909) * C31008 +
           (C15867 * C31009 + C84188 * C31189) * C30906) *
              C84246 * C84603 * C84604 * C90 -
          ((C15867 * C31010 + C84188 * C31190) * C30906 +
           (C15867 * C30908 + C84188 * C30910) * C31008 +
           (C15867 * C6057 + C84188 * C6423) * C30905 +
           (C15867 * C5837 + C84188 * C5840) * C31007 +
           (C15867 * C4417 + C84188 * C4811) * C30904 +
           (C15867 * C4213 + C84188 * C4217) * C31006 +
           (C15867 * C1296 + C84188 * C1494) * C30903 +
           (C15867 * C1182 + C84188 * C1187) * C31005 +
           (C15867 * C253 + C84188 * C522) * C30902 +
           (C15867 * C103 + C84188 * C109) * C31004) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C172 * C102 + C84246 * C173) * C251 +
                (C172 * C252 + C84246 * C569) * C84257) *
                   C81 +
               (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
               (C585 + C595) * C85) *
                  C84603 * C84604 * C90 -
              (((C172 * C257 + C84246 * C574) * C84257 +
                (C172 * C107 + C84246 * C178) * C251) *
                   C85 +
               (C595 + C585) * C84 + (C594 + C582) * C83 + (C593 + C579) * C82 +
               (C592 + C576) * C81) *
                  C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
                 C1787 * C1681 + C84558 * C1788) *
                    C251 +
                (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
                 C1787 * C1906 + C84558 * C2393) *
                    C84257) *
                   C1669 +
               ((C1821 + C1822 + C1823) * C251 +
                (C2410 + C2411 + C2412) * C84257) *
                   C1670 +
               ((C1827 + C1828 + C1829) * C251 +
                (C2413 + C2414 + C2415) * C84257) *
                   C84550) *
                  C84603 * C84604 * C90 -
              (((C1787 * C1909 + C84558 * C2396 + C1786 * C834 +
                 C84581 * C1079 + C1785 * C255 + C84596 * C572) *
                    C84257 +
                (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
                 C1785 * C105 + C84596 * C176) *
                    C251) *
                   C84550 +
               ((C2415 + C2414 + C2413) * C84257 +
                (C1829 + C1828 + C1827) * C251) *
                   C1670 +
               ((C2412 + C2411 + C2410) * C84257 +
                (C1823 + C1822 + C1821) * C251) *
                   C1669) *
                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C4413 +
            (C172 * C252 + C84246 * C569) * C84597 +
            (C172 * C1183 + C84246 * C1245) * C4414 +
            (C172 * C1297 + C84246 * C1542) * C84583 +
            (C172 * C4212 + C84246 * C4307) * C4415 +
            (C172 * C4416 + C84246 * C4888) * C84561) *
               C1669 +
           (C4893 + C4894 + C4895 + C4913 + C4898 + C4914) * C1670 +
           (C4901 + C4902 + C4903 + C4915 + C4906 + C4916) * C84550) *
              C84603 * C84604 * C90 -
          (((C172 * C4419 + C84246 * C4891) * C84561 +
            (C172 * C4215 + C84246 * C4310) * C4415 +
            (C172 * C1294 + C84246 * C1539) * C84583 +
            (C172 * C1180 + C84246 * C1242) * C4414 + C590 * C84597 +
            C206 * C4413) *
               C84550 +
           (C4916 + C4906 + C4915 + C4903 + C4902 + C4901) * C1670 +
           (C4914 + C4898 + C4913 + C4895 + C4894 + C4893) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C13724 * C1909 + C84558 * C2396 + C13723 * C834 + C13622 * C1079 +
             C13722 * C255 + C13621 * C572) *
                C84257 +
            (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
             C13722 * C105 + C13621 * C176) *
                C251) *
               C84550 +
           ((C14280 + C14279 + C14278) * C84257 +
            (C13758 + C13757 + C13756) * C251) *
               C84574 +
           ((C14277 + C14276 + C14275) * C84257 +
            (C13752 + C13751 + C13750) * C251) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C84604 * C90 -
          ((C15930 * C15978 + C15865 * C16215 + C15929 * C2794 +
            C15864 * C3275 + C15928 * C1907 + C15863 * C2394 + C15927 * C836 +
            C15862 * C1081 + C15926 * C253 + C15861 * C570) *
               C84257 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C251) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C4413 +
           (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
            C13724 * C1906 + C84558 * C2393) *
               C84597 +
           (C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
            C13724 * C3443 + C84558 * C3546) *
               C4414 +
           (C13722 * C1297 + C13621 * C1542 + C13723 * C3633 + C13622 * C4048 +
            C13724 * C3630 + C84558 * C4047) *
               C84583 +
           (C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
            C13724 * C17254 + C84558 * C17343) *
               C4415 +
           (C13722 * C4416 + C13621 * C4888 + C13723 * C5281 + C13622 * C5675 +
            C13724 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C84604 * C90 -
          ((C13724 * C17422 + C84558 * C17810 + C13723 * C5280 +
            C13622 * C5674 + C13722 * C4417 + C13621 * C4889) *
               C84561 +
           (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
            C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
               C4415 +
           (C13724 * C3629 + C84558 * C4045 + C13723 * C3632 + C13622 * C4046 +
            C13722 * C1296 + C13621 * C1541) *
               C84583 +
           (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
            C13722 * C1182 + C13621 * C1244) *
               C4414 +
           (C14277 + C14276 + C14275) * C84597 +
           (C13752 + C13751 + C13750) * C4413) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C26618 +
            (C172 * C252 + C84246 * C569) * C26458 + C5975 * C26619 +
            C6525 * C26459 + C5977 * C26620 + C6526 * C84561) *
               C84590 +
           (C27046 + C27047 + C27048 + C27049 + C27050 + C27051) * C84574 +
           (C27052 + C27053 + C27054 + C27055 + C27056 + C27057) * C84550) *
              C84603 * C84604 * C90 -
          (((C172 * C4419 + C84246 * C4891) * C84561 +
            (C172 * C4215 + C84246 * C4310) * C26620 + C9275 * C26459 +
            C8803 * C26619 + C590 * C26458 + C206 * C26618) *
               C84550 +
           (C27057 + C27056 + C27055 + C27054 + C27053 + C27052) * C84574 +
           (C27051 + C27050 + C27049 + C27048 + C27047 + C27046) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C26618 +
           (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
            C1787 * C1906 + C84558 * C2393) *
               C26458 +
           (C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
            C1787 * C3443 + C84558 * C3546) *
               C26619 +
           (C1785 * C1297 + C84596 * C1542 + C1786 * C3633 + C84581 * C4048 +
            C1787 * C3630 + C84558 * C4047) *
               C26459 +
           (C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
            C1787 * C17254 + C84558 * C17343) *
               C26620 +
           (C1785 * C4416 + C84596 * C4888 + C1786 * C5281 + C84581 * C5675 +
            C1787 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C84604 * C90 -
          ((C1787 * C17422 + C84558 * C17810 + C1786 * C5280 + C84581 * C5674 +
            C1785 * C4417 + C84596 * C4889) *
               C84561 +
           (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 + C84581 * C5200 +
            C1785 * C4213 + C84596 * C4308) *
               C26620 +
           (C1787 * C3629 + C84558 * C4045 + C1786 * C3632 + C84581 * C4046 +
            C1785 * C1296 + C84596 * C1541) *
               C26459 +
           (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
            C1785 * C1182 + C84596 * C1244) *
               C26619 +
           (C2412 + C2411 + C2410) * C26458 +
           (C1823 + C1822 + C1821) * C26618) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C31004 +
           (C172 * C252 + C84246 * C569) * C30902 + C5975 * C31005 +
           C6525 * C30903 + C5977 * C31006 + C6526 * C30904 +
           (C172 * C5838 + C84246 * C5954) * C31007 +
           (C172 * C6058 + C84246 * C6519) * C30905 +
           (C172 * C30907 + C84246 * C30958) * C31008 +
           (C172 * C31009 + C84246 * C31233) * C30906) *
              C84188 * C84603 * C84604 * C90 -
          ((C172 * C31010 + C84246 * C31234) * C30906 +
           (C172 * C30908 + C84246 * C30959) * C31008 +
           (C172 * C6057 + C84246 * C6518) * C30905 +
           (C172 * C5837 + C84246 * C5953) * C31007 + C4910 * C30904 +
           C4336 * C31006 + C4909 * C30903 + C4332 * C31005 + C588 * C30902 +
           C202 * C31004) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
               C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
                  C84603 * C84604 * C90 -
              ((C637 * C107 + C658 + C658 + C84257 * C643) * C84246 * C85 +
               C674 * C84 + C673 * C83 + C672 * C82 + C671 * C81) *
                  C84603 * C84604 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
                (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84581 +
                (C637 * C1681 + C2494 + C2494 + C84257 * C2489) * C84558) *
                   C1669 +
               (C2495 + C2520 + C2521) * C1670 +
               (C2501 + C2522 + C2523) * C84550) *
                  C84603 * C84604 * C90 -
              (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
                (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84581 +
                C669 * C84596) *
                   C84550 +
               (C2523 + C2522 + C2501) * C1670 +
               (C2521 + C2520 + C2495) * C1669) *
                  C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C84246 * C1669 +
           (C5034 + C5035 + C5036) * C84246 * C1670 +
           (C5037 + C5038 + C5039) * C84246 * C84550) *
              C84603 * C84604 * C90 -
          ((C4992 * C4215 + C5019 + C5019 + C84561 * C4996 + C4991 * C1180 +
            C5020 + C5020 + C84583 * C1586 + C4990 * C105 + C5021 + C5021 +
            C84597 * C641) *
               C84246 * C84550 +
           (C5039 + C5038 + C5037) * C84246 * C1670 +
           (C5036 + C5035 + C5034) * C84246 * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            C7365 * C13622 + C669 * C13621) *
               C84550 +
           (C14360 + C14359 + C14358) * C84574 +
           (C14357 + C14356 + C14355) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 +
           (C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C15864 +
           (C637 * C15868 + C16261 + C16261 + C84257 * C16258) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C15865 +
           (C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C15864 +
           C2517 * C15863 + C2516 * C15862 + C667 * C15861) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C13621 +
           (C4990 * C723 + C5762 + C5762 + C84597 * C1129 + C4991 * C3446 +
            C5761 + C5761 + C84583 * C4128 + C4992 * C5115 + C5760 + C5760 +
            C84561 * C5752) *
               C13622 +
           (C4990 * C1681 + C17888 + C17888 + C84597 * C2489 + C4991 * C3443 +
            C17889 + C17889 + C84583 * C4127 + C4992 * C17254 + C17890 +
            C17890 + C84561 * C17885) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C4992 * C17255 + C17891 + C17891 + C84561 * C17886 + C4991 * C3442 +
            C17892 + C17892 + C84583 * C4125 + C4990 * C1682 + C17893 + C17893 +
            C84597 * C2490) *
               C84558 +
           (C4992 * C5114 + C5757 + C5757 + C84561 * C5751 + C4991 * C3445 +
            C5758 + C5758 + C84583 * C4126 + C4990 * C722 + C5759 + C5759 +
            C84597 * C1128) *
               C13622 +
           (C5036 + C5035 + C5034) * C13621) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84246 * C84590 +
           (C27171 + C27172 + C27173) * C84246 * C84574 +
           (C27174 + C27175 + C27176) * C84246 * C84550) *
              C84603 * C84604 * C90 -
          ((C27133 * C4215 + C27156 + C27156 + C84561 * C4996 + C27132 * C1180 +
            C27157 + C27157 + C26459 * C1586 + C27131 * C105 + C27158 + C27158 +
            C26458 * C641) *
               C84246 * C84550 +
           (C27176 + C27175 + C27174) * C84246 * C84574 +
           (C27173 + C27172 + C27171) * C84246 * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84596 +
           (C27131 * C723 + C27854 + C27854 + C26458 * C1129 + C27132 * C3446 +
            C27853 + C27853 + C26459 * C4128 + C27133 * C5115 + C27852 +
            C27852 + C84561 * C5752) *
               C84581 +
           (C27131 * C1681 + C29307 + C29307 + C26458 * C2489 + C27132 * C3443 +
            C29308 + C29308 + C26459 * C4127 + C27133 * C17254 + C29309 +
            C29309 + C84561 * C17885) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C27133 * C17255 + C29310 + C29310 + C84561 * C17886 +
            C27132 * C3442 + C29311 + C29311 + C26459 * C4125 + C27131 * C1682 +
            C29312 + C29312 + C26458 * C2490) *
               C84558 +
           (C27133 * C5114 + C27849 + C27849 + C84561 * C5751 + C27132 * C3445 +
            C27850 + C27850 + C26459 * C4126 + C27131 * C722 + C27851 + C27851 +
            C26458 * C1128) *
               C84581 +
           (C27173 + C27172 + C27171) * C84596) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C31277 * C102 + C31285 + C31285 + C30902 * C638 + C31278 * C1183 +
           C31286 + C31286 + C30903 * C1589 + C31279 * C4212 + C31287 + C31287 +
           C30904 * C4993 + C31280 * C5838 + C31288 + C31288 + C30905 * C6602 +
           C31281 * C30907 + C31289 + C31289 + C30906 * C31282) *
              C84246 * C84188 * C84603 * C84604 * C90 -
          (C31281 * C30908 + C31290 + C31290 + C30906 * C31283 +
           C31280 * C5837 + C31291 + C31291 + C30905 * C6601 + C31279 * C4213 +
           C31292 + C31292 + C30904 * C4994 + C31278 * C1182 + C31293 + C31293 +
           C30903 * C1588 + C31277 * C103 + C31294 + C31294 + C30902 * C639) *
              C84246 * C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 +
               C122 + C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 +
               C98 * C105 + C124 + C124 + C84 * C117 + C100 * C106 + C125 +
               C125 + C85 * C118) *
                  C84257 * C84246 * C84603 * C716 -
              (C100 * C719 + C735 + C735 + C85 * C729 + C98 * C720 + C736 +
               C736 + C84 * C730 + C96 * C721 + C737 + C737 + C83 * C731 +
               C94 * C722 + C738 + C738 + C82 * C732 + C92 * C723 + C739 +
               C739 + C81 * C733) *
                  C84257 * C84246 * C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
                C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
                C84550 * C116) *
                   C84257 * C84596 +
               (C2634 + C2635 + C2636) * C84257 * C84581 +
               (C2637 + C2638 + C2639) * C84257 * C84558) *
                  C84603 * C716 -
              ((C1679 * C2597 + C2619 + C2619 + C84550 * C2603 + C1677 * C2598 +
                C2620 + C2620 + C1670 * C2604 + C1675 * C2599 + C2621 + C2621 +
                C1669 * C2605) *
                   C84257 * C84558 +
               (C2639 + C2638 + C2637) * C84257 * C84581 +
               (C2636 + C2635 + C2634) * C84257 * C84596) *
                  C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84597 +
           (C1675 * C1183 + C3468 + C3468 + C1669 * C1193 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1679 * C1181 + C3466 + C3466 +
            C84550 * C1191) *
               C84583 +
           (C1675 * C4212 + C4225 + C4225 + C1669 * C4220 + C1677 * C4213 +
            C4226 + C4226 + C1670 * C4221 + C1679 * C4214 + C4227 + C4227 +
            C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C1679 * C5113 + C5123 + C5123 + C84550 * C5119 + C1677 * C5114 +
            C5124 + C5124 + C1670 * C5120 + C1675 * C5115 + C5125 + C5125 +
            C1669 * C5121) *
               C84561 +
           (C1679 * C3444 + C3463 + C3463 + C84550 * C3456 + C1677 * C3445 +
            C3464 + C3464 + C1670 * C3457 + C1675 * C3446 + C3465 + C3465 +
            C1669 * C3458) *
               C84583 +
           (C2636 + C2635 + C2634) * C84597) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C84603 * C716 -
          ((C13628 * C2597 + C14447 + C14447 + C84550 * C2603 + C13626 * C2598 +
            C14448 + C14448 + C84574 * C2604 + C13624 * C2599 + C14449 +
            C14449 + C84590 * C2605) *
               C84257 * C84558 +
           (C14467 + C14466 + C14465) * C84257 * C13622 +
           (C14464 + C14463 + C14462) * C84257 * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C84603 * C716 -
          ((C15866 * C16304 + C16316 + C16316 + C84188 * C16306) * C84257 *
               C15865 +
           C16332 * C15864 + C16331 * C15863 + C16330 * C15862 +
           C16329 * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84597 +
            (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84583 +
            (C15866 * C4212 + C17261 + C17261 + C84188 * C4220) * C84561) *
               C13621 +
           (C17971 + C17994 + C17995) * C13622 +
           (C17976 + C17996 + C17997) * C84558) *
              C84603 * C716 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84561 +
            (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84583 +
            C16327 * C84597) *
               C84558 +
           (C17997 + C17996 + C17976) * C13622 +
           (C17995 + C17994 + C17971) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C26458 +
           (C13624 * C1183 + C15217 + C15217 + C84590 * C1193 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13628 * C1181 + C15215 +
            C15215 + C84550 * C1191) *
               C26459 +
           (C13624 * C4212 + C26462 + C26462 + C84590 * C4220 + C13626 * C4213 +
            C26463 + C26463 + C84574 * C4221 + C13628 * C4214 + C26464 +
            C26464 + C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C13628 * C5113 + C27251 + C27251 + C84550 * C5119 + C13626 * C5114 +
            C27252 + C27252 + C84574 * C5120 + C13624 * C5115 + C27253 +
            C27253 + C84590 * C5121) *
               C84561 +
           (C13628 * C3444 + C15212 + C15212 + C84550 * C3456 + C13626 * C3445 +
            C15213 + C15213 + C84574 * C3457 + C13624 * C3446 + C15214 +
            C15214 + C84590 * C3458) *
               C26459 +
           (C14464 + C14463 + C14462) * C26458) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C26458 +
            C18832 * C26459 + C18833 * C84561) *
               C84596 +
           (C29387 + C29388 + C29389) * C84581 +
           (C29390 + C29391 + C29392) * C84558) *
              C84603 * C716 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84561 +
            C25136 * C26459 + C16327 * C26458) *
               C84558 +
           (C29392 + C29391 + C29390) * C84581 +
           (C29389 + C29388 + C29387) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C30902 +
           C18832 * C30903 + C18833 * C30904 +
           (C15866 * C5838 + C18827 + C18827 + C84188 * C5844) * C30905 +
           (C15866 * C30907 + C30914 + C30914 + C84188 * C30911) * C30906) *
              C84246 * C84603 * C716 -
          ((C15866 * C31336 + C31340 + C31340 + C84188 * C31338) * C30906 +
           (C15866 * C18815 + C18826 + C18826 + C84188 * C18819) * C30905 +
           C17991 * C30904 + C17990 * C30903 + C16325 * C30902) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C172 * C102 + C84246 * C173) * C93 +
               (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
               C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
               C209 * C85) *
                  C84257 * C84603 * C716 -
              ((C172 * C724 + C84246 * C786) * C85 +
               (C172 * C719 + C84246 * C781) * C101 +
               (C172 * C725 + C84246 * C787) * C84 +
               (C172 * C720 + C84246 * C782) * C99 +
               (C172 * C726 + C84246 * C788) * C83 +
               (C172 * C721 + C84246 * C783) * C97 +
               (C172 * C727 + C84246 * C789) * C82 +
               (C172 * C722 + C84246 * C784) * C95 +
               (C172 * C728 + C84246 * C790) * C81 +
               (C172 * C723 + C84246 * C785) * C93) *
                  C84257 * C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
                C1787 * C1681 + C84558 * C1788) *
                   C1676 +
               (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
                C1787 * C1685 + C84558 * C1792) *
                   C1669 +
               (C1821 + C1822 + C1823) * C1678 +
               (C1824 + C1825 + C1826) * C1670 +
               (C1827 + C1828 + C1829) * C1680 +
               (C1830 + C1831 + C1832) * C84550) *
                  C84257 * C84603 * C716 -
              ((C1787 * C2600 + C84558 * C2716 + C1786 * C1687 +
                C84581 * C1794 + C1785 * C726 + C84596 * C788) *
                   C84550 +
               (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 +
                C84581 * C1790 + C1785 * C721 + C84596 * C783) *
                   C1680 +
               (C1787 * C2601 + C84558 * C2717 + C1786 * C1686 +
                C84581 * C1793 + C1785 * C727 + C84596 * C789) *
                   C1670 +
               (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 +
                C84581 * C1789 + C1785 * C722 + C84596 * C784) *
                   C1678 +
               (C1787 * C2602 + C84558 * C2718 + C1786 * C1685 +
                C84581 * C1792 + C1785 * C728 + C84596 * C790) *
                   C1669 +
               (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 +
                C84581 * C1788 + C1785 * C723 + C84596 * C785) *
                   C1676) *
                  C84257 * C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C1676 +
            (C172 * C108 + C84246 * C179) * C1669 + C202 * C1678 +
            C203 * C1670 + C204 * C1680 + C205 * C84550) *
               C84597 +
           ((C172 * C1183 + C84246 * C1245) * C1676 +
            (C172 * C1188 + C84246 * C1250) * C1669 + C4332 * C1678 +
            C4333 * C1670 + C4334 * C1680 + C4335 * C84550) *
               C84583 +
           ((C172 * C4212 + C84246 * C4307) * C1676 +
            (C172 * C4216 + C84246 * C4311) * C1669 + C4336 * C1678 +
            C4337 * C1670 + C4338 * C1680 + C4339 * C84550) *
               C84561) *
              C84603 * C716 -
          (((C172 * C5116 + C84246 * C5202) * C84550 +
            (C172 * C5113 + C84246 * C5199) * C1680 +
            (C172 * C5117 + C84246 * C5203) * C1670 +
            (C172 * C5114 + C84246 * C5200) * C1678 +
            (C172 * C5118 + C84246 * C5204) * C1669 +
            (C172 * C5115 + C84246 * C5201) * C1676) *
               C84561 +
           ((C172 * C3450 + C84246 * C3549) * C84550 +
            (C172 * C3444 + C84246 * C3543) * C1680 +
            (C172 * C3451 + C84246 * C3551) * C1670 +
            (C172 * C3445 + C84246 * C3545) * C1678 +
            (C172 * C3452 + C84246 * C3553) * C1669 +
            (C172 * C3446 + C84246 * C3547) * C1676) *
               C84583 +
           ((C172 * C726 + C84246 * C788) * C84550 +
            (C172 * C721 + C84246 * C783) * C1680 +
            (C172 * C727 + C84246 * C789) * C1670 +
            (C172 * C722 + C84246 * C784) * C1678 +
            (C172 * C728 + C84246 * C790) * C1669 +
            (C172 * C723 + C84246 * C785) * C1676) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C716 -
          ((C13724 * C2600 + C84558 * C2716 + C13723 * C1687 + C13622 * C1794 +
            C13722 * C726 + C13621 * C788) *
               C84550 +
           (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
            C13722 * C721 + C13621 * C783) *
               C13629 +
           (C13724 * C2601 + C84558 * C2717 + C13723 * C1686 + C13622 * C1793 +
            C13722 * C727 + C13621 * C789) *
               C84574 +
           (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
            C13722 * C722 + C13621 * C784) *
               C13627 +
           (C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
            C13722 * C728 + C13621 * C790) *
               C84590 +
           (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
            C13722 * C723 + C13621 * C785) *
               C13625) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C716 -
          ((C15930 * C16305 + C15865 * C16375 + C15929 * C15870 +
            C15864 * C15933 + C15928 * C2602 + C15863 * C2718 + C15927 * C1685 +
            C15862 * C1792 + C15926 * C728 + C15861 * C790) *
               C84188 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C15867) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C15867 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84188) *
               C84597 +
           ((C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
             C13724 * C3443 + C84558 * C3546) *
                C15867 +
            (C13722 * C1188 + C13621 * C1250 + C13723 * C3452 + C13622 * C3553 +
             C13724 * C3449 + C84558 * C3552) *
                C84188) *
               C84583 +
           ((C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
             C13724 * C17254 + C84558 * C17343) *
                C15867 +
            (C13722 * C4216 + C13621 * C4311 + C13723 * C5118 + C13622 * C5204 +
             C13724 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C716 -
          (((C13724 * C17968 + C84558 * C18072 + C13723 * C17256 +
             C13622 * C17345 + C13722 * C5118 + C13621 * C5204) *
                C84188 +
            (C13724 * C17967 + C84558 * C18071 + C13723 * C17254 +
             C13622 * C17343 + C13722 * C5115 + C13621 * C5201) *
                C15867) *
               C84561 +
           ((C13724 * C16809 + C84558 * C16862 + C13723 * C3449 +
             C13622 * C3552 + C13722 * C3452 + C13621 * C3553) *
                C84188 +
            (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
             C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
                C15867) *
               C84583 +
           ((C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
             C13722 * C728 + C13621 * C790) *
                C84188 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C15867) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C13625 +
            (C172 * C108 + C84246 * C179) * C84590 + C202 * C13627 +
            C203 * C84574 + C204 * C13629 + C205 * C84550) *
               C26458 +
           (C5975 * C13625 + C5976 * C84590 + C4332 * C13627 + C4333 * C84574 +
            C4334 * C13629 + C4335 * C84550) *
               C26459 +
           (C5977 * C13625 + C5978 * C84590 + C4336 * C13627 + C4337 * C84574 +
            C4338 * C13629 + C4339 * C84550) *
               C84561) *
              C84603 * C716 -
          (((C172 * C5116 + C84246 * C5202) * C84550 +
            (C172 * C5113 + C84246 * C5199) * C13629 +
            (C172 * C5117 + C84246 * C5203) * C84574 +
            (C172 * C5114 + C84246 * C5200) * C13627 +
            (C172 * C5118 + C84246 * C5204) * C84590 +
            (C172 * C5115 + C84246 * C5201) * C13625) *
               C84561 +
           ((C172 * C3450 + C84246 * C3549) * C84550 +
            (C172 * C3444 + C84246 * C3543) * C13629 +
            (C172 * C3451 + C84246 * C3551) * C84574 +
            (C172 * C3445 + C84246 * C3545) * C13627 +
            (C172 * C3452 + C84246 * C3553) * C84590 +
            (C172 * C3446 + C84246 * C3547) * C13625) *
               C26459 +
           ((C172 * C726 + C84246 * C788) * C84550 +
            (C172 * C721 + C84246 * C783) * C13629 +
            (C172 * C727 + C84246 * C789) * C84574 +
            (C172 * C722 + C84246 * C784) * C13627 +
            (C172 * C728 + C84246 * C790) * C84590 +
            (C172 * C723 + C84246 * C785) * C13625) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C15867 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C84188) *
               C26458 +
           ((C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
             C1787 * C3443 + C84558 * C3546) *
                C15867 +
            (C1785 * C1188 + C84596 * C1250 + C1786 * C3452 + C84581 * C3553 +
             C1787 * C3449 + C84558 * C3552) *
                C84188) *
               C26459 +
           ((C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
             C1787 * C17254 + C84558 * C17343) *
                C15867 +
            (C1785 * C4216 + C84596 * C4311 + C1786 * C5118 + C84581 * C5204 +
             C1787 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C716 -
          (((C1787 * C17968 + C84558 * C18072 + C1786 * C17256 +
             C84581 * C17345 + C1785 * C5118 + C84596 * C5204) *
                C84188 +
            (C1787 * C17967 + C84558 * C18071 + C1786 * C17254 +
             C84581 * C17343 + C1785 * C5115 + C84596 * C5201) *
                C15867) *
               C84561 +
           ((C1787 * C16809 + C84558 * C16862 + C1786 * C3449 + C84581 * C3552 +
             C1785 * C3452 + C84596 * C3553) *
                C84188 +
            (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 + C84581 * C3546 +
             C1785 * C3446 + C84596 * C3547) *
                C15867) *
               C26459 +
           ((C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
             C1785 * C728 + C84596 * C790) *
                C84188 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C15867) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C15867 +
            (C172 * C108 + C84246 * C179) * C84188) *
               C30902 +
           (C5975 * C15867 + C5976 * C84188) * C30903 +
           (C5977 * C15867 + C5978 * C84188) * C30904 +
           ((C172 * C5838 + C84246 * C5954) * C15867 +
            (C172 * C5841 + C84246 * C5957) * C84188) *
               C30905 +
           ((C172 * C30907 + C84246 * C30958) * C15867 +
            (C172 * C30909 + C84246 * C30960) * C84188) *
               C30906) *
              C84603 * C716 -
          (((C172 * C31337 + C84246 * C31383) * C84188 +
            (C172 * C31336 + C84246 * C31382) * C15867) *
               C30906 +
           ((C172 * C18817 + C84246 * C18910) * C84188 +
            (C172 * C18815 + C84246 * C18908) * C15867) *
               C30905 +
           ((C172 * C5118 + C84246 * C5204) * C84188 +
            (C172 * C5115 + C84246 * C5201) * C15867) *
               C30904 +
           ((C172 * C3452 + C84246 * C3553) * C84188 +
            (C172 * C3446 + C84246 * C3547) * C15867) *
               C30903 +
           ((C172 * C728 + C84246 * C790) * C84188 +
            (C172 * C723 + C84246 * C785) * C15867) *
               C30902) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C251 * C102 + C84257 * C252) * C93 +
               (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
               C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
               C288 * C85) *
                  C84246 * C84603 * C716 -
              ((C251 * C724 + C84257 * C838) * C85 +
               (C251 * C719 + C84257 * C833) * C101 +
               (C251 * C725 + C84257 * C839) * C84 +
               (C251 * C720 + C84257 * C834) * C99 +
               (C251 * C726 + C84257 * C840) * C83 +
               (C251 * C721 + C84257 * C835) * C97 +
               (C251 * C727 + C84257 * C841) * C82 +
               (C251 * C722 + C84257 * C836) * C95 +
               (C251 * C728 + C84257 * C842) * C81 +
               (C251 * C723 + C84257 * C837) * C93) *
                  C84246 * C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C1676 +
                (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
                C282 * C1670 + C283 * C1680 + C284 * C84550) *
                   C84596 +
               (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
               (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
                  C84603 * C716 -
              (((C251 * C2600 + C84257 * C2796) * C84550 +
                (C251 * C2597 + C84257 * C2793) * C1680 +
                (C251 * C2601 + C84257 * C2797) * C1670 +
                (C251 * C2598 + C84257 * C2794) * C1678 +
                (C251 * C2602 + C84257 * C2798) * C1669 +
                (C251 * C2599 + C84257 * C2795) * C1676) *
                   C84558 +
               (C2815 + C2814 + C2813 + C2812 + C2823 + C2822) * C84581 +
               (C2807 + C2806 + C2805 + C2804 + C2821 + C2820) * C84596) *
                  C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C1676 +
           (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
            C4415 * C4216 + C84561 * C4420) *
               C1669 +
           (C4449 + C4450 + C4451) * C1678 + (C4452 + C4453 + C4454) * C1670 +
           (C4455 + C4456 + C4457) * C1680 + (C4458 + C4459 + C4460) * C84550) *
              C84246 * C84603 * C716 -
          ((C4415 * C5116 + C84561 * C5282 + C4414 * C3450 + C84583 * C3637 +
            C4413 * C726 + C84597 * C840) *
               C84550 +
           (C4415 * C5113 + C84561 * C5279 + C4414 * C3444 + C84583 * C3631 +
            C4413 * C721 + C84597 * C835) *
               C1680 +
           (C4415 * C5117 + C84561 * C5283 + C4414 * C3451 + C84583 * C3638 +
            C4413 * C727 + C84597 * C841) *
               C1670 +
           (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
            C4413 * C722 + C84597 * C836) *
               C1678 +
           (C4415 * C5118 + C84561 * C5284 + C4414 * C3452 + C84583 * C3639 +
            C4413 * C728 + C84597 * C842) *
               C1669 +
           (C4415 * C5115 + C84561 * C5281 + C4414 * C3446 + C84583 * C3633 +
            C4413 * C723 + C84597 * C837) *
               C1676) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C13629 +
            (C251 * C2601 + C84257 * C2797) * C84574 +
            (C251 * C2598 + C84257 * C2794) * C13627 +
            (C251 * C2602 + C84257 * C2798) * C84590 +
            (C251 * C2599 + C84257 * C2795) * C13625) *
               C84558 +
           (C14627 + C14626 + C14625 + C14624 + C14623 + C14622) * C13622 +
           (C14621 + C14620 + C14619 + C14618 + C14617 + C14616) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C84603 * C716 -
          (((C251 * C16305 + C84257 * C16419) * C84188 +
            (C251 * C16304 + C84257 * C16418) * C15867) *
               C15865 +
           (C16440 + C16439) * C15864 + (C16438 + C16437) * C15863 +
           (C16424 + C16423) * C15862 + (C16422 + C16421) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C15867 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C84188) *
               C13621 +
           ((C18174 + C18175 + C18176) * C15867 +
            (C18177 + C18178 + C18179) * C84188) *
               C13622 +
           ((C18180 + C18181 + C18182) * C15867 +
            (C18183 + C18184 + C18185) * C84188) *
               C84558) *
              C84603 * C716 -
          (((C4415 * C17968 + C84561 * C18148 + C4414 * C16809 +
             C84583 * C16908 + C4413 * C2602 + C84597 * C2798) *
                C84188 +
            (C4415 * C17967 + C84561 * C18147 + C4414 * C16807 +
             C84583 * C16906 + C4413 * C2599 + C84597 * C2795) *
                C15867) *
               C84558 +
           ((C18185 + C18184 + C18183) * C84188 +
            (C18182 + C18181 + C18180) * C15867) *
               C13622 +
           ((C18179 + C18178 + C18177) * C84188 +
            (C18176 + C18175 + C18174) * C15867) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C13625 +
           (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
            C26620 * C4216 + C84561 * C4420) *
               C84590 +
           (C26646 + C26647 + C26648) * C13627 +
           (C26649 + C26650 + C26651) * C84574 +
           (C26652 + C26653 + C26654) * C13629 +
           (C26655 + C26656 + C26657) * C84550) *
              C84246 * C84603 * C716 -
          ((C26620 * C5116 + C84561 * C5282 + C26619 * C3450 + C26459 * C3637 +
            C26618 * C726 + C26458 * C840) *
               C84550 +
           (C26620 * C5113 + C84561 * C5279 + C26619 * C3444 + C26459 * C3631 +
            C26618 * C721 + C26458 * C835) *
               C13629 +
           (C26620 * C5117 + C84561 * C5283 + C26619 * C3451 + C26459 * C3638 +
            C26618 * C727 + C26458 * C841) *
               C84574 +
           (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
            C26618 * C722 + C26458 * C836) *
               C13627 +
           (C26620 * C5118 + C84561 * C5284 + C26619 * C3452 + C26459 * C3639 +
            C26618 * C728 + C26458 * C842) *
               C84590 +
           (C26620 * C5115 + C84561 * C5281 + C26619 * C3446 + C26459 * C3633 +
            C26618 * C723 + C26458 * C837) *
               C13625) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C15867 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84188) *
               C84596 +
           ((C29565 + C29566 + C29567) * C15867 +
            (C29568 + C29569 + C29570) * C84188) *
               C84581 +
           ((C29571 + C29572 + C29573) * C15867 +
            (C29574 + C29575 + C29576) * C84188) *
               C84558) *
              C84603 * C716 -
          (((C26620 * C17968 + C84561 * C18148 + C26619 * C16809 +
             C26459 * C16908 + C26618 * C2602 + C26458 * C2798) *
                C84188 +
            (C26620 * C17967 + C84561 * C18147 + C26619 * C16807 +
             C26459 * C16906 + C26618 * C2599 + C26458 * C2795) *
                C15867) *
               C84558 +
           ((C29576 + C29575 + C29574) * C84188 +
            (C29573 + C29572 + C29571) * C15867) *
               C84581 +
           ((C29570 + C29569 + C29568) * C84188 +
            (C29567 + C29566 + C29565) * C15867) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31004 * C102 + C30902 * C252 + C31005 * C1183 + C30903 * C1297 +
            C31006 * C4212 + C30904 * C4416 + C31007 * C5838 + C30905 * C6058 +
            C31008 * C30907 + C30906 * C31009) *
               C15867 +
           (C31004 * C108 + C30902 * C258 + C31005 * C1188 + C30903 * C1302 +
            C31006 * C4216 + C30904 * C4420 + C31007 * C5841 + C30905 * C6061 +
            C31008 * C30909 + C30906 * C31011) *
               C84188) *
              C84246 * C84603 * C716 -
          ((C31008 * C31337 + C30906 * C31427 + C31007 * C18817 +
            C30905 * C19024 + C31006 * C5118 + C30904 * C5284 + C31005 * C3452 +
            C30903 * C3639 + C31004 * C728 + C30902 * C842) *
               C84188 +
           (C31008 * C31336 + C30906 * C31426 + C31007 * C18815 +
            C30905 * C19022 + C31006 * C5115 + C30904 * C5281 + C31005 * C3446 +
            C30903 * C3633 + C31004 * C723 + C30902 * C837) *
               C15867) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
                C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 +
                C85 * C112) *
                   C172 +
               (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
                C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 +
                C85 * C334) *
                   C84246) *
                  C84257 * C84603 * C716 -
              ((C101 * C781 + C85 * C885 + C99 * C782 + C84 * C886 +
                C97 * C783 + C83 * C887 + C95 * C784 + C82 * C888 + C93 * C785 +
                C81 * C889) *
                   C84246 +
               (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 +
                C97 * C721 + C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 +
                C81 * C728) *
                   C172) *
                  C84257 * C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
                C1680 * C104 + C84550 * C110) *
                   C1785 +
               (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
                C1680 * C175 + C84550 * C332) *
                   C84596 +
               (C2925 + C2926 + C2927) * C1786 +
               (C2928 + C2929 + C2930) * C84581 +
               (C2931 + C2932 + C2933) * C1787 +
               (C2934 + C2935 + C2936) * C84558) *
                  C84257 * C84603 * C716 -
              ((C1680 * C2713 + C84550 * C2897 + C1678 * C2714 + C1670 * C2898 +
                C1676 * C2715 + C1669 * C2899) *
                   C84558 +
               (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
                C1676 * C2599 + C1669 * C2602) *
                   C1787 +
               (C2936 + C2935 + C2934) * C84581 +
               (C2933 + C2932 + C2931) * C1786 +
               (C2930 + C2929 + C2928) * C84596 +
               (C2927 + C2926 + C2925) * C1785) *
                  C84257 * C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C172 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84246) *
               C84597 +
           ((C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
             C1680 * C1181 + C84550 * C1186) *
                C172 +
            (C1676 * C1245 + C1669 * C1349 + C1678 * C1244 + C1670 * C1348 +
             C1680 * C1243 + C84550 * C1347) *
                C84246) *
               C84583 +
           ((C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
             C1680 * C4214 + C84550 * C4218) *
                C172 +
            (C1676 * C4307 + C1669 * C4534 + C1678 * C4308 + C1670 * C4535 +
             C1680 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C716 -
          (((C1680 * C5199 + C84550 * C5359 + C1678 * C5200 + C1670 * C5360 +
             C1676 * C5201 + C1669 * C5361) *
                C84246 +
            (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
             C1676 * C5115 + C1669 * C5118) *
                C172) *
               C84561 +
           ((C1680 * C3543 + C84550 * C3717 + C1678 * C3545 + C1670 * C3718 +
             C1676 * C3547 + C1669 * C3719) *
                C84246 +
            (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
             C1676 * C3446 + C1669 * C3452) *
                C172) *
               C84583 +
           ((C2930 + C2929 + C2928) * C84246 + (C2927 + C2926 + C2925) * C172) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C84603 * C716 -
          ((C13629 * C2713 + C84550 * C2897 + C13627 * C2714 + C84574 * C2898 +
            C13625 * C2715 + C84590 * C2899) *
               C84558 +
           (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
            C13625 * C2599 + C84590 * C2602) *
               C13724 +
           (C14737 + C14736 + C14735) * C13622 +
           (C14734 + C14733 + C14732) * C13723 +
           (C14731 + C14730 + C14729) * C13621 +
           (C14728 + C14727 + C14726) * C13722) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C84603 * C716 -
          ((C15867 * C16374 + C84188 * C16482) * C15865 +
           (C15867 * C16304 + C84188 * C16305) * C15930 + C16507 * C15864 +
           C16506 * C15929 + C16505 * C15863 + C16504 * C15928 +
           C16503 * C15862 + C16502 * C15927 + C16501 * C15861 +
           C16500 * C15926) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C13722 +
            (C15867 * C173 + C84188 * C330) * C13621 + C16500 * C13723 +
            C16501 * C13622 + C16502 * C13724 + C16503 * C84558) *
               C84597 +
           ((C15867 * C1183 + C84188 * C1188) * C13722 +
            (C15867 * C1245 + C84188 * C1349) * C13621 + C18277 * C13723 +
            C18278 * C13622 + C18279 * C13724 + C18280 * C84558) *
               C84583 +
           ((C15867 * C4212 + C84188 * C4216) * C13722 +
            (C15867 * C4307 + C84188 * C4534) * C13621 + C18281 * C13723 +
            C18282 * C13622 + C18283 * C13724 + C18284 * C84558) *
               C84561) *
              C84603 * C716 -
          (((C15867 * C18071 + C84188 * C18259) * C84558 +
            (C15867 * C17967 + C84188 * C17968) * C13724 + C18284 * C13622 +
            C18283 * C13723 + C18282 * C13621 + C18281 * C13722) *
               C84561 +
           ((C15867 * C16860 + C84188 * C16952) * C84558 +
            (C15867 * C16807 + C84188 * C16809) * C13724 + C18280 * C13622 +
            C18279 * C13723 + C18278 * C13621 + C18277 * C13722) *
               C84583 +
           (C16505 * C84558 + C16504 * C13724 + C16503 * C13622 +
            C16502 * C13723 + C16501 * C13621 + C16500 * C13722) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C172 +
            (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
             C13629 * C175 + C84550 * C332) *
                C84246) *
               C26458 +
           ((C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
             C13629 * C1181 + C84550 * C1186) *
                C172 +
            (C13625 * C1245 + C84590 * C1349 + C13627 * C1244 + C84574 * C1348 +
             C13629 * C1243 + C84550 * C1347) *
                C84246) *
               C26459 +
           ((C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
             C13629 * C4214 + C84550 * C4218) *
                C172 +
            (C13625 * C4307 + C84590 * C4534 + C13627 * C4308 + C84574 * C4535 +
             C13629 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C716 -
          (((C13629 * C5199 + C84550 * C5359 + C13627 * C5200 + C84574 * C5360 +
             C13625 * C5201 + C84590 * C5361) *
                C84246 +
            (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 + C84574 * C5117 +
             C13625 * C5115 + C84590 * C5118) *
                C172) *
               C84561 +
           ((C13629 * C3543 + C84550 * C3717 + C13627 * C3545 + C84574 * C3718 +
             C13625 * C3547 + C84590 * C3719) *
                C84246 +
            (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
             C13625 * C3446 + C84590 * C3452) *
                C172) *
               C26459 +
           ((C14731 + C14730 + C14729) * C84246 +
            (C14728 + C14727 + C14726) * C172) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C1785 +
            (C15867 * C173 + C84188 * C330) * C84596 + C16500 * C1786 +
            C16501 * C84581 + C16502 * C1787 + C16503 * C84558) *
               C26458 +
           (C19118 * C1785 + C19119 * C84596 + C18277 * C1786 +
            C18278 * C84581 + C18279 * C1787 + C18280 * C84558) *
               C26459 +
           (C19120 * C1785 + C19121 * C84596 + C18281 * C1786 +
            C18282 * C84581 + C18283 * C1787 + C18284 * C84558) *
               C84561) *
              C84603 * C716 -
          (((C15867 * C18071 + C84188 * C18259) * C84558 +
            (C15867 * C17967 + C84188 * C17968) * C1787 + C18284 * C84581 +
            C18283 * C1786 + C18282 * C84596 + C18281 * C1785) *
               C84561 +
           (C25353 * C84558 + C25352 * C1787 + C18280 * C84581 +
            C18279 * C1786 + C18278 * C84596 + C18277 * C1785) *
               C26459 +
           (C16505 * C84558 + C16504 * C1787 + C16503 * C84581 +
            C16502 * C1786 + C16501 * C84596 + C16500 * C1785) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C172 +
            (C15867 * C173 + C84188 * C330) * C84246) *
               C30902 +
           (C19118 * C172 + C19119 * C84246) * C30903 +
           (C19120 * C172 + C19121 * C84246) * C30904 +
           ((C15867 * C5838 + C84188 * C5841) * C172 +
            (C15867 * C5954 + C84188 * C6138) * C84246) *
               C30905 +
           ((C15867 * C30907 + C84188 * C30909) * C172 +
            (C15867 * C30958 + C84188 * C31055) * C84246) *
               C30906) *
              C84603 * C716 -
          (((C15867 * C31382 + C84188 * C31470) * C84246 +
            (C15867 * C31336 + C84188 * C31337) * C172) *
               C30906 +
           ((C15867 * C18908 + C84188 * C19100) * C84246 +
            (C15867 * C18815 + C84188 * C18817) * C172) *
               C30905 +
           (C18282 * C84246 + C18281 * C172) * C30904 +
           (C18278 * C84246 + C18277 * C172) * C30903 +
           (C16501 * C84246 + C16500 * C172) * C30902) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
               C409 * C83 + C410 * C84 + C411 * C85) *
                  C84257 * C84603 * C716 -
              ((C378 * C719 + C938 + C938 + C84246 * C932) * C85 +
               (C378 * C720 + C939 + C939 + C84246 * C933) * C84 +
               (C378 * C721 + C940 + C940 + C84246 * C934) * C83 +
               (C378 * C722 + C941 + C941 + C84246 * C935) * C82 +
               (C378 * C723 + C942 + C942 + C84246 * C936) * C81) *
                  C84257 * C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
                C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
                C84558 * C2093) *
                   C1669 +
               (C2134 + C2135 + C2136) * C1670 +
               (C2137 + C2138 + C2139) * C84550) *
                  C84257 * C84603 * C716 -
              ((C2092 * C2597 + C3014 + C3014 + C84558 * C3010 + C2091 * C1683 +
                C3015 + C3015 + C84581 * C2095 + C2090 * C721 + C3016 + C3016 +
                C84596 * C934) *
                   C84550 +
               (C2092 * C2598 + C3017 + C3017 + C84558 * C3011 + C2091 * C1682 +
                C3018 + C3018 + C84581 * C2094 + C2090 * C722 + C3019 + C3019 +
                C84596 * C935) *
                   C1670 +
               (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
                C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
                C84596 * C936) *
                   C1669) *
                  C84257 * C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C1669 + C408 * C1670 +
            C409 * C84550) *
               C84597 +
           ((C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C1669 +
            C4637 * C1670 + C4638 * C84550) *
               C84583 +
           ((C378 * C4212 + C4621 + C4621 + C84246 * C4612) * C1669 +
            C4639 * C1670 + C4640 * C84550) *
               C84561) *
              C84603 * C716 -
          (((C378 * C5113 + C5440 + C5440 + C84246 * C5436) * C84550 +
            (C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C1670 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C1669) *
               C84561 +
           ((C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C84550 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C1670 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C1669) *
               C84583 +
           ((C378 * C721 + C940 + C940 + C84246 * C934) * C84550 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C1670 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C1669) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C716 -
          ((C13985 * C2597 + C14812 + C14812 + C84558 * C3010 + C13984 * C1683 +
            C14813 + C14813 + C13622 * C2095 + C13983 * C721 + C14814 + C14814 +
            C13621 * C934) *
               C84550 +
           (C13985 * C2598 + C14815 + C14815 + C84558 * C3011 + C13984 * C1682 +
            C14816 + C14816 + C13622 * C2094 + C13983 * C722 + C14817 + C14817 +
            C13621 * C935) *
               C84574 +
           (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 + C13984 * C1681 +
            C14819 + C14819 + C13622 * C2093 + C13983 * C723 + C14820 + C14820 +
            C13621 * C936) *
               C84590) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C716 -
          (C16071 * C16304 + C16551 + C16551 + C15865 * C16549 +
           C16070 * C15868 + C16552 + C16552 + C15864 * C16072 +
           C16069 * C2599 + C16553 + C16553 + C15863 * C3012 + C16068 * C1681 +
           C16554 + C16554 + C15862 * C2093 + C16067 * C723 + C16555 + C16555 +
           C15861 * C936) *
              C84188 * C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84188 * C84597 +
           (C13983 * C1183 + C15522 + C15522 + C13621 * C1396 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13985 * C3443 + C15520 +
            C15520 + C84558 * C3798) *
               C84188 * C84583 +
           (C13983 * C4212 + C17578 + C17578 + C13621 * C4612 + C13984 * C5115 +
            C17579 + C17579 + C13622 * C5438 + C13985 * C17254 + C17580 +
            C17580 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C716 -
          ((C13985 * C17967 + C18360 + C18360 + C84558 * C18358 +
            C13984 * C17254 + C18361 + C18361 + C13622 * C17575 +
            C13983 * C5115 + C18362 + C18362 + C13621 * C5438) *
               C84188 * C84561 +
           (C13985 * C16807 + C18363 + C18363 + C84558 * C16996 +
            C13984 * C3443 + C18364 + C18364 + C13622 * C3798 + C13983 * C3446 +
            C18365 + C18365 + C13621 * C3799) *
               C84188 * C84583 +
           (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 + C13984 * C1681 +
            C14819 + C14819 + C13622 * C2093 + C13983 * C723 + C14820 + C14820 +
            C13621 * C936) *
               C84188 * C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84590 +
            C408 * C84574 + C409 * C84550) *
               C26458 +
           (C6268 * C84590 + C4637 * C84574 + C4638 * C84550) * C26459 +
           (C6269 * C84590 + C4639 * C84574 + C4640 * C84550) * C84561) *
              C84603 * C716 -
          (((C378 * C5113 + C5440 + C5440 + C84246 * C5436) * C84550 +
            (C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C84574 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C84590) *
               C84561 +
           ((C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C84550 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84574 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84590) *
               C26459 +
           ((C378 * C721 + C940 + C940 + C84246 * C934) * C84550 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C84574 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C84590) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C84188 * C26458 +
           (C2090 * C1183 + C3809 + C3809 + C84596 * C1396 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2092 * C3443 + C3807 + C3807 +
            C84558 * C3798) *
               C84188 * C26459 +
           (C2090 * C4212 + C29005 + C29005 + C84596 * C4612 + C2091 * C5115 +
            C29006 + C29006 + C84581 * C5438 + C2092 * C17254 + C29007 +
            C29007 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C716 -
          ((C2092 * C17967 + C29725 + C29725 + C84558 * C18358 +
            C2091 * C17254 + C29726 + C29726 + C84581 * C17575 + C2090 * C5115 +
            C29727 + C29727 + C84596 * C5438) *
               C84188 * C84561 +
           (C2092 * C16807 + C29728 + C29728 + C84558 * C16996 + C2091 * C3443 +
            C29729 + C29729 + C84581 * C3798 + C2090 * C3446 + C29730 + C29730 +
            C84596 * C3799) *
               C84188 * C26459 +
           (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
            C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
            C84596 * C936) *
               C84188 * C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C84188 * C30902 +
           C6268 * C84188 * C30903 + C6269 * C84188 * C30904 +
           (C378 * C5838 + C6263 + C6263 + C84246 * C6251) * C84188 * C30905 +
           (C378 * C30907 + C31102 + C31102 + C84246 * C31099) * C84188 *
               C30906) *
              C84603 * C716 -
          ((C378 * C31336 + C31515 + C31515 + C84246 * C31513) * C84188 *
               C30906 +
           (C378 * C18815 + C31516 + C31516 + C84246 * C19200) * C84188 *
               C30905 +
           (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C84188 * C30904 +
           (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84188 * C30903 +
           (C378 * C723 + C942 + C942 + C84246 * C936) * C84188 * C30902) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C172 +
                (C251 * C173 + C84257 * C453) * C84246) *
                   C81 +
               (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
               (C469 + C479) * C85) *
                  C84603 * C716 -
              (((C251 * C781 + C84257 * C984) * C84246 +
                (C251 * C719 + C84257 * C833) * C172) *
                   C85 +
               ((C251 * C782 + C84257 * C985) * C84246 +
                (C251 * C720 + C84257 * C834) * C172) *
                   C84 +
               ((C251 * C783 + C84257 * C986) * C84246 +
                (C251 * C721 + C84257 * C835) * C172) *
                   C83 +
               ((C251 * C784 + C84257 * C987) * C84246 +
                (C251 * C722 + C84257 * C836) * C172) *
                   C82 +
               ((C251 * C785 + C84257 * C988) * C84246 +
                (C251 * C723 + C84257 * C837) * C172) *
                   C81) *
                  C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C1785 +
                (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
                C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
                   C1669 +
               (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
               (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
                  C84603 * C716 -
              (((C251 * C2713 + C84257 * C3096) * C84558 +
                (C251 * C2597 + C84257 * C2793) * C1787 + C2237 * C84581 +
                C1937 * C1786 + C2236 * C84596 + C1933 * C1785) *
                   C84550 +
               ((C251 * C2714 + C84257 * C3097) * C84558 +
                (C251 * C2598 + C84257 * C2794) * C1787 + C2235 * C84581 +
                C1935 * C1786 + C2234 * C84596 + C1931 * C1785) *
                   C1670 +
               ((C251 * C2715 + C84257 * C3098) * C84558 +
                (C251 * C2599 + C84257 * C2795) * C1787 + C3105 * C84581 +
                C2818 * C1786 + C3104 * C84596 + C2816 * C1785) *
                   C1669) *
                  C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C172 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C84246) *
               C1669 +
           ((C4449 + C4450 + C4451) * C172 + (C4731 + C4732 + C4733) * C84246) *
               C1670 +
           ((C4455 + C4456 + C4457) * C172 + (C4734 + C4735 + C4736) * C84246) *
               C84550) *
              C84603 * C716 -
          (((C4415 * C5199 + C84561 * C5519 + C4414 * C3543 + C84583 * C3884 +
             C4413 * C783 + C84597 * C986) *
                C84246 +
            (C4415 * C5113 + C84561 * C5279 + C4414 * C3444 + C84583 * C3631 +
             C4413 * C721 + C84597 * C835) *
                C172) *
               C84550 +
           ((C4415 * C5200 + C84561 * C5520 + C4414 * C3545 + C84583 * C3886 +
             C4413 * C784 + C84597 * C987) *
                C84246 +
            (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
             C4413 * C722 + C84597 * C836) *
                C172) *
               C1670 +
           ((C4415 * C5201 + C84561 * C5521 + C4414 * C3547 + C84583 * C3888 +
             C4413 * C785 + C84597 * C988) *
                C84246 +
            (C4415 * C5115 + C84561 * C5281 + C4414 * C3446 + C84583 * C3633 +
             C4413 * C723 + C84597 * C837) *
                C172) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C13724 + C2237 * C13622 +
            C1937 * C13723 + C2236 * C13621 + C1933 * C13722) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C13724 + C2235 * C13622 +
            C1935 * C13723 + C2234 * C13621 + C1931 * C13722) *
               C84574 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C13724 + C3105 * C13622 +
            C2818 * C13723 + C3104 * C13621 + C2816 * C13722) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C84603 * C716 -
          ((C251 * C16374 + C84257 * C16597) * C15865 +
           (C251 * C16304 + C84257 * C16418) * C15930 + C16604 * C15864 +
           C16435 * C15929 + C16603 * C15863 + C16433 * C15928 +
           C3105 * C15862 + C2818 * C15927 + C3104 * C15861 + C2816 * C15926) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C13722 +
           (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
            C4415 * C4307 + C84561 * C4714) *
               C13621 +
           (C18174 + C18175 + C18176) * C13723 +
           (C18453 + C18454 + C18455) * C13622 +
           (C18180 + C18181 + C18182) * C13724 +
           (C18456 + C18457 + C18458) * C84558) *
              C84188 * C84603 * C716 -
          ((C4415 * C18071 + C84561 * C18439 + C4414 * C16860 +
            C84583 * C17045 + C4413 * C2715 + C84597 * C3098) *
               C84558 +
           (C4415 * C17967 + C84561 * C18147 + C4414 * C16807 +
            C84583 * C16906 + C4413 * C2599 + C84597 * C2795) *
               C13724 +
           (C18458 + C18457 + C18456) * C13622 +
           (C18182 + C18181 + C18180) * C13723 +
           (C18455 + C18454 + C18453) * C13621 +
           (C18176 + C18175 + C18174) * C13722) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C172 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84246) *
               C84590 +
           ((C26646 + C26647 + C26648) * C172 +
            (C26892 + C26893 + C26894) * C84246) *
               C84574 +
           ((C26652 + C26653 + C26654) * C172 +
            (C26895 + C26896 + C26897) * C84246) *
               C84550) *
              C84603 * C716 -
          (((C26620 * C5199 + C84561 * C5519 + C26619 * C3543 + C26459 * C3884 +
             C26618 * C783 + C26458 * C986) *
                C84246 +
            (C26620 * C5113 + C84561 * C5279 + C26619 * C3444 + C26459 * C3631 +
             C26618 * C721 + C26458 * C835) *
                C172) *
               C84550 +
           ((C26620 * C5200 + C84561 * C5520 + C26619 * C3545 + C26459 * C3886 +
             C26618 * C784 + C26458 * C987) *
                C84246 +
            (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
             C26618 * C722 + C26458 * C836) *
                C172) *
               C84574 +
           ((C26620 * C5201 + C84561 * C5521 + C26619 * C3547 + C26459 * C3888 +
             C26618 * C785 + C26458 * C988) *
                C84246 +
            (C26620 * C5115 + C84561 * C5281 + C26619 * C3446 + C26459 * C3633 +
             C26618 * C723 + C26458 * C837) *
                C172) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C1785 +
           (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
            C26620 * C4307 + C84561 * C4714) *
               C84596 +
           (C29565 + C29566 + C29567) * C1786 +
           (C29817 + C29818 + C29819) * C84581 +
           (C29571 + C29572 + C29573) * C1787 +
           (C29820 + C29821 + C29822) * C84558) *
              C84188 * C84603 * C716 -
          ((C26620 * C18071 + C84561 * C18439 + C26619 * C16860 +
            C26459 * C17045 + C26618 * C2715 + C26458 * C3098) *
               C84558 +
           (C26620 * C17967 + C84561 * C18147 + C26619 * C16807 +
            C26459 * C16906 + C26618 * C2599 + C26458 * C2795) *
               C1787 +
           (C29822 + C29821 + C29820) * C84581 +
           (C29573 + C29572 + C29571) * C1786 +
           (C29819 + C29818 + C29817) * C84596 +
           (C29567 + C29566 + C29565) * C1785) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31004 * C102 + C30902 * C252 + C31005 * C1183 + C30903 * C1297 +
            C31006 * C4212 + C30904 * C4416 + C31007 * C5838 + C30905 * C6058 +
            C31008 * C30907 + C30906 * C31009) *
               C172 +
           (C31004 * C173 + C30902 * C453 + C31005 * C1245 + C30903 * C1448 +
            C31006 * C4307 + C30904 * C4714 + C31007 * C5954 + C30905 * C6347 +
            C31008 * C30958 + C30906 * C31145) *
               C84246) *
              C84188 * C84603 * C716 -
          ((C31008 * C31382 + C30906 * C31558 + C31007 * C18908 +
            C30905 * C19309 + C31006 * C5201 + C30904 * C5521 + C31005 * C3547 +
            C30903 * C3888 + C31004 * C785 + C30902 * C988) *
               C84246 +
           (C31008 * C31336 + C30906 * C31426 + C31007 * C18815 +
            C30905 * C19022 + C31006 * C5115 + C30904 * C5281 + C31005 * C3446 +
            C30903 * C3633 + C31004 * C723 + C30902 * C837) *
               C172) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
                C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 +
                C85 * C112) *
                   C251 +
               (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
                C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 +
                C85 * C525) *
                   C84257) *
                  C84246 * C84603 * C716 -
              ((C101 * C833 + C85 * C1031 + C99 * C834 + C84 * C1032 +
                C97 * C835 + C83 * C1033 + C95 * C836 + C82 * C1034 +
                C93 * C837 + C81 * C1035) *
                   C84257 +
               (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 +
                C97 * C721 + C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 +
                C81 * C728) *
                   C251) *
                  C84246 * C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
                 C1680 * C104 + C84550 * C110) *
                    C251 +
                (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
                 C1680 * C254 + C84550 * C523) *
                    C84257) *
                   C84596 +
               ((C2925 + C2926 + C2927) * C251 +
                (C3195 + C3196 + C3197) * C84257) *
                   C84581 +
               ((C2931 + C2932 + C2933) * C251 +
                (C3198 + C3199 + C3200) * C84257) *
                   C84558) *
                  C84603 * C716 -
              (((C1680 * C2793 + C84550 * C3179 + C1678 * C2794 +
                 C1670 * C3180 + C1676 * C2795 + C1669 * C3181) *
                    C84257 +
                (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 +
                 C1670 * C2601 + C1676 * C2599 + C1669 * C2602) *
                    C251) *
                   C84558 +
               ((C3200 + C3199 + C3198) * C84257 +
                (C2933 + C2932 + C2931) * C251) *
                   C84581 +
               ((C3197 + C3196 + C3195) * C84257 +
                (C2927 + C2926 + C2925) * C251) *
                   C84596) *
                  C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C4413 +
           (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
            C1680 * C254 + C84550 * C523) *
               C84597 +
           (C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
            C1680 * C1181 + C84550 * C1186) *
               C4414 +
           (C1676 * C1297 + C1669 * C1495 + C1678 * C1296 + C1670 * C1494 +
            C1680 * C1295 + C84550 * C1493) *
               C84583 +
           (C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
            C1680 * C4214 + C84550 * C4218) *
               C4415 +
           (C1676 * C4416 + C1669 * C4810 + C1678 * C4417 + C1670 * C4811 +
            C1680 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C1680 * C5279 + C84550 * C5596 + C1678 * C5280 + C1670 * C5597 +
            C1676 * C5281 + C1669 * C5598) *
               C84561 +
           (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
            C1676 * C5115 + C1669 * C5118) *
               C4415 +
           (C1680 * C3631 + C84550 * C3966 + C1678 * C3632 + C1670 * C3967 +
            C1676 * C3633 + C1669 * C3968) *
               C84583 +
           (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
            C1676 * C3446 + C1669 * C3452) *
               C4414 +
           (C3197 + C3196 + C3195) * C84597 + (C2927 + C2926 + C2925) * C4413) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C13629 * C2793 + C84550 * C3179 + C13627 * C2794 + C84574 * C3180 +
             C13625 * C2795 + C84590 * C3181) *
                C84257 +
            (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
             C13625 * C2599 + C84590 * C2602) *
                C251) *
               C84558 +
           ((C14986 + C14985 + C14984) * C84257 +
            (C14734 + C14733 + C14732) * C251) *
               C13622 +
           ((C14983 + C14982 + C14981) * C84257 +
            (C14728 + C14727 + C14726) * C251) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C84603 * C716 -
          (((C15867 * C16418 + C84188 * C16646) * C84257 +
            (C15867 * C16304 + C84188 * C16305) * C251) *
               C15865 +
           (C16667 + C16657) * C15864 + (C16666 + C16654) * C15863 +
           (C16665 + C16651) * C15862 + (C16664 + C16648) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C4413 +
            (C15867 * C252 + C84188 * C521) * C84597 +
            (C15867 * C1183 + C84188 * C1188) * C4414 +
            (C15867 * C1297 + C84188 * C1495) * C84583 +
            (C15867 * C4212 + C84188 * C4216) * C4415 +
            (C15867 * C4416 + C84188 * C4810) * C84561) *
               C13621 +
           (C18534 + C18535 + C18536 + C18554 + C18539 + C18555) * C13622 +
           (C18542 + C18543 + C18544 + C18556 + C18547 + C18557) * C84558) *
              C84603 * C716 -
          (((C15867 * C18147 + C84188 * C18532) * C84561 +
            (C15867 * C17967 + C84188 * C17968) * C4415 +
            (C15867 * C16906 + C84188 * C17089) * C84583 +
            (C15867 * C16807 + C84188 * C16809) * C4414 + C16662 * C84597 +
            C16504 * C4413) *
               C84558 +
           (C18557 + C18547 + C18556 + C18544 + C18543 + C18542) * C13622 +
           (C18555 + C18539 + C18554 + C18536 + C18535 + C18534) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C26618 +
           (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
            C13629 * C254 + C84550 * C523) *
               C26458 +
           (C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
            C13629 * C1181 + C84550 * C1186) *
               C26619 +
           (C13625 * C1297 + C84590 * C1495 + C13627 * C1296 + C84574 * C1494 +
            C13629 * C1295 + C84550 * C1493) *
               C26459 +
           (C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
            C13629 * C4214 + C84550 * C4218) *
               C26620 +
           (C13625 * C4416 + C84590 * C4810 + C13627 * C4417 + C84574 * C4811 +
            C13629 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C13629 * C5279 + C84550 * C5596 + C13627 * C5280 + C84574 * C5597 +
            C13625 * C5281 + C84590 * C5598) *
               C84561 +
           (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 + C84574 * C5117 +
            C13625 * C5115 + C84590 * C5118) *
               C26620 +
           (C13629 * C3631 + C84550 * C3966 + C13627 * C3632 + C84574 * C3967 +
            C13625 * C3633 + C84590 * C3968) *
               C26459 +
           (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
            C13625 * C3446 + C84590 * C3452) *
               C26619 +
           (C14983 + C14982 + C14981) * C26458 +
           (C14728 + C14727 + C14726) * C26618) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C26618 +
            (C15867 * C252 + C84188 * C521) * C26458 + C19118 * C26619 +
            C19391 * C26459 + C19120 * C26620 + C19392 * C84561) *
               C84596 +
           (C29897 + C29898 + C29899 + C29900 + C29901 + C29902) * C84581 +
           (C29903 + C29904 + C29905 + C29906 + C29907 + C29908) * C84558) *
              C84603 * C716 -
          (((C15867 * C18147 + C84188 * C18532) * C84561 +
            (C15867 * C17967 + C84188 * C17968) * C26620 + C25575 * C26459 +
            C25352 * C26619 + C16662 * C26458 + C16504 * C26618) *
               C84558 +
           (C29908 + C29907 + C29906 + C29905 + C29904 + C29903) * C84581 +
           (C29902 + C29901 + C29900 + C29899 + C29898 + C29897) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C31004 +
           (C15867 * C252 + C84188 * C521) * C30902 + C19118 * C31005 +
           C19391 * C30903 + C19120 * C31006 + C19392 * C30904 +
           (C15867 * C5838 + C84188 * C5841) * C31007 +
           (C15867 * C6058 + C84188 * C6424) * C30905 +
           (C15867 * C30907 + C84188 * C30909) * C31008 +
           (C15867 * C31009 + C84188 * C31189) * C30906) *
              C84246 * C84603 * C716 -
          ((C15867 * C31426 + C84188 * C31601) * C30906 +
           (C15867 * C31336 + C84188 * C31337) * C31008 +
           (C15867 * C19022 + C84188 * C19385) * C30905 +
           (C15867 * C18815 + C84188 * C18817) * C31007 + C18551 * C30904 +
           C18281 * C31006 + C18550 * C30903 + C18277 * C31005 +
           C16660 * C30902 + C16500 * C31004) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C172 * C102 + C84246 * C173) * C251 +
                (C172 * C252 + C84246 * C569) * C84257) *
                   C81 +
               (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
               (C585 + C595) * C85) *
                  C84603 * C716 -
              (((C172 * C833 + C84246 * C1078) * C84257 +
                (C172 * C719 + C84246 * C781) * C251) *
                   C85 +
               ((C172 * C834 + C84246 * C1079) * C84257 +
                (C172 * C720 + C84246 * C782) * C251) *
                   C84 +
               ((C172 * C835 + C84246 * C1080) * C84257 +
                (C172 * C721 + C84246 * C783) * C251) *
                   C83 +
               ((C172 * C836 + C84246 * C1081) * C84257 +
                (C172 * C722 + C84246 * C784) * C251) *
                   C82 +
               ((C172 * C837 + C84246 * C1082) * C84257 +
                (C172 * C723 + C84246 * C785) * C251) *
                   C81) *
                  C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
                 C1787 * C1681 + C84558 * C1788) *
                    C251 +
                (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
                 C1787 * C1906 + C84558 * C2393) *
                    C84257) *
                   C1669 +
               ((C1821 + C1822 + C1823) * C251 +
                (C2410 + C2411 + C2412) * C84257) *
                   C1670 +
               ((C1827 + C1828 + C1829) * C251 +
                (C2413 + C2414 + C2415) * C84257) *
                   C84550) *
                  C84603 * C716 -
              (((C1787 * C2793 + C84558 * C3274 + C1786 * C1908 +
                 C84581 * C2395 + C1785 * C835 + C84596 * C1080) *
                    C84257 +
                (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 +
                 C84581 * C1790 + C1785 * C721 + C84596 * C783) *
                    C251) *
                   C84550 +
               ((C1787 * C2794 + C84558 * C3275 + C1786 * C1907 +
                 C84581 * C2394 + C1785 * C836 + C84596 * C1081) *
                    C84257 +
                (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 +
                 C84581 * C1789 + C1785 * C722 + C84596 * C784) *
                    C251) *
                   C1670 +
               ((C1787 * C2795 + C84558 * C3276 + C1786 * C1906 +
                 C84581 * C2393 + C1785 * C837 + C84596 * C1082) *
                    C84257 +
                (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 +
                 C84581 * C1788 + C1785 * C723 + C84596 * C785) *
                    C251) *
                   C1669) *
                  C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C4413 +
            (C172 * C252 + C84246 * C569) * C84597 +
            (C172 * C1183 + C84246 * C1245) * C4414 +
            (C172 * C1297 + C84246 * C1542) * C84583 +
            (C172 * C4212 + C84246 * C4307) * C4415 +
            (C172 * C4416 + C84246 * C4888) * C84561) *
               C1669 +
           (C4893 + C4894 + C4895 + C4913 + C4898 + C4914) * C1670 +
           (C4901 + C4902 + C4903 + C4915 + C4906 + C4916) * C84550) *
              C84603 * C716 -
          (((C172 * C5279 + C84246 * C5673) * C84561 +
            (C172 * C5113 + C84246 * C5199) * C4415 +
            (C172 * C3631 + C84246 * C4044) * C84583 +
            (C172 * C3444 + C84246 * C3543) * C4414 +
            (C172 * C835 + C84246 * C1080) * C84597 +
            (C172 * C721 + C84246 * C783) * C4413) *
               C84550 +
           ((C172 * C5280 + C84246 * C5674) * C84561 +
            (C172 * C5114 + C84246 * C5200) * C4415 +
            (C172 * C3632 + C84246 * C4046) * C84583 +
            (C172 * C3445 + C84246 * C3545) * C4414 +
            (C172 * C836 + C84246 * C1081) * C84597 +
            (C172 * C722 + C84246 * C784) * C4413) *
               C1670 +
           ((C172 * C5281 + C84246 * C5675) * C84561 +
            (C172 * C5115 + C84246 * C5201) * C4415 +
            (C172 * C3633 + C84246 * C4048) * C84583 +
            (C172 * C3446 + C84246 * C3547) * C4414 +
            (C172 * C837 + C84246 * C1082) * C84597 +
            (C172 * C723 + C84246 * C785) * C4413) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C13724 * C2793 + C84558 * C3274 + C13723 * C1908 + C13622 * C2395 +
             C13722 * C835 + C13621 * C1080) *
                C84257 +
            (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
             C13722 * C721 + C13621 * C783) *
                C251) *
               C84550 +
           ((C13724 * C2794 + C84558 * C3275 + C13723 * C1907 + C13622 * C2394 +
             C13722 * C836 + C13621 * C1081) *
                C84257 +
            (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
             C13722 * C722 + C13621 * C784) *
                C251) *
               C84574 +
           ((C13724 * C2795 + C84558 * C3276 + C13723 * C1906 + C13622 * C2393 +
             C13722 * C837 + C13621 * C1082) *
                C84257 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C251) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C716 -
          ((C15930 * C16418 + C15865 * C16709 + C15929 * C15977 +
            C15864 * C16214 + C15928 * C2795 + C15863 * C3276 + C15927 * C1906 +
            C15862 * C2393 + C15926 * C837 + C15861 * C1082) *
               C84257 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C251) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C4413 +
           (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
            C13724 * C1906 + C84558 * C2393) *
               C84597 +
           (C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
            C13724 * C3443 + C84558 * C3546) *
               C4414 +
           (C13722 * C1297 + C13621 * C1542 + C13723 * C3633 + C13622 * C4048 +
            C13724 * C3630 + C84558 * C4047) *
               C84583 +
           (C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
            C13724 * C17254 + C84558 * C17343) *
               C4415 +
           (C13722 * C4416 + C13621 * C4888 + C13723 * C5281 + C13622 * C5675 +
            C13724 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C716 -
          ((C13724 * C18147 + C84558 * C18631 + C13723 * C17421 +
            C13622 * C17809 + C13722 * C5281 + C13621 * C5675) *
               C84561 +
           (C13724 * C17967 + C84558 * C18071 + C13723 * C17254 +
            C13622 * C17343 + C13722 * C5115 + C13621 * C5201) *
               C4415 +
           (C13724 * C16906 + C84558 * C17133 + C13723 * C3630 +
            C13622 * C4047 + C13722 * C3633 + C13621 * C4048) *
               C84583 +
           (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
            C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
               C4414 +
           (C13724 * C2795 + C84558 * C3276 + C13723 * C1906 + C13622 * C2393 +
            C13722 * C837 + C13621 * C1082) *
               C84597 +
           (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
            C13722 * C723 + C13621 * C785) *
               C4413) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C26618 +
            (C172 * C252 + C84246 * C569) * C26458 + C5975 * C26619 +
            C6525 * C26459 + C5977 * C26620 + C6526 * C84561) *
               C84590 +
           (C27046 + C27047 + C27048 + C27049 + C27050 + C27051) * C84574 +
           (C27052 + C27053 + C27054 + C27055 + C27056 + C27057) * C84550) *
              C84603 * C716 -
          (((C172 * C5279 + C84246 * C5673) * C84561 +
            (C172 * C5113 + C84246 * C5199) * C26620 +
            (C172 * C3631 + C84246 * C4044) * C26459 +
            (C172 * C3444 + C84246 * C3543) * C26619 +
            (C172 * C835 + C84246 * C1080) * C26458 +
            (C172 * C721 + C84246 * C783) * C26618) *
               C84550 +
           ((C172 * C5280 + C84246 * C5674) * C84561 +
            (C172 * C5114 + C84246 * C5200) * C26620 +
            (C172 * C3632 + C84246 * C4046) * C26459 +
            (C172 * C3445 + C84246 * C3545) * C26619 +
            (C172 * C836 + C84246 * C1081) * C26458 +
            (C172 * C722 + C84246 * C784) * C26618) *
               C84574 +
           ((C172 * C5281 + C84246 * C5675) * C84561 +
            (C172 * C5115 + C84246 * C5201) * C26620 +
            (C172 * C3633 + C84246 * C4048) * C26459 +
            (C172 * C3446 + C84246 * C3547) * C26619 +
            (C172 * C837 + C84246 * C1082) * C26458 +
            (C172 * C723 + C84246 * C785) * C26618) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C26618 +
           (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
            C1787 * C1906 + C84558 * C2393) *
               C26458 +
           (C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
            C1787 * C3443 + C84558 * C3546) *
               C26619 +
           (C1785 * C1297 + C84596 * C1542 + C1786 * C3633 + C84581 * C4048 +
            C1787 * C3630 + C84558 * C4047) *
               C26459 +
           (C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
            C1787 * C17254 + C84558 * C17343) *
               C26620 +
           (C1785 * C4416 + C84596 * C4888 + C1786 * C5281 + C84581 * C5675 +
            C1787 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C716 -
          ((C1787 * C18147 + C84558 * C18631 + C1786 * C17421 +
            C84581 * C17809 + C1785 * C5281 + C84596 * C5675) *
               C84561 +
           (C1787 * C17967 + C84558 * C18071 + C1786 * C17254 +
            C84581 * C17343 + C1785 * C5115 + C84596 * C5201) *
               C26620 +
           (C1787 * C16906 + C84558 * C17133 + C1786 * C3630 + C84581 * C4047 +
            C1785 * C3633 + C84596 * C4048) *
               C26459 +
           (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 + C84581 * C3546 +
            C1785 * C3446 + C84596 * C3547) *
               C26619 +
           (C1787 * C2795 + C84558 * C3276 + C1786 * C1906 + C84581 * C2393 +
            C1785 * C837 + C84596 * C1082) *
               C26458 +
           (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
            C1785 * C723 + C84596 * C785) *
               C26618) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C31004 +
           (C172 * C252 + C84246 * C569) * C30902 + C5975 * C31005 +
           C6525 * C30903 + C5977 * C31006 + C6526 * C30904 +
           (C172 * C5838 + C84246 * C5954) * C31007 +
           (C172 * C6058 + C84246 * C6519) * C30905 +
           (C172 * C30907 + C84246 * C30958) * C31008 +
           (C172 * C31009 + C84246 * C31233) * C30906) *
              C84188 * C84603 * C716 -
          ((C172 * C31426 + C84246 * C31644) * C30906 +
           (C172 * C31336 + C84246 * C31382) * C31008 +
           (C172 * C19022 + C84246 * C19467) * C30905 +
           (C172 * C18815 + C84246 * C18908) * C31007 +
           (C172 * C5281 + C84246 * C5675) * C30904 +
           (C172 * C5115 + C84246 * C5201) * C31006 +
           (C172 * C3633 + C84246 * C4048) * C30903 +
           (C172 * C3446 + C84246 * C3547) * C31005 +
           (C172 * C837 + C84246 * C1082) * C30902 +
           (C172 * C723 + C84246 * C785) * C31004) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
               C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
                  C84603 * C716 -
              ((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84246 * C85 +
               (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84246 * C84 +
               (C637 * C721 + C1133 + C1133 + C84257 * C1127) * C84246 * C83 +
               (C637 * C722 + C1134 + C1134 + C84257 * C1128) * C84246 * C82 +
               (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84246 * C81) *
                  C84603 * C717) *
             C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
                C3366 * C84581 + C3367 * C84558) *
                   C1669 +
               (C2495 + C2520 + C2521) * C1670 +
               (C2501 + C2522 + C2523) * C84550) *
                  C84603 * C716 -
              (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
                C2519 * C84581 + C2518 * C84596) *
                   C84550 +
               ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
                C2517 * C84581 + C2516 * C84596) *
                   C1670 +
               ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
                C3367 * C84581 + C3366 * C84596) *
                   C1669) *
                  C84603 * C717) *
             C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C84246 * C1669 +
           (C5034 + C5035 + C5036) * C84246 * C1670 +
           (C5037 + C5038 + C5039) * C84246 * C84550) *
              C84603 * C716 -
          ((C4992 * C5113 + C5754 + C5754 + C84561 * C5750 + C4991 * C3444 +
            C5755 + C5755 + C84583 * C4124 + C4990 * C721 + C5756 + C5756 +
            C84597 * C1127) *
               C84246 * C84550 +
           (C4992 * C5114 + C5757 + C5757 + C84561 * C5751 + C4991 * C3445 +
            C5758 + C5758 + C84583 * C4126 + C4990 * C722 + C5759 + C5759 +
            C84597 * C1128) *
               C84246 * C1670 +
           (C4992 * C5115 + C5760 + C5760 + C84561 * C5752 + C4991 * C3446 +
            C5761 + C5761 + C84583 * C4128 + C4990 * C723 + C5762 + C5762 +
            C84597 * C1129) *
               C84246 * C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C13622 + C2518 * C13621) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C13622 + C2516 * C13621) *
               C84574 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C13622 + C3366 * C13621) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C84603 * C716 -
          ((C637 * C16304 + C16758 + C16758 + C84257 * C16752) * C15865 +
           C16764 * C15864 + C16763 * C15863 + C3367 * C15862 +
           C3366 * C15861) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C13621 +
           (C18735 + C18736 + C18737) * C13622 +
           (C18738 + C18739 + C18740) * C84558) *
              C84188 * C84603 * C716 -
          ((C4992 * C17967 + C18720 + C18720 + C84561 * C18706 +
            C4991 * C16807 + C18721 + C18721 + C84583 * C17177 + C4990 * C2599 +
            C18722 + C18722 + C84597 * C3353) *
               C84558 +
           (C18740 + C18739 + C18738) * C13622 +
           (C18737 + C18736 + C18735) * C13621) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84246 * C84590 +
           (C27171 + C27172 + C27173) * C84246 * C84574 +
           (C27174 + C27175 + C27176) * C84246 * C84550) *
              C84603 * C716 -
          ((C27133 * C5113 + C27846 + C27846 + C84561 * C5750 + C27132 * C3444 +
            C27847 + C27847 + C26459 * C4124 + C27131 * C721 + C27848 + C27848 +
            C26458 * C1127) *
               C84246 * C84550 +
           (C27133 * C5114 + C27849 + C27849 + C84561 * C5751 + C27132 * C3445 +
            C27850 + C27850 + C26459 * C4126 + C27131 * C722 + C27851 + C27851 +
            C26458 * C1128) *
               C84246 * C84574 +
           (C27133 * C5115 + C27852 + C27852 + C84561 * C5752 + C27132 * C3446 +
            C27853 + C27853 + C26459 * C4128 + C27131 * C723 + C27854 + C27854 +
            C26458 * C1129) *
               C84246 * C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84596 +
           (C30084 + C30085 + C30086) * C84581 +
           (C30087 + C30088 + C30089) * C84558) *
              C84188 * C84603 * C716 -
          ((C27133 * C17967 + C30069 + C30069 + C84561 * C18706 +
            C27132 * C16807 + C30070 + C30070 + C26459 * C17177 +
            C27131 * C2599 + C30071 + C30071 + C26458 * C3353) *
               C84558 +
           (C30089 + C30088 + C30087) * C84581 +
           (C30086 + C30085 + C30084) * C84596) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C31277 * C102 + C31285 + C31285 + C30902 * C638 + C31278 * C1183 +
           C31286 + C31286 + C30903 * C1589 + C31279 * C4212 + C31287 + C31287 +
           C30904 * C4993 + C31280 * C5838 + C31288 + C31288 + C30905 * C6602 +
           C31281 * C30907 + C31289 + C31289 + C30906 * C31282) *
              C84246 * C84188 * C84603 * C716 -
          (C31281 * C31336 + C31689 + C31689 + C30906 * C31687 +
           C31280 * C18815 + C31690 + C31690 + C30905 * C19561 +
           C31279 * C5115 + C31691 + C31691 + C30904 * C5752 + C31278 * C3446 +
           C31692 + C31692 + C30903 * C4128 + C31277 * C723 + C31693 + C31693 +
           C30902 * C1129) *
              C84246 * C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 +
               C122 + C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 +
               C98 * C105 + C124 + C124 + C84 * C117 + C100 * C106 + C125 +
               C125 + C85 * C118) *
                  C84257 * C84246 * C1177 -
              (C100 * C1179 + C1195 + C1195 + C85 * C1189 + C98 * C1180 +
               C1196 + C1196 + C84 * C1190 + C96 * C1181 + C1197 + C1197 +
               C83 * C1191 + C94 * C1182 + C1198 + C1198 + C82 * C1192 +
               C92 * C1183 + C1199 + C1199 + C81 * C1193) *
                  C84257 * C84246 * C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
                C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
                C84550 * C116) *
                   C84257 * C84596 +
               (C2634 + C2635 + C2636) * C84257 * C84581 +
               (C2637 + C2638 + C2639) * C84257 * C84558) *
                  C1177 -
              ((C1679 * C3441 + C3460 + C3460 + C84550 * C3453 + C1677 * C3442 +
                C3461 + C3461 + C1670 * C3454 + C1675 * C3443 + C3462 + C3462 +
                C1669 * C3455) *
                   C84257 * C84558 +
               (C1679 * C3444 + C3463 + C3463 + C84550 * C3456 + C1677 * C3445 +
                C3464 + C3464 + C1670 * C3457 + C1675 * C3446 + C3465 + C3465 +
                C1669 * C3458) *
                   C84257 * C84581 +
               (C1679 * C1181 + C3466 + C3466 + C84550 * C1191 + C1677 * C1182 +
                C3467 + C3467 + C1670 * C1192 + C1675 * C1183 + C3468 + C3468 +
                C1669 * C1193) *
                   C84257 * C84596) *
                  C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84597 +
           (C5873 + C5874 + C5875) * C84583 +
           (C5876 + C5877 + C5878) * C84561) *
              C84246 * C1177 -
          ((C1679 * C5836 + C5858 + C5858 + C84550 * C5842 + C1677 * C5837 +
            C5859 + C5859 + C1670 * C5843 + C1675 * C5838 + C5860 + C5860 +
            C1669 * C5844) *
               C84561 +
           (C5878 + C5877 + C5876) * C84583 +
           (C5875 + C5874 + C5873) * C84597) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C1177 -
          ((C13628 * C3441 + C15209 + C15209 + C84550 * C3453 + C13626 * C3442 +
            C15210 + C15210 + C84574 * C3454 + C13624 * C3443 + C15211 +
            C15211 + C84590 * C3455) *
               C84257 * C84558 +
           (C13628 * C3444 + C15212 + C15212 + C84550 * C3456 + C13626 * C3445 +
            C15213 + C15213 + C84574 * C3457 + C13624 * C3446 + C15214 +
            C15214 + C84590 * C3458) *
               C84257 * C13622 +
           (C13628 * C1181 + C15215 + C15215 + C84550 * C1191 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13624 * C1183 + C15217 +
            C15217 + C84590 * C1193) *
               C84257 * C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C1177 -
          ((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84257 *
               C15865 +
           (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84257 *
               C15864 +
           (C15866 * C3443 + C16815 + C16815 + C84188 * C3455) * C84257 *
               C15863 +
           (C15866 * C3446 + C16816 + C16816 + C84188 * C3458) * C84257 *
               C15862 +
           (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84257 *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84597 +
            C18832 * C84583 + C18833 * C84561) *
               C13621 +
           (C17971 + C17994 + C17995) * C13622 +
           (C17976 + C17996 + C17997) * C84558) *
              C1177 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C84561 +
            C17993 * C84583 + C17992 * C84597) *
               C84558 +
           ((C15866 * C18815 + C18826 + C18826 + C84188 * C18819) * C84561 +
            C17991 * C84583 + C17990 * C84597) *
               C13622 +
           ((C15866 * C5838 + C18827 + C18827 + C84188 * C5844) * C84561 +
            C18833 * C84583 + C18832 * C84597) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C26458 +
           (C27956 + C27957 + C27958) * C26459 +
           (C27959 + C27960 + C27961) * C84561) *
              C84246 * C1177 -
          ((C13628 * C5836 + C27941 + C27941 + C84550 * C5842 + C13626 * C5837 +
            C27942 + C27942 + C84574 * C5843 + C13624 * C5838 + C27943 +
            C27943 + C84590 * C5844) *
               C84561 +
           (C27961 + C27960 + C27959) * C26459 +
           (C27958 + C27957 + C27956) * C26458) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C26458 +
            C18832 * C26459 + C18833 * C84561) *
               C84596 +
           (C29387 + C29388 + C29389) * C84581 +
           (C29390 + C29391 + C29392) * C84558) *
              C1177 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C84561 +
            C17993 * C26459 + C17992 * C26458) *
               C84558 +
           ((C15866 * C18815 + C18826 + C18826 + C84188 * C18819) * C84561 +
            C17991 * C26459 + C17990 * C26458) *
               C84581 +
           ((C15866 * C5838 + C18827 + C18827 + C84188 * C5844) * C84561 +
            C18833 * C26459 + C18832 * C26458) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C30902 +
           C18832 * C30903 + C18833 * C30904 + C31748 * C30905 +
           C31749 * C30906) *
              C84246 * C1177 -
          ((C15866 * C31735 + C31743 + C31743 + C84188 * C31737) * C30906 +
           C31749 * C30905 + C31748 * C30904 + C18833 * C30903 +
           C18832 * C30902) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C172 * C102 + C84246 * C173) * C93 +
               (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
               C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
               C209 * C85) *
                  C84257 * C1177 -
              ((C172 * C1184 + C84246 * C1246) * C85 +
               (C172 * C1179 + C84246 * C1241) * C101 +
               (C172 * C1185 + C84246 * C1247) * C84 +
               (C172 * C1180 + C84246 * C1242) * C99 +
               (C172 * C1186 + C84246 * C1248) * C83 +
               (C172 * C1181 + C84246 * C1243) * C97 +
               (C172 * C1187 + C84246 * C1249) * C82 +
               (C172 * C1182 + C84246 * C1244) * C95 +
               (C172 * C1188 + C84246 * C1250) * C81 +
               (C172 * C1183 + C84246 * C1245) * C93) *
                  C84257 * C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
                C1787 * C1681 + C84558 * C1788) *
                   C1676 +
               (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
                C1787 * C1685 + C84558 * C1792) *
                   C1669 +
               (C1821 + C1822 + C1823) * C1678 +
               (C1824 + C1825 + C1826) * C1670 +
               (C1827 + C1828 + C1829) * C1680 +
               (C1830 + C1831 + C1832) * C84550) *
                  C84257 * C1177 -
              ((C1787 * C3447 + C84558 * C3548 + C1786 * C3450 +
                C84581 * C3549 + C1785 * C1186 + C84596 * C1248) *
                   C84550 +
               (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 +
                C84581 * C3543 + C1785 * C1181 + C84596 * C1243) *
                   C1680 +
               (C1787 * C3448 + C84558 * C3550 + C1786 * C3451 +
                C84581 * C3551 + C1785 * C1187 + C84596 * C1249) *
                   C1670 +
               (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 +
                C84581 * C3545 + C1785 * C1182 + C84596 * C1244) *
                   C1678 +
               (C1787 * C3449 + C84558 * C3552 + C1786 * C3452 +
                C84581 * C3553 + C1785 * C1188 + C84596 * C1250) *
                   C1669 +
               (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 +
                C84581 * C3547 + C1785 * C1183 + C84596 * C1245) *
                   C1676) *
                  C84257 * C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C1676 +
            (C172 * C108 + C84246 * C179) * C1669 + C202 * C1678 +
            C203 * C1670 + C204 * C1680 + C205 * C84550) *
               C84597 +
           (C5979 + C5980 + C5963 + C5964 + C5965 + C5966) * C84583 +
           (C5981 + C5982 + C5971 + C5972 + C5973 + C5974) * C84561) *
              C1177 -
          (((C172 * C5839 + C84246 * C5955) * C84550 +
            (C172 * C5836 + C84246 * C5952) * C1680 +
            (C172 * C5840 + C84246 * C5956) * C1670 +
            (C172 * C5837 + C84246 * C5953) * C1678 +
            (C172 * C5841 + C84246 * C5957) * C1669 +
            (C172 * C5838 + C84246 * C5954) * C1676) *
               C84561 +
           (C5974 + C5973 + C5972 + C5971 + C5982 + C5981) * C84583 +
           (C5966 + C5965 + C5964 + C5963 + C5980 + C5979) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C1177 -
          ((C13724 * C3447 + C84558 * C3548 + C13723 * C3450 + C13622 * C3549 +
            C13722 * C1186 + C13621 * C1248) *
               C84550 +
           (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
            C13722 * C1181 + C13621 * C1243) *
               C13629 +
           (C13724 * C3448 + C84558 * C3550 + C13723 * C3451 + C13622 * C3551 +
            C13722 * C1187 + C13621 * C1249) *
               C84574 +
           (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
            C13722 * C1182 + C13621 * C1244) *
               C13627 +
           (C13724 * C3449 + C84558 * C3552 + C13723 * C3452 + C13622 * C3553 +
            C13722 * C1188 + C13621 * C1250) *
               C84590 +
           (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
            C13722 * C1183 + C13621 * C1245) *
               C13625) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C1177 -
          ((C15930 * C16808 + C15865 * C16861 + C15929 * C16809 +
            C15864 * C16862 + C15928 * C3449 + C15863 * C3552 + C15927 * C3452 +
            C15862 * C3553 + C15926 * C1188 + C15861 * C1250) *
               C84188 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C15867) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C15867 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84188) *
               C84597 +
           ((C18936 + C18937 + C18938) * C15867 +
            (C18939 + C18940 + C18941) * C84188) *
               C84583 +
           ((C18942 + C18943 + C18944) * C15867 +
            (C18945 + C18946 + C18947) * C84188) *
               C84561) *
              C1177 -
          (((C13724 * C18816 + C84558 * C18909 + C13723 * C18817 +
             C13622 * C18910 + C13722 * C5841 + C13621 * C5957) *
                C84188 +
            (C13724 * C18814 + C84558 * C18907 + C13723 * C18815 +
             C13622 * C18908 + C13722 * C5838 + C13621 * C5954) *
                C15867) *
               C84561 +
           ((C18947 + C18946 + C18945) * C84188 +
            (C18944 + C18943 + C18942) * C15867) *
               C84583 +
           ((C18941 + C18940 + C18939) * C84188 +
            (C18938 + C18937 + C18936) * C15867) *
               C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C13625 +
            (C172 * C108 + C84246 * C179) * C84590 + C202 * C13627 +
            C203 * C84574 + C204 * C13629 + C205 * C84550) *
               C26458 +
           (C28036 + C28037 + C28038 + C28039 + C28040 + C28041) * C26459 +
           (C28042 + C28043 + C28044 + C28045 + C28046 + C28047) * C84561) *
              C1177 -
          (((C172 * C5839 + C84246 * C5955) * C84550 +
            (C172 * C5836 + C84246 * C5952) * C13629 +
            (C172 * C5840 + C84246 * C5956) * C84574 +
            (C172 * C5837 + C84246 * C5953) * C13627 +
            (C172 * C5841 + C84246 * C5957) * C84590 +
            (C172 * C5838 + C84246 * C5954) * C13625) *
               C84561 +
           (C28047 + C28046 + C28045 + C28044 + C28043 + C28042) * C26459 +
           (C28041 + C28040 + C28039 + C28038 + C28037 + C28036) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C15867 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C84188) *
               C26458 +
           ((C30262 + C30263 + C30264) * C15867 +
            (C30265 + C30266 + C30267) * C84188) *
               C26459 +
           ((C30268 + C30269 + C30270) * C15867 +
            (C30271 + C30272 + C30273) * C84188) *
               C84561) *
              C1177 -
          (((C1787 * C18816 + C84558 * C18909 + C1786 * C18817 +
             C84581 * C18910 + C1785 * C5841 + C84596 * C5957) *
                C84188 +
            (C1787 * C18814 + C84558 * C18907 + C1786 * C18815 +
             C84581 * C18908 + C1785 * C5838 + C84596 * C5954) *
                C15867) *
               C84561 +
           ((C30273 + C30272 + C30271) * C84188 +
            (C30270 + C30269 + C30268) * C15867) *
               C26459 +
           ((C30267 + C30266 + C30265) * C84188 +
            (C30264 + C30263 + C30262) * C15867) *
               C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C15867 +
            (C172 * C108 + C84246 * C179) * C84188) *
               C30902 +
           (C31794 + C31795) * C30903 + (C31796 + C31797) * C30904 +
           (C31810 + C31811) * C30905 + (C31812 + C31813) * C30906) *
              C1177 -
          (((C172 * C31736 + C84246 * C31792) * C84188 +
            (C172 * C31735 + C84246 * C31791) * C15867) *
               C30906 +
           (C31813 + C31812) * C30905 + (C31811 + C31810) * C30904 +
           (C31797 + C31796) * C30903 + (C31795 + C31794) * C30902) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C251 * C102 + C84257 * C252) * C93 +
               (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
               C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
               C288 * C85) *
                  C84246 * C1177 -
              ((C251 * C1184 + C84257 * C1298) * C85 +
               (C251 * C1179 + C84257 * C1293) * C101 +
               (C251 * C1185 + C84257 * C1299) * C84 +
               (C251 * C1180 + C84257 * C1294) * C99 +
               (C251 * C1186 + C84257 * C1300) * C83 +
               (C251 * C1181 + C84257 * C1295) * C97 +
               (C251 * C1187 + C84257 * C1301) * C82 +
               (C251 * C1182 + C84257 * C1296) * C95 +
               (C251 * C1188 + C84257 * C1302) * C81 +
               (C251 * C1183 + C84257 * C1297) * C93) *
                  C84246 * C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C1676 +
                (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
                C282 * C1670 + C283 * C1680 + C284 * C84550) *
                   C84596 +
               (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
               (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
                  C1177 -
              (((C251 * C3447 + C84257 * C3634) * C84550 +
                (C251 * C3441 + C84257 * C3628) * C1680 +
                (C251 * C3448 + C84257 * C3635) * C1670 +
                (C251 * C3442 + C84257 * C3629) * C1678 +
                (C251 * C3449 + C84257 * C3636) * C1669 +
                (C251 * C3443 + C84257 * C3630) * C1676) *
                   C84558 +
               ((C251 * C3450 + C84257 * C3637) * C84550 +
                (C251 * C3444 + C84257 * C3631) * C1680 +
                (C251 * C3451 + C84257 * C3638) * C1670 +
                (C251 * C3445 + C84257 * C3632) * C1678 +
                (C251 * C3452 + C84257 * C3639) * C1669 +
                (C251 * C3446 + C84257 * C3633) * C1676) *
                   C84581 +
               ((C251 * C1186 + C84257 * C1300) * C84550 +
                (C251 * C1181 + C84257 * C1295) * C1680 +
                (C251 * C1187 + C84257 * C1301) * C1670 +
                (C251 * C1182 + C84257 * C1296) * C1678 +
                (C251 * C1188 + C84257 * C1302) * C1669 +
                (C251 * C1183 + C84257 * C1297) * C1676) *
                   C84596) *
                  C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C1676 +
           (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
            C4415 * C4216 + C84561 * C4420) *
               C1669 +
           (C4449 + C4450 + C4451) * C1678 + (C4452 + C4453 + C4454) * C1670 +
           (C4455 + C4456 + C4457) * C1680 + (C4458 + C4459 + C4460) * C84550) *
              C84246 * C1177 -
          ((C4415 * C5839 + C84561 * C6059 + C4414 * C4218 + C84583 * C4422 +
            C4413 * C1186 + C84597 * C1300) *
               C84550 +
           (C4415 * C5836 + C84561 * C6056 + C4414 * C4214 + C84583 * C4418 +
            C4413 * C1181 + C84597 * C1295) *
               C1680 +
           (C4415 * C5840 + C84561 * C6060 + C4414 * C4217 + C84583 * C4421 +
            C4413 * C1187 + C84597 * C1301) *
               C1670 +
           (C4415 * C5837 + C84561 * C6057 + C4414 * C4213 + C84583 * C4417 +
            C4413 * C1182 + C84597 * C1296) *
               C1678 +
           (C4415 * C5841 + C84561 * C6061 + C4414 * C4216 + C84583 * C4420 +
            C4413 * C1188 + C84597 * C1302) *
               C1669 +
           (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
            C4413 * C1183 + C84597 * C1297) *
               C1676) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C13629 +
            (C251 * C3448 + C84257 * C3635) * C84574 +
            (C251 * C3442 + C84257 * C3629) * C13627 +
            (C251 * C3449 + C84257 * C3636) * C84590 +
            (C251 * C3443 + C84257 * C3630) * C13625) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C13629 +
            (C251 * C3451 + C84257 * C3638) * C84574 +
            (C251 * C3445 + C84257 * C3632) * C13627 +
            (C251 * C3452 + C84257 * C3639) * C84590 +
            (C251 * C3446 + C84257 * C3633) * C13625) *
               C13622 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C13629 +
            (C251 * C1187 + C84257 * C1301) * C84574 +
            (C251 * C1182 + C84257 * C1296) * C13627 +
            (C251 * C1188 + C84257 * C1302) * C84590 +
            (C251 * C1183 + C84257 * C1297) * C13625) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C1177 -
          (((C251 * C16808 + C84257 * C16907) * C84188 +
            (C251 * C16806 + C84257 * C16905) * C15867) *
               C15865 +
           ((C251 * C16809 + C84257 * C16908) * C84188 +
            (C251 * C16807 + C84257 * C16906) * C15867) *
               C15864 +
           ((C251 * C3449 + C84257 * C3636) * C84188 +
            (C251 * C3443 + C84257 * C3630) * C15867) *
               C15863 +
           ((C251 * C3452 + C84257 * C3639) * C84188 +
            (C251 * C3446 + C84257 * C3633) * C15867) *
               C15862 +
           ((C251 * C1188 + C84257 * C1302) * C84188 +
            (C251 * C1183 + C84257 * C1297) * C15867) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C15867 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C84188) *
               C13621 +
           ((C18174 + C18175 + C18176) * C15867 +
            (C18177 + C18178 + C18179) * C84188) *
               C13622 +
           ((C18180 + C18181 + C18182) * C15867 +
            (C18183 + C18184 + C18185) * C84188) *
               C84558) *
              C1177 -
          (((C4415 * C18816 + C84561 * C19023 + C4414 * C17256 +
             C84583 * C17423 + C4413 * C3449 + C84597 * C3636) *
                C84188 +
            (C4415 * C18814 + C84561 * C19021 + C4414 * C17254 +
             C84583 * C17421 + C4413 * C3443 + C84597 * C3630) *
                C15867) *
               C84558 +
           ((C4415 * C18817 + C84561 * C19024 + C4414 * C5118 + C84583 * C5284 +
             C4413 * C3452 + C84597 * C3639) *
                C84188 +
            (C4415 * C18815 + C84561 * C19022 + C4414 * C5115 + C84583 * C5281 +
             C4413 * C3446 + C84597 * C3633) *
                C15867) *
               C13622 +
           ((C4415 * C5841 + C84561 * C6061 + C4414 * C4216 + C84583 * C4420 +
             C4413 * C1188 + C84597 * C1302) *
                C84188 +
            (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
             C4413 * C1183 + C84597 * C1297) *
                C15867) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C13625 +
           (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
            C26620 * C4216 + C84561 * C4420) *
               C84590 +
           (C26646 + C26647 + C26648) * C13627 +
           (C26649 + C26650 + C26651) * C84574 +
           (C26652 + C26653 + C26654) * C13629 +
           (C26655 + C26656 + C26657) * C84550) *
              C84246 * C1177 -
          ((C26620 * C5839 + C84561 * C6059 + C26619 * C4218 + C26459 * C4422 +
            C26618 * C1186 + C26458 * C1300) *
               C84550 +
           (C26620 * C5836 + C84561 * C6056 + C26619 * C4214 + C26459 * C4418 +
            C26618 * C1181 + C26458 * C1295) *
               C13629 +
           (C26620 * C5840 + C84561 * C6060 + C26619 * C4217 + C26459 * C4421 +
            C26618 * C1187 + C26458 * C1301) *
               C84574 +
           (C26620 * C5837 + C84561 * C6057 + C26619 * C4213 + C26459 * C4417 +
            C26618 * C1182 + C26458 * C1296) *
               C13627 +
           (C26620 * C5841 + C84561 * C6061 + C26619 * C4216 + C26459 * C4420 +
            C26618 * C1188 + C26458 * C1302) *
               C84590 +
           (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
            C26618 * C1183 + C26458 * C1297) *
               C13625) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C15867 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84188) *
               C84596 +
           ((C29565 + C29566 + C29567) * C15867 +
            (C29568 + C29569 + C29570) * C84188) *
               C84581 +
           ((C29571 + C29572 + C29573) * C15867 +
            (C29574 + C29575 + C29576) * C84188) *
               C84558) *
              C1177 -
          (((C26620 * C18816 + C84561 * C19023 + C26619 * C17256 +
             C26459 * C17423 + C26618 * C3449 + C26458 * C3636) *
                C84188 +
            (C26620 * C18814 + C84561 * C19021 + C26619 * C17254 +
             C26459 * C17421 + C26618 * C3443 + C26458 * C3630) *
                C15867) *
               C84558 +
           ((C26620 * C18817 + C84561 * C19024 + C26619 * C5118 +
             C26459 * C5284 + C26618 * C3452 + C26458 * C3639) *
                C84188 +
            (C26620 * C18815 + C84561 * C19022 + C26619 * C5115 +
             C26459 * C5281 + C26618 * C3446 + C26458 * C3633) *
                C15867) *
               C84581 +
           ((C26620 * C5841 + C84561 * C6061 + C26619 * C4216 + C26459 * C4420 +
             C26618 * C1188 + C26458 * C1302) *
                C84188 +
            (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
             C26618 * C1183 + C26458 * C1297) *
                C15867) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31004 * C102 + C30902 * C252 + C31005 * C1183 + C30903 * C1297 +
            C31006 * C4212 + C30904 * C4416 + C31007 * C5838 + C30905 * C6058 +
            C31008 * C30907 + C30906 * C31009) *
               C15867 +
           (C31004 * C108 + C30902 * C258 + C31005 * C1188 + C30903 * C1302 +
            C31006 * C4216 + C30904 * C4420 + C31007 * C5841 + C30905 * C6061 +
            C31008 * C30909 + C30906 * C31011) *
               C84188) *
              C84246 * C1177 -
          ((C31008 * C31736 + C30906 * C31856 + C31007 * C30909 +
            C30905 * C31011 + C31006 * C5841 + C30904 * C6061 + C31005 * C4216 +
            C30903 * C4420 + C31004 * C1188 + C30902 * C1302) *
               C84188 +
           (C31008 * C31735 + C30906 * C31855 + C31007 * C30907 +
            C30905 * C31009 + C31006 * C5838 + C30904 * C6058 + C31005 * C4212 +
            C30903 * C4416 + C31004 * C1183 + C30902 * C1297) *
               C15867) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
                C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 +
                C85 * C112) *
                   C172 +
               (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
                C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 +
                C85 * C334) *
                   C84246) *
                  C84257 * C1177 -
              ((C101 * C1241 + C85 * C1345 + C99 * C1242 + C84 * C1346 +
                C97 * C1243 + C83 * C1347 + C95 * C1244 + C82 * C1348 +
                C93 * C1245 + C81 * C1349) *
                   C84246 +
               (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
                C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
                C93 * C1183 + C81 * C1188) *
                   C172) *
                  C84257 * C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
                C1680 * C104 + C84550 * C110) *
                   C1785 +
               (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
                C1680 * C175 + C84550 * C332) *
                   C84596 +
               (C2925 + C2926 + C2927) * C1786 +
               (C2928 + C2929 + C2930) * C84581 +
               (C2931 + C2932 + C2933) * C1787 +
               (C2934 + C2935 + C2936) * C84558) *
                  C84257 * C1177 -
              ((C1680 * C3542 + C84550 * C3714 + C1678 * C3544 + C1670 * C3715 +
                C1676 * C3546 + C1669 * C3716) *
                   C84558 +
               (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
                C1676 * C3443 + C1669 * C3449) *
                   C1787 +
               (C1680 * C3543 + C84550 * C3717 + C1678 * C3545 + C1670 * C3718 +
                C1676 * C3547 + C1669 * C3719) *
                   C84581 +
               (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
                C1676 * C3446 + C1669 * C3452) *
                   C1786 +
               (C1680 * C1243 + C84550 * C1347 + C1678 * C1244 + C1670 * C1348 +
                C1676 * C1245 + C1669 * C1349) *
                   C84596 +
               (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
                C1676 * C1183 + C1669 * C1188) *
                   C1785) *
                  C84257 * C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C172 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84246) *
               C84597 +
           ((C6164 + C6165 + C6166) * C172 + (C6167 + C6168 + C6169) * C84246) *
               C84583 +
           ((C6170 + C6171 + C6172) * C172 + (C6173 + C6174 + C6175) * C84246) *
               C84561) *
              C1177 -
          (((C1680 * C5952 + C84550 * C6136 + C1678 * C5953 + C1670 * C6137 +
             C1676 * C5954 + C1669 * C6138) *
                C84246 +
            (C1680 * C5836 + C84550 * C5839 + C1678 * C5837 + C1670 * C5840 +
             C1676 * C5838 + C1669 * C5841) *
                C172) *
               C84561 +
           ((C6175 + C6174 + C6173) * C84246 + (C6172 + C6171 + C6170) * C172) *
               C84583 +
           ((C6169 + C6168 + C6167) * C84246 + (C6166 + C6165 + C6164) * C172) *
               C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C1177 -
          ((C13629 * C3542 + C84550 * C3714 + C13627 * C3544 + C84574 * C3715 +
            C13625 * C3546 + C84590 * C3716) *
               C84558 +
           (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
            C13625 * C3443 + C84590 * C3449) *
               C13724 +
           (C13629 * C3543 + C84550 * C3717 + C13627 * C3545 + C84574 * C3718 +
            C13625 * C3547 + C84590 * C3719) *
               C13622 +
           (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
            C13625 * C3446 + C84590 * C3452) *
               C13723 +
           (C13629 * C1243 + C84550 * C1347 + C13627 * C1244 + C84574 * C1348 +
            C13625 * C1245 + C84590 * C1349) *
               C13621 +
           (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
            C13625 * C1183 + C84590 * C1188) *
               C13722) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C1177 -
          ((C15867 * C16859 + C84188 * C16951) * C15865 +
           (C15867 * C16806 + C84188 * C16808) * C15930 +
           (C15867 * C16860 + C84188 * C16952) * C15864 +
           (C15867 * C16807 + C84188 * C16809) * C15929 +
           (C15867 * C3546 + C84188 * C3716) * C15863 +
           (C15867 * C3443 + C84188 * C3449) * C15928 +
           (C15867 * C3547 + C84188 * C3719) * C15862 +
           (C15867 * C3446 + C84188 * C3452) * C15927 +
           (C15867 * C1245 + C84188 * C1349) * C15861 +
           (C15867 * C1183 + C84188 * C1188) * C15926) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C13722 +
            (C15867 * C173 + C84188 * C330) * C13621 + C16500 * C13723 +
            C16501 * C13622 + C16502 * C13724 + C16503 * C84558) *
               C84597 +
           (C19122 + C19123 + C19106 + C19107 + C19108 + C19109) * C84583 +
           (C19124 + C19125 + C19114 + C19115 + C19116 + C19117) * C84561) *
              C1177 -
          (((C15867 * C18907 + C84188 * C19099) * C84558 +
            (C15867 * C18814 + C84188 * C18816) * C13724 +
            (C15867 * C18908 + C84188 * C19100) * C13622 +
            (C15867 * C18815 + C84188 * C18817) * C13723 +
            (C15867 * C5954 + C84188 * C6138) * C13621 +
            (C15867 * C5838 + C84188 * C5841) * C13722) *
               C84561 +
           (C19117 + C19116 + C19115 + C19114 + C19125 + C19124) * C84583 +
           (C19109 + C19108 + C19107 + C19106 + C19123 + C19122) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C172 +
            (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
             C13629 * C175 + C84550 * C332) *
                C84246) *
               C26458 +
           ((C28220 + C28221 + C28222) * C172 +
            (C28223 + C28224 + C28225) * C84246) *
               C26459 +
           ((C28226 + C28227 + C28228) * C172 +
            (C28229 + C28230 + C28231) * C84246) *
               C84561) *
              C1177 -
          (((C13629 * C5952 + C84550 * C6136 + C13627 * C5953 + C84574 * C6137 +
             C13625 * C5954 + C84590 * C6138) *
                C84246 +
            (C13629 * C5836 + C84550 * C5839 + C13627 * C5837 + C84574 * C5840 +
             C13625 * C5838 + C84590 * C5841) *
                C172) *
               C84561 +
           ((C28231 + C28230 + C28229) * C84246 +
            (C28228 + C28227 + C28226) * C172) *
               C26459 +
           ((C28225 + C28224 + C28223) * C84246 +
            (C28222 + C28221 + C28220) * C172) *
               C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C1785 +
            (C15867 * C173 + C84188 * C330) * C84596 + C16500 * C1786 +
            C16501 * C84581 + C16502 * C1787 + C16503 * C84558) *
               C26458 +
           (C30422 + C30423 + C30424 + C30425 + C30426 + C30427) * C26459 +
           (C30428 + C30429 + C30430 + C30431 + C30432 + C30433) * C84561) *
              C1177 -
          (((C15867 * C18907 + C84188 * C19099) * C84558 +
            (C15867 * C18814 + C84188 * C18816) * C1787 +
            (C15867 * C18908 + C84188 * C19100) * C84581 +
            (C15867 * C18815 + C84188 * C18817) * C1786 +
            (C15867 * C5954 + C84188 * C6138) * C84596 +
            (C15867 * C5838 + C84188 * C5841) * C1785) *
               C84561 +
           (C30433 + C30432 + C30431 + C30430 + C30429 + C30428) * C26459 +
           (C30427 + C30426 + C30425 + C30424 + C30423 + C30422) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C172 +
            (C15867 * C173 + C84188 * C330) * C84246) *
               C30902 +
           (C31901 + C31902) * C30903 + (C31903 + C31904) * C30904 +
           (C31917 + C31918) * C30905 + (C31919 + C31920) * C30906) *
              C1177 -
          (((C15867 * C31791 + C84188 * C31899) * C84246 +
            (C15867 * C31735 + C84188 * C31736) * C172) *
               C30906 +
           (C31920 + C31919) * C30905 + (C31918 + C31917) * C30904 +
           (C31904 + C31903) * C30903 + (C31902 + C31901) * C30902) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
               C409 * C83 + C410 * C84 + C411 * C85) *
                  C84257 * C1177 -
              ((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C85 +
               (C378 * C1180 + C1399 + C1399 + C84246 * C1393) * C84 +
               (C378 * C1181 + C1400 + C1400 + C84246 * C1394) * C83 +
               (C378 * C1182 + C1401 + C1401 + C84246 * C1395) * C82 +
               (C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C81) *
                  C84257 * C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
                C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
                C84558 * C2093) *
                   C1669 +
               (C2134 + C2135 + C2136) * C1670 +
               (C2137 + C2138 + C2139) * C84550) *
                  C84257 * C1177 -
              ((C2092 * C3441 + C3801 + C3801 + C84558 * C3794 + C2091 * C3444 +
                C3802 + C3802 + C84581 * C3795 + C2090 * C1181 + C3803 + C3803 +
                C84596 * C1394) *
                   C84550 +
               (C2092 * C3442 + C3804 + C3804 + C84558 * C3796 + C2091 * C3445 +
                C3805 + C3805 + C84581 * C3797 + C2090 * C1182 + C3806 + C3806 +
                C84596 * C1395) *
                   C1670 +
               (C2092 * C3443 + C3807 + C3807 + C84558 * C3798 + C2091 * C3446 +
                C3808 + C3808 + C84581 * C3799 + C2090 * C1183 + C3809 + C3809 +
                C84596 * C1396) *
                   C1669) *
                  C84257 * C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C1669 + C408 * C1670 +
            C409 * C84550) *
               C84597 +
           (C6270 + C6255 + C6256) * C84583 +
           (C6271 + C6259 + C6260) * C84561) *
              C1177 -
          (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C84550 +
            (C378 * C5837 + C6262 + C6262 + C84246 * C6250) * C1670 +
            (C378 * C5838 + C6263 + C6263 + C84246 * C6251) * C1669) *
               C84561 +
           (C6260 + C6259 + C6271) * C84583 +
           (C6256 + C6255 + C6270) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C1177 -
          ((C13985 * C3441 + C15514 + C15514 + C84558 * C3794 + C13984 * C3444 +
            C15515 + C15515 + C13622 * C3795 + C13983 * C1181 + C15516 +
            C15516 + C13621 * C1394) *
               C84550 +
           (C13985 * C3442 + C15517 + C15517 + C84558 * C3796 + C13984 * C3445 +
            C15518 + C15518 + C13622 * C3797 + C13983 * C1182 + C15519 +
            C15519 + C13621 * C1395) *
               C84574 +
           (C13985 * C3443 + C15520 + C15520 + C84558 * C3798 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13983 * C1183 + C15522 +
            C15522 + C13621 * C1396) *
               C84590) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C1177 -
          (C16071 * C16806 + C16998 + C16998 + C15865 * C16995 +
           C16070 * C16807 + C16999 + C16999 + C15864 * C16996 +
           C16069 * C3443 + C17000 + C17000 + C15863 * C3798 + C16068 * C3446 +
           C17001 + C17001 + C15862 * C3799 + C16067 * C1183 + C17002 + C17002 +
           C15861 * C1396) *
              C84188 * C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84188 * C84597 +
           (C19229 + C19230 + C19231) * C84188 * C84583 +
           (C19232 + C19233 + C19234) * C84188 * C84561) *
              C1177 -
          ((C13985 * C18814 + C19214 + C19214 + C84558 * C19199 +
            C13984 * C18815 + C19215 + C19215 + C13622 * C19200 +
            C13983 * C5838 + C19216 + C19216 + C13621 * C6251) *
               C84188 * C84561 +
           (C19234 + C19233 + C19232) * C84188 * C84583 +
           (C19231 + C19230 + C19229) * C84188 * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84590 +
            C408 * C84574 + C409 * C84550) *
               C26458 +
           (C28306 + C28307 + C28308) * C26459 +
           (C28309 + C28310 + C28311) * C84561) *
              C1177 -
          (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C84550 +
            (C378 * C5837 + C6262 + C6262 + C84246 * C6250) * C84574 +
            (C378 * C5838 + C6263 + C6263 + C84246 * C6251) * C84590) *
               C84561 +
           (C28311 + C28310 + C28309) * C26459 +
           (C28308 + C28307 + C28306) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C84188 * C26458 +
           (C30535 + C30536 + C30537) * C84188 * C26459 +
           (C30538 + C30539 + C30540) * C84188 * C84561) *
              C1177 -
          ((C2092 * C18814 + C30520 + C30520 + C84558 * C19199 +
            C2091 * C18815 + C30521 + C30521 + C84581 * C19200 + C2090 * C5838 +
            C30522 + C30522 + C84596 * C6251) *
               C84188 * C84561 +
           (C30540 + C30539 + C30538) * C84188 * C26459 +
           (C30537 + C30536 + C30535) * C84188 * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C84188 * C30902 +
           C31964 * C30903 + C31965 * C30904 + C31977 * C30905 +
           C31978 * C30906) *
              C1177 -
          ((C378 * C31735 + C31970 + C31970 + C84246 * C31962) * C84188 *
               C30906 +
           C31978 * C30905 + C31977 * C30904 + C31965 * C30903 +
           C31964 * C30902) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C172 +
                (C251 * C173 + C84257 * C453) * C84246) *
                   C81 +
               (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
               (C469 + C479) * C85) *
                  C1177 -
              (((C251 * C1241 + C84257 * C1444) * C84246 +
                (C251 * C1179 + C84257 * C1293) * C172) *
                   C85 +
               ((C251 * C1242 + C84257 * C1445) * C84246 +
                (C251 * C1180 + C84257 * C1294) * C172) *
                   C84 +
               ((C251 * C1243 + C84257 * C1446) * C84246 +
                (C251 * C1181 + C84257 * C1295) * C172) *
                   C83 +
               ((C251 * C1244 + C84257 * C1447) * C84246 +
                (C251 * C1182 + C84257 * C1296) * C172) *
                   C82 +
               ((C251 * C1245 + C84257 * C1448) * C84246 +
                (C251 * C1183 + C84257 * C1297) * C172) *
                   C81) *
                  C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C251 * C102 + C84257 * C252) * C1785 +
                (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
                C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
                   C1669 +
               (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
               (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
                  C1177 -
              (((C251 * C3542 + C84257 * C3883) * C84558 +
                (C251 * C3441 + C84257 * C3628) * C1787 +
                (C251 * C3543 + C84257 * C3884) * C84581 +
                (C251 * C3444 + C84257 * C3631) * C1786 +
                (C251 * C1243 + C84257 * C1446) * C84596 +
                (C251 * C1181 + C84257 * C1295) * C1785) *
                   C84550 +
               ((C251 * C3544 + C84257 * C3885) * C84558 +
                (C251 * C3442 + C84257 * C3629) * C1787 +
                (C251 * C3545 + C84257 * C3886) * C84581 +
                (C251 * C3445 + C84257 * C3632) * C1786 +
                (C251 * C1244 + C84257 * C1447) * C84596 +
                (C251 * C1182 + C84257 * C1296) * C1785) *
                   C1670 +
               ((C251 * C3546 + C84257 * C3887) * C84558 +
                (C251 * C3443 + C84257 * C3630) * C1787 +
                (C251 * C3547 + C84257 * C3888) * C84581 +
                (C251 * C3446 + C84257 * C3633) * C1786 +
                (C251 * C1245 + C84257 * C1448) * C84596 +
                (C251 * C1183 + C84257 * C1297) * C1785) *
                   C1669) *
                  C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C172 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C84246) *
               C1669 +
           ((C4449 + C4450 + C4451) * C172 + (C4731 + C4732 + C4733) * C84246) *
               C1670 +
           ((C4455 + C4456 + C4457) * C172 + (C4734 + C4735 + C4736) * C84246) *
               C84550) *
              C1177 -
          (((C4415 * C5952 + C84561 * C6345 + C4414 * C4309 + C84583 * C4716 +
             C4413 * C1243 + C84597 * C1446) *
                C84246 +
            (C4415 * C5836 + C84561 * C6056 + C4414 * C4214 + C84583 * C4418 +
             C4413 * C1181 + C84597 * C1295) *
                C172) *
               C84550 +
           ((C4415 * C5953 + C84561 * C6346 + C4414 * C4308 + C84583 * C4715 +
             C4413 * C1244 + C84597 * C1447) *
                C84246 +
            (C4415 * C5837 + C84561 * C6057 + C4414 * C4213 + C84583 * C4417 +
             C4413 * C1182 + C84597 * C1296) *
                C172) *
               C1670 +
           ((C4415 * C5954 + C84561 * C6347 + C4414 * C4307 + C84583 * C4714 +
             C4413 * C1245 + C84597 * C1448) *
                C84246 +
            (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
             C4413 * C1183 + C84597 * C1297) *
                C172) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C13724 +
            (C251 * C3543 + C84257 * C3884) * C13622 +
            (C251 * C3444 + C84257 * C3631) * C13723 +
            (C251 * C1243 + C84257 * C1446) * C13621 +
            (C251 * C1181 + C84257 * C1295) * C13722) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C13724 +
            (C251 * C3545 + C84257 * C3886) * C13622 +
            (C251 * C3445 + C84257 * C3632) * C13723 +
            (C251 * C1244 + C84257 * C1447) * C13621 +
            (C251 * C1182 + C84257 * C1296) * C13722) *
               C84574 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C13724 +
            (C251 * C3547 + C84257 * C3888) * C13622 +
            (C251 * C3446 + C84257 * C3633) * C13723 +
            (C251 * C1245 + C84257 * C1448) * C13621 +
            (C251 * C1183 + C84257 * C1297) * C13722) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C1177 -
          ((C251 * C16859 + C84257 * C17044) * C15865 +
           (C251 * C16806 + C84257 * C16905) * C15930 +
           (C251 * C16860 + C84257 * C17045) * C15864 +
           (C251 * C16807 + C84257 * C16906) * C15929 +
           (C251 * C3546 + C84257 * C3887) * C15863 +
           (C251 * C3443 + C84257 * C3630) * C15928 +
           (C251 * C3547 + C84257 * C3888) * C15862 +
           (C251 * C3446 + C84257 * C3633) * C15927 +
           (C251 * C1245 + C84257 * C1448) * C15861 +
           (C251 * C1183 + C84257 * C1297) * C15926) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C13722 +
           (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
            C4415 * C4307 + C84561 * C4714) *
               C13621 +
           (C18174 + C18175 + C18176) * C13723 +
           (C18453 + C18454 + C18455) * C13622 +
           (C18180 + C18181 + C18182) * C13724 +
           (C18456 + C18457 + C18458) * C84558) *
              C84188 * C1177 -
          ((C4415 * C18907 + C84561 * C19308 + C4414 * C17343 +
            C84583 * C17657 + C4413 * C3546 + C84597 * C3887) *
               C84558 +
           (C4415 * C18814 + C84561 * C19021 + C4414 * C17254 +
            C84583 * C17421 + C4413 * C3443 + C84597 * C3630) *
               C13724 +
           (C4415 * C18908 + C84561 * C19309 + C4414 * C5201 + C84583 * C5521 +
            C4413 * C3547 + C84597 * C3888) *
               C13622 +
           (C4415 * C18815 + C84561 * C19022 + C4414 * C5115 + C84583 * C5281 +
            C4413 * C3446 + C84597 * C3633) *
               C13723 +
           (C4415 * C5954 + C84561 * C6347 + C4414 * C4307 + C84583 * C4714 +
            C4413 * C1245 + C84597 * C1448) *
               C13621 +
           (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
            C4413 * C1183 + C84597 * C1297) *
               C13722) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C172 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84246) *
               C84590 +
           ((C26646 + C26647 + C26648) * C172 +
            (C26892 + C26893 + C26894) * C84246) *
               C84574 +
           ((C26652 + C26653 + C26654) * C172 +
            (C26895 + C26896 + C26897) * C84246) *
               C84550) *
              C1177 -
          (((C26620 * C5952 + C84561 * C6345 + C26619 * C4309 + C26459 * C4716 +
             C26618 * C1243 + C26458 * C1446) *
                C84246 +
            (C26620 * C5836 + C84561 * C6056 + C26619 * C4214 + C26459 * C4418 +
             C26618 * C1181 + C26458 * C1295) *
                C172) *
               C84550 +
           ((C26620 * C5953 + C84561 * C6346 + C26619 * C4308 + C26459 * C4715 +
             C26618 * C1244 + C26458 * C1447) *
                C84246 +
            (C26620 * C5837 + C84561 * C6057 + C26619 * C4213 + C26459 * C4417 +
             C26618 * C1182 + C26458 * C1296) *
                C172) *
               C84574 +
           ((C26620 * C5954 + C84561 * C6347 + C26619 * C4307 + C26459 * C4714 +
             C26618 * C1245 + C26458 * C1448) *
                C84246 +
            (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
             C26618 * C1183 + C26458 * C1297) *
                C172) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C1785 +
           (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
            C26620 * C4307 + C84561 * C4714) *
               C84596 +
           (C29565 + C29566 + C29567) * C1786 +
           (C29817 + C29818 + C29819) * C84581 +
           (C29571 + C29572 + C29573) * C1787 +
           (C29820 + C29821 + C29822) * C84558) *
              C84188 * C1177 -
          ((C26620 * C18907 + C84561 * C19308 + C26619 * C17343 +
            C26459 * C17657 + C26618 * C3546 + C26458 * C3887) *
               C84558 +
           (C26620 * C18814 + C84561 * C19021 + C26619 * C17254 +
            C26459 * C17421 + C26618 * C3443 + C26458 * C3630) *
               C1787 +
           (C26620 * C18908 + C84561 * C19309 + C26619 * C5201 +
            C26459 * C5521 + C26618 * C3547 + C26458 * C3888) *
               C84581 +
           (C26620 * C18815 + C84561 * C19022 + C26619 * C5115 +
            C26459 * C5281 + C26618 * C3446 + C26458 * C3633) *
               C1786 +
           (C26620 * C5954 + C84561 * C6347 + C26619 * C4307 + C26459 * C4714 +
            C26618 * C1245 + C26458 * C1448) *
               C84596 +
           (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
            C26618 * C1183 + C26458 * C1297) *
               C1785) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31004 * C102 + C30902 * C252 + C31005 * C1183 + C30903 * C1297 +
            C31006 * C4212 + C30904 * C4416 + C31007 * C5838 + C30905 * C6058 +
            C31008 * C30907 + C30906 * C31009) *
               C172 +
           (C31004 * C173 + C30902 * C453 + C31005 * C1245 + C30903 * C1448 +
            C31006 * C4307 + C30904 * C4714 + C31007 * C5954 + C30905 * C6347 +
            C31008 * C30958 + C30906 * C31145) *
               C84246) *
              C84188 * C1177 -
          ((C31008 * C31791 + C30906 * C32020 + C31007 * C30958 +
            C30905 * C31145 + C31006 * C5954 + C30904 * C6347 + C31005 * C4307 +
            C30903 * C4714 + C31004 * C1245 + C30902 * C1448) *
               C84246 +
           (C31008 * C31735 + C30906 * C31855 + C31007 * C30907 +
            C30905 * C31009 + C31006 * C5838 + C30904 * C6058 + C31005 * C4212 +
            C30903 * C4416 + C31004 * C1183 + C30902 * C1297) *
               C172) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
                C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 +
                C85 * C112) *
                   C251 +
               (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
                C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 +
                C85 * C525) *
                   C84257) *
                  C84246 * C1177 -
              ((C101 * C1293 + C85 * C1491 + C99 * C1294 + C84 * C1492 +
                C97 * C1295 + C83 * C1493 + C95 * C1296 + C82 * C1494 +
                C93 * C1297 + C81 * C1495) *
                   C84257 +
               (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
                C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
                C93 * C1183 + C81 * C1188) *
                   C251) *
                  C84246 * C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
                 C1680 * C104 + C84550 * C110) *
                    C251 +
                (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
                 C1680 * C254 + C84550 * C523) *
                    C84257) *
                   C84596 +
               ((C2925 + C2926 + C2927) * C251 +
                (C3195 + C3196 + C3197) * C84257) *
                   C84581 +
               ((C2931 + C2932 + C2933) * C251 +
                (C3198 + C3199 + C3200) * C84257) *
                   C84558) *
                  C1177 -
              (((C1680 * C3628 + C84550 * C3963 + C1678 * C3629 +
                 C1670 * C3964 + C1676 * C3630 + C1669 * C3965) *
                    C84257 +
                (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 +
                 C1670 * C3448 + C1676 * C3443 + C1669 * C3449) *
                    C251) *
                   C84558 +
               ((C1680 * C3631 + C84550 * C3966 + C1678 * C3632 +
                 C1670 * C3967 + C1676 * C3633 + C1669 * C3968) *
                    C84257 +
                (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 +
                 C1670 * C3451 + C1676 * C3446 + C1669 * C3452) *
                    C251) *
                   C84581 +
               ((C1680 * C1295 + C84550 * C1493 + C1678 * C1296 +
                 C1670 * C1494 + C1676 * C1297 + C1669 * C1495) *
                    C84257 +
                (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 +
                 C1670 * C1187 + C1676 * C1183 + C1669 * C1188) *
                    C251) *
                   C84596) *
                  C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C4413 +
           (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
            C1680 * C254 + C84550 * C523) *
               C84597 +
           (C6164 + C6165 + C6166) * C4414 + (C6438 + C6439 + C6440) * C84583 +
           (C6170 + C6171 + C6172) * C4415 + (C6441 + C6442 + C6443) * C84561) *
              C84246 * C1177 -
          ((C1680 * C6056 + C84550 * C6422 + C1678 * C6057 + C1670 * C6423 +
            C1676 * C6058 + C1669 * C6424) *
               C84561 +
           (C1680 * C5836 + C84550 * C5839 + C1678 * C5837 + C1670 * C5840 +
            C1676 * C5838 + C1669 * C5841) *
               C4415 +
           (C6443 + C6442 + C6441) * C84583 + (C6172 + C6171 + C6170) * C4414 +
           (C6440 + C6439 + C6438) * C84597 + (C6166 + C6165 + C6164) * C4413) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C1177 -
          (((C13629 * C3628 + C84550 * C3963 + C13627 * C3629 + C84574 * C3964 +
             C13625 * C3630 + C84590 * C3965) *
                C84257 +
            (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
             C13625 * C3443 + C84590 * C3449) *
                C251) *
               C84558 +
           ((C13629 * C3631 + C84550 * C3966 + C13627 * C3632 + C84574 * C3967 +
             C13625 * C3633 + C84590 * C3968) *
                C84257 +
            (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
             C13625 * C3446 + C84590 * C3452) *
                C251) *
               C13622 +
           ((C13629 * C1295 + C84550 * C1493 + C13627 * C1296 + C84574 * C1494 +
             C13625 * C1297 + C84590 * C1495) *
                C84257 +
            (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
             C13625 * C1183 + C84590 * C1188) *
                C251) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C1177 -
          (((C15867 * C16905 + C84188 * C17088) * C84257 +
            (C15867 * C16806 + C84188 * C16808) * C251) *
               C15865 +
           ((C15867 * C16906 + C84188 * C17089) * C84257 +
            (C15867 * C16807 + C84188 * C16809) * C251) *
               C15864 +
           ((C15867 * C3630 + C84188 * C3965) * C84257 +
            (C15867 * C3443 + C84188 * C3449) * C251) *
               C15863 +
           ((C15867 * C3633 + C84188 * C3968) * C84257 +
            (C15867 * C3446 + C84188 * C3452) * C251) *
               C15862 +
           ((C15867 * C1297 + C84188 * C1495) * C84257 +
            (C15867 * C1183 + C84188 * C1188) * C251) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C4413 +
            (C15867 * C252 + C84188 * C521) * C84597 + C19118 * C4414 +
            C19391 * C84583 + C19120 * C4415 + C19392 * C84561) *
               C13621 +
           (C18534 + C18535 + C18536 + C18554 + C18539 + C18555) * C13622 +
           (C18542 + C18543 + C18544 + C18556 + C18547 + C18557) * C84558) *
              C1177 -
          (((C15867 * C19021 + C84188 * C19384) * C84561 +
            (C15867 * C18814 + C84188 * C18816) * C4415 + C18553 * C84583 +
            C18283 * C4414 + C18552 * C84597 + C18279 * C4413) *
               C84558 +
           ((C15867 * C19022 + C84188 * C19385) * C84561 +
            (C15867 * C18815 + C84188 * C18817) * C4415 + C18551 * C84583 +
            C18281 * C4414 + C18550 * C84597 + C18277 * C4413) *
               C13622 +
           ((C15867 * C6058 + C84188 * C6424) * C84561 +
            (C15867 * C5838 + C84188 * C5841) * C4415 + C19392 * C84583 +
            C19120 * C4414 + C19391 * C84597 + C19118 * C4413) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C26618 +
           (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
            C13629 * C254 + C84550 * C523) *
               C26458 +
           (C28220 + C28221 + C28222) * C26619 +
           (C28472 + C28473 + C28474) * C26459 +
           (C28226 + C28227 + C28228) * C26620 +
           (C28475 + C28476 + C28477) * C84561) *
              C84246 * C1177 -
          ((C13629 * C6056 + C84550 * C6422 + C13627 * C6057 + C84574 * C6423 +
            C13625 * C6058 + C84590 * C6424) *
               C84561 +
           (C13629 * C5836 + C84550 * C5839 + C13627 * C5837 + C84574 * C5840 +
            C13625 * C5838 + C84590 * C5841) *
               C26620 +
           (C28477 + C28476 + C28475) * C26459 +
           (C28228 + C28227 + C28226) * C26619 +
           (C28474 + C28473 + C28472) * C26458 +
           (C28222 + C28221 + C28220) * C26618) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C26618 +
            (C15867 * C252 + C84188 * C521) * C26458 + C19118 * C26619 +
            C19391 * C26459 + C19120 * C26620 + C19392 * C84561) *
               C84596 +
           (C29897 + C29898 + C29899 + C29900 + C29901 + C29902) * C84581 +
           (C29903 + C29904 + C29905 + C29906 + C29907 + C29908) * C84558) *
              C1177 -
          (((C15867 * C19021 + C84188 * C19384) * C84561 +
            (C15867 * C18814 + C84188 * C18816) * C26620 + C18553 * C26459 +
            C18283 * C26619 + C18552 * C26458 + C18279 * C26618) *
               C84558 +
           ((C15867 * C19022 + C84188 * C19385) * C84561 +
            (C15867 * C18815 + C84188 * C18817) * C26620 + C18551 * C26459 +
            C18281 * C26619 + C18550 * C26458 + C18277 * C26618) *
               C84581 +
           ((C15867 * C6058 + C84188 * C6424) * C84561 +
            (C15867 * C5838 + C84188 * C5841) * C26620 + C19392 * C26459 +
            C19120 * C26619 + C19391 * C26458 + C19118 * C26618) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C31004 +
           (C15867 * C252 + C84188 * C521) * C30902 + C19118 * C31005 +
           C19391 * C30903 + C19120 * C31006 + C19392 * C30904 +
           C31913 * C31007 + C32069 * C30905 + C31915 * C31008 +
           C32070 * C30906) *
              C84246 * C1177 -
          ((C15867 * C31855 + C84188 * C32063) * C30906 +
           (C15867 * C31735 + C84188 * C31736) * C31008 + C32070 * C30905 +
           C31915 * C31007 + C32069 * C30904 + C31913 * C31006 +
           C19392 * C30903 + C19120 * C31005 + C19391 * C30902 +
           C19118 * C31004) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C172 * C102 + C84246 * C173) * C251 +
                (C172 * C252 + C84246 * C569) * C84257) *
                   C81 +
               (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
               (C585 + C595) * C85) *
                  C1177 -
              (((C172 * C1293 + C84246 * C1538) * C84257 +
                (C172 * C1179 + C84246 * C1241) * C251) *
                   C85 +
               ((C172 * C1294 + C84246 * C1539) * C84257 +
                (C172 * C1180 + C84246 * C1242) * C251) *
                   C84 +
               ((C172 * C1295 + C84246 * C1540) * C84257 +
                (C172 * C1181 + C84246 * C1243) * C251) *
                   C83 +
               ((C172 * C1296 + C84246 * C1541) * C84257 +
                (C172 * C1182 + C84246 * C1244) * C251) *
                   C82 +
               ((C172 * C1297 + C84246 * C1542) * C84257 +
                (C172 * C1183 + C84246 * C1245) * C251) *
                   C81) *
                  C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
                 C1787 * C1681 + C84558 * C1788) *
                    C251 +
                (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
                 C1787 * C1906 + C84558 * C2393) *
                    C84257) *
                   C1669 +
               ((C1821 + C1822 + C1823) * C251 +
                (C2410 + C2411 + C2412) * C84257) *
                   C1670 +
               ((C1827 + C1828 + C1829) * C251 +
                (C2413 + C2414 + C2415) * C84257) *
                   C84550) *
                  C1177 -
              (((C1787 * C3628 + C84558 * C4043 + C1786 * C3631 +
                 C84581 * C4044 + C1785 * C1295 + C84596 * C1540) *
                    C84257 +
                (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 +
                 C84581 * C3543 + C1785 * C1181 + C84596 * C1243) *
                    C251) *
                   C84550 +
               ((C1787 * C3629 + C84558 * C4045 + C1786 * C3632 +
                 C84581 * C4046 + C1785 * C1296 + C84596 * C1541) *
                    C84257 +
                (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 +
                 C84581 * C3545 + C1785 * C1182 + C84596 * C1244) *
                    C251) *
                   C1670 +
               ((C1787 * C3630 + C84558 * C4047 + C1786 * C3633 +
                 C84581 * C4048 + C1785 * C1297 + C84596 * C1542) *
                    C84257 +
                (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 +
                 C84581 * C3547 + C1785 * C1183 + C84596 * C1245) *
                    C251) *
                   C1669) *
                  C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C4413 +
            (C172 * C252 + C84246 * C569) * C84597 + C5975 * C4414 +
            C6525 * C84583 + C5977 * C4415 + C6526 * C84561) *
               C1669 +
           (C4893 + C4894 + C4895 + C4913 + C4898 + C4914) * C1670 +
           (C4901 + C4902 + C4903 + C4915 + C4906 + C4916) * C84550) *
              C1177 -
          (((C172 * C6056 + C84246 * C6517) * C84561 +
            (C172 * C5836 + C84246 * C5952) * C4415 + C4912 * C84583 +
            C4338 * C4414 + C4911 * C84597 + C4334 * C4413) *
               C84550 +
           ((C172 * C6057 + C84246 * C6518) * C84561 +
            (C172 * C5837 + C84246 * C5953) * C4415 + C4910 * C84583 +
            C4336 * C4414 + C4909 * C84597 + C4332 * C4413) *
               C1670 +
           ((C172 * C6058 + C84246 * C6519) * C84561 +
            (C172 * C5838 + C84246 * C5954) * C4415 + C6526 * C84583 +
            C5977 * C4414 + C6525 * C84597 + C5975 * C4413) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C1177 -
          (((C13724 * C3628 + C84558 * C4043 + C13723 * C3631 + C13622 * C4044 +
             C13722 * C1295 + C13621 * C1540) *
                C84257 +
            (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
             C13722 * C1181 + C13621 * C1243) *
                C251) *
               C84550 +
           ((C13724 * C3629 + C84558 * C4045 + C13723 * C3632 + C13622 * C4046 +
             C13722 * C1296 + C13621 * C1541) *
                C84257 +
            (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
             C13722 * C1182 + C13621 * C1244) *
                C251) *
               C84574 +
           ((C13724 * C3630 + C84558 * C4047 + C13723 * C3633 + C13622 * C4048 +
             C13722 * C1297 + C13621 * C1542) *
                C84257 +
            (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
             C13722 * C1183 + C13621 * C1245) *
                C251) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C1177 -
          ((C15930 * C16905 + C15865 * C17132 + C15929 * C16906 +
            C15864 * C17133 + C15928 * C3630 + C15863 * C4047 + C15927 * C3633 +
            C15862 * C4048 + C15926 * C1297 + C15861 * C1542) *
               C84257 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C251) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C4413 +
           (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
            C13724 * C1906 + C84558 * C2393) *
               C84597 +
           (C18936 + C18937 + C18938) * C4414 +
           (C19481 + C19482 + C19483) * C84583 +
           (C18942 + C18943 + C18944) * C4415 +
           (C19484 + C19485 + C19486) * C84561) *
              C84188 * C1177 -
          ((C13724 * C19021 + C84558 * C19466 + C13723 * C19022 +
            C13622 * C19467 + C13722 * C6058 + C13621 * C6519) *
               C84561 +
           (C13724 * C18814 + C84558 * C18907 + C13723 * C18815 +
            C13622 * C18908 + C13722 * C5838 + C13621 * C5954) *
               C4415 +
           (C19486 + C19485 + C19484) * C84583 +
           (C18944 + C18943 + C18942) * C4414 +
           (C19483 + C19482 + C19481) * C84597 +
           (C18938 + C18937 + C18936) * C4413) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C26618 +
            (C172 * C252 + C84246 * C569) * C26458 + C5975 * C26619 +
            C6525 * C26459 + C5977 * C26620 + C6526 * C84561) *
               C84590 +
           (C27046 + C27047 + C27048 + C27049 + C27050 + C27051) * C84574 +
           (C27052 + C27053 + C27054 + C27055 + C27056 + C27057) * C84550) *
              C1177 -
          (((C172 * C6056 + C84246 * C6517) * C84561 +
            (C172 * C5836 + C84246 * C5952) * C26620 + C4912 * C26459 +
            C4338 * C26619 + C4911 * C26458 + C4334 * C26618) *
               C84550 +
           ((C172 * C6057 + C84246 * C6518) * C84561 +
            (C172 * C5837 + C84246 * C5953) * C26620 + C4910 * C26459 +
            C4336 * C26619 + C4909 * C26458 + C4332 * C26618) *
               C84574 +
           ((C172 * C6058 + C84246 * C6519) * C84561 +
            (C172 * C5838 + C84246 * C5954) * C26620 + C6526 * C26459 +
            C5977 * C26619 + C6525 * C26458 + C5975 * C26618) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C26618 +
           (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
            C1787 * C1906 + C84558 * C2393) *
               C26458 +
           (C30262 + C30263 + C30264) * C26619 +
           (C30775 + C30776 + C30777) * C26459 +
           (C30268 + C30269 + C30270) * C26620 +
           (C30778 + C30779 + C30780) * C84561) *
              C84188 * C1177 -
          ((C1787 * C19021 + C84558 * C19466 + C1786 * C19022 +
            C84581 * C19467 + C1785 * C6058 + C84596 * C6519) *
               C84561 +
           (C1787 * C18814 + C84558 * C18907 + C1786 * C18815 +
            C84581 * C18908 + C1785 * C5838 + C84596 * C5954) *
               C26620 +
           (C30780 + C30779 + C30778) * C26459 +
           (C30270 + C30269 + C30268) * C26619 +
           (C30777 + C30776 + C30775) * C26458 +
           (C30264 + C30263 + C30262) * C26618) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C31004 +
           (C172 * C252 + C84246 * C569) * C30902 + C5975 * C31005 +
           C6525 * C30903 + C5977 * C31006 + C6526 * C30904 + C31806 * C31007 +
           C32118 * C30905 + C31808 * C31008 + C32119 * C30906) *
              C84188 * C1177 -
          ((C172 * C31855 + C84246 * C32112) * C30906 +
           (C172 * C31735 + C84246 * C31791) * C31008 + C32119 * C30905 +
           C31808 * C31007 + C32118 * C30904 + C31806 * C31006 +
           C6526 * C30903 + C5977 * C31005 + C6525 * C30902 + C5975 * C31004) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
               C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
                  C1177 -
              ((C637 * C1179 + C1591 + C1591 + C84257 * C1585) * C84246 * C85 +
               (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C84246 * C84 +
               (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84246 * C83 +
               (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84246 * C82 +
               (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84246 * C81) *
                  C1178) *
             C84604 * C84605 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
                C3366 * C84581 + C3367 * C84558) *
                   C1669 +
               (C2495 + C2520 + C2521) * C1670 +
               (C2501 + C2522 + C2523) * C84550) *
                  C1177 -
              (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
                (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84581 +
                (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84596) *
                   C84550 +
               ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
                (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84581 +
                (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84596) *
                   C1670 +
               ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
                (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84581 +
                (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84596) *
                   C1669) *
                  C1178) *
             C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C84246 * C1669 +
           (C5034 + C5035 + C5036) * C84246 * C1670 +
           (C5037 + C5038 + C5039) * C84246 * C84550) *
              C1177 -
          ((C4992 * C5836 + C6604 + C6604 + C84561 * C6600 + C4991 * C4214 +
            C6605 + C6605 + C84583 * C4995 + C4990 * C1181 + C6606 + C6606 +
            C84597 * C1587) *
               C84246 * C84550 +
           (C4992 * C5837 + C6607 + C6607 + C84561 * C6601 + C4991 * C4213 +
            C6608 + C6608 + C84583 * C4994 + C4990 * C1182 + C6609 + C6609 +
            C84597 * C1588) *
               C84246 * C1670 +
           (C4992 * C5838 + C6610 + C6610 + C84561 * C6602 + C4991 * C4212 +
            C6611 + C6611 + C84583 * C4993 + C4990 * C1183 + C6612 + C6612 +
            C84597 * C1589) *
               C84246 * C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C13622 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C13621) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C13622 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C13621) *
               C84574 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C13622 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C13621) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C1177 -
          ((C637 * C16806 + C17179 + C17179 + C84257 * C17176) * C15865 +
           (C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C15864 +
           (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C15863 +
           (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C15862 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C15861) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C13621 +
           (C18735 + C18736 + C18737) * C13622 +
           (C18738 + C18739 + C18740) * C84558) *
              C84188 * C1177 -
          ((C4992 * C18814 + C19563 + C19563 + C84561 * C19560 +
            C4991 * C17254 + C19564 + C19564 + C84583 * C17885 + C4990 * C3443 +
            C19565 + C19565 + C84597 * C4127) *
               C84558 +
           (C4992 * C18815 + C19566 + C19566 + C84561 * C19561 + C4991 * C5115 +
            C19567 + C19567 + C84583 * C5752 + C4990 * C3446 + C19568 + C19568 +
            C84597 * C4128) *
               C13622 +
           (C4992 * C5838 + C6610 + C6610 + C84561 * C6602 + C4991 * C4212 +
            C6611 + C6611 + C84583 * C4993 + C4990 * C1183 + C6612 + C6612 +
            C84597 * C1589) *
               C13621) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84246 * C84590 +
           (C27171 + C27172 + C27173) * C84246 * C84574 +
           (C27174 + C27175 + C27176) * C84246 * C84550) *
              C1177 -
          ((C27133 * C5836 + C28626 + C28626 + C84561 * C6600 + C27132 * C4214 +
            C28627 + C28627 + C26459 * C4995 + C27131 * C1181 + C28628 +
            C28628 + C26458 * C1587) *
               C84246 * C84550 +
           (C27133 * C5837 + C28629 + C28629 + C84561 * C6601 + C27132 * C4213 +
            C28630 + C28630 + C26459 * C4994 + C27131 * C1182 + C28631 +
            C28631 + C26458 * C1588) *
               C84246 * C84574 +
           (C27133 * C5838 + C28632 + C28632 + C84561 * C6602 + C27132 * C4212 +
            C28633 + C28633 + C26459 * C4993 + C27131 * C1183 + C28634 +
            C28634 + C26458 * C1589) *
               C84246 * C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84596 +
           (C30084 + C30085 + C30086) * C84581 +
           (C30087 + C30088 + C30089) * C84558) *
              C84188 * C1177 -
          ((C27133 * C18814 + C30855 + C30855 + C84561 * C19560 +
            C27132 * C17254 + C30856 + C30856 + C26459 * C17885 +
            C27131 * C3443 + C30857 + C30857 + C26458 * C4127) *
               C84558 +
           (C27133 * C18815 + C30858 + C30858 + C84561 * C19561 +
            C27132 * C5115 + C30859 + C30859 + C26459 * C5752 + C27131 * C3446 +
            C30860 + C30860 + C26458 * C4128) *
               C84581 +
           (C27133 * C5838 + C28632 + C28632 + C84561 * C6602 + C27132 * C4212 +
            C28633 + C28633 + C26459 * C4993 + C27131 * C1183 + C28634 +
            C28634 + C26458 * C1589) *
               C84596) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C31277 * C102 + C31285 + C31285 + C30902 * C638 + C31278 * C1183 +
           C31286 + C31286 + C30903 * C1589 + C31279 * C4212 + C31287 + C31287 +
           C30904 * C4993 + C31280 * C5838 + C31288 + C31288 + C30905 * C6602 +
           C31281 * C30907 + C31289 + C31289 + C30906 * C31282) *
              C84246 * C84188 * C1177 -
          (C31281 * C31735 + C32163 + C32163 + C30906 * C32161 +
           C31280 * C30907 + C32164 + C32164 + C30905 * C31282 +
           C31279 * C5838 + C32165 + C32165 + C30904 * C6602 + C31278 * C4212 +
           C32166 + C32166 + C30903 * C4993 + C31277 * C1183 + C32167 + C32167 +
           C30902 * C1589) *
              C84246 * C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C84529 +
            (C19640 * C1183 + C21067 + C21067 + C84509 * C1193 +
             C19642 * C1182 + C21066 + C21066 + C84198 * C1192) *
                C84344) *
               C13621 +
           ((C20383 + C20384) * C84529 +
            (C19640 * C3446 + C21065 + C21065 + C84509 * C3458 +
             C19642 * C3445 + C21064 + C21064 + C84198 * C3457) *
                C84344) *
               C13622 +
           ((C20385 + C20386) * C84529 +
            (C19640 * C3443 + C21063 + C21063 + C84509 * C3455 +
             C19642 * C3442 + C21062 + C21062 + C84198 * C3454) *
                C84344) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C19642 * C3441 + C21713 + C21713 + C84198 * C3453 +
             C19640 * C3442 + C21714 + C21714 + C84509 * C3454) *
                C84344 +
            (C19642 * C1683 + C19655 + C19655 + C84198 * C1691 +
             C19640 * C1682 + C19656 + C19656 + C84509 * C1690) *
                C84529) *
               C84558 +
           ((C19642 * C3444 + C21715 + C21715 + C84198 * C3456 +
             C19640 * C3445 + C21716 + C21716 + C84509 * C3457) *
                C84344 +
            (C19642 * C721 + C19657 + C19657 + C84198 * C731 + C19640 * C722 +
             C19658 + C19658 + C84509 * C732) *
                C84529) *
               C13622 +
           ((C19642 * C1181 + C21717 + C21717 + C84198 * C1191 +
             C19640 * C1182 + C21718 + C21718 + C84509 * C1192) *
                C84344 +
            (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
             C19660 + C19660 + C84509 * C115) *
                C84529) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84529 +
           (C6684 * C1183 + C8113 + C8113 + C6678 * C1193 + C6686 * C1182 +
            C8112 + C8112 + C6679 * C1192 + C6688 * C1181 + C8111 + C8111 +
            C6680 * C1191 + C6690 * C1180 + C8110 + C8110 + C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C6690 * C1179 + C8729 + C8729 + C84527 * C1189 + C6688 * C1180 +
            C8730 + C8730 + C6680 * C1190 + C6686 * C1181 + C8731 + C8731 +
            C6679 * C1191 + C6684 * C1182 + C8732 + C8732 + C6678 * C1192) *
               C84344 +
           (C6690 * C106 + C6705 + C6705 + C84527 * C118 + C6688 * C105 +
            C6706 + C6706 + C6680 * C117 + C6686 * C104 + C6707 + C6707 +
            C6679 * C116 + C6684 * C103 + C6708 + C6708 + C6678 * C115) *
               C84529) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C35065 +
           (C23658 + C23659) * C35066 + (C34151 + C34152) * C35067 +
           (C19640 * C5838 + C34146 + C34146 + C84509 * C5844 + C19642 * C5837 +
            C34145 + C34145 + C84198 * C5843) *
               C84543) *
              C84246 * C84603 * C84604 * C90 -
          ((C19642 * C5836 + C35070 + C35070 + C84198 * C5842 + C19640 * C5837 +
            C35071 + C35071 + C84509 * C5843) *
               C84543 +
           (C19642 * C4214 + C32268 + C32268 + C84198 * C4222 + C19640 * C4213 +
            C32269 + C32269 + C84509 * C4221) *
               C35067 +
           (C19642 * C1181 + C21717 + C21717 + C84198 * C1191 + C19640 * C1182 +
            C21718 + C21718 + C84509 * C1192) *
               C35066 +
           (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
            C19660 + C19660 + C84509 * C115) *
               C35065) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C82024 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84509 +
            (C13750 + C13751 + C13752) * C81997 +
            (C13753 + C13754 + C13755) * C84198) *
               C84529 +
           ((C18936 + C18937 + C18938) * C82024 +
            (C18939 + C18940 + C18941) * C84509 +
            (C21829 + C21830 + C21831) * C81997 +
            (C21832 + C21833 + C21834) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C13724 * C3447 + C84558 * C3548 + C13723 * C3450 + C13622 * C3549 +
             C13722 * C1186 + C13621 * C1248) *
                C84198 +
            (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
             C13722 * C1181 + C13621 * C1243) *
                C81997 +
            (C21834 + C21833 + C21832) * C84509 +
            (C21831 + C21830 + C21829) * C82024) *
               C84344 +
           ((C13761 + C13760 + C13759) * C84198 +
            (C13758 + C13757 + C13756) * C81997 +
            (C13755 + C13754 + C13753) * C84509 +
            (C13752 + C13751 + C13750) * C82024) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C6685 +
            (C172 * C108 + C84246 * C179) * C6678 + C202 * C6687 +
            C203 * C6679 + C204 * C6689 + C205 * C6680 + C206 * C6691 +
            C207 * C84527) *
               C84529 +
           (C5975 * C6685 + C5976 * C6678 + C4332 * C6687 + C4333 * C6679 +
            C4334 * C6689 + C4335 * C6680 + C8803 * C6691 + C8804 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C172 * C1184 + C84246 * C1246) * C84527 +
            (C172 * C1179 + C84246 * C1241) * C6691 + C8804 * C6680 +
            C8803 * C6689 + C4335 * C6679 + C4334 * C6687 + C4333 * C6678 +
            C4332 * C6685) *
               C84344 +
           (C209 * C84527 + C208 * C6691 + C207 * C6680 + C206 * C6689 +
            C205 * C6679 + C204 * C6687 + C203 * C6678 + C202 * C6685) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82024 +
            (C172 * C108 + C84246 * C179) * C84509 + C202 * C81997 +
            C203 * C84198) *
               C35065 +
           (C5975 * C82024 + C5976 * C84509 + C4332 * C81997 + C4333 * C84198) *
               C35066 +
           (C5977 * C82024 + C5978 * C84509 + C4336 * C81997 + C4337 * C84198) *
               C35067 +
           (C31806 * C82024 + C31807 * C84509 + C35142 * C81997 +
            C35143 * C84198) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C172 * C5839 + C84246 * C5955) * C84198 +
            (C172 * C5836 + C84246 * C5952) * C81997 + C35143 * C84509 +
            C35142 * C82024) *
               C84543 +
           (C4339 * C84198 + C4338 * C81997 + C4337 * C84509 + C4336 * C82024) *
               C35067 +
           (C4335 * C84198 + C4334 * C81997 + C4333 * C84509 + C4332 * C82024) *
               C35066 +
           (C205 * C84198 + C204 * C81997 + C203 * C84509 + C202 * C82024) *
               C35065) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82024 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84509 +
            (C8897 + C8898) * C81997 + (C8899 + C8900) * C84198) *
               C13621 +
           ((C11976 + C11977) * C82024 + (C11978 + C11979) * C84509 +
            (C10999 + C11000) * C81997 + (C11001 + C11002) * C84198) *
               C13622 +
           ((C8870 * C1681 + C84529 * C1906 + C8871 * C3443 + C84344 * C3630) *
                C82024 +
            (C8870 * C1685 + C84529 * C1910 + C8871 * C3449 + C84344 * C3636) *
                C84509 +
            (C21941 + C21942) * C81997 + (C21943 + C21944) * C84198) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C8871 * C3447 + C84344 * C3634 + C8870 * C1687 + C84529 * C1912) *
                C84198 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C81997 +
            (C21944 + C21943) * C84509 + (C21942 + C21941) * C82024) *
               C84558 +
           ((C11006 + C11005) * C84198 + (C11004 + C11003) * C81997 +
            (C11002 + C11001) * C84509 + (C11000 + C10999) * C82024) *
               C13622 +
           ((C8904 + C8903) * C84198 + (C8902 + C8901) * C81997 +
            (C8900 + C8899) * C84509 + (C8898 + C8897) * C82024) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C6685 +
           (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
               C6678 +
           (C8897 + C8898) * C6687 + (C8899 + C8900) * C6679 +
           (C8901 + C8902) * C6689 + (C8903 + C8904) * C6680 +
           (C8905 + C8906) * C6691 + (C8907 + C8908) * C84527) *
              C84246 * C84603 * C84604 * C90 -
          ((C8871 * C1184 + C84344 * C1298 + C8870 * C112 + C84529 * C262) *
               C84527 +
           (C8871 * C1179 + C84344 * C1293 + C8870 * C106 + C84529 * C256) *
               C6691 +
           (C8908 + C8907) * C6680 + (C8906 + C8905) * C6689 +
           (C8904 + C8903) * C6679 + (C8902 + C8901) * C6687 +
           (C8900 + C8899) * C6678 + (C8898 + C8897) * C6685) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
            C35211 * C4212 + C35067 * C4416 + C35212 * C5838 + C84543 * C6058) *
               C82024 +
           (C35209 * C108 + C35065 * C258 + C35210 * C1188 + C35066 * C1302 +
            C35211 * C4216 + C35067 * C4420 + C35212 * C5841 + C84543 * C6061) *
               C84509 +
           (C35230 + C35231 + C35232 + C35233) * C81997 +
           (C35234 + C35235 + C35236 + C35237) * C84198) *
              C84246 * C84603 * C84604 * C90 -
          ((C35212 * C5839 + C84543 * C6059 + C35211 * C4218 + C35067 * C4422 +
            C35210 * C1186 + C35066 * C1300 + C35209 * C110 + C35065 * C260) *
               C84198 +
           (C35212 * C5836 + C84543 * C6056 + C35211 * C4214 + C35067 * C4418 +
            C35210 * C1181 + C35066 * C1295 + C35209 * C104 + C35065 * C254) *
               C81997 +
           (C35237 + C35236 + C35235 + C35234) * C84509 +
           (C35233 + C35232 + C35231 + C35230) * C82024) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C13722 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C13621 +
            (C20623 + C20624) * C13723 + (C20625 + C20626) * C13622 +
            (C20627 + C20628) * C13724 + (C20629 + C20630) * C84558) *
               C84529 +
           ((C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C13722 +
            (C82024 * C1245 + C84509 * C1349 + C81997 * C1244 +
             C84198 * C1348) *
                C13621 +
            (C82024 * C3446 + C84509 * C3452 + C81997 * C3445 +
             C84198 * C3451) *
                C13723 +
            (C82024 * C3547 + C84509 * C3719 + C81997 * C3545 +
             C84198 * C3718) *
                C13622 +
            (C82024 * C3443 + C84509 * C3449 + C81997 * C3442 +
             C84198 * C3448) *
                C13724 +
            (C82024 * C3546 + C84509 * C3716 + C81997 * C3544 +
             C84198 * C3715) *
                C84558) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C81997 * C3542 + C84198 * C3714 + C82024 * C3544 +
             C84509 * C3715) *
                C84558 +
            (C81997 * C3441 + C84198 * C3447 + C82024 * C3442 +
             C84509 * C3448) *
                C13724 +
            (C81997 * C3543 + C84198 * C3717 + C82024 * C3545 +
             C84509 * C3718) *
                C13622 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C13723 +
            (C81997 * C1243 + C84198 * C1347 + C82024 * C1244 +
             C84509 * C1348) *
                C13621 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C13722) *
               C84344 +
           ((C81997 * C1790 + C84198 * C2014 + C82024 * C1789 +
             C84509 * C2013) *
                C84558 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C13724 +
            (C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
                C13622 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C13723 +
            (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
                C13621 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C13722) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C172 +
            (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
             C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
                C84246) *
               C84529 +
           ((C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
             C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
                C172 +
            (C6685 * C1245 + C6678 * C1349 + C6687 * C1244 + C6679 * C1348 +
             C6689 * C1243 + C6680 * C1347 + C6691 * C1242 + C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C6691 * C1241 + C84527 * C1345 + C6689 * C1242 + C6680 * C1346 +
             C6687 * C1243 + C6679 * C1347 + C6685 * C1244 + C6678 * C1348) *
                C84246 +
            (C6691 * C1179 + C84527 * C1184 + C6689 * C1180 + C6680 * C1185 +
             C6687 * C1181 + C6679 * C1186 + C6685 * C1182 + C6678 * C1187) *
                C172) *
               C84344 +
           ((C6691 * C177 + C84527 * C334 + C6689 * C176 + C6680 * C333 +
             C6687 * C175 + C6679 * C332 + C6685 * C174 + C6678 * C331) *
                C84246 +
            (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
             C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
                C172) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C172 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84246) *
               C35065 +
           ((C23962 + C23963) * C172 + (C23964 + C23965) * C84246) * C35066 +
           ((C34472 + C34473) * C172 + (C34474 + C34475) * C84246) * C35067 +
           ((C82024 * C5838 + C84509 * C5841 + C81997 * C5837 +
             C84198 * C5840) *
                C172 +
            (C82024 * C5954 + C84509 * C6138 + C81997 * C5953 +
             C84198 * C6137) *
                C84246) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C81997 * C5952 + C84198 * C6136 + C82024 * C5953 +
             C84509 * C6137) *
                C84246 +
            (C81997 * C5836 + C84198 * C5839 + C82024 * C5837 +
             C84509 * C5840) *
                C172) *
               C84543 +
           ((C81997 * C4309 + C84198 * C4536 + C82024 * C4308 +
             C84509 * C4535) *
                C84246 +
            (C81997 * C4214 + C84198 * C4218 + C82024 * C4213 +
             C84509 * C4217) *
                C172) *
               C35067 +
           ((C81997 * C1243 + C84198 * C1347 + C82024 * C1244 +
             C84509 * C1348) *
                C84246 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C172) *
               C35066 +
           ((C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
                C84246 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C172) *
               C35065) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
             C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 +
             C13989 + C84558 * C2093) *
                C84509 +
            (C14023 + C14024 + C14025) * C84198) *
               C84529 +
           ((C19229 + C19230 + C19231) * C84509 +
            (C22153 + C22154 + C22155) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C13985 * C3441 + C15514 + C15514 + C84558 * C3794 +
             C13984 * C3444 + C15515 + C15515 + C13622 * C3795 +
             C13983 * C1181 + C15516 + C15516 + C13621 * C1394) *
                C84198 +
            (C22155 + C22154 + C22153) * C84509) *
               C84344 +
           ((C14028 + C14027 + C14026) * C84198 +
            (C14025 + C14024 + C14023) * C84509) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C6678 + C408 * C6679 +
            C409 * C6680 + C410 * C84527) *
               C84529 +
           (C6268 * C6678 + C4637 * C6679 + C4638 * C6680 + C9045 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C84527 +
            C9045 * C6680 + C4638 * C6679 + C4637 * C6678) *
               C84344 +
           (C411 * C84527 + C410 * C6680 + C409 * C6679 + C408 * C6678) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84509 +
            C408 * C84198) *
               C35065 +
           (C6268 * C84509 + C4637 * C84198) * C35066 +
           (C6269 * C84509 + C4639 * C84198) * C35067 +
           (C31975 * C84509 + C35374 * C84198) * C84543) *
              C84603 * C84604 * C90 -
          (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C84198 +
            C35374 * C84509) *
               C84543 +
           (C4640 * C84198 + C4639 * C84509) * C35067 +
           (C4638 * C84198 + C4637 * C84509) * C35066 +
           (C409 * C84198 + C408 * C84509) * C35065) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C13722 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C13621 +
            (C11976 + C11977) * C13723 + (C12302 + C12303) * C13622 +
            (C8870 * C1681 + C84529 * C1906 + C8871 * C3443 + C84344 * C3630) *
                C13724 +
            (C8870 * C1788 + C84529 * C2213 + C8871 * C3546 + C84344 * C3887) *
                C84558) *
               C84509 +
           ((C8897 + C8898) * C13722 + (C9124 + C9125) * C13621 +
            (C10999 + C11000) * C13723 + (C11329 + C11330) * C13622 +
            (C21941 + C21942) * C13724 + (C22258 + C22259) * C84558) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C8871 * C3542 + C84344 * C3883 + C8870 * C1790 + C84529 * C2215) *
                C84558 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C13724 +
            (C11332 + C11331) * C13622 + (C11004 + C11003) * C13723 +
            (C9127 + C9126) * C13621 + (C8902 + C8901) * C13722) *
               C84198 +
           ((C22259 + C22258) * C84558 + (C21942 + C21941) * C13724 +
            (C11330 + C11329) * C13622 + (C11000 + C10999) * C13723 +
            (C9125 + C9124) * C13621 + (C8898 + C8897) * C13722) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C172 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84246) *
               C6678 +
           ((C8897 + C8898) * C172 + (C9124 + C9125) * C84246) * C6679 +
           ((C8901 + C8902) * C172 + (C9126 + C9127) * C84246) * C6680 +
           ((C8905 + C8906) * C172 + (C9128 + C9129) * C84246) * C84527) *
              C84603 * C84604 * C90 -
          (((C8871 * C1241 + C84344 * C1444 + C8870 * C177 + C84529 * C457) *
                C84246 +
            (C8871 * C1179 + C84344 * C1293 + C8870 * C106 + C84529 * C256) *
                C172) *
               C84527 +
           ((C9129 + C9128) * C84246 + (C8906 + C8905) * C172) * C6680 +
           ((C9127 + C9126) * C84246 + (C8902 + C8901) * C172) * C6679 +
           ((C9125 + C9124) * C84246 + (C8898 + C8897) * C172) * C6678) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
             C35211 * C4212 + C35067 * C4416 + C35212 * C5838 +
             C84543 * C6058) *
                C172 +
            (C35209 * C173 + C35065 * C453 + C35210 * C1245 + C35066 * C1448 +
             C35211 * C4307 + C35067 * C4714 + C35212 * C5954 +
             C84543 * C6347) *
                C84246) *
               C84509 +
           ((C35230 + C35231 + C35232 + C35233) * C172 +
            (C35449 + C35450 + C35451 + C35452) * C84246) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C35212 * C5952 + C84543 * C6345 + C35211 * C4309 + C35067 * C4716 +
             C35210 * C1243 + C35066 * C1446 + C35209 * C175 + C35065 * C455) *
                C84246 +
            (C35212 * C5836 + C84543 * C6056 + C35211 * C4214 + C35067 * C4418 +
             C35210 * C1181 + C35066 * C1295 + C35209 * C104 + C35065 * C254) *
                C172) *
               C84198 +
           ((C35452 + C35451 + C35450 + C35449) * C84246 +
            (C35233 + C35232 + C35231 + C35230) * C172) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C8870 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84529 +
            (C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C8871 +
            (C82024 * C1297 + C84509 * C1495 + C81997 * C1296 +
             C84198 * C1494) *
                C84344) *
               C13621 +
           ((C20623 + C20624) * C8870 + (C20853 + C20854) * C84529 +
            (C82024 * C3446 + C84509 * C3452 + C81997 * C3445 +
             C84198 * C3451) *
                C8871 +
            (C82024 * C3633 + C84509 * C3968 + C81997 * C3632 +
             C84198 * C3967) *
                C84344) *
               C13622 +
           ((C20627 + C20628) * C8870 + (C20855 + C20856) * C84529 +
            (C82024 * C3443 + C84509 * C3449 + C81997 * C3442 +
             C84198 * C3448) *
                C8871 +
            (C82024 * C3630 + C84509 * C3965 + C81997 * C3629 +
             C84198 * C3964) *
                C84344) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C81997 * C3628 + C84198 * C3963 + C82024 * C3629 +
             C84509 * C3964) *
                C84344 +
            (C81997 * C3441 + C84198 * C3447 + C82024 * C3442 +
             C84509 * C3448) *
                C8871 +
            (C81997 * C1908 + C84198 * C2317 + C82024 * C1907 +
             C84509 * C2316) *
                C84529 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C8870) *
               C84558 +
           ((C81997 * C3631 + C84198 * C3966 + C82024 * C3632 +
             C84509 * C3967) *
                C84344 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C8871 +
            (C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C84529 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C8870) *
               C13622 +
           ((C81997 * C1295 + C84198 * C1493 + C82024 * C1296 +
             C84509 * C1494) *
                C84344 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C8871 +
            (C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C84529 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C8870) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C8870 +
           (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
            C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
               C84529 +
           (C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
            C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
               C8871 +
           (C6685 * C1297 + C6678 * C1495 + C6687 * C1296 + C6679 * C1494 +
            C6689 * C1295 + C6680 * C1493 + C6691 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C6691 * C1293 + C84527 * C1491 + C6689 * C1294 + C6680 * C1492 +
            C6687 * C1295 + C6679 * C1493 + C6685 * C1296 + C6678 * C1494) *
               C84344 +
           (C6691 * C1179 + C84527 * C1184 + C6689 * C1180 + C6680 * C1185 +
            C6687 * C1181 + C6679 * C1186 + C6685 * C1182 + C6678 * C1187) *
               C8871 +
           (C6691 * C256 + C84527 * C525 + C6689 * C255 + C6680 * C524 +
            C6687 * C254 + C6679 * C523 + C6685 * C253 + C6678 * C522) *
               C84529 +
           (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
            C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
               C8870) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C35209 +
           (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
               C35065 +
           (C23962 + C23963) * C35210 + (C24264 + C24265) * C35066 +
           (C34472 + C34473) * C35211 + (C34791 + C34792) * C35067 +
           (C82024 * C5838 + C84509 * C5841 + C81997 * C5837 + C84198 * C5840) *
               C35212 +
           (C82024 * C6058 + C84509 * C6424 + C81997 * C6057 + C84198 * C6423) *
               C84543) *
              C84246 * C84603 * C84604 * C90 -
          ((C81997 * C6056 + C84198 * C6422 + C82024 * C6057 + C84509 * C6423) *
               C84543 +
           (C81997 * C5836 + C84198 * C5839 + C82024 * C5837 + C84509 * C5840) *
               C35212 +
           (C81997 * C4418 + C84198 * C4812 + C82024 * C4417 + C84509 * C4811) *
               C35067 +
           (C81997 * C4214 + C84198 * C4218 + C82024 * C4213 + C84509 * C4217) *
               C35211 +
           (C81997 * C1295 + C84198 * C1493 + C82024 * C1296 + C84509 * C1494) *
               C35066 +
           (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 + C84509 * C1187) *
               C35210 +
           (C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
               C35065 +
           (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
               C35209) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13722 * C102 + C13621 * C173 + C13723 * C723 +
                       C13622 * C785 + C13724 * C1681 + C84558 * C1788) *
                          C8870 +
                      (C13722 * C252 + C13621 * C569 + C13723 * C837 +
                       C13622 * C1082 + C13724 * C1906 + C84558 * C2393) *
                          C84529 +
                      (C18936 + C18937 + C18938) * C8871 +
                      (C19481 + C19482 + C19483) * C84344) *
                         C84509 +
                     ((C13750 + C13751 + C13752) * C8870 +
                      (C14275 + C14276 + C14277) * C84529 +
                      (C21829 + C21830 + C21831) * C8871 +
                      (C22462 + C22463 + C22464) * C84344) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C13724 * C3628 + C84558 * C4043 + C13723 * C3631 +
                       C13622 * C4044 + C13722 * C1295 + C13621 * C1540) *
                          C84344 +
                      (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 +
                       C13622 * C3543 + C13722 * C1181 + C13621 * C1243) *
                          C8871 +
                      (C14280 + C14279 + C14278) * C84529 +
                      (C13758 + C13757 + C13756) * C8870) *
                         C84198 +
                     ((C22464 + C22463 + C22462) * C84344 +
                      (C21831 + C21830 + C21829) * C8871 +
                      (C14277 + C14276 + C14275) * C84529 +
                      (C13752 + C13751 + C13750) * C8870) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C8870 +
                      (C172 * C252 + C84246 * C569) * C84529 + C5975 * C8871 +
                      C6525 * C84344) *
                         C6678 +
                     (C9262 + C9263 + C9264 + C9265) * C6679 +
                     (C9266 + C9267 + C9268 + C9269) * C6680 +
                     (C9270 + C9271 + C9272 + C9276) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C172 * C1293 + C84246 * C1538) * C84344 +
                      (C172 * C1179 + C84246 * C1241) * C8871 + C591 * C84529 +
                      C208 * C8870) *
                         C84527 +
                     (C9276 + C9272 + C9271 + C9270) * C6680 +
                     (C9269 + C9268 + C9267 + C9266) * C6679 +
                     (C9265 + C9264 + C9263 + C9262) * C6678) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C35209 +
                      (C172 * C252 + C84246 * C569) * C35065 + C5975 * C35210 +
                      C6525 * C35066 + C5977 * C35211 + C6526 * C35067 +
                      C31806 * C35212 + C32118 * C84543) *
                         C84509 +
                     (C35585 + C35586 + C35587 + C35588 + C35589 + C35590 +
                      C35591 + C35595) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C172 * C6056 + C84246 * C6517) * C84543 +
                      (C172 * C5836 + C84246 * C5952) * C35212 +
                      C4912 * C35067 + C4338 * C35211 + C4911 * C35066 +
                      C4334 * C35210 + C589 * C35065 + C204 * C35209) *
                         C84198 +
                     (C35595 + C35591 + C35590 + C35589 + C35588 + C35587 +
                      C35586 + C35585) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C13621 +
            (C12621 + C12622) * C13622 +
            (C9342 * C1681 + C12616 + C12616 + C84529 * C2489 + C9343 * C3443 +
             C12615 + C12615 + C84344 * C4127) *
                C84558) *
               C84509 +
           ((C9379 + C9380) * C13621 + (C11655 + C11656) * C13622 +
            (C22571 + C22572) * C84558) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C9343 * C3441 + C12611 + C12611 + C84344 * C4123 + C9342 * C1683 +
             C12612 + C12612 + C84529 * C2491) *
                C84558 +
            (C11658 + C11657) * C13622 + (C9382 + C9381) * C13621) *
               C84198 +
           ((C22572 + C22571) * C84558 + (C11656 + C11655) * C13622 +
            (C9380 + C9379) * C13621) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C84246 * C6678 +
           (C9379 + C9380) * C84246 * C6679 + (C9381 + C9382) * C84246 * C6680 +
           (C9383 + C9384) * C84246 * C84527) *
              C84603 * C84604 * C90 -
          ((C9343 * C1179 + C9365 + C9365 + C84344 * C1585 + C9342 * C106 +
            C9366 + C9366 + C84529 * C642) *
               C84246 * C84527 +
           (C9384 + C9383) * C84246 * C6680 + (C9382 + C9381) * C84246 * C6679 +
           (C9380 + C9379) * C84246 * C6678) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35661 * C102 + C35666 + C35666 + C35065 * C638 + C35662 * C1183 +
            C35667 + C35667 + C35066 * C1589 + C35663 * C4212 + C35668 +
            C35668 + C35067 * C4993 + C35664 * C5838 + C35669 + C35669 +
            C84543 * C6602) *
               C84246 * C84509 +
           (C35694 + C35695 + C35696 + C35697) * C84246 * C84198) *
              C84603 * C84604 * C90 -
          ((C35664 * C5836 + C35682 + C35682 + C84543 * C6600 + C35663 * C4214 +
            C35683 + C35683 + C35067 * C4995 + C35662 * C1181 + C35684 +
            C35684 + C35066 * C1587 + C35661 * C104 + C35685 + C35685 +
            C35065 * C640) *
               C84246 * C84198 +
           (C35697 + C35696 + C35695 + C35694) * C84246 * C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C84529 +
            (C19640 * C1183 + C21067 + C21067 + C84509 * C1193 +
             C19642 * C1182 + C21066 + C21066 + C84198 * C1192) *
                C84344) *
               C13621 +
           ((C20383 + C20384) * C84529 + (C22687 + C22688) * C84344) * C13622 +
           ((C20385 + C20386) * C84529 + (C22689 + C22690) * C84344) * C84558) *
              C84603 * C716 -
          (((C19642 * C21056 + C21060 + C21060 + C84198 * C21058 +
             C19640 * C16807 + C21061 + C21061 + C84509 * C16811) *
                C84344 +
            (C20388 + C20387) * C84529) *
               C84558 +
           ((C22690 + C22689) * C84344 + (C20386 + C20385) * C84529) * C13622 +
           ((C22688 + C22687) * C84344 + (C20384 + C20383) * C84529) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84529 +
           (C6684 * C1183 + C8113 + C8113 + C6678 * C1193 + C6686 * C1182 +
            C8112 + C8112 + C6679 * C1192 + C6688 * C1181 + C8111 + C8111 +
            C6680 * C1191 + C6690 * C1180 + C8110 + C8110 + C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C6690 * C8102 + C8106 + C8106 + C84527 * C8104 + C6688 * C3444 +
            C8107 + C8107 + C6680 * C3456 + C6686 * C3445 + C8108 + C8108 +
            C6679 * C3457 + C6684 * C3446 + C8109 + C8109 + C6678 * C3458) *
               C84344 +
           (C7456 + C7455 + C7454 + C7453) * C84529) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C35065 +
           (C23658 + C23659) * C35066 + (C34151 + C34152) * C35067 +
           (C19640 * C5838 + C34146 + C34146 + C84509 * C5844 + C19642 * C5837 +
            C34145 + C34145 + C84198 * C5843) *
               C84543) *
              C84246 * C84603 * C716 -
          ((C19642 * C34135 + C34143 + C34143 + C84198 * C34137 +
            C19640 * C18815 + C34144 + C34144 + C84509 * C18819) *
               C84543 +
           (C33231 + C33230) * C35067 + (C22688 + C22687) * C35066 +
           (C20384 + C20383) * C35065) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C82024 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84509 +
            (C13750 + C13751 + C13752) * C81997 +
            (C13753 + C13754 + C13755) * C84198) *
               C84529 +
           ((C18936 + C18937 + C18938) * C82024 +
            (C18939 + C18940 + C18941) * C84509 +
            (C21829 + C21830 + C21831) * C81997 +
            (C21832 + C21833 + C21834) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C13724 * C21057 + C84558 * C21134 + C13723 * C3448 +
             C13622 * C3550 + C13722 * C3451 + C13621 * C3551) *
                C84198 +
            (C13724 * C21056 + C84558 * C21133 + C13723 * C3442 +
             C13622 * C3544 + C13722 * C3445 + C13621 * C3545) *
                C81997 +
            (C13724 * C16809 + C84558 * C16862 + C13723 * C3449 +
             C13622 * C3552 + C13722 * C3452 + C13621 * C3553) *
                C84509 +
            (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
             C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
                C82024) *
               C84344 +
           ((C13724 * C2601 + C84558 * C2717 + C13723 * C1686 + C13622 * C1793 +
             C13722 * C727 + C13621 * C789) *
                C84198 +
            (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
             C13722 * C722 + C13621 * C784) *
                C81997 +
            (C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
             C13722 * C728 + C13621 * C790) *
                C84509 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C82024) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C6685 +
            (C172 * C108 + C84246 * C179) * C6678 + C202 * C6687 +
            C203 * C6679 + C204 * C6689 + C205 * C6680 + C206 * C6691 +
            C207 * C84527) *
               C84529 +
           (C5975 * C6685 + C5976 * C6678 + C4332 * C6687 + C4333 * C6679 +
            C4334 * C6689 + C4335 * C6680 + C8803 * C6691 + C8804 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C172 * C8103 + C84246 * C8180) * C84527 +
            (C172 * C8102 + C84246 * C8179) * C6691 +
            (C172 * C3450 + C84246 * C3549) * C6680 +
            (C172 * C3444 + C84246 * C3543) * C6689 +
            (C172 * C3451 + C84246 * C3551) * C6679 +
            (C172 * C3445 + C84246 * C3545) * C6687 +
            (C172 * C3452 + C84246 * C3553) * C6678 +
            (C172 * C3446 + C84246 * C3547) * C6685) *
               C84344 +
           ((C172 * C725 + C84246 * C787) * C84527 +
            (C172 * C720 + C84246 * C782) * C6691 +
            (C172 * C726 + C84246 * C788) * C6680 +
            (C172 * C721 + C84246 * C783) * C6689 +
            (C172 * C727 + C84246 * C789) * C6679 +
            (C172 * C722 + C84246 * C784) * C6687 +
            (C172 * C728 + C84246 * C790) * C6678 +
            (C172 * C723 + C84246 * C785) * C6685) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82024 +
            (C172 * C108 + C84246 * C179) * C84509 + C202 * C81997 +
            C203 * C84198) *
               C35065 +
           (C5975 * C82024 + C5976 * C84509 + C4332 * C81997 + C4333 * C84198) *
               C35066 +
           (C5977 * C82024 + C5978 * C84509 + C4336 * C81997 + C4337 * C84198) *
               C35067 +
           (C31806 * C82024 + C31807 * C84509 + C35142 * C81997 +
            C35143 * C84198) *
               C84543) *
              C84603 * C716 -
          (((C172 * C34136 + C84246 * C34251) * C84198 +
            (C172 * C34135 + C84246 * C34250) * C81997 +
            (C172 * C18817 + C84246 * C18910) * C84509 +
            (C172 * C18815 + C84246 * C18908) * C82024) *
               C84543 +
           ((C172 * C5117 + C84246 * C5203) * C84198 +
            (C172 * C5114 + C84246 * C5200) * C81997 +
            (C172 * C5118 + C84246 * C5204) * C84509 +
            (C172 * C5115 + C84246 * C5201) * C82024) *
               C35067 +
           ((C172 * C3451 + C84246 * C3551) * C84198 +
            (C172 * C3445 + C84246 * C3545) * C81997 +
            (C172 * C3452 + C84246 * C3553) * C84509 +
            (C172 * C3446 + C84246 * C3547) * C82024) *
               C35066 +
           ((C172 * C727 + C84246 * C789) * C84198 +
            (C172 * C722 + C84246 * C784) * C81997 +
            (C172 * C728 + C84246 * C790) * C84509 +
            (C172 * C723 + C84246 * C785) * C82024) *
               C35065) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82024 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84509 +
            (C8897 + C8898) * C81997 + (C8899 + C8900) * C84198) *
               C13621 +
           ((C11976 + C11977) * C82024 + (C11978 + C11979) * C84509 +
            (C10999 + C11000) * C81997 + (C11001 + C11002) * C84198) *
               C13622 +
           ((C22895 + C22896) * C82024 + (C22897 + C22898) * C84509 +
            (C21941 + C21942) * C81997 + (C21943 + C21944) * C84198) *
               C84558) *
              C84603 * C716 -
          (((C8871 * C21057 + C84344 * C21202 + C8870 * C2601 +
             C84529 * C2797) *
                C84198 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C81997 +
            (C8871 * C16809 + C84344 * C16908 + C8870 * C2602 +
             C84529 * C2798) *
                C84509 +
            (C8871 * C16807 + C84344 * C16906 + C8870 * C2599 +
             C84529 * C2795) *
                C82024) *
               C84558 +
           ((C21944 + C21943) * C84198 + (C21942 + C21941) * C81997 +
            (C22898 + C22897) * C84509 + (C22896 + C22895) * C82024) *
               C13622 +
           ((C11002 + C11001) * C84198 + (C11000 + C10999) * C81997 +
            (C11979 + C11978) * C84509 + (C11977 + C11976) * C82024) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C6685 +
           (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
               C6678 +
           (C8897 + C8898) * C6687 + (C8899 + C8900) * C6679 +
           (C8901 + C8902) * C6689 + (C8903 + C8904) * C6680 +
           (C8905 + C8906) * C6691 + (C8907 + C8908) * C84527) *
              C84246 * C84603 * C716 -
          ((C8871 * C8103 + C84344 * C8248 + C8870 * C725 + C84529 * C839) *
               C84527 +
           (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
               C6691 +
           (C8871 * C3450 + C84344 * C3637 + C8870 * C726 + C84529 * C840) *
               C6680 +
           (C8871 * C3444 + C84344 * C3631 + C8870 * C721 + C84529 * C835) *
               C6689 +
           (C8871 * C3451 + C84344 * C3638 + C8870 * C727 + C84529 * C841) *
               C6679 +
           (C8871 * C3445 + C84344 * C3632 + C8870 * C722 + C84529 * C836) *
               C6687 +
           (C8871 * C3452 + C84344 * C3639 + C8870 * C728 + C84529 * C842) *
               C6678 +
           (C8871 * C3446 + C84344 * C3633 + C8870 * C723 + C84529 * C837) *
               C6685) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
            C35211 * C4212 + C35067 * C4416 + C35212 * C5838 + C84543 * C6058) *
               C82024 +
           (C35209 * C108 + C35065 * C258 + C35210 * C1188 + C35066 * C1302 +
            C35211 * C4216 + C35067 * C4420 + C35212 * C5841 + C84543 * C6061) *
               C84509 +
           (C35230 + C35231 + C35232 + C35233) * C81997 +
           (C35234 + C35235 + C35236 + C35237) * C84198) *
              C84246 * C84603 * C716 -
          ((C35212 * C34136 + C84543 * C34363 + C35211 * C5117 +
            C35067 * C5283 + C35210 * C3451 + C35066 * C3638 + C35209 * C727 +
            C35065 * C841) *
               C84198 +
           (C35212 * C34135 + C84543 * C34362 + C35211 * C5114 +
            C35067 * C5280 + C35210 * C3445 + C35066 * C3632 + C35209 * C722 +
            C35065 * C836) *
               C81997 +
           (C35212 * C18817 + C84543 * C19024 + C35211 * C5118 +
            C35067 * C5284 + C35210 * C3452 + C35066 * C3639 + C35209 * C728 +
            C35065 * C842) *
               C84509 +
           (C35212 * C18815 + C84543 * C19022 + C35211 * C5115 +
            C35067 * C5281 + C35210 * C3446 + C35066 * C3633 + C35209 * C723 +
            C35065 * C837) *
               C82024) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C13722 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C13621 +
            (C20623 + C20624) * C13723 + (C20625 + C20626) * C13622 +
            (C20627 + C20628) * C13724 + (C20629 + C20630) * C84558) *
               C84529 +
           ((C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C13722 +
            (C82024 * C1245 + C84509 * C1349 + C81997 * C1244 +
             C84198 * C1348) *
                C13621 +
            (C23013 + C23014) * C13723 + (C23015 + C23016) * C13622 +
            (C23017 + C23018) * C13724 + (C23019 + C23020) * C84558) *
               C84344) *
              C84603 * C716 -
          (((C81997 * C21133 + C84198 * C21269 + C82024 * C16860 +
             C84509 * C16952) *
                C84558 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C13724 +
            (C23020 + C23019) * C13622 + (C23018 + C23017) * C13723 +
            (C23016 + C23015) * C13621 + (C23014 + C23013) * C13722) *
               C84344 +
           ((C20634 + C20633) * C84558 + (C20632 + C20631) * C13724 +
            (C20630 + C20629) * C13622 + (C20628 + C20627) * C13723 +
            (C20626 + C20625) * C13621 + (C20624 + C20623) * C13722) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C172 +
            (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
             C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
                C84246) *
               C84529 +
           ((C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
             C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
                C172 +
            (C6685 * C1245 + C6678 * C1349 + C6687 * C1244 + C6679 * C1348 +
             C6689 * C1243 + C6680 * C1347 + C6691 * C1242 + C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C716 -
          (((C6691 * C8179 + C84527 * C8315 + C6689 * C3543 + C6680 * C3717 +
             C6687 * C3545 + C6679 * C3718 + C6685 * C3547 + C6678 * C3719) *
                C84246 +
            (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
             C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
                C172) *
               C84344 +
           ((C7686 + C7685 + C7684 + C7683) * C84246 +
            (C7682 + C7681 + C7680 + C7679) * C172) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C172 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84246) *
               C35065 +
           ((C23962 + C23963) * C172 + (C23964 + C23965) * C84246) * C35066 +
           ((C34472 + C34473) * C172 + (C34474 + C34475) * C84246) * C35067 +
           ((C82024 * C5838 + C84509 * C5841 + C81997 * C5837 +
             C84198 * C5840) *
                C172 +
            (C82024 * C5954 + C84509 * C6138 + C81997 * C5953 +
             C84198 * C6137) *
                C84246) *
               C84543) *
              C84603 * C716 -
          (((C81997 * C34250 + C84198 * C34462 + C82024 * C18908 +
             C84509 * C19100) *
                C84246 +
            (C81997 * C34135 + C84198 * C34136 + C82024 * C18815 +
             C84509 * C18817) *
                C172) *
               C84543 +
           ((C33537 + C33536) * C84246 + (C33535 + C33534) * C172) * C35067 +
           ((C23016 + C23015) * C84246 + (C23014 + C23013) * C172) * C35066 +
           ((C20626 + C20625) * C84246 + (C20624 + C20623) * C172) * C35065) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
             C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 +
             C13989 + C84558 * C2093) *
                C84509 +
            (C14023 + C14024 + C14025) * C84198) *
               C84529 +
           ((C19229 + C19230 + C19231) * C84509 +
            (C22153 + C22154 + C22155) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C13985 * C21056 + C23119 + C23119 + C84558 * C21336 +
             C13984 * C3442 + C23120 + C23120 + C13622 * C3796 +
             C13983 * C3445 + C23121 + C23121 + C13621 * C3797) *
                C84198 +
            (C13985 * C16807 + C18363 + C18363 + C84558 * C16996 +
             C13984 * C3443 + C18364 + C18364 + C13622 * C3798 +
             C13983 * C3446 + C18365 + C18365 + C13621 * C3799) *
                C84509) *
               C84344 +
           ((C13985 * C2598 + C14815 + C14815 + C84558 * C3011 +
             C13984 * C1682 + C14816 + C14816 + C13622 * C2094 + C13983 * C722 +
             C14817 + C14817 + C13621 * C935) *
                C84198 +
            (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 +
             C13984 * C1681 + C14819 + C14819 + C13622 * C2093 + C13983 * C723 +
             C14820 + C14820 + C13621 * C936) *
                C84509) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C6678 + C408 * C6679 +
            C409 * C6680 + C410 * C84527) *
               C84529 +
           (C6268 * C6678 + C4637 * C6679 + C4638 * C6680 + C9045 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C378 * C8102 + C9715 + C9715 + C84246 * C8382) * C84527 +
            (C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C6680 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C6679 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C6678) *
               C84344 +
           ((C378 * C720 + C939 + C939 + C84246 * C933) * C84527 +
            (C378 * C721 + C940 + C940 + C84246 * C934) * C6680 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C6679 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C6678) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84509 +
            C408 * C84198) *
               C35065 +
           (C6268 * C84509 + C4637 * C84198) * C35066 +
           (C6269 * C84509 + C4639 * C84198) * C35067 +
           (C31975 * C84509 + C35374 * C84198) * C84543) *
              C84603 * C716 -
          (((C378 * C34135 + C36028 + C36028 + C84246 * C34573) * C84198 +
            (C378 * C18815 + C31516 + C31516 + C84246 * C19200) * C84509) *
               C84543 +
           ((C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C84198 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C84509) *
               C35067 +
           ((C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84198 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84509) *
               C35066 +
           ((C378 * C722 + C941 + C941 + C84246 * C935) * C84198 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C84509) *
               C35065) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C13722 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C13621 +
            (C11976 + C11977) * C13723 + (C12302 + C12303) * C13622 +
            (C22895 + C22896) * C13724 + (C23224 + C23225) * C84558) *
               C84509 +
           ((C8897 + C8898) * C13722 + (C9124 + C9125) * C13621 +
            (C10999 + C11000) * C13723 + (C11329 + C11330) * C13622 +
            (C21941 + C21942) * C13724 + (C22258 + C22259) * C84558) *
               C84198) *
              C84603 * C716 -
          (((C8871 * C21133 + C84344 * C21411 + C8870 * C2714 +
             C84529 * C3097) *
                C84558 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C13724 +
            (C22259 + C22258) * C13622 + (C21942 + C21941) * C13723 +
            (C11330 + C11329) * C13621 + (C11000 + C10999) * C13722) *
               C84198 +
           ((C8871 * C16860 + C84344 * C17045 + C8870 * C2715 +
             C84529 * C3098) *
                C84558 +
            (C8871 * C16807 + C84344 * C16906 + C8870 * C2599 +
             C84529 * C2795) *
                C13724 +
            (C23225 + C23224) * C13622 + (C22896 + C22895) * C13723 +
            (C12303 + C12302) * C13621 + (C11977 + C11976) * C13722) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C172 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84246) *
               C6678 +
           ((C8897 + C8898) * C172 + (C9124 + C9125) * C84246) * C6679 +
           ((C8901 + C8902) * C172 + (C9126 + C9127) * C84246) * C6680 +
           ((C8905 + C8906) * C172 + (C9128 + C9129) * C84246) * C84527) *
              C84603 * C716 -
          (((C8871 * C8179 + C84344 * C8457 + C8870 * C782 + C84529 * C985) *
                C84246 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C172) *
               C84527 +
           ((C8871 * C3543 + C84344 * C3884 + C8870 * C783 + C84529 * C986) *
                C84246 +
            (C8871 * C3444 + C84344 * C3631 + C8870 * C721 + C84529 * C835) *
                C172) *
               C6680 +
           ((C8871 * C3545 + C84344 * C3886 + C8870 * C784 + C84529 * C987) *
                C84246 +
            (C8871 * C3445 + C84344 * C3632 + C8870 * C722 + C84529 * C836) *
                C172) *
               C6679 +
           ((C8871 * C3547 + C84344 * C3888 + C8870 * C785 + C84529 * C988) *
                C84246 +
            (C8871 * C3446 + C84344 * C3633 + C8870 * C723 + C84529 * C837) *
                C172) *
               C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
             C35211 * C4212 + C35067 * C4416 + C35212 * C5838 +
             C84543 * C6058) *
                C172 +
            (C35209 * C173 + C35065 * C453 + C35210 * C1245 + C35066 * C1448 +
             C35211 * C4307 + C35067 * C4714 + C35212 * C5954 +
             C84543 * C6347) *
                C84246) *
               C84509 +
           ((C35230 + C35231 + C35232 + C35233) * C172 +
            (C35449 + C35450 + C35451 + C35452) * C84246) *
               C84198) *
              C84603 * C716 -
          (((C35212 * C34250 + C84543 * C34686 + C35211 * C5200 +
             C35067 * C5520 + C35210 * C3545 + C35066 * C3886 + C35209 * C784 +
             C35065 * C987) *
                C84246 +
            (C35212 * C34135 + C84543 * C34362 + C35211 * C5114 +
             C35067 * C5280 + C35210 * C3445 + C35066 * C3632 + C35209 * C722 +
             C35065 * C836) *
                C172) *
               C84198 +
           ((C35212 * C18908 + C84543 * C19309 + C35211 * C5201 +
             C35067 * C5521 + C35210 * C3547 + C35066 * C3888 + C35209 * C785 +
             C35065 * C988) *
                C84246 +
            (C35212 * C18815 + C84543 * C19022 + C35211 * C5115 +
             C35067 * C5281 + C35210 * C3446 + C35066 * C3633 + C35209 * C723 +
             C35065 * C837) *
                C172) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C8870 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84529 +
            (C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C8871 +
            (C82024 * C1297 + C84509 * C1495 + C81997 * C1296 +
             C84198 * C1494) *
                C84344) *
               C13621 +
           ((C20623 + C20624) * C8870 + (C20853 + C20854) * C84529 +
            (C23013 + C23014) * C8871 + (C23332 + C23333) * C84344) *
               C13622 +
           ((C20627 + C20628) * C8870 + (C20855 + C20856) * C84529 +
            (C23017 + C23018) * C8871 + (C23334 + C23335) * C84344) *
               C84558) *
              C84603 * C716 -
          (((C81997 * C21201 + C84198 * C21478 + C82024 * C16906 +
             C84509 * C17089) *
                C84344 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C8871 +
            (C20858 + C20857) * C84529 + (C20632 + C20631) * C8870) *
               C84558 +
           ((C23335 + C23334) * C84344 + (C23018 + C23017) * C8871 +
            (C20856 + C20855) * C84529 + (C20628 + C20627) * C8870) *
               C13622 +
           ((C23333 + C23332) * C84344 + (C23014 + C23013) * C8871 +
            (C20854 + C20853) * C84529 + (C20624 + C20623) * C8870) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C8870 +
           (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
            C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
               C84529 +
           (C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
            C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
               C8871 +
           (C6685 * C1297 + C6678 * C1495 + C6687 * C1296 + C6679 * C1494 +
            C6689 * C1295 + C6680 * C1493 + C6691 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C6691 * C8247 + C84527 * C8524 + C6689 * C3631 + C6680 * C3966 +
            C6687 * C3632 + C6679 * C3967 + C6685 * C3633 + C6678 * C3968) *
               C84344 +
           (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
            C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
               C8871 +
           (C7904 + C7903 + C7902 + C7901) * C84529 +
           (C7682 + C7681 + C7680 + C7679) * C8870) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C35209 +
           (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
               C35065 +
           (C23962 + C23963) * C35210 + (C24264 + C24265) * C35066 +
           (C34472 + C34473) * C35211 + (C34791 + C34792) * C35067 +
           (C82024 * C5838 + C84509 * C5841 + C81997 * C5837 + C84198 * C5840) *
               C35212 +
           (C82024 * C6058 + C84509 * C6424 + C81997 * C6057 + C84198 * C6423) *
               C84543) *
              C84246 * C84603 * C716 -
          ((C81997 * C34362 + C84198 * C34785 + C82024 * C19022 +
            C84509 * C19385) *
               C84543 +
           (C81997 * C34135 + C84198 * C34136 + C82024 * C18815 +
            C84509 * C18817) *
               C35212 +
           (C33841 + C33840) * C35067 + (C33535 + C33534) * C35211 +
           (C23333 + C23332) * C35066 + (C23014 + C23013) * C35210 +
           (C20854 + C20853) * C35065 + (C20624 + C20623) * C35209) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13722 * C102 + C13621 * C173 + C13723 * C723 +
                       C13622 * C785 + C13724 * C1681 + C84558 * C1788) *
                          C8870 +
                      (C13722 * C252 + C13621 * C569 + C13723 * C837 +
                       C13622 * C1082 + C13724 * C1906 + C84558 * C2393) *
                          C84529 +
                      (C18936 + C18937 + C18938) * C8871 +
                      (C19481 + C19482 + C19483) * C84344) *
                         C84509 +
                     ((C13750 + C13751 + C13752) * C8870 +
                      (C14275 + C14276 + C14277) * C84529 +
                      (C21829 + C21830 + C21831) * C8871 +
                      (C22462 + C22463 + C22464) * C84344) *
                         C84198) *
                        C84603 * C716 -
                    (((C13724 * C21201 + C84558 * C21545 + C13723 * C3629 +
                       C13622 * C4045 + C13722 * C3632 + C13621 * C4046) *
                          C84344 +
                      (C13724 * C21056 + C84558 * C21133 + C13723 * C3442 +
                       C13622 * C3544 + C13722 * C3445 + C13621 * C3545) *
                          C8871 +
                      (C13724 * C2794 + C84558 * C3275 + C13723 * C1907 +
                       C13622 * C2394 + C13722 * C836 + C13621 * C1081) *
                          C84529 +
                      (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 +
                       C13622 * C1789 + C13722 * C722 + C13621 * C784) *
                          C8870) *
                         C84198 +
                     ((C13724 * C16906 + C84558 * C17133 + C13723 * C3630 +
                       C13622 * C4047 + C13722 * C3633 + C13621 * C4048) *
                          C84344 +
                      (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
                       C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
                          C8871 +
                      (C13724 * C2795 + C84558 * C3276 + C13723 * C1906 +
                       C13622 * C2393 + C13722 * C837 + C13621 * C1082) *
                          C84529 +
                      (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 +
                       C13622 * C1788 + C13722 * C723 + C13621 * C785) *
                          C8870) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C8870 +
                      (C172 * C252 + C84246 * C569) * C84529 + C5975 * C8871 +
                      C6525 * C84344) *
                         C6678 +
                     (C9262 + C9263 + C9264 + C9265) * C6679 +
                     (C9266 + C9267 + C9268 + C9269) * C6680 +
                     (C9270 + C9271 + C9272 + C9276) * C84527) *
                        C84603 * C716 -
                    (((C172 * C8247 + C84246 * C8591) * C84344 +
                      (C172 * C8102 + C84246 * C8179) * C8871 +
                      (C172 * C834 + C84246 * C1079) * C84529 +
                      (C172 * C720 + C84246 * C782) * C8870) *
                         C84527 +
                     ((C172 * C3631 + C84246 * C4044) * C84344 +
                      (C172 * C3444 + C84246 * C3543) * C8871 +
                      (C172 * C835 + C84246 * C1080) * C84529 +
                      (C172 * C721 + C84246 * C783) * C8870) *
                         C6680 +
                     ((C172 * C3632 + C84246 * C4046) * C84344 +
                      (C172 * C3445 + C84246 * C3545) * C8871 +
                      (C172 * C836 + C84246 * C1081) * C84529 +
                      (C172 * C722 + C84246 * C784) * C8870) *
                         C6679 +
                     ((C172 * C3633 + C84246 * C4048) * C84344 +
                      (C172 * C3446 + C84246 * C3547) * C8871 +
                      (C172 * C837 + C84246 * C1082) * C84529 +
                      (C172 * C723 + C84246 * C785) * C8870) *
                         C6678) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C35209 +
                      (C172 * C252 + C84246 * C569) * C35065 + C5975 * C35210 +
                      C6525 * C35066 + C5977 * C35211 + C6526 * C35067 +
                      C31806 * C35212 + C32118 * C84543) *
                         C84509 +
                     (C35585 + C35586 + C35587 + C35588 + C35589 + C35590 +
                      C35591 + C35595) *
                         C84198) *
                        C84603 * C716 -
                    (((C172 * C34362 + C84246 * C34890) * C84543 +
                      (C172 * C34135 + C84246 * C34250) * C35212 +
                      (C172 * C5280 + C84246 * C5674) * C35067 +
                      (C172 * C5114 + C84246 * C5200) * C35211 +
                      (C172 * C3632 + C84246 * C4046) * C35066 +
                      (C172 * C3445 + C84246 * C3545) * C35210 +
                      (C172 * C836 + C84246 * C1081) * C35065 +
                      (C172 * C722 + C84246 * C784) * C35209) *
                         C84198 +
                     ((C172 * C19022 + C84246 * C19467) * C84543 +
                      (C172 * C18815 + C84246 * C18908) * C35212 +
                      (C172 * C5281 + C84246 * C5675) * C35067 +
                      (C172 * C5115 + C84246 * C5201) * C35211 +
                      (C172 * C3633 + C84246 * C4048) * C35066 +
                      (C172 * C3446 + C84246 * C3547) * C35210 +
                      (C172 * C837 + C84246 * C1082) * C35065 +
                      (C172 * C723 + C84246 * C785) * C35209) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C13621 +
            (C12621 + C12622) * C13622 + (C23544 + C23545) * C84558) *
               C84509 +
           ((C9379 + C9380) * C13621 + (C11655 + C11656) * C13622 +
            (C22571 + C22572) * C84558) *
               C84198) *
              C84603 * C716 -
          (((C9343 * C21056 + C23536 + C23536 + C84344 * C21612 +
             C9342 * C2598 + C23537 + C23537 + C84529 * C3352) *
                C84558 +
            (C22572 + C22571) * C13622 + (C11656 + C11655) * C13621) *
               C84198 +
           ((C9343 * C16807 + C23538 + C23538 + C84344 * C17177 +
             C9342 * C2599 + C23539 + C23539 + C84529 * C3353) *
                C84558 +
            (C23545 + C23544) * C13622 + (C12622 + C12621) * C13621) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C84246 * C6678 +
           (C9379 + C9380) * C84246 * C6679 + (C9381 + C9382) * C84246 * C6680 +
           (C9383 + C9384) * C84246 * C84527) *
              C84603 * C716 -
          ((C9343 * C8102 + C9980 + C9980 + C84344 * C8658 + C9342 * C720 +
            C9981 + C9981 + C84529 * C1126) *
               C84246 * C84527 +
           (C9343 * C3444 + C9982 + C9982 + C84344 * C4124 + C9342 * C721 +
            C9983 + C9983 + C84529 * C1127) *
               C84246 * C6680 +
           (C9343 * C3445 + C9984 + C9984 + C84344 * C4126 + C9342 * C722 +
            C9985 + C9985 + C84529 * C1128) *
               C84246 * C6679 +
           (C9343 * C3446 + C9986 + C9986 + C84344 * C4128 + C9342 * C723 +
            C9987 + C9987 + C84529 * C1129) *
               C84246 * C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35661 * C102 + C35666 + C35666 + C35065 * C638 + C35662 * C1183 +
            C35667 + C35667 + C35066 * C1589 + C35663 * C4212 + C35668 +
            C35668 + C35067 * C4993 + C35664 * C5838 + C35669 + C35669 +
            C84543 * C6602) *
               C84246 * C84509 +
           (C35694 + C35695 + C35696 + C35697) * C84246 * C84198) *
              C84603 * C716 -
          ((C35664 * C34135 + C36293 + C36293 + C84543 * C34995 +
            C35663 * C5114 + C36294 + C36294 + C35067 * C5751 + C35662 * C3445 +
            C36295 + C36295 + C35066 * C4126 + C35661 * C722 + C36296 + C36296 +
            C35065 * C1128) *
               C84246 * C84198 +
           (C35664 * C18815 + C36297 + C36297 + C84543 * C19561 +
            C35663 * C5115 + C36298 + C36298 + C35067 * C5752 + C35662 * C3446 +
            C36299 + C36299 + C35066 * C4128 + C35661 * C723 + C36300 + C36300 +
            C35065 * C1129) *
               C84246 * C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C84529 +
            (C23658 + C23659) * C84344) *
               C13621 +
           ((C20383 + C20384) * C84529 + (C22687 + C22688) * C84344) * C13622 +
           ((C20385 + C20386) * C84529 + (C22689 + C22690) * C84344) * C84558) *
              C1177 -
          (((C19642 * C17255 + C23648 + C23648 + C84198 * C17259 +
             C19640 * C17254 + C23649 + C23649 + C84509 * C17258) *
                C84344 +
            (C22690 + C22689) * C84529) *
               C84558 +
           ((C19642 * C5114 + C23650 + C23650 + C84198 * C5120 +
             C19640 * C5115 + C23651 + C23651 + C84509 * C5121) *
                C84344 +
            (C22688 + C22687) * C84529) *
               C13622 +
           ((C19642 * C4213 + C23652 + C23652 + C84198 * C4221 +
             C19640 * C4212 + C23653 + C23653 + C84509 * C4220) *
                C84344 +
            (C23659 + C23658) * C84529) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84529 +
           (C10074 + C10075 + C10076 + C10077) * C84344) *
              C84246 * C1177 -
          ((C6690 * C4215 + C10062 + C10062 + C84527 * C4223 + C6688 * C4214 +
            C10063 + C10063 + C6680 * C4222 + C6686 * C4213 + C10064 + C10064 +
            C6679 * C4221 + C6684 * C4212 + C10065 + C10065 + C6678 * C4220) *
               C84344 +
           (C10077 + C10076 + C10075 + C10074) * C84529) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C35065 +
           (C23658 + C23659) * C35066 + (C34151 + C34152) * C35067 +
           (C36377 + C36378) * C84543) *
              C84246 * C1177 -
          ((C19642 * C30908 + C36371 + C36371 + C84198 * C30912 +
            C19640 * C30907 + C36372 + C36372 + C84509 * C30911) *
               C84543 +
           (C36378 + C36377) * C35067 + (C34152 + C34151) * C35066 +
           (C23659 + C23658) * C35065) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C13722 * C102 + C13621 * C173 + C13723 * C723 +
                       C13622 * C785 + C13724 * C1681 + C84558 * C1788) *
                          C82024 +
                      (C13722 * C108 + C13621 * C179 + C13723 * C728 +
                       C13622 * C790 + C13724 * C1685 + C84558 * C1792) *
                          C84509 +
                      (C13750 + C13751 + C13752) * C81997 +
                      (C13753 + C13754 + C13755) * C84198) *
                         C84529 +
                     ((C18936 + C18937 + C18938) * C82024 +
                      (C18939 + C18940 + C18941) * C84509 +
                      (C21829 + C21830 + C21831) * C81997 +
                      (C21832 + C21833 + C21834) * C84198) *
                         C84344) *
                        C1177 -
                    (((C13724 * C17257 + C84558 * C17346 + C13723 * C5117 +
                       C13622 * C5203 + C13722 * C4217 + C13621 * C4312) *
                          C84198 +
                      (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
                       C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
                          C81997 +
                      (C18947 + C18946 + C18945) * C84509 +
                      (C18944 + C18943 + C18942) * C82024) *
                         C84344 +
                     ((C21834 + C21833 + C21832) * C84198 +
                      (C21831 + C21830 + C21829) * C81997 +
                      (C18941 + C18940 + C18939) * C84509 +
                      (C18938 + C18937 + C18936) * C82024) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C6685 +
                      (C172 * C108 + C84246 * C179) * C6678 + C202 * C6687 +
                      C203 * C6679 + C204 * C6689 + C205 * C6680 +
                      C206 * C6691 + C207 * C84527) *
                         C84529 +
                     (C10144 + C10145 + C10146 + C10147 + C10148 + C10149 +
                      C10150 + C10151) *
                         C84344) *
                        C1177 -
                    (((C172 * C4219 + C84246 * C4314) * C84527 +
                      (C172 * C4215 + C84246 * C4310) * C6691 + C4339 * C6680 +
                      C4338 * C6689 + C4337 * C6679 + C4336 * C6687 +
                      C5978 * C6678 + C5977 * C6685) *
                         C84344 +
                     (C10151 + C10150 + C10149 + C10148 + C10147 + C10146 +
                      C10145 + C10144) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C82024 +
                      (C172 * C108 + C84246 * C179) * C84509 + C202 * C81997 +
                      C203 * C84198) *
                         C35065 +
                     (C36445 + C36446 + C36447 + C36448) * C35066 +
                     (C36449 + C36450 + C36451 + C36452) * C35067 +
                     (C36453 + C36454 + C36455 + C36456) * C84543) *
                        C1177 -
                    (((C172 * C30910 + C84246 * C30961) * C84198 +
                      (C172 * C30908 + C84246 * C30959) * C81997 +
                      C31809 * C84509 + C31808 * C82024) *
                         C84543 +
                     (C36456 + C36455 + C36454 + C36453) * C35067 +
                     (C36452 + C36451 + C36450 + C36449) * C35066 +
                     (C36448 + C36447 + C36446 + C36445) * C35065) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82024 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84509 +
            (C8897 + C8898) * C81997 + (C8899 + C8900) * C84198) *
               C13621 +
           ((C11976 + C11977) * C82024 + (C11978 + C11979) * C84509 +
            (C10999 + C11000) * C81997 + (C11001 + C11002) * C84198) *
               C13622 +
           ((C22895 + C22896) * C82024 + (C22897 + C22898) * C84509 +
            (C21941 + C21942) * C81997 + (C21943 + C21944) * C84198) *
               C84558) *
              C1177 -
          (((C8871 * C17257 + C84344 * C17424 + C8870 * C3448 +
             C84529 * C3635) *
                C84198 +
            (C8871 * C17255 + C84344 * C17422 + C8870 * C3442 +
             C84529 * C3629) *
                C81997 +
            (C8871 * C17256 + C84344 * C17423 + C8870 * C3449 +
             C84529 * C3636) *
                C84509 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C82024) *
               C84558 +
           ((C8871 * C5117 + C84344 * C5283 + C8870 * C3451 + C84529 * C3638) *
                C84198 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C81997 +
            (C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C84509 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C82024) *
               C13622 +
           ((C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
                C84198 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C81997 +
            (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C84509 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C82024) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C6685 +
           (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
               C6678 +
           (C8897 + C8898) * C6687 + (C8899 + C8900) * C6679 +
           (C8901 + C8902) * C6689 + (C8903 + C8904) * C6680 +
           (C8905 + C8906) * C6691 + (C8907 + C8908) * C84527) *
              C84246 * C1177 -
          ((C8871 * C4219 + C84344 * C4423 + C8870 * C1185 + C84529 * C1299) *
               C84527 +
           (C8871 * C4215 + C84344 * C4419 + C8870 * C1180 + C84529 * C1294) *
               C6691 +
           (C8871 * C4218 + C84344 * C4422 + C8870 * C1186 + C84529 * C1300) *
               C6680 +
           (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
               C6689 +
           (C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
               C6679 +
           (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
               C6687 +
           (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
               C6678 +
           (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
               C6685) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
            C35211 * C4212 + C35067 * C4416 + C35212 * C5838 + C84543 * C6058) *
               C82024 +
           (C35209 * C108 + C35065 * C258 + C35210 * C1188 + C35066 * C1302 +
            C35211 * C4216 + C35067 * C4420 + C35212 * C5841 + C84543 * C6061) *
               C84509 +
           (C35230 + C35231 + C35232 + C35233) * C81997 +
           (C35234 + C35235 + C35236 + C35237) * C84198) *
              C84246 * C1177 -
          ((C35212 * C30910 + C84543 * C31012 + C35211 * C5840 +
            C35067 * C6060 + C35210 * C4217 + C35066 * C4421 + C35209 * C1187 +
            C35065 * C1301) *
               C84198 +
           (C35212 * C30908 + C84543 * C31010 + C35211 * C5837 +
            C35067 * C6057 + C35210 * C4213 + C35066 * C4417 + C35209 * C1182 +
            C35065 * C1296) *
               C81997 +
           (C35212 * C30909 + C84543 * C31011 + C35211 * C5841 +
            C35067 * C6061 + C35210 * C4216 + C35066 * C4420 + C35209 * C1188 +
            C35065 * C1302) *
               C84509 +
           (C35212 * C30907 + C84543 * C31009 + C35211 * C5838 +
            C35067 * C6058 + C35210 * C4212 + C35066 * C4416 + C35209 * C1183 +
            C35065 * C1297) *
               C82024) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C13722 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C13621 +
            (C20623 + C20624) * C13723 + (C20625 + C20626) * C13622 +
            (C20627 + C20628) * C13724 + (C20629 + C20630) * C84558) *
               C84529 +
           ((C23962 + C23963) * C13722 + (C23964 + C23965) * C13621 +
            (C23013 + C23014) * C13723 + (C23015 + C23016) * C13622 +
            (C23017 + C23018) * C13724 + (C23019 + C23020) * C84558) *
               C84344) *
              C1177 -
          (((C81997 * C17344 + C84198 * C17500 + C82024 * C17343 +
             C84509 * C17499) *
                C84558 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C13724 +
            (C81997 * C5200 + C84198 * C5360 + C82024 * C5201 +
             C84509 * C5361) *
                C13622 +
            (C81997 * C5114 + C84198 * C5117 + C82024 * C5115 +
             C84509 * C5118) *
                C13723 +
            (C81997 * C4308 + C84198 * C4535 + C82024 * C4307 +
             C84509 * C4534) *
                C13621 +
            (C81997 * C4213 + C84198 * C4217 + C82024 * C4212 +
             C84509 * C4216) *
                C13722) *
               C84344 +
           ((C23020 + C23019) * C84558 + (C23018 + C23017) * C13724 +
            (C23016 + C23015) * C13622 + (C23014 + C23013) * C13723 +
            (C23965 + C23964) * C13621 + (C23963 + C23962) * C13722) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C172 +
            (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
             C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
                C84246) *
               C84529 +
           ((C10300 + C10301 + C10302 + C10303) * C172 +
            (C10304 + C10305 + C10306 + C10307) * C84246) *
               C84344) *
              C1177 -
          (((C6691 * C4310 + C84527 * C4537 + C6689 * C4309 + C6680 * C4536 +
             C6687 * C4308 + C6679 * C4535 + C6685 * C4307 + C6678 * C4534) *
                C84246 +
            (C6691 * C4215 + C84527 * C4219 + C6689 * C4214 + C6680 * C4218 +
             C6687 * C4213 + C6679 * C4217 + C6685 * C4212 + C6678 * C4216) *
                C172) *
               C84344 +
           ((C10307 + C10306 + C10305 + C10304) * C84246 +
            (C10303 + C10302 + C10301 + C10300) * C172) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C172 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C84246) *
               C35065 +
           ((C23962 + C23963) * C172 + (C23964 + C23965) * C84246) * C35066 +
           ((C34472 + C34473) * C172 + (C34474 + C34475) * C84246) * C35067 +
           ((C36597 + C36598) * C172 + (C36599 + C36600) * C84246) * C84543) *
              C1177 -
          (((C81997 * C30959 + C84198 * C31056 + C82024 * C30958 +
             C84509 * C31055) *
                C84246 +
            (C81997 * C30908 + C84198 * C30910 + C82024 * C30907 +
             C84509 * C30909) *
                C172) *
               C84543 +
           ((C36600 + C36599) * C84246 + (C36598 + C36597) * C172) * C35067 +
           ((C34475 + C34474) * C84246 + (C34473 + C34472) * C172) * C35066 +
           ((C23965 + C23964) * C84246 + (C23963 + C23962) * C172) * C35065) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
             C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 +
             C13989 + C84558 * C2093) *
                C84509 +
            (C14023 + C14024 + C14025) * C84198) *
               C84529 +
           ((C19229 + C19230 + C19231) * C84509 +
            (C22153 + C22154 + C22155) * C84198) *
               C84344) *
              C1177 -
          (((C13985 * C17255 + C17581 + C17581 + C84558 * C17576 +
             C13984 * C5114 + C17582 + C17582 + C13622 * C5437 +
             C13983 * C4213 + C17583 + C17583 + C13621 * C4613) *
                C84198 +
            (C19234 + C19233 + C19232) * C84509) *
               C84344 +
           ((C22155 + C22154 + C22153) * C84198 +
            (C19231 + C19230 + C19229) * C84509) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C6678 + C408 * C6679 +
            C409 * C6680 + C410 * C84527) *
               C84529 +
           (C10374 + C10375 + C10376 + C10377) * C84344) *
              C1177 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84527 +
            C4640 * C6680 + C4639 * C6679 + C6269 * C6678) *
               C84344 +
           (C10377 + C10376 + C10375 + C10374) * C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84509 +
            C408 * C84198) *
               C35065 +
           (C36667 + C36668) * C35066 + (C36669 + C36670) * C35067 +
           (C36671 + C36672) * C84543) *
              C1177 -
          (((C378 * C30908 + C31103 + C31103 + C84246 * C31100) * C84198 +
            C31976 * C84509) *
               C84543 +
           (C36672 + C36671) * C35067 + (C36670 + C36669) * C35066 +
           (C36668 + C36667) * C35065) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C13722 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C13621 +
            (C11976 + C11977) * C13723 + (C12302 + C12303) * C13622 +
            (C22895 + C22896) * C13724 + (C23224 + C23225) * C84558) *
               C84509 +
           ((C8897 + C8898) * C13722 + (C9124 + C9125) * C13621 +
            (C10999 + C11000) * C13723 + (C11329 + C11330) * C13622 +
            (C21941 + C21942) * C13724 + (C22258 + C22259) * C84558) *
               C84198) *
              C1177 -
          (((C8871 * C17344 + C84344 * C17658 + C8870 * C3544 +
             C84529 * C3885) *
                C84558 +
            (C8871 * C17255 + C84344 * C17422 + C8870 * C3442 +
             C84529 * C3629) *
                C13724 +
            (C8871 * C5200 + C84344 * C5520 + C8870 * C3545 + C84529 * C3886) *
                C13622 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C13723 +
            (C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C13621 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C13722) *
               C84198 +
           ((C8871 * C17343 + C84344 * C17657 + C8870 * C3546 +
             C84529 * C3887) *
                C84558 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C13724 +
            (C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
                C13622 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C13723 +
            (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C13621 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C13722) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C172 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84246) *
               C6678 +
           ((C8897 + C8898) * C172 + (C9124 + C9125) * C84246) * C6679 +
           ((C8901 + C8902) * C172 + (C9126 + C9127) * C84246) * C6680 +
           ((C8905 + C8906) * C172 + (C9128 + C9129) * C84246) * C84527) *
              C1177 -
          (((C8871 * C4310 + C84344 * C4717 + C8870 * C1242 + C84529 * C1445) *
                C84246 +
            (C8871 * C4215 + C84344 * C4419 + C8870 * C1180 + C84529 * C1294) *
                C172) *
               C84527 +
           ((C8871 * C4309 + C84344 * C4716 + C8870 * C1243 + C84529 * C1446) *
                C84246 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C172) *
               C6680 +
           ((C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C84246 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C172) *
               C6679 +
           ((C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C84246 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C172) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C35209 * C102 + C35065 * C252 + C35210 * C1183 + C35066 * C1297 +
             C35211 * C4212 + C35067 * C4416 + C35212 * C5838 +
             C84543 * C6058) *
                C172 +
            (C35209 * C173 + C35065 * C453 + C35210 * C1245 + C35066 * C1448 +
             C35211 * C4307 + C35067 * C4714 + C35212 * C5954 +
             C84543 * C6347) *
                C84246) *
               C84509 +
           ((C35230 + C35231 + C35232 + C35233) * C172 +
            (C35449 + C35450 + C35451 + C35452) * C84246) *
               C84198) *
              C1177 -
          (((C35212 * C30959 + C84543 * C31146 + C35211 * C5953 +
             C35067 * C6346 + C35210 * C4308 + C35066 * C4715 + C35209 * C1244 +
             C35065 * C1447) *
                C84246 +
            (C35212 * C30908 + C84543 * C31010 + C35211 * C5837 +
             C35067 * C6057 + C35210 * C4213 + C35066 * C4417 + C35209 * C1182 +
             C35065 * C1296) *
                C172) *
               C84198 +
           ((C35212 * C30958 + C84543 * C31145 + C35211 * C5954 +
             C35067 * C6347 + C35210 * C4307 + C35066 * C4714 + C35209 * C1245 +
             C35065 * C1448) *
                C84246 +
            (C35212 * C30907 + C84543 * C31009 + C35211 * C5838 +
             C35067 * C6058 + C35210 * C4212 + C35066 * C4416 + C35209 * C1183 +
             C35065 * C1297) *
                C172) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C8870 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84529 +
            (C23962 + C23963) * C8871 + (C24264 + C24265) * C84344) *
               C13621 +
           ((C20623 + C20624) * C8870 + (C20853 + C20854) * C84529 +
            (C23013 + C23014) * C8871 + (C23332 + C23333) * C84344) *
               C13622 +
           ((C20627 + C20628) * C8870 + (C20855 + C20856) * C84529 +
            (C23017 + C23018) * C8871 + (C23334 + C23335) * C84344) *
               C84558) *
              C1177 -
          (((C81997 * C17422 + C84198 * C17734 + C82024 * C17421 +
             C84509 * C17733) *
                C84344 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C8871 +
            (C23335 + C23334) * C84529 + (C23018 + C23017) * C8870) *
               C84558 +
           ((C81997 * C5280 + C84198 * C5597 + C82024 * C5281 +
             C84509 * C5598) *
                C84344 +
            (C81997 * C5114 + C84198 * C5117 + C82024 * C5115 +
             C84509 * C5118) *
                C8871 +
            (C23333 + C23332) * C84529 + (C23014 + C23013) * C8870) *
               C13622 +
           ((C81997 * C4417 + C84198 * C4811 + C82024 * C4416 +
             C84509 * C4810) *
                C84344 +
            (C81997 * C4213 + C84198 * C4217 + C82024 * C4212 +
             C84509 * C4216) *
                C8871 +
            (C24265 + C24264) * C84529 + (C23963 + C23962) * C8870) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C8870 +
           (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
            C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
               C84529 +
           (C10300 + C10301 + C10302 + C10303) * C8871 +
           (C10518 + C10519 + C10520 + C10521) * C84344) *
              C84246 * C1177 -
          ((C6691 * C4419 + C84527 * C4813 + C6689 * C4418 + C6680 * C4812 +
            C6687 * C4417 + C6679 * C4811 + C6685 * C4416 + C6678 * C4810) *
               C84344 +
           (C6691 * C4215 + C84527 * C4219 + C6689 * C4214 + C6680 * C4218 +
            C6687 * C4213 + C6679 * C4217 + C6685 * C4212 + C6678 * C4216) *
               C8871 +
           (C10521 + C10520 + C10519 + C10518) * C84529 +
           (C10303 + C10302 + C10301 + C10300) * C8870) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C35209 +
           (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
               C35065 +
           (C23962 + C23963) * C35210 + (C24264 + C24265) * C35066 +
           (C34472 + C34473) * C35211 + (C34791 + C34792) * C35067 +
           (C36597 + C36598) * C35212 + (C36809 + C36810) * C84543) *
              C84246 * C1177 -
          ((C81997 * C31010 + C84198 * C31190 + C82024 * C31009 +
            C84509 * C31189) *
               C84543 +
           (C81997 * C30908 + C84198 * C30910 + C82024 * C30907 +
            C84509 * C30909) *
               C35212 +
           (C36810 + C36809) * C35067 + (C36598 + C36597) * C35211 +
           (C34792 + C34791) * C35066 + (C34473 + C34472) * C35210 +
           (C24265 + C24264) * C35065 + (C23963 + C23962) * C35209) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C8870 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84529 +
            (C18936 + C18937 + C18938) * C8871 +
            (C19481 + C19482 + C19483) * C84344) *
               C84509 +
           ((C13750 + C13751 + C13752) * C8870 +
            (C14275 + C14276 + C14277) * C84529 +
            (C21829 + C21830 + C21831) * C8871 +
            (C22462 + C22463 + C22464) * C84344) *
               C84198) *
              C1177 -
          (((C13724 * C17422 + C84558 * C17810 + C13723 * C5280 +
             C13622 * C5674 + C13722 * C4417 + C13621 * C4889) *
                C84344 +
            (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
             C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
                C8871 +
            (C22464 + C22463 + C22462) * C84529 +
            (C21831 + C21830 + C21829) * C8870) *
               C84198 +
           ((C19486 + C19485 + C19484) * C84344 +
            (C18944 + C18943 + C18942) * C8871 +
            (C19483 + C19482 + C19481) * C84529 +
            (C18938 + C18937 + C18936) * C8870) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C8870 +
            (C172 * C252 + C84246 * C569) * C84529 + C5975 * C8871 +
            C6525 * C84344) *
               C6678 +
           (C9262 + C9263 + C9264 + C9265) * C6679 +
           (C9266 + C9267 + C9268 + C9269) * C6680 +
           (C9270 + C9271 + C9272 + C9276) * C84527) *
              C1177 -
          (((C172 * C4419 + C84246 * C4891) * C84344 +
            (C172 * C4215 + C84246 * C4310) * C8871 + C9275 * C84529 +
            C8803 * C8870) *
               C84527 +
           (C4912 * C84344 + C4338 * C8871 + C4911 * C84529 + C4334 * C8870) *
               C6680 +
           (C4910 * C84344 + C4336 * C8871 + C4909 * C84529 + C4332 * C8870) *
               C6679 +
           (C6526 * C84344 + C5977 * C8871 + C6525 * C84529 + C5975 * C8870) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C35209 +
            (C172 * C252 + C84246 * C569) * C35065 + C5975 * C35210 +
            C6525 * C35066 + C5977 * C35211 + C6526 * C35067 + C31806 * C35212 +
            C32118 * C84543) *
               C84509 +
           (C35585 + C35586 + C35587 + C35588 + C35589 + C35590 + C35591 +
            C35595) *
               C84198) *
              C1177 -
          (((C172 * C31010 + C84246 * C31234) * C84543 +
            (C172 * C30908 + C84246 * C30959) * C35212 + C35594 * C35067 +
            C35142 * C35211 + C4910 * C35066 + C4336 * C35210 + C4909 * C35065 +
            C4332 * C35209) *
               C84198 +
           (C32119 * C84543 + C31808 * C35212 + C32118 * C35067 +
            C31806 * C35211 + C6526 * C35066 + C5977 * C35210 + C6525 * C35065 +
            C5975 * C35209) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C13621 +
            (C12621 + C12622) * C13622 + (C23544 + C23545) * C84558) *
               C84509 +
           ((C9379 + C9380) * C13621 + (C11655 + C11656) * C13622 +
            (C22571 + C22572) * C84558) *
               C84198) *
              C1177 -
          (((C9343 * C17255 + C24462 + C24462 + C84344 * C17886 +
             C9342 * C3442 + C24463 + C24463 + C84529 * C4125) *
                C84558 +
            (C9343 * C5114 + C13541 + C13541 + C84344 * C5751 + C9342 * C3445 +
             C13542 + C13542 + C84529 * C4126) *
                C13622 +
            (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
             C10659 + C10659 + C84529 * C1588) *
                C13621) *
               C84198 +
           ((C9343 * C17254 + C24464 + C24464 + C84344 * C17885 +
             C9342 * C3443 + C24465 + C24465 + C84529 * C4127) *
                C84558 +
            (C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
             C13544 + C13544 + C84529 * C4128) *
                C13622 +
            (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
             C10661 + C10661 + C84529 * C1589) *
                C13621) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C84246 * C6678 +
           (C9379 + C9380) * C84246 * C6679 + (C9381 + C9382) * C84246 * C6680 +
           (C9383 + C9384) * C84246 * C84527) *
              C1177 -
          ((C9343 * C4215 + C10654 + C10654 + C84344 * C4996 + C9342 * C1180 +
            C10655 + C10655 + C84529 * C1586) *
               C84246 * C84527 +
           (C9343 * C4214 + C10656 + C10656 + C84344 * C4995 + C9342 * C1181 +
            C10657 + C10657 + C84529 * C1587) *
               C84246 * C6680 +
           (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
            C10659 + C10659 + C84529 * C1588) *
               C84246 * C6679 +
           (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
            C10661 + C10661 + C84529 * C1589) *
               C84246 * C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C35661 * C102 + C35666 + C35666 + C35065 * C638 + C35662 * C1183 +
            C35667 + C35667 + C35066 * C1589 + C35663 * C4212 + C35668 +
            C35668 + C35067 * C4993 + C35664 * C5838 + C35669 + C35669 +
            C84543 * C6602) *
               C84246 * C84509 +
           (C35694 + C35695 + C35696 + C35697) * C84246 * C84198) *
              C1177 -
          ((C35664 * C30908 + C36943 + C36943 + C84543 * C31283 +
            C35663 * C5837 + C36944 + C36944 + C35067 * C6601 + C35662 * C4213 +
            C36945 + C36945 + C35066 * C4994 + C35661 * C1182 + C36946 +
            C36946 + C35065 * C1588) *
               C84246 * C84198 +
           (C35664 * C30907 + C36947 + C36947 + C84543 * C31282 +
            C35663 * C5838 + C36948 + C36948 + C35067 * C6602 + C35662 * C4212 +
            C36949 + C36949 + C35066 * C4993 + C35661 * C1183 + C36950 +
            C36950 + C35065 * C1589) *
               C84246 * C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C1675 * C723 + C1697 + C1697 + C1669 * C733 + C1677 * C722 + C1698 +
            C1698 + C1670 * C732 + C1679 * C721 + C1699 + C1699 +
            C84550 * C731) *
               C84257 * C84581 +
           (C1675 * C1681 + C1700 + C1700 + C1669 * C1689 + C1677 * C1682 +
            C1701 + C1701 + C1670 * C1690 + C1679 * C1683 + C1702 + C1702 +
            C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C1679 * C1684 + C1703 + C1703 + C84550 * C1692 + C1677 * C1683 +
            C1704 + C1704 + C1670 * C1691 + C1675 * C1682 + C1705 + C1705 +
            C1669 * C1690) *
               C84257 * C84558 +
           (C1679 * C720 + C1706 + C1706 + C84550 * C730 + C1677 * C721 +
            C1707 + C1707 + C1670 * C731 + C1675 * C722 + C1708 + C1708 +
            C1669 * C732) *
               C84257 * C84581 +
           (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
            C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
            C1669 * C115) *
               C84257 * C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C84603 * C84604 * C90 -
          (C100 * C107 + C126 + C126 + C85 * C119 + C98 * C106 + C127 + C127 +
           C84 * C118 + C96 * C105 + C128 + C128 + C83 * C117 + C94 * C104 +
           C129 + C129 + C82 * C116 + C92 * C103 + C130 + C130 + C81 * C115) *
              C84257 * C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C13624 * C723 + C13634 + C13634 + C84590 * C733 + C13626 * C722 +
            C13635 + C13635 + C84574 * C732 + C13628 * C721 + C13636 + C13636 +
            C84550 * C731) *
               C84257 * C13622 +
           (C13624 * C1681 + C13637 + C13637 + C84590 * C1689 + C13626 * C1682 +
            C13638 + C13638 + C84574 * C1690 + C13628 * C1683 + C13639 +
            C13639 + C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C13628 * C1684 + C13640 + C13640 + C84550 * C1692 + C13626 * C1683 +
            C13641 + C13641 + C84574 * C1691 + C13624 * C1682 + C13642 +
            C13642 + C84590 * C1690) *
               C84257 * C84558 +
           (C13628 * C720 + C13643 + C13643 + C84550 * C730 + C13626 * C721 +
            C13644 + C13644 + C84574 * C731 + C13624 * C722 + C13645 + C13645 +
            C84590 * C732) *
               C84257 * C13622 +
           (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
            C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
            C84590 * C115) *
               C84257 * C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           (C15866 * C723 + C15876 + C15876 + C84188 * C733) * C84257 * C15862 +
           (C15866 * C1681 + C15877 + C15877 + C84188 * C1689) * C84257 *
               C15863 +
           (C15866 * C2599 + C15878 + C15878 + C84188 * C2605) * C84257 *
               C15864 +
           (C15866 * C15868 + C15879 + C15879 + C84188 * C15872) * C84257 *
               C15865) *
              C84603 * C84604 * C90 -
          ((C15866 * C15869 + C15880 + C15880 + C84188 * C15873) * C84257 *
               C15865 +
           (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C84257 *
               C15864 +
           (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84257 *
               C15863 +
           (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84257 * C15862 +
           (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84257 *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C26458 +
           (C13624 * C1183 + C15217 + C15217 + C84590 * C1193 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13628 * C1181 + C15215 +
            C15215 + C84550 * C1191) *
               C26459 +
           (C13624 * C4212 + C26462 + C26462 + C84590 * C4220 + C13626 * C4213 +
            C26463 + C26463 + C84574 * C4221 + C13628 * C4214 + C26464 +
            C26464 + C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C13628 * C4215 + C26465 + C26465 + C84550 * C4223 + C13626 * C4214 +
            C26466 + C26466 + C84574 * C4222 + C13624 * C4213 + C26467 +
            C26467 + C84590 * C4221) *
               C84561 +
           (C13628 * C1180 + C26468 + C26468 + C84550 * C1190 + C13626 * C1181 +
            C26469 + C26469 + C84574 * C1191 + C13624 * C1182 + C26470 +
            C26470 + C84590 * C1192) *
               C26459 +
           (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
            C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
            C84590 * C115) *
               C26458) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C26458 +
            C18832 * C26459 + C18833 * C84561) *
               C84596 +
           (C16325 * C26458 + C17990 * C26459 + C17991 * C84561) * C84581 +
           (C16326 * C26458 + C17992 * C26459 + C17993 * C84561) * C84558) *
              C84603 * C84604 * C90 -
          (((C15866 * C17255 + C17264 + C17264 + C84188 * C17259) * C84561 +
            (C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C26459 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C26458) *
               C84558 +
           ((C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C84561 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C26459 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C26458) *
               C84581 +
           ((C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C84561 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C26459 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C26458) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C1787 * C1688 + C84558 * C1795 + C1786 * C725 + C84581 * C787 +
            C1785 * C111 + C84596 * C182) *
               C84550 +
           (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
            C1785 * C105 + C84596 * C176) *
               C1680 +
           (C1832 + C1831 + C1830) * C1670 + (C1829 + C1828 + C1827) * C1678 +
           (C1826 + C1825 + C1824) * C1669 + (C1823 + C1822 + C1821) * C1676) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C84603 * C84604 * C90 -
          ((C172 * C113 + C84246 * C184) * C85 +
           (C172 * C107 + C84246 * C178) * C101 + C209 * C84 + C208 * C99 +
           C207 * C83 + C206 * C97 + C205 * C82 + C204 * C95 + C203 * C81 +
           C202 * C93) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13724 * C1688 + C84558 * C1795 + C13723 * C725 + C13622 * C787 +
            C13722 * C111 + C13621 * C182) *
               C84550 +
           (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
            C13722 * C105 + C13621 * C176) *
               C13629 +
           (C13761 + C13760 + C13759) * C84574 +
           (C13758 + C13757 + C13756) * C13627 +
           (C13755 + C13754 + C13753) * C84590 +
           (C13752 + C13751 + C13750) * C13625) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C84604 * C90 -
          ((C15930 * C15871 + C15865 * C15934 + C15929 * C2601 +
            C15864 * C2717 + C15928 * C1686 + C15863 * C1793 + C15927 * C727 +
            C15862 * C789 + C15926 * C109 + C15861 * C180) *
               C84188 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C15867) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C13625 +
            (C172 * C108 + C84246 * C179) * C84590 + C202 * C13627 +
            C203 * C84574 + C204 * C13629 + C205 * C84550) *
               C26458 +
           (C5975 * C13625 + C5976 * C84590 + C4332 * C13627 + C4333 * C84574 +
            C4334 * C13629 + C4335 * C84550) *
               C26459 +
           (C5977 * C13625 + C5978 * C84590 + C4336 * C13627 + C4337 * C84574 +
            C4338 * C13629 + C4339 * C84550) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C172 * C4219 + C84246 * C4314) * C84550 +
            (C172 * C4215 + C84246 * C4310) * C13629 + C4339 * C84574 +
            C4338 * C13627 + C4337 * C84590 + C4336 * C13625) *
               C84561 +
           (C8804 * C84550 + C8803 * C13629 + C4335 * C84574 + C4334 * C13627 +
            C4333 * C84590 + C4332 * C13625) *
               C26459 +
           (C207 * C84550 + C206 * C13629 + C205 * C84574 + C204 * C13627 +
            C203 * C84590 + C202 * C13625) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C15867 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C84188) *
               C26458 +
           ((C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
             C1787 * C3443 + C84558 * C3546) *
                C15867 +
            (C1785 * C1188 + C84596 * C1250 + C1786 * C3452 + C84581 * C3553 +
             C1787 * C3449 + C84558 * C3552) *
                C84188) *
               C26459 +
           ((C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
             C1787 * C17254 + C84558 * C17343) *
                C15867 +
            (C1785 * C4216 + C84596 * C4311 + C1786 * C5118 + C84581 * C5204 +
             C1787 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C1787 * C17257 + C84558 * C17346 + C1786 * C5117 + C84581 * C5203 +
             C1785 * C4217 + C84596 * C4312) *
                C84188 +
            (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 + C84581 * C5200 +
             C1785 * C4213 + C84596 * C4308) *
                C15867) *
               C84561 +
           ((C1787 * C3448 + C84558 * C3550 + C1786 * C3451 + C84581 * C3551 +
             C1785 * C1187 + C84596 * C1249) *
                C84188 +
            (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
             C1785 * C1182 + C84596 * C1244) *
                C15867) *
               C26459 +
           ((C1826 + C1825 + C1824) * C84188 +
            (C1823 + C1822 + C1821) * C15867) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           ((C251 * C723 + C84257 * C837) * C1676 +
            (C251 * C728 + C84257 * C842) * C1669 + C1931 * C1678 +
            C1932 * C1670 + C1933 * C1680 + C1934 * C84550) *
               C84581 +
           ((C251 * C1681 + C84257 * C1906) * C1676 +
            (C251 * C1685 + C84257 * C1910) * C1669 + C1935 * C1678 +
            C1936 * C1670 + C1937 * C1680 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C1680 + C1938 * C1670 +
            C1937 * C1678 + C1936 * C1669 + C1935 * C1676) *
               C84558 +
           ((C251 * C725 + C84257 * C839) * C84550 +
            (C251 * C720 + C84257 * C834) * C1680 + C1934 * C1670 +
            C1933 * C1678 + C1932 * C1669 + C1931 * C1676) *
               C84581 +
           (C286 * C84550 + C285 * C1680 + C284 * C1670 + C283 * C1678 +
            C282 * C1669 + C281 * C1676) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C84603 * C84604 * C90 -
          ((C251 * C113 + C84257 * C263) * C85 +
           (C251 * C107 + C84257 * C257) * C101 + C288 * C84 + C287 * C99 +
           C286 * C83 + C285 * C97 + C284 * C82 + C283 * C95 + C282 * C81 +
           C281 * C93) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C2816 * C13625 + C2817 * C84590 + C1931 * C13627 + C1932 * C84574 +
            C1933 * C13629 + C1934 * C84550) *
               C13622 +
           (C2818 * C13625 + C2819 * C84590 + C1935 * C13627 + C1936 * C84574 +
            C1937 * C13629 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C13629 + C1938 * C84574 +
            C1937 * C13627 + C1936 * C84590 + C1935 * C13625) *
               C84558 +
           (C6884 * C84550 + C6883 * C13629 + C1934 * C84574 + C1933 * C13627 +
            C1932 * C84590 + C1931 * C13625) *
               C13622 +
           (C286 * C84550 + C285 * C13629 + C284 * C84574 + C283 * C13627 +
            C282 * C84590 + C281 * C13625) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C2816 * C15867 + C2817 * C84188) * C15862 +
           (C2818 * C15867 + C2819 * C84188) * C15863 +
           ((C251 * C2599 + C84257 * C2795) * C15867 +
            (C251 * C2602 + C84257 * C2798) * C84188) *
               C15864 +
           ((C251 * C15868 + C84257 * C15977) * C15867 +
            (C251 * C15870 + C84257 * C15979) * C84188) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C251 * C15871 + C84257 * C15980) * C84188 +
            (C251 * C15869 + C84257 * C15978) * C15867) *
               C15865 +
           ((C251 * C2601 + C84257 * C2797) * C84188 +
            (C251 * C2598 + C84257 * C2794) * C15867) *
               C15864 +
           (C1936 * C84188 + C1935 * C15867) * C15863 +
           (C1932 * C84188 + C1931 * C15867) * C15862 +
           (C282 * C84188 + C281 * C15867) * C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C13625 +
           (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
            C26620 * C4216 + C84561 * C4420) *
               C84590 +
           (C26646 + C26647 + C26648) * C13627 +
           (C26649 + C26650 + C26651) * C84574 +
           (C26652 + C26653 + C26654) * C13629 +
           (C26655 + C26656 + C26657) * C84550) *
              C84246 * C84603 * C84604 * C90 -
          ((C26620 * C4219 + C84561 * C4423 + C26619 * C1185 + C26459 * C1299 +
            C26618 * C111 + C26458 * C261) *
               C84550 +
           (C26620 * C4215 + C84561 * C4419 + C26619 * C1180 + C26459 * C1294 +
            C26618 * C105 + C26458 * C255) *
               C13629 +
           (C26657 + C26656 + C26655) * C84574 +
           (C26654 + C26653 + C26652) * C13627 +
           (C26651 + C26650 + C26649) * C84590 +
           (C26648 + C26647 + C26646) * C13625) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C15867 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84188) *
               C84596 +
           ((C26618 * C723 + C26458 * C837 + C26619 * C3446 + C26459 * C3633 +
             C26620 * C5115 + C84561 * C5281) *
                C15867 +
            (C26618 * C728 + C26458 * C842 + C26619 * C3452 + C26459 * C3639 +
             C26620 * C5118 + C84561 * C5284) *
                C84188) *
               C84581 +
           ((C26618 * C1681 + C26458 * C1906 + C26619 * C3443 + C26459 * C3630 +
             C26620 * C17254 + C84561 * C17421) *
                C15867 +
            (C26618 * C1685 + C26458 * C1910 + C26619 * C3449 + C26459 * C3636 +
             C26620 * C17256 + C84561 * C17423) *
                C84188) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C26620 * C17257 + C84561 * C17424 + C26619 * C3448 +
             C26459 * C3635 + C26618 * C1686 + C26458 * C1911) *
                C84188 +
            (C26620 * C17255 + C84561 * C17422 + C26619 * C3442 +
             C26459 * C3629 + C26618 * C1682 + C26458 * C1907) *
                C15867) *
               C84558 +
           ((C26620 * C5117 + C84561 * C5283 + C26619 * C3451 + C26459 * C3638 +
             C26618 * C727 + C26458 * C841) *
                C84188 +
            (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
             C26618 * C722 + C26458 * C836) *
                C15867) *
               C84581 +
           ((C26651 + C26650 + C26649) * C84188 +
            (C26648 + C26647 + C26646) * C15867) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
            C1680 * C721 + C84550 * C726) *
               C1786 +
           (C1676 * C785 + C1669 * C889 + C1678 * C784 + C1670 * C888 +
            C1680 * C783 + C84550 * C887) *
               C84581 +
           (C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
            C1680 * C1683 + C84550 * C1687) *
               C1787 +
           (C1676 * C1788 + C1669 * C2012 + C1678 * C1789 + C1670 * C2013 +
            C1680 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C1680 * C1791 + C84550 * C2015 + C1678 * C1790 + C1670 * C2014 +
            C1676 * C1789 + C1669 * C2013) *
               C84558 +
           (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
            C1676 * C1682 + C1669 * C1686) *
               C1787 +
           (C1680 * C782 + C84550 * C886 + C1678 * C783 + C1670 * C887 +
            C1676 * C784 + C1669 * C888) *
               C84581 +
           (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
            C1676 * C722 + C1669 * C727) *
               C1786 +
           (C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
            C1676 * C174 + C1669 * C331) *
               C84596 +
           (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
            C1676 * C103 + C1669 * C109) *
               C1785) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C84603 * C84604 * C90 -
          ((C101 * C178 + C85 * C335 + C99 * C177 + C84 * C334 + C97 * C176 +
            C83 * C333 + C95 * C175 + C82 * C332 + C93 * C174 + C81 * C331) *
               C84246 +
           (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 + C97 * C105 +
            C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 + C81 * C109) *
               C172) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
            C13629 * C721 + C84550 * C726) *
               C13723 +
           (C13625 * C785 + C84590 * C889 + C13627 * C784 + C84574 * C888 +
            C13629 * C783 + C84550 * C887) *
               C13622 +
           (C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
            C13629 * C1683 + C84550 * C1687) *
               C13724 +
           (C13625 * C1788 + C84590 * C2012 + C13627 * C1789 + C84574 * C2013 +
            C13629 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C13629 * C1791 + C84550 * C2015 + C13627 * C1790 + C84574 * C2014 +
            C13625 * C1789 + C84590 * C2013) *
               C84558 +
           (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
            C13625 * C1682 + C84590 * C1686) *
               C13724 +
           (C13629 * C782 + C84550 * C886 + C13627 * C783 + C84574 * C887 +
            C13625 * C784 + C84590 * C888) *
               C13622 +
           (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
            C13625 * C722 + C84590 * C727) *
               C13723 +
           (C13629 * C176 + C84550 * C333 + C13627 * C175 + C84574 * C332 +
            C13625 * C174 + C84590 * C331) *
               C13621 +
           (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
            C13625 * C103 + C84590 * C109) *
               C13722) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 +
           (C15867 * C723 + C84188 * C728) * C15927 +
           (C15867 * C785 + C84188 * C889) * C15862 +
           (C15867 * C1681 + C84188 * C1685) * C15928 +
           (C15867 * C1788 + C84188 * C2012) * C15863 +
           (C15867 * C2599 + C84188 * C2602) * C15929 +
           (C15867 * C2715 + C84188 * C2899) * C15864 +
           (C15867 * C15868 + C84188 * C15870) * C15930 +
           (C15867 * C15931 + C84188 * C16023) * C15865) *
              C84257 * C84603 * C84604 * C90 -
          ((C15867 * C15932 + C84188 * C16024) * C15865 +
           (C15867 * C15869 + C84188 * C15871) * C15930 +
           (C15867 * C2714 + C84188 * C2898) * C15864 +
           (C15867 * C2598 + C84188 * C2601) * C15929 +
           (C15867 * C1789 + C84188 * C2013) * C15863 +
           (C15867 * C1682 + C84188 * C1686) * C15928 +
           (C15867 * C784 + C84188 * C888) * C15862 +
           (C15867 * C722 + C84188 * C727) * C15927 +
           (C15867 * C174 + C84188 * C331) * C15861 +
           (C15867 * C103 + C84188 * C109) * C15926) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C172 +
            (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
             C13629 * C175 + C84550 * C332) *
                C84246) *
               C26458 +
           ((C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
             C13629 * C1181 + C84550 * C1186) *
                C172 +
            (C13625 * C1245 + C84590 * C1349 + C13627 * C1244 + C84574 * C1348 +
             C13629 * C1243 + C84550 * C1347) *
                C84246) *
               C26459 +
           ((C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
             C13629 * C4214 + C84550 * C4218) *
                C172 +
            (C13625 * C4307 + C84590 * C4534 + C13627 * C4308 + C84574 * C4535 +
             C13629 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C13629 * C4310 + C84550 * C4537 + C13627 * C4309 + C84574 * C4536 +
             C13625 * C4308 + C84590 * C4535) *
                C84246 +
            (C13629 * C4215 + C84550 * C4219 + C13627 * C4214 + C84574 * C4218 +
             C13625 * C4213 + C84590 * C4217) *
                C172) *
               C84561 +
           ((C13629 * C1242 + C84550 * C1346 + C13627 * C1243 + C84574 * C1347 +
             C13625 * C1244 + C84590 * C1348) *
                C84246 +
            (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 + C84574 * C1186 +
             C13625 * C1182 + C84590 * C1187) *
                C172) *
               C26459 +
           ((C13629 * C176 + C84550 * C333 + C13627 * C175 + C84574 * C332 +
             C13625 * C174 + C84590 * C331) *
                C84246 +
            (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
             C13625 * C103 + C84590 * C109) *
                C172) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C1785 +
            (C15867 * C173 + C84188 * C330) * C84596 + C16500 * C1786 +
            C16501 * C84581 + C16502 * C1787 + C16503 * C84558) *
               C26458 +
           (C19118 * C1785 + C19119 * C84596 + C18277 * C1786 +
            C18278 * C84581 + C18279 * C1787 + C18280 * C84558) *
               C26459 +
           (C19120 * C1785 + C19121 * C84596 + C18281 * C1786 +
            C18282 * C84581 + C18283 * C1787 + C18284 * C84558) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C15867 * C17344 + C84188 * C17500) * C84558 +
            (C15867 * C17255 + C84188 * C17257) * C1787 +
            (C15867 * C5200 + C84188 * C5360) * C84581 +
            (C15867 * C5114 + C84188 * C5117) * C1786 +
            (C15867 * C4308 + C84188 * C4535) * C84596 +
            (C15867 * C4213 + C84188 * C4217) * C1785) *
               C84561 +
           ((C15867 * C3544 + C84188 * C3715) * C84558 +
            (C15867 * C3442 + C84188 * C3448) * C1787 +
            (C15867 * C3545 + C84188 * C3718) * C84581 +
            (C15867 * C3445 + C84188 * C3451) * C1786 +
            (C15867 * C1244 + C84188 * C1348) * C84596 +
            (C15867 * C1182 + C84188 * C1187) * C1785) *
               C26459 +
           ((C15867 * C1789 + C84188 * C2013) * C84558 +
            (C15867 * C1682 + C84188 * C1686) * C1787 +
            (C15867 * C784 + C84188 * C888) * C84581 +
            (C15867 * C722 + C84188 * C727) * C1786 +
            (C15867 * C174 + C84188 * C331) * C84596 +
            (C15867 * C103 + C84188 * C109) * C1785) *
               C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C2092 * C1684 + C2119 + C2119 + C84558 * C2096 + C2091 * C720 +
            C2120 + C2120 + C84581 * C933 + C2090 * C105 + C2121 + C2121 +
            C84596 * C382) *
               C84550 +
           (C2139 + C2138 + C2137) * C1670 + (C2136 + C2135 + C2134) * C1669) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C84603 * C84604 * C90 -
          ((C378 * C107 + C399 + C399 + C84246 * C384) * C85 + C411 * C84 +
           C410 * C83 + C409 * C82 + C408 * C81) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13985 * C1684 + C14008 + C14008 + C84558 * C2096 + C13984 * C720 +
            C14009 + C14009 + C13622 * C933 + C13983 * C105 + C14010 + C14010 +
            C13621 * C382) *
               C84550 +
           (C14028 + C14027 + C14026) * C84574 +
           (C14025 + C14024 + C14023) * C84590) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C84604 * C90 -
          (C16071 * C15869 + C16080 + C16080 + C15865 * C16073 +
           C16070 * C2598 + C16081 + C16081 + C15864 * C3011 + C16069 * C1682 +
           C16082 + C16082 + C15863 * C2094 + C16068 * C722 + C16083 + C16083 +
           C15862 * C935 + C16067 * C103 + C16084 + C16084 + C15861 * C380) *
              C84188 * C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84590 +
            C408 * C84574 + C409 * C84550) *
               C26458 +
           (C6268 * C84590 + C4637 * C84574 + C4638 * C84550) * C26459 +
           (C6269 * C84590 + C4639 * C84574 + C4640 * C84550) * C84561) *
              C84603 * C84604 * C90 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84550 +
            C4640 * C84574 + C4639 * C84590) *
               C84561 +
           (C9045 * C84550 + C4638 * C84574 + C4637 * C84590) * C26459 +
           (C410 * C84550 + C409 * C84574 + C408 * C84590) * C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C84188 * C26458 +
           (C2090 * C1183 + C3809 + C3809 + C84596 * C1396 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2092 * C3443 + C3807 + C3807 +
            C84558 * C3798) *
               C84188 * C26459 +
           (C2090 * C4212 + C29005 + C29005 + C84596 * C4612 + C2091 * C5115 +
            C29006 + C29006 + C84581 * C5438 + C2092 * C17254 + C29007 +
            C29007 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C84604 * C90 -
          ((C2092 * C17255 + C29008 + C29008 + C84558 * C17576 + C2091 * C5114 +
            C29009 + C29009 + C84581 * C5437 + C2090 * C4213 + C29010 + C29010 +
            C84596 * C4613) *
               C84188 * C84561 +
           (C2092 * C3442 + C3804 + C3804 + C84558 * C3796 + C2091 * C3445 +
            C3805 + C3805 + C84581 * C3797 + C2090 * C1182 + C3806 + C3806 +
            C84596 * C1395) *
               C84188 * C26459 +
           (C2136 + C2135 + C2134) * C84188 * C26458) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 +
            (C251 * C723 + C84257 * C837) * C1786 +
            (C251 * C785 + C84257 * C988) * C84581 +
            (C251 * C1681 + C84257 * C1906) * C1787 +
            (C251 * C1788 + C84257 * C2213) * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C1787 +
            (C251 * C782 + C84257 * C985) * C84581 +
            (C251 * C720 + C84257 * C834) * C1786 + C474 * C84596 +
            C285 * C1785) *
               C84550 +
           (C2241 + C2231 + C2240 + C2228 + C2227 + C2226) * C1670 +
           (C2239 + C2223 + C2238 + C2220 + C2219 + C2218) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C84603 * C84604 * C90 -
          (((C251 * C178 + C84257 * C458) * C84246 +
            (C251 * C107 + C84257 * C257) * C172) *
               C85 +
           (C479 + C469) * C84 + (C478 + C466) * C83 + (C477 + C463) * C82 +
           (C476 + C460) * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C13724 + C7138 * C13622 +
            C6883 * C13723 + C474 * C13621 + C285 * C13722) *
               C84550 +
           (C14114 + C14113 + C14112 + C14111 + C14110 + C14109) * C84574 +
           (C14108 + C14107 + C14106 + C14105 + C14104 + C14103) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 +
           (C251 * C2599 + C84257 * C2795) * C15929 +
           (C251 * C2715 + C84257 * C3098) * C15864 +
           (C251 * C15868 + C84257 * C15977) * C15930 +
           (C251 * C15931 + C84257 * C16126) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C251 * C15932 + C84257 * C16127) * C15865 +
           (C251 * C15869 + C84257 * C15978) * C15930 +
           (C251 * C2714 + C84257 * C3097) * C15864 +
           (C251 * C2598 + C84257 * C2794) * C15929 + C2235 * C15863 +
           C1935 * C15928 + C2234 * C15862 + C1931 * C15927 + C472 * C15861 +
           C281 * C15926) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C172 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84246) *
               C84590 +
           ((C26646 + C26647 + C26648) * C172 +
            (C26892 + C26893 + C26894) * C84246) *
               C84574 +
           ((C26652 + C26653 + C26654) * C172 +
            (C26895 + C26896 + C26897) * C84246) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C26620 * C4310 + C84561 * C4717 + C26619 * C1242 + C26459 * C1445 +
             C26618 * C176 + C26458 * C456) *
                C84246 +
            (C26620 * C4215 + C84561 * C4419 + C26619 * C1180 + C26459 * C1294 +
             C26618 * C105 + C26458 * C255) *
                C172) *
               C84550 +
           ((C26897 + C26896 + C26895) * C84246 +
            (C26654 + C26653 + C26652) * C172) *
               C84574 +
           ((C26894 + C26893 + C26892) * C84246 +
            (C26648 + C26647 + C26646) * C172) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C1785 +
           (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
            C26620 * C4307 + C84561 * C4714) *
               C84596 +
           (C26618 * C723 + C26458 * C837 + C26619 * C3446 + C26459 * C3633 +
            C26620 * C5115 + C84561 * C5281) *
               C1786 +
           (C26618 * C785 + C26458 * C988 + C26619 * C3547 + C26459 * C3888 +
            C26620 * C5201 + C84561 * C5521) *
               C84581 +
           (C26618 * C1681 + C26458 * C1906 + C26619 * C3443 + C26459 * C3630 +
            C26620 * C17254 + C84561 * C17421) *
               C1787 +
           (C26618 * C1788 + C26458 * C2213 + C26619 * C3546 + C26459 * C3887 +
            C26620 * C17343 + C84561 * C17657) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C26620 * C17344 + C84561 * C17658 + C26619 * C3544 +
            C26459 * C3885 + C26618 * C1789 + C26458 * C2214) *
               C84558 +
           (C26620 * C17255 + C84561 * C17422 + C26619 * C3442 +
            C26459 * C3629 + C26618 * C1682 + C26458 * C1907) *
               C1787 +
           (C26620 * C5200 + C84561 * C5520 + C26619 * C3545 + C26459 * C3886 +
            C26618 * C784 + C26458 * C987) *
               C84581 +
           (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
            C26618 * C722 + C26458 * C836) *
               C1786 +
           (C26894 + C26893 + C26892) * C84596 +
           (C26648 + C26647 + C26646) * C1785) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
             C1680 * C721 + C84550 * C726) *
                C251 +
            (C1676 * C837 + C1669 * C1035 + C1678 * C836 + C1670 * C1034 +
             C1680 * C835 + C84550 * C1033) *
                C84257) *
               C84581 +
           ((C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
             C1680 * C1683 + C84550 * C1687) *
                C251 +
            (C1676 * C1906 + C1669 * C2315 + C1678 * C1907 + C1670 * C2316 +
             C1680 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C1680 * C1909 + C84550 * C2318 + C1678 * C1908 + C1670 * C2317 +
             C1676 * C1907 + C1669 * C2316) *
                C84257 +
            (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
             C1676 * C1682 + C1669 * C1686) *
                C251) *
               C84558 +
           ((C1680 * C834 + C84550 * C1032 + C1678 * C835 + C1670 * C1033 +
             C1676 * C836 + C1669 * C1034) *
                C84257 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C251) *
               C84581 +
           ((C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
             C1676 * C253 + C1669 * C522) *
                C84257 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C251) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C84603 * C84604 * C90 -
          ((C101 * C257 + C85 * C526 + C99 * C256 + C84 * C525 + C97 * C255 +
            C83 * C524 + C95 * C254 + C82 * C523 + C93 * C253 + C81 * C522) *
               C84257 +
           (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 + C97 * C105 +
            C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 + C81 * C109) *
               C251) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
             C13629 * C721 + C84550 * C726) *
                C251 +
            (C13625 * C837 + C84590 * C1035 + C13627 * C836 + C84574 * C1034 +
             C13629 * C835 + C84550 * C1033) *
                C84257) *
               C13622 +
           ((C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
             C13629 * C1683 + C84550 * C1687) *
                C251 +
            (C13625 * C1906 + C84590 * C2315 + C13627 * C1907 + C84574 * C2316 +
             C13629 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C13629 * C1909 + C84550 * C2318 + C13627 * C1908 + C84574 * C2317 +
             C13625 * C1907 + C84590 * C2316) *
                C84257 +
            (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
             C13625 * C1682 + C84590 * C1686) *
                C251) *
               C84558 +
           ((C13629 * C834 + C84550 * C1032 + C13627 * C835 + C84574 * C1033 +
             C13625 * C836 + C84590 * C1034) *
                C84257 +
            (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
             C13625 * C722 + C84590 * C727) *
                C251) *
               C13622 +
           ((C13629 * C255 + C84550 * C524 + C13627 * C254 + C84574 * C523 +
             C13625 * C253 + C84590 * C522) *
                C84257 +
            (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
             C13625 * C103 + C84590 * C109) *
                C251) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           ((C15867 * C723 + C84188 * C728) * C251 +
            (C15867 * C837 + C84188 * C1035) * C84257) *
               C15862 +
           ((C15867 * C1681 + C84188 * C1685) * C251 +
            (C15867 * C1906 + C84188 * C2315) * C84257) *
               C15863 +
           ((C15867 * C2599 + C84188 * C2602) * C251 +
            (C15867 * C2795 + C84188 * C3181) * C84257) *
               C15864 +
           ((C15867 * C15868 + C84188 * C15870) * C251 +
            (C15867 * C15977 + C84188 * C16170) * C84257) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C15867 * C15978 + C84188 * C16171) * C84257 +
            (C15867 * C15869 + C84188 * C15871) * C251) *
               C15865 +
           ((C15867 * C2794 + C84188 * C3180) * C84257 +
            (C15867 * C2598 + C84188 * C2601) * C251) *
               C15864 +
           ((C15867 * C1907 + C84188 * C2316) * C84257 +
            (C15867 * C1682 + C84188 * C1686) * C251) *
               C15863 +
           ((C15867 * C836 + C84188 * C1034) * C84257 +
            (C15867 * C722 + C84188 * C727) * C251) *
               C15862 +
           ((C15867 * C253 + C84188 * C522) * C84257 +
            (C15867 * C103 + C84188 * C109) * C251) *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C26618 +
           (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
            C13629 * C254 + C84550 * C523) *
               C26458 +
           (C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
            C13629 * C1181 + C84550 * C1186) *
               C26619 +
           (C13625 * C1297 + C84590 * C1495 + C13627 * C1296 + C84574 * C1494 +
            C13629 * C1295 + C84550 * C1493) *
               C26459 +
           (C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
            C13629 * C4214 + C84550 * C4218) *
               C26620 +
           (C13625 * C4416 + C84590 * C4810 + C13627 * C4417 + C84574 * C4811 +
            C13629 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C13629 * C4419 + C84550 * C4813 + C13627 * C4418 + C84574 * C4812 +
            C13625 * C4417 + C84590 * C4811) *
               C84561 +
           (C13629 * C4215 + C84550 * C4219 + C13627 * C4214 + C84574 * C4218 +
            C13625 * C4213 + C84590 * C4217) *
               C26620 +
           (C13629 * C1294 + C84550 * C1492 + C13627 * C1295 + C84574 * C1493 +
            C13625 * C1296 + C84590 * C1494) *
               C26459 +
           (C13629 * C1180 + C84550 * C1185 + C13627 * C1181 + C84574 * C1186 +
            C13625 * C1182 + C84590 * C1187) *
               C26619 +
           (C13629 * C255 + C84550 * C524 + C13627 * C254 + C84574 * C523 +
            C13625 * C253 + C84590 * C522) *
               C26458 +
           (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
            C13625 * C103 + C84590 * C109) *
               C26618) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C26618 +
            (C15867 * C252 + C84188 * C521) * C26458 + C19118 * C26619 +
            C19391 * C26459 + C19120 * C26620 + C19392 * C84561) *
               C84596 +
           (C16500 * C26618 + C16660 * C26458 + C18277 * C26619 +
            C18550 * C26459 + C18281 * C26620 + C18551 * C84561) *
               C84581 +
           (C16502 * C26618 + C16661 * C26458 + C18279 * C26619 +
            C18552 * C26459 + C18283 * C26620 + C18553 * C84561) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C15867 * C17422 + C84188 * C17734) * C84561 +
            (C15867 * C17255 + C84188 * C17257) * C26620 +
            (C15867 * C3629 + C84188 * C3964) * C26459 +
            (C15867 * C3442 + C84188 * C3448) * C26619 +
            (C15867 * C1907 + C84188 * C2316) * C26458 +
            (C15867 * C1682 + C84188 * C1686) * C26618) *
               C84558 +
           ((C15867 * C5280 + C84188 * C5597) * C84561 +
            (C15867 * C5114 + C84188 * C5117) * C26620 +
            (C15867 * C3632 + C84188 * C3967) * C26459 +
            (C15867 * C3445 + C84188 * C3451) * C26619 +
            (C15867 * C836 + C84188 * C1034) * C26458 +
            (C15867 * C722 + C84188 * C727) * C26618) *
               C84581 +
           ((C15867 * C4417 + C84188 * C4811) * C84561 +
            (C15867 * C4213 + C84188 * C4217) * C26620 +
            (C15867 * C1296 + C84188 * C1494) * C26459 +
            (C15867 * C1182 + C84188 * C1187) * C26619 +
            (C15867 * C253 + C84188 * C522) * C26458 +
            (C15867 * C103 + C84188 * C109) * C26618) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C1787 * C1909 + C84558 * C2396 + C1786 * C834 + C84581 * C1079 +
             C1785 * C255 + C84596 * C572) *
                C84257 +
            (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
             C1785 * C105 + C84596 * C176) *
                C251) *
               C84550 +
           ((C2415 + C2414 + C2413) * C84257 + (C1829 + C1828 + C1827) * C251) *
               C1670 +
           ((C2412 + C2411 + C2410) * C84257 + (C1823 + C1822 + C1821) * C251) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C84603 * C84604 * C90 -
          (((C172 * C257 + C84246 * C574) * C84257 +
            (C172 * C107 + C84246 * C178) * C251) *
               C85 +
           (C595 + C585) * C84 + (C594 + C582) * C83 + (C593 + C579) * C82 +
           (C592 + C576) * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C13724 * C1909 + C84558 * C2396 + C13723 * C834 + C13622 * C1079 +
             C13722 * C255 + C13621 * C572) *
                C84257 +
            (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
             C13722 * C105 + C13621 * C176) *
                C251) *
               C84550 +
           ((C14280 + C14279 + C14278) * C84257 +
            (C13758 + C13757 + C13756) * C251) *
               C84574 +
           ((C14277 + C14276 + C14275) * C84257 +
            (C13752 + C13751 + C13750) * C251) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C84604 * C90 -
          ((C15930 * C15978 + C15865 * C16215 + C15929 * C2794 +
            C15864 * C3275 + C15928 * C1907 + C15863 * C2394 + C15927 * C836 +
            C15862 * C1081 + C15926 * C253 + C15861 * C570) *
               C84257 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C251) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C26618 +
            (C172 * C252 + C84246 * C569) * C26458 + C5975 * C26619 +
            C6525 * C26459 + C5977 * C26620 + C6526 * C84561) *
               C84590 +
           (C27046 + C27047 + C27048 + C27049 + C27050 + C27051) * C84574 +
           (C27052 + C27053 + C27054 + C27055 + C27056 + C27057) * C84550) *
              C84603 * C84604 * C90 -
          (((C172 * C4419 + C84246 * C4891) * C84561 +
            (C172 * C4215 + C84246 * C4310) * C26620 + C9275 * C26459 +
            C8803 * C26619 + C590 * C26458 + C206 * C26618) *
               C84550 +
           (C27057 + C27056 + C27055 + C27054 + C27053 + C27052) * C84574 +
           (C27051 + C27050 + C27049 + C27048 + C27047 + C27046) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C26618 +
           (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
            C1787 * C1906 + C84558 * C2393) *
               C26458 +
           (C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
            C1787 * C3443 + C84558 * C3546) *
               C26619 +
           (C1785 * C1297 + C84596 * C1542 + C1786 * C3633 + C84581 * C4048 +
            C1787 * C3630 + C84558 * C4047) *
               C26459 +
           (C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
            C1787 * C17254 + C84558 * C17343) *
               C26620 +
           (C1785 * C4416 + C84596 * C4888 + C1786 * C5281 + C84581 * C5675 +
            C1787 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C84604 * C90 -
          ((C1787 * C17422 + C84558 * C17810 + C1786 * C5280 + C84581 * C5674 +
            C1785 * C4417 + C84596 * C4889) *
               C84561 +
           (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 + C84581 * C5200 +
            C1785 * C4213 + C84596 * C4308) *
               C26620 +
           (C1787 * C3629 + C84558 * C4045 + C1786 * C3632 + C84581 * C4046 +
            C1785 * C1296 + C84596 * C1541) *
               C26459 +
           (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
            C1785 * C1182 + C84596 * C1244) *
               C26619 +
           (C2412 + C2411 + C2410) * C26458 +
           (C1823 + C1822 + C1821) * C26618) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84581 +
            (C637 * C1681 + C2494 + C2494 + C84257 * C2489) * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84581 +
            C669 * C84596) *
               C84550 +
           (C2523 + C2522 + C2501) * C1670 + (C2521 + C2520 + C2495) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C84603 * C84604 * C90 -
          ((C637 * C107 + C658 + C658 + C84257 * C643) * C84246 * C85 +
           C674 * C84 + C673 * C83 + C672 * C82 + C671 * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            C7365 * C13622 + C669 * C13621) *
               C84550 +
           (C14360 + C14359 + C14358) * C84574 +
           (C14357 + C14356 + C14355) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 +
           (C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C15864 +
           (C637 * C15868 + C16261 + C16261 + C84257 * C16258) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C15865 +
           (C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C15864 +
           C2517 * C15863 + C2516 * C15862 + C667 * C15861) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84246 * C84590 +
           (C27171 + C27172 + C27173) * C84246 * C84574 +
           (C27174 + C27175 + C27176) * C84246 * C84550) *
              C84603 * C84604 * C90 -
          ((C27133 * C4215 + C27156 + C27156 + C84561 * C4996 + C27132 * C1180 +
            C27157 + C27157 + C26459 * C1586 + C27131 * C105 + C27158 + C27158 +
            C26458 * C641) *
               C84246 * C84550 +
           (C27176 + C27175 + C27174) * C84246 * C84574 +
           (C27173 + C27172 + C27171) * C84246 * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84596 +
           (C27131 * C723 + C27854 + C27854 + C26458 * C1129 + C27132 * C3446 +
            C27853 + C27853 + C26459 * C4128 + C27133 * C5115 + C27852 +
            C27852 + C84561 * C5752) *
               C84581 +
           (C27131 * C1681 + C29307 + C29307 + C26458 * C2489 + C27132 * C3443 +
            C29308 + C29308 + C26459 * C4127 + C27133 * C17254 + C29309 +
            C29309 + C84561 * C17885) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C27133 * C17255 + C29310 + C29310 + C84561 * C17886 +
            C27132 * C3442 + C29311 + C29311 + C26459 * C4125 + C27131 * C1682 +
            C29312 + C29312 + C26458 * C2490) *
               C84558 +
           (C27133 * C5114 + C27849 + C27849 + C84561 * C5751 + C27132 * C3445 +
            C27850 + C27850 + C26459 * C4126 + C27131 * C722 + C27851 + C27851 +
            C26458 * C1128) *
               C84581 +
           (C27173 + C27172 + C27171) * C84596) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C2634 + C2635 + C2636) * C84257 * C84581 +
           (C2637 + C2638 + C2639) * C84257 * C84558) *
              C84603 * C716 -
          ((C1679 * C2597 + C2619 + C2619 + C84550 * C2603 + C1677 * C2598 +
            C2620 + C2620 + C1670 * C2604 + C1675 * C2599 + C2621 + C2621 +
            C1669 * C2605) *
               C84257 * C84558 +
           (C2639 + C2638 + C2637) * C84257 * C84581 +
           (C2636 + C2635 + C2634) * C84257 * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C84603 * C716 -
          (C100 * C719 + C735 + C735 + C85 * C729 + C98 * C720 + C736 + C736 +
           C84 * C730 + C96 * C721 + C737 + C737 + C83 * C731 + C94 * C722 +
           C738 + C738 + C82 * C732 + C92 * C723 + C739 + C739 + C81 * C733) *
              C84257 * C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C84603 * C716 -
          ((C13628 * C2597 + C14447 + C14447 + C84550 * C2603 + C13626 * C2598 +
            C14448 + C14448 + C84574 * C2604 + C13624 * C2599 + C14449 +
            C14449 + C84590 * C2605) *
               C84257 * C84558 +
           (C14467 + C14466 + C14465) * C84257 * C13622 +
           (C14464 + C14463 + C14462) * C84257 * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C84603 * C716 -
          ((C15866 * C16304 + C16316 + C16316 + C84188 * C16306) * C84257 *
               C15865 +
           C16332 * C15864 + C16331 * C15863 + C16330 * C15862 +
           C16329 * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C26458 +
           (C13624 * C1183 + C15217 + C15217 + C84590 * C1193 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13628 * C1181 + C15215 +
            C15215 + C84550 * C1191) *
               C26459 +
           (C13624 * C4212 + C26462 + C26462 + C84590 * C4220 + C13626 * C4213 +
            C26463 + C26463 + C84574 * C4221 + C13628 * C4214 + C26464 +
            C26464 + C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C13628 * C5113 + C27251 + C27251 + C84550 * C5119 + C13626 * C5114 +
            C27252 + C27252 + C84574 * C5120 + C13624 * C5115 + C27253 +
            C27253 + C84590 * C5121) *
               C84561 +
           (C13628 * C3444 + C15212 + C15212 + C84550 * C3456 + C13626 * C3445 +
            C15213 + C15213 + C84574 * C3457 + C13624 * C3446 + C15214 +
            C15214 + C84590 * C3458) *
               C26459 +
           (C14464 + C14463 + C14462) * C26458) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C26458 +
            C18832 * C26459 + C18833 * C84561) *
               C84596 +
           (C29387 + C29388 + C29389) * C84581 +
           (C29390 + C29391 + C29392) * C84558) *
              C84603 * C716 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84561 +
            C25136 * C26459 + C16327 * C26458) *
               C84558 +
           (C29392 + C29391 + C29390) * C84581 +
           (C29389 + C29388 + C29387) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C84603 * C716 -
          ((C1787 * C2600 + C84558 * C2716 + C1786 * C1687 + C84581 * C1794 +
            C1785 * C726 + C84596 * C788) *
               C84550 +
           (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 + C84581 * C1790 +
            C1785 * C721 + C84596 * C783) *
               C1680 +
           (C1787 * C2601 + C84558 * C2717 + C1786 * C1686 + C84581 * C1793 +
            C1785 * C727 + C84596 * C789) *
               C1670 +
           (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
            C1785 * C722 + C84596 * C784) *
               C1678 +
           (C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
            C1785 * C728 + C84596 * C790) *
               C1669 +
           (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
            C1785 * C723 + C84596 * C785) *
               C1676) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C84603 * C716 -
          ((C172 * C724 + C84246 * C786) * C85 +
           (C172 * C719 + C84246 * C781) * C101 +
           (C172 * C725 + C84246 * C787) * C84 +
           (C172 * C720 + C84246 * C782) * C99 +
           (C172 * C726 + C84246 * C788) * C83 +
           (C172 * C721 + C84246 * C783) * C97 +
           (C172 * C727 + C84246 * C789) * C82 +
           (C172 * C722 + C84246 * C784) * C95 +
           (C172 * C728 + C84246 * C790) * C81 +
           (C172 * C723 + C84246 * C785) * C93) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C716 -
          ((C13724 * C2600 + C84558 * C2716 + C13723 * C1687 + C13622 * C1794 +
            C13722 * C726 + C13621 * C788) *
               C84550 +
           (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
            C13722 * C721 + C13621 * C783) *
               C13629 +
           (C13724 * C2601 + C84558 * C2717 + C13723 * C1686 + C13622 * C1793 +
            C13722 * C727 + C13621 * C789) *
               C84574 +
           (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
            C13722 * C722 + C13621 * C784) *
               C13627 +
           (C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
            C13722 * C728 + C13621 * C790) *
               C84590 +
           (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
            C13722 * C723 + C13621 * C785) *
               C13625) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C716 -
          ((C15930 * C16305 + C15865 * C16375 + C15929 * C15870 +
            C15864 * C15933 + C15928 * C2602 + C15863 * C2718 + C15927 * C1685 +
            C15862 * C1792 + C15926 * C728 + C15861 * C790) *
               C84188 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C15867) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C13625 +
            (C172 * C108 + C84246 * C179) * C84590 + C202 * C13627 +
            C203 * C84574 + C204 * C13629 + C205 * C84550) *
               C26458 +
           (C5975 * C13625 + C5976 * C84590 + C4332 * C13627 + C4333 * C84574 +
            C4334 * C13629 + C4335 * C84550) *
               C26459 +
           (C5977 * C13625 + C5978 * C84590 + C4336 * C13627 + C4337 * C84574 +
            C4338 * C13629 + C4339 * C84550) *
               C84561) *
              C84603 * C716 -
          (((C172 * C5116 + C84246 * C5202) * C84550 +
            (C172 * C5113 + C84246 * C5199) * C13629 +
            (C172 * C5117 + C84246 * C5203) * C84574 +
            (C172 * C5114 + C84246 * C5200) * C13627 +
            (C172 * C5118 + C84246 * C5204) * C84590 +
            (C172 * C5115 + C84246 * C5201) * C13625) *
               C84561 +
           ((C172 * C3450 + C84246 * C3549) * C84550 +
            (C172 * C3444 + C84246 * C3543) * C13629 +
            (C172 * C3451 + C84246 * C3551) * C84574 +
            (C172 * C3445 + C84246 * C3545) * C13627 +
            (C172 * C3452 + C84246 * C3553) * C84590 +
            (C172 * C3446 + C84246 * C3547) * C13625) *
               C26459 +
           ((C172 * C726 + C84246 * C788) * C84550 +
            (C172 * C721 + C84246 * C783) * C13629 +
            (C172 * C727 + C84246 * C789) * C84574 +
            (C172 * C722 + C84246 * C784) * C13627 +
            (C172 * C728 + C84246 * C790) * C84590 +
            (C172 * C723 + C84246 * C785) * C13625) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C15867 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C84188) *
               C26458 +
           ((C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
             C1787 * C3443 + C84558 * C3546) *
                C15867 +
            (C1785 * C1188 + C84596 * C1250 + C1786 * C3452 + C84581 * C3553 +
             C1787 * C3449 + C84558 * C3552) *
                C84188) *
               C26459 +
           ((C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
             C1787 * C17254 + C84558 * C17343) *
                C15867 +
            (C1785 * C4216 + C84596 * C4311 + C1786 * C5118 + C84581 * C5204 +
             C1787 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C716 -
          (((C1787 * C17968 + C84558 * C18072 + C1786 * C17256 +
             C84581 * C17345 + C1785 * C5118 + C84596 * C5204) *
                C84188 +
            (C1787 * C17967 + C84558 * C18071 + C1786 * C17254 +
             C84581 * C17343 + C1785 * C5115 + C84596 * C5201) *
                C15867) *
               C84561 +
           ((C1787 * C16809 + C84558 * C16862 + C1786 * C3449 + C84581 * C3552 +
             C1785 * C3452 + C84596 * C3553) *
                C84188 +
            (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 + C84581 * C3546 +
             C1785 * C3446 + C84596 * C3547) *
                C15867) *
               C26459 +
           ((C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
             C1785 * C728 + C84596 * C790) *
                C84188 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C15867) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
           (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C1680 +
            (C251 * C2601 + C84257 * C2797) * C1670 +
            (C251 * C2598 + C84257 * C2794) * C1678 +
            (C251 * C2602 + C84257 * C2798) * C1669 +
            (C251 * C2599 + C84257 * C2795) * C1676) *
               C84558 +
           (C2815 + C2814 + C2813 + C2812 + C2823 + C2822) * C84581 +
           (C2807 + C2806 + C2805 + C2804 + C2821 + C2820) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C84603 * C716 -
          ((C251 * C724 + C84257 * C838) * C85 +
           (C251 * C719 + C84257 * C833) * C101 +
           (C251 * C725 + C84257 * C839) * C84 +
           (C251 * C720 + C84257 * C834) * C99 +
           (C251 * C726 + C84257 * C840) * C83 +
           (C251 * C721 + C84257 * C835) * C97 +
           (C251 * C727 + C84257 * C841) * C82 +
           (C251 * C722 + C84257 * C836) * C95 +
           (C251 * C728 + C84257 * C842) * C81 +
           (C251 * C723 + C84257 * C837) * C93) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C13629 +
            (C251 * C2601 + C84257 * C2797) * C84574 +
            (C251 * C2598 + C84257 * C2794) * C13627 +
            (C251 * C2602 + C84257 * C2798) * C84590 +
            (C251 * C2599 + C84257 * C2795) * C13625) *
               C84558 +
           (C14627 + C14626 + C14625 + C14624 + C14623 + C14622) * C13622 +
           (C14621 + C14620 + C14619 + C14618 + C14617 + C14616) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C84603 * C716 -
          (((C251 * C16305 + C84257 * C16419) * C84188 +
            (C251 * C16304 + C84257 * C16418) * C15867) *
               C15865 +
           (C16440 + C16439) * C15864 + (C16438 + C16437) * C15863 +
           (C16424 + C16423) * C15862 + (C16422 + C16421) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C13625 +
           (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
            C26620 * C4216 + C84561 * C4420) *
               C84590 +
           (C26646 + C26647 + C26648) * C13627 +
           (C26649 + C26650 + C26651) * C84574 +
           (C26652 + C26653 + C26654) * C13629 +
           (C26655 + C26656 + C26657) * C84550) *
              C84246 * C84603 * C716 -
          ((C26620 * C5116 + C84561 * C5282 + C26619 * C3450 + C26459 * C3637 +
            C26618 * C726 + C26458 * C840) *
               C84550 +
           (C26620 * C5113 + C84561 * C5279 + C26619 * C3444 + C26459 * C3631 +
            C26618 * C721 + C26458 * C835) *
               C13629 +
           (C26620 * C5117 + C84561 * C5283 + C26619 * C3451 + C26459 * C3638 +
            C26618 * C727 + C26458 * C841) *
               C84574 +
           (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
            C26618 * C722 + C26458 * C836) *
               C13627 +
           (C26620 * C5118 + C84561 * C5284 + C26619 * C3452 + C26459 * C3639 +
            C26618 * C728 + C26458 * C842) *
               C84590 +
           (C26620 * C5115 + C84561 * C5281 + C26619 * C3446 + C26459 * C3633 +
            C26618 * C723 + C26458 * C837) *
               C13625) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C15867 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84188) *
               C84596 +
           ((C29565 + C29566 + C29567) * C15867 +
            (C29568 + C29569 + C29570) * C84188) *
               C84581 +
           ((C29571 + C29572 + C29573) * C15867 +
            (C29574 + C29575 + C29576) * C84188) *
               C84558) *
              C84603 * C716 -
          (((C26620 * C17968 + C84561 * C18148 + C26619 * C16809 +
             C26459 * C16908 + C26618 * C2602 + C26458 * C2798) *
                C84188 +
            (C26620 * C17967 + C84561 * C18147 + C26619 * C16807 +
             C26459 * C16906 + C26618 * C2599 + C26458 * C2795) *
                C15867) *
               C84558 +
           ((C29576 + C29575 + C29574) * C84188 +
            (C29573 + C29572 + C29571) * C15867) *
               C84581 +
           ((C29570 + C29569 + C29568) * C84188 +
            (C29567 + C29566 + C29565) * C15867) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C2925 + C2926 + C2927) * C1786 + (C2928 + C2929 + C2930) * C84581 +
           (C2931 + C2932 + C2933) * C1787 + (C2934 + C2935 + C2936) * C84558) *
              C84257 * C84603 * C716 -
          ((C1680 * C2713 + C84550 * C2897 + C1678 * C2714 + C1670 * C2898 +
            C1676 * C2715 + C1669 * C2899) *
               C84558 +
           (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
            C1676 * C2599 + C1669 * C2602) *
               C1787 +
           (C2936 + C2935 + C2934) * C84581 + (C2933 + C2932 + C2931) * C1786 +
           (C2930 + C2929 + C2928) * C84596 + (C2927 + C2926 + C2925) * C1785) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C84603 * C716 -
          ((C101 * C781 + C85 * C885 + C99 * C782 + C84 * C886 + C97 * C783 +
            C83 * C887 + C95 * C784 + C82 * C888 + C93 * C785 + C81 * C889) *
               C84246 +
           (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 + C97 * C721 +
            C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 + C81 * C728) *
               C172) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C84603 * C716 -
          ((C13629 * C2713 + C84550 * C2897 + C13627 * C2714 + C84574 * C2898 +
            C13625 * C2715 + C84590 * C2899) *
               C84558 +
           (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
            C13625 * C2599 + C84590 * C2602) *
               C13724 +
           (C14737 + C14736 + C14735) * C13622 +
           (C14734 + C14733 + C14732) * C13723 +
           (C14731 + C14730 + C14729) * C13621 +
           (C14728 + C14727 + C14726) * C13722) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C84603 * C716 -
          ((C15867 * C16374 + C84188 * C16482) * C15865 +
           (C15867 * C16304 + C84188 * C16305) * C15930 + C16507 * C15864 +
           C16506 * C15929 + C16505 * C15863 + C16504 * C15928 +
           C16503 * C15862 + C16502 * C15927 + C16501 * C15861 +
           C16500 * C15926) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C172 +
            (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
             C13629 * C175 + C84550 * C332) *
                C84246) *
               C26458 +
           ((C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
             C13629 * C1181 + C84550 * C1186) *
                C172 +
            (C13625 * C1245 + C84590 * C1349 + C13627 * C1244 + C84574 * C1348 +
             C13629 * C1243 + C84550 * C1347) *
                C84246) *
               C26459 +
           ((C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
             C13629 * C4214 + C84550 * C4218) *
                C172 +
            (C13625 * C4307 + C84590 * C4534 + C13627 * C4308 + C84574 * C4535 +
             C13629 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C716 -
          (((C13629 * C5199 + C84550 * C5359 + C13627 * C5200 + C84574 * C5360 +
             C13625 * C5201 + C84590 * C5361) *
                C84246 +
            (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 + C84574 * C5117 +
             C13625 * C5115 + C84590 * C5118) *
                C172) *
               C84561 +
           ((C13629 * C3543 + C84550 * C3717 + C13627 * C3545 + C84574 * C3718 +
             C13625 * C3547 + C84590 * C3719) *
                C84246 +
            (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
             C13625 * C3446 + C84590 * C3452) *
                C172) *
               C26459 +
           ((C14731 + C14730 + C14729) * C84246 +
            (C14728 + C14727 + C14726) * C172) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C1785 +
            (C15867 * C173 + C84188 * C330) * C84596 + C16500 * C1786 +
            C16501 * C84581 + C16502 * C1787 + C16503 * C84558) *
               C26458 +
           (C19118 * C1785 + C19119 * C84596 + C18277 * C1786 +
            C18278 * C84581 + C18279 * C1787 + C18280 * C84558) *
               C26459 +
           (C19120 * C1785 + C19121 * C84596 + C18281 * C1786 +
            C18282 * C84581 + C18283 * C1787 + C18284 * C84558) *
               C84561) *
              C84603 * C716 -
          (((C15867 * C18071 + C84188 * C18259) * C84558 +
            (C15867 * C17967 + C84188 * C17968) * C1787 + C18284 * C84581 +
            C18283 * C1786 + C18282 * C84596 + C18281 * C1785) *
               C84561 +
           (C25353 * C84558 + C25352 * C1787 + C18280 * C84581 +
            C18279 * C1786 + C18278 * C84596 + C18277 * C1785) *
               C26459 +
           (C16505 * C84558 + C16504 * C1787 + C16503 * C84581 +
            C16502 * C1786 + C16501 * C84596 + C16500 * C1785) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C84603 * C716 -
          ((C2092 * C2597 + C3014 + C3014 + C84558 * C3010 + C2091 * C1683 +
            C3015 + C3015 + C84581 * C2095 + C2090 * C721 + C3016 + C3016 +
            C84596 * C934) *
               C84550 +
           (C2092 * C2598 + C3017 + C3017 + C84558 * C3011 + C2091 * C1682 +
            C3018 + C3018 + C84581 * C2094 + C2090 * C722 + C3019 + C3019 +
            C84596 * C935) *
               C1670 +
           (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
            C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
            C84596 * C936) *
               C1669) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C84603 * C716 -
          ((C378 * C719 + C938 + C938 + C84246 * C932) * C85 +
           (C378 * C720 + C939 + C939 + C84246 * C933) * C84 +
           (C378 * C721 + C940 + C940 + C84246 * C934) * C83 +
           (C378 * C722 + C941 + C941 + C84246 * C935) * C82 +
           (C378 * C723 + C942 + C942 + C84246 * C936) * C81) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C716 -
          ((C13985 * C2597 + C14812 + C14812 + C84558 * C3010 + C13984 * C1683 +
            C14813 + C14813 + C13622 * C2095 + C13983 * C721 + C14814 + C14814 +
            C13621 * C934) *
               C84550 +
           (C13985 * C2598 + C14815 + C14815 + C84558 * C3011 + C13984 * C1682 +
            C14816 + C14816 + C13622 * C2094 + C13983 * C722 + C14817 + C14817 +
            C13621 * C935) *
               C84574 +
           (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 + C13984 * C1681 +
            C14819 + C14819 + C13622 * C2093 + C13983 * C723 + C14820 + C14820 +
            C13621 * C936) *
               C84590) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C716 -
          (C16071 * C16304 + C16551 + C16551 + C15865 * C16549 +
           C16070 * C15868 + C16552 + C16552 + C15864 * C16072 +
           C16069 * C2599 + C16553 + C16553 + C15863 * C3012 + C16068 * C1681 +
           C16554 + C16554 + C15862 * C2093 + C16067 * C723 + C16555 + C16555 +
           C15861 * C936) *
              C84188 * C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84590 +
            C408 * C84574 + C409 * C84550) *
               C26458 +
           (C6268 * C84590 + C4637 * C84574 + C4638 * C84550) * C26459 +
           (C6269 * C84590 + C4639 * C84574 + C4640 * C84550) * C84561) *
              C84603 * C716 -
          (((C378 * C5113 + C5440 + C5440 + C84246 * C5436) * C84550 +
            (C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C84574 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C84590) *
               C84561 +
           ((C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C84550 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84574 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84590) *
               C26459 +
           ((C378 * C721 + C940 + C940 + C84246 * C934) * C84550 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C84574 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C84590) *
               C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C84188 * C26458 +
           (C2090 * C1183 + C3809 + C3809 + C84596 * C1396 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2092 * C3443 + C3807 + C3807 +
            C84558 * C3798) *
               C84188 * C26459 +
           (C2090 * C4212 + C29005 + C29005 + C84596 * C4612 + C2091 * C5115 +
            C29006 + C29006 + C84581 * C5438 + C2092 * C17254 + C29007 +
            C29007 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C716 -
          ((C2092 * C17967 + C29725 + C29725 + C84558 * C18358 +
            C2091 * C17254 + C29726 + C29726 + C84581 * C17575 + C2090 * C5115 +
            C29727 + C29727 + C84596 * C5438) *
               C84188 * C84561 +
           (C2092 * C16807 + C29728 + C29728 + C84558 * C16996 + C2091 * C3443 +
            C29729 + C29729 + C84581 * C3798 + C2090 * C3446 + C29730 + C29730 +
            C84596 * C3799) *
               C84188 * C26459 +
           (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
            C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
            C84596 * C936) *
               C84188 * C26458) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
            C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C1787 + C2237 * C84581 +
            C1937 * C1786 + C2236 * C84596 + C1933 * C1785) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C1787 + C2235 * C84581 +
            C1935 * C1786 + C2234 * C84596 + C1931 * C1785) *
               C1670 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C1787 + C3105 * C84581 +
            C2818 * C1786 + C3104 * C84596 + C2816 * C1785) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C84603 * C716 -
          (((C251 * C781 + C84257 * C984) * C84246 +
            (C251 * C719 + C84257 * C833) * C172) *
               C85 +
           ((C251 * C782 + C84257 * C985) * C84246 +
            (C251 * C720 + C84257 * C834) * C172) *
               C84 +
           ((C251 * C783 + C84257 * C986) * C84246 +
            (C251 * C721 + C84257 * C835) * C172) *
               C83 +
           ((C251 * C784 + C84257 * C987) * C84246 +
            (C251 * C722 + C84257 * C836) * C172) *
               C82 +
           ((C251 * C785 + C84257 * C988) * C84246 +
            (C251 * C723 + C84257 * C837) * C172) *
               C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C13724 + C2237 * C13622 +
            C1937 * C13723 + C2236 * C13621 + C1933 * C13722) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C13724 + C2235 * C13622 +
            C1935 * C13723 + C2234 * C13621 + C1931 * C13722) *
               C84574 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C13724 + C3105 * C13622 +
            C2818 * C13723 + C3104 * C13621 + C2816 * C13722) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C84603 * C716 -
          ((C251 * C16374 + C84257 * C16597) * C15865 +
           (C251 * C16304 + C84257 * C16418) * C15930 + C16604 * C15864 +
           C16435 * C15929 + C16603 * C15863 + C16433 * C15928 +
           C3105 * C15862 + C2818 * C15927 + C3104 * C15861 + C2816 * C15926) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C172 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84246) *
               C84590 +
           ((C26646 + C26647 + C26648) * C172 +
            (C26892 + C26893 + C26894) * C84246) *
               C84574 +
           ((C26652 + C26653 + C26654) * C172 +
            (C26895 + C26896 + C26897) * C84246) *
               C84550) *
              C84603 * C716 -
          (((C26620 * C5199 + C84561 * C5519 + C26619 * C3543 + C26459 * C3884 +
             C26618 * C783 + C26458 * C986) *
                C84246 +
            (C26620 * C5113 + C84561 * C5279 + C26619 * C3444 + C26459 * C3631 +
             C26618 * C721 + C26458 * C835) *
                C172) *
               C84550 +
           ((C26620 * C5200 + C84561 * C5520 + C26619 * C3545 + C26459 * C3886 +
             C26618 * C784 + C26458 * C987) *
                C84246 +
            (C26620 * C5114 + C84561 * C5280 + C26619 * C3445 + C26459 * C3632 +
             C26618 * C722 + C26458 * C836) *
                C172) *
               C84574 +
           ((C26620 * C5201 + C84561 * C5521 + C26619 * C3547 + C26459 * C3888 +
             C26618 * C785 + C26458 * C988) *
                C84246 +
            (C26620 * C5115 + C84561 * C5281 + C26619 * C3446 + C26459 * C3633 +
             C26618 * C723 + C26458 * C837) *
                C172) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C1785 +
           (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
            C26620 * C4307 + C84561 * C4714) *
               C84596 +
           (C29565 + C29566 + C29567) * C1786 +
           (C29817 + C29818 + C29819) * C84581 +
           (C29571 + C29572 + C29573) * C1787 +
           (C29820 + C29821 + C29822) * C84558) *
              C84188 * C84603 * C716 -
          ((C26620 * C18071 + C84561 * C18439 + C26619 * C16860 +
            C26459 * C17045 + C26618 * C2715 + C26458 * C3098) *
               C84558 +
           (C26620 * C17967 + C84561 * C18147 + C26619 * C16807 +
            C26459 * C16906 + C26618 * C2599 + C26458 * C2795) *
               C1787 +
           (C29822 + C29821 + C29820) * C84581 +
           (C29573 + C29572 + C29571) * C1786 +
           (C29819 + C29818 + C29817) * C84596 +
           (C29567 + C29566 + C29565) * C1785) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C2925 + C2926 + C2927) * C251 + (C3195 + C3196 + C3197) * C84257) *
               C84581 +
           ((C2931 + C2932 + C2933) * C251 + (C3198 + C3199 + C3200) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C1680 * C2793 + C84550 * C3179 + C1678 * C2794 + C1670 * C3180 +
             C1676 * C2795 + C1669 * C3181) *
                C84257 +
            (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
             C1676 * C2599 + C1669 * C2602) *
                C251) *
               C84558 +
           ((C3200 + C3199 + C3198) * C84257 + (C2933 + C2932 + C2931) * C251) *
               C84581 +
           ((C3197 + C3196 + C3195) * C84257 + (C2927 + C2926 + C2925) * C251) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C84603 * C716 -
          ((C101 * C833 + C85 * C1031 + C99 * C834 + C84 * C1032 + C97 * C835 +
            C83 * C1033 + C95 * C836 + C82 * C1034 + C93 * C837 + C81 * C1035) *
               C84257 +
           (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 + C97 * C721 +
            C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 + C81 * C728) *
               C251) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C13629 * C2793 + C84550 * C3179 + C13627 * C2794 + C84574 * C3180 +
             C13625 * C2795 + C84590 * C3181) *
                C84257 +
            (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
             C13625 * C2599 + C84590 * C2602) *
                C251) *
               C84558 +
           ((C14986 + C14985 + C14984) * C84257 +
            (C14734 + C14733 + C14732) * C251) *
               C13622 +
           ((C14983 + C14982 + C14981) * C84257 +
            (C14728 + C14727 + C14726) * C251) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C84603 * C716 -
          (((C15867 * C16418 + C84188 * C16646) * C84257 +
            (C15867 * C16304 + C84188 * C16305) * C251) *
               C15865 +
           (C16667 + C16657) * C15864 + (C16666 + C16654) * C15863 +
           (C16665 + C16651) * C15862 + (C16664 + C16648) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C26618 +
           (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
            C13629 * C254 + C84550 * C523) *
               C26458 +
           (C13625 * C1183 + C84590 * C1188 + C13627 * C1182 + C84574 * C1187 +
            C13629 * C1181 + C84550 * C1186) *
               C26619 +
           (C13625 * C1297 + C84590 * C1495 + C13627 * C1296 + C84574 * C1494 +
            C13629 * C1295 + C84550 * C1493) *
               C26459 +
           (C13625 * C4212 + C84590 * C4216 + C13627 * C4213 + C84574 * C4217 +
            C13629 * C4214 + C84550 * C4218) *
               C26620 +
           (C13625 * C4416 + C84590 * C4810 + C13627 * C4417 + C84574 * C4811 +
            C13629 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C13629 * C5279 + C84550 * C5596 + C13627 * C5280 + C84574 * C5597 +
            C13625 * C5281 + C84590 * C5598) *
               C84561 +
           (C13629 * C5113 + C84550 * C5116 + C13627 * C5114 + C84574 * C5117 +
            C13625 * C5115 + C84590 * C5118) *
               C26620 +
           (C13629 * C3631 + C84550 * C3966 + C13627 * C3632 + C84574 * C3967 +
            C13625 * C3633 + C84590 * C3968) *
               C26459 +
           (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
            C13625 * C3446 + C84590 * C3452) *
               C26619 +
           (C14983 + C14982 + C14981) * C26458 +
           (C14728 + C14727 + C14726) * C26618) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C26618 +
            (C15867 * C252 + C84188 * C521) * C26458 + C19118 * C26619 +
            C19391 * C26459 + C19120 * C26620 + C19392 * C84561) *
               C84596 +
           (C29897 + C29898 + C29899 + C29900 + C29901 + C29902) * C84581 +
           (C29903 + C29904 + C29905 + C29906 + C29907 + C29908) * C84558) *
              C84603 * C716 -
          (((C15867 * C18147 + C84188 * C18532) * C84561 +
            (C15867 * C17967 + C84188 * C17968) * C26620 + C25575 * C26459 +
            C25352 * C26619 + C16662 * C26458 + C16504 * C26618) *
               C84558 +
           (C29908 + C29907 + C29906 + C29905 + C29904 + C29903) * C84581 +
           (C29902 + C29901 + C29900 + C29899 + C29898 + C29897) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C1787 * C2793 + C84558 * C3274 + C1786 * C1908 + C84581 * C2395 +
             C1785 * C835 + C84596 * C1080) *
                C84257 +
            (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 + C84581 * C1790 +
             C1785 * C721 + C84596 * C783) *
                C251) *
               C84550 +
           ((C1787 * C2794 + C84558 * C3275 + C1786 * C1907 + C84581 * C2394 +
             C1785 * C836 + C84596 * C1081) *
                C84257 +
            (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
             C1785 * C722 + C84596 * C784) *
                C251) *
               C1670 +
           ((C1787 * C2795 + C84558 * C3276 + C1786 * C1906 + C84581 * C2393 +
             C1785 * C837 + C84596 * C1082) *
                C84257 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C251) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C84603 * C716 -
          (((C172 * C833 + C84246 * C1078) * C84257 +
            (C172 * C719 + C84246 * C781) * C251) *
               C85 +
           ((C172 * C834 + C84246 * C1079) * C84257 +
            (C172 * C720 + C84246 * C782) * C251) *
               C84 +
           ((C172 * C835 + C84246 * C1080) * C84257 +
            (C172 * C721 + C84246 * C783) * C251) *
               C83 +
           ((C172 * C836 + C84246 * C1081) * C84257 +
            (C172 * C722 + C84246 * C784) * C251) *
               C82 +
           ((C172 * C837 + C84246 * C1082) * C84257 +
            (C172 * C723 + C84246 * C785) * C251) *
               C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C13724 * C2793 + C84558 * C3274 + C13723 * C1908 + C13622 * C2395 +
             C13722 * C835 + C13621 * C1080) *
                C84257 +
            (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
             C13722 * C721 + C13621 * C783) *
                C251) *
               C84550 +
           ((C13724 * C2794 + C84558 * C3275 + C13723 * C1907 + C13622 * C2394 +
             C13722 * C836 + C13621 * C1081) *
                C84257 +
            (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
             C13722 * C722 + C13621 * C784) *
                C251) *
               C84574 +
           ((C13724 * C2795 + C84558 * C3276 + C13723 * C1906 + C13622 * C2393 +
             C13722 * C837 + C13621 * C1082) *
                C84257 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C251) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C716 -
          ((C15930 * C16418 + C15865 * C16709 + C15929 * C15977 +
            C15864 * C16214 + C15928 * C2795 + C15863 * C3276 + C15927 * C1906 +
            C15862 * C2393 + C15926 * C837 + C15861 * C1082) *
               C84257 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C251) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C26618 +
            (C172 * C252 + C84246 * C569) * C26458 + C5975 * C26619 +
            C6525 * C26459 + C5977 * C26620 + C6526 * C84561) *
               C84590 +
           (C27046 + C27047 + C27048 + C27049 + C27050 + C27051) * C84574 +
           (C27052 + C27053 + C27054 + C27055 + C27056 + C27057) * C84550) *
              C84603 * C716 -
          (((C172 * C5279 + C84246 * C5673) * C84561 +
            (C172 * C5113 + C84246 * C5199) * C26620 +
            (C172 * C3631 + C84246 * C4044) * C26459 +
            (C172 * C3444 + C84246 * C3543) * C26619 +
            (C172 * C835 + C84246 * C1080) * C26458 +
            (C172 * C721 + C84246 * C783) * C26618) *
               C84550 +
           ((C172 * C5280 + C84246 * C5674) * C84561 +
            (C172 * C5114 + C84246 * C5200) * C26620 +
            (C172 * C3632 + C84246 * C4046) * C26459 +
            (C172 * C3445 + C84246 * C3545) * C26619 +
            (C172 * C836 + C84246 * C1081) * C26458 +
            (C172 * C722 + C84246 * C784) * C26618) *
               C84574 +
           ((C172 * C5281 + C84246 * C5675) * C84561 +
            (C172 * C5115 + C84246 * C5201) * C26620 +
            (C172 * C3633 + C84246 * C4048) * C26459 +
            (C172 * C3446 + C84246 * C3547) * C26619 +
            (C172 * C837 + C84246 * C1082) * C26458 +
            (C172 * C723 + C84246 * C785) * C26618) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C26618 +
           (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
            C1787 * C1906 + C84558 * C2393) *
               C26458 +
           (C1785 * C1183 + C84596 * C1245 + C1786 * C3446 + C84581 * C3547 +
            C1787 * C3443 + C84558 * C3546) *
               C26619 +
           (C1785 * C1297 + C84596 * C1542 + C1786 * C3633 + C84581 * C4048 +
            C1787 * C3630 + C84558 * C4047) *
               C26459 +
           (C1785 * C4212 + C84596 * C4307 + C1786 * C5115 + C84581 * C5201 +
            C1787 * C17254 + C84558 * C17343) *
               C26620 +
           (C1785 * C4416 + C84596 * C4888 + C1786 * C5281 + C84581 * C5675 +
            C1787 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C716 -
          ((C1787 * C18147 + C84558 * C18631 + C1786 * C17421 +
            C84581 * C17809 + C1785 * C5281 + C84596 * C5675) *
               C84561 +
           (C1787 * C17967 + C84558 * C18071 + C1786 * C17254 +
            C84581 * C17343 + C1785 * C5115 + C84596 * C5201) *
               C26620 +
           (C1787 * C16906 + C84558 * C17133 + C1786 * C3630 + C84581 * C4047 +
            C1785 * C3633 + C84596 * C4048) *
               C26459 +
           (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 + C84581 * C3546 +
            C1785 * C3446 + C84596 * C3547) *
               C26619 +
           (C1787 * C2795 + C84558 * C3276 + C1786 * C1906 + C84581 * C2393 +
            C1785 * C837 + C84596 * C1082) *
               C26458 +
           (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
            C1785 * C723 + C84596 * C785) *
               C26618) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            C3366 * C84581 + C3367 * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C84581 + C2518 * C84596) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C84581 + C2516 * C84596) *
               C1670 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C84581 + C3366 * C84596) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C84603 * C716 -
          ((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84246 * C85 +
           (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84246 * C84 +
           (C637 * C721 + C1133 + C1133 + C84257 * C1127) * C84246 * C83 +
           (C637 * C722 + C1134 + C1134 + C84257 * C1128) * C84246 * C82 +
           (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84246 * C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C13622 + C2518 * C13621) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C13622 + C2516 * C13621) *
               C84574 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C13622 + C3366 * C13621) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C84603 * C716 -
          ((C637 * C16304 + C16758 + C16758 + C84257 * C16752) * C15865 +
           C16764 * C15864 + C16763 * C15863 + C3367 * C15862 +
           C3366 * C15861) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84246 * C84590 +
           (C27171 + C27172 + C27173) * C84246 * C84574 +
           (C27174 + C27175 + C27176) * C84246 * C84550) *
              C84603 * C716 -
          ((C27133 * C5113 + C27846 + C27846 + C84561 * C5750 + C27132 * C3444 +
            C27847 + C27847 + C26459 * C4124 + C27131 * C721 + C27848 + C27848 +
            C26458 * C1127) *
               C84246 * C84550 +
           (C27133 * C5114 + C27849 + C27849 + C84561 * C5751 + C27132 * C3445 +
            C27850 + C27850 + C26459 * C4126 + C27131 * C722 + C27851 + C27851 +
            C26458 * C1128) *
               C84246 * C84574 +
           (C27133 * C5115 + C27852 + C27852 + C84561 * C5752 + C27132 * C3446 +
            C27853 + C27853 + C26459 * C4128 + C27131 * C723 + C27854 + C27854 +
            C26458 * C1129) *
               C84246 * C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84596 +
           (C30084 + C30085 + C30086) * C84581 +
           (C30087 + C30088 + C30089) * C84558) *
              C84188 * C84603 * C716 -
          ((C27133 * C17967 + C30069 + C30069 + C84561 * C18706 +
            C27132 * C16807 + C30070 + C30070 + C26459 * C17177 +
            C27131 * C2599 + C30071 + C30071 + C26458 * C3353) *
               C84558 +
           (C30089 + C30088 + C30087) * C84581 +
           (C30086 + C30085 + C30084) * C84596) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C2634 + C2635 + C2636) * C84257 * C84581 +
           (C2637 + C2638 + C2639) * C84257 * C84558) *
              C1177 -
          ((C1679 * C3441 + C3460 + C3460 + C84550 * C3453 + C1677 * C3442 +
            C3461 + C3461 + C1670 * C3454 + C1675 * C3443 + C3462 + C3462 +
            C1669 * C3455) *
               C84257 * C84558 +
           (C1679 * C3444 + C3463 + C3463 + C84550 * C3456 + C1677 * C3445 +
            C3464 + C3464 + C1670 * C3457 + C1675 * C3446 + C3465 + C3465 +
            C1669 * C3458) *
               C84257 * C84581 +
           (C1679 * C1181 + C3466 + C3466 + C84550 * C1191 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1675 * C1183 + C3468 + C3468 +
            C1669 * C1193) *
               C84257 * C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C1177 -
          (C100 * C1179 + C1195 + C1195 + C85 * C1189 + C98 * C1180 + C1196 +
           C1196 + C84 * C1190 + C96 * C1181 + C1197 + C1197 + C83 * C1191 +
           C94 * C1182 + C1198 + C1198 + C82 * C1192 + C92 * C1183 + C1199 +
           C1199 + C81 * C1193) *
              C84257 * C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C1177 -
          ((C13628 * C3441 + C15209 + C15209 + C84550 * C3453 + C13626 * C3442 +
            C15210 + C15210 + C84574 * C3454 + C13624 * C3443 + C15211 +
            C15211 + C84590 * C3455) *
               C84257 * C84558 +
           (C13628 * C3444 + C15212 + C15212 + C84550 * C3456 + C13626 * C3445 +
            C15213 + C15213 + C84574 * C3457 + C13624 * C3446 + C15214 +
            C15214 + C84590 * C3458) *
               C84257 * C13622 +
           (C13628 * C1181 + C15215 + C15215 + C84550 * C1191 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13624 * C1183 + C15217 +
            C15217 + C84590 * C1193) *
               C84257 * C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C1177 -
          ((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84257 *
               C15865 +
           (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84257 *
               C15864 +
           (C15866 * C3443 + C16815 + C16815 + C84188 * C3455) * C84257 *
               C15863 +
           (C15866 * C3446 + C16816 + C16816 + C84188 * C3458) * C84257 *
               C15862 +
           (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84257 *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C26458 +
           (C27956 + C27957 + C27958) * C26459 +
           (C27959 + C27960 + C27961) * C84561) *
              C84246 * C1177 -
          ((C13628 * C5836 + C27941 + C27941 + C84550 * C5842 + C13626 * C5837 +
            C27942 + C27942 + C84574 * C5843 + C13624 * C5838 + C27943 +
            C27943 + C84590 * C5844) *
               C84561 +
           (C27961 + C27960 + C27959) * C26459 +
           (C27958 + C27957 + C27956) * C26458) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C26458 +
            C18832 * C26459 + C18833 * C84561) *
               C84596 +
           (C29387 + C29388 + C29389) * C84581 +
           (C29390 + C29391 + C29392) * C84558) *
              C1177 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C84561 +
            C17993 * C26459 + C17992 * C26458) *
               C84558 +
           ((C15866 * C18815 + C18826 + C18826 + C84188 * C18819) * C84561 +
            C17991 * C26459 + C17990 * C26458) *
               C84581 +
           ((C15866 * C5838 + C18827 + C18827 + C84188 * C5844) * C84561 +
            C18833 * C26459 + C18832 * C26458) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C1177 -
          ((C1787 * C3447 + C84558 * C3548 + C1786 * C3450 + C84581 * C3549 +
            C1785 * C1186 + C84596 * C1248) *
               C84550 +
           (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
            C1785 * C1181 + C84596 * C1243) *
               C1680 +
           (C1787 * C3448 + C84558 * C3550 + C1786 * C3451 + C84581 * C3551 +
            C1785 * C1187 + C84596 * C1249) *
               C1670 +
           (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
            C1785 * C1182 + C84596 * C1244) *
               C1678 +
           (C1787 * C3449 + C84558 * C3552 + C1786 * C3452 + C84581 * C3553 +
            C1785 * C1188 + C84596 * C1250) *
               C1669 +
           (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 + C84581 * C3547 +
            C1785 * C1183 + C84596 * C1245) *
               C1676) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C1177 -
          ((C172 * C1184 + C84246 * C1246) * C85 +
           (C172 * C1179 + C84246 * C1241) * C101 +
           (C172 * C1185 + C84246 * C1247) * C84 +
           (C172 * C1180 + C84246 * C1242) * C99 +
           (C172 * C1186 + C84246 * C1248) * C83 +
           (C172 * C1181 + C84246 * C1243) * C97 +
           (C172 * C1187 + C84246 * C1249) * C82 +
           (C172 * C1182 + C84246 * C1244) * C95 +
           (C172 * C1188 + C84246 * C1250) * C81 +
           (C172 * C1183 + C84246 * C1245) * C93) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C1177 -
          ((C13724 * C3447 + C84558 * C3548 + C13723 * C3450 + C13622 * C3549 +
            C13722 * C1186 + C13621 * C1248) *
               C84550 +
           (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
            C13722 * C1181 + C13621 * C1243) *
               C13629 +
           (C13724 * C3448 + C84558 * C3550 + C13723 * C3451 + C13622 * C3551 +
            C13722 * C1187 + C13621 * C1249) *
               C84574 +
           (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
            C13722 * C1182 + C13621 * C1244) *
               C13627 +
           (C13724 * C3449 + C84558 * C3552 + C13723 * C3452 + C13622 * C3553 +
            C13722 * C1188 + C13621 * C1250) *
               C84590 +
           (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
            C13722 * C1183 + C13621 * C1245) *
               C13625) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C1177 -
          ((C15930 * C16808 + C15865 * C16861 + C15929 * C16809 +
            C15864 * C16862 + C15928 * C3449 + C15863 * C3552 + C15927 * C3452 +
            C15862 * C3553 + C15926 * C1188 + C15861 * C1250) *
               C84188 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C15867) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C13625 +
            (C172 * C108 + C84246 * C179) * C84590 + C202 * C13627 +
            C203 * C84574 + C204 * C13629 + C205 * C84550) *
               C26458 +
           (C28036 + C28037 + C28038 + C28039 + C28040 + C28041) * C26459 +
           (C28042 + C28043 + C28044 + C28045 + C28046 + C28047) * C84561) *
              C1177 -
          (((C172 * C5839 + C84246 * C5955) * C84550 +
            (C172 * C5836 + C84246 * C5952) * C13629 +
            (C172 * C5840 + C84246 * C5956) * C84574 +
            (C172 * C5837 + C84246 * C5953) * C13627 +
            (C172 * C5841 + C84246 * C5957) * C84590 +
            (C172 * C5838 + C84246 * C5954) * C13625) *
               C84561 +
           (C28047 + C28046 + C28045 + C28044 + C28043 + C28042) * C26459 +
           (C28041 + C28040 + C28039 + C28038 + C28037 + C28036) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C15867 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C84188) *
               C26458 +
           ((C30262 + C30263 + C30264) * C15867 +
            (C30265 + C30266 + C30267) * C84188) *
               C26459 +
           ((C30268 + C30269 + C30270) * C15867 +
            (C30271 + C30272 + C30273) * C84188) *
               C84561) *
              C1177 -
          (((C1787 * C18816 + C84558 * C18909 + C1786 * C18817 +
             C84581 * C18910 + C1785 * C5841 + C84596 * C5957) *
                C84188 +
            (C1787 * C18814 + C84558 * C18907 + C1786 * C18815 +
             C84581 * C18908 + C1785 * C5838 + C84596 * C5954) *
                C15867) *
               C84561 +
           ((C30273 + C30272 + C30271) * C84188 +
            (C30270 + C30269 + C30268) * C15867) *
               C26459 +
           ((C30267 + C30266 + C30265) * C84188 +
            (C30264 + C30263 + C30262) * C15867) *
               C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
           (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C1680 +
            (C251 * C3448 + C84257 * C3635) * C1670 +
            (C251 * C3442 + C84257 * C3629) * C1678 +
            (C251 * C3449 + C84257 * C3636) * C1669 +
            (C251 * C3443 + C84257 * C3630) * C1676) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C1680 +
            (C251 * C3451 + C84257 * C3638) * C1670 +
            (C251 * C3445 + C84257 * C3632) * C1678 +
            (C251 * C3452 + C84257 * C3639) * C1669 +
            (C251 * C3446 + C84257 * C3633) * C1676) *
               C84581 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C1680 +
            (C251 * C1187 + C84257 * C1301) * C1670 +
            (C251 * C1182 + C84257 * C1296) * C1678 +
            (C251 * C1188 + C84257 * C1302) * C1669 +
            (C251 * C1183 + C84257 * C1297) * C1676) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C1177 -
          ((C251 * C1184 + C84257 * C1298) * C85 +
           (C251 * C1179 + C84257 * C1293) * C101 +
           (C251 * C1185 + C84257 * C1299) * C84 +
           (C251 * C1180 + C84257 * C1294) * C99 +
           (C251 * C1186 + C84257 * C1300) * C83 +
           (C251 * C1181 + C84257 * C1295) * C97 +
           (C251 * C1187 + C84257 * C1301) * C82 +
           (C251 * C1182 + C84257 * C1296) * C95 +
           (C251 * C1188 + C84257 * C1302) * C81 +
           (C251 * C1183 + C84257 * C1297) * C93) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C13629 +
            (C251 * C3448 + C84257 * C3635) * C84574 +
            (C251 * C3442 + C84257 * C3629) * C13627 +
            (C251 * C3449 + C84257 * C3636) * C84590 +
            (C251 * C3443 + C84257 * C3630) * C13625) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C13629 +
            (C251 * C3451 + C84257 * C3638) * C84574 +
            (C251 * C3445 + C84257 * C3632) * C13627 +
            (C251 * C3452 + C84257 * C3639) * C84590 +
            (C251 * C3446 + C84257 * C3633) * C13625) *
               C13622 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C13629 +
            (C251 * C1187 + C84257 * C1301) * C84574 +
            (C251 * C1182 + C84257 * C1296) * C13627 +
            (C251 * C1188 + C84257 * C1302) * C84590 +
            (C251 * C1183 + C84257 * C1297) * C13625) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C1177 -
          (((C251 * C16808 + C84257 * C16907) * C84188 +
            (C251 * C16806 + C84257 * C16905) * C15867) *
               C15865 +
           ((C251 * C16809 + C84257 * C16908) * C84188 +
            (C251 * C16807 + C84257 * C16906) * C15867) *
               C15864 +
           ((C251 * C3449 + C84257 * C3636) * C84188 +
            (C251 * C3443 + C84257 * C3630) * C15867) *
               C15863 +
           ((C251 * C3452 + C84257 * C3639) * C84188 +
            (C251 * C3446 + C84257 * C3633) * C15867) *
               C15862 +
           ((C251 * C1188 + C84257 * C1302) * C84188 +
            (C251 * C1183 + C84257 * C1297) * C15867) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C13625 +
           (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
            C26620 * C4216 + C84561 * C4420) *
               C84590 +
           (C26646 + C26647 + C26648) * C13627 +
           (C26649 + C26650 + C26651) * C84574 +
           (C26652 + C26653 + C26654) * C13629 +
           (C26655 + C26656 + C26657) * C84550) *
              C84246 * C1177 -
          ((C26620 * C5839 + C84561 * C6059 + C26619 * C4218 + C26459 * C4422 +
            C26618 * C1186 + C26458 * C1300) *
               C84550 +
           (C26620 * C5836 + C84561 * C6056 + C26619 * C4214 + C26459 * C4418 +
            C26618 * C1181 + C26458 * C1295) *
               C13629 +
           (C26620 * C5840 + C84561 * C6060 + C26619 * C4217 + C26459 * C4421 +
            C26618 * C1187 + C26458 * C1301) *
               C84574 +
           (C26620 * C5837 + C84561 * C6057 + C26619 * C4213 + C26459 * C4417 +
            C26618 * C1182 + C26458 * C1296) *
               C13627 +
           (C26620 * C5841 + C84561 * C6061 + C26619 * C4216 + C26459 * C4420 +
            C26618 * C1188 + C26458 * C1302) *
               C84590 +
           (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
            C26618 * C1183 + C26458 * C1297) *
               C13625) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C15867 +
            (C26618 * C108 + C26458 * C258 + C26619 * C1188 + C26459 * C1302 +
             C26620 * C4216 + C84561 * C4420) *
                C84188) *
               C84596 +
           ((C29565 + C29566 + C29567) * C15867 +
            (C29568 + C29569 + C29570) * C84188) *
               C84581 +
           ((C29571 + C29572 + C29573) * C15867 +
            (C29574 + C29575 + C29576) * C84188) *
               C84558) *
              C1177 -
          (((C26620 * C18816 + C84561 * C19023 + C26619 * C17256 +
             C26459 * C17423 + C26618 * C3449 + C26458 * C3636) *
                C84188 +
            (C26620 * C18814 + C84561 * C19021 + C26619 * C17254 +
             C26459 * C17421 + C26618 * C3443 + C26458 * C3630) *
                C15867) *
               C84558 +
           ((C26620 * C18817 + C84561 * C19024 + C26619 * C5118 +
             C26459 * C5284 + C26618 * C3452 + C26458 * C3639) *
                C84188 +
            (C26620 * C18815 + C84561 * C19022 + C26619 * C5115 +
             C26459 * C5281 + C26618 * C3446 + C26458 * C3633) *
                C15867) *
               C84581 +
           ((C26620 * C5841 + C84561 * C6061 + C26619 * C4216 + C26459 * C4420 +
             C26618 * C1188 + C26458 * C1302) *
                C84188 +
            (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
             C26618 * C1183 + C26458 * C1297) *
                C15867) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C2925 + C2926 + C2927) * C1786 + (C2928 + C2929 + C2930) * C84581 +
           (C2931 + C2932 + C2933) * C1787 + (C2934 + C2935 + C2936) * C84558) *
              C84257 * C1177 -
          ((C1680 * C3542 + C84550 * C3714 + C1678 * C3544 + C1670 * C3715 +
            C1676 * C3546 + C1669 * C3716) *
               C84558 +
           (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
            C1676 * C3443 + C1669 * C3449) *
               C1787 +
           (C1680 * C3543 + C84550 * C3717 + C1678 * C3545 + C1670 * C3718 +
            C1676 * C3547 + C1669 * C3719) *
               C84581 +
           (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
            C1676 * C3446 + C1669 * C3452) *
               C1786 +
           (C1680 * C1243 + C84550 * C1347 + C1678 * C1244 + C1670 * C1348 +
            C1676 * C1245 + C1669 * C1349) *
               C84596 +
           (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
            C1676 * C1183 + C1669 * C1188) *
               C1785) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C1177 -
          ((C101 * C1241 + C85 * C1345 + C99 * C1242 + C84 * C1346 +
            C97 * C1243 + C83 * C1347 + C95 * C1244 + C82 * C1348 +
            C93 * C1245 + C81 * C1349) *
               C84246 +
           (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
            C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
            C93 * C1183 + C81 * C1188) *
               C172) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C1177 -
          ((C13629 * C3542 + C84550 * C3714 + C13627 * C3544 + C84574 * C3715 +
            C13625 * C3546 + C84590 * C3716) *
               C84558 +
           (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
            C13625 * C3443 + C84590 * C3449) *
               C13724 +
           (C13629 * C3543 + C84550 * C3717 + C13627 * C3545 + C84574 * C3718 +
            C13625 * C3547 + C84590 * C3719) *
               C13622 +
           (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
            C13625 * C3446 + C84590 * C3452) *
               C13723 +
           (C13629 * C1243 + C84550 * C1347 + C13627 * C1244 + C84574 * C1348 +
            C13625 * C1245 + C84590 * C1349) *
               C13621 +
           (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
            C13625 * C1183 + C84590 * C1188) *
               C13722) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C1177 -
          ((C15867 * C16859 + C84188 * C16951) * C15865 +
           (C15867 * C16806 + C84188 * C16808) * C15930 +
           (C15867 * C16860 + C84188 * C16952) * C15864 +
           (C15867 * C16807 + C84188 * C16809) * C15929 +
           (C15867 * C3546 + C84188 * C3716) * C15863 +
           (C15867 * C3443 + C84188 * C3449) * C15928 +
           (C15867 * C3547 + C84188 * C3719) * C15862 +
           (C15867 * C3446 + C84188 * C3452) * C15927 +
           (C15867 * C1245 + C84188 * C1349) * C15861 +
           (C15867 * C1183 + C84188 * C1188) * C15926) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C172 +
            (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
             C13629 * C175 + C84550 * C332) *
                C84246) *
               C26458 +
           ((C28220 + C28221 + C28222) * C172 +
            (C28223 + C28224 + C28225) * C84246) *
               C26459 +
           ((C28226 + C28227 + C28228) * C172 +
            (C28229 + C28230 + C28231) * C84246) *
               C84561) *
              C1177 -
          (((C13629 * C5952 + C84550 * C6136 + C13627 * C5953 + C84574 * C6137 +
             C13625 * C5954 + C84590 * C6138) *
                C84246 +
            (C13629 * C5836 + C84550 * C5839 + C13627 * C5837 + C84574 * C5840 +
             C13625 * C5838 + C84590 * C5841) *
                C172) *
               C84561 +
           ((C28231 + C28230 + C28229) * C84246 +
            (C28228 + C28227 + C28226) * C172) *
               C26459 +
           ((C28225 + C28224 + C28223) * C84246 +
            (C28222 + C28221 + C28220) * C172) *
               C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C1785 +
            (C15867 * C173 + C84188 * C330) * C84596 + C16500 * C1786 +
            C16501 * C84581 + C16502 * C1787 + C16503 * C84558) *
               C26458 +
           (C30422 + C30423 + C30424 + C30425 + C30426 + C30427) * C26459 +
           (C30428 + C30429 + C30430 + C30431 + C30432 + C30433) * C84561) *
              C1177 -
          (((C15867 * C18907 + C84188 * C19099) * C84558 +
            (C15867 * C18814 + C84188 * C18816) * C1787 +
            (C15867 * C18908 + C84188 * C19100) * C84581 +
            (C15867 * C18815 + C84188 * C18817) * C1786 +
            (C15867 * C5954 + C84188 * C6138) * C84596 +
            (C15867 * C5838 + C84188 * C5841) * C1785) *
               C84561 +
           (C30433 + C30432 + C30431 + C30430 + C30429 + C30428) * C26459 +
           (C30427 + C30426 + C30425 + C30424 + C30423 + C30422) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C1177 -
          ((C2092 * C3441 + C3801 + C3801 + C84558 * C3794 + C2091 * C3444 +
            C3802 + C3802 + C84581 * C3795 + C2090 * C1181 + C3803 + C3803 +
            C84596 * C1394) *
               C84550 +
           (C2092 * C3442 + C3804 + C3804 + C84558 * C3796 + C2091 * C3445 +
            C3805 + C3805 + C84581 * C3797 + C2090 * C1182 + C3806 + C3806 +
            C84596 * C1395) *
               C1670 +
           (C2092 * C3443 + C3807 + C3807 + C84558 * C3798 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2090 * C1183 + C3809 + C3809 +
            C84596 * C1396) *
               C1669) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C1177 -
          ((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C85 +
           (C378 * C1180 + C1399 + C1399 + C84246 * C1393) * C84 +
           (C378 * C1181 + C1400 + C1400 + C84246 * C1394) * C83 +
           (C378 * C1182 + C1401 + C1401 + C84246 * C1395) * C82 +
           (C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C81) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C1177 -
          ((C13985 * C3441 + C15514 + C15514 + C84558 * C3794 + C13984 * C3444 +
            C15515 + C15515 + C13622 * C3795 + C13983 * C1181 + C15516 +
            C15516 + C13621 * C1394) *
               C84550 +
           (C13985 * C3442 + C15517 + C15517 + C84558 * C3796 + C13984 * C3445 +
            C15518 + C15518 + C13622 * C3797 + C13983 * C1182 + C15519 +
            C15519 + C13621 * C1395) *
               C84574 +
           (C13985 * C3443 + C15520 + C15520 + C84558 * C3798 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13983 * C1183 + C15522 +
            C15522 + C13621 * C1396) *
               C84590) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C1177 -
          (C16071 * C16806 + C16998 + C16998 + C15865 * C16995 +
           C16070 * C16807 + C16999 + C16999 + C15864 * C16996 +
           C16069 * C3443 + C17000 + C17000 + C15863 * C3798 + C16068 * C3446 +
           C17001 + C17001 + C15862 * C3799 + C16067 * C1183 + C17002 + C17002 +
           C15861 * C1396) *
              C84188 * C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84590 +
            C408 * C84574 + C409 * C84550) *
               C26458 +
           (C28306 + C28307 + C28308) * C26459 +
           (C28309 + C28310 + C28311) * C84561) *
              C1177 -
          (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C84550 +
            (C378 * C5837 + C6262 + C6262 + C84246 * C6250) * C84574 +
            (C378 * C5838 + C6263 + C6263 + C84246 * C6251) * C84590) *
               C84561 +
           (C28311 + C28310 + C28309) * C26459 +
           (C28308 + C28307 + C28306) * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C84188 * C26458 +
           (C30535 + C30536 + C30537) * C84188 * C26459 +
           (C30538 + C30539 + C30540) * C84188 * C84561) *
              C1177 -
          ((C2092 * C18814 + C30520 + C30520 + C84558 * C19199 +
            C2091 * C18815 + C30521 + C30521 + C84581 * C19200 + C2090 * C5838 +
            C30522 + C30522 + C84596 * C6251) *
               C84188 * C84561 +
           (C30540 + C30539 + C30538) * C84188 * C26459 +
           (C30537 + C30536 + C30535) * C84188 * C26458) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
            C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C1787 +
            (C251 * C3543 + C84257 * C3884) * C84581 +
            (C251 * C3444 + C84257 * C3631) * C1786 +
            (C251 * C1243 + C84257 * C1446) * C84596 +
            (C251 * C1181 + C84257 * C1295) * C1785) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C1787 +
            (C251 * C3545 + C84257 * C3886) * C84581 +
            (C251 * C3445 + C84257 * C3632) * C1786 +
            (C251 * C1244 + C84257 * C1447) * C84596 +
            (C251 * C1182 + C84257 * C1296) * C1785) *
               C1670 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C1787 +
            (C251 * C3547 + C84257 * C3888) * C84581 +
            (C251 * C3446 + C84257 * C3633) * C1786 +
            (C251 * C1245 + C84257 * C1448) * C84596 +
            (C251 * C1183 + C84257 * C1297) * C1785) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C1177 -
          (((C251 * C1241 + C84257 * C1444) * C84246 +
            (C251 * C1179 + C84257 * C1293) * C172) *
               C85 +
           ((C251 * C1242 + C84257 * C1445) * C84246 +
            (C251 * C1180 + C84257 * C1294) * C172) *
               C84 +
           ((C251 * C1243 + C84257 * C1446) * C84246 +
            (C251 * C1181 + C84257 * C1295) * C172) *
               C83 +
           ((C251 * C1244 + C84257 * C1447) * C84246 +
            (C251 * C1182 + C84257 * C1296) * C172) *
               C82 +
           ((C251 * C1245 + C84257 * C1448) * C84246 +
            (C251 * C1183 + C84257 * C1297) * C172) *
               C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C13724 +
            (C251 * C3543 + C84257 * C3884) * C13622 +
            (C251 * C3444 + C84257 * C3631) * C13723 +
            (C251 * C1243 + C84257 * C1446) * C13621 +
            (C251 * C1181 + C84257 * C1295) * C13722) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C13724 +
            (C251 * C3545 + C84257 * C3886) * C13622 +
            (C251 * C3445 + C84257 * C3632) * C13723 +
            (C251 * C1244 + C84257 * C1447) * C13621 +
            (C251 * C1182 + C84257 * C1296) * C13722) *
               C84574 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C13724 +
            (C251 * C3547 + C84257 * C3888) * C13622 +
            (C251 * C3446 + C84257 * C3633) * C13723 +
            (C251 * C1245 + C84257 * C1448) * C13621 +
            (C251 * C1183 + C84257 * C1297) * C13722) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C1177 -
          ((C251 * C16859 + C84257 * C17044) * C15865 +
           (C251 * C16806 + C84257 * C16905) * C15930 +
           (C251 * C16860 + C84257 * C17045) * C15864 +
           (C251 * C16807 + C84257 * C16906) * C15929 +
           (C251 * C3546 + C84257 * C3887) * C15863 +
           (C251 * C3443 + C84257 * C3630) * C15928 +
           (C251 * C3547 + C84257 * C3888) * C15862 +
           (C251 * C3446 + C84257 * C3633) * C15927 +
           (C251 * C1245 + C84257 * C1448) * C15861 +
           (C251 * C1183 + C84257 * C1297) * C15926) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
             C26620 * C4212 + C84561 * C4416) *
                C172 +
            (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
             C26620 * C4307 + C84561 * C4714) *
                C84246) *
               C84590 +
           ((C26646 + C26647 + C26648) * C172 +
            (C26892 + C26893 + C26894) * C84246) *
               C84574 +
           ((C26652 + C26653 + C26654) * C172 +
            (C26895 + C26896 + C26897) * C84246) *
               C84550) *
              C1177 -
          (((C26620 * C5952 + C84561 * C6345 + C26619 * C4309 + C26459 * C4716 +
             C26618 * C1243 + C26458 * C1446) *
                C84246 +
            (C26620 * C5836 + C84561 * C6056 + C26619 * C4214 + C26459 * C4418 +
             C26618 * C1181 + C26458 * C1295) *
                C172) *
               C84550 +
           ((C26620 * C5953 + C84561 * C6346 + C26619 * C4308 + C26459 * C4715 +
             C26618 * C1244 + C26458 * C1447) *
                C84246 +
            (C26620 * C5837 + C84561 * C6057 + C26619 * C4213 + C26459 * C4417 +
             C26618 * C1182 + C26458 * C1296) *
                C172) *
               C84574 +
           ((C26620 * C5954 + C84561 * C6347 + C26619 * C4307 + C26459 * C4714 +
             C26618 * C1245 + C26458 * C1448) *
                C84246 +
            (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
             C26618 * C1183 + C26458 * C1297) *
                C172) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26618 * C102 + C26458 * C252 + C26619 * C1183 + C26459 * C1297 +
            C26620 * C4212 + C84561 * C4416) *
               C1785 +
           (C26618 * C173 + C26458 * C453 + C26619 * C1245 + C26459 * C1448 +
            C26620 * C4307 + C84561 * C4714) *
               C84596 +
           (C29565 + C29566 + C29567) * C1786 +
           (C29817 + C29818 + C29819) * C84581 +
           (C29571 + C29572 + C29573) * C1787 +
           (C29820 + C29821 + C29822) * C84558) *
              C84188 * C1177 -
          ((C26620 * C18907 + C84561 * C19308 + C26619 * C17343 +
            C26459 * C17657 + C26618 * C3546 + C26458 * C3887) *
               C84558 +
           (C26620 * C18814 + C84561 * C19021 + C26619 * C17254 +
            C26459 * C17421 + C26618 * C3443 + C26458 * C3630) *
               C1787 +
           (C26620 * C18908 + C84561 * C19309 + C26619 * C5201 +
            C26459 * C5521 + C26618 * C3547 + C26458 * C3888) *
               C84581 +
           (C26620 * C18815 + C84561 * C19022 + C26619 * C5115 +
            C26459 * C5281 + C26618 * C3446 + C26458 * C3633) *
               C1786 +
           (C26620 * C5954 + C84561 * C6347 + C26619 * C4307 + C26459 * C4714 +
            C26618 * C1245 + C26458 * C1448) *
               C84596 +
           (C26620 * C5838 + C84561 * C6058 + C26619 * C4212 + C26459 * C4416 +
            C26618 * C1183 + C26458 * C1297) *
               C1785) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C2925 + C2926 + C2927) * C251 + (C3195 + C3196 + C3197) * C84257) *
               C84581 +
           ((C2931 + C2932 + C2933) * C251 + (C3198 + C3199 + C3200) * C84257) *
               C84558) *
              C1177 -
          (((C1680 * C3628 + C84550 * C3963 + C1678 * C3629 + C1670 * C3964 +
             C1676 * C3630 + C1669 * C3965) *
                C84257 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C251) *
               C84558 +
           ((C1680 * C3631 + C84550 * C3966 + C1678 * C3632 + C1670 * C3967 +
             C1676 * C3633 + C1669 * C3968) *
                C84257 +
            (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
             C1676 * C3446 + C1669 * C3452) *
                C251) *
               C84581 +
           ((C1680 * C1295 + C84550 * C1493 + C1678 * C1296 + C1670 * C1494 +
             C1676 * C1297 + C1669 * C1495) *
                C84257 +
            (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
             C1676 * C1183 + C1669 * C1188) *
                C251) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C1177 -
          ((C101 * C1293 + C85 * C1491 + C99 * C1294 + C84 * C1492 +
            C97 * C1295 + C83 * C1493 + C95 * C1296 + C82 * C1494 +
            C93 * C1297 + C81 * C1495) *
               C84257 +
           (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
            C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
            C93 * C1183 + C81 * C1188) *
               C251) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C1177 -
          (((C13629 * C3628 + C84550 * C3963 + C13627 * C3629 + C84574 * C3964 +
             C13625 * C3630 + C84590 * C3965) *
                C84257 +
            (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
             C13625 * C3443 + C84590 * C3449) *
                C251) *
               C84558 +
           ((C13629 * C3631 + C84550 * C3966 + C13627 * C3632 + C84574 * C3967 +
             C13625 * C3633 + C84590 * C3968) *
                C84257 +
            (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
             C13625 * C3446 + C84590 * C3452) *
                C251) *
               C13622 +
           ((C13629 * C1295 + C84550 * C1493 + C13627 * C1296 + C84574 * C1494 +
             C13625 * C1297 + C84590 * C1495) *
                C84257 +
            (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
             C13625 * C1183 + C84590 * C1188) *
                C251) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C1177 -
          (((C15867 * C16905 + C84188 * C17088) * C84257 +
            (C15867 * C16806 + C84188 * C16808) * C251) *
               C15865 +
           ((C15867 * C16906 + C84188 * C17089) * C84257 +
            (C15867 * C16807 + C84188 * C16809) * C251) *
               C15864 +
           ((C15867 * C3630 + C84188 * C3965) * C84257 +
            (C15867 * C3443 + C84188 * C3449) * C251) *
               C15863 +
           ((C15867 * C3633 + C84188 * C3968) * C84257 +
            (C15867 * C3446 + C84188 * C3452) * C251) *
               C15862 +
           ((C15867 * C1297 + C84188 * C1495) * C84257 +
            (C15867 * C1183 + C84188 * C1188) * C251) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C26618 +
           (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
            C13629 * C254 + C84550 * C523) *
               C26458 +
           (C28220 + C28221 + C28222) * C26619 +
           (C28472 + C28473 + C28474) * C26459 +
           (C28226 + C28227 + C28228) * C26620 +
           (C28475 + C28476 + C28477) * C84561) *
              C84246 * C1177 -
          ((C13629 * C6056 + C84550 * C6422 + C13627 * C6057 + C84574 * C6423 +
            C13625 * C6058 + C84590 * C6424) *
               C84561 +
           (C13629 * C5836 + C84550 * C5839 + C13627 * C5837 + C84574 * C5840 +
            C13625 * C5838 + C84590 * C5841) *
               C26620 +
           (C28477 + C28476 + C28475) * C26459 +
           (C28228 + C28227 + C28226) * C26619 +
           (C28474 + C28473 + C28472) * C26458 +
           (C28222 + C28221 + C28220) * C26618) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C26618 +
            (C15867 * C252 + C84188 * C521) * C26458 + C19118 * C26619 +
            C19391 * C26459 + C19120 * C26620 + C19392 * C84561) *
               C84596 +
           (C29897 + C29898 + C29899 + C29900 + C29901 + C29902) * C84581 +
           (C29903 + C29904 + C29905 + C29906 + C29907 + C29908) * C84558) *
              C1177 -
          (((C15867 * C19021 + C84188 * C19384) * C84561 +
            (C15867 * C18814 + C84188 * C18816) * C26620 + C18553 * C26459 +
            C18283 * C26619 + C18552 * C26458 + C18279 * C26618) *
               C84558 +
           ((C15867 * C19022 + C84188 * C19385) * C84561 +
            (C15867 * C18815 + C84188 * C18817) * C26620 + C18551 * C26459 +
            C18281 * C26619 + C18550 * C26458 + C18277 * C26618) *
               C84581 +
           ((C15867 * C6058 + C84188 * C6424) * C84561 +
            (C15867 * C5838 + C84188 * C5841) * C26620 + C19392 * C26459 +
            C19120 * C26619 + C19391 * C26458 + C19118 * C26618) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C1177 -
          (((C1787 * C3628 + C84558 * C4043 + C1786 * C3631 + C84581 * C4044 +
             C1785 * C1295 + C84596 * C1540) *
                C84257 +
            (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
             C1785 * C1181 + C84596 * C1243) *
                C251) *
               C84550 +
           ((C1787 * C3629 + C84558 * C4045 + C1786 * C3632 + C84581 * C4046 +
             C1785 * C1296 + C84596 * C1541) *
                C84257 +
            (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
             C1785 * C1182 + C84596 * C1244) *
                C251) *
               C1670 +
           ((C1787 * C3630 + C84558 * C4047 + C1786 * C3633 + C84581 * C4048 +
             C1785 * C1297 + C84596 * C1542) *
                C84257 +
            (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 + C84581 * C3547 +
             C1785 * C1183 + C84596 * C1245) *
                C251) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C1177 -
          (((C172 * C1293 + C84246 * C1538) * C84257 +
            (C172 * C1179 + C84246 * C1241) * C251) *
               C85 +
           ((C172 * C1294 + C84246 * C1539) * C84257 +
            (C172 * C1180 + C84246 * C1242) * C251) *
               C84 +
           ((C172 * C1295 + C84246 * C1540) * C84257 +
            (C172 * C1181 + C84246 * C1243) * C251) *
               C83 +
           ((C172 * C1296 + C84246 * C1541) * C84257 +
            (C172 * C1182 + C84246 * C1244) * C251) *
               C82 +
           ((C172 * C1297 + C84246 * C1542) * C84257 +
            (C172 * C1183 + C84246 * C1245) * C251) *
               C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C1177 -
          (((C13724 * C3628 + C84558 * C4043 + C13723 * C3631 + C13622 * C4044 +
             C13722 * C1295 + C13621 * C1540) *
                C84257 +
            (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
             C13722 * C1181 + C13621 * C1243) *
                C251) *
               C84550 +
           ((C13724 * C3629 + C84558 * C4045 + C13723 * C3632 + C13622 * C4046 +
             C13722 * C1296 + C13621 * C1541) *
                C84257 +
            (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
             C13722 * C1182 + C13621 * C1244) *
                C251) *
               C84574 +
           ((C13724 * C3630 + C84558 * C4047 + C13723 * C3633 + C13622 * C4048 +
             C13722 * C1297 + C13621 * C1542) *
                C84257 +
            (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
             C13722 * C1183 + C13621 * C1245) *
                C251) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C1177 -
          ((C15930 * C16905 + C15865 * C17132 + C15929 * C16906 +
            C15864 * C17133 + C15928 * C3630 + C15863 * C4047 + C15927 * C3633 +
            C15862 * C4048 + C15926 * C1297 + C15861 * C1542) *
               C84257 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C251) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C26618 +
            (C172 * C252 + C84246 * C569) * C26458 + C5975 * C26619 +
            C6525 * C26459 + C5977 * C26620 + C6526 * C84561) *
               C84590 +
           (C27046 + C27047 + C27048 + C27049 + C27050 + C27051) * C84574 +
           (C27052 + C27053 + C27054 + C27055 + C27056 + C27057) * C84550) *
              C1177 -
          (((C172 * C6056 + C84246 * C6517) * C84561 +
            (C172 * C5836 + C84246 * C5952) * C26620 + C4912 * C26459 +
            C4338 * C26619 + C4911 * C26458 + C4334 * C26618) *
               C84550 +
           ((C172 * C6057 + C84246 * C6518) * C84561 +
            (C172 * C5837 + C84246 * C5953) * C26620 + C4910 * C26459 +
            C4336 * C26619 + C4909 * C26458 + C4332 * C26618) *
               C84574 +
           ((C172 * C6058 + C84246 * C6519) * C84561 +
            (C172 * C5838 + C84246 * C5954) * C26620 + C6526 * C26459 +
            C5977 * C26619 + C6525 * C26458 + C5975 * C26618) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C26618 +
           (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
            C1787 * C1906 + C84558 * C2393) *
               C26458 +
           (C30262 + C30263 + C30264) * C26619 +
           (C30775 + C30776 + C30777) * C26459 +
           (C30268 + C30269 + C30270) * C26620 +
           (C30778 + C30779 + C30780) * C84561) *
              C84188 * C1177 -
          ((C1787 * C19021 + C84558 * C19466 + C1786 * C19022 +
            C84581 * C19467 + C1785 * C6058 + C84596 * C6519) *
               C84561 +
           (C1787 * C18814 + C84558 * C18907 + C1786 * C18815 +
            C84581 * C18908 + C1785 * C5838 + C84596 * C5954) *
               C26620 +
           (C30780 + C30779 + C30778) * C26459 +
           (C30270 + C30269 + C30268) * C26619 +
           (C30777 + C30776 + C30775) * C26458 +
           (C30264 + C30263 + C30262) * C26618) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            C3366 * C84581 + C3367 * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84581 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84596) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84581 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84596) *
               C1670 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84581 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84596) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C1177 -
          ((C637 * C1179 + C1591 + C1591 + C84257 * C1585) * C84246 * C85 +
           (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C84246 * C84 +
           (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84246 * C83 +
           (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84246 * C82 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84246 * C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C13622 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C13621) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C13622 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C13621) *
               C84574 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C13622 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C13621) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C1177 -
          ((C637 * C16806 + C17179 + C17179 + C84257 * C17176) * C15865 +
           (C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C15864 +
           (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C15863 +
           (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C15862 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C15861) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84246 * C84590 +
           (C27171 + C27172 + C27173) * C84246 * C84574 +
           (C27174 + C27175 + C27176) * C84246 * C84550) *
              C1177 -
          ((C27133 * C5836 + C28626 + C28626 + C84561 * C6600 + C27132 * C4214 +
            C28627 + C28627 + C26459 * C4995 + C27131 * C1181 + C28628 +
            C28628 + C26458 * C1587) *
               C84246 * C84550 +
           (C27133 * C5837 + C28629 + C28629 + C84561 * C6601 + C27132 * C4213 +
            C28630 + C28630 + C26459 * C4994 + C27131 * C1182 + C28631 +
            C28631 + C26458 * C1588) *
               C84246 * C84574 +
           (C27133 * C5838 + C28632 + C28632 + C84561 * C6602 + C27132 * C4212 +
            C28633 + C28633 + C26459 * C4993 + C27131 * C1183 + C28634 +
            C28634 + C26458 * C1589) *
               C84246 * C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C27131 * C102 + C27135 + C27135 + C26458 * C638 + C27132 * C1183 +
            C27136 + C27136 + C26459 * C1589 + C27133 * C4212 + C27137 +
            C27137 + C84561 * C4993) *
               C84596 +
           (C30084 + C30085 + C30086) * C84581 +
           (C30087 + C30088 + C30089) * C84558) *
              C84188 * C1177 -
          ((C27133 * C18814 + C30855 + C30855 + C84561 * C19560 +
            C27132 * C17254 + C30856 + C30856 + C26459 * C17885 +
            C27131 * C3443 + C30857 + C30857 + C26458 * C4127) *
               C84558 +
           (C27133 * C18815 + C30858 + C30858 + C84561 * C19561 +
            C27132 * C5115 + C30859 + C30859 + C26459 * C5752 + C27131 * C3446 +
            C30860 + C30860 + C26458 * C4128) *
               C84581 +
           (C27133 * C5838 + C28632 + C28632 + C84561 * C6602 + C27132 * C4212 +
            C28633 + C28633 + C26459 * C4993 + C27131 * C1183 + C28634 +
            C28634 + C26458 * C1589) *
               C84596) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                       C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                       C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                          C53740 +
                      (C50089 + C50090 + C50091) * C84344) *
                         C84528 +
                     ((C46774 + C46775 + C46776) * C53740 +
                      (C49157 + C49158 + C49159) * C84344) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C45940 * C8102 + C48229 + C48229 + C45932 * C8104 +
                       C82045 * C3444 + C48230 + C48230 + C84201 * C3456 +
                       C82052 * C3445 + C48231 + C48231 + C84193 * C3457) *
                          C84344 +
                      (C45940 * C720 + C45955 + C45955 + C45932 * C730 +
                       C82045 * C721 + C45956 + C45956 + C84201 * C731 +
                       C82052 * C722 + C45957 + C45957 + C84193 * C732) *
                          C53740) *
                         C84304 +
                     ((C45940 * C1180 + C48232 + C48232 + C45932 * C1190 +
                       C82045 * C1181 + C48233 + C48233 + C84201 * C1191 +
                       C82052 * C1182 + C48234 + C48234 + C84193 * C1192) *
                          C84344 +
                      (C45940 * C105 + C45958 + C45958 + C45932 * C117 +
                       C82045 * C104 + C45959 + C45959 + C84201 * C116 +
                       C82052 * C103 + C45960 + C45960 + C84193 * C115) *
                          C53740) *
                         C84528) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82049 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84193 +
            (C6801 + C6802) * C82038 + (C6803 + C6804) * C84201 +
            (C6805 + C6806) * C82067 + (C6807 + C6808) * C45932) *
               C53740 +
           ((C12827 + C12828) * C82049 + (C12829 + C12830) * C84193 +
            (C10877 + C10878) * C82038 + (C10879 + C10880) * C84201 +
            (C10881 + C10882) * C82067 + (C10883 + C10884) * C45932) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C6775 * C8103 + C84304 * C8180 + C6774 * C1185 + C84528 * C1247) *
                C45932 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C82067 +
            (C10884 + C10883) * C84201 + (C10882 + C10881) * C82038 +
            (C10880 + C10879) * C84193 + (C10878 + C10877) * C82049) *
               C84344 +
           ((C6812 + C6811) * C45932 + (C6810 + C6809) * C82067 +
            (C6808 + C6807) * C84201 + (C6806 + C6805) * C82038 +
            (C6804 + C6803) * C84193 + (C6802 + C6801) * C82049) *
               C53740) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82049 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84193 +
            (C53905 + C53906) * C82038 + (C53907 + C53908) * C84201 +
            (C53909 + C53910) * C82067 + (C53911 + C53912) * C45932) *
               C84528 +
           ((C56957 + C56958) * C82049 + (C56959 + C56960) * C84193 +
            (C55989 + C55990) * C82038 + (C55991 + C55992) * C84201 +
            (C60720 + C60721) * C82067 + (C60722 + C60723) * C45932) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C53879 * C8103 + C84344 * C8248 + C53878 * C725 + C53740 * C839) *
                C45932 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C82067 +
            (C60723 + C60722) * C84201 + (C60721 + C60720) * C82038 +
            (C55992 + C55991) * C84193 + (C55990 + C55989) * C82049) *
               C84304 +
           ((C53916 + C53915) * C45932 + (C53914 + C53913) * C82067 +
            (C53912 + C53911) * C84201 + (C53910 + C53909) * C82038 +
            (C53908 + C53907) * C84193 + (C53906 + C53905) * C82049) *
               C84528) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C6774 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C84528 +
                      (C47038 + C47039 + C47040) * C6775 +
                      (C47041 + C47042 + C47043) * C84304) *
                         C53740 +
                     ((C50398 + C50399 + C50400) * C6774 +
                      (C50401 + C50402 + C50403) * C84528 +
                      (C49466 + C49467 + C49468) * C6775 +
                      (C49469 + C49470 + C49471) * C84304) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C82067 * C8179 + C45932 * C8315 + C82038 * C3543 +
                       C84201 * C3717 + C82049 * C3545 + C84193 * C3718) *
                          C84304 +
                      (C82067 * C8102 + C45932 * C8103 + C82038 * C3444 +
                       C84201 * C3450 + C82049 * C3445 + C84193 * C3451) *
                          C6775 +
                      (C82067 * C1242 + C45932 * C1346 + C82038 * C1243 +
                       C84201 * C1347 + C82049 * C1244 + C84193 * C1348) *
                          C84528 +
                      (C82067 * C1180 + C45932 * C1185 + C82038 * C1181 +
                       C84201 * C1186 + C82049 * C1182 + C84193 * C1187) *
                          C6774) *
                         C84344 +
                     ((C82067 * C782 + C45932 * C886 + C82038 * C783 +
                       C84201 * C887 + C82049 * C784 + C84193 * C888) *
                          C84304 +
                      (C82067 * C720 + C45932 * C725 + C82038 * C721 +
                       C84201 * C726 + C82049 * C722 + C84193 * C727) *
                          C6775 +
                      (C82067 * C176 + C45932 * C333 + C82038 * C175 +
                       C84201 * C332 + C82049 * C174 + C84193 * C331) *
                          C84528 +
                      (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                       C84201 * C110 + C82049 * C103 + C84193 * C109) *
                          C6774) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C84193 +
                      (C7053 + C7054) * C84201 + (C7055 + C7056) * C45932) *
                         C53740 +
                     ((C13139 + C13140) * C84193 + (C11219 + C11220) * C84201 +
                      (C11221 + C11222) * C45932) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C7017 * C8102 + C8384 + C8384 + C84304 * C8382 +
                       C7016 * C1180 + C8385 + C8385 + C84528 * C1393) *
                          C45932 +
                      (C11222 + C11221) * C84201 + (C11220 + C11219) * C84193) *
                         C84344 +
                     ((C7058 + C7057) * C45932 + (C7056 + C7055) * C84201 +
                      (C7054 + C7053) * C84193) *
                         C53740) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C6774 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84528 +
            (C56957 + C56958) * C6775 + (C57270 + C57271) * C84304) *
               C84193 +
           ((C53905 + C53906) * C6774 + (C54127 + C54128) * C84528 +
            (C55989 + C55990) * C6775 + (C56314 + C56315) * C84304) *
               C84201 +
           ((C53909 + C53910) * C6774 + (C54129 + C54130) * C84528 +
            (C60720 + C60721) * C6775 + (C61022 + C61023) * C84304) *
               C45932) *
              C84603 * C84604 * C90 -
          (((C53879 * C8179 + C84344 * C8457 + C53878 * C782 + C53740 * C985) *
                C84304 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C6775 +
            (C54132 + C54131) * C84528 + (C53914 + C53913) * C6774) *
               C45932 +
           ((C61023 + C61022) * C84304 + (C60721 + C60720) * C6775 +
            (C54130 + C54129) * C84528 + (C53910 + C53909) * C6774) *
               C84201 +
           ((C56315 + C56314) * C84304 + (C55990 + C55989) * C6775 +
            (C54128 + C54127) * C84528 + (C53906 + C53905) * C6774) *
               C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezx[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C53878 +
                      (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                       C84201 * C522 + C82067 * C254 + C45932 * C523) *
                          C53740 +
                      (C50398 + C50399 + C50400) * C53879 +
                      (C50704 + C50705 + C50706) * C84344) *
                         C84528 +
                     ((C47038 + C47039 + C47040) * C53878 +
                      (C47293 + C47294 + C47295) * C53740 +
                      (C49466 + C49467 + C49468) * C53879 +
                      (C49774 + C49775 + C49776) * C84344) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C82067 * C8247 + C45932 * C8524 + C82038 * C3631 +
                       C84201 * C3966 + C82049 * C3632 + C84193 * C3967) *
                          C84344 +
                      (C82067 * C8102 + C45932 * C8103 + C82038 * C3444 +
                       C84201 * C3450 + C82049 * C3445 + C84193 * C3451) *
                          C53879 +
                      (C82067 * C834 + C45932 * C1032 + C82038 * C835 +
                       C84201 * C1033 + C82049 * C836 + C84193 * C1034) *
                          C53740 +
                      (C82067 * C720 + C45932 * C725 + C82038 * C721 +
                       C84201 * C726 + C82049 * C722 + C84193 * C727) *
                          C53878) *
                         C84304 +
                     ((C82067 * C1294 + C45932 * C1492 + C82038 * C1295 +
                       C84201 * C1493 + C82049 * C1296 + C84193 * C1494) *
                          C84344 +
                      (C82067 * C1180 + C45932 * C1185 + C82038 * C1181 +
                       C84201 * C1186 + C82049 * C1182 + C84193 * C1187) *
                          C53879 +
                      (C82067 * C255 + C45932 * C524 + C82038 * C254 +
                       C84201 * C523 + C82049 * C253 + C84193 * C522) *
                          C53740 +
                      (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                       C84201 * C110 + C82049 * C103 + C84193 * C109) *
                          C53878) *
                         C84528) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C53878 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C53740 +
            (C12827 + C12828) * C53879 + (C13439 + C13440) * C84344) *
               C84193 +
           ((C6801 + C6802) * C53878 + (C7284 + C7285) * C53740 +
            (C10877 + C10878) * C53879 + (C11537 + C11538) * C84344) *
               C84201 +
           ((C6805 + C6806) * C53878 + (C7286 + C7287) * C53740 +
            (C10881 + C10882) * C53879 + (C11539 + C11540) * C84344) *
               C45932) *
              C84603 * C84604 * C90 -
          (((C6775 * C8247 + C84304 * C8591 + C6774 * C1294 + C84528 * C1539) *
                C84344 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C53879 +
            (C7289 + C7288) * C53740 + (C6810 + C6809) * C53878) *
               C45932 +
           ((C11540 + C11539) * C84344 + (C10882 + C10881) * C53879 +
            (C7287 + C7286) * C53740 + (C6806 + C6805) * C53878) *
               C84201 +
           ((C11538 + C11537) * C84344 + (C10878 + C10877) * C53879 +
            (C7285 + C7284) * C53740 + (C6802 + C6801) * C53878) *
               C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C84528 +
            (C57588 + C57589) * C84304) *
               C84193 +
           ((C54379 + C54380) * C84528 + (C56643 + C56644) * C84304) * C84201 +
           ((C54381 + C54382) * C84528 + (C61326 + C61327) * C84304) * C45932) *
              C84603 * C84604 * C90 -
          (((C54343 * C8102 + C54979 + C54979 + C84344 * C8658 + C54342 * C720 +
             C54980 + C54980 + C53740 * C1126) *
                C84304 +
            (C54384 + C54383) * C84528) *
               C45932 +
           ((C61327 + C61326) * C84304 + (C54382 + C54381) * C84528) * C84201 +
           ((C56644 + C56643) * C84304 + (C54380 + C54379) * C84528) * C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexx[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                       C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                       C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                          C53740 +
                      (C50089 + C50090 + C50091) * C84344) *
                         C84528 +
                     ((C46774 + C46775 + C46776) * C53740 +
                      (C49157 + C49158 + C49159) * C84344) *
                         C84304) *
                        C84603 * C716 -
                    (((C45940 * C3441 + C47521 + C47521 + C45932 * C3453 +
                       C82045 * C3442 + C47522 + C47522 + C84201 * C3454 +
                       C82052 * C3443 + C47523 + C47523 + C84193 * C3455) *
                          C84344 +
                      (C46779 + C46778 + C46777) * C53740) *
                         C84304 +
                     ((C49159 + C49158 + C49157) * C84344 +
                      (C46776 + C46775 + C46774) * C53740) *
                         C84528) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82049 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84193 +
            (C6801 + C6802) * C82038 + (C6803 + C6804) * C84201 +
            (C6805 + C6806) * C82067 + (C6807 + C6808) * C45932) *
               C53740 +
           ((C12827 + C12828) * C82049 + (C12829 + C12830) * C84193 +
            (C10877 + C10878) * C82038 + (C10879 + C10880) * C84201 +
            (C10881 + C10882) * C82067 + (C10883 + C10884) * C45932) *
               C84344) *
              C84603 * C716 -
          (((C6775 * C3447 + C84304 * C3548 + C6774 * C3450 + C84528 * C3549) *
                C45932 +
            (C6775 * C3441 + C84304 * C3542 + C6774 * C3444 + C84528 * C3543) *
                C82067 +
            (C6775 * C3448 + C84304 * C3550 + C6774 * C3451 + C84528 * C3551) *
                C84201 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C82038 +
            (C6775 * C3449 + C84304 * C3552 + C6774 * C3452 + C84528 * C3553) *
                C84193 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C82049) *
               C84344 +
           ((C6775 * C1687 + C84304 * C1794 + C6774 * C726 + C84528 * C788) *
                C45932 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C82067 +
            (C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
                C84201 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C82038 +
            (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
                C84193 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C82049) *
               C53740) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82049 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84193 +
            (C53905 + C53906) * C82038 + (C53907 + C53908) * C84201 +
            (C53909 + C53910) * C82067 + (C53911 + C53912) * C45932) *
               C84528 +
           ((C56957 + C56958) * C82049 + (C56959 + C56960) * C84193 +
            (C55989 + C55990) * C82038 + (C55991 + C55992) * C84201 +
            (C60720 + C60721) * C82067 + (C60722 + C60723) * C45932) *
               C84304) *
              C84603 * C716 -
          (((C53879 * C3447 + C84344 * C3634 + C53878 * C1687 +
             C53740 * C1912) *
                C45932 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C82067 +
            (C55996 + C55995) * C84201 + (C55994 + C55993) * C82038 +
            (C56964 + C56963) * C84193 + (C56962 + C56961) * C82049) *
               C84304 +
           ((C60723 + C60722) * C45932 + (C60721 + C60720) * C82067 +
            (C55992 + C55991) * C84201 + (C55990 + C55989) * C82038 +
            (C56960 + C56959) * C84193 + (C56958 + C56957) * C82049) *
               C84528) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C6774 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C84528 +
                      (C47038 + C47039 + C47040) * C6775 +
                      (C47041 + C47042 + C47043) * C84304) *
                         C53740 +
                     ((C50398 + C50399 + C50400) * C6774 +
                      (C50401 + C50402 + C50403) * C84528 +
                      (C49466 + C49467 + C49468) * C6775 +
                      (C49469 + C49470 + C49471) * C84304) *
                         C84344) *
                        C84603 * C716 -
                    (((C82067 * C3542 + C45932 * C3714 + C82038 * C3544 +
                       C84201 * C3715 + C82049 * C3546 + C84193 * C3716) *
                          C84304 +
                      (C82067 * C3441 + C45932 * C3447 + C82038 * C3442 +
                       C84201 * C3448 + C82049 * C3443 + C84193 * C3449) *
                          C6775 +
                      (C49471 + C49470 + C49469) * C84528 +
                      (C49468 + C49467 + C49466) * C6774) *
                         C84344 +
                     ((C47049 + C47048 + C47047) * C84304 +
                      (C47046 + C47045 + C47044) * C6775 +
                      (C47043 + C47042 + C47041) * C84528 +
                      (C47040 + C47039 + C47038) * C6774) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C84193 +
                      (C7053 + C7054) * C84201 + (C7055 + C7056) * C45932) *
                         C53740 +
                     ((C13139 + C13140) * C84193 + (C11219 + C11220) * C84201 +
                      (C11221 + C11222) * C45932) *
                         C84344) *
                        C84603 * C716 -
                    (((C7017 * C3441 + C12194 + C12194 + C84304 * C3794 +
                       C7016 * C3444 + C12195 + C12195 + C84528 * C3795) *
                          C45932 +
                      (C7017 * C3442 + C12196 + C12196 + C84304 * C3796 +
                       C7016 * C3445 + C12197 + C12197 + C84528 * C3797) *
                          C84201 +
                      (C7017 * C3443 + C12198 + C12198 + C84304 * C3798 +
                       C7016 * C3446 + C12199 + C12199 + C84528 * C3799) *
                          C84193) *
                         C84344 +
                     ((C7017 * C1683 + C7755 + C7755 + C84304 * C2095 +
                       C7016 * C721 + C7756 + C7756 + C84528 * C934) *
                          C45932 +
                      (C7017 * C1682 + C7757 + C7757 + C84304 * C2094 +
                       C7016 * C722 + C7758 + C7758 + C84528 * C935) *
                          C84201 +
                      (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 +
                       C7016 * C723 + C7760 + C7760 + C84528 * C936) *
                          C84193) *
                         C53740) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C6774 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84528 +
            (C56957 + C56958) * C6775 + (C57270 + C57271) * C84304) *
               C84193 +
           ((C53905 + C53906) * C6774 + (C54127 + C54128) * C84528 +
            (C55989 + C55990) * C6775 + (C56314 + C56315) * C84304) *
               C84201 +
           ((C53909 + C53910) * C6774 + (C54129 + C54130) * C84528 +
            (C60720 + C60721) * C6775 + (C61022 + C61023) * C84304) *
               C45932) *
              C84603 * C716 -
          (((C53879 * C3542 + C84344 * C3883 + C53878 * C1790 +
             C53740 * C2215) *
                C84304 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C6775 +
            (C61023 + C61022) * C84528 + (C60721 + C60720) * C6774) *
               C45932 +
           ((C56317 + C56316) * C84304 + (C55994 + C55993) * C6775 +
            (C56315 + C56314) * C84528 + (C55990 + C55989) * C6774) *
               C84201 +
           ((C57273 + C57272) * C84304 + (C56962 + C56961) * C6775 +
            (C57271 + C57270) * C84528 + (C56958 + C56957) * C6774) *
               C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C53878 +
                      (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                       C84201 * C522 + C82067 * C254 + C45932 * C523) *
                          C53740 +
                      (C50398 + C50399 + C50400) * C53879 +
                      (C50704 + C50705 + C50706) * C84344) *
                         C84528 +
                     ((C47038 + C47039 + C47040) * C53878 +
                      (C47293 + C47294 + C47295) * C53740 +
                      (C49466 + C49467 + C49468) * C53879 +
                      (C49774 + C49775 + C49776) * C84344) *
                         C84304) *
                        C84603 * C716 -
                    (((C82067 * C3628 + C45932 * C3963 + C82038 * C3629 +
                       C84201 * C3964 + C82049 * C3630 + C84193 * C3965) *
                          C84344 +
                      (C82067 * C3441 + C45932 * C3447 + C82038 * C3442 +
                       C84201 * C3448 + C82049 * C3443 + C84193 * C3449) *
                          C53879 +
                      (C47298 + C47297 + C47296) * C53740 +
                      (C47046 + C47045 + C47044) * C53878) *
                         C84304 +
                     ((C49776 + C49775 + C49774) * C84344 +
                      (C49468 + C49467 + C49466) * C53879 +
                      (C47295 + C47294 + C47293) * C53740 +
                      (C47040 + C47039 + C47038) * C53878) *
                         C84528) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C53878 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C53740 +
            (C12827 + C12828) * C53879 + (C13439 + C13440) * C84344) *
               C84193 +
           ((C6801 + C6802) * C53878 + (C7284 + C7285) * C53740 +
            (C10877 + C10878) * C53879 + (C11537 + C11538) * C84344) *
               C84201 +
           ((C6805 + C6806) * C53878 + (C7286 + C7287) * C53740 +
            (C10881 + C10882) * C53879 + (C11539 + C11540) * C84344) *
               C45932) *
              C84603 * C716 -
          (((C6775 * C3628 + C84304 * C4043 + C6774 * C3631 + C84528 * C4044) *
                C84344 +
            (C6775 * C3441 + C84304 * C3542 + C6774 * C3444 + C84528 * C3543) *
                C53879 +
            (C6775 * C1908 + C84304 * C2395 + C6774 * C835 + C84528 * C1080) *
                C53740 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C53878) *
               C45932 +
           ((C6775 * C3629 + C84304 * C4045 + C6774 * C3632 + C84528 * C4046) *
                C84344 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C53879 +
            (C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C53740 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C53878) *
               C84201 +
           ((C6775 * C3630 + C84304 * C4047 + C6774 * C3633 + C84528 * C4048) *
                C84344 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C53879 +
            (C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C53740 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C53878) *
               C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C84528 +
            (C57588 + C57589) * C84304) *
               C84193 +
           ((C54379 + C54380) * C84528 + (C56643 + C56644) * C84304) * C84201 +
           ((C54381 + C54382) * C84528 + (C61326 + C61327) * C84304) * C45932) *
              C84603 * C716 -
          (((C54343 * C3441 + C56633 + C56633 + C84344 * C4123 +
             C54342 * C1683 + C56634 + C56634 + C53740 * C2491) *
                C84304 +
            (C61327 + C61326) * C84528) *
               C45932 +
           ((C56646 + C56645) * C84304 + (C56644 + C56643) * C84528) * C84201 +
           ((C57591 + C57590) * C84304 + (C57589 + C57588) * C84528) * C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexx[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                       C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                       C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                          C53740 +
                      (C50089 + C50090 + C50091) * C84344) *
                         C84528 +
                     ((C46774 + C46775 + C46776) * C53740 +
                      (C49157 + C49158 + C49159) * C84344) *
                         C84304) *
                        C1177 -
                    (((C45940 * C5113 + C50077 + C50077 + C45932 * C5119 +
                       C82045 * C5114 + C50078 + C50078 + C84201 * C5120 +
                       C82052 * C5115 + C50079 + C50079 + C84193 * C5121) *
                          C84344 +
                      (C49159 + C49158 + C49157) * C53740) *
                         C84304 +
                     ((C45940 * C4214 + C50080 + C50080 + C45932 * C4222 +
                       C82045 * C4213 + C50081 + C50081 + C84201 * C4221 +
                       C82052 * C4212 + C50082 + C50082 + C84193 * C4220) *
                          C84344 +
                      (C50091 + C50090 + C50089) * C53740) *
                         C84528) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82049 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C84193 +
            (C6801 + C6802) * C82038 + (C6803 + C6804) * C84201 +
            (C6805 + C6806) * C82067 + (C6807 + C6808) * C45932) *
               C53740 +
           ((C12827 + C12828) * C82049 + (C12829 + C12830) * C84193 +
            (C10877 + C10878) * C82038 + (C10879 + C10880) * C84201 +
            (C10881 + C10882) * C82067 + (C10883 + C10884) * C45932) *
               C84344) *
              C1177 -
          (((C6775 * C5116 + C84304 * C5202 + C6774 * C4218 + C84528 * C4313) *
                C45932 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C82067 +
            (C32379 + C32378) * C84201 + (C32377 + C32376) * C82038 +
            (C34264 + C34263) * C84193 + (C34262 + C34261) * C82049) *
               C84344 +
           ((C10884 + C10883) * C45932 + (C10882 + C10881) * C82067 +
            (C10880 + C10879) * C84201 + (C10878 + C10877) * C82038 +
            (C12830 + C12829) * C84193 + (C12828 + C12827) * C82049) *
               C53740) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C82049 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C84193 +
            (C53905 + C53906) * C82038 + (C53907 + C53908) * C84201 +
            (C53909 + C53910) * C82067 + (C53911 + C53912) * C45932) *
               C84528 +
           ((C56957 + C56958) * C82049 + (C56959 + C56960) * C84193 +
            (C55989 + C55990) * C82038 + (C55991 + C55992) * C84201 +
            (C60720 + C60721) * C82067 + (C60722 + C60723) * C45932) *
               C84304) *
              C1177 -
          (((C53879 * C5116 + C84344 * C5282 + C53878 * C3450 +
             C53740 * C3637) *
                C45932 +
            (C53879 * C5113 + C84344 * C5279 + C53878 * C3444 +
             C53740 * C3631) *
                C82067 +
            (C53879 * C5117 + C84344 * C5283 + C53878 * C3451 +
             C53740 * C3638) *
                C84201 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C82038 +
            (C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C84193 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C82049) *
               C84304 +
           ((C53879 * C4218 + C84344 * C4422 + C53878 * C1186 +
             C53740 * C1300) *
                C45932 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C82067 +
            (C53879 * C4217 + C84344 * C4421 + C53878 * C1187 +
             C53740 * C1301) *
                C84201 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C82038 +
            (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C84193 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C82049) *
               C84528) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyx[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C6774 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C84528 +
                      (C47038 + C47039 + C47040) * C6775 +
                      (C47041 + C47042 + C47043) * C84304) *
                         C53740 +
                     ((C50398 + C50399 + C50400) * C6774 +
                      (C50401 + C50402 + C50403) * C84528 +
                      (C49466 + C49467 + C49468) * C6775 +
                      (C49469 + C49470 + C49471) * C84304) *
                         C84344) *
                        C1177 -
                    (((C82067 * C5199 + C45932 * C5359 + C82038 * C5200 +
                       C84201 * C5360 + C82049 * C5201 + C84193 * C5361) *
                          C84304 +
                      (C82067 * C5113 + C45932 * C5116 + C82038 * C5114 +
                       C84201 * C5117 + C82049 * C5115 + C84193 * C5118) *
                          C6775 +
                      (C82067 * C4309 + C45932 * C4536 + C82038 * C4308 +
                       C84201 * C4535 + C82049 * C4307 + C84193 * C4534) *
                          C84528 +
                      (C82067 * C4214 + C45932 * C4218 + C82038 * C4213 +
                       C84201 * C4217 + C82049 * C4212 + C84193 * C4216) *
                          C6774) *
                         C84344 +
                     ((C49471 + C49470 + C49469) * C84304 +
                      (C49468 + C49467 + C49466) * C6775 +
                      (C50403 + C50402 + C50401) * C84528 +
                      (C50400 + C50399 + C50398) * C6774) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C84193 +
                      (C7053 + C7054) * C84201 + (C7055 + C7056) * C45932) *
                         C53740 +
                     ((C13139 + C13140) * C84193 + (C11219 + C11220) * C84201 +
                      (C11221 + C11222) * C45932) *
                         C84344) *
                        C1177 -
                    (((C7017 * C5113 + C13129 + C13129 + C84304 * C5436 +
                       C7016 * C4214 + C13130 + C13130 + C84528 * C4614) *
                          C45932 +
                      (C32701 + C32700) * C84201 + (C34588 + C34587) * C84193) *
                         C84344 +
                     ((C11222 + C11221) * C45932 + (C11220 + C11219) * C84201 +
                      (C13140 + C13139) * C84193) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C6774 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84528 +
            (C56957 + C56958) * C6775 + (C57270 + C57271) * C84304) *
               C84193 +
           ((C53905 + C53906) * C6774 + (C54127 + C54128) * C84528 +
            (C55989 + C55990) * C6775 + (C56314 + C56315) * C84304) *
               C84201 +
           ((C53909 + C53910) * C6774 + (C54129 + C54130) * C84528 +
            (C60720 + C60721) * C6775 + (C61022 + C61023) * C84304) *
               C45932) *
              C1177 -
          (((C53879 * C5199 + C84344 * C5519 + C53878 * C3543 +
             C53740 * C3884) *
                C84304 +
            (C53879 * C5113 + C84344 * C5279 + C53878 * C3444 +
             C53740 * C3631) *
                C6775 +
            (C53879 * C4309 + C84344 * C4716 + C53878 * C1243 +
             C53740 * C1446) *
                C84528 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C6774) *
               C45932 +
           ((C53879 * C5200 + C84344 * C5520 + C53878 * C3545 +
             C53740 * C3886) *
                C84304 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C6775 +
            (C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C84528 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C6774) *
               C84201 +
           ((C53879 * C5201 + C84344 * C5521 + C53878 * C3547 +
             C53740 * C3888) *
                C84304 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C6775 +
            (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C84528 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C6774) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezx[47] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C53878 +
                      (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                       C84201 * C522 + C82067 * C254 + C45932 * C523) *
                          C53740 +
                      (C50398 + C50399 + C50400) * C53879 +
                      (C50704 + C50705 + C50706) * C84344) *
                         C84528 +
                     ((C47038 + C47039 + C47040) * C53878 +
                      (C47293 + C47294 + C47295) * C53740 +
                      (C49466 + C49467 + C49468) * C53879 +
                      (C49774 + C49775 + C49776) * C84344) *
                         C84304) *
                        C1177 -
                    (((C82067 * C5279 + C45932 * C5596 + C82038 * C5280 +
                       C84201 * C5597 + C82049 * C5281 + C84193 * C5598) *
                          C84344 +
                      (C82067 * C5113 + C45932 * C5116 + C82038 * C5114 +
                       C84201 * C5117 + C82049 * C5115 + C84193 * C5118) *
                          C53879 +
                      (C49776 + C49775 + C49774) * C53740 +
                      (C49468 + C49467 + C49466) * C53878) *
                         C84304 +
                     ((C82067 * C4418 + C45932 * C4812 + C82038 * C4417 +
                       C84201 * C4811 + C82049 * C4416 + C84193 * C4810) *
                          C84344 +
                      (C82067 * C4214 + C45932 * C4218 + C82038 * C4213 +
                       C84201 * C4217 + C82049 * C4212 + C84193 * C4216) *
                          C53879 +
                      (C50706 + C50705 + C50704) * C53740 +
                      (C50400 + C50399 + C50398) * C53878) *
                         C84528) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C53878 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C53740 +
            (C12827 + C12828) * C53879 + (C13439 + C13440) * C84344) *
               C84193 +
           ((C6801 + C6802) * C53878 + (C7284 + C7285) * C53740 +
            (C10877 + C10878) * C53879 + (C11537 + C11538) * C84344) *
               C84201 +
           ((C6805 + C6806) * C53878 + (C7286 + C7287) * C53740 +
            (C10881 + C10882) * C53879 + (C11539 + C11540) * C84344) *
               C45932) *
              C1177 -
          (((C6775 * C5279 + C84304 * C5673 + C6774 * C4418 + C84528 * C4890) *
                C84344 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C53879 +
            (C11540 + C11539) * C53740 + (C10882 + C10881) * C53878) *
               C45932 +
           ((C33010 + C33009) * C84344 + (C32377 + C32376) * C53879 +
            (C11538 + C11537) * C53740 + (C10878 + C10877) * C53878) *
               C84201 +
           ((C34897 + C34896) * C84344 + (C34262 + C34261) * C53879 +
            (C13440 + C13439) * C53740 + (C12828 + C12827) * C53878) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 + C54343 * C1183 +
             C54346 + C54346 + C84344 * C1589) *
                C84528 +
            (C57588 + C57589) * C84304) *
               C84193 +
           ((C54379 + C54380) * C84528 + (C56643 + C56644) * C84304) * C84201 +
           ((C54381 + C54382) * C84528 + (C61326 + C61327) * C84304) * C45932) *
              C1177 -
          (((C54343 * C5113 + C63092 + C63092 + C84344 * C5750 +
             C54342 * C3444 + C63093 + C63093 + C53740 * C4124) *
                C84304 +
            (C54343 * C4214 + C55655 + C55655 + C84344 * C4995 +
             C54342 * C1181 + C55656 + C55656 + C53740 * C1587) *
                C84528) *
               C45932 +
           ((C54343 * C5114 + C58476 + C58476 + C84344 * C5751 +
             C54342 * C3445 + C58477 + C58477 + C53740 * C4126) *
                C84304 +
            (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
             C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                C84528) *
               C84201 +
           ((C54343 * C5115 + C58480 + C58480 + C84344 * C5752 +
             C54342 * C3446 + C58481 + C58481 + C53740 * C4128) *
                C84304 +
            (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
             C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                C84528) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexx[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 +
                       C40961 * C103 + C40965 + C40965 + C84198 * C115) *
                          C84340 +
                      (C44970 + C44971) * C84347 + (C44972 + C44973) * C63169) *
                         C84528 +
                     ((C41688 + C41689) * C84340 + (C44020 + C44021) * C84347 +
                      (C44022 + C44023) * C63169) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C40961 * C5113 + C43008 + C43008 + C84198 * C5119 +
                       C40959 * C5114 + C43009 + C43009 + C40953 * C5120) *
                          C63169 +
                      (C40961 * C3444 + C43010 + C43010 + C84198 * C3456 +
                       C40959 * C3445 + C43011 + C43011 + C40953 * C3457) *
                          C84347 +
                      (C40961 * C721 + C40976 + C40976 + C84198 * C731 +
                       C40959 * C722 + C40977 + C40977 + C40953 * C732) *
                          C84340) *
                         C84304 +
                     ((C40961 * C4214 + C43012 + C43012 + C84198 * C4222 +
                       C40959 * C4213 + C43013 + C43013 + C40953 * C4221) *
                          C63169 +
                      (C40961 * C1181 + C43014 + C43014 + C84198 * C1191 +
                       C40959 * C1182 + C43015 + C43015 + C40953 * C1192) *
                          C84347 +
                      (C40961 * C104 + C40978 + C40978 + C84198 * C116 +
                       C40959 * C103 + C40979 + C40979 + C40953 * C115) *
                          C84340) *
                         C84528) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C40960 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C40953 +
            (C6801 + C6802) * C40962 + (C6803 + C6804) * C84198) *
               C84340 +
           ((C12827 + C12828) * C40960 + (C12829 + C12830) * C40953 +
            (C10877 + C10878) * C40962 + (C10879 + C10880) * C84198) *
               C84347 +
           ((C34261 + C34262) * C40960 + (C34263 + C34264) * C40953 +
            (C32376 + C32377) * C40962 + (C32378 + C32379) * C84198) *
               C63169) *
              C84603 * C84604 * C90 -
          (((C6775 * C5116 + C84304 * C5202 + C6774 * C4218 + C84528 * C4313) *
                C84198 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C40962 +
            (C32379 + C32378) * C40953 + (C32377 + C32376) * C40960) *
               C63169 +
           ((C10884 + C10883) * C84198 + (C10882 + C10881) * C40962 +
            (C10880 + C10879) * C40953 + (C10878 + C10877) * C40960) *
               C84347 +
           ((C6808 + C6807) * C84198 + (C6806 + C6805) * C40962 +
            (C6804 + C6803) * C40953 + (C6802 + C6801) * C40960) *
               C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C40960 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C40953 +
                      (C63349 + C63350 + C63351) * C40962 +
                      (C63352 + C63353 + C63354) * C84198) *
                         C84528 +
                     ((C82422 * C723 + C84340 * C837 + C82419 * C3446 +
                       C84347 * C3633 + C82430 * C5115 + C63169 * C5281) *
                          C40960 +
                      (C82422 * C728 + C84340 * C842 + C82419 * C3452 +
                       C84347 * C3639 + C82430 * C5118 + C63169 * C5284) *
                          C40953 +
                      (C65599 + C65600 + C65601) * C40962 +
                      (C65602 + C65603 + C65604) * C84198) *
                         C84304) *
                        C84603 * C84604 * C90 -
                    (((C82430 * C5116 + C63169 * C5282 + C82419 * C3450 +
                       C84347 * C3637 + C82422 * C726 + C84340 * C840) *
                          C84198 +
                      (C82430 * C5113 + C63169 * C5279 + C82419 * C3444 +
                       C84347 * C3631 + C82422 * C721 + C84340 * C835) *
                          C40962 +
                      (C65604 + C65603 + C65602) * C40953 +
                      (C65601 + C65600 + C65599) * C40960) *
                         C84304 +
                     ((C63360 + C63359 + C63358) * C84198 +
                      (C63357 + C63356 + C63355) * C40962 +
                      (C63354 + C63353 + C63352) * C40953 +
                      (C63351 + C63350 + C63349) * C40960) *
                         C84528) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C6774 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84528 +
            (C41928 + C41929) * C6775 + (C41930 + C41931) * C84304) *
               C84340 +
           ((C45308 + C45309) * C6774 + (C45310 + C45311) * C84528 +
            (C44334 + C44335) * C6775 + (C44336 + C44337) * C84304) *
               C84347 +
           ((C45312 + C45313) * C6774 + (C45314 + C45315) * C84528 +
            (C44338 + C44339) * C6775 + (C44340 + C44341) * C84304) *
               C63169) *
              C84603 * C84604 * C90 -
          (((C40962 * C5199 + C84198 * C5359 + C40960 * C5200 +
             C40953 * C5360) *
                C84304 +
            (C40962 * C5113 + C84198 * C5116 + C40960 * C5114 +
             C40953 * C5117) *
                C6775 +
            (C40962 * C4309 + C84198 * C4536 + C40960 * C4308 +
             C40953 * C4535) *
                C84528 +
            (C40962 * C4214 + C84198 * C4218 + C40960 * C4213 +
             C40953 * C4217) *
                C6774) *
               C63169 +
           ((C40962 * C3543 + C84198 * C3717 + C40960 * C3545 +
             C40953 * C3718) *
                C84304 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C6775 +
            (C40962 * C1243 + C84198 * C1347 + C40960 * C1244 +
             C40953 * C1348) *
                C84528 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C6774) *
               C84347 +
           ((C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
                C84304 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C6775 +
            (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
                C84528 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C6774) *
               C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
             C7020 + C7020 + C84304 * C936) *
                C40953 +
            (C7053 + C7054) * C84198) *
               C84340 +
           ((C13139 + C13140) * C40953 + (C11219 + C11220) * C84198) * C84347 +
           ((C34587 + C34588) * C40953 + (C32700 + C32701) * C84198) * C63169) *
              C84603 * C84604 * C90 -
          (((C7017 * C5113 + C13129 + C13129 + C84304 * C5436 + C7016 * C4214 +
             C13130 + C13130 + C84528 * C4614) *
                C84198 +
            (C32701 + C32700) * C40953) *
               C63169 +
           ((C11222 + C11221) * C84198 + (C11220 + C11219) * C40953) * C84347 +
           ((C7056 + C7055) * C84198 + (C7054 + C7053) * C40953) * C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C6774 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C84528 +
                      (C82422 * C723 + C84340 * C837 + C82419 * C3446 +
                       C84347 * C3633 + C82430 * C5115 + C63169 * C5281) *
                          C6775 +
                      (C82422 * C785 + C84340 * C988 + C82419 * C3547 +
                       C84347 * C3888 + C82430 * C5201 + C63169 * C5521) *
                          C84304) *
                         C40953 +
                     ((C63349 + C63350 + C63351) * C6774 +
                      (C63595 + C63596 + C63597) * C84528 +
                      (C65599 + C65600 + C65601) * C6775 +
                      (C65905 + C65906 + C65907) * C84304) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C82430 * C5199 + C63169 * C5519 + C82419 * C3543 +
                       C84347 * C3884 + C82422 * C783 + C84340 * C986) *
                          C84304 +
                      (C82430 * C5113 + C63169 * C5279 + C82419 * C3444 +
                       C84347 * C3631 + C82422 * C721 + C84340 * C835) *
                          C6775 +
                      (C63600 + C63599 + C63598) * C84528 +
                      (C63357 + C63356 + C63355) * C6774) *
                         C84198 +
                     ((C65907 + C65906 + C65905) * C84304 +
                      (C65601 + C65600 + C65599) * C6775 +
                      (C63597 + C63596 + C63595) * C84528 +
                      (C63351 + C63350 + C63349) * C6774) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C82422 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84340 +
            (C45308 + C45309) * C82419 + (C45642 + C45643) * C84347 +
            (C45312 + C45313) * C82430 + (C45644 + C45645) * C63169) *
               C84528 +
           ((C41928 + C41929) * C82422 + (C42158 + C42159) * C84340 +
            (C44334 + C44335) * C82419 + (C44652 + C44653) * C84347 +
            (C44338 + C44339) * C82430 + (C44654 + C44655) * C63169) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C40962 * C5279 + C84198 * C5596 + C40960 * C5280 +
             C40953 * C5597) *
                C63169 +
            (C40962 * C5113 + C84198 * C5116 + C40960 * C5114 +
             C40953 * C5117) *
                C82430 +
            (C40962 * C3631 + C84198 * C3966 + C40960 * C3632 +
             C40953 * C3967) *
                C84347 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C82419 +
            (C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C84340 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C82422) *
               C84304 +
           ((C40962 * C4418 + C84198 * C4812 + C40960 * C4417 +
             C40953 * C4811) *
                C63169 +
            (C40962 * C4214 + C84198 * C4218 + C40960 * C4213 +
             C40953 * C4217) *
                C82430 +
            (C40962 * C1295 + C84198 * C1493 + C40960 * C1296 +
             C40953 * C1494) *
                C84347 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C82419 +
            (C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C84340 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C82422) *
               C84528) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82422 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84340 +
            (C12827 + C12828) * C82419 + (C13439 + C13440) * C84347 +
            (C34261 + C34262) * C82430 + (C34896 + C34897) * C63169) *
               C40953 +
           ((C6801 + C6802) * C82422 + (C7284 + C7285) * C84340 +
            (C10877 + C10878) * C82419 + (C11537 + C11538) * C84347 +
            (C32376 + C32377) * C82430 + (C33009 + C33010) * C63169) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C6775 * C5279 + C84304 * C5673 + C6774 * C4418 + C84528 * C4890) *
                C63169 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C82430 +
            (C11540 + C11539) * C84347 + (C10882 + C10881) * C82419 +
            (C7287 + C7286) * C84340 + (C6806 + C6805) * C82422) *
               C84198 +
           ((C33010 + C33009) * C63169 + (C32377 + C32376) * C82430 +
            (C11538 + C11537) * C84347 + (C10878 + C10877) * C82419 +
            (C7285 + C7284) * C84340 + (C6802 + C6801) * C82422) *
               C40953) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                       C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                       C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                          C84528 +
                      (C82474 * C723 + C64554 + C64554 + C84340 * C1129 +
                       C82467 * C3446 + C64553 + C64553 + C84347 * C4128 +
                       C63836 * C5115 + C64552 + C64552 + C63169 * C5752) *
                          C84304) *
                         C40953 +
                     ((C63874 + C63875 + C63876) * C84528 +
                      (C66214 + C66215 + C66216) * C84304) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C63836 * C5113 + C64546 + C64546 + C63169 * C5750 +
                       C82467 * C3444 + C64547 + C64547 + C84347 * C4124 +
                       C82474 * C721 + C64548 + C64548 + C84340 * C1127) *
                          C84304 +
                      (C63879 + C63878 + C63877) * C84528) *
                         C84198 +
                     ((C66216 + C66215 + C66214) * C84304 +
                      (C63876 + C63875 + C63874) * C84528) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 +
                       C40961 * C103 + C40965 + C40965 + C84198 * C115) *
                          C84340 +
                      (C44970 + C44971) * C84347 + (C44972 + C44973) * C63169) *
                         C84528 +
                     ((C41688 + C41689) * C84340 + (C44020 + C44021) * C84347 +
                      (C44022 + C44023) * C63169) *
                         C84304) *
                        C84603 * C716 -
                    (((C40961 * C17255 + C44010 + C44010 + C84198 * C17259 +
                       C40959 * C17254 + C44011 + C44011 + C40953 * C17258) *
                          C63169 +
                      (C51936 + C51935) * C84347 + (C41691 + C41690) * C84340) *
                         C84304 +
                     ((C44023 + C44022) * C63169 + (C44021 + C44020) * C84347 +
                      (C41689 + C41688) * C84340) *
                         C84528) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C40960 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C40953 +
            (C6801 + C6802) * C40962 + (C6803 + C6804) * C84198) *
               C84340 +
           ((C12827 + C12828) * C40960 + (C12829 + C12830) * C40953 +
            (C10877 + C10878) * C40962 + (C10879 + C10880) * C84198) *
               C84347 +
           ((C34261 + C34262) * C40960 + (C34263 + C34264) * C40953 +
            (C32376 + C32377) * C40962 + (C32378 + C32379) * C84198) *
               C63169) *
              C84603 * C716 -
          (((C6775 * C17257 + C84304 * C17346 + C6774 * C5117 +
             C84528 * C5203) *
                C84198 +
            (C6775 * C17255 + C84304 * C17344 + C6774 * C5114 +
             C84528 * C5200) *
                C40962 +
            (C6775 * C17256 + C84304 * C17345 + C6774 * C5118 +
             C84528 * C5204) *
                C40953 +
            (C6775 * C17254 + C84304 * C17343 + C6774 * C5115 +
             C84528 * C5201) *
                C40960) *
               C63169 +
           ((C6775 * C3448 + C84304 * C3550 + C6774 * C3451 + C84528 * C3551) *
                C84198 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C40962 +
            (C6775 * C3449 + C84304 * C3552 + C6774 * C3452 + C84528 * C3553) *
                C40953 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C40960) *
               C84347 +
           ((C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
                C84198 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C40962 +
            (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
                C40953 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C40960) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C40960 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C40953 +
                      (C63349 + C63350 + C63351) * C40962 +
                      (C63352 + C63353 + C63354) * C84198) *
                         C84528 +
                     ((C66523 + C66524 + C66525) * C40960 +
                      (C66526 + C66527 + C66528) * C40953 +
                      (C65599 + C65600 + C65601) * C40962 +
                      (C65602 + C65603 + C65604) * C84198) *
                         C84304) *
                        C84603 * C716 -
                    (((C82430 * C17257 + C63169 * C17424 + C82419 * C3448 +
                       C84347 * C3635 + C82422 * C1686 + C84340 * C1911) *
                          C84198 +
                      (C82430 * C17255 + C63169 * C17422 + C82419 * C3442 +
                       C84347 * C3629 + C82422 * C1682 + C84340 * C1907) *
                          C40962 +
                      (C82430 * C17256 + C63169 * C17423 + C82419 * C3449 +
                       C84347 * C3636 + C82422 * C1685 + C84340 * C1910) *
                          C40953 +
                      (C82430 * C17254 + C63169 * C17421 + C82419 * C3443 +
                       C84347 * C3630 + C82422 * C1681 + C84340 * C1906) *
                          C40960) *
                         C84304 +
                     ((C65604 + C65603 + C65602) * C84198 +
                      (C65601 + C65600 + C65599) * C40962 +
                      (C66528 + C66527 + C66526) * C40953 +
                      (C66525 + C66524 + C66523) * C40960) *
                         C84528) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C6774 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84528 +
            (C41928 + C41929) * C6775 + (C41930 + C41931) * C84304) *
               C84340 +
           ((C45308 + C45309) * C6774 + (C45310 + C45311) * C84528 +
            (C44334 + C44335) * C6775 + (C44336 + C44337) * C84304) *
               C84347 +
           ((C45312 + C45313) * C6774 + (C45314 + C45315) * C84528 +
            (C44338 + C44339) * C6775 + (C44340 + C44341) * C84304) *
               C63169) *
              C84603 * C716 -
          (((C40962 * C17344 + C84198 * C17500 + C40960 * C17343 +
             C40953 * C17499) *
                C84304 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C6775 +
            (C44341 + C44340) * C84528 + (C44339 + C44338) * C6774) *
               C63169 +
           ((C52242 + C52241) * C84304 + (C52240 + C52239) * C6775 +
            (C44337 + C44336) * C84528 + (C44335 + C44334) * C6774) *
               C84347 +
           ((C41935 + C41934) * C84304 + (C41933 + C41932) * C6775 +
            (C41931 + C41930) * C84528 + (C41929 + C41928) * C6774) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
             C7020 + C7020 + C84304 * C936) *
                C40953 +
            (C7053 + C7054) * C84198) *
               C84340 +
           ((C13139 + C13140) * C40953 + (C11219 + C11220) * C84198) * C84347 +
           ((C34587 + C34588) * C40953 + (C32700 + C32701) * C84198) * C63169) *
              C84603 * C716 -
          (((C7017 * C17255 + C33636 + C33636 + C84304 * C17576 +
             C7016 * C5114 + C33637 + C33637 + C84528 * C5437) *
                C84198 +
            (C7017 * C17254 + C33638 + C33638 + C84304 * C17575 +
             C7016 * C5115 + C33639 + C33639 + C84528 * C5438) *
                C40953) *
               C63169 +
           ((C7017 * C3442 + C12196 + C12196 + C84304 * C3796 + C7016 * C3445 +
             C12197 + C12197 + C84528 * C3797) *
                C84198 +
            (C7017 * C3443 + C12198 + C12198 + C84304 * C3798 + C7016 * C3446 +
             C12199 + C12199 + C84528 * C3799) *
                C40953) *
               C84347 +
           ((C7017 * C1682 + C7757 + C7757 + C84304 * C2094 + C7016 * C722 +
             C7758 + C7758 + C84528 * C935) *
                C84198 +
            (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 + C7016 * C723 +
             C7760 + C7760 + C84528 * C936) *
                C40953) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyz[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C6774 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C84528 +
                      (C66523 + C66524 + C66525) * C6775 +
                      (C66829 + C66830 + C66831) * C84304) *
                         C40953 +
                     ((C63349 + C63350 + C63351) * C6774 +
                      (C63595 + C63596 + C63597) * C84528 +
                      (C65599 + C65600 + C65601) * C6775 +
                      (C65905 + C65906 + C65907) * C84304) *
                         C84198) *
                        C84603 * C716 -
                    (((C82430 * C17344 + C63169 * C17658 + C82419 * C3544 +
                       C84347 * C3885 + C82422 * C1789 + C84340 * C2214) *
                          C84304 +
                      (C82430 * C17255 + C63169 * C17422 + C82419 * C3442 +
                       C84347 * C3629 + C82422 * C1682 + C84340 * C1907) *
                          C6775 +
                      (C65907 + C65906 + C65905) * C84528 +
                      (C65601 + C65600 + C65599) * C6774) *
                         C84198 +
                     ((C82430 * C17343 + C63169 * C17657 + C82419 * C3546 +
                       C84347 * C3887 + C82422 * C1788 + C84340 * C2213) *
                          C84304 +
                      (C82430 * C17254 + C63169 * C17421 + C82419 * C3443 +
                       C84347 * C3630 + C82422 * C1681 + C84340 * C1906) *
                          C6775 +
                      (C66831 + C66830 + C66829) * C84528 +
                      (C66525 + C66524 + C66523) * C6774) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C82422 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84340 +
            (C45308 + C45309) * C82419 + (C45642 + C45643) * C84347 +
            (C45312 + C45313) * C82430 + (C45644 + C45645) * C63169) *
               C84528 +
           ((C41928 + C41929) * C82422 + (C42158 + C42159) * C84340 +
            (C44334 + C44335) * C82419 + (C44652 + C44653) * C84347 +
            (C44338 + C44339) * C82430 + (C44654 + C44655) * C63169) *
               C84304) *
              C84603 * C716 -
          (((C40962 * C17422 + C84198 * C17734 + C40960 * C17421 +
             C40953 * C17733) *
                C63169 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C82430 +
            (C52548 + C52547) * C84347 + (C52240 + C52239) * C82419 +
            (C42161 + C42160) * C84340 + (C41933 + C41932) * C82422) *
               C84304 +
           ((C44655 + C44654) * C63169 + (C44339 + C44338) * C82430 +
            (C44653 + C44652) * C84347 + (C44335 + C44334) * C82419 +
            (C42159 + C42158) * C84340 + (C41929 + C41928) * C82422) *
               C84528) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82422 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84340 +
            (C12827 + C12828) * C82419 + (C13439 + C13440) * C84347 +
            (C34261 + C34262) * C82430 + (C34896 + C34897) * C63169) *
               C40953 +
           ((C6801 + C6802) * C82422 + (C7284 + C7285) * C84340 +
            (C10877 + C10878) * C82419 + (C11537 + C11538) * C84347 +
            (C32376 + C32377) * C82430 + (C33009 + C33010) * C63169) *
               C84198) *
              C84603 * C716 -
          (((C6775 * C17422 + C84304 * C17810 + C6774 * C5280 +
             C84528 * C5674) *
                C63169 +
            (C6775 * C17255 + C84304 * C17344 + C6774 * C5114 +
             C84528 * C5200) *
                C82430 +
            (C6775 * C3629 + C84304 * C4045 + C6774 * C3632 + C84528 * C4046) *
                C84347 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C82419 +
            (C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C84340 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C82422) *
               C84198 +
           ((C6775 * C17421 + C84304 * C17809 + C6774 * C5281 +
             C84528 * C5675) *
                C63169 +
            (C6775 * C17254 + C84304 * C17343 + C6774 * C5115 +
             C84528 * C5201) *
                C82430 +
            (C6775 * C3630 + C84304 * C4047 + C6774 * C3633 + C84528 * C4048) *
                C84347 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C82419 +
            (C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C84340 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C82422) *
               C40953) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[49] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                       C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                       C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                          C84528 +
                      (C67144 + C67145 + C67146) * C84304) *
                         C40953 +
                     ((C63874 + C63875 + C63876) * C84528 +
                      (C66214 + C66215 + C66216) * C84304) *
                         C84198) *
                        C84603 * C716 -
                    (((C63836 * C17255 + C67132 + C67132 + C63169 * C17886 +
                       C82467 * C3442 + C67133 + C67133 + C84347 * C4125 +
                       C82474 * C1682 + C67134 + C67134 + C84340 * C2490) *
                          C84304 +
                      (C66216 + C66215 + C66214) * C84528) *
                         C84198 +
                     ((C63836 * C17254 + C67135 + C67135 + C63169 * C17885 +
                       C82467 * C3443 + C67136 + C67136 + C84347 * C4127 +
                       C82474 * C1681 + C67137 + C67137 + C84340 * C2489) *
                          C84304 +
                      (C67146 + C67145 + C67144) * C84528) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 +
                       C40961 * C103 + C40965 + C40965 + C84198 * C115) *
                          C84340 +
                      (C44970 + C44971) * C84347 + (C44972 + C44973) * C63169) *
                         C84528 +
                     ((C41688 + C41689) * C84340 + (C44020 + C44021) * C84347 +
                      (C44022 + C44023) * C63169) *
                         C84304) *
                        C1177 -
                    (((C40961 * C34135 + C44958 + C44958 + C84198 * C34137 +
                       C40959 * C18815 + C44959 + C44959 + C40953 * C18819) *
                          C63169 +
                      (C44023 + C44022) * C84347 + (C44021 + C44020) * C84340) *
                         C84304 +
                     ((C59845 + C59844) * C63169 + (C44973 + C44972) * C84347 +
                      (C44971 + C44970) * C84340) *
                         C84528) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C40960 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C40953 +
            (C6801 + C6802) * C40962 + (C6803 + C6804) * C84198) *
               C84340 +
           ((C12827 + C12828) * C40960 + (C12829 + C12830) * C40953 +
            (C10877 + C10878) * C40962 + (C10879 + C10880) * C84198) *
               C84347 +
           ((C34261 + C34262) * C40960 + (C34263 + C34264) * C40953 +
            (C32376 + C32377) * C40962 + (C32378 + C32379) * C84198) *
               C63169) *
              C1177 -
          (((C6775 * C34136 + C84304 * C34251 + C6774 * C5840 +
             C84528 * C5956) *
                C84198 +
            (C6775 * C34135 + C84304 * C34250 + C6774 * C5837 +
             C84528 * C5953) *
                C40962 +
            (C38371 + C38370) * C40953 + (C38369 + C38368) * C40960) *
               C63169 +
           ((C32379 + C32378) * C84198 + (C32377 + C32376) * C40962 +
            (C34264 + C34263) * C40953 + (C34262 + C34261) * C40960) *
               C84347 +
           ((C10880 + C10879) * C84198 + (C10878 + C10877) * C40962 +
            (C12830 + C12829) * C40953 + (C12828 + C12827) * C40960) *
               C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C40960 +
                      (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                       C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                          C40953 +
                      (C63349 + C63350 + C63351) * C40962 +
                      (C63352 + C63353 + C63354) * C84198) *
                         C84528 +
                     ((C66523 + C66524 + C66525) * C40960 +
                      (C66526 + C66527 + C66528) * C40953 +
                      (C65599 + C65600 + C65601) * C40962 +
                      (C65602 + C65603 + C65604) * C84198) *
                         C84304) *
                        C1177 -
                    (((C82430 * C34136 + C63169 * C34363 + C82419 * C5117 +
                       C84347 * C5283 + C82422 * C3451 + C84340 * C3638) *
                          C84198 +
                      (C82430 * C34135 + C63169 * C34362 + C82419 * C5114 +
                       C84347 * C5280 + C82422 * C3445 + C84340 * C3632) *
                          C40962 +
                      (C82430 * C18817 + C63169 * C19024 + C82419 * C5118 +
                       C84347 * C5284 + C82422 * C3452 + C84340 * C3639) *
                          C40953 +
                      (C82430 * C18815 + C63169 * C19022 + C82419 * C5115 +
                       C84347 * C5281 + C82422 * C3446 + C84340 * C3633) *
                          C40960) *
                         C84304 +
                     ((C82430 * C5840 + C63169 * C6060 + C82419 * C4217 +
                       C84347 * C4421 + C82422 * C1187 + C84340 * C1301) *
                          C84198 +
                      (C82430 * C5837 + C63169 * C6057 + C82419 * C4213 +
                       C84347 * C4417 + C82422 * C1182 + C84340 * C1296) *
                          C40962 +
                      (C82430 * C5841 + C63169 * C6061 + C82419 * C4216 +
                       C84347 * C4420 + C82422 * C1188 + C84340 * C1302) *
                          C40953 +
                      (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                       C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                          C40960) *
                         C84528) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C6774 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84528 +
            (C41928 + C41929) * C6775 + (C41930 + C41931) * C84304) *
               C84340 +
           ((C45308 + C45309) * C6774 + (C45310 + C45311) * C84528 +
            (C44334 + C44335) * C6775 + (C44336 + C44337) * C84304) *
               C84347 +
           ((C45312 + C45313) * C6774 + (C45314 + C45315) * C84528 +
            (C44338 + C44339) * C6775 + (C44340 + C44341) * C84304) *
               C63169) *
              C1177 -
          (((C40962 * C34250 + C84198 * C34462 + C40960 * C18908 +
             C40953 * C19100) *
                C84304 +
            (C40962 * C34135 + C84198 * C34136 + C40960 * C18815 +
             C40953 * C18817) *
                C6775 +
            (C60067 + C60066) * C84528 + (C60065 + C60064) * C6774) *
               C63169 +
           ((C44341 + C44340) * C84304 + (C44339 + C44338) * C6775 +
            (C45315 + C45314) * C84528 + (C45313 + C45312) * C6774) *
               C84347 +
           ((C44337 + C44336) * C84304 + (C44335 + C44334) * C6775 +
            (C45311 + C45310) * C84528 + (C45309 + C45308) * C6774) *
               C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
             C7020 + C7020 + C84304 * C936) *
                C40953 +
            (C7053 + C7054) * C84198) *
               C84340 +
           ((C13139 + C13140) * C40953 + (C11219 + C11220) * C84198) * C84347 +
           ((C34587 + C34588) * C40953 + (C32700 + C32701) * C84198) * C63169) *
              C1177 -
          (((C7017 * C34135 + C34579 + C34579 + C84304 * C34573 +
             C7016 * C5837 + C34580 + C34580 + C84528 * C6250) *
                C84198 +
            (C38593 + C38592) * C40953) *
               C63169 +
           ((C32701 + C32700) * C84198 + (C34588 + C34587) * C40953) * C84347 +
           ((C11220 + C11219) * C84198 + (C13140 + C13139) * C40953) * C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C6774 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C84528 +
                      (C66523 + C66524 + C66525) * C6775 +
                      (C66829 + C66830 + C66831) * C84304) *
                         C40953 +
                     ((C63349 + C63350 + C63351) * C6774 +
                      (C63595 + C63596 + C63597) * C84528 +
                      (C65599 + C65600 + C65601) * C6775 +
                      (C65905 + C65906 + C65907) * C84304) *
                         C84198) *
                        C1177 -
                    (((C82430 * C34250 + C63169 * C34686 + C82419 * C5200 +
                       C84347 * C5520 + C82422 * C3545 + C84340 * C3886) *
                          C84304 +
                      (C82430 * C34135 + C63169 * C34362 + C82419 * C5114 +
                       C84347 * C5280 + C82422 * C3445 + C84340 * C3632) *
                          C6775 +
                      (C82430 * C5953 + C63169 * C6346 + C82419 * C4308 +
                       C84347 * C4715 + C82422 * C1244 + C84340 * C1447) *
                          C84528 +
                      (C82430 * C5837 + C63169 * C6057 + C82419 * C4213 +
                       C84347 * C4417 + C82422 * C1182 + C84340 * C1296) *
                          C6774) *
                         C84198 +
                     ((C82430 * C18908 + C63169 * C19309 + C82419 * C5201 +
                       C84347 * C5521 + C82422 * C3547 + C84340 * C3888) *
                          C84304 +
                      (C82430 * C18815 + C63169 * C19022 + C82419 * C5115 +
                       C84347 * C5281 + C82422 * C3446 + C84340 * C3633) *
                          C6775 +
                      (C82430 * C5954 + C63169 * C6347 + C82419 * C4307 +
                       C84347 * C4714 + C82422 * C1245 + C84340 * C1448) *
                          C84528 +
                      (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                       C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                          C6774) *
                         C40953) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C82422 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C84340 +
            (C45308 + C45309) * C82419 + (C45642 + C45643) * C84347 +
            (C45312 + C45313) * C82430 + (C45644 + C45645) * C63169) *
               C84528 +
           ((C41928 + C41929) * C82422 + (C42158 + C42159) * C84340 +
            (C44334 + C44335) * C82419 + (C44652 + C44653) * C84347 +
            (C44338 + C44339) * C82430 + (C44654 + C44655) * C63169) *
               C84304) *
              C1177 -
          (((C40962 * C34362 + C84198 * C34785 + C40960 * C19022 +
             C40953 * C19385) *
                C63169 +
            (C40962 * C34135 + C84198 * C34136 + C40960 * C18815 +
             C40953 * C18817) *
                C82430 +
            (C44655 + C44654) * C84347 + (C44339 + C44338) * C82419 +
            (C44653 + C44652) * C84340 + (C44335 + C44334) * C82422) *
               C84304 +
           ((C60277 + C60276) * C63169 + (C60065 + C60064) * C82430 +
            (C45645 + C45644) * C84347 + (C45313 + C45312) * C82419 +
            (C45643 + C45642) * C84340 + (C45309 + C45308) * C82422) *
               C84528) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C82422 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84340 +
            (C12827 + C12828) * C82419 + (C13439 + C13440) * C84347 +
            (C34261 + C34262) * C82430 + (C34896 + C34897) * C63169) *
               C40953 +
           ((C6801 + C6802) * C82422 + (C7284 + C7285) * C84340 +
            (C10877 + C10878) * C82419 + (C11537 + C11538) * C84347 +
            (C32376 + C32377) * C82430 + (C33009 + C33010) * C63169) *
               C84198) *
              C1177 -
          (((C6775 * C34362 + C84304 * C34890 + C6774 * C6057 +
             C84528 * C6518) *
                C63169 +
            (C6775 * C34135 + C84304 * C34250 + C6774 * C5837 +
             C84528 * C5953) *
                C82430 +
            (C33010 + C33009) * C84347 + (C32377 + C32376) * C82419 +
            (C11538 + C11537) * C84340 + (C10878 + C10877) * C82422) *
               C84198 +
           ((C38797 + C38796) * C63169 + (C38369 + C38368) * C82430 +
            (C34897 + C34896) * C84347 + (C34262 + C34261) * C82419 +
            (C13440 + C13439) * C84340 + (C12828 + C12827) * C82422) *
               C40953) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                       C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                       C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                          C84528 +
                      (C67144 + C67145 + C67146) * C84304) *
                         C40953 +
                     ((C63874 + C63875 + C63876) * C84528 +
                      (C66214 + C66215 + C66216) * C84304) *
                         C84198) *
                        C1177 -
                    (((C63836 * C34135 + C68029 + C68029 + C63169 * C34995 +
                       C82467 * C5114 + C68030 + C68030 + C84347 * C5751 +
                       C82474 * C3445 + C68031 + C68031 + C84340 * C4126) *
                          C84304 +
                      (C63836 * C5837 + C65287 + C65287 + C63169 * C6601 +
                       C82467 * C4213 + C65288 + C65288 + C84347 * C4994 +
                       C82474 * C1182 + C65289 + C65289 + C84340 * C1588) *
                          C84528) *
                         C84198 +
                     ((C63836 * C18815 + C68032 + C68032 + C63169 * C19561 +
                       C82467 * C5115 + C68033 + C68033 + C84347 * C5752 +
                       C82474 * C3446 + C68034 + C68034 + C84340 * C4128) *
                          C84304 +
                      (C63836 * C5838 + C65290 + C65290 + C63169 * C6602 +
                       C82467 * C4212 + C65291 + C65291 + C84347 * C4993 +
                       C82474 * C1183 + C65292 + C65292 + C84340 * C1589) *
                          C84528) *
                         C40953) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C53740 +
            (C44970 + C44971) * C84344) *
               C84596 +
           ((C41688 + C41689) * C53740 + (C44020 + C44021) * C84344) * C84581 +
           ((C41690 + C41691) * C53740 + (C51935 + C51936) * C84344) * C84558) *
              C84603 * C84604 * C90 -
          (((C40961 * C3441 + C51001 + C51001 + C84198 * C3453 +
             C40959 * C3442 + C51002 + C51002 + C40953 * C3454) *
                C84344 +
            (C40961 * C1683 + C40974 + C40974 + C84198 * C1691 +
             C40959 * C1682 + C40975 + C40975 + C40953 * C1690) *
                C53740) *
               C84558 +
           ((C40961 * C3444 + C43010 + C43010 + C84198 * C3456 +
             C40959 * C3445 + C43011 + C43011 + C40953 * C3457) *
                C84344 +
            (C40961 * C721 + C40976 + C40976 + C84198 * C731 + C40959 * C722 +
             C40977 + C40977 + C40953 * C732) *
                C53740) *
               C84581 +
           ((C40961 * C1181 + C43014 + C43014 + C84198 * C1191 +
             C40959 * C1182 + C43015 + C43015 + C40953 * C1192) *
                C84344 +
            (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
             C40979 + C40979 + C40953 * C115) *
                C53740) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C53740 +
           (C38939 * C1183 + C40351 + C40351 + C84602 * C1193 + C38941 * C1182 +
            C40350 + C40350 + C84592 * C1192 + C38943 * C1181 + C40349 +
            C40349 + C84576 * C1191 + C38945 * C1180 + C40348 + C40348 +
            C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C38945 * C1179 + C53743 + C53743 + C84527 * C1189 + C38943 * C1180 +
            C53744 + C53744 + C84576 * C1190 + C38941 * C1181 + C53745 +
            C53745 + C84592 * C1191 + C38939 * C1182 + C53746 + C53746 +
            C84602 * C1192) *
               C84344 +
           (C38945 * C106 + C38960 + C38960 + C84527 * C118 + C38943 * C105 +
            C38961 + C38961 + C84576 * C117 + C38941 * C104 + C38962 + C38962 +
            C84592 * C116 + C38939 * C103 + C38963 + C38963 + C84602 * C115) *
               C53740) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84607 +
           (C44970 + C44971) * C84601 + (C44972 + C44973) * C84589 +
           (C40959 * C5838 + C44961 + C44961 + C40953 * C5844 + C40961 * C5837 +
            C44960 + C44960 + C84198 * C5843) *
               C84543) *
              C84246 * C84603 * C84604 * C90 -
          ((C40961 * C5836 + C58552 + C58552 + C84198 * C5842 + C40959 * C5837 +
            C58553 + C58553 + C40953 * C5843) *
               C84543 +
           (C40961 * C4214 + C43012 + C43012 + C84198 * C4222 + C40959 * C4213 +
            C43013 + C43013 + C40953 * C4221) *
               C84589 +
           (C40961 * C1181 + C43014 + C43014 + C84198 * C1191 + C40959 * C1182 +
            C43015 + C43015 + C40953 * C1192) *
               C84601 +
           (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
            C40979 + C40979 + C40953 * C115) *
               C84607) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C40960 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C40953 +
            (C1821 + C1822 + C1823) * C40962 +
            (C1824 + C1825 + C1826) * C84198) *
               C53740 +
           ((C30262 + C30263 + C30264) * C40960 +
            (C30265 + C30266 + C30267) * C40953 +
            (C55869 + C55870 + C55871) * C40962 +
            (C55872 + C55873 + C55874) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C1787 * C3447 + C84558 * C3548 + C1786 * C3450 + C84581 * C3549 +
             C1785 * C1186 + C84596 * C1248) *
                C84198 +
            (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
             C1785 * C1181 + C84596 * C1243) *
                C40962 +
            (C55874 + C55873 + C55872) * C40953 +
            (C55871 + C55870 + C55869) * C40960) *
               C84344 +
           ((C1832 + C1831 + C1830) * C84198 +
            (C1829 + C1828 + C1827) * C40962 +
            (C1826 + C1825 + C1824) * C40953 +
            (C1823 + C1822 + C1821) * C40960) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C38940 +
            (C172 * C108 + C84246 * C179) * C84602 + C202 * C38942 +
            C203 * C84592 + C204 * C38944 + C205 * C84576 + C206 * C38946 +
            C207 * C84527) *
               C53740 +
           (C5975 * C38940 + C5976 * C84602 + C4332 * C38942 + C4333 * C84592 +
            C4334 * C38944 + C4335 * C84576 + C8803 * C38946 + C8804 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C172 * C1184 + C84246 * C1246) * C84527 +
            (C172 * C1179 + C84246 * C1241) * C38946 + C8804 * C84576 +
            C8803 * C38944 + C4335 * C84592 + C4334 * C38942 + C4333 * C84602 +
            C4332 * C38940) *
               C84344 +
           (C209 * C84527 + C208 * C38946 + C207 * C84576 + C206 * C38944 +
            C205 * C84592 + C204 * C38942 + C203 * C84602 + C202 * C38940) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C40960 +
            (C172 * C108 + C84246 * C179) * C40953 + C202 * C40962 +
            C203 * C84198) *
               C84607 +
           (C5975 * C40960 + C5976 * C40953 + C4332 * C40962 + C4333 * C84198) *
               C84601 +
           (C5977 * C40960 + C5978 * C40953 + C4336 * C40962 + C4337 * C84198) *
               C84589 +
           (C31806 * C40960 + C31807 * C40953 + C35142 * C40962 +
            C35143 * C84198) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C172 * C5839 + C84246 * C5955) * C84198 +
            (C172 * C5836 + C84246 * C5952) * C40962 + C35143 * C40953 +
            C35142 * C40960) *
               C84543 +
           (C4339 * C84198 + C4338 * C40962 + C4337 * C40953 + C4336 * C40960) *
               C84589 +
           (C4335 * C84198 + C4334 * C40962 + C4333 * C40953 + C4332 * C40960) *
               C84601 +
           (C205 * C84198 + C204 * C40962 + C203 * C40953 + C202 * C40960) *
               C84607) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C40960 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C40953 +
            (C53905 + C53906) * C40962 + (C53907 + C53908) * C84198) *
               C84596 +
           ((C53878 * C723 + C53740 * C837 + C53879 * C3446 + C84344 * C3633) *
                C40960 +
            (C53878 * C728 + C53740 * C842 + C53879 * C3452 + C84344 * C3639) *
                C40953 +
            (C55989 + C55990) * C40962 + (C55991 + C55992) * C84198) *
               C84581 +
           ((C53878 * C1681 + C53740 * C1906 + C53879 * C3443 +
             C84344 * C3630) *
                C40960 +
            (C53878 * C1685 + C53740 * C1910 + C53879 * C3449 +
             C84344 * C3636) *
                C40953 +
            (C55993 + C55994) * C40962 + (C55995 + C55996) * C84198) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C53879 * C3447 + C84344 * C3634 + C53878 * C1687 +
             C53740 * C1912) *
                C84198 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C40962 +
            (C55996 + C55995) * C40953 + (C55994 + C55993) * C40960) *
               C84558 +
           ((C53879 * C3450 + C84344 * C3637 + C53878 * C726 + C53740 * C840) *
                C84198 +
            (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
                C40962 +
            (C55992 + C55991) * C40953 + (C55990 + C55989) * C40960) *
               C84581 +
           ((C53912 + C53911) * C84198 + (C53910 + C53909) * C40962 +
            (C53908 + C53907) * C40953 + (C53906 + C53905) * C40960) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C38940 +
           (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
               C84602 +
           (C53905 + C53906) * C38942 + (C53907 + C53908) * C84592 +
           (C53909 + C53910) * C38944 + (C53911 + C53912) * C84576 +
           (C53913 + C53914) * C38946 + (C53915 + C53916) * C84527) *
              C84246 * C84603 * C84604 * C90 -
          ((C53879 * C1184 + C84344 * C1298 + C53878 * C112 + C53740 * C262) *
               C84527 +
           (C53879 * C1179 + C84344 * C1293 + C53878 * C106 + C53740 * C256) *
               C38946 +
           (C53916 + C53915) * C84576 + (C53914 + C53913) * C38944 +
           (C53912 + C53911) * C84592 + (C53910 + C53909) * C38942 +
           (C53908 + C53907) * C84602 + (C53906 + C53905) * C38940) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
            C58687 * C4212 + C84589 * C4416 + C58688 * C5838 + C84543 * C6058) *
               C40960 +
           (C58685 * C108 + C84607 * C258 + C58686 * C1188 + C84601 * C1302 +
            C58687 * C4216 + C84589 * C4420 + C58688 * C5841 + C84543 * C6061) *
               C40953 +
           (C58706 + C58707 + C58708 + C58709) * C40962 +
           (C58710 + C58711 + C58712 + C58713) * C84198) *
              C84246 * C84603 * C84604 * C90 -
          ((C58688 * C5839 + C84543 * C6059 + C58687 * C4218 + C84589 * C4422 +
            C58686 * C1186 + C84601 * C1300 + C58685 * C110 + C84607 * C260) *
               C84198 +
           (C58688 * C5836 + C84543 * C6056 + C58687 * C4214 + C84589 * C4418 +
            C58686 * C1181 + C84601 * C1295 + C58685 * C104 + C84607 * C254) *
               C40962 +
           (C58713 + C58712 + C58711 + C58710) * C40953 +
           (C58709 + C58708 + C58707 + C58706) * C40960) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C1785 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84596 +
            (C41928 + C41929) * C1786 + (C41930 + C41931) * C84581 +
            (C41932 + C41933) * C1787 + (C41934 + C41935) * C84558) *
               C53740 +
           ((C45308 + C45309) * C1785 + (C45310 + C45311) * C84596 +
            (C44334 + C44335) * C1786 + (C44336 + C44337) * C84581 +
            (C52239 + C52240) * C1787 + (C52241 + C52242) * C84558) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C40962 * C3542 + C84198 * C3714 + C40960 * C3544 +
             C40953 * C3715) *
                C84558 +
            (C40962 * C3441 + C84198 * C3447 + C40960 * C3442 +
             C40953 * C3448) *
                C1787 +
            (C40962 * C3543 + C84198 * C3717 + C40960 * C3545 +
             C40953 * C3718) *
                C84581 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C1786 +
            (C40962 * C1243 + C84198 * C1347 + C40960 * C1244 +
             C40953 * C1348) *
                C84596 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C1785) *
               C84344 +
           ((C40962 * C1790 + C84198 * C2014 + C40960 * C1789 +
             C40953 * C2013) *
                C84558 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C1787 +
            (C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
                C84581 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C1786 +
            (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
                C84596 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C1785) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C172 +
            (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
             C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
                C84246) *
               C53740 +
           ((C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
             C38944 * C1181 + C84576 * C1186 + C38946 * C1180 +
             C84527 * C1185) *
                C172 +
            (C38940 * C1245 + C84602 * C1349 + C38942 * C1244 + C84592 * C1348 +
             C38944 * C1243 + C84576 * C1347 + C38946 * C1242 +
             C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C38946 * C1241 + C84527 * C1345 + C38944 * C1242 + C84576 * C1346 +
             C38942 * C1243 + C84592 * C1347 + C38940 * C1244 +
             C84602 * C1348) *
                C84246 +
            (C38946 * C1179 + C84527 * C1184 + C38944 * C1180 + C84576 * C1185 +
             C38942 * C1181 + C84592 * C1186 + C38940 * C1182 +
             C84602 * C1187) *
                C172) *
               C84344 +
           ((C38946 * C177 + C84527 * C334 + C38944 * C176 + C84576 * C333 +
             C38942 * C175 + C84592 * C332 + C38940 * C174 + C84602 * C331) *
                C84246 +
            (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
             C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
                C172) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C172 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84246) *
               C84607 +
           ((C45308 + C45309) * C172 + (C45310 + C45311) * C84246) * C84601 +
           ((C45312 + C45313) * C172 + (C45314 + C45315) * C84246) * C84589 +
           ((C40960 * C5838 + C40953 * C5841 + C40962 * C5837 +
             C84198 * C5840) *
                C172 +
            (C40960 * C5954 + C40953 * C6138 + C40962 * C5953 +
             C84198 * C6137) *
                C84246) *
               C84543) *
              C84603 * C84604 * C90 -
          (((C40962 * C5952 + C84198 * C6136 + C40960 * C5953 +
             C40953 * C6137) *
                C84246 +
            (C40962 * C5836 + C84198 * C5839 + C40960 * C5837 +
             C40953 * C5840) *
                C172) *
               C84543 +
           ((C40962 * C4309 + C84198 * C4536 + C40960 * C4308 +
             C40953 * C4535) *
                C84246 +
            (C40962 * C4214 + C84198 * C4218 + C40960 * C4213 +
             C40953 * C4217) *
                C172) *
               C84589 +
           ((C40962 * C1243 + C84198 * C1347 + C40960 * C1244 +
             C40953 * C1348) *
                C84246 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C172) *
               C84601 +
           ((C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
                C84246 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C172) *
               C84607) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
             C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
             C84558 * C2093) *
                C40953 +
            (C2134 + C2135 + C2136) * C84198) *
               C53740 +
           ((C30535 + C30536 + C30537) * C40953 +
            (C56205 + C56206 + C56207) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C2092 * C3441 + C3801 + C3801 + C84558 * C3794 + C2091 * C3444 +
             C3802 + C3802 + C84581 * C3795 + C2090 * C1181 + C3803 + C3803 +
             C84596 * C1394) *
                C84198 +
            (C56207 + C56206 + C56205) * C40953) *
               C84344 +
           ((C2139 + C2138 + C2137) * C84198 +
            (C2136 + C2135 + C2134) * C40953) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84602 +
            C408 * C84592 + C409 * C84576 + C410 * C84527) *
               C53740 +
           (C6268 * C84602 + C4637 * C84592 + C4638 * C84576 + C9045 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C84527 +
            C9045 * C84576 + C4638 * C84592 + C4637 * C84602) *
               C84344 +
           (C411 * C84527 + C410 * C84576 + C409 * C84592 + C408 * C84602) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C40953 +
            C408 * C84198) *
               C84607 +
           (C6268 * C40953 + C4637 * C84198) * C84601 +
           (C6269 * C40953 + C4639 * C84198) * C84589 +
           (C31975 * C40953 + C35374 * C84198) * C84543) *
              C84603 * C84604 * C90 -
          (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C84198 +
            C35374 * C40953) *
               C84543 +
           (C4640 * C84198 + C4639 * C40953) * C84589 +
           (C4638 * C84198 + C4637 * C40953) * C84601 +
           (C409 * C84198 + C408 * C40953) * C84607) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C1785 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84596 +
            (C53878 * C723 + C53740 * C837 + C53879 * C3446 + C84344 * C3633) *
                C1786 +
            (C53878 * C785 + C53740 * C988 + C53879 * C3547 + C84344 * C3888) *
                C84581 +
            (C53878 * C1681 + C53740 * C1906 + C53879 * C3443 +
             C84344 * C3630) *
                C1787 +
            (C53878 * C1788 + C53740 * C2213 + C53879 * C3546 +
             C84344 * C3887) *
                C84558) *
               C40953 +
           ((C53905 + C53906) * C1785 + (C54127 + C54128) * C84596 +
            (C55989 + C55990) * C1786 + (C56314 + C56315) * C84581 +
            (C55993 + C55994) * C1787 + (C56316 + C56317) * C84558) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C53879 * C3542 + C84344 * C3883 + C53878 * C1790 +
             C53740 * C2215) *
                C84558 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C1787 +
            (C53879 * C3543 + C84344 * C3884 + C53878 * C783 + C53740 * C986) *
                C84581 +
            (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
                C1786 +
            (C54130 + C54129) * C84596 + (C53910 + C53909) * C1785) *
               C84198 +
           ((C56317 + C56316) * C84558 + (C55994 + C55993) * C1787 +
            (C56315 + C56314) * C84581 + (C55990 + C55989) * C1786 +
            (C54128 + C54127) * C84596 + (C53906 + C53905) * C1785) *
               C40953) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C172 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84246) *
               C84602 +
           ((C53905 + C53906) * C172 + (C54127 + C54128) * C84246) * C84592 +
           ((C53909 + C53910) * C172 + (C54129 + C54130) * C84246) * C84576 +
           ((C53913 + C53914) * C172 + (C54131 + C54132) * C84246) * C84527) *
              C84603 * C84604 * C90 -
          (((C53879 * C1241 + C84344 * C1444 + C53878 * C177 + C53740 * C457) *
                C84246 +
            (C53879 * C1179 + C84344 * C1293 + C53878 * C106 + C53740 * C256) *
                C172) *
               C84527 +
           ((C54132 + C54131) * C84246 + (C53914 + C53913) * C172) * C84576 +
           ((C54130 + C54129) * C84246 + (C53910 + C53909) * C172) * C84592 +
           ((C54128 + C54127) * C84246 + (C53906 + C53905) * C172) * C84602) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
             C58687 * C4212 + C84589 * C4416 + C58688 * C5838 +
             C84543 * C6058) *
                C172 +
            (C58685 * C173 + C84607 * C453 + C58686 * C1245 + C84601 * C1448 +
             C58687 * C4307 + C84589 * C4714 + C58688 * C5954 +
             C84543 * C6347) *
                C84246) *
               C40953 +
           ((C58706 + C58707 + C58708 + C58709) * C172 +
            (C58920 + C58921 + C58922 + C58923) * C84246) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C58688 * C5952 + C84543 * C6345 + C58687 * C4309 + C84589 * C4716 +
             C58686 * C1243 + C84601 * C1446 + C58685 * C175 + C84607 * C455) *
                C84246 +
            (C58688 * C5836 + C84543 * C6056 + C58687 * C4214 + C84589 * C4418 +
             C58686 * C1181 + C84601 * C1295 + C58685 * C104 + C84607 * C254) *
                C172) *
               C84198 +
           ((C58923 + C58922 + C58921 + C58920) * C84246 +
            (C58709 + C58708 + C58707 + C58706) * C172) *
               C40953) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C53878 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C53740 +
            (C45308 + C45309) * C53879 + (C45642 + C45643) * C84344) *
               C84596 +
           ((C41928 + C41929) * C53878 + (C42158 + C42159) * C53740 +
            (C44334 + C44335) * C53879 + (C44652 + C44653) * C84344) *
               C84581 +
           ((C41932 + C41933) * C53878 + (C42160 + C42161) * C53740 +
            (C52239 + C52240) * C53879 + (C52547 + C52548) * C84344) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C40962 * C3628 + C84198 * C3963 + C40960 * C3629 +
             C40953 * C3964) *
                C84344 +
            (C40962 * C3441 + C84198 * C3447 + C40960 * C3442 +
             C40953 * C3448) *
                C53879 +
            (C40962 * C1908 + C84198 * C2317 + C40960 * C1907 +
             C40953 * C2316) *
                C53740 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C53878) *
               C84558 +
           ((C40962 * C3631 + C84198 * C3966 + C40960 * C3632 +
             C40953 * C3967) *
                C84344 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C53879 +
            (C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C53740 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C53878) *
               C84581 +
           ((C40962 * C1295 + C84198 * C1493 + C40960 * C1296 +
             C40953 * C1494) *
                C84344 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C53879 +
            (C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C53740 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C53878) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C53878 +
           (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
            C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
               C53740 +
           (C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
            C38944 * C1181 + C84576 * C1186 + C38946 * C1180 + C84527 * C1185) *
               C53879 +
           (C38940 * C1297 + C84602 * C1495 + C38942 * C1296 + C84592 * C1494 +
            C38944 * C1295 + C84576 * C1493 + C38946 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C38946 * C1293 + C84527 * C1491 + C38944 * C1294 + C84576 * C1492 +
            C38942 * C1295 + C84592 * C1493 + C38940 * C1296 + C84602 * C1494) *
               C84344 +
           (C38946 * C1179 + C84527 * C1184 + C38944 * C1180 + C84576 * C1185 +
            C38942 * C1181 + C84592 * C1186 + C38940 * C1182 + C84602 * C1187) *
               C53879 +
           (C38946 * C256 + C84527 * C525 + C38944 * C255 + C84576 * C524 +
            C38942 * C254 + C84592 * C523 + C38940 * C253 + C84602 * C522) *
               C53740 +
           (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
            C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
               C53878) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C58685 +
           (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
               C84607 +
           (C45308 + C45309) * C58686 + (C45642 + C45643) * C84601 +
           (C45312 + C45313) * C58687 + (C45644 + C45645) * C84589 +
           (C40960 * C5838 + C40953 * C5841 + C40962 * C5837 + C84198 * C5840) *
               C58688 +
           (C40960 * C6058 + C40953 * C6424 + C40962 * C6057 + C84198 * C6423) *
               C84543) *
              C84246 * C84603 * C84604 * C90 -
          ((C40962 * C6056 + C84198 * C6422 + C40960 * C6057 + C40953 * C6423) *
               C84543 +
           (C40962 * C5836 + C84198 * C5839 + C40960 * C5837 + C40953 * C5840) *
               C58688 +
           (C40962 * C4418 + C84198 * C4812 + C40960 * C4417 + C40953 * C4811) *
               C84589 +
           (C40962 * C4214 + C84198 * C4218 + C40960 * C4213 + C40953 * C4217) *
               C58687 +
           (C40962 * C1295 + C84198 * C1493 + C40960 * C1296 + C40953 * C1494) *
               C84601 +
           (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 + C40953 * C1187) *
               C58686 +
           (C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
               C84607 +
           (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
               C58685) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[51] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C1785 * C102 + C84596 * C173 + C1786 * C723 +
                       C84581 * C785 + C1787 * C1681 + C84558 * C1788) *
                          C53878 +
                      (C1785 * C252 + C84596 * C569 + C1786 * C837 +
                       C84581 * C1082 + C1787 * C1906 + C84558 * C2393) *
                          C53740 +
                      (C30262 + C30263 + C30264) * C53879 +
                      (C30775 + C30776 + C30777) * C84344) *
                         C40953 +
                     ((C1821 + C1822 + C1823) * C53878 +
                      (C2410 + C2411 + C2412) * C53740 +
                      (C55869 + C55870 + C55871) * C53879 +
                      (C56520 + C56521 + C56522) * C84344) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C1787 * C3628 + C84558 * C4043 + C1786 * C3631 +
                       C84581 * C4044 + C1785 * C1295 + C84596 * C1540) *
                          C84344 +
                      (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 +
                       C84581 * C3543 + C1785 * C1181 + C84596 * C1243) *
                          C53879 +
                      (C2415 + C2414 + C2413) * C53740 +
                      (C1829 + C1828 + C1827) * C53878) *
                         C84198 +
                     ((C56522 + C56521 + C56520) * C84344 +
                      (C55871 + C55870 + C55869) * C53879 +
                      (C2412 + C2411 + C2410) * C53740 +
                      (C1823 + C1822 + C1821) * C53878) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C53878 +
                      (C172 * C252 + C84246 * C569) * C53740 + C5975 * C53879 +
                      C6525 * C84344) *
                         C84602 +
                     (C54265 + C54266 + C54267 + C54268) * C84592 +
                     (C54269 + C54270 + C54271 + C54272) * C84576 +
                     (C54273 + C54274 + C54275 + C54276) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C172 * C1293 + C84246 * C1538) * C84344 +
                      (C172 * C1179 + C84246 * C1241) * C53879 + C591 * C53740 +
                      C208 * C53878) *
                         C84527 +
                     (C54276 + C54275 + C54274 + C54273) * C84576 +
                     (C54272 + C54271 + C54270 + C54269) * C84592 +
                     (C54268 + C54267 + C54266 + C54265) * C84602) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C58685 +
                      (C172 * C252 + C84246 * C569) * C84607 + C5975 * C58686 +
                      C6525 * C84601 + C5977 * C58687 + C6526 * C84589 +
                      C31806 * C58688 + C32118 * C84543) *
                         C40953 +
                     (C59056 + C59057 + C59058 + C59059 + C59060 + C59061 +
                      C59062 + C59063) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C172 * C6056 + C84246 * C6517) * C84543 +
                      (C172 * C5836 + C84246 * C5952) * C58688 +
                      C4912 * C84589 + C4338 * C58687 + C4911 * C84601 +
                      C4334 * C58686 + C589 * C84607 + C204 * C58685) *
                         C84198 +
                     (C59063 + C59062 + C59061 + C59060 + C59059 + C59058 +
                      C59057 + C59056) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[51] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84596 +
                      (C54342 * C723 + C54986 + C54986 + C53740 * C1129 +
                       C54343 * C3446 + C54985 + C54985 + C84344 * C4128) *
                          C84581 +
                      (C54342 * C1681 + C56621 + C56621 + C53740 * C2489 +
                       C54343 * C3443 + C56622 + C56622 + C84344 * C4127) *
                          C84558) *
                         C40953 +
                     ((C54379 + C54380) * C84596 + (C56643 + C56644) * C84581 +
                      (C56645 + C56646) * C84558) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C54343 * C3441 + C56633 + C56633 + C84344 * C4123 +
                       C54342 * C1683 + C56634 + C56634 + C53740 * C2491) *
                          C84558 +
                      (C54343 * C3444 + C54981 + C54981 + C84344 * C4124 +
                       C54342 * C721 + C54982 + C54982 + C53740 * C1127) *
                          C84581 +
                      (C54382 + C54381) * C84596) *
                         C84198 +
                     ((C56646 + C56645) * C84558 + (C56644 + C56643) * C84581 +
                      (C54380 + C54379) * C84596) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                      C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                         C84246 * C84602 +
                     (C54379 + C54380) * C84246 * C84592 +
                     (C54381 + C54382) * C84246 * C84576 +
                     (C54383 + C54384) * C84246 * C84527) *
                        C84603 * C84604 * C90 -
                    ((C54343 * C1179 + C54365 + C54365 + C84344 * C1585 +
                      C54342 * C106 + C54366 + C54366 + C53740 * C642) *
                         C84246 * C84527 +
                     (C54384 + C54383) * C84246 * C84576 +
                     (C54382 + C54381) * C84246 * C84592 +
                     (C54380 + C54379) * C84246 * C84602) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C59129 * C102 + C59134 + C59134 + C84607 * C638 +
                      C59130 * C1183 + C59135 + C59135 + C84601 * C1589 +
                      C59131 * C4212 + C59136 + C59136 + C84589 * C4993 +
                      C59132 * C5838 + C59137 + C59137 + C84543 * C6602) *
                         C84246 * C40953 +
                     (C59162 + C59163 + C59164 + C59165) * C84246 * C84198) *
                        C84603 * C84604 * C90 -
                    ((C59132 * C5836 + C59150 + C59150 + C84543 * C6600 +
                      C59131 * C4214 + C59151 + C59151 + C84589 * C4995 +
                      C59130 * C1181 + C59152 + C59152 + C84601 * C1587 +
                      C59129 * C104 + C59153 + C59153 + C84607 * C640) *
                         C84246 * C84198 +
                     (C59165 + C59164 + C59163 + C59162) * C84246 * C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C53740 +
            (C44970 + C44971) * C84344) *
               C84596 +
           ((C41688 + C41689) * C53740 + (C44020 + C44021) * C84344) * C84581 +
           ((C41690 + C41691) * C53740 + (C51935 + C51936) * C84344) * C84558) *
              C84603 * C716 -
          (((C40961 * C21056 + C42362 + C42362 + C84198 * C21058 +
             C40959 * C16807 + C42363 + C42363 + C40953 * C16811) *
                C84344 +
            (C41693 + C41692) * C53740) *
               C84558 +
           ((C51936 + C51935) * C84344 + (C41691 + C41690) * C53740) * C84581 +
           ((C44021 + C44020) * C84344 + (C41689 + C41688) * C53740) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C53740 +
           (C38939 * C1183 + C40351 + C40351 + C84602 * C1193 + C38941 * C1182 +
            C40350 + C40350 + C84592 * C1192 + C38943 * C1181 + C40349 +
            C40349 + C84576 * C1191 + C38945 * C1180 + C40348 + C40348 +
            C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C38945 * C8102 + C40344 + C40344 + C84527 * C8104 + C38943 * C3444 +
            C40345 + C40345 + C84576 * C3456 + C38941 * C3445 + C40346 +
            C40346 + C84592 * C3457 + C38939 * C3446 + C40347 + C40347 +
            C84602 * C3458) *
               C84344 +
           (C39697 + C39696 + C39695 + C39694) * C53740) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84607 +
           (C44970 + C44971) * C84601 + (C44972 + C44973) * C84589 +
           (C40959 * C5838 + C44961 + C44961 + C40953 * C5844 + C40961 * C5837 +
            C44960 + C44960 + C84198 * C5843) *
               C84543) *
              C84246 * C84603 * C716 -
          ((C40961 * C34135 + C44958 + C44958 + C84198 * C34137 +
            C40959 * C18815 + C44959 + C44959 + C40953 * C18819) *
               C84543 +
           (C44023 + C44022) * C84589 + (C44021 + C44020) * C84601 +
           (C41689 + C41688) * C84607) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C40960 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C40953 +
            (C1821 + C1822 + C1823) * C40962 +
            (C1824 + C1825 + C1826) * C84198) *
               C53740 +
           ((C30262 + C30263 + C30264) * C40960 +
            (C30265 + C30266 + C30267) * C40953 +
            (C55869 + C55870 + C55871) * C40962 +
            (C55872 + C55873 + C55874) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C1787 * C21057 + C84558 * C21134 + C1786 * C3448 + C84581 * C3550 +
             C1785 * C3451 + C84596 * C3551) *
                C84198 +
            (C1787 * C21056 + C84558 * C21133 + C1786 * C3442 + C84581 * C3544 +
             C1785 * C3445 + C84596 * C3545) *
                C40962 +
            (C1787 * C16809 + C84558 * C16862 + C1786 * C3449 + C84581 * C3552 +
             C1785 * C3452 + C84596 * C3553) *
                C40953 +
            (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 + C84581 * C3546 +
             C1785 * C3446 + C84596 * C3547) *
                C40960) *
               C84344 +
           ((C1787 * C2601 + C84558 * C2717 + C1786 * C1686 + C84581 * C1793 +
             C1785 * C727 + C84596 * C789) *
                C84198 +
            (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
             C1785 * C722 + C84596 * C784) *
                C40962 +
            (C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
             C1785 * C728 + C84596 * C790) *
                C40953 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C40960) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C38940 +
            (C172 * C108 + C84246 * C179) * C84602 + C202 * C38942 +
            C203 * C84592 + C204 * C38944 + C205 * C84576 + C206 * C38946 +
            C207 * C84527) *
               C53740 +
           (C5975 * C38940 + C5976 * C84602 + C4332 * C38942 + C4333 * C84592 +
            C4334 * C38944 + C4335 * C84576 + C8803 * C38946 + C8804 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C172 * C8103 + C84246 * C8180) * C84527 +
            (C172 * C8102 + C84246 * C8179) * C38946 +
            (C172 * C3450 + C84246 * C3549) * C84576 +
            (C172 * C3444 + C84246 * C3543) * C38944 +
            (C172 * C3451 + C84246 * C3551) * C84592 +
            (C172 * C3445 + C84246 * C3545) * C38942 +
            (C172 * C3452 + C84246 * C3553) * C84602 +
            (C172 * C3446 + C84246 * C3547) * C38940) *
               C84344 +
           ((C172 * C725 + C84246 * C787) * C84527 +
            (C172 * C720 + C84246 * C782) * C38946 +
            (C172 * C726 + C84246 * C788) * C84576 +
            (C172 * C721 + C84246 * C783) * C38944 +
            (C172 * C727 + C84246 * C789) * C84592 +
            (C172 * C722 + C84246 * C784) * C38942 +
            (C172 * C728 + C84246 * C790) * C84602 +
            (C172 * C723 + C84246 * C785) * C38940) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C40960 +
            (C172 * C108 + C84246 * C179) * C40953 + C202 * C40962 +
            C203 * C84198) *
               C84607 +
           (C5975 * C40960 + C5976 * C40953 + C4332 * C40962 + C4333 * C84198) *
               C84601 +
           (C5977 * C40960 + C5978 * C40953 + C4336 * C40962 + C4337 * C84198) *
               C84589 +
           (C31806 * C40960 + C31807 * C40953 + C35142 * C40962 +
            C35143 * C84198) *
               C84543) *
              C84603 * C716 -
          (((C172 * C34136 + C84246 * C34251) * C84198 +
            (C172 * C34135 + C84246 * C34250) * C40962 +
            (C172 * C18817 + C84246 * C18910) * C40953 +
            (C172 * C18815 + C84246 * C18908) * C40960) *
               C84543 +
           ((C172 * C5117 + C84246 * C5203) * C84198 +
            (C172 * C5114 + C84246 * C5200) * C40962 +
            (C172 * C5118 + C84246 * C5204) * C40953 +
            (C172 * C5115 + C84246 * C5201) * C40960) *
               C84589 +
           ((C172 * C3451 + C84246 * C3551) * C84198 +
            (C172 * C3445 + C84246 * C3545) * C40962 +
            (C172 * C3452 + C84246 * C3553) * C40953 +
            (C172 * C3446 + C84246 * C3547) * C40960) *
               C84601 +
           ((C172 * C727 + C84246 * C789) * C84198 +
            (C172 * C722 + C84246 * C784) * C40962 +
            (C172 * C728 + C84246 * C790) * C40953 +
            (C172 * C723 + C84246 * C785) * C40960) *
               C84607) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C40960 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C40953 +
            (C53905 + C53906) * C40962 + (C53907 + C53908) * C84198) *
               C84596 +
           ((C56957 + C56958) * C40960 + (C56959 + C56960) * C40953 +
            (C55989 + C55990) * C40962 + (C55991 + C55992) * C84198) *
               C84581 +
           ((C56961 + C56962) * C40960 + (C56963 + C56964) * C40953 +
            (C55993 + C55994) * C40962 + (C55995 + C55996) * C84198) *
               C84558) *
              C84603 * C716 -
          (((C53879 * C21057 + C84344 * C21202 + C53878 * C2601 +
             C53740 * C2797) *
                C84198 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C40962 +
            (C53879 * C16809 + C84344 * C16908 + C53878 * C2602 +
             C53740 * C2798) *
                C40953 +
            (C53879 * C16807 + C84344 * C16906 + C53878 * C2599 +
             C53740 * C2795) *
                C40960) *
               C84558 +
           ((C55996 + C55995) * C84198 + (C55994 + C55993) * C40962 +
            (C56964 + C56963) * C40953 + (C56962 + C56961) * C40960) *
               C84581 +
           ((C55992 + C55991) * C84198 + (C55990 + C55989) * C40962 +
            (C56960 + C56959) * C40953 + (C56958 + C56957) * C40960) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C38940 +
           (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
               C84602 +
           (C53905 + C53906) * C38942 + (C53907 + C53908) * C84592 +
           (C53909 + C53910) * C38944 + (C53911 + C53912) * C84576 +
           (C53913 + C53914) * C38946 + (C53915 + C53916) * C84527) *
              C84246 * C84603 * C716 -
          ((C53879 * C8103 + C84344 * C8248 + C53878 * C725 + C53740 * C839) *
               C84527 +
           (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
               C38946 +
           (C53879 * C3450 + C84344 * C3637 + C53878 * C726 + C53740 * C840) *
               C84576 +
           (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
               C38944 +
           (C53879 * C3451 + C84344 * C3638 + C53878 * C727 + C53740 * C841) *
               C84592 +
           (C53879 * C3445 + C84344 * C3632 + C53878 * C722 + C53740 * C836) *
               C38942 +
           (C53879 * C3452 + C84344 * C3639 + C53878 * C728 + C53740 * C842) *
               C84602 +
           (C53879 * C3446 + C84344 * C3633 + C53878 * C723 + C53740 * C837) *
               C38940) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
            C58687 * C4212 + C84589 * C4416 + C58688 * C5838 + C84543 * C6058) *
               C40960 +
           (C58685 * C108 + C84607 * C258 + C58686 * C1188 + C84601 * C1302 +
            C58687 * C4216 + C84589 * C4420 + C58688 * C5841 + C84543 * C6061) *
               C40953 +
           (C58706 + C58707 + C58708 + C58709) * C40962 +
           (C58710 + C58711 + C58712 + C58713) * C84198) *
              C84246 * C84603 * C716 -
          ((C58688 * C34136 + C84543 * C34363 + C58687 * C5117 +
            C84589 * C5283 + C58686 * C3451 + C84601 * C3638 + C58685 * C727 +
            C84607 * C841) *
               C84198 +
           (C58688 * C34135 + C84543 * C34362 + C58687 * C5114 +
            C84589 * C5280 + C58686 * C3445 + C84601 * C3632 + C58685 * C722 +
            C84607 * C836) *
               C40962 +
           (C58688 * C18817 + C84543 * C19024 + C58687 * C5118 +
            C84589 * C5284 + C58686 * C3452 + C84601 * C3639 + C58685 * C728 +
            C84607 * C842) *
               C40953 +
           (C58688 * C18815 + C84543 * C19022 + C58687 * C5115 +
            C84589 * C5281 + C58686 * C3446 + C84601 * C3633 + C58685 * C723 +
            C84607 * C837) *
               C40960) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C1785 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84596 +
            (C41928 + C41929) * C1786 + (C41930 + C41931) * C84581 +
            (C41932 + C41933) * C1787 + (C41934 + C41935) * C84558) *
               C53740 +
           ((C45308 + C45309) * C1785 + (C45310 + C45311) * C84596 +
            (C44334 + C44335) * C1786 + (C44336 + C44337) * C84581 +
            (C52239 + C52240) * C1787 + (C52241 + C52242) * C84558) *
               C84344) *
              C84603 * C716 -
          (((C40962 * C21133 + C84198 * C21269 + C40960 * C16860 +
             C40953 * C16952) *
                C84558 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C1787 +
            (C52242 + C52241) * C84581 + (C52240 + C52239) * C1786 +
            (C44337 + C44336) * C84596 + (C44335 + C44334) * C1785) *
               C84344 +
           ((C41939 + C41938) * C84558 + (C41937 + C41936) * C1787 +
            (C41935 + C41934) * C84581 + (C41933 + C41932) * C1786 +
            (C41931 + C41930) * C84596 + (C41929 + C41928) * C1785) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C172 +
            (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
             C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
                C84246) *
               C53740 +
           ((C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
             C38944 * C1181 + C84576 * C1186 + C38946 * C1180 +
             C84527 * C1185) *
                C172 +
            (C38940 * C1245 + C84602 * C1349 + C38942 * C1244 + C84592 * C1348 +
             C38944 * C1243 + C84576 * C1347 + C38946 * C1242 +
             C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C716 -
          (((C38946 * C8179 + C84527 * C8315 + C38944 * C3543 + C84576 * C3717 +
             C38942 * C3545 + C84592 * C3718 + C38940 * C3547 +
             C84602 * C3719) *
                C84246 +
            (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
             C38942 * C3445 + C84592 * C3451 + C38940 * C3446 +
             C84602 * C3452) *
                C172) *
               C84344 +
           ((C39927 + C39926 + C39925 + C39924) * C84246 +
            (C39923 + C39922 + C39921 + C39920) * C172) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C172 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84246) *
               C84607 +
           ((C45308 + C45309) * C172 + (C45310 + C45311) * C84246) * C84601 +
           ((C45312 + C45313) * C172 + (C45314 + C45315) * C84246) * C84589 +
           ((C40960 * C5838 + C40953 * C5841 + C40962 * C5837 +
             C84198 * C5840) *
                C172 +
            (C40960 * C5954 + C40953 * C6138 + C40962 * C5953 +
             C84198 * C6137) *
                C84246) *
               C84543) *
              C84603 * C716 -
          (((C40962 * C34250 + C84198 * C34462 + C40960 * C18908 +
             C40953 * C19100) *
                C84246 +
            (C40962 * C34135 + C84198 * C34136 + C40960 * C18815 +
             C40953 * C18817) *
                C172) *
               C84543 +
           ((C44341 + C44340) * C84246 + (C44339 + C44338) * C172) * C84589 +
           ((C44337 + C44336) * C84246 + (C44335 + C44334) * C172) * C84601 +
           ((C41931 + C41930) * C84246 + (C41929 + C41928) * C172) * C84607) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
             C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
             C84558 * C2093) *
                C40953 +
            (C2134 + C2135 + C2136) * C84198) *
               C53740 +
           ((C30535 + C30536 + C30537) * C40953 +
            (C56205 + C56206 + C56207) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C2092 * C21056 + C57161 + C57161 + C84558 * C21336 +
             C2091 * C3442 + C57162 + C57162 + C84581 * C3796 + C2090 * C3445 +
             C57163 + C57163 + C84596 * C3797) *
                C84198 +
            (C2092 * C16807 + C29728 + C29728 + C84558 * C16996 +
             C2091 * C3443 + C29729 + C29729 + C84581 * C3798 + C2090 * C3446 +
             C29730 + C29730 + C84596 * C3799) *
                C40953) *
               C84344 +
           ((C2092 * C2598 + C3017 + C3017 + C84558 * C3011 + C2091 * C1682 +
             C3018 + C3018 + C84581 * C2094 + C2090 * C722 + C3019 + C3019 +
             C84596 * C935) *
                C84198 +
            (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
             C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
             C84596 * C936) *
                C40953) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84602 +
            C408 * C84592 + C409 * C84576 + C410 * C84527) *
               C53740 +
           (C6268 * C84602 + C4637 * C84592 + C4638 * C84576 + C9045 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C378 * C8102 + C9715 + C9715 + C84246 * C8382) * C84527 +
            (C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C84576 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84592 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84602) *
               C84344 +
           ((C378 * C720 + C939 + C939 + C84246 * C933) * C84527 +
            (C378 * C721 + C940 + C940 + C84246 * C934) * C84576 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C84592 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C84602) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C40953 +
            C408 * C84198) *
               C84607 +
           (C6268 * C40953 + C4637 * C84198) * C84601 +
           (C6269 * C40953 + C4639 * C84198) * C84589 +
           (C31975 * C40953 + C35374 * C84198) * C84543) *
              C84603 * C716 -
          (((C378 * C34135 + C36028 + C36028 + C84246 * C34573) * C84198 +
            (C378 * C18815 + C31516 + C31516 + C84246 * C19200) * C40953) *
               C84543 +
           ((C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C84198 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C40953) *
               C84589 +
           ((C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84198 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C40953) *
               C84601 +
           ((C378 * C722 + C941 + C941 + C84246 * C935) * C84198 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C40953) *
               C84607) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C1785 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84596 +
            (C56957 + C56958) * C1786 + (C57270 + C57271) * C84581 +
            (C56961 + C56962) * C1787 + (C57272 + C57273) * C84558) *
               C40953 +
           ((C53905 + C53906) * C1785 + (C54127 + C54128) * C84596 +
            (C55989 + C55990) * C1786 + (C56314 + C56315) * C84581 +
            (C55993 + C55994) * C1787 + (C56316 + C56317) * C84558) *
               C84198) *
              C84603 * C716 -
          (((C53879 * C21133 + C84344 * C21411 + C53878 * C2714 +
             C53740 * C3097) *
                C84558 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C1787 +
            (C56317 + C56316) * C84581 + (C55994 + C55993) * C1786 +
            (C56315 + C56314) * C84596 + (C55990 + C55989) * C1785) *
               C84198 +
           ((C53879 * C16860 + C84344 * C17045 + C53878 * C2715 +
             C53740 * C3098) *
                C84558 +
            (C53879 * C16807 + C84344 * C16906 + C53878 * C2599 +
             C53740 * C2795) *
                C1787 +
            (C57273 + C57272) * C84581 + (C56962 + C56961) * C1786 +
            (C57271 + C57270) * C84596 + (C56958 + C56957) * C1785) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C172 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84246) *
               C84602 +
           ((C53905 + C53906) * C172 + (C54127 + C54128) * C84246) * C84592 +
           ((C53909 + C53910) * C172 + (C54129 + C54130) * C84246) * C84576 +
           ((C53913 + C53914) * C172 + (C54131 + C54132) * C84246) * C84527) *
              C84603 * C716 -
          (((C53879 * C8179 + C84344 * C8457 + C53878 * C782 + C53740 * C985) *
                C84246 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C172) *
               C84527 +
           ((C53879 * C3543 + C84344 * C3884 + C53878 * C783 + C53740 * C986) *
                C84246 +
            (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
                C172) *
               C84576 +
           ((C53879 * C3545 + C84344 * C3886 + C53878 * C784 + C53740 * C987) *
                C84246 +
            (C53879 * C3445 + C84344 * C3632 + C53878 * C722 + C53740 * C836) *
                C172) *
               C84592 +
           ((C53879 * C3547 + C84344 * C3888 + C53878 * C785 + C53740 * C988) *
                C84246 +
            (C53879 * C3446 + C84344 * C3633 + C53878 * C723 + C53740 * C837) *
                C172) *
               C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
             C58687 * C4212 + C84589 * C4416 + C58688 * C5838 +
             C84543 * C6058) *
                C172 +
            (C58685 * C173 + C84607 * C453 + C58686 * C1245 + C84601 * C1448 +
             C58687 * C4307 + C84589 * C4714 + C58688 * C5954 +
             C84543 * C6347) *
                C84246) *
               C40953 +
           ((C58706 + C58707 + C58708 + C58709) * C172 +
            (C58920 + C58921 + C58922 + C58923) * C84246) *
               C84198) *
              C84603 * C716 -
          (((C58688 * C34250 + C84543 * C34686 + C58687 * C5200 +
             C84589 * C5520 + C58686 * C3545 + C84601 * C3886 + C58685 * C784 +
             C84607 * C987) *
                C84246 +
            (C58688 * C34135 + C84543 * C34362 + C58687 * C5114 +
             C84589 * C5280 + C58686 * C3445 + C84601 * C3632 + C58685 * C722 +
             C84607 * C836) *
                C172) *
               C84198 +
           ((C58688 * C18908 + C84543 * C19309 + C58687 * C5201 +
             C84589 * C5521 + C58686 * C3547 + C84601 * C3888 + C58685 * C785 +
             C84607 * C988) *
                C84246 +
            (C58688 * C18815 + C84543 * C19022 + C58687 * C5115 +
             C84589 * C5281 + C58686 * C3446 + C84601 * C3633 + C58685 * C723 +
             C84607 * C837) *
                C172) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C53878 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C53740 +
            (C45308 + C45309) * C53879 + (C45642 + C45643) * C84344) *
               C84596 +
           ((C41928 + C41929) * C53878 + (C42158 + C42159) * C53740 +
            (C44334 + C44335) * C53879 + (C44652 + C44653) * C84344) *
               C84581 +
           ((C41932 + C41933) * C53878 + (C42160 + C42161) * C53740 +
            (C52239 + C52240) * C53879 + (C52547 + C52548) * C84344) *
               C84558) *
              C84603 * C716 -
          (((C40962 * C21201 + C84198 * C21478 + C40960 * C16906 +
             C40953 * C17089) *
                C84344 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C53879 +
            (C42163 + C42162) * C53740 + (C41937 + C41936) * C53878) *
               C84558 +
           ((C52548 + C52547) * C84344 + (C52240 + C52239) * C53879 +
            (C42161 + C42160) * C53740 + (C41933 + C41932) * C53878) *
               C84581 +
           ((C44653 + C44652) * C84344 + (C44335 + C44334) * C53879 +
            (C42159 + C42158) * C53740 + (C41929 + C41928) * C53878) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C53878 +
           (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
            C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
               C53740 +
           (C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
            C38944 * C1181 + C84576 * C1186 + C38946 * C1180 + C84527 * C1185) *
               C53879 +
           (C38940 * C1297 + C84602 * C1495 + C38942 * C1296 + C84592 * C1494 +
            C38944 * C1295 + C84576 * C1493 + C38946 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C38946 * C8247 + C84527 * C8524 + C38944 * C3631 + C84576 * C3966 +
            C38942 * C3632 + C84592 * C3967 + C38940 * C3633 + C84602 * C3968) *
               C84344 +
           (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
            C38942 * C3445 + C84592 * C3451 + C38940 * C3446 + C84602 * C3452) *
               C53879 +
           (C40145 + C40144 + C40143 + C40142) * C53740 +
           (C39923 + C39922 + C39921 + C39920) * C53878) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C58685 +
           (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
               C84607 +
           (C45308 + C45309) * C58686 + (C45642 + C45643) * C84601 +
           (C45312 + C45313) * C58687 + (C45644 + C45645) * C84589 +
           (C40960 * C5838 + C40953 * C5841 + C40962 * C5837 + C84198 * C5840) *
               C58688 +
           (C40960 * C6058 + C40953 * C6424 + C40962 * C6057 + C84198 * C6423) *
               C84543) *
              C84246 * C84603 * C716 -
          ((C40962 * C34362 + C84198 * C34785 + C40960 * C19022 +
            C40953 * C19385) *
               C84543 +
           (C40962 * C34135 + C84198 * C34136 + C40960 * C18815 +
            C40953 * C18817) *
               C58688 +
           (C44655 + C44654) * C84589 + (C44339 + C44338) * C58687 +
           (C44653 + C44652) * C84601 + (C44335 + C44334) * C58686 +
           (C42159 + C42158) * C84607 + (C41929 + C41928) * C58685) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C1785 * C102 + C84596 * C173 + C1786 * C723 +
                       C84581 * C785 + C1787 * C1681 + C84558 * C1788) *
                          C53878 +
                      (C1785 * C252 + C84596 * C569 + C1786 * C837 +
                       C84581 * C1082 + C1787 * C1906 + C84558 * C2393) *
                          C53740 +
                      (C30262 + C30263 + C30264) * C53879 +
                      (C30775 + C30776 + C30777) * C84344) *
                         C40953 +
                     ((C1821 + C1822 + C1823) * C53878 +
                      (C2410 + C2411 + C2412) * C53740 +
                      (C55869 + C55870 + C55871) * C53879 +
                      (C56520 + C56521 + C56522) * C84344) *
                         C84198) *
                        C84603 * C716 -
                    (((C1787 * C21201 + C84558 * C21545 + C1786 * C3629 +
                       C84581 * C4045 + C1785 * C3632 + C84596 * C4046) *
                          C84344 +
                      (C1787 * C21056 + C84558 * C21133 + C1786 * C3442 +
                       C84581 * C3544 + C1785 * C3445 + C84596 * C3545) *
                          C53879 +
                      (C1787 * C2794 + C84558 * C3275 + C1786 * C1907 +
                       C84581 * C2394 + C1785 * C836 + C84596 * C1081) *
                          C53740 +
                      (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 +
                       C84581 * C1789 + C1785 * C722 + C84596 * C784) *
                          C53878) *
                         C84198 +
                     ((C1787 * C16906 + C84558 * C17133 + C1786 * C3630 +
                       C84581 * C4047 + C1785 * C3633 + C84596 * C4048) *
                          C84344 +
                      (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 +
                       C84581 * C3546 + C1785 * C3446 + C84596 * C3547) *
                          C53879 +
                      (C1787 * C2795 + C84558 * C3276 + C1786 * C1906 +
                       C84581 * C2393 + C1785 * C837 + C84596 * C1082) *
                          C53740 +
                      (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 +
                       C84581 * C1788 + C1785 * C723 + C84596 * C785) *
                          C53878) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C53878 +
                      (C172 * C252 + C84246 * C569) * C53740 + C5975 * C53879 +
                      C6525 * C84344) *
                         C84602 +
                     (C54265 + C54266 + C54267 + C54268) * C84592 +
                     (C54269 + C54270 + C54271 + C54272) * C84576 +
                     (C54273 + C54274 + C54275 + C54276) * C84527) *
                        C84603 * C716 -
                    (((C172 * C8247 + C84246 * C8591) * C84344 +
                      (C172 * C8102 + C84246 * C8179) * C53879 +
                      (C172 * C834 + C84246 * C1079) * C53740 +
                      (C172 * C720 + C84246 * C782) * C53878) *
                         C84527 +
                     ((C172 * C3631 + C84246 * C4044) * C84344 +
                      (C172 * C3444 + C84246 * C3543) * C53879 +
                      (C172 * C835 + C84246 * C1080) * C53740 +
                      (C172 * C721 + C84246 * C783) * C53878) *
                         C84576 +
                     ((C172 * C3632 + C84246 * C4046) * C84344 +
                      (C172 * C3445 + C84246 * C3545) * C53879 +
                      (C172 * C836 + C84246 * C1081) * C53740 +
                      (C172 * C722 + C84246 * C784) * C53878) *
                         C84592 +
                     ((C172 * C3633 + C84246 * C4048) * C84344 +
                      (C172 * C3446 + C84246 * C3547) * C53879 +
                      (C172 * C837 + C84246 * C1082) * C53740 +
                      (C172 * C723 + C84246 * C785) * C53878) *
                         C84602) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C58685 +
                      (C172 * C252 + C84246 * C569) * C84607 + C5975 * C58686 +
                      C6525 * C84601 + C5977 * C58687 + C6526 * C84589 +
                      C31806 * C58688 + C32118 * C84543) *
                         C40953 +
                     (C59056 + C59057 + C59058 + C59059 + C59060 + C59061 +
                      C59062 + C59063) *
                         C84198) *
                        C84603 * C716 -
                    (((C172 * C34362 + C84246 * C34890) * C84543 +
                      (C172 * C34135 + C84246 * C34250) * C58688 +
                      (C172 * C5280 + C84246 * C5674) * C84589 +
                      (C172 * C5114 + C84246 * C5200) * C58687 +
                      (C172 * C3632 + C84246 * C4046) * C84601 +
                      (C172 * C3445 + C84246 * C3545) * C58686 +
                      (C172 * C836 + C84246 * C1081) * C84607 +
                      (C172 * C722 + C84246 * C784) * C58685) *
                         C84198 +
                     ((C172 * C19022 + C84246 * C19467) * C84543 +
                      (C172 * C18815 + C84246 * C18908) * C58688 +
                      (C172 * C5281 + C84246 * C5675) * C84589 +
                      (C172 * C5115 + C84246 * C5201) * C58687 +
                      (C172 * C3633 + C84246 * C4048) * C84601 +
                      (C172 * C3446 + C84246 * C3547) * C58686 +
                      (C172 * C837 + C84246 * C1082) * C84607 +
                      (C172 * C723 + C84246 * C785) * C58685) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezz[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84596 +
                      (C57588 + C57589) * C84581 + (C57590 + C57591) * C84558) *
                         C40953 +
                     ((C54379 + C54380) * C84596 + (C56643 + C56644) * C84581 +
                      (C56645 + C56646) * C84558) *
                         C84198) *
                        C84603 * C716 -
                    (((C54343 * C21056 + C57576 + C57576 + C84344 * C21612 +
                       C54342 * C2598 + C57577 + C57577 + C53740 * C3352) *
                          C84558 +
                      (C56646 + C56645) * C84581 + (C56644 + C56643) * C84596) *
                         C84198 +
                     ((C54343 * C16807 + C57578 + C57578 + C84344 * C17177 +
                       C54342 * C2599 + C57579 + C57579 + C53740 * C3353) *
                          C84558 +
                      (C57591 + C57590) * C84581 + (C57589 + C57588) * C84596) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                      C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                         C84246 * C84602 +
                     (C54379 + C54380) * C84246 * C84592 +
                     (C54381 + C54382) * C84246 * C84576 +
                     (C54383 + C54384) * C84246 * C84527) *
                        C84603 * C716 -
                    ((C54343 * C8102 + C54979 + C54979 + C84344 * C8658 +
                      C54342 * C720 + C54980 + C54980 + C53740 * C1126) *
                         C84246 * C84527 +
                     (C54343 * C3444 + C54981 + C54981 + C84344 * C4124 +
                      C54342 * C721 + C54982 + C54982 + C53740 * C1127) *
                         C84246 * C84576 +
                     (C54343 * C3445 + C54983 + C54983 + C84344 * C4126 +
                      C54342 * C722 + C54984 + C54984 + C53740 * C1128) *
                         C84246 * C84592 +
                     (C54343 * C3446 + C54985 + C54985 + C84344 * C4128 +
                      C54342 * C723 + C54986 + C54986 + C53740 * C1129) *
                         C84246 * C84602) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C59129 * C102 + C59134 + C59134 + C84607 * C638 +
                      C59130 * C1183 + C59135 + C59135 + C84601 * C1589 +
                      C59131 * C4212 + C59136 + C59136 + C84589 * C4993 +
                      C59132 * C5838 + C59137 + C59137 + C84543 * C6602) *
                         C84246 * C40953 +
                     (C59162 + C59163 + C59164 + C59165) * C84246 * C84198) *
                        C84603 * C716 -
                    ((C59132 * C34135 + C59760 + C59760 + C84543 * C34995 +
                      C59131 * C5114 + C59761 + C59761 + C84589 * C5751 +
                      C59130 * C3445 + C59762 + C59762 + C84601 * C4126 +
                      C59129 * C722 + C59763 + C59763 + C84607 * C1128) *
                         C84246 * C84198 +
                     (C59132 * C18815 + C59764 + C59764 + C84543 * C19561 +
                      C59131 * C5115 + C59765 + C59765 + C84589 * C5752 +
                      C59130 * C3446 + C59766 + C59766 + C84601 * C4128 +
                      C59129 * C723 + C59767 + C59767 + C84607 * C1129) *
                         C84246 * C40953) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C53740 +
            (C44970 + C44971) * C84344) *
               C84596 +
           ((C41688 + C41689) * C53740 + (C44020 + C44021) * C84344) * C84581 +
           ((C41690 + C41691) * C53740 + (C51935 + C51936) * C84344) * C84558) *
              C1177 -
          (((C40961 * C17255 + C44010 + C44010 + C84198 * C17259 +
             C40959 * C17254 + C44011 + C44011 + C40953 * C17258) *
                C84344 +
            (C51936 + C51935) * C53740) *
               C84558 +
           ((C44023 + C44022) * C84344 + (C44021 + C44020) * C53740) * C84581 +
           ((C44973 + C44972) * C84344 + (C44971 + C44970) * C53740) * C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C53740 +
           (C55073 + C55074 + C55075 + C55076) * C84344) *
              C84246 * C1177 -
          ((C38945 * C4215 + C55061 + C55061 + C84527 * C4223 + C38943 * C4214 +
            C55062 + C55062 + C84576 * C4222 + C38941 * C4213 + C55063 +
            C55063 + C84592 * C4221 + C38939 * C4212 + C55064 + C55064 +
            C84602 * C4220) *
               C84344 +
           (C55076 + C55075 + C55074 + C55073) * C53740) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
            C40965 + C40965 + C84198 * C115) *
               C84607 +
           (C44970 + C44971) * C84601 + (C44972 + C44973) * C84589 +
           (C59844 + C59845) * C84543) *
              C84246 * C1177 -
          ((C40961 * C30908 + C59838 + C59838 + C84198 * C30912 +
            C40959 * C30907 + C59839 + C59839 + C40953 * C30911) *
               C84543 +
           (C59845 + C59844) * C84589 + (C44973 + C44972) * C84601 +
           (C44971 + C44970) * C84607) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[53] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C1785 * C102 + C84596 * C173 + C1786 * C723 +
                       C84581 * C785 + C1787 * C1681 + C84558 * C1788) *
                          C40960 +
                      (C1785 * C108 + C84596 * C179 + C1786 * C728 +
                       C84581 * C790 + C1787 * C1685 + C84558 * C1792) *
                          C40953 +
                      (C1821 + C1822 + C1823) * C40962 +
                      (C1824 + C1825 + C1826) * C84198) *
                         C53740 +
                     ((C30262 + C30263 + C30264) * C40960 +
                      (C30265 + C30266 + C30267) * C40953 +
                      (C55869 + C55870 + C55871) * C40962 +
                      (C55872 + C55873 + C55874) * C84198) *
                         C84344) *
                        C1177 -
                    (((C1787 * C17257 + C84558 * C17346 + C1786 * C5117 +
                       C84581 * C5203 + C1785 * C4217 + C84596 * C4312) *
                          C84198 +
                      (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 +
                       C84581 * C5200 + C1785 * C4213 + C84596 * C4308) *
                          C40962 +
                      (C30273 + C30272 + C30271) * C40953 +
                      (C30270 + C30269 + C30268) * C40960) *
                         C84344 +
                     ((C55874 + C55873 + C55872) * C84198 +
                      (C55871 + C55870 + C55869) * C40962 +
                      (C30267 + C30266 + C30265) * C40953 +
                      (C30264 + C30263 + C30262) * C40960) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C38940 +
                      (C172 * C108 + C84246 * C179) * C84602 + C202 * C38942 +
                      C203 * C84592 + C204 * C38944 + C205 * C84576 +
                      C206 * C38946 + C207 * C84527) *
                         C53740 +
                     (C55143 + C55144 + C55145 + C55146 + C55147 + C55148 +
                      C55149 + C55150) *
                         C84344) *
                        C1177 -
                    (((C172 * C4219 + C84246 * C4314) * C84527 +
                      (C172 * C4215 + C84246 * C4310) * C38946 +
                      C4339 * C84576 + C4338 * C38944 + C4337 * C84592 +
                      C4336 * C38942 + C5978 * C84602 + C5977 * C38940) *
                         C84344 +
                     (C55150 + C55149 + C55148 + C55147 + C55146 + C55145 +
                      C55144 + C55143) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C40960 +
                      (C172 * C108 + C84246 * C179) * C40953 + C202 * C40962 +
                      C203 * C84198) *
                         C84607 +
                     (C59912 + C59913 + C59914 + C59915) * C84601 +
                     (C59916 + C59917 + C59918 + C59919) * C84589 +
                     (C59920 + C59921 + C59922 + C59923) * C84543) *
                        C1177 -
                    (((C172 * C30910 + C84246 * C30961) * C84198 +
                      (C172 * C30908 + C84246 * C30959) * C40962 +
                      C31809 * C40953 + C31808 * C40960) *
                         C84543 +
                     (C59923 + C59922 + C59921 + C59920) * C84589 +
                     (C59919 + C59918 + C59917 + C59916) * C84601 +
                     (C59915 + C59914 + C59913 + C59912) * C84607) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C40960 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C40953 +
            (C53905 + C53906) * C40962 + (C53907 + C53908) * C84198) *
               C84596 +
           ((C56957 + C56958) * C40960 + (C56959 + C56960) * C40953 +
            (C55989 + C55990) * C40962 + (C55991 + C55992) * C84198) *
               C84581 +
           ((C56961 + C56962) * C40960 + (C56963 + C56964) * C40953 +
            (C55993 + C55994) * C40962 + (C55995 + C55996) * C84198) *
               C84558) *
              C1177 -
          (((C53879 * C17257 + C84344 * C17424 + C53878 * C3448 +
             C53740 * C3635) *
                C84198 +
            (C53879 * C17255 + C84344 * C17422 + C53878 * C3442 +
             C53740 * C3629) *
                C40962 +
            (C53879 * C17256 + C84344 * C17423 + C53878 * C3449 +
             C53740 * C3636) *
                C40953 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C40960) *
               C84558 +
           ((C53879 * C5117 + C84344 * C5283 + C53878 * C3451 +
             C53740 * C3638) *
                C84198 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C40962 +
            (C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C40953 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C40960) *
               C84581 +
           ((C53879 * C4217 + C84344 * C4421 + C53878 * C1187 +
             C53740 * C1301) *
                C84198 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C40962 +
            (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C40953 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C40960) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C38940 +
           (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
               C84602 +
           (C53905 + C53906) * C38942 + (C53907 + C53908) * C84592 +
           (C53909 + C53910) * C38944 + (C53911 + C53912) * C84576 +
           (C53913 + C53914) * C38946 + (C53915 + C53916) * C84527) *
              C84246 * C1177 -
          ((C53879 * C4219 + C84344 * C4423 + C53878 * C1185 + C53740 * C1299) *
               C84527 +
           (C53879 * C4215 + C84344 * C4419 + C53878 * C1180 + C53740 * C1294) *
               C38946 +
           (C53879 * C4218 + C84344 * C4422 + C53878 * C1186 + C53740 * C1300) *
               C84576 +
           (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 + C53740 * C1295) *
               C38944 +
           (C53879 * C4217 + C84344 * C4421 + C53878 * C1187 + C53740 * C1301) *
               C84592 +
           (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 + C53740 * C1296) *
               C38942 +
           (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 + C53740 * C1302) *
               C84602 +
           (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 + C53740 * C1297) *
               C38940) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
            C58687 * C4212 + C84589 * C4416 + C58688 * C5838 + C84543 * C6058) *
               C40960 +
           (C58685 * C108 + C84607 * C258 + C58686 * C1188 + C84601 * C1302 +
            C58687 * C4216 + C84589 * C4420 + C58688 * C5841 + C84543 * C6061) *
               C40953 +
           (C58706 + C58707 + C58708 + C58709) * C40962 +
           (C58710 + C58711 + C58712 + C58713) * C84198) *
              C84246 * C1177 -
          ((C58688 * C30910 + C84543 * C31012 + C58687 * C5840 +
            C84589 * C6060 + C58686 * C4217 + C84601 * C4421 + C58685 * C1187 +
            C84607 * C1301) *
               C84198 +
           (C58688 * C30908 + C84543 * C31010 + C58687 * C5837 +
            C84589 * C6057 + C58686 * C4213 + C84601 * C4417 + C58685 * C1182 +
            C84607 * C1296) *
               C40962 +
           (C58688 * C30909 + C84543 * C31011 + C58687 * C5841 +
            C84589 * C6061 + C58686 * C4216 + C84601 * C4420 + C58685 * C1188 +
            C84607 * C1302) *
               C40953 +
           (C58688 * C30907 + C84543 * C31009 + C58687 * C5838 +
            C84589 * C6058 + C58686 * C4212 + C84601 * C4416 + C58685 * C1183 +
            C84607 * C1297) *
               C40960) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C1785 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84596 +
            (C41928 + C41929) * C1786 + (C41930 + C41931) * C84581 +
            (C41932 + C41933) * C1787 + (C41934 + C41935) * C84558) *
               C53740 +
           ((C45308 + C45309) * C1785 + (C45310 + C45311) * C84596 +
            (C44334 + C44335) * C1786 + (C44336 + C44337) * C84581 +
            (C52239 + C52240) * C1787 + (C52241 + C52242) * C84558) *
               C84344) *
              C1177 -
          (((C40962 * C17344 + C84198 * C17500 + C40960 * C17343 +
             C40953 * C17499) *
                C84558 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C1787 +
            (C44341 + C44340) * C84581 + (C44339 + C44338) * C1786 +
            (C45315 + C45314) * C84596 + (C45313 + C45312) * C1785) *
               C84344 +
           ((C52242 + C52241) * C84558 + (C52240 + C52239) * C1787 +
            (C44337 + C44336) * C84581 + (C44335 + C44334) * C1786 +
            (C45311 + C45310) * C84596 + (C45309 + C45308) * C1785) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C172 +
            (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
             C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
                C84246) *
               C53740 +
           ((C55299 + C55300 + C55301 + C55302) * C172 +
            (C55303 + C55304 + C55305 + C55306) * C84246) *
               C84344) *
              C1177 -
          (((C38946 * C4310 + C84527 * C4537 + C38944 * C4309 + C84576 * C4536 +
             C38942 * C4308 + C84592 * C4535 + C38940 * C4307 +
             C84602 * C4534) *
                C84246 +
            (C38946 * C4215 + C84527 * C4219 + C38944 * C4214 + C84576 * C4218 +
             C38942 * C4213 + C84592 * C4217 + C38940 * C4212 +
             C84602 * C4216) *
                C172) *
               C84344 +
           ((C55306 + C55305 + C55304 + C55303) * C84246 +
            (C55302 + C55301 + C55300 + C55299) * C172) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C172 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84246) *
               C84607 +
           ((C45308 + C45309) * C172 + (C45310 + C45311) * C84246) * C84601 +
           ((C45312 + C45313) * C172 + (C45314 + C45315) * C84246) * C84589 +
           ((C60064 + C60065) * C172 + (C60066 + C60067) * C84246) * C84543) *
              C1177 -
          (((C40962 * C30959 + C84198 * C31056 + C40960 * C30958 +
             C40953 * C31055) *
                C84246 +
            (C40962 * C30908 + C84198 * C30910 + C40960 * C30907 +
             C40953 * C30909) *
                C172) *
               C84543 +
           ((C60067 + C60066) * C84246 + (C60065 + C60064) * C172) * C84589 +
           ((C45315 + C45314) * C84246 + (C45313 + C45312) * C172) * C84601 +
           ((C45311 + C45310) * C84246 + (C45309 + C45308) * C172) * C84607) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
             C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
             C84558 * C2093) *
                C40953 +
            (C2134 + C2135 + C2136) * C84198) *
               C53740 +
           ((C30535 + C30536 + C30537) * C40953 +
            (C56205 + C56206 + C56207) * C84198) *
               C84344) *
              C1177 -
          (((C2092 * C17255 + C29008 + C29008 + C84558 * C17576 +
             C2091 * C5114 + C29009 + C29009 + C84581 * C5437 + C2090 * C4213 +
             C29010 + C29010 + C84596 * C4613) *
                C84198 +
            (C30540 + C30539 + C30538) * C40953) *
               C84344 +
           ((C56207 + C56206 + C56205) * C84198 +
            (C30537 + C30536 + C30535) * C40953) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84602 +
            C408 * C84592 + C409 * C84576 + C410 * C84527) *
               C53740 +
           (C55373 + C55374 + C55375 + C55376) * C84344) *
              C1177 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84527 +
            C4640 * C84576 + C4639 * C84592 + C6269 * C84602) *
               C84344 +
           (C55376 + C55375 + C55374 + C55373) * C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C40953 +
            C408 * C84198) *
               C84607 +
           (C60134 + C60135) * C84601 + (C60136 + C60137) * C84589 +
           (C60138 + C60139) * C84543) *
              C1177 -
          (((C378 * C30908 + C31103 + C31103 + C84246 * C31100) * C84198 +
            C31976 * C40953) *
               C84543 +
           (C60139 + C60138) * C84589 + (C60137 + C60136) * C84601 +
           (C60135 + C60134) * C84607) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C1785 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84596 +
            (C56957 + C56958) * C1786 + (C57270 + C57271) * C84581 +
            (C56961 + C56962) * C1787 + (C57272 + C57273) * C84558) *
               C40953 +
           ((C53905 + C53906) * C1785 + (C54127 + C54128) * C84596 +
            (C55989 + C55990) * C1786 + (C56314 + C56315) * C84581 +
            (C55993 + C55994) * C1787 + (C56316 + C56317) * C84558) *
               C84198) *
              C1177 -
          (((C53879 * C17344 + C84344 * C17658 + C53878 * C3544 +
             C53740 * C3885) *
                C84558 +
            (C53879 * C17255 + C84344 * C17422 + C53878 * C3442 +
             C53740 * C3629) *
                C1787 +
            (C53879 * C5200 + C84344 * C5520 + C53878 * C3545 +
             C53740 * C3886) *
                C84581 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C1786 +
            (C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C84596 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C1785) *
               C84198 +
           ((C53879 * C17343 + C84344 * C17657 + C53878 * C3546 +
             C53740 * C3887) *
                C84558 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C1787 +
            (C53879 * C5201 + C84344 * C5521 + C53878 * C3547 +
             C53740 * C3888) *
                C84581 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C1786 +
            (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C84596 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C1785) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C172 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84246) *
               C84602 +
           ((C53905 + C53906) * C172 + (C54127 + C54128) * C84246) * C84592 +
           ((C53909 + C53910) * C172 + (C54129 + C54130) * C84246) * C84576 +
           ((C53913 + C53914) * C172 + (C54131 + C54132) * C84246) * C84527) *
              C1177 -
          (((C53879 * C4310 + C84344 * C4717 + C53878 * C1242 +
             C53740 * C1445) *
                C84246 +
            (C53879 * C4215 + C84344 * C4419 + C53878 * C1180 +
             C53740 * C1294) *
                C172) *
               C84527 +
           ((C53879 * C4309 + C84344 * C4716 + C53878 * C1243 +
             C53740 * C1446) *
                C84246 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C172) *
               C84576 +
           ((C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C84246 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C172) *
               C84592 +
           ((C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C84246 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C172) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C58685 * C102 + C84607 * C252 + C58686 * C1183 + C84601 * C1297 +
             C58687 * C4212 + C84589 * C4416 + C58688 * C5838 +
             C84543 * C6058) *
                C172 +
            (C58685 * C173 + C84607 * C453 + C58686 * C1245 + C84601 * C1448 +
             C58687 * C4307 + C84589 * C4714 + C58688 * C5954 +
             C84543 * C6347) *
                C84246) *
               C40953 +
           ((C58706 + C58707 + C58708 + C58709) * C172 +
            (C58920 + C58921 + C58922 + C58923) * C84246) *
               C84198) *
              C1177 -
          (((C58688 * C30959 + C84543 * C31146 + C58687 * C5953 +
             C84589 * C6346 + C58686 * C4308 + C84601 * C4715 + C58685 * C1244 +
             C84607 * C1447) *
                C84246 +
            (C58688 * C30908 + C84543 * C31010 + C58687 * C5837 +
             C84589 * C6057 + C58686 * C4213 + C84601 * C4417 + C58685 * C1182 +
             C84607 * C1296) *
                C172) *
               C84198 +
           ((C58688 * C30958 + C84543 * C31145 + C58687 * C5954 +
             C84589 * C6347 + C58686 * C4307 + C84601 * C4714 + C58685 * C1245 +
             C84607 * C1448) *
                C84246 +
            (C58688 * C30907 + C84543 * C31009 + C58687 * C5838 +
             C84589 * C6058 + C58686 * C4212 + C84601 * C4416 + C58685 * C1183 +
             C84607 * C1297) *
                C172) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C53878 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C53740 +
            (C45308 + C45309) * C53879 + (C45642 + C45643) * C84344) *
               C84596 +
           ((C41928 + C41929) * C53878 + (C42158 + C42159) * C53740 +
            (C44334 + C44335) * C53879 + (C44652 + C44653) * C84344) *
               C84581 +
           ((C41932 + C41933) * C53878 + (C42160 + C42161) * C53740 +
            (C52239 + C52240) * C53879 + (C52547 + C52548) * C84344) *
               C84558) *
              C1177 -
          (((C40962 * C17422 + C84198 * C17734 + C40960 * C17421 +
             C40953 * C17733) *
                C84344 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C53879 +
            (C52548 + C52547) * C53740 + (C52240 + C52239) * C53878) *
               C84558 +
           ((C44655 + C44654) * C84344 + (C44339 + C44338) * C53879 +
            (C44653 + C44652) * C53740 + (C44335 + C44334) * C53878) *
               C84581 +
           ((C45645 + C45644) * C84344 + (C45313 + C45312) * C53879 +
            (C45643 + C45642) * C53740 + (C45309 + C45308) * C53878) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C53878 +
           (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
            C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
               C53740 +
           (C55299 + C55300 + C55301 + C55302) * C53879 +
           (C55517 + C55518 + C55519 + C55520) * C84344) *
              C84246 * C1177 -
          ((C38946 * C4419 + C84527 * C4813 + C38944 * C4418 + C84576 * C4812 +
            C38942 * C4417 + C84592 * C4811 + C38940 * C4416 + C84602 * C4810) *
               C84344 +
           (C38946 * C4215 + C84527 * C4219 + C38944 * C4214 + C84576 * C4218 +
            C38942 * C4213 + C84592 * C4217 + C38940 * C4212 + C84602 * C4216) *
               C53879 +
           (C55520 + C55519 + C55518 + C55517) * C53740 +
           (C55302 + C55301 + C55300 + C55299) * C53878) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
               C58685 +
           (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
               C84607 +
           (C45308 + C45309) * C58686 + (C45642 + C45643) * C84601 +
           (C45312 + C45313) * C58687 + (C45644 + C45645) * C84589 +
           (C60064 + C60065) * C58688 + (C60276 + C60277) * C84543) *
              C84246 * C1177 -
          ((C40962 * C31010 + C84198 * C31190 + C40960 * C31009 +
            C40953 * C31189) *
               C84543 +
           (C40962 * C30908 + C84198 * C30910 + C40960 * C30907 +
            C40953 * C30909) *
               C58688 +
           (C60277 + C60276) * C84589 + (C60065 + C60064) * C58687 +
           (C45645 + C45644) * C84601 + (C45313 + C45312) * C58686 +
           (C45643 + C45642) * C84607 + (C45309 + C45308) * C58685) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C53878 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C53740 +
            (C30262 + C30263 + C30264) * C53879 +
            (C30775 + C30776 + C30777) * C84344) *
               C40953 +
           ((C1821 + C1822 + C1823) * C53878 +
            (C2410 + C2411 + C2412) * C53740 +
            (C55869 + C55870 + C55871) * C53879 +
            (C56520 + C56521 + C56522) * C84344) *
               C84198) *
              C1177 -
          (((C1787 * C17422 + C84558 * C17810 + C1786 * C5280 + C84581 * C5674 +
             C1785 * C4417 + C84596 * C4889) *
                C84344 +
            (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 + C84581 * C5200 +
             C1785 * C4213 + C84596 * C4308) *
                C53879 +
            (C56522 + C56521 + C56520) * C53740 +
            (C55871 + C55870 + C55869) * C53878) *
               C84198 +
           ((C30780 + C30779 + C30778) * C84344 +
            (C30270 + C30269 + C30268) * C53879 +
            (C30777 + C30776 + C30775) * C53740 +
            (C30264 + C30263 + C30262) * C53878) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C53878 +
            (C172 * C252 + C84246 * C569) * C53740 + C5975 * C53879 +
            C6525 * C84344) *
               C84602 +
           (C54265 + C54266 + C54267 + C54268) * C84592 +
           (C54269 + C54270 + C54271 + C54272) * C84576 +
           (C54273 + C54274 + C54275 + C54276) * C84527) *
              C1177 -
          (((C172 * C4419 + C84246 * C4891) * C84344 +
            (C172 * C4215 + C84246 * C4310) * C53879 + C9275 * C53740 +
            C8803 * C53878) *
               C84527 +
           (C4912 * C84344 + C4338 * C53879 + C4911 * C53740 + C4334 * C53878) *
               C84576 +
           (C4910 * C84344 + C4336 * C53879 + C4909 * C53740 + C4332 * C53878) *
               C84592 +
           (C6526 * C84344 + C5977 * C53879 + C6525 * C53740 + C5975 * C53878) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C58685 +
            (C172 * C252 + C84246 * C569) * C84607 + C5975 * C58686 +
            C6525 * C84601 + C5977 * C58687 + C6526 * C84589 + C31806 * C58688 +
            C32118 * C84543) *
               C40953 +
           (C59056 + C59057 + C59058 + C59059 + C59060 + C59061 + C59062 +
            C59063) *
               C84198) *
              C1177 -
          (((C172 * C31010 + C84246 * C31234) * C84543 +
            (C172 * C30908 + C84246 * C30959) * C58688 + C35594 * C84589 +
            C35142 * C58687 + C4910 * C84601 + C4336 * C58686 + C4909 * C84607 +
            C4332 * C58685) *
               C84198 +
           (C32119 * C84543 + C31808 * C58688 + C32118 * C84589 +
            C31806 * C58687 + C6526 * C84601 + C5977 * C58686 + C6525 * C84607 +
            C5975 * C58685) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[53] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84596 +
                      (C57588 + C57589) * C84581 + (C57590 + C57591) * C84558) *
                         C40953 +
                     ((C54379 + C54380) * C84596 + (C56643 + C56644) * C84581 +
                      (C56645 + C56646) * C84558) *
                         C84198) *
                        C1177 -
                    (((C54343 * C17255 + C58474 + C58474 + C84344 * C17886 +
                       C54342 * C3442 + C58475 + C58475 + C53740 * C4125) *
                          C84558 +
                      (C54343 * C5114 + C58476 + C58476 + C84344 * C5751 +
                       C54342 * C3445 + C58477 + C58477 + C53740 * C4126) *
                          C84581 +
                      (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
                       C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                          C84596) *
                         C84198 +
                     ((C54343 * C17254 + C58478 + C58478 + C84344 * C17885 +
                       C54342 * C3443 + C58479 + C58479 + C53740 * C4127) *
                          C84558 +
                      (C54343 * C5115 + C58480 + C58480 + C84344 * C5752 +
                       C54342 * C3446 + C58481 + C58481 + C53740 * C4128) *
                          C84581 +
                      (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
                       C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                          C84596) *
                         C40953) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                      C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                         C84246 * C84602 +
                     (C54379 + C54380) * C84246 * C84592 +
                     (C54381 + C54382) * C84246 * C84576 +
                     (C54383 + C54384) * C84246 * C84527) *
                        C1177 -
                    ((C54343 * C4215 + C55653 + C55653 + C84344 * C4996 +
                      C54342 * C1180 + C55654 + C55654 + C53740 * C1586) *
                         C84246 * C84527 +
                     (C54343 * C4214 + C55655 + C55655 + C84344 * C4995 +
                      C54342 * C1181 + C55656 + C55656 + C53740 * C1587) *
                         C84246 * C84576 +
                     (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
                      C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                         C84246 * C84592 +
                     (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
                      C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                         C84246 * C84602) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C59129 * C102 + C59134 + C59134 + C84607 * C638 +
                      C59130 * C1183 + C59135 + C59135 + C84601 * C1589 +
                      C59131 * C4212 + C59136 + C59136 + C84589 * C4993 +
                      C59132 * C5838 + C59137 + C59137 + C84543 * C6602) *
                         C84246 * C40953 +
                     (C59162 + C59163 + C59164 + C59165) * C84246 * C84198) *
                        C1177 -
                    ((C59132 * C30908 + C60410 + C60410 + C84543 * C31283 +
                      C59131 * C5837 + C60411 + C60411 + C84589 * C6601 +
                      C59130 * C4213 + C60412 + C60412 + C84601 * C4994 +
                      C59129 * C1182 + C60413 + C60413 + C84607 * C1588) *
                         C84246 * C84198 +
                     (C59132 * C30907 + C60414 + C60414 + C84543 * C31282 +
                      C59131 * C5838 + C60415 + C60415 + C84589 * C6602 +
                      C59130 * C4212 + C60416 + C60416 + C84601 * C4993 +
                      C59129 * C1183 + C60417 + C60417 + C84607 * C1589) *
                         C84246 * C40953) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexx[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                      C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                      C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                         C84340 +
                     (C50089 + C50090 + C50091) * C84347 +
                     (C82052 * C4212 + C50082 + C50082 + C84193 * C4220 +
                      C82045 * C4213 + C50081 + C50081 + C84201 * C4221 +
                      C45940 * C4214 + C50080 + C50080 + C45932 * C4222) *
                         C63169) *
                        C84246 * C84603 * C84604 * C90 -
                    ((C45940 * C4215 + C63171 + C63171 + C45932 * C4223 +
                      C82045 * C4214 + C63172 + C63172 + C84201 * C4222 +
                      C82052 * C4213 + C63173 + C63173 + C84193 * C4221) *
                         C63169 +
                     (C45940 * C1180 + C48232 + C48232 + C45932 * C1190 +
                      C82045 * C1181 + C48233 + C48233 + C84201 * C1191 +
                      C82052 * C1182 + C48234 + C48234 + C84193 * C1192) *
                         C84347 +
                     (C45940 * C105 + C45958 + C45958 + C45932 * C117 +
                      C82045 * C104 + C45959 + C45959 + C84201 * C116 +
                      C82052 * C103 + C45960 + C45960 + C84193 * C115) *
                         C84340) *
                        C84246 * C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82049 +
            (C172 * C108 + C84246 * C179) * C84193 + C202 * C82038 +
            C203 * C84201 + C204 * C82067 + C205 * C45932) *
               C84340 +
           (C5975 * C82049 + C5976 * C84193 + C4332 * C82038 + C4333 * C84201 +
            C4334 * C82067 + C4335 * C45932) *
               C84347 +
           (C5977 * C82049 + C5978 * C84193 + C4336 * C82038 + C4337 * C84201 +
            C4338 * C82067 + C4339 * C45932) *
               C63169) *
              C84603 * C84604 * C90 -
          (((C172 * C4219 + C84246 * C4314) * C45932 +
            (C172 * C4215 + C84246 * C4310) * C82067 + C4339 * C84201 +
            C4338 * C82038 + C4337 * C84193 + C4336 * C82049) *
               C63169 +
           (C8804 * C45932 + C8803 * C82067 + C4335 * C84201 + C4334 * C82038 +
            C4333 * C84193 + C4332 * C82049) *
               C84347 +
           (C207 * C45932 + C206 * C82067 + C205 * C84201 + C204 * C82038 +
            C203 * C84193 + C202 * C82049) *
               C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eexz[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                      C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                         C82049 +
                     (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                      C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                         C84193 +
                     (C63349 + C63350 + C63351) * C82038 +
                     (C63352 + C63353 + C63354) * C84201 +
                     (C63355 + C63356 + C63357) * C82067 +
                     (C63358 + C63359 + C63360) * C45932) *
                        C84246 * C84603 * C84604 * C90 -
                    ((C82430 * C4219 + C63169 * C4423 + C82419 * C1185 +
                      C84347 * C1299 + C82422 * C111 + C84340 * C261) *
                         C45932 +
                     (C82430 * C4215 + C63169 * C4419 + C82419 * C1180 +
                      C84347 * C1294 + C82422 * C105 + C84340 * C255) *
                         C82067 +
                     (C63360 + C63359 + C63358) * C84201 +
                     (C63357 + C63356 + C63355) * C82038 +
                     (C63354 + C63353 + C63352) * C84193 +
                     (C63351 + C63350 + C63349) * C82049) *
                        C84246 * C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C172 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C84246) *
                         C84340 +
                     ((C50398 + C50399 + C50400) * C172 +
                      (C50401 + C50402 + C50403) * C84246) *
                         C84347 +
                     ((C82049 * C4212 + C84193 * C4216 + C82038 * C4213 +
                       C84201 * C4217 + C82067 * C4214 + C45932 * C4218) *
                          C172 +
                      (C82049 * C4307 + C84193 * C4534 + C82038 * C4308 +
                       C84201 * C4535 + C82067 * C4309 + C45932 * C4536) *
                          C84246) *
                         C63169) *
                        C84603 * C84604 * C90 -
                    (((C82067 * C4310 + C45932 * C4537 + C82038 * C4309 +
                       C84201 * C4536 + C82049 * C4308 + C84193 * C4535) *
                          C84246 +
                      (C82067 * C4215 + C45932 * C4219 + C82038 * C4214 +
                       C84201 * C4218 + C82049 * C4213 + C84193 * C4217) *
                          C172) *
                         C63169 +
                     ((C82067 * C1242 + C45932 * C1346 + C82038 * C1243 +
                       C84201 * C1347 + C82049 * C1244 + C84193 * C1348) *
                          C84246 +
                      (C82067 * C1180 + C45932 * C1185 + C82038 * C1181 +
                       C84201 * C1186 + C82049 * C1182 + C84193 * C1187) *
                          C172) *
                         C84347 +
                     ((C82067 * C176 + C45932 * C333 + C82038 * C175 +
                       C84201 * C332 + C82049 * C174 + C84193 * C331) *
                          C84246 +
                      (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                       C84201 * C110 + C82049 * C103 + C84193 * C109) *
                          C172) *
                         C84340) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84193 +
            C408 * C84201 + C409 * C45932) *
               C84340 +
           (C6268 * C84193 + C4637 * C84201 + C4638 * C45932) * C84347 +
           (C6269 * C84193 + C4639 * C84201 + C4640 * C45932) * C63169) *
              C84603 * C84604 * C90 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C45932 +
            C4640 * C84201 + C4639 * C84193) *
               C63169 +
           (C9045 * C45932 + C4638 * C84201 + C4637 * C84193) * C84347 +
           (C410 * C45932 + C409 * C84201 + C408 * C84193) * C84340) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C172 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C84246) *
                         C84193 +
                     ((C63349 + C63350 + C63351) * C172 +
                      (C63595 + C63596 + C63597) * C84246) *
                         C84201 +
                     ((C63355 + C63356 + C63357) * C172 +
                      (C63598 + C63599 + C63600) * C84246) *
                         C45932) *
                        C84603 * C84604 * C90 -
                    (((C82430 * C4310 + C63169 * C4717 + C82419 * C1242 +
                       C84347 * C1445 + C82422 * C176 + C84340 * C456) *
                          C84246 +
                      (C82430 * C4215 + C63169 * C4419 + C82419 * C1180 +
                       C84347 * C1294 + C82422 * C105 + C84340 * C255) *
                          C172) *
                         C45932 +
                     ((C63600 + C63599 + C63598) * C84246 +
                      (C63357 + C63356 + C63355) * C172) *
                         C84201 +
                     ((C63597 + C63596 + C63595) * C84246 +
                      (C63351 + C63350 + C63349) * C172) *
                         C84193) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C82422 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84340 +
                     (C50398 + C50399 + C50400) * C82419 +
                     (C50704 + C50705 + C50706) * C84347 +
                     (C82049 * C4212 + C84193 * C4216 + C82038 * C4213 +
                      C84201 * C4217 + C82067 * C4214 + C45932 * C4218) *
                         C82430 +
                     (C82049 * C4416 + C84193 * C4810 + C82038 * C4417 +
                      C84201 * C4811 + C82067 * C4418 + C45932 * C4812) *
                         C63169) *
                        C84246 * C84603 * C84604 * C90 -
                    ((C82067 * C4419 + C45932 * C4813 + C82038 * C4418 +
                      C84201 * C4812 + C82049 * C4417 + C84193 * C4811) *
                         C63169 +
                     (C82067 * C4215 + C45932 * C4219 + C82038 * C4214 +
                      C84201 * C4218 + C82049 * C4213 + C84193 * C4217) *
                         C82430 +
                     (C82067 * C1294 + C45932 * C1492 + C82038 * C1295 +
                      C84201 * C1493 + C82049 * C1296 + C84193 * C1494) *
                         C84347 +
                     (C82067 * C1180 + C45932 * C1185 + C82038 * C1181 +
                      C84201 * C1186 + C82049 * C1182 + C84193 * C1187) *
                         C82419 +
                     (C82067 * C255 + C45932 * C524 + C82038 * C254 +
                      C84201 * C523 + C82049 * C253 + C84193 * C522) *
                         C84340 +
                     (C82067 * C105 + C45932 * C111 + C82038 * C104 +
                      C84201 * C110 + C82049 * C103 + C84193 * C109) *
                         C82422) *
                        C84246 * C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82422 +
            (C172 * C252 + C84246 * C569) * C84340 + C5975 * C82419 +
            C6525 * C84347 + C5977 * C82430 + C6526 * C63169) *
               C84193 +
           (C63749 + C63750 + C63751 + C63752 + C63753 + C63754) * C84201 +
           (C63755 + C63756 + C63757 + C63758 + C63759 + C63760) * C45932) *
              C84603 * C84604 * C90 -
          (((C172 * C4419 + C84246 * C4891) * C63169 +
            (C172 * C4215 + C84246 * C4310) * C82430 + C9275 * C84347 +
            C8803 * C82419 + C590 * C84340 + C206 * C82422) *
               C45932 +
           (C63760 + C63759 + C63758 + C63757 + C63756 + C63755) * C84201 +
           (C63754 + C63753 + C63752 + C63751 + C63750 + C63749) * C84193) *
              C84603 * C84604 * C91)) /
        (p * q * std::sqrt(p + q));
    d2eezz[54] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                      C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                      C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                         C84246 * C84193 +
                     (C63874 + C63875 + C63876) * C84246 * C84201 +
                     (C63877 + C63878 + C63879) * C84246 * C45932) *
                        C84603 * C84604 * C90 -
                    ((C63836 * C4215 + C63859 + C63859 + C63169 * C4996 +
                      C82467 * C1180 + C63860 + C63860 + C84347 * C1586 +
                      C82474 * C105 + C63861 + C63861 + C84340 * C641) *
                         C84246 * C45932 +
                     (C63879 + C63878 + C63877) * C84246 * C84201 +
                     (C63876 + C63875 + C63874) * C84246 * C84193) *
                        C84603 * C84604 * C91)) /
                  (p * q * std::sqrt(p + q));
    d2eexx[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                      C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                      C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                         C84340 +
                     (C50089 + C50090 + C50091) * C84347 +
                     (C82052 * C4212 + C50082 + C50082 + C84193 * C4220 +
                      C82045 * C4213 + C50081 + C50081 + C84201 * C4221 +
                      C45940 * C4214 + C50080 + C50080 + C45932 * C4222) *
                         C63169) *
                        C84246 * C84603 * C716 -
                    ((C45940 * C5113 + C50077 + C50077 + C45932 * C5119 +
                      C82045 * C5114 + C50078 + C50078 + C84201 * C5120 +
                      C82052 * C5115 + C50079 + C50079 + C84193 * C5121) *
                         C63169 +
                     (C49159 + C49158 + C49157) * C84347 +
                     (C46776 + C46775 + C46774) * C84340) *
                        C84246 * C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C82049 +
                      (C172 * C108 + C84246 * C179) * C84193 + C202 * C82038 +
                      C203 * C84201 + C204 * C82067 + C205 * C45932) *
                         C84340 +
                     (C5975 * C82049 + C5976 * C84193 + C4332 * C82038 +
                      C4333 * C84201 + C4334 * C82067 + C4335 * C45932) *
                         C84347 +
                     (C5977 * C82049 + C5978 * C84193 + C4336 * C82038 +
                      C4337 * C84201 + C4338 * C82067 + C4339 * C45932) *
                         C63169) *
                        C84603 * C716 -
                    (((C172 * C5116 + C84246 * C5202) * C45932 +
                      (C172 * C5113 + C84246 * C5199) * C82067 +
                      (C172 * C5117 + C84246 * C5203) * C84201 +
                      (C172 * C5114 + C84246 * C5200) * C82038 +
                      (C172 * C5118 + C84246 * C5204) * C84193 +
                      (C172 * C5115 + C84246 * C5201) * C82049) *
                         C63169 +
                     ((C172 * C3450 + C84246 * C3549) * C45932 +
                      (C172 * C3444 + C84246 * C3543) * C82067 +
                      (C172 * C3451 + C84246 * C3551) * C84201 +
                      (C172 * C3445 + C84246 * C3545) * C82038 +
                      (C172 * C3452 + C84246 * C3553) * C84193 +
                      (C172 * C3446 + C84246 * C3547) * C82049) *
                         C84347 +
                     ((C172 * C726 + C84246 * C788) * C45932 +
                      (C172 * C721 + C84246 * C783) * C82067 +
                      (C172 * C727 + C84246 * C789) * C84201 +
                      (C172 * C722 + C84246 * C784) * C82038 +
                      (C172 * C728 + C84246 * C790) * C84193 +
                      (C172 * C723 + C84246 * C785) * C82049) *
                         C84340) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                      C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                         C82049 +
                     (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                      C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                         C84193 +
                     (C63349 + C63350 + C63351) * C82038 +
                     (C63352 + C63353 + C63354) * C84201 +
                     (C63355 + C63356 + C63357) * C82067 +
                     (C63358 + C63359 + C63360) * C45932) *
                        C84246 * C84603 * C716 -
                    ((C82430 * C5116 + C63169 * C5282 + C82419 * C3450 +
                      C84347 * C3637 + C82422 * C726 + C84340 * C840) *
                         C45932 +
                     (C82430 * C5113 + C63169 * C5279 + C82419 * C3444 +
                      C84347 * C3631 + C82422 * C721 + C84340 * C835) *
                         C82067 +
                     (C82430 * C5117 + C63169 * C5283 + C82419 * C3451 +
                      C84347 * C3638 + C82422 * C727 + C84340 * C841) *
                         C84201 +
                     (C82430 * C5114 + C63169 * C5280 + C82419 * C3445 +
                      C84347 * C3632 + C82422 * C722 + C84340 * C836) *
                         C82038 +
                     (C82430 * C5118 + C63169 * C5284 + C82419 * C3452 +
                      C84347 * C3639 + C82422 * C728 + C84340 * C842) *
                         C84193 +
                     (C82430 * C5115 + C63169 * C5281 + C82419 * C3446 +
                      C84347 * C3633 + C82422 * C723 + C84340 * C837) *
                         C82049) *
                        C84246 * C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C172 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C84246) *
                         C84340 +
                     ((C50398 + C50399 + C50400) * C172 +
                      (C50401 + C50402 + C50403) * C84246) *
                         C84347 +
                     ((C82049 * C4212 + C84193 * C4216 + C82038 * C4213 +
                       C84201 * C4217 + C82067 * C4214 + C45932 * C4218) *
                          C172 +
                      (C82049 * C4307 + C84193 * C4534 + C82038 * C4308 +
                       C84201 * C4535 + C82067 * C4309 + C45932 * C4536) *
                          C84246) *
                         C63169) *
                        C84603 * C716 -
                    (((C82067 * C5199 + C45932 * C5359 + C82038 * C5200 +
                       C84201 * C5360 + C82049 * C5201 + C84193 * C5361) *
                          C84246 +
                      (C82067 * C5113 + C45932 * C5116 + C82038 * C5114 +
                       C84201 * C5117 + C82049 * C5115 + C84193 * C5118) *
                          C172) *
                         C63169 +
                     ((C49471 + C49470 + C49469) * C84246 +
                      (C49468 + C49467 + C49466) * C172) *
                         C84347 +
                     ((C47043 + C47042 + C47041) * C84246 +
                      (C47040 + C47039 + C47038) * C172) *
                         C84340) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84193 +
            C408 * C84201 + C409 * C45932) *
               C84340 +
           (C6268 * C84193 + C4637 * C84201 + C4638 * C45932) * C84347 +
           (C6269 * C84193 + C4639 * C84201 + C4640 * C45932) * C63169) *
              C84603 * C716 -
          (((C378 * C5113 + C5440 + C5440 + C84246 * C5436) * C45932 +
            (C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C84201 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C84193) *
               C63169 +
           ((C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C45932 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84201 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84193) *
               C84347 +
           ((C378 * C721 + C940 + C940 + C84246 * C934) * C45932 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C84201 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C84193) *
               C84340) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C172 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C84246) *
                         C84193 +
                     ((C63349 + C63350 + C63351) * C172 +
                      (C63595 + C63596 + C63597) * C84246) *
                         C84201 +
                     ((C63355 + C63356 + C63357) * C172 +
                      (C63598 + C63599 + C63600) * C84246) *
                         C45932) *
                        C84603 * C716 -
                    (((C82430 * C5199 + C63169 * C5519 + C82419 * C3543 +
                       C84347 * C3884 + C82422 * C783 + C84340 * C986) *
                          C84246 +
                      (C82430 * C5113 + C63169 * C5279 + C82419 * C3444 +
                       C84347 * C3631 + C82422 * C721 + C84340 * C835) *
                          C172) *
                         C45932 +
                     ((C82430 * C5200 + C63169 * C5520 + C82419 * C3545 +
                       C84347 * C3886 + C82422 * C784 + C84340 * C987) *
                          C84246 +
                      (C82430 * C5114 + C63169 * C5280 + C82419 * C3445 +
                       C84347 * C3632 + C82422 * C722 + C84340 * C836) *
                          C172) *
                         C84201 +
                     ((C82430 * C5201 + C63169 * C5521 + C82419 * C3547 +
                       C84347 * C3888 + C82422 * C785 + C84340 * C988) *
                          C84246 +
                      (C82430 * C5115 + C63169 * C5281 + C82419 * C3446 +
                       C84347 * C3633 + C82422 * C723 + C84340 * C837) *
                          C172) *
                         C84193) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C82422 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84340 +
                     (C50398 + C50399 + C50400) * C82419 +
                     (C50704 + C50705 + C50706) * C84347 +
                     (C82049 * C4212 + C84193 * C4216 + C82038 * C4213 +
                      C84201 * C4217 + C82067 * C4214 + C45932 * C4218) *
                         C82430 +
                     (C82049 * C4416 + C84193 * C4810 + C82038 * C4417 +
                      C84201 * C4811 + C82067 * C4418 + C45932 * C4812) *
                         C63169) *
                        C84246 * C84603 * C716 -
                    ((C82067 * C5279 + C45932 * C5596 + C82038 * C5280 +
                      C84201 * C5597 + C82049 * C5281 + C84193 * C5598) *
                         C63169 +
                     (C82067 * C5113 + C45932 * C5116 + C82038 * C5114 +
                      C84201 * C5117 + C82049 * C5115 + C84193 * C5118) *
                         C82430 +
                     (C49776 + C49775 + C49774) * C84347 +
                     (C49468 + C49467 + C49466) * C82419 +
                     (C47295 + C47294 + C47293) * C84340 +
                     (C47040 + C47039 + C47038) * C82422) *
                        C84246 * C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82422 +
            (C172 * C252 + C84246 * C569) * C84340 + C5975 * C82419 +
            C6525 * C84347 + C5977 * C82430 + C6526 * C63169) *
               C84193 +
           (C63749 + C63750 + C63751 + C63752 + C63753 + C63754) * C84201 +
           (C63755 + C63756 + C63757 + C63758 + C63759 + C63760) * C45932) *
              C84603 * C716 -
          (((C172 * C5279 + C84246 * C5673) * C63169 +
            (C172 * C5113 + C84246 * C5199) * C82430 +
            (C172 * C3631 + C84246 * C4044) * C84347 +
            (C172 * C3444 + C84246 * C3543) * C82419 +
            (C172 * C835 + C84246 * C1080) * C84340 +
            (C172 * C721 + C84246 * C783) * C82422) *
               C45932 +
           ((C172 * C5280 + C84246 * C5674) * C63169 +
            (C172 * C5114 + C84246 * C5200) * C82430 +
            (C172 * C3632 + C84246 * C4046) * C84347 +
            (C172 * C3445 + C84246 * C3545) * C82419 +
            (C172 * C836 + C84246 * C1081) * C84340 +
            (C172 * C722 + C84246 * C784) * C82422) *
               C84201 +
           ((C172 * C5281 + C84246 * C5675) * C63169 +
            (C172 * C5115 + C84246 * C5201) * C82430 +
            (C172 * C3633 + C84246 * C4048) * C84347 +
            (C172 * C3446 + C84246 * C3547) * C82419 +
            (C172 * C837 + C84246 * C1082) * C84340 +
            (C172 * C723 + C84246 * C785) * C82422) *
               C84193) *
              C84603 * C717) *
         C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                      C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                      C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                         C84246 * C84193 +
                     (C63874 + C63875 + C63876) * C84246 * C84201 +
                     (C63877 + C63878 + C63879) * C84246 * C45932) *
                        C84603 * C716 -
                    ((C63836 * C5113 + C64546 + C64546 + C63169 * C5750 +
                      C82467 * C3444 + C64547 + C64547 + C84347 * C4124 +
                      C82474 * C721 + C64548 + C64548 + C84340 * C1127) *
                         C84246 * C45932 +
                     (C63836 * C5114 + C64549 + C64549 + C63169 * C5751 +
                      C82467 * C3445 + C64550 + C64550 + C84347 * C4126 +
                      C82474 * C722 + C64551 + C64551 + C84340 * C1128) *
                         C84246 * C84201 +
                     (C63836 * C5115 + C64552 + C64552 + C63169 * C5752 +
                      C82467 * C3446 + C64553 + C64553 + C84347 * C4128 +
                      C82474 * C723 + C64554 + C64554 + C84340 * C1129) *
                         C84246 * C84193) *
                        C84603 * C717) *
                   C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82052 * C102 + C45943 + C45943 + C84193 * C114 +
                      C82045 * C103 + C45944 + C45944 + C84201 * C115 +
                      C45940 * C104 + C45945 + C45945 + C45932 * C116) *
                         C84340 +
                     (C50089 + C50090 + C50091) * C84347 +
                     (C64644 + C64645 + C64646) * C63169) *
                        C84246 * C1177 -
                    ((C45940 * C5836 + C64635 + C64635 + C45932 * C5842 +
                      C82045 * C5837 + C64636 + C64636 + C84201 * C5843 +
                      C82052 * C5838 + C64637 + C64637 + C84193 * C5844) *
                         C63169 +
                     (C64646 + C64645 + C64644) * C84347 +
                     (C50091 + C50090 + C50089) * C84340) *
                        C84246 * C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82049 +
            (C172 * C108 + C84246 * C179) * C84193 + C202 * C82038 +
            C203 * C84201 + C204 * C82067 + C205 * C45932) *
               C84340 +
           (C64721 + C64722 + C64723 + C64724 + C64725 + C64726) * C84347 +
           (C64727 + C64728 + C64729 + C64730 + C64731 + C64732) * C63169) *
              C1177 -
          (((C172 * C5839 + C84246 * C5955) * C45932 +
            (C172 * C5836 + C84246 * C5952) * C82067 + C35143 * C84201 +
            C35142 * C82038 + C31807 * C84193 + C31806 * C82049) *
               C63169 +
           (C64732 + C64731 + C64730 + C64729 + C64728 + C64727) * C84347 +
           (C64726 + C64725 + C64724 + C64723 + C64722 + C64721) * C84340) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                      C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                         C82049 +
                     (C82422 * C108 + C84340 * C258 + C82419 * C1188 +
                      C84347 * C1302 + C82430 * C4216 + C63169 * C4420) *
                         C84193 +
                     (C63349 + C63350 + C63351) * C82038 +
                     (C63352 + C63353 + C63354) * C84201 +
                     (C63355 + C63356 + C63357) * C82067 +
                     (C63358 + C63359 + C63360) * C45932) *
                        C84246 * C1177 -
                    ((C82430 * C5839 + C63169 * C6059 + C82419 * C4218 +
                      C84347 * C4422 + C82422 * C1186 + C84340 * C1300) *
                         C45932 +
                     (C82430 * C5836 + C63169 * C6056 + C82419 * C4214 +
                      C84347 * C4418 + C82422 * C1181 + C84340 * C1295) *
                         C82067 +
                     (C82430 * C5840 + C63169 * C6060 + C82419 * C4217 +
                      C84347 * C4421 + C82422 * C1187 + C84340 * C1301) *
                         C84201 +
                     (C82430 * C5837 + C63169 * C6057 + C82419 * C4213 +
                      C84347 * C4417 + C82422 * C1182 + C84340 * C1296) *
                         C82038 +
                     (C82430 * C5841 + C63169 * C6061 + C82419 * C4216 +
                      C84347 * C4420 + C82422 * C1188 + C84340 * C1302) *
                         C84193 +
                     (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                      C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                         C82049) *
                        C84246 * C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                       C84201 * C109 + C82067 * C104 + C45932 * C110) *
                          C172 +
                      (C82049 * C173 + C84193 * C330 + C82038 * C174 +
                       C84201 * C331 + C82067 * C175 + C45932 * C332) *
                          C84246) *
                         C84340 +
                     ((C50398 + C50399 + C50400) * C172 +
                      (C50401 + C50402 + C50403) * C84246) *
                         C84347 +
                     ((C64893 + C64894 + C64895) * C172 +
                      (C64896 + C64897 + C64898) * C84246) *
                         C63169) *
                        C1177 -
                    (((C82067 * C5952 + C45932 * C6136 + C82038 * C5953 +
                       C84201 * C6137 + C82049 * C5954 + C84193 * C6138) *
                          C84246 +
                      (C82067 * C5836 + C45932 * C5839 + C82038 * C5837 +
                       C84201 * C5840 + C82049 * C5838 + C84193 * C5841) *
                          C172) *
                         C63169 +
                     ((C64898 + C64897 + C64896) * C84246 +
                      (C64895 + C64894 + C64893) * C172) *
                         C84347 +
                     ((C50403 + C50402 + C50401) * C84246 +
                      (C50400 + C50399 + C50398) * C172) *
                         C84340) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84193 +
                      C408 * C84201 + C409 * C45932) *
                         C84340 +
                     (C64973 + C64974 + C64975) * C84347 +
                     (C64976 + C64977 + C64978) * C63169) *
                        C1177 -
                    (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C45932 +
                      C35374 * C84201 + C31975 * C84193) *
                         C63169 +
                     (C64978 + C64977 + C64976) * C84347 +
                     (C64975 + C64974 + C64973) * C84340) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C82422 * C102 + C84340 * C252 + C82419 * C1183 +
                       C84347 * C1297 + C82430 * C4212 + C63169 * C4416) *
                          C172 +
                      (C82422 * C173 + C84340 * C453 + C82419 * C1245 +
                       C84347 * C1448 + C82430 * C4307 + C63169 * C4714) *
                          C84246) *
                         C84193 +
                     ((C63349 + C63350 + C63351) * C172 +
                      (C63595 + C63596 + C63597) * C84246) *
                         C84201 +
                     ((C63355 + C63356 + C63357) * C172 +
                      (C63598 + C63599 + C63600) * C84246) *
                         C45932) *
                        C1177 -
                    (((C82430 * C5952 + C63169 * C6345 + C82419 * C4309 +
                       C84347 * C4716 + C82422 * C1243 + C84340 * C1446) *
                          C84246 +
                      (C82430 * C5836 + C63169 * C6056 + C82419 * C4214 +
                       C84347 * C4418 + C82422 * C1181 + C84340 * C1295) *
                          C172) *
                         C45932 +
                     ((C82430 * C5953 + C63169 * C6346 + C82419 * C4308 +
                       C84347 * C4715 + C82422 * C1244 + C84340 * C1447) *
                          C84246 +
                      (C82430 * C5837 + C63169 * C6057 + C82419 * C4213 +
                       C84347 * C4417 + C82422 * C1182 + C84340 * C1296) *
                          C172) *
                         C84201 +
                     ((C82430 * C5954 + C63169 * C6347 + C82419 * C4307 +
                       C84347 * C4714 + C82422 * C1245 + C84340 * C1448) *
                          C84246 +
                      (C82430 * C5838 + C63169 * C6058 + C82419 * C4212 +
                       C84347 * C4416 + C82422 * C1183 + C84340 * C1297) *
                          C172) *
                         C84193) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82049 * C102 + C84193 * C108 + C82038 * C103 +
                      C84201 * C109 + C82067 * C104 + C45932 * C110) *
                         C82422 +
                     (C82049 * C252 + C84193 * C521 + C82038 * C253 +
                      C84201 * C522 + C82067 * C254 + C45932 * C523) *
                         C84340 +
                     (C50398 + C50399 + C50400) * C82419 +
                     (C50704 + C50705 + C50706) * C84347 +
                     (C64893 + C64894 + C64895) * C82430 +
                     (C65133 + C65134 + C65135) * C63169) *
                        C84246 * C1177 -
                    ((C82067 * C6056 + C45932 * C6422 + C82038 * C6057 +
                      C84201 * C6423 + C82049 * C6058 + C84193 * C6424) *
                         C63169 +
                     (C82067 * C5836 + C45932 * C5839 + C82038 * C5837 +
                      C84201 * C5840 + C82049 * C5838 + C84193 * C5841) *
                         C82430 +
                     (C65135 + C65134 + C65133) * C84347 +
                     (C64895 + C64894 + C64893) * C82419 +
                     (C50706 + C50705 + C50704) * C84340 +
                     (C50400 + C50399 + C50398) * C82422) *
                        C84246 * C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eezy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C82422 +
            (C172 * C252 + C84246 * C569) * C84340 + C5975 * C82419 +
            C6525 * C84347 + C5977 * C82430 + C6526 * C63169) *
               C84193 +
           (C63749 + C63750 + C63751 + C63752 + C63753 + C63754) * C84201 +
           (C63755 + C63756 + C63757 + C63758 + C63759 + C63760) * C45932) *
              C1177 -
          (((C172 * C6056 + C84246 * C6517) * C63169 +
            (C172 * C5836 + C84246 * C5952) * C82430 + C4912 * C84347 +
            C4338 * C82419 + C4911 * C84340 + C4334 * C82422) *
               C45932 +
           (C35594 * C63169 + C35142 * C82430 + C4910 * C84347 +
            C4336 * C82419 + C4909 * C84340 + C4332 * C82422) *
               C84201 +
           (C32118 * C63169 + C31806 * C82430 + C6526 * C84347 +
            C5977 * C82419 + C6525 * C84340 + C5975 * C82422) *
               C84193) *
              C1178) *
         C84604 * C84605) /
        (p * q * std::sqrt(p + q));
    d2eezz[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C82474 * C102 + C63838 + C63838 + C84340 * C638 +
                      C82467 * C1183 + C63839 + C63839 + C84347 * C1589 +
                      C63836 * C4212 + C63840 + C63840 + C63169 * C4993) *
                         C84246 * C84193 +
                     (C63874 + C63875 + C63876) * C84246 * C84201 +
                     (C63877 + C63878 + C63879) * C84246 * C45932) *
                        C1177 -
                    ((C63836 * C5836 + C65284 + C65284 + C63169 * C6600 +
                      C82467 * C4214 + C65285 + C65285 + C84347 * C4995 +
                      C82474 * C1181 + C65286 + C65286 + C84340 * C1587) *
                         C84246 * C45932 +
                     (C63836 * C5837 + C65287 + C65287 + C63169 * C6601 +
                      C82467 * C4213 + C65288 + C65288 + C84347 * C4994 +
                      C82474 * C1182 + C65289 + C65289 + C84340 * C1588) *
                         C84246 * C84201 +
                     (C63836 * C5838 + C65290 + C65290 + C63169 * C6602 +
                      C82467 * C4212 + C65291 + C65291 + C84347 * C4993 +
                      C82474 * C1183 + C65292 + C65292 + C84340 * C1589) *
                         C84246 * C84193) *
                        C1178) *
                   C84604 * C84605) /
                  (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C53740 +
           (C38939 * C1183 + C40351 + C40351 + C84602 * C1193 + C38941 * C1182 +
            C40350 + C40350 + C84592 * C1192 + C38943 * C1181 + C40349 +
            C40349 + C84576 * C1191 + C38945 * C1180 + C40348 + C40348 +
            C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C38945 * C1179 + C53743 + C53743 + C84527 * C1189 + C38943 * C1180 +
            C53744 + C53744 + C84576 * C1190 + C38941 * C1181 + C53745 +
            C53745 + C84592 * C1191 + C38939 * C1182 + C53746 + C53746 +
            C84602 * C1192) *
               C84344 +
           (C38945 * C106 + C38960 + C38960 + C84527 * C118 + C38943 * C105 +
            C38961 + C38961 + C84576 * C117 + C38941 * C104 + C38962 + C38962 +
            C84592 * C116 + C38939 * C103 + C38963 + C38963 + C84602 * C115) *
               C53740) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C53740 +
            (C44970 + C44971) * C84344) *
               C84596 +
           ((C41688 + C41689) * C53740 + (C44020 + C44021) * C84344) * C84581 +
           ((C41690 + C41691) * C53740 + (C51935 + C51936) * C84344) * C84558) *
              C84603 * C84604 * C90 -
          (((C40961 * C3441 + C51001 + C51001 + C84198 * C3453 +
             C40959 * C3442 + C51002 + C51002 + C40953 * C3454) *
                C84344 +
            (C40961 * C1683 + C40974 + C40974 + C84198 * C1691 +
             C40959 * C1682 + C40975 + C40975 + C40953 * C1690) *
                C53740) *
               C84558 +
           ((C40961 * C3444 + C43010 + C43010 + C84198 * C3456 +
             C40959 * C3445 + C43011 + C43011 + C40953 * C3457) *
                C84344 +
            (C40961 * C721 + C40976 + C40976 + C84198 * C731 + C40959 * C722 +
             C40977 + C40977 + C40953 * C732) *
                C53740) *
               C84581 +
           ((C40961 * C1181 + C43014 + C43014 + C84198 * C1191 +
             C40959 * C1182 + C43015 + C43015 + C40953 * C1192) *
                C84344 +
            (C40961 * C104 + C40978 + C40978 + C84198 * C116 + C40959 * C103 +
             C40979 + C40979 + C40953 * C115) *
                C53740) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C38940 +
            (C172 * C108 + C84246 * C179) * C84602 + C202 * C38942 +
            C203 * C84592 + C204 * C38944 + C205 * C84576 + C206 * C38946 +
            C207 * C84527) *
               C53740 +
           (C5975 * C38940 + C5976 * C84602 + C4332 * C38942 + C4333 * C84592 +
            C4334 * C38944 + C4335 * C84576 + C8803 * C38946 + C8804 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C172 * C1184 + C84246 * C1246) * C84527 +
            (C172 * C1179 + C84246 * C1241) * C38946 + C8804 * C84576 +
            C8803 * C38944 + C4335 * C84592 + C4334 * C38942 + C4333 * C84602 +
            C4332 * C38940) *
               C84344 +
           (C209 * C84527 + C208 * C38946 + C207 * C84576 + C206 * C38944 +
            C205 * C84592 + C204 * C38942 + C203 * C84602 + C202 * C38940) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C40960 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C40953 +
            (C1821 + C1822 + C1823) * C40962 +
            (C1824 + C1825 + C1826) * C84198) *
               C53740 +
           ((C30262 + C30263 + C30264) * C40960 +
            (C30265 + C30266 + C30267) * C40953 +
            (C55869 + C55870 + C55871) * C40962 +
            (C55872 + C55873 + C55874) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C1787 * C3447 + C84558 * C3548 + C1786 * C3450 + C84581 * C3549 +
             C1785 * C1186 + C84596 * C1248) *
                C84198 +
            (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
             C1785 * C1181 + C84596 * C1243) *
                C40962 +
            (C55874 + C55873 + C55872) * C40953 +
            (C55871 + C55870 + C55869) * C40960) *
               C84344 +
           ((C1832 + C1831 + C1830) * C84198 +
            (C1829 + C1828 + C1827) * C40962 +
            (C1826 + C1825 + C1824) * C40953 +
            (C1823 + C1822 + C1821) * C40960) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C38940 +
           (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
               C84602 +
           (C53905 + C53906) * C38942 + (C53907 + C53908) * C84592 +
           (C53909 + C53910) * C38944 + (C53911 + C53912) * C84576 +
           (C53913 + C53914) * C38946 + (C53915 + C53916) * C84527) *
              C84246 * C84603 * C84604 * C90 -
          ((C53879 * C1184 + C84344 * C1298 + C53878 * C112 + C53740 * C262) *
               C84527 +
           (C53879 * C1179 + C84344 * C1293 + C53878 * C106 + C53740 * C256) *
               C38946 +
           (C53916 + C53915) * C84576 + (C53914 + C53913) * C38944 +
           (C53912 + C53911) * C84592 + (C53910 + C53909) * C38942 +
           (C53908 + C53907) * C84602 + (C53906 + C53905) * C38940) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C40960 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C40953 +
            (C53905 + C53906) * C40962 + (C53907 + C53908) * C84198) *
               C84596 +
           ((C53878 * C723 + C53740 * C837 + C53879 * C3446 + C84344 * C3633) *
                C40960 +
            (C53878 * C728 + C53740 * C842 + C53879 * C3452 + C84344 * C3639) *
                C40953 +
            (C55989 + C55990) * C40962 + (C55991 + C55992) * C84198) *
               C84581 +
           ((C53878 * C1681 + C53740 * C1906 + C53879 * C3443 +
             C84344 * C3630) *
                C40960 +
            (C53878 * C1685 + C53740 * C1910 + C53879 * C3449 +
             C84344 * C3636) *
                C40953 +
            (C55993 + C55994) * C40962 + (C55995 + C55996) * C84198) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C53879 * C3447 + C84344 * C3634 + C53878 * C1687 +
             C53740 * C1912) *
                C84198 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C40962 +
            (C55996 + C55995) * C40953 + (C55994 + C55993) * C40960) *
               C84558 +
           ((C53879 * C3450 + C84344 * C3637 + C53878 * C726 + C53740 * C840) *
                C84198 +
            (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
                C40962 +
            (C55992 + C55991) * C40953 + (C55990 + C55989) * C40960) *
               C84581 +
           ((C53912 + C53911) * C84198 + (C53910 + C53909) * C40962 +
            (C53908 + C53907) * C40953 + (C53906 + C53905) * C40960) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C172 +
            (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
             C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
                C84246) *
               C53740 +
           ((C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
             C38944 * C1181 + C84576 * C1186 + C38946 * C1180 +
             C84527 * C1185) *
                C172 +
            (C38940 * C1245 + C84602 * C1349 + C38942 * C1244 + C84592 * C1348 +
             C38944 * C1243 + C84576 * C1347 + C38946 * C1242 +
             C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C38946 * C1241 + C84527 * C1345 + C38944 * C1242 + C84576 * C1346 +
             C38942 * C1243 + C84592 * C1347 + C38940 * C1244 +
             C84602 * C1348) *
                C84246 +
            (C38946 * C1179 + C84527 * C1184 + C38944 * C1180 + C84576 * C1185 +
             C38942 * C1181 + C84592 * C1186 + C38940 * C1182 +
             C84602 * C1187) *
                C172) *
               C84344 +
           ((C38946 * C177 + C84527 * C334 + C38944 * C176 + C84576 * C333 +
             C38942 * C175 + C84592 * C332 + C38940 * C174 + C84602 * C331) *
                C84246 +
            (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
             C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
                C172) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C1785 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84596 +
            (C41928 + C41929) * C1786 + (C41930 + C41931) * C84581 +
            (C41932 + C41933) * C1787 + (C41934 + C41935) * C84558) *
               C53740 +
           ((C45308 + C45309) * C1785 + (C45310 + C45311) * C84596 +
            (C44334 + C44335) * C1786 + (C44336 + C44337) * C84581 +
            (C52239 + C52240) * C1787 + (C52241 + C52242) * C84558) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C40962 * C3542 + C84198 * C3714 + C40960 * C3544 +
             C40953 * C3715) *
                C84558 +
            (C40962 * C3441 + C84198 * C3447 + C40960 * C3442 +
             C40953 * C3448) *
                C1787 +
            (C40962 * C3543 + C84198 * C3717 + C40960 * C3545 +
             C40953 * C3718) *
                C84581 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C1786 +
            (C40962 * C1243 + C84198 * C1347 + C40960 * C1244 +
             C40953 * C1348) *
                C84596 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C1785) *
               C84344 +
           ((C40962 * C1790 + C84198 * C2014 + C40960 * C1789 +
             C40953 * C2013) *
                C84558 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C1787 +
            (C40962 * C783 + C84198 * C887 + C40960 * C784 + C40953 * C888) *
                C84581 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C1786 +
            (C40962 * C175 + C84198 * C332 + C40960 * C174 + C40953 * C331) *
                C84596 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C1785) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84602 +
            C408 * C84592 + C409 * C84576 + C410 * C84527) *
               C53740 +
           (C6268 * C84602 + C4637 * C84592 + C4638 * C84576 + C9045 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C84527 +
            C9045 * C84576 + C4638 * C84592 + C4637 * C84602) *
               C84344 +
           (C411 * C84527 + C410 * C84576 + C409 * C84592 + C408 * C84602) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
             C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
             C84558 * C2093) *
                C40953 +
            (C2134 + C2135 + C2136) * C84198) *
               C53740 +
           ((C30535 + C30536 + C30537) * C40953 +
            (C56205 + C56206 + C56207) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C2092 * C3441 + C3801 + C3801 + C84558 * C3794 + C2091 * C3444 +
             C3802 + C3802 + C84581 * C3795 + C2090 * C1181 + C3803 + C3803 +
             C84596 * C1394) *
                C84198 +
            (C56207 + C56206 + C56205) * C40953) *
               C84344 +
           ((C2139 + C2138 + C2137) * C84198 +
            (C2136 + C2135 + C2134) * C40953) *
               C53740) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C172 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84246) *
               C84602 +
           ((C53905 + C53906) * C172 + (C54127 + C54128) * C84246) * C84592 +
           ((C53909 + C53910) * C172 + (C54129 + C54130) * C84246) * C84576 +
           ((C53913 + C53914) * C172 + (C54131 + C54132) * C84246) * C84527) *
              C84603 * C84604 * C90 -
          (((C53879 * C1241 + C84344 * C1444 + C53878 * C177 + C53740 * C457) *
                C84246 +
            (C53879 * C1179 + C84344 * C1293 + C53878 * C106 + C53740 * C256) *
                C172) *
               C84527 +
           ((C54132 + C54131) * C84246 + (C53914 + C53913) * C172) * C84576 +
           ((C54130 + C54129) * C84246 + (C53910 + C53909) * C172) * C84592 +
           ((C54128 + C54127) * C84246 + (C53906 + C53905) * C172) * C84602) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C1785 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84596 +
            (C53878 * C723 + C53740 * C837 + C53879 * C3446 + C84344 * C3633) *
                C1786 +
            (C53878 * C785 + C53740 * C988 + C53879 * C3547 + C84344 * C3888) *
                C84581 +
            (C53878 * C1681 + C53740 * C1906 + C53879 * C3443 +
             C84344 * C3630) *
                C1787 +
            (C53878 * C1788 + C53740 * C2213 + C53879 * C3546 +
             C84344 * C3887) *
                C84558) *
               C40953 +
           ((C53905 + C53906) * C1785 + (C54127 + C54128) * C84596 +
            (C55989 + C55990) * C1786 + (C56314 + C56315) * C84581 +
            (C55993 + C55994) * C1787 + (C56316 + C56317) * C84558) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C53879 * C3542 + C84344 * C3883 + C53878 * C1790 +
             C53740 * C2215) *
                C84558 +
            (C53879 * C3441 + C84344 * C3628 + C53878 * C1683 +
             C53740 * C1908) *
                C1787 +
            (C53879 * C3543 + C84344 * C3884 + C53878 * C783 + C53740 * C986) *
                C84581 +
            (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
                C1786 +
            (C54130 + C54129) * C84596 + (C53910 + C53909) * C1785) *
               C84198 +
           ((C56317 + C56316) * C84558 + (C55994 + C55993) * C1787 +
            (C56315 + C56314) * C84581 + (C55990 + C55989) * C1786 +
            (C54128 + C54127) * C84596 + (C53906 + C53905) * C1785) *
               C40953) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C53878 +
           (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
            C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
               C53740 +
           (C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
            C38944 * C1181 + C84576 * C1186 + C38946 * C1180 + C84527 * C1185) *
               C53879 +
           (C38940 * C1297 + C84602 * C1495 + C38942 * C1296 + C84592 * C1494 +
            C38944 * C1295 + C84576 * C1493 + C38946 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C38946 * C1293 + C84527 * C1491 + C38944 * C1294 + C84576 * C1492 +
            C38942 * C1295 + C84592 * C1493 + C38940 * C1296 + C84602 * C1494) *
               C84344 +
           (C38946 * C1179 + C84527 * C1184 + C38944 * C1180 + C84576 * C1185 +
            C38942 * C1181 + C84592 * C1186 + C38940 * C1182 + C84602 * C1187) *
               C53879 +
           (C38946 * C256 + C84527 * C525 + C38944 * C255 + C84576 * C524 +
            C38942 * C254 + C84592 * C523 + C38940 * C253 + C84602 * C522) *
               C53740 +
           (C38946 * C106 + C84527 * C112 + C38944 * C105 + C84576 * C111 +
            C38942 * C104 + C84592 * C110 + C38940 * C103 + C84602 * C109) *
               C53878) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C53878 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C53740 +
            (C45308 + C45309) * C53879 + (C45642 + C45643) * C84344) *
               C84596 +
           ((C41928 + C41929) * C53878 + (C42158 + C42159) * C53740 +
            (C44334 + C44335) * C53879 + (C44652 + C44653) * C84344) *
               C84581 +
           ((C41932 + C41933) * C53878 + (C42160 + C42161) * C53740 +
            (C52239 + C52240) * C53879 + (C52547 + C52548) * C84344) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C40962 * C3628 + C84198 * C3963 + C40960 * C3629 +
             C40953 * C3964) *
                C84344 +
            (C40962 * C3441 + C84198 * C3447 + C40960 * C3442 +
             C40953 * C3448) *
                C53879 +
            (C40962 * C1908 + C84198 * C2317 + C40960 * C1907 +
             C40953 * C2316) *
                C53740 +
            (C40962 * C1683 + C84198 * C1687 + C40960 * C1682 +
             C40953 * C1686) *
                C53878) *
               C84558 +
           ((C40962 * C3631 + C84198 * C3966 + C40960 * C3632 +
             C40953 * C3967) *
                C84344 +
            (C40962 * C3444 + C84198 * C3450 + C40960 * C3445 +
             C40953 * C3451) *
                C53879 +
            (C40962 * C835 + C84198 * C1033 + C40960 * C836 + C40953 * C1034) *
                C53740 +
            (C40962 * C721 + C84198 * C726 + C40960 * C722 + C40953 * C727) *
                C53878) *
               C84581 +
           ((C40962 * C1295 + C84198 * C1493 + C40960 * C1296 +
             C40953 * C1494) *
                C84344 +
            (C40962 * C1181 + C84198 * C1186 + C40960 * C1182 +
             C40953 * C1187) *
                C53879 +
            (C40962 * C254 + C84198 * C523 + C40960 * C253 + C40953 * C522) *
                C53740 +
            (C40962 * C104 + C84198 * C110 + C40960 * C103 + C40953 * C109) *
                C53878) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C53878 +
                      (C172 * C252 + C84246 * C569) * C53740 + C5975 * C53879 +
                      C6525 * C84344) *
                         C84602 +
                     (C54265 + C54266 + C54267 + C54268) * C84592 +
                     (C54269 + C54270 + C54271 + C54272) * C84576 +
                     (C54273 + C54274 + C54275 + C54276) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C172 * C1293 + C84246 * C1538) * C84344 +
                      (C172 * C1179 + C84246 * C1241) * C53879 + C591 * C53740 +
                      C208 * C53878) *
                         C84527 +
                     (C54276 + C54275 + C54274 + C54273) * C84576 +
                     (C54272 + C54271 + C54270 + C54269) * C84592 +
                     (C54268 + C54267 + C54266 + C54265) * C84602) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C1785 * C102 + C84596 * C173 + C1786 * C723 +
                       C84581 * C785 + C1787 * C1681 + C84558 * C1788) *
                          C53878 +
                      (C1785 * C252 + C84596 * C569 + C1786 * C837 +
                       C84581 * C1082 + C1787 * C1906 + C84558 * C2393) *
                          C53740 +
                      (C30262 + C30263 + C30264) * C53879 +
                      (C30775 + C30776 + C30777) * C84344) *
                         C40953 +
                     ((C1821 + C1822 + C1823) * C53878 +
                      (C2410 + C2411 + C2412) * C53740 +
                      (C55869 + C55870 + C55871) * C53879 +
                      (C56520 + C56521 + C56522) * C84344) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C1787 * C3628 + C84558 * C4043 + C1786 * C3631 +
                       C84581 * C4044 + C1785 * C1295 + C84596 * C1540) *
                          C84344 +
                      (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 +
                       C84581 * C3543 + C1785 * C1181 + C84596 * C1243) *
                          C53879 +
                      (C2415 + C2414 + C2413) * C53740 +
                      (C1829 + C1828 + C1827) * C53878) *
                         C84198 +
                     ((C56522 + C56521 + C56520) * C84344 +
                      (C55871 + C55870 + C55869) * C53879 +
                      (C2412 + C2411 + C2410) * C53740 +
                      (C1823 + C1822 + C1821) * C53878) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[57] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                      C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                         C84246 * C84602 +
                     (C54379 + C54380) * C84246 * C84592 +
                     (C54381 + C54382) * C84246 * C84576 +
                     (C54383 + C54384) * C84246 * C84527) *
                        C84603 * C84604 * C90 -
                    ((C54343 * C1179 + C54365 + C54365 + C84344 * C1585 +
                      C54342 * C106 + C54366 + C54366 + C53740 * C642) *
                         C84246 * C84527 +
                     (C54384 + C54383) * C84246 * C84576 +
                     (C54382 + C54381) * C84246 * C84592 +
                     (C54380 + C54379) * C84246 * C84602) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84596 +
                      (C54342 * C723 + C54986 + C54986 + C53740 * C1129 +
                       C54343 * C3446 + C54985 + C54985 + C84344 * C4128) *
                          C84581 +
                      (C54342 * C1681 + C56621 + C56621 + C53740 * C2489 +
                       C54343 * C3443 + C56622 + C56622 + C84344 * C4127) *
                          C84558) *
                         C40953 +
                     ((C54379 + C54380) * C84596 + (C56643 + C56644) * C84581 +
                      (C56645 + C56646) * C84558) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C54343 * C3441 + C56633 + C56633 + C84344 * C4123 +
                       C54342 * C1683 + C56634 + C56634 + C53740 * C2491) *
                          C84558 +
                      (C54343 * C3444 + C54981 + C54981 + C84344 * C4124 +
                       C54342 * C721 + C54982 + C54982 + C53740 * C1127) *
                          C84581 +
                      (C54382 + C54381) * C84596) *
                         C84198 +
                     ((C56646 + C56645) * C84558 + (C56644 + C56643) * C84581 +
                      (C54380 + C54379) * C84596) *
                         C40953) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C53740 +
           (C38939 * C1183 + C40351 + C40351 + C84602 * C1193 + C38941 * C1182 +
            C40350 + C40350 + C84592 * C1192 + C38943 * C1181 + C40349 +
            C40349 + C84576 * C1191 + C38945 * C1180 + C40348 + C40348 +
            C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C38945 * C8102 + C40344 + C40344 + C84527 * C8104 + C38943 * C3444 +
            C40345 + C40345 + C84576 * C3456 + C38941 * C3445 + C40346 +
            C40346 + C84592 * C3457 + C38939 * C3446 + C40347 + C40347 +
            C84602 * C3458) *
               C84344 +
           (C39697 + C39696 + C39695 + C39694) * C53740) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C53740 +
            (C44970 + C44971) * C84344) *
               C84596 +
           ((C41688 + C41689) * C53740 + (C44020 + C44021) * C84344) * C84581 +
           ((C41690 + C41691) * C53740 + (C51935 + C51936) * C84344) * C84558) *
              C84603 * C716 -
          (((C40961 * C21056 + C42362 + C42362 + C84198 * C21058 +
             C40959 * C16807 + C42363 + C42363 + C40953 * C16811) *
                C84344 +
            (C41693 + C41692) * C53740) *
               C84558 +
           ((C51936 + C51935) * C84344 + (C41691 + C41690) * C53740) * C84581 +
           ((C44021 + C44020) * C84344 + (C41689 + C41688) * C53740) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C38940 +
            (C172 * C108 + C84246 * C179) * C84602 + C202 * C38942 +
            C203 * C84592 + C204 * C38944 + C205 * C84576 + C206 * C38946 +
            C207 * C84527) *
               C53740 +
           (C5975 * C38940 + C5976 * C84602 + C4332 * C38942 + C4333 * C84592 +
            C4334 * C38944 + C4335 * C84576 + C8803 * C38946 + C8804 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C172 * C8103 + C84246 * C8180) * C84527 +
            (C172 * C8102 + C84246 * C8179) * C38946 +
            (C172 * C3450 + C84246 * C3549) * C84576 +
            (C172 * C3444 + C84246 * C3543) * C38944 +
            (C172 * C3451 + C84246 * C3551) * C84592 +
            (C172 * C3445 + C84246 * C3545) * C38942 +
            (C172 * C3452 + C84246 * C3553) * C84602 +
            (C172 * C3446 + C84246 * C3547) * C38940) *
               C84344 +
           ((C172 * C725 + C84246 * C787) * C84527 +
            (C172 * C720 + C84246 * C782) * C38946 +
            (C172 * C726 + C84246 * C788) * C84576 +
            (C172 * C721 + C84246 * C783) * C38944 +
            (C172 * C727 + C84246 * C789) * C84592 +
            (C172 * C722 + C84246 * C784) * C38942 +
            (C172 * C728 + C84246 * C790) * C84602 +
            (C172 * C723 + C84246 * C785) * C38940) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C40960 +
            (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
             C1787 * C1685 + C84558 * C1792) *
                C40953 +
            (C1821 + C1822 + C1823) * C40962 +
            (C1824 + C1825 + C1826) * C84198) *
               C53740 +
           ((C30262 + C30263 + C30264) * C40960 +
            (C30265 + C30266 + C30267) * C40953 +
            (C55869 + C55870 + C55871) * C40962 +
            (C55872 + C55873 + C55874) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C1787 * C21057 + C84558 * C21134 + C1786 * C3448 + C84581 * C3550 +
             C1785 * C3451 + C84596 * C3551) *
                C84198 +
            (C1787 * C21056 + C84558 * C21133 + C1786 * C3442 + C84581 * C3544 +
             C1785 * C3445 + C84596 * C3545) *
                C40962 +
            (C1787 * C16809 + C84558 * C16862 + C1786 * C3449 + C84581 * C3552 +
             C1785 * C3452 + C84596 * C3553) *
                C40953 +
            (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 + C84581 * C3546 +
             C1785 * C3446 + C84596 * C3547) *
                C40960) *
               C84344 +
           ((C1787 * C2601 + C84558 * C2717 + C1786 * C1686 + C84581 * C1793 +
             C1785 * C727 + C84596 * C789) *
                C84198 +
            (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
             C1785 * C722 + C84596 * C784) *
                C40962 +
            (C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
             C1785 * C728 + C84596 * C790) *
                C40953 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C40960) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C38940 +
           (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
               C84602 +
           (C53905 + C53906) * C38942 + (C53907 + C53908) * C84592 +
           (C53909 + C53910) * C38944 + (C53911 + C53912) * C84576 +
           (C53913 + C53914) * C38946 + (C53915 + C53916) * C84527) *
              C84246 * C84603 * C716 -
          ((C53879 * C8103 + C84344 * C8248 + C53878 * C725 + C53740 * C839) *
               C84527 +
           (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
               C38946 +
           (C53879 * C3450 + C84344 * C3637 + C53878 * C726 + C53740 * C840) *
               C84576 +
           (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
               C38944 +
           (C53879 * C3451 + C84344 * C3638 + C53878 * C727 + C53740 * C841) *
               C84592 +
           (C53879 * C3445 + C84344 * C3632 + C53878 * C722 + C53740 * C836) *
               C38942 +
           (C53879 * C3452 + C84344 * C3639 + C53878 * C728 + C53740 * C842) *
               C84602 +
           (C53879 * C3446 + C84344 * C3633 + C53878 * C723 + C53740 * C837) *
               C38940) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C40960 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C40953 +
            (C53905 + C53906) * C40962 + (C53907 + C53908) * C84198) *
               C84596 +
           ((C56957 + C56958) * C40960 + (C56959 + C56960) * C40953 +
            (C55989 + C55990) * C40962 + (C55991 + C55992) * C84198) *
               C84581 +
           ((C56961 + C56962) * C40960 + (C56963 + C56964) * C40953 +
            (C55993 + C55994) * C40962 + (C55995 + C55996) * C84198) *
               C84558) *
              C84603 * C716 -
          (((C53879 * C21057 + C84344 * C21202 + C53878 * C2601 +
             C53740 * C2797) *
                C84198 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C40962 +
            (C53879 * C16809 + C84344 * C16908 + C53878 * C2602 +
             C53740 * C2798) *
                C40953 +
            (C53879 * C16807 + C84344 * C16906 + C53878 * C2599 +
             C53740 * C2795) *
                C40960) *
               C84558 +
           ((C55996 + C55995) * C84198 + (C55994 + C55993) * C40962 +
            (C56964 + C56963) * C40953 + (C56962 + C56961) * C40960) *
               C84581 +
           ((C55992 + C55991) * C84198 + (C55990 + C55989) * C40962 +
            (C56960 + C56959) * C40953 + (C56958 + C56957) * C40960) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C172 +
            (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
             C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
                C84246) *
               C53740 +
           ((C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
             C38944 * C1181 + C84576 * C1186 + C38946 * C1180 +
             C84527 * C1185) *
                C172 +
            (C38940 * C1245 + C84602 * C1349 + C38942 * C1244 + C84592 * C1348 +
             C38944 * C1243 + C84576 * C1347 + C38946 * C1242 +
             C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C716 -
          (((C38946 * C8179 + C84527 * C8315 + C38944 * C3543 + C84576 * C3717 +
             C38942 * C3545 + C84592 * C3718 + C38940 * C3547 +
             C84602 * C3719) *
                C84246 +
            (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
             C38942 * C3445 + C84592 * C3451 + C38940 * C3446 +
             C84602 * C3452) *
                C172) *
               C84344 +
           ((C39927 + C39926 + C39925 + C39924) * C84246 +
            (C39923 + C39922 + C39921 + C39920) * C172) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C1785 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84596 +
            (C41928 + C41929) * C1786 + (C41930 + C41931) * C84581 +
            (C41932 + C41933) * C1787 + (C41934 + C41935) * C84558) *
               C53740 +
           ((C45308 + C45309) * C1785 + (C45310 + C45311) * C84596 +
            (C44334 + C44335) * C1786 + (C44336 + C44337) * C84581 +
            (C52239 + C52240) * C1787 + (C52241 + C52242) * C84558) *
               C84344) *
              C84603 * C716 -
          (((C40962 * C21133 + C84198 * C21269 + C40960 * C16860 +
             C40953 * C16952) *
                C84558 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C1787 +
            (C52242 + C52241) * C84581 + (C52240 + C52239) * C1786 +
            (C44337 + C44336) * C84596 + (C44335 + C44334) * C1785) *
               C84344 +
           ((C41939 + C41938) * C84558 + (C41937 + C41936) * C1787 +
            (C41935 + C41934) * C84581 + (C41933 + C41932) * C1786 +
            (C41931 + C41930) * C84596 + (C41929 + C41928) * C1785) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84602 +
            C408 * C84592 + C409 * C84576 + C410 * C84527) *
               C53740 +
           (C6268 * C84602 + C4637 * C84592 + C4638 * C84576 + C9045 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C378 * C8102 + C9715 + C9715 + C84246 * C8382) * C84527 +
            (C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C84576 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C84592 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C84602) *
               C84344 +
           ((C378 * C720 + C939 + C939 + C84246 * C933) * C84527 +
            (C378 * C721 + C940 + C940 + C84246 * C934) * C84576 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C84592 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C84602) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
             C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
             C84558 * C2093) *
                C40953 +
            (C2134 + C2135 + C2136) * C84198) *
               C53740 +
           ((C30535 + C30536 + C30537) * C40953 +
            (C56205 + C56206 + C56207) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C2092 * C21056 + C57161 + C57161 + C84558 * C21336 +
             C2091 * C3442 + C57162 + C57162 + C84581 * C3796 + C2090 * C3445 +
             C57163 + C57163 + C84596 * C3797) *
                C84198 +
            (C2092 * C16807 + C29728 + C29728 + C84558 * C16996 +
             C2091 * C3443 + C29729 + C29729 + C84581 * C3798 + C2090 * C3446 +
             C29730 + C29730 + C84596 * C3799) *
                C40953) *
               C84344 +
           ((C2092 * C2598 + C3017 + C3017 + C84558 * C3011 + C2091 * C1682 +
             C3018 + C3018 + C84581 * C2094 + C2090 * C722 + C3019 + C3019 +
             C84596 * C935) *
                C84198 +
            (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
             C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
             C84596 * C936) *
                C40953) *
               C53740) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C172 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84246) *
               C84602 +
           ((C53905 + C53906) * C172 + (C54127 + C54128) * C84246) * C84592 +
           ((C53909 + C53910) * C172 + (C54129 + C54130) * C84246) * C84576 +
           ((C53913 + C53914) * C172 + (C54131 + C54132) * C84246) * C84527) *
              C84603 * C716 -
          (((C53879 * C8179 + C84344 * C8457 + C53878 * C782 + C53740 * C985) *
                C84246 +
            (C53879 * C8102 + C84344 * C8247 + C53878 * C720 + C53740 * C834) *
                C172) *
               C84527 +
           ((C53879 * C3543 + C84344 * C3884 + C53878 * C783 + C53740 * C986) *
                C84246 +
            (C53879 * C3444 + C84344 * C3631 + C53878 * C721 + C53740 * C835) *
                C172) *
               C84576 +
           ((C53879 * C3545 + C84344 * C3886 + C53878 * C784 + C53740 * C987) *
                C84246 +
            (C53879 * C3445 + C84344 * C3632 + C53878 * C722 + C53740 * C836) *
                C172) *
               C84592 +
           ((C53879 * C3547 + C84344 * C3888 + C53878 * C785 + C53740 * C988) *
                C84246 +
            (C53879 * C3446 + C84344 * C3633 + C53878 * C723 + C53740 * C837) *
                C172) *
               C84602) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C1785 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84596 +
            (C56957 + C56958) * C1786 + (C57270 + C57271) * C84581 +
            (C56961 + C56962) * C1787 + (C57272 + C57273) * C84558) *
               C40953 +
           ((C53905 + C53906) * C1785 + (C54127 + C54128) * C84596 +
            (C55989 + C55990) * C1786 + (C56314 + C56315) * C84581 +
            (C55993 + C55994) * C1787 + (C56316 + C56317) * C84558) *
               C84198) *
              C84603 * C716 -
          (((C53879 * C21133 + C84344 * C21411 + C53878 * C2714 +
             C53740 * C3097) *
                C84558 +
            (C53879 * C21056 + C84344 * C21201 + C53878 * C2598 +
             C53740 * C2794) *
                C1787 +
            (C56317 + C56316) * C84581 + (C55994 + C55993) * C1786 +
            (C56315 + C56314) * C84596 + (C55990 + C55989) * C1785) *
               C84198 +
           ((C53879 * C16860 + C84344 * C17045 + C53878 * C2715 +
             C53740 * C3098) *
                C84558 +
            (C53879 * C16807 + C84344 * C16906 + C53878 * C2599 +
             C53740 * C2795) *
                C1787 +
            (C57273 + C57272) * C84581 + (C56962 + C56961) * C1786 +
            (C57271 + C57270) * C84596 + (C56958 + C56957) * C1785) *
               C40953) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C53878 +
           (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
            C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
               C53740 +
           (C38940 * C1183 + C84602 * C1188 + C38942 * C1182 + C84592 * C1187 +
            C38944 * C1181 + C84576 * C1186 + C38946 * C1180 + C84527 * C1185) *
               C53879 +
           (C38940 * C1297 + C84602 * C1495 + C38942 * C1296 + C84592 * C1494 +
            C38944 * C1295 + C84576 * C1493 + C38946 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C38946 * C8247 + C84527 * C8524 + C38944 * C3631 + C84576 * C3966 +
            C38942 * C3632 + C84592 * C3967 + C38940 * C3633 + C84602 * C3968) *
               C84344 +
           (C38946 * C8102 + C84527 * C8103 + C38944 * C3444 + C84576 * C3450 +
            C38942 * C3445 + C84592 * C3451 + C38940 * C3446 + C84602 * C3452) *
               C53879 +
           (C40145 + C40144 + C40143 + C40142) * C53740 +
           (C39923 + C39922 + C39921 + C39920) * C53878) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C53878 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C53740 +
            (C45308 + C45309) * C53879 + (C45642 + C45643) * C84344) *
               C84596 +
           ((C41928 + C41929) * C53878 + (C42158 + C42159) * C53740 +
            (C44334 + C44335) * C53879 + (C44652 + C44653) * C84344) *
               C84581 +
           ((C41932 + C41933) * C53878 + (C42160 + C42161) * C53740 +
            (C52239 + C52240) * C53879 + (C52547 + C52548) * C84344) *
               C84558) *
              C84603 * C716 -
          (((C40962 * C21201 + C84198 * C21478 + C40960 * C16906 +
             C40953 * C17089) *
                C84344 +
            (C40962 * C21056 + C84198 * C21057 + C40960 * C16807 +
             C40953 * C16809) *
                C53879 +
            (C42163 + C42162) * C53740 + (C41937 + C41936) * C53878) *
               C84558 +
           ((C52548 + C52547) * C84344 + (C52240 + C52239) * C53879 +
            (C42161 + C42160) * C53740 + (C41933 + C41932) * C53878) *
               C84581 +
           ((C44653 + C44652) * C84344 + (C44335 + C44334) * C53879 +
            (C42159 + C42158) * C53740 + (C41929 + C41928) * C53878) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[58] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C53878 +
                      (C172 * C252 + C84246 * C569) * C53740 + C5975 * C53879 +
                      C6525 * C84344) *
                         C84602 +
                     (C54265 + C54266 + C54267 + C54268) * C84592 +
                     (C54269 + C54270 + C54271 + C54272) * C84576 +
                     (C54273 + C54274 + C54275 + C54276) * C84527) *
                        C84603 * C716 -
                    (((C172 * C8247 + C84246 * C8591) * C84344 +
                      (C172 * C8102 + C84246 * C8179) * C53879 +
                      (C172 * C834 + C84246 * C1079) * C53740 +
                      (C172 * C720 + C84246 * C782) * C53878) *
                         C84527 +
                     ((C172 * C3631 + C84246 * C4044) * C84344 +
                      (C172 * C3444 + C84246 * C3543) * C53879 +
                      (C172 * C835 + C84246 * C1080) * C53740 +
                      (C172 * C721 + C84246 * C783) * C53878) *
                         C84576 +
                     ((C172 * C3632 + C84246 * C4046) * C84344 +
                      (C172 * C3445 + C84246 * C3545) * C53879 +
                      (C172 * C836 + C84246 * C1081) * C53740 +
                      (C172 * C722 + C84246 * C784) * C53878) *
                         C84592 +
                     ((C172 * C3633 + C84246 * C4048) * C84344 +
                      (C172 * C3446 + C84246 * C3547) * C53879 +
                      (C172 * C837 + C84246 * C1082) * C53740 +
                      (C172 * C723 + C84246 * C785) * C53878) *
                         C84602) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C1785 * C102 + C84596 * C173 + C1786 * C723 +
                       C84581 * C785 + C1787 * C1681 + C84558 * C1788) *
                          C53878 +
                      (C1785 * C252 + C84596 * C569 + C1786 * C837 +
                       C84581 * C1082 + C1787 * C1906 + C84558 * C2393) *
                          C53740 +
                      (C30262 + C30263 + C30264) * C53879 +
                      (C30775 + C30776 + C30777) * C84344) *
                         C40953 +
                     ((C1821 + C1822 + C1823) * C53878 +
                      (C2410 + C2411 + C2412) * C53740 +
                      (C55869 + C55870 + C55871) * C53879 +
                      (C56520 + C56521 + C56522) * C84344) *
                         C84198) *
                        C84603 * C716 -
                    (((C1787 * C21201 + C84558 * C21545 + C1786 * C3629 +
                       C84581 * C4045 + C1785 * C3632 + C84596 * C4046) *
                          C84344 +
                      (C1787 * C21056 + C84558 * C21133 + C1786 * C3442 +
                       C84581 * C3544 + C1785 * C3445 + C84596 * C3545) *
                          C53879 +
                      (C1787 * C2794 + C84558 * C3275 + C1786 * C1907 +
                       C84581 * C2394 + C1785 * C836 + C84596 * C1081) *
                          C53740 +
                      (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 +
                       C84581 * C1789 + C1785 * C722 + C84596 * C784) *
                          C53878) *
                         C84198 +
                     ((C1787 * C16906 + C84558 * C17133 + C1786 * C3630 +
                       C84581 * C4047 + C1785 * C3633 + C84596 * C4048) *
                          C84344 +
                      (C1787 * C16807 + C84558 * C16860 + C1786 * C3443 +
                       C84581 * C3546 + C1785 * C3446 + C84596 * C3547) *
                          C53879 +
                      (C1787 * C2795 + C84558 * C3276 + C1786 * C1906 +
                       C84581 * C2393 + C1785 * C837 + C84596 * C1082) *
                          C53740 +
                      (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 +
                       C84581 * C1788 + C1785 * C723 + C84596 * C785) *
                          C53878) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezz[58] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                      C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                         C84246 * C84602 +
                     (C54379 + C54380) * C84246 * C84592 +
                     (C54381 + C54382) * C84246 * C84576 +
                     (C54383 + C54384) * C84246 * C84527) *
                        C84603 * C716 -
                    ((C54343 * C8102 + C54979 + C54979 + C84344 * C8658 +
                      C54342 * C720 + C54980 + C54980 + C53740 * C1126) *
                         C84246 * C84527 +
                     (C54343 * C3444 + C54981 + C54981 + C84344 * C4124 +
                      C54342 * C721 + C54982 + C54982 + C53740 * C1127) *
                         C84246 * C84576 +
                     (C54343 * C3445 + C54983 + C54983 + C84344 * C4126 +
                      C54342 * C722 + C54984 + C54984 + C53740 * C1128) *
                         C84246 * C84592 +
                     (C54343 * C3446 + C54985 + C54985 + C84344 * C4128 +
                      C54342 * C723 + C54986 + C54986 + C53740 * C1129) *
                         C84246 * C84602) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84596 +
                      (C57588 + C57589) * C84581 + (C57590 + C57591) * C84558) *
                         C40953 +
                     ((C54379 + C54380) * C84596 + (C56643 + C56644) * C84581 +
                      (C56645 + C56646) * C84558) *
                         C84198) *
                        C84603 * C716 -
                    (((C54343 * C21056 + C57576 + C57576 + C84344 * C21612 +
                       C54342 * C2598 + C57577 + C57577 + C53740 * C3352) *
                          C84558 +
                      (C56646 + C56645) * C84581 + (C56644 + C56643) * C84596) *
                         C84198 +
                     ((C54343 * C16807 + C57578 + C57578 + C84344 * C17177 +
                       C54342 * C2599 + C57579 + C57579 + C53740 * C3353) *
                          C84558 +
                      (C57591 + C57590) * C84581 + (C57589 + C57588) * C84596) *
                         C40953) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38939 * C102 + C38948 + C38948 + C84602 * C114 + C38941 * C103 +
            C38949 + C38949 + C84592 * C115 + C38943 * C104 + C38950 + C38950 +
            C84576 * C116 + C38945 * C105 + C38951 + C38951 + C84527 * C117) *
               C53740 +
           (C55073 + C55074 + C55075 + C55076) * C84344) *
              C84246 * C1177 -
          ((C38945 * C4215 + C55061 + C55061 + C84527 * C4223 + C38943 * C4214 +
            C55062 + C55062 + C84576 * C4222 + C38941 * C4213 + C55063 +
            C55063 + C84592 * C4221 + C38939 * C4212 + C55064 + C55064 +
            C84602 * C4220) *
               C84344 +
           (C55076 + C55075 + C55074 + C55073) * C53740) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40959 * C102 + C40964 + C40964 + C40953 * C114 + C40961 * C103 +
             C40965 + C40965 + C84198 * C115) *
                C53740 +
            (C44970 + C44971) * C84344) *
               C84596 +
           ((C41688 + C41689) * C53740 + (C44020 + C44021) * C84344) * C84581 +
           ((C41690 + C41691) * C53740 + (C51935 + C51936) * C84344) * C84558) *
              C1177 -
          (((C40961 * C17255 + C44010 + C44010 + C84198 * C17259 +
             C40959 * C17254 + C44011 + C44011 + C40953 * C17258) *
                C84344 +
            (C51936 + C51935) * C53740) *
               C84558 +
           ((C44023 + C44022) * C84344 + (C44021 + C44020) * C53740) * C84581 +
           ((C44973 + C44972) * C84344 + (C44971 + C44970) * C53740) * C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C38940 +
                      (C172 * C108 + C84246 * C179) * C84602 + C202 * C38942 +
                      C203 * C84592 + C204 * C38944 + C205 * C84576 +
                      C206 * C38946 + C207 * C84527) *
                         C53740 +
                     (C55143 + C55144 + C55145 + C55146 + C55147 + C55148 +
                      C55149 + C55150) *
                         C84344) *
                        C1177 -
                    (((C172 * C4219 + C84246 * C4314) * C84527 +
                      (C172 * C4215 + C84246 * C4310) * C38946 +
                      C4339 * C84576 + C4338 * C38944 + C4337 * C84592 +
                      C4336 * C38942 + C5978 * C84602 + C5977 * C38940) *
                         C84344 +
                     (C55150 + C55149 + C55148 + C55147 + C55146 + C55145 +
                      C55144 + C55143) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C1785 * C102 + C84596 * C173 + C1786 * C723 +
                       C84581 * C785 + C1787 * C1681 + C84558 * C1788) *
                          C40960 +
                      (C1785 * C108 + C84596 * C179 + C1786 * C728 +
                       C84581 * C790 + C1787 * C1685 + C84558 * C1792) *
                          C40953 +
                      (C1821 + C1822 + C1823) * C40962 +
                      (C1824 + C1825 + C1826) * C84198) *
                         C53740 +
                     ((C30262 + C30263 + C30264) * C40960 +
                      (C30265 + C30266 + C30267) * C40953 +
                      (C55869 + C55870 + C55871) * C40962 +
                      (C55872 + C55873 + C55874) * C84198) *
                         C84344) *
                        C1177 -
                    (((C1787 * C17257 + C84558 * C17346 + C1786 * C5117 +
                       C84581 * C5203 + C1785 * C4217 + C84596 * C4312) *
                          C84198 +
                      (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 +
                       C84581 * C5200 + C1785 * C4213 + C84596 * C4308) *
                          C40962 +
                      (C30273 + C30272 + C30271) * C40953 +
                      (C30270 + C30269 + C30268) * C40960) *
                         C84344 +
                     ((C55874 + C55873 + C55872) * C84198 +
                      (C55871 + C55870 + C55869) * C40962 +
                      (C30267 + C30266 + C30265) * C40953 +
                      (C30264 + C30263 + C30262) * C40960) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
               C38940 +
           (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
               C84602 +
           (C53905 + C53906) * C38942 + (C53907 + C53908) * C84592 +
           (C53909 + C53910) * C38944 + (C53911 + C53912) * C84576 +
           (C53913 + C53914) * C38946 + (C53915 + C53916) * C84527) *
              C84246 * C1177 -
          ((C53879 * C4219 + C84344 * C4423 + C53878 * C1185 + C53740 * C1299) *
               C84527 +
           (C53879 * C4215 + C84344 * C4419 + C53878 * C1180 + C53740 * C1294) *
               C38946 +
           (C53879 * C4218 + C84344 * C4422 + C53878 * C1186 + C53740 * C1300) *
               C84576 +
           (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 + C53740 * C1295) *
               C38944 +
           (C53879 * C4217 + C84344 * C4421 + C53878 * C1187 + C53740 * C1301) *
               C84592 +
           (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 + C53740 * C1296) *
               C38942 +
           (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 + C53740 * C1302) *
               C84602 +
           (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 + C53740 * C1297) *
               C38940) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C40960 +
            (C53878 * C108 + C53740 * C258 + C53879 * C1188 + C84344 * C1302) *
                C40953 +
            (C53905 + C53906) * C40962 + (C53907 + C53908) * C84198) *
               C84596 +
           ((C56957 + C56958) * C40960 + (C56959 + C56960) * C40953 +
            (C55989 + C55990) * C40962 + (C55991 + C55992) * C84198) *
               C84581 +
           ((C56961 + C56962) * C40960 + (C56963 + C56964) * C40953 +
            (C55993 + C55994) * C40962 + (C55995 + C55996) * C84198) *
               C84558) *
              C1177 -
          (((C53879 * C17257 + C84344 * C17424 + C53878 * C3448 +
             C53740 * C3635) *
                C84198 +
            (C53879 * C17255 + C84344 * C17422 + C53878 * C3442 +
             C53740 * C3629) *
                C40962 +
            (C53879 * C17256 + C84344 * C17423 + C53878 * C3449 +
             C53740 * C3636) *
                C40953 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C40960) *
               C84558 +
           ((C53879 * C5117 + C84344 * C5283 + C53878 * C3451 +
             C53740 * C3638) *
                C84198 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C40962 +
            (C53879 * C5118 + C84344 * C5284 + C53878 * C3452 +
             C53740 * C3639) *
                C40953 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C40960) *
               C84581 +
           ((C53879 * C4217 + C84344 * C4421 + C53878 * C1187 +
             C53740 * C1301) *
                C84198 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C40962 +
            (C53879 * C4216 + C84344 * C4420 + C53878 * C1188 +
             C53740 * C1302) *
                C40953 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C40960) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
             C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
                C172 +
            (C38940 * C173 + C84602 * C330 + C38942 * C174 + C84592 * C331 +
             C38944 * C175 + C84576 * C332 + C38946 * C176 + C84527 * C333) *
                C84246) *
               C53740 +
           ((C55299 + C55300 + C55301 + C55302) * C172 +
            (C55303 + C55304 + C55305 + C55306) * C84246) *
               C84344) *
              C1177 -
          (((C38946 * C4310 + C84527 * C4537 + C38944 * C4309 + C84576 * C4536 +
             C38942 * C4308 + C84592 * C4535 + C38940 * C4307 +
             C84602 * C4534) *
                C84246 +
            (C38946 * C4215 + C84527 * C4219 + C38944 * C4214 + C84576 * C4218 +
             C38942 * C4213 + C84592 * C4217 + C38940 * C4212 +
             C84602 * C4216) *
                C172) *
               C84344 +
           ((C55306 + C55305 + C55304 + C55303) * C84246 +
            (C55302 + C55301 + C55300 + C55299) * C172) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C1785 +
            (C40960 * C173 + C40953 * C330 + C40962 * C174 + C84198 * C331) *
                C84596 +
            (C41928 + C41929) * C1786 + (C41930 + C41931) * C84581 +
            (C41932 + C41933) * C1787 + (C41934 + C41935) * C84558) *
               C53740 +
           ((C45308 + C45309) * C1785 + (C45310 + C45311) * C84596 +
            (C44334 + C44335) * C1786 + (C44336 + C44337) * C84581 +
            (C52239 + C52240) * C1787 + (C52241 + C52242) * C84558) *
               C84344) *
              C1177 -
          (((C40962 * C17344 + C84198 * C17500 + C40960 * C17343 +
             C40953 * C17499) *
                C84558 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C1787 +
            (C44341 + C44340) * C84581 + (C44339 + C44338) * C1786 +
            (C45315 + C45314) * C84596 + (C45313 + C45312) * C1785) *
               C84344 +
           ((C52242 + C52241) * C84558 + (C52240 + C52239) * C1787 +
            (C44337 + C44336) * C84581 + (C44335 + C44334) * C1786 +
            (C45311 + C45310) * C84596 + (C45309 + C45308) * C1785) *
               C53740) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C378 * C102 + C386 + C386 + C84246 * C379) * C84602 +
                      C408 * C84592 + C409 * C84576 + C410 * C84527) *
                         C53740 +
                     (C55373 + C55374 + C55375 + C55376) * C84344) *
                        C1177 -
                    (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84527 +
                      C4640 * C84576 + C4639 * C84592 + C6269 * C84602) *
                         C84344 +
                     (C55376 + C55375 + C55374 + C55373) * C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C2090 * C102 + C2098 + C2098 + C84596 * C379 +
                       C2091 * C723 + C2099 + C2099 + C84581 * C936 +
                       C2092 * C1681 + C2100 + C2100 + C84558 * C2093) *
                          C40953 +
                      (C2134 + C2135 + C2136) * C84198) *
                         C53740 +
                     ((C30535 + C30536 + C30537) * C40953 +
                      (C56205 + C56206 + C56207) * C84198) *
                         C84344) *
                        C1177 -
                    (((C2092 * C17255 + C29008 + C29008 + C84558 * C17576 +
                       C2091 * C5114 + C29009 + C29009 + C84581 * C5437 +
                       C2090 * C4213 + C29010 + C29010 + C84596 * C4613) *
                          C84198 +
                      (C30540 + C30539 + C30538) * C40953) *
                         C84344 +
                     ((C56207 + C56206 + C56205) * C84198 +
                      (C30537 + C30536 + C30535) * C40953) *
                         C53740) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C172 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84246) *
               C84602 +
           ((C53905 + C53906) * C172 + (C54127 + C54128) * C84246) * C84592 +
           ((C53909 + C53910) * C172 + (C54129 + C54130) * C84246) * C84576 +
           ((C53913 + C53914) * C172 + (C54131 + C54132) * C84246) * C84527) *
              C1177 -
          (((C53879 * C4310 + C84344 * C4717 + C53878 * C1242 +
             C53740 * C1445) *
                C84246 +
            (C53879 * C4215 + C84344 * C4419 + C53878 * C1180 +
             C53740 * C1294) *
                C172) *
               C84527 +
           ((C53879 * C4309 + C84344 * C4716 + C53878 * C1243 +
             C53740 * C1446) *
                C84246 +
            (C53879 * C4214 + C84344 * C4418 + C53878 * C1181 +
             C53740 * C1295) *
                C172) *
               C84576 +
           ((C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C84246 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C172) *
               C84592 +
           ((C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C84246 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C172) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C53878 * C102 + C53740 * C252 + C53879 * C1183 + C84344 * C1297) *
                C1785 +
            (C53878 * C173 + C53740 * C453 + C53879 * C1245 + C84344 * C1448) *
                C84596 +
            (C56957 + C56958) * C1786 + (C57270 + C57271) * C84581 +
            (C56961 + C56962) * C1787 + (C57272 + C57273) * C84558) *
               C40953 +
           ((C53905 + C53906) * C1785 + (C54127 + C54128) * C84596 +
            (C55989 + C55990) * C1786 + (C56314 + C56315) * C84581 +
            (C55993 + C55994) * C1787 + (C56316 + C56317) * C84558) *
               C84198) *
              C1177 -
          (((C53879 * C17344 + C84344 * C17658 + C53878 * C3544 +
             C53740 * C3885) *
                C84558 +
            (C53879 * C17255 + C84344 * C17422 + C53878 * C3442 +
             C53740 * C3629) *
                C1787 +
            (C53879 * C5200 + C84344 * C5520 + C53878 * C3545 +
             C53740 * C3886) *
                C84581 +
            (C53879 * C5114 + C84344 * C5280 + C53878 * C3445 +
             C53740 * C3632) *
                C1786 +
            (C53879 * C4308 + C84344 * C4715 + C53878 * C1244 +
             C53740 * C1447) *
                C84596 +
            (C53879 * C4213 + C84344 * C4417 + C53878 * C1182 +
             C53740 * C1296) *
                C1785) *
               C84198 +
           ((C53879 * C17343 + C84344 * C17657 + C53878 * C3546 +
             C53740 * C3887) *
                C84558 +
            (C53879 * C17254 + C84344 * C17421 + C53878 * C3443 +
             C53740 * C3630) *
                C1787 +
            (C53879 * C5201 + C84344 * C5521 + C53878 * C3547 +
             C53740 * C3888) *
                C84581 +
            (C53879 * C5115 + C84344 * C5281 + C53878 * C3446 +
             C53740 * C3633) *
                C1786 +
            (C53879 * C4307 + C84344 * C4714 + C53878 * C1245 +
             C53740 * C1448) *
                C84596 +
            (C53879 * C4212 + C84344 * C4416 + C53878 * C1183 +
             C53740 * C1297) *
                C1785) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C38940 * C102 + C84602 * C108 + C38942 * C103 + C84592 * C109 +
            C38944 * C104 + C84576 * C110 + C38946 * C105 + C84527 * C111) *
               C53878 +
           (C38940 * C252 + C84602 * C521 + C38942 * C253 + C84592 * C522 +
            C38944 * C254 + C84576 * C523 + C38946 * C255 + C84527 * C524) *
               C53740 +
           (C55299 + C55300 + C55301 + C55302) * C53879 +
           (C55517 + C55518 + C55519 + C55520) * C84344) *
              C84246 * C1177 -
          ((C38946 * C4419 + C84527 * C4813 + C38944 * C4418 + C84576 * C4812 +
            C38942 * C4417 + C84592 * C4811 + C38940 * C4416 + C84602 * C4810) *
               C84344 +
           (C38946 * C4215 + C84527 * C4219 + C38944 * C4214 + C84576 * C4218 +
            C38942 * C4213 + C84592 * C4217 + C38940 * C4212 + C84602 * C4216) *
               C53879 +
           (C55520 + C55519 + C55518 + C55517) * C53740 +
           (C55302 + C55301 + C55300 + C55299) * C53878) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C40960 * C102 + C40953 * C108 + C40962 * C103 + C84198 * C109) *
                C53878 +
            (C40960 * C252 + C40953 * C521 + C40962 * C253 + C84198 * C522) *
                C53740 +
            (C45308 + C45309) * C53879 + (C45642 + C45643) * C84344) *
               C84596 +
           ((C41928 + C41929) * C53878 + (C42158 + C42159) * C53740 +
            (C44334 + C44335) * C53879 + (C44652 + C44653) * C84344) *
               C84581 +
           ((C41932 + C41933) * C53878 + (C42160 + C42161) * C53740 +
            (C52239 + C52240) * C53879 + (C52547 + C52548) * C84344) *
               C84558) *
              C1177 -
          (((C40962 * C17422 + C84198 * C17734 + C40960 * C17421 +
             C40953 * C17733) *
                C84344 +
            (C40962 * C17255 + C84198 * C17257 + C40960 * C17254 +
             C40953 * C17256) *
                C53879 +
            (C52548 + C52547) * C53740 + (C52240 + C52239) * C53878) *
               C84558 +
           ((C44655 + C44654) * C84344 + (C44339 + C44338) * C53879 +
            (C44653 + C44652) * C53740 + (C44335 + C44334) * C53878) *
               C84581 +
           ((C45645 + C45644) * C84344 + (C45313 + C45312) * C53879 +
            (C45643 + C45642) * C53740 + (C45309 + C45308) * C53878) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C53878 +
            (C172 * C252 + C84246 * C569) * C53740 + C5975 * C53879 +
            C6525 * C84344) *
               C84602 +
           (C54265 + C54266 + C54267 + C54268) * C84592 +
           (C54269 + C54270 + C54271 + C54272) * C84576 +
           (C54273 + C54274 + C54275 + C54276) * C84527) *
              C1177 -
          (((C172 * C4419 + C84246 * C4891) * C84344 +
            (C172 * C4215 + C84246 * C4310) * C53879 + C9275 * C53740 +
            C8803 * C53878) *
               C84527 +
           (C4912 * C84344 + C4338 * C53879 + C4911 * C53740 + C4334 * C53878) *
               C84576 +
           (C4910 * C84344 + C4336 * C53879 + C4909 * C53740 + C4332 * C53878) *
               C84592 +
           (C6526 * C84344 + C5977 * C53879 + C6525 * C53740 + C5975 * C53878) *
               C84602) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C53878 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C53740 +
            (C30262 + C30263 + C30264) * C53879 +
            (C30775 + C30776 + C30777) * C84344) *
               C40953 +
           ((C1821 + C1822 + C1823) * C53878 +
            (C2410 + C2411 + C2412) * C53740 +
            (C55869 + C55870 + C55871) * C53879 +
            (C56520 + C56521 + C56522) * C84344) *
               C84198) *
              C1177 -
          (((C1787 * C17422 + C84558 * C17810 + C1786 * C5280 + C84581 * C5674 +
             C1785 * C4417 + C84596 * C4889) *
                C84344 +
            (C1787 * C17255 + C84558 * C17344 + C1786 * C5114 + C84581 * C5200 +
             C1785 * C4213 + C84596 * C4308) *
                C53879 +
            (C56522 + C56521 + C56520) * C53740 +
            (C55871 + C55870 + C55869) * C53878) *
               C84198 +
           ((C30780 + C30779 + C30778) * C84344 +
            (C30270 + C30269 + C30268) * C53879 +
            (C30777 + C30776 + C30775) * C53740 +
            (C30264 + C30263 + C30262) * C53878) *
               C40953) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                      C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                         C84246 * C84602 +
                     (C54379 + C54380) * C84246 * C84592 +
                     (C54381 + C54382) * C84246 * C84576 +
                     (C54383 + C54384) * C84246 * C84527) *
                        C1177 -
                    ((C54343 * C4215 + C55653 + C55653 + C84344 * C4996 +
                      C54342 * C1180 + C55654 + C55654 + C53740 * C1586) *
                         C84246 * C84527 +
                     (C54343 * C4214 + C55655 + C55655 + C84344 * C4995 +
                      C54342 * C1181 + C55656 + C55656 + C53740 * C1587) *
                         C84246 * C84576 +
                     (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
                      C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                         C84246 * C84592 +
                     (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
                      C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                         C84246 * C84602) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C54342 * C102 + C54345 + C54345 + C53740 * C638 +
                       C54343 * C1183 + C54346 + C54346 + C84344 * C1589) *
                          C84596 +
                      (C57588 + C57589) * C84581 + (C57590 + C57591) * C84558) *
                         C40953 +
                     ((C54379 + C54380) * C84596 + (C56643 + C56644) * C84581 +
                      (C56645 + C56646) * C84558) *
                         C84198) *
                        C1177 -
                    (((C54343 * C17255 + C58474 + C58474 + C84344 * C17886 +
                       C54342 * C3442 + C58475 + C58475 + C53740 * C4125) *
                          C84558 +
                      (C54343 * C5114 + C58476 + C58476 + C84344 * C5751 +
                       C54342 * C3445 + C58477 + C58477 + C53740 * C4126) *
                          C84581 +
                      (C54343 * C4213 + C55657 + C55657 + C84344 * C4994 +
                       C54342 * C1182 + C55658 + C55658 + C53740 * C1588) *
                          C84596) *
                         C84198 +
                     ((C54343 * C17254 + C58478 + C58478 + C84344 * C17885 +
                       C54342 * C3443 + C58479 + C58479 + C53740 * C4127) *
                          C84558 +
                      (C54343 * C5115 + C58480 + C58480 + C84344 * C5752 +
                       C54342 * C3446 + C58481 + C58481 + C53740 * C4128) *
                          C84581 +
                      (C54343 * C4212 + C55659 + C55659 + C84344 * C4993 +
                       C54342 * C1183 + C55660 + C55660 + C53740 * C1589) *
                          C84596) *
                         C40953) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84257 * C84528 +
           (C6684 * C723 + C6697 + C6697 + C6678 * C733 + C6686 * C722 + C6698 +
            C6698 + C6679 * C732 + C6688 * C721 + C6699 + C6699 + C6680 * C731 +
            C6690 * C720 + C6700 + C6700 + C84527 * C730) *
               C84257 * C84304) *
              C84603 * C84604 * C90 -
          ((C6690 * C719 + C6701 + C6701 + C84527 * C729 + C6688 * C720 +
            C6702 + C6702 + C6680 * C730 + C6686 * C721 + C6703 + C6703 +
            C6679 * C731 + C6684 * C722 + C6704 + C6704 + C6678 * C732) *
               C84257 * C84304 +
           (C6690 * C106 + C6705 + C6705 + C84527 * C118 + C6688 * C105 +
            C6706 + C6706 + C6680 * C117 + C6686 * C104 + C6707 + C6707 +
            C6679 * C116 + C6684 * C103 + C6708 + C6708 + C6678 * C115) *
               C84257 * C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C84257 * C19636 +
           (C19640 * C723 + C19647 + C19647 + C84509 * C733 + C19642 * C722 +
            C19648 + C19648 + C84198 * C732) *
               C84257 * C19637 +
           (C19640 * C1681 + C19649 + C19649 + C84509 * C1689 + C19642 * C1682 +
            C19650 + C19650 + C84198 * C1690) *
               C84257 * C19638 +
           (C19640 * C2599 + C19651 + C19651 + C84509 * C2605 + C19642 * C2598 +
            C19652 + C19652 + C84198 * C2604) *
               C84257 * C84536) *
              C84603 * C84604 * C90 -
          ((C19642 * C2597 + C19653 + C19653 + C84198 * C2603 + C19640 * C2598 +
            C19654 + C19654 + C84509 * C2604) *
               C84257 * C84536 +
           (C19642 * C1683 + C19655 + C19655 + C84198 * C1691 + C19640 * C1682 +
            C19656 + C19656 + C84509 * C1690) *
               C84257 * C19638 +
           (C19642 * C721 + C19657 + C19657 + C84198 * C731 + C19640 * C722 +
            C19658 + C19658 + C84509 * C732) *
               C84257 * C19637 +
           (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
            C19660 + C19660 + C84509 * C115) *
               C84257 * C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C6685 +
           (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
               C6678 +
           (C6801 + C6802) * C6687 + (C6803 + C6804) * C6679 +
           (C6805 + C6806) * C6689 + (C6807 + C6808) * C6680 +
           (C6809 + C6810) * C6691 + (C6811 + C6812) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C6775 * C724 + C84304 * C786 + C6774 * C112 + C84528 * C183) *
               C84527 +
           (C6775 * C719 + C84304 * C781 + C6774 * C106 + C84528 * C177) *
               C6691 +
           (C6812 + C6811) * C6680 + (C6810 + C6809) * C6689 +
           (C6808 + C6807) * C6679 + (C6806 + C6805) * C6687 +
           (C6804 + C6803) * C6678 + (C6802 + C6801) * C6685) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C82024 +
           (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
            C19728 * C1685 + C19638 * C1792 + C19729 * C2602 + C84536 * C2718) *
               C84509 +
           (C19747 + C19748 + C19749 + C19750) * C81997 +
           (C19751 + C19752 + C19753 + C19754) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C19729 * C2600 + C84536 * C2716 + C19728 * C1687 + C19638 * C1794 +
            C19727 * C726 + C19637 * C788 + C19726 * C110 + C19636 * C181) *
               C84198 +
           (C19729 * C2597 + C84536 * C2713 + C19728 * C1683 + C19638 * C1790 +
            C19727 * C721 + C19637 * C783 + C19726 * C104 + C19636 * C175) *
               C81997 +
           (C19754 + C19753 + C19752 + C19751) * C84509 +
           (C19750 + C19749 + C19748 + C19747) * C82024) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6685 +
            (C251 * C108 + C84257 * C258) * C6678 + C281 * C6687 +
            C282 * C6679 + C283 * C6689 + C284 * C6680 + C285 * C6691 +
            C286 * C84527) *
               C84528 +
           (C2816 * C6685 + C2817 * C6678 + C1931 * C6687 + C1932 * C6679 +
            C1933 * C6689 + C1934 * C6680 + C6883 * C6691 + C6884 * C84527) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C251 * C724 + C84257 * C838) * C84527 +
            (C251 * C719 + C84257 * C833) * C6691 + C6884 * C6680 +
            C6883 * C6689 + C1934 * C6679 + C1933 * C6687 + C1932 * C6678 +
            C1931 * C6685) *
               C84304 +
           (C288 * C84527 + C287 * C6691 + C286 * C6680 + C285 * C6689 +
            C284 * C6679 + C283 * C6687 + C282 * C6678 + C281 * C6685) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82024 +
            (C251 * C108 + C84257 * C258) * C84509 + C281 * C81997 +
            C282 * C84198) *
               C19636 +
           (C2816 * C82024 + C2817 * C84509 + C1931 * C81997 + C1932 * C84198) *
               C19637 +
           (C2818 * C82024 + C2819 * C84509 + C1935 * C81997 + C1936 * C84198) *
               C19638 +
           (C16433 * C82024 + C16434 * C84509 + C19825 * C81997 +
            C19826 * C84198) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C251 * C2600 + C84257 * C2796) * C84198 +
            (C251 * C2597 + C84257 * C2793) * C81997 + C19826 * C84509 +
            C19825 * C82024) *
               C84536 +
           (C1938 * C84198 + C1937 * C81997 + C1936 * C84509 + C1935 * C82024) *
               C19638 +
           (C1934 * C84198 + C1933 * C81997 + C1932 * C84509 + C1931 * C82024) *
               C19637 +
           (C284 * C84198 + C283 * C81997 + C282 * C84509 + C281 * C82024) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C6774 +
           (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
            C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
               C84528 +
           (C6685 * C723 + C6678 * C728 + C6687 * C722 + C6679 * C727 +
            C6689 * C721 + C6680 * C726 + C6691 * C720 + C84527 * C725) *
               C6775 +
           (C6685 * C785 + C6678 * C889 + C6687 * C784 + C6679 * C888 +
            C6689 * C783 + C6680 * C887 + C6691 * C782 + C84527 * C886) *
               C84304) *
              C84257 * C84603 * C84604 * C90 -
          ((C6691 * C781 + C84527 * C885 + C6689 * C782 + C6680 * C886 +
            C6687 * C783 + C6679 * C887 + C6685 * C784 + C6678 * C888) *
               C84304 +
           (C6691 * C719 + C84527 * C724 + C6689 * C720 + C6680 * C725 +
            C6687 * C721 + C6679 * C726 + C6685 * C722 + C6678 * C727) *
               C6775 +
           (C6691 * C177 + C84527 * C334 + C6689 * C176 + C6680 * C333 +
            C6687 * C175 + C6679 * C332 + C6685 * C174 + C6678 * C331) *
               C84528 +
           (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
            C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
               C6774) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C19726 +
           (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
               C19636 +
           (C82024 * C723 + C84509 * C728 + C81997 * C722 + C84198 * C727) *
               C19727 +
           (C82024 * C785 + C84509 * C889 + C81997 * C784 + C84198 * C888) *
               C19637 +
           (C82024 * C1681 + C84509 * C1685 + C81997 * C1682 + C84198 * C1686) *
               C19728 +
           (C82024 * C1788 + C84509 * C2012 + C81997 * C1789 + C84198 * C2013) *
               C19638 +
           (C82024 * C2599 + C84509 * C2602 + C81997 * C2598 + C84198 * C2601) *
               C19729 +
           (C82024 * C2715 + C84509 * C2899 + C81997 * C2714 + C84198 * C2898) *
               C84536) *
              C84257 * C84603 * C84604 * C90 -
          ((C81997 * C2713 + C84198 * C2897 + C82024 * C2714 + C84509 * C2898) *
               C84536 +
           (C81997 * C2597 + C84198 * C2600 + C82024 * C2598 + C84509 * C2601) *
               C19729 +
           (C81997 * C1790 + C84198 * C2014 + C82024 * C1789 + C84509 * C2013) *
               C19638 +
           (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 + C84509 * C1686) *
               C19728 +
           (C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
               C19637 +
           (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
               C19727 +
           (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
               C19636 +
           (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
               C19726) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7016 * C102 + C7019 + C7019 + C84528 * C379 + C7017 * C723 +
            C7020 + C7020 + C84304 * C936) *
               C6678 +
           (C7053 + C7054) * C6679 + (C7055 + C7056) * C6680 +
           (C7057 + C7058) * C84527) *
              C84257 * C84603 * C84604 * C90 -
          ((C7017 * C719 + C7039 + C7039 + C84304 * C932 + C7016 * C106 +
            C7040 + C7040 + C84528 * C383) *
               C84527 +
           (C7058 + C7057) * C6680 + (C7056 + C7055) * C6679 +
           (C7054 + C7053) * C6678) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19958 * C102 + C19963 + C19963 + C19636 * C379 + C19959 * C723 +
            C19964 + C19964 + C19637 * C936 + C19960 * C1681 + C19965 + C19965 +
            C19638 * C2093 + C19961 * C2599 + C19966 + C19966 +
            C84536 * C3012) *
               C84509 +
           (C19991 + C19992 + C19993 + C19994) * C84198) *
              C84257 * C84603 * C84604 * C90 -
          ((C19961 * C2597 + C19979 + C19979 + C84536 * C3010 + C19960 * C1683 +
            C19980 + C19980 + C19638 * C2095 + C19959 * C721 + C19981 + C19981 +
            C19637 * C934 + C19958 * C104 + C19982 + C19982 + C19636 * C381) *
               C84198 +
           (C19994 + C19993 + C19992 + C19991) * C84509) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C6774 +
                      (C251 * C173 + C84257 * C453) * C84528 + C2816 * C6775 +
                      C3104 * C84304) *
                         C6678 +
                     (C7125 + C7126 + C7127 + C7128) * C6679 +
                     (C7129 + C7130 + C7131 + C7132) * C6680 +
                     (C7133 + C7134 + C7135 + C7139) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C251 * C781 + C84257 * C984) * C84304 +
                      (C251 * C719 + C84257 * C833) * C6775 + C475 * C84528 +
                      C287 * C6774) *
                         C84527 +
                     (C7139 + C7135 + C7134 + C7133) * C6680 +
                     (C7132 + C7131 + C7130 + C7129) * C6679 +
                     (C7128 + C7127 + C7126 + C7125) * C6678) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C19726 +
                      (C251 * C173 + C84257 * C453) * C19636 + C2816 * C19727 +
                      C3104 * C19637 + C2818 * C19728 + C3105 * C19638 +
                      C16433 * C19729 + C16603 * C84536) *
                         C84509 +
                     (C20061 + C20062 + C20063 + C20064 + C20065 + C20066 +
                      C20067 + C20071) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C251 * C2713 + C84257 * C3096) * C84536 +
                      (C251 * C2597 + C84257 * C2793) * C19729 +
                      C2237 * C19638 + C1937 * C19728 + C2236 * C19637 +
                      C1933 * C19727 + C473 * C19636 + C283 * C19726) *
                         C84198 +
                     (C20071 + C20067 + C20066 + C20065 + C20064 + C20063 +
                      C20062 + C20061) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C251 +
            (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
             C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
                C84257) *
               C84528 +
           ((C6685 * C723 + C6678 * C728 + C6687 * C722 + C6679 * C727 +
             C6689 * C721 + C6680 * C726 + C6691 * C720 + C84527 * C725) *
                C251 +
            (C6685 * C837 + C6678 * C1035 + C6687 * C836 + C6679 * C1034 +
             C6689 * C835 + C6680 * C1033 + C6691 * C834 + C84527 * C1032) *
                C84257) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C6691 * C833 + C84527 * C1031 + C6689 * C834 + C6680 * C1032 +
             C6687 * C835 + C6679 * C1033 + C6685 * C836 + C6678 * C1034) *
                C84257 +
            (C6691 * C719 + C84527 * C724 + C6689 * C720 + C6680 * C725 +
             C6687 * C721 + C6679 * C726 + C6685 * C722 + C6678 * C727) *
                C251) *
               C84304 +
           ((C6691 * C256 + C84527 * C525 + C6689 * C255 + C6680 * C524 +
             C6687 * C254 + C6679 * C523 + C6685 * C253 + C6678 * C522) *
                C84257 +
            (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
             C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
                C251) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C251 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84257) *
               C19636 +
           ((C82024 * C723 + C84509 * C728 + C81997 * C722 + C84198 * C727) *
                C251 +
            (C82024 * C837 + C84509 * C1035 + C81997 * C836 + C84198 * C1034) *
                C84257) *
               C19637 +
           ((C82024 * C1681 + C84509 * C1685 + C81997 * C1682 +
             C84198 * C1686) *
                C251 +
            (C82024 * C1906 + C84509 * C2315 + C81997 * C1907 +
             C84198 * C2316) *
                C84257) *
               C19638 +
           ((C82024 * C2599 + C84509 * C2602 + C81997 * C2598 +
             C84198 * C2601) *
                C251 +
            (C82024 * C2795 + C84509 * C3181 + C81997 * C2794 +
             C84198 * C3180) *
                C84257) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C81997 * C2793 + C84198 * C3179 + C82024 * C2794 +
             C84509 * C3180) *
                C84257 +
            (C81997 * C2597 + C84198 * C2600 + C82024 * C2598 +
             C84509 * C2601) *
                C251) *
               C84536 +
           ((C81997 * C1908 + C84198 * C2317 + C82024 * C1907 +
             C84509 * C2316) *
                C84257 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C251) *
               C19638 +
           ((C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C84257 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C251) *
               C19637 +
           ((C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C84257 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C251) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C251 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84257) *
               C6678 +
           ((C6801 + C6802) * C251 + (C7284 + C7285) * C84257) * C6679 +
           ((C6805 + C6806) * C251 + (C7286 + C7287) * C84257) * C6680 +
           ((C6809 + C6810) * C251 + (C7288 + C7289) * C84257) * C84527) *
              C84603 * C84604 * C90 -
          (((C6775 * C833 + C84304 * C1078 + C6774 * C256 + C84528 * C573) *
                C84257 +
            (C6775 * C719 + C84304 * C781 + C6774 * C106 + C84528 * C177) *
                C251) *
               C84527 +
           ((C7289 + C7288) * C84257 + (C6810 + C6809) * C251) * C6680 +
           ((C7287 + C7286) * C84257 + (C6806 + C6805) * C251) * C6679 +
           ((C7285 + C7284) * C84257 + (C6802 + C6801) * C251) * C6678) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C251 +
            (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
             C19728 * C1906 + C19638 * C2393 + C19729 * C2795 +
             C84536 * C3276) *
                C84257) *
               C84509 +
           ((C19747 + C19748 + C19749 + C19750) * C251 +
            (C20212 + C20213 + C20214 + C20215) * C84257) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C19729 * C2793 + C84536 * C3274 + C19728 * C1908 + C19638 * C2395 +
             C19727 * C835 + C19637 * C1080 + C19726 * C254 + C19636 * C571) *
                C84257 +
            (C19729 * C2597 + C84536 * C2713 + C19728 * C1683 + C19638 * C1790 +
             C19727 * C721 + C19637 * C783 + C19726 * C104 + C19636 * C175) *
                C251) *
               C84198 +
           ((C20215 + C20214 + C20213 + C20212) * C84257 +
            (C19750 + C19749 + C19748 + C19747) * C251) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84528 +
                      C3366 * C84304) *
                         C6678 +
                     (C7356 + C7357) * C6679 + (C7358 + C7359) * C6680 +
                     (C7360 + C7366) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84304 +
                      C670 * C84528) *
                         C84527 +
                     (C7366 + C7360) * C6680 + (C7359 + C7358) * C6679 +
                     (C7357 + C7356) * C6678) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C637 * C102 + C645 + C645 + C84257 * C638) * C19636 +
                      C3366 * C19637 + C3367 * C19638 + C16763 * C84536) *
                         C84509 +
                     (C20282 + C20283 + C20284 + C20290) * C84198) *
                        C84603 * C84604 * C90 -
                    (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84536 +
                      C2519 * C19638 + C2518 * C19637 + C668 * C19636) *
                         C84198 +
                     (C20290 + C20284 + C20283 + C20282) * C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84257 * C84528 +
           (C7453 + C7454 + C7455 + C7456) * C84257 * C84304) *
              C84603 * C716 -
          ((C6690 * C1684 + C7441 + C7441 + C84527 * C1692 + C6688 * C1683 +
            C7442 + C7442 + C6680 * C1691 + C6686 * C1682 + C7443 + C7443 +
            C6679 * C1690 + C6684 * C1681 + C7444 + C7444 + C6678 * C1689) *
               C84257 * C84304 +
           (C7456 + C7455 + C7454 + C7453) * C84257 * C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C84257 * C19636 +
           (C20383 + C20384) * C84257 * C19637 +
           (C20385 + C20386) * C84257 * C19638 +
           (C20387 + C20388) * C84257 * C84536) *
              C84603 * C716 -
          ((C19642 * C15869 + C20369 + C20369 + C84198 * C15873 +
            C19640 * C15868 + C20370 + C20370 + C84509 * C15872) *
               C84257 * C84536 +
           (C20388 + C20387) * C84257 * C19638 +
           (C20386 + C20385) * C84257 * C19637 +
           (C20384 + C20383) * C84257 * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C6685 +
           (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
               C6678 +
           (C6801 + C6802) * C6687 + (C6803 + C6804) * C6679 +
           (C6805 + C6806) * C6689 + (C6807 + C6808) * C6680 +
           (C6809 + C6810) * C6691 + (C6811 + C6812) * C84527) *
              C84257 * C84603 * C716 -
          ((C6775 * C1688 + C84304 * C1795 + C6774 * C725 + C84528 * C787) *
               C84527 +
           (C6775 * C1684 + C84304 * C1791 + C6774 * C720 + C84528 * C782) *
               C6691 +
           (C6775 * C1687 + C84304 * C1794 + C6774 * C726 + C84528 * C788) *
               C6680 +
           (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
               C6689 +
           (C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
               C6679 +
           (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
               C6687 +
           (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
               C6678 +
           (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
               C6685) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C82024 +
           (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
            C19728 * C1685 + C19638 * C1792 + C19729 * C2602 + C84536 * C2718) *
               C84509 +
           (C19747 + C19748 + C19749 + C19750) * C81997 +
           (C19751 + C19752 + C19753 + C19754) * C84198) *
              C84257 * C84603 * C716 -
          ((C19729 * C15871 + C84536 * C15934 + C19728 * C2601 +
            C19638 * C2717 + C19727 * C1686 + C19637 * C1793 + C19726 * C727 +
            C19636 * C789) *
               C84198 +
           (C19729 * C15869 + C84536 * C15932 + C19728 * C2598 +
            C19638 * C2714 + C19727 * C1682 + C19637 * C1789 + C19726 * C722 +
            C19636 * C784) *
               C81997 +
           (C19729 * C15870 + C84536 * C15933 + C19728 * C2602 +
            C19638 * C2718 + C19727 * C1685 + C19637 * C1792 + C19726 * C728 +
            C19636 * C790) *
               C84509 +
           (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
            C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
            C19636 * C785) *
               C82024) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6685 +
            (C251 * C108 + C84257 * C258) * C6678 + C281 * C6687 +
            C282 * C6679 + C283 * C6689 + C284 * C6680 + C285 * C6691 +
            C286 * C84527) *
               C84528 +
           (C7589 + C7590 + C7591 + C7592 + C7593 + C7594 + C7595 + C7596) *
               C84304) *
              C84603 * C716 -
          (((C251 * C1688 + C84257 * C1913) * C84527 +
            (C251 * C1684 + C84257 * C1909) * C6691 + C1938 * C6680 +
            C1937 * C6689 + C1936 * C6679 + C1935 * C6687 + C2819 * C6678 +
            C2818 * C6685) *
               C84304 +
           (C7596 + C7595 + C7594 + C7593 + C7592 + C7591 + C7590 + C7589) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82024 +
            (C251 * C108 + C84257 * C258) * C84509 + C281 * C81997 +
            C282 * C84198) *
               C19636 +
           (C20521 + C20522 + C20523 + C20524) * C19637 +
           (C20525 + C20526 + C20527 + C20528) * C19638 +
           (C20529 + C20530 + C20531 + C20532) * C84536) *
              C84603 * C716 -
          (((C251 * C15871 + C84257 * C15980) * C84198 +
            (C251 * C15869 + C84257 * C15978) * C81997 + C16436 * C84509 +
            C16435 * C82024) *
               C84536 +
           (C20532 + C20531 + C20530 + C20529) * C19638 +
           (C20528 + C20527 + C20526 + C20525) * C19637 +
           (C20524 + C20523 + C20522 + C20521) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C6774 +
           (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
            C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
               C84528 +
           (C7679 + C7680 + C7681 + C7682) * C6775 +
           (C7683 + C7684 + C7685 + C7686) * C84304) *
              C84257 * C84603 * C716 -
          ((C6691 * C1791 + C84527 * C2015 + C6689 * C1790 + C6680 * C2014 +
            C6687 * C1789 + C6679 * C2013 + C6685 * C1788 + C6678 * C2012) *
               C84304 +
           (C6691 * C1684 + C84527 * C1688 + C6689 * C1683 + C6680 * C1687 +
            C6687 * C1682 + C6679 * C1686 + C6685 * C1681 + C6678 * C1685) *
               C6775 +
           (C7686 + C7685 + C7684 + C7683) * C84528 +
           (C7682 + C7681 + C7680 + C7679) * C6774) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C19726 +
           (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
               C19636 +
           (C20623 + C20624) * C19727 + (C20625 + C20626) * C19637 +
           (C20627 + C20628) * C19728 + (C20629 + C20630) * C19638 +
           (C20631 + C20632) * C19729 + (C20633 + C20634) * C84536) *
              C84257 * C84603 * C716 -
          ((C81997 * C15932 + C84198 * C16024 + C82024 * C15931 +
            C84509 * C16023) *
               C84536 +
           (C81997 * C15869 + C84198 * C15871 + C82024 * C15868 +
            C84509 * C15870) *
               C19729 +
           (C20634 + C20633) * C19638 + (C20632 + C20631) * C19728 +
           (C20630 + C20629) * C19637 + (C20628 + C20627) * C19727 +
           (C20626 + C20625) * C19636 + (C20624 + C20623) * C19726) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                      C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                         C6678 +
                     (C7053 + C7054) * C6679 + (C7055 + C7056) * C6680 +
                     (C7057 + C7058) * C84527) *
                        C84257 * C84603 * C716 -
                    ((C7017 * C1684 + C7753 + C7753 + C84304 * C2096 +
                      C7016 * C720 + C7754 + C7754 + C84528 * C933) *
                         C84527 +
                     (C7017 * C1683 + C7755 + C7755 + C84304 * C2095 +
                      C7016 * C721 + C7756 + C7756 + C84528 * C934) *
                         C6680 +
                     (C7017 * C1682 + C7757 + C7757 + C84304 * C2094 +
                      C7016 * C722 + C7758 + C7758 + C84528 * C935) *
                         C6679 +
                     (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 +
                      C7016 * C723 + C7760 + C7760 + C84528 * C936) *
                         C6678) *
                        C84257 * C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84509 +
                     (C19991 + C19992 + C19993 + C19994) * C84198) *
                        C84257 * C84603 * C716 -
                    ((C19961 * C15869 + C20701 + C20701 + C84536 * C16073 +
                      C19960 * C2598 + C20702 + C20702 + C19638 * C3011 +
                      C19959 * C1682 + C20703 + C20703 + C19637 * C2094 +
                      C19958 * C722 + C20704 + C20704 + C19636 * C935) *
                         C84198 +
                     (C19961 * C15868 + C20705 + C20705 + C84536 * C16072 +
                      C19960 * C2599 + C20706 + C20706 + C19638 * C3012 +
                      C19959 * C1681 + C20707 + C20707 + C19637 * C2093 +
                      C19958 * C723 + C20708 + C20708 + C19636 * C936) *
                         C84509) *
                        C84257 * C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6774 +
            (C251 * C173 + C84257 * C453) * C84528 + C2816 * C6775 +
            C3104 * C84304) *
               C6678 +
           (C7125 + C7126 + C7127 + C7128) * C6679 +
           (C7129 + C7130 + C7131 + C7132) * C6680 +
           (C7133 + C7134 + C7135 + C7139) * C84527) *
              C84603 * C716 -
          (((C251 * C1791 + C84257 * C2216) * C84304 +
            (C251 * C1684 + C84257 * C1909) * C6775 + C7138 * C84528 +
            C6883 * C6774) *
               C84527 +
           (C2237 * C84304 + C1937 * C6775 + C2236 * C84528 + C1933 * C6774) *
               C6680 +
           (C2235 * C84304 + C1935 * C6775 + C2234 * C84528 + C1931 * C6774) *
               C6679 +
           (C3105 * C84304 + C2818 * C6775 + C3104 * C84528 + C2816 * C6774) *
               C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C19726 +
            (C251 * C173 + C84257 * C453) * C19636 + C2816 * C19727 +
            C3104 * C19637 + C2818 * C19728 + C3105 * C19638 + C16433 * C19729 +
            C16603 * C84536) *
               C84509 +
           (C20061 + C20062 + C20063 + C20064 + C20065 + C20066 + C20067 +
            C20071) *
               C84198) *
              C84603 * C716 -
          (((C251 * C15932 + C84257 * C16127) * C84536 +
            (C251 * C15869 + C84257 * C15978) * C19729 + C20070 * C19638 +
            C19825 * C19728 + C2235 * C19637 + C1935 * C19727 + C2234 * C19636 +
            C1931 * C19726) *
               C84198 +
           (C16604 * C84536 + C16435 * C19729 + C16603 * C19638 +
            C16433 * C19728 + C3105 * C19637 + C2818 * C19727 + C3104 * C19636 +
            C2816 * C19726) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C251 +
            (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
             C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
                C84257) *
               C84528 +
           ((C7679 + C7680 + C7681 + C7682) * C251 +
            (C7901 + C7902 + C7903 + C7904) * C84257) *
               C84304) *
              C84603 * C716 -
          (((C6691 * C1909 + C84527 * C2318 + C6689 * C1908 + C6680 * C2317 +
             C6687 * C1907 + C6679 * C2316 + C6685 * C1906 + C6678 * C2315) *
                C84257 +
            (C6691 * C1684 + C84527 * C1688 + C6689 * C1683 + C6680 * C1687 +
             C6687 * C1682 + C6679 * C1686 + C6685 * C1681 + C6678 * C1685) *
                C251) *
               C84304 +
           ((C7904 + C7903 + C7902 + C7901) * C84257 +
            (C7682 + C7681 + C7680 + C7679) * C251) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C251 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84257) *
               C19636 +
           ((C20623 + C20624) * C251 + (C20853 + C20854) * C84257) * C19637 +
           ((C20627 + C20628) * C251 + (C20855 + C20856) * C84257) * C19638 +
           ((C20631 + C20632) * C251 + (C20857 + C20858) * C84257) * C84536) *
              C84603 * C716 -
          (((C81997 * C15978 + C84198 * C16171 + C82024 * C15977 +
             C84509 * C16170) *
                C84257 +
            (C81997 * C15869 + C84198 * C15871 + C82024 * C15868 +
             C84509 * C15870) *
                C251) *
               C84536 +
           ((C20858 + C20857) * C84257 + (C20632 + C20631) * C251) * C19638 +
           ((C20856 + C20855) * C84257 + (C20628 + C20627) * C251) * C19637 +
           ((C20854 + C20853) * C84257 + (C20624 + C20623) * C251) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C251 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84257) *
               C6678 +
           ((C6801 + C6802) * C251 + (C7284 + C7285) * C84257) * C6679 +
           ((C6805 + C6806) * C251 + (C7286 + C7287) * C84257) * C6680 +
           ((C6809 + C6810) * C251 + (C7288 + C7289) * C84257) * C84527) *
              C84603 * C716 -
          (((C6775 * C1909 + C84304 * C2396 + C6774 * C834 + C84528 * C1079) *
                C84257 +
            (C6775 * C1684 + C84304 * C1791 + C6774 * C720 + C84528 * C782) *
                C251) *
               C84527 +
           ((C6775 * C1908 + C84304 * C2395 + C6774 * C835 + C84528 * C1080) *
                C84257 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C251) *
               C6680 +
           ((C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C84257 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C251) *
               C6679 +
           ((C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C84257 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C251) *
               C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C251 +
            (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
             C19728 * C1906 + C19638 * C2393 + C19729 * C2795 +
             C84536 * C3276) *
                C84257) *
               C84509 +
           ((C19747 + C19748 + C19749 + C19750) * C251 +
            (C20212 + C20213 + C20214 + C20215) * C84257) *
               C84198) *
              C84603 * C716 -
          (((C19729 * C15978 + C84536 * C16215 + C19728 * C2794 +
             C19638 * C3275 + C19727 * C1907 + C19637 * C2394 + C19726 * C836 +
             C19636 * C1081) *
                C84257 +
            (C19729 * C15869 + C84536 * C15932 + C19728 * C2598 +
             C19638 * C2714 + C19727 * C1682 + C19637 * C1789 + C19726 * C722 +
             C19636 * C784) *
                C251) *
               C84198 +
           ((C19729 * C15977 + C84536 * C16214 + C19728 * C2795 +
             C19638 * C3276 + C19727 * C1906 + C19637 * C2393 + C19726 * C837 +
             C19636 * C1082) *
                C84257 +
            (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
             C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
             C19636 * C785) *
                C251) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84528 +
            C3366 * C84304) *
               C6678 +
           (C7356 + C7357) * C6679 + (C7358 + C7359) * C6680 +
           (C7360 + C7366) * C84527) *
              C84603 * C716 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84304 +
            C7365 * C84528) *
               C84527 +
           (C2519 * C84304 + C2518 * C84528) * C6680 +
           (C2517 * C84304 + C2516 * C84528) * C6679 +
           (C3367 * C84304 + C3366 * C84528) * C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C19636 +
            C3366 * C19637 + C3367 * C19638 + C16763 * C84536) *
               C84509 +
           (C20282 + C20283 + C20284 + C20290) * C84198) *
              C84603 * C716 -
          (((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C84536 +
            C20289 * C19638 + C2517 * C19637 + C2516 * C19636) *
               C84198 +
           (C16764 * C84536 + C16763 * C19638 + C3367 * C19637 +
            C3366 * C19636) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84257 * C84528 +
           (C7453 + C7454 + C7455 + C7456) * C84257 * C84304) *
              C1177 -
          ((C6690 * C8102 + C8106 + C8106 + C84527 * C8104 + C6688 * C3444 +
            C8107 + C8107 + C6680 * C3456 + C6686 * C3445 + C8108 + C8108 +
            C6679 * C3457 + C6684 * C3446 + C8109 + C8109 + C6678 * C3458) *
               C84257 * C84304 +
           (C6690 * C1180 + C8110 + C8110 + C84527 * C1190 + C6688 * C1181 +
            C8111 + C8111 + C6680 * C1191 + C6686 * C1182 + C8112 + C8112 +
            C6679 * C1192 + C6684 * C1183 + C8113 + C8113 + C6678 * C1193) *
               C84257 * C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
            C19646 + C19646 + C84198 * C115) *
               C84257 * C19636 +
           (C20383 + C20384) * C84257 * C19637 +
           (C20385 + C20386) * C84257 * C19638 +
           (C20387 + C20388) * C84257 * C84536) *
              C1177 -
          ((C19642 * C21056 + C21060 + C21060 + C84198 * C21058 +
            C19640 * C16807 + C21061 + C21061 + C84509 * C16811) *
               C84257 * C84536 +
           (C19642 * C3442 + C21062 + C21062 + C84198 * C3454 + C19640 * C3443 +
            C21063 + C21063 + C84509 * C3455) *
               C84257 * C19638 +
           (C19642 * C3445 + C21064 + C21064 + C84198 * C3457 + C19640 * C3446 +
            C21065 + C21065 + C84509 * C3458) *
               C84257 * C19637 +
           (C19642 * C1182 + C21066 + C21066 + C84198 * C1192 + C19640 * C1183 +
            C21067 + C21067 + C84509 * C1193) *
               C84257 * C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
               C6685 +
           (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
               C6678 +
           (C6801 + C6802) * C6687 + (C6803 + C6804) * C6679 +
           (C6805 + C6806) * C6689 + (C6807 + C6808) * C6680 +
           (C6809 + C6810) * C6691 + (C6811 + C6812) * C84527) *
              C84257 * C1177 -
          ((C6775 * C8103 + C84304 * C8180 + C6774 * C1185 + C84528 * C1247) *
               C84527 +
           (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
               C6691 +
           (C6775 * C3450 + C84304 * C3549 + C6774 * C1186 + C84528 * C1248) *
               C6680 +
           (C6775 * C3444 + C84304 * C3543 + C6774 * C1181 + C84528 * C1243) *
               C6689 +
           (C6775 * C3451 + C84304 * C3551 + C6774 * C1187 + C84528 * C1249) *
               C6679 +
           (C6775 * C3445 + C84304 * C3545 + C6774 * C1182 + C84528 * C1244) *
               C6687 +
           (C6775 * C3452 + C84304 * C3553 + C6774 * C1188 + C84528 * C1250) *
               C6678 +
           (C6775 * C3446 + C84304 * C3547 + C6774 * C1183 + C84528 * C1245) *
               C6685) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C82024 +
           (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
            C19728 * C1685 + C19638 * C1792 + C19729 * C2602 + C84536 * C2718) *
               C84509 +
           (C19747 + C19748 + C19749 + C19750) * C81997 +
           (C19751 + C19752 + C19753 + C19754) * C84198) *
              C84257 * C1177 -
          ((C19729 * C21057 + C84536 * C21134 + C19728 * C3448 +
            C19638 * C3550 + C19727 * C3451 + C19637 * C3551 + C19726 * C1187 +
            C19636 * C1249) *
               C84198 +
           (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
            C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
            C19636 * C1244) *
               C81997 +
           (C19729 * C16809 + C84536 * C16862 + C19728 * C3449 +
            C19638 * C3552 + C19727 * C3452 + C19637 * C3553 + C19726 * C1188 +
            C19636 * C1250) *
               C84509 +
           (C19729 * C16807 + C84536 * C16860 + C19728 * C3443 +
            C19638 * C3546 + C19727 * C3446 + C19637 * C3547 + C19726 * C1183 +
            C19636 * C1245) *
               C82024) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C6685 +
            (C251 * C108 + C84257 * C258) * C6678 + C281 * C6687 +
            C282 * C6679 + C283 * C6689 + C284 * C6680 + C285 * C6691 +
            C286 * C84527) *
               C84528 +
           (C7589 + C7590 + C7591 + C7592 + C7593 + C7594 + C7595 + C7596) *
               C84304) *
              C1177 -
          (((C251 * C8103 + C84257 * C8248) * C84527 +
            (C251 * C8102 + C84257 * C8247) * C6691 +
            (C251 * C3450 + C84257 * C3637) * C6680 +
            (C251 * C3444 + C84257 * C3631) * C6689 +
            (C251 * C3451 + C84257 * C3638) * C6679 +
            (C251 * C3445 + C84257 * C3632) * C6687 +
            (C251 * C3452 + C84257 * C3639) * C6678 +
            (C251 * C3446 + C84257 * C3633) * C6685) *
               C84304 +
           ((C251 * C1185 + C84257 * C1299) * C84527 +
            (C251 * C1180 + C84257 * C1294) * C6691 +
            (C251 * C1186 + C84257 * C1300) * C6680 +
            (C251 * C1181 + C84257 * C1295) * C6689 +
            (C251 * C1187 + C84257 * C1301) * C6679 +
            (C251 * C1182 + C84257 * C1296) * C6687 +
            (C251 * C1188 + C84257 * C1302) * C6678 +
            (C251 * C1183 + C84257 * C1297) * C6685) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C82024 +
            (C251 * C108 + C84257 * C258) * C84509 + C281 * C81997 +
            C282 * C84198) *
               C19636 +
           (C20521 + C20522 + C20523 + C20524) * C19637 +
           (C20525 + C20526 + C20527 + C20528) * C19638 +
           (C20529 + C20530 + C20531 + C20532) * C84536) *
              C1177 -
          (((C251 * C21057 + C84257 * C21202) * C84198 +
            (C251 * C21056 + C84257 * C21201) * C81997 +
            (C251 * C16809 + C84257 * C16908) * C84509 +
            (C251 * C16807 + C84257 * C16906) * C82024) *
               C84536 +
           ((C251 * C3448 + C84257 * C3635) * C84198 +
            (C251 * C3442 + C84257 * C3629) * C81997 +
            (C251 * C3449 + C84257 * C3636) * C84509 +
            (C251 * C3443 + C84257 * C3630) * C82024) *
               C19638 +
           ((C251 * C3451 + C84257 * C3638) * C84198 +
            (C251 * C3445 + C84257 * C3632) * C81997 +
            (C251 * C3452 + C84257 * C3639) * C84509 +
            (C251 * C3446 + C84257 * C3633) * C82024) *
               C19637 +
           ((C251 * C1187 + C84257 * C1301) * C84198 +
            (C251 * C1182 + C84257 * C1296) * C81997 +
            (C251 * C1188 + C84257 * C1302) * C84509 +
            (C251 * C1183 + C84257 * C1297) * C82024) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C6774 +
           (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
            C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
               C84528 +
           (C7679 + C7680 + C7681 + C7682) * C6775 +
           (C7683 + C7684 + C7685 + C7686) * C84304) *
              C84257 * C1177 -
          ((C6691 * C8179 + C84527 * C8315 + C6689 * C3543 + C6680 * C3717 +
            C6687 * C3545 + C6679 * C3718 + C6685 * C3547 + C6678 * C3719) *
               C84304 +
           (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
            C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
               C6775 +
           (C6691 * C1242 + C84527 * C1346 + C6689 * C1243 + C6680 * C1347 +
            C6687 * C1244 + C6679 * C1348 + C6685 * C1245 + C6678 * C1349) *
               C84528 +
           (C6691 * C1180 + C84527 * C1185 + C6689 * C1181 + C6680 * C1186 +
            C6687 * C1182 + C6679 * C1187 + C6685 * C1183 + C6678 * C1188) *
               C6774) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
               C19726 +
           (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
               C19636 +
           (C20623 + C20624) * C19727 + (C20625 + C20626) * C19637 +
           (C20627 + C20628) * C19728 + (C20629 + C20630) * C19638 +
           (C20631 + C20632) * C19729 + (C20633 + C20634) * C84536) *
              C84257 * C1177 -
          ((C81997 * C21133 + C84198 * C21269 + C82024 * C16860 +
            C84509 * C16952) *
               C84536 +
           (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
            C84509 * C16809) *
               C19729 +
           (C81997 * C3544 + C84198 * C3715 + C82024 * C3546 + C84509 * C3716) *
               C19638 +
           (C81997 * C3442 + C84198 * C3448 + C82024 * C3443 + C84509 * C3449) *
               C19728 +
           (C81997 * C3545 + C84198 * C3718 + C82024 * C3547 + C84509 * C3719) *
               C19637 +
           (C81997 * C3445 + C84198 * C3451 + C82024 * C3446 + C84509 * C3452) *
               C19727 +
           (C81997 * C1244 + C84198 * C1348 + C82024 * C1245 + C84509 * C1349) *
               C19636 +
           (C81997 * C1182 + C84198 * C1187 + C82024 * C1183 + C84509 * C1188) *
               C19726) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                      C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                         C6678 +
                     (C7053 + C7054) * C6679 + (C7055 + C7056) * C6680 +
                     (C7057 + C7058) * C84527) *
                        C84257 * C1177 -
                    ((C7017 * C8102 + C8384 + C8384 + C84304 * C8382 +
                      C7016 * C1180 + C8385 + C8385 + C84528 * C1393) *
                         C84527 +
                     (C7017 * C3444 + C8386 + C8386 + C84304 * C3795 +
                      C7016 * C1181 + C8387 + C8387 + C84528 * C1394) *
                         C6680 +
                     (C7017 * C3445 + C8388 + C8388 + C84304 * C3797 +
                      C7016 * C1182 + C8389 + C8389 + C84528 * C1395) *
                         C6679 +
                     (C7017 * C3446 + C8390 + C8390 + C84304 * C3799 +
                      C7016 * C1183 + C8391 + C8391 + C84528 * C1396) *
                         C6678) *
                        C84257 * C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84509 +
                     (C19991 + C19992 + C19993 + C19994) * C84198) *
                        C84257 * C1177 -
                    ((C19961 * C21056 + C21338 + C21338 + C84536 * C21336 +
                      C19960 * C3442 + C21339 + C21339 + C19638 * C3796 +
                      C19959 * C3445 + C21340 + C21340 + C19637 * C3797 +
                      C19958 * C1182 + C21341 + C21341 + C19636 * C1395) *
                         C84198 +
                     (C19961 * C16807 + C21342 + C21342 + C84536 * C16996 +
                      C19960 * C3443 + C21343 + C21343 + C19638 * C3798 +
                      C19959 * C3446 + C21344 + C21344 + C19637 * C3799 +
                      C19958 * C1183 + C21345 + C21345 + C19636 * C1396) *
                         C84509) *
                        C84257 * C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[62] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C6774 +
                      (C251 * C173 + C84257 * C453) * C84528 + C2816 * C6775 +
                      C3104 * C84304) *
                         C6678 +
                     (C7125 + C7126 + C7127 + C7128) * C6679 +
                     (C7129 + C7130 + C7131 + C7132) * C6680 +
                     (C7133 + C7134 + C7135 + C7139) * C84527) *
                        C1177 -
                    (((C251 * C8179 + C84257 * C8457) * C84304 +
                      (C251 * C8102 + C84257 * C8247) * C6775 +
                      (C251 * C1242 + C84257 * C1445) * C84528 +
                      (C251 * C1180 + C84257 * C1294) * C6774) *
                         C84527 +
                     ((C251 * C3543 + C84257 * C3884) * C84304 +
                      (C251 * C3444 + C84257 * C3631) * C6775 +
                      (C251 * C1243 + C84257 * C1446) * C84528 +
                      (C251 * C1181 + C84257 * C1295) * C6774) *
                         C6680 +
                     ((C251 * C3545 + C84257 * C3886) * C84304 +
                      (C251 * C3445 + C84257 * C3632) * C6775 +
                      (C251 * C1244 + C84257 * C1447) * C84528 +
                      (C251 * C1182 + C84257 * C1296) * C6774) *
                         C6679 +
                     ((C251 * C3547 + C84257 * C3888) * C84304 +
                      (C251 * C3446 + C84257 * C3633) * C6775 +
                      (C251 * C1245 + C84257 * C1448) * C84528 +
                      (C251 * C1183 + C84257 * C1297) * C6774) *
                         C6678) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C251 * C102 + C84257 * C252) * C19726 +
                      (C251 * C173 + C84257 * C453) * C19636 + C2816 * C19727 +
                      C3104 * C19637 + C2818 * C19728 + C3105 * C19638 +
                      C16433 * C19729 + C16603 * C84536) *
                         C84509 +
                     (C20061 + C20062 + C20063 + C20064 + C20065 + C20066 +
                      C20067 + C20071) *
                         C84198) *
                        C1177 -
                    (((C251 * C21133 + C84257 * C21411) * C84536 +
                      (C251 * C21056 + C84257 * C21201) * C19729 +
                      (C251 * C3544 + C84257 * C3885) * C19638 +
                      (C251 * C3442 + C84257 * C3629) * C19728 +
                      (C251 * C3545 + C84257 * C3886) * C19637 +
                      (C251 * C3445 + C84257 * C3632) * C19727 +
                      (C251 * C1244 + C84257 * C1447) * C19636 +
                      (C251 * C1182 + C84257 * C1296) * C19726) *
                         C84198 +
                     ((C251 * C16860 + C84257 * C17045) * C84536 +
                      (C251 * C16807 + C84257 * C16906) * C19729 +
                      (C251 * C3546 + C84257 * C3887) * C19638 +
                      (C251 * C3443 + C84257 * C3630) * C19728 +
                      (C251 * C3547 + C84257 * C3888) * C19637 +
                      (C251 * C3446 + C84257 * C3633) * C19727 +
                      (C251 * C1245 + C84257 * C1448) * C19636 +
                      (C251 * C1183 + C84257 * C1297) * C19726) *
                         C84509) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C251 +
            (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
             C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
                C84257) *
               C84528 +
           ((C7679 + C7680 + C7681 + C7682) * C251 +
            (C7901 + C7902 + C7903 + C7904) * C84257) *
               C84304) *
              C1177 -
          (((C6691 * C8247 + C84527 * C8524 + C6689 * C3631 + C6680 * C3966 +
             C6687 * C3632 + C6679 * C3967 + C6685 * C3633 + C6678 * C3968) *
                C84257 +
            (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
             C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
                C251) *
               C84304 +
           ((C6691 * C1294 + C84527 * C1492 + C6689 * C1295 + C6680 * C1493 +
             C6687 * C1296 + C6679 * C1494 + C6685 * C1297 + C6678 * C1495) *
                C84257 +
            (C6691 * C1180 + C84527 * C1185 + C6689 * C1181 + C6680 * C1186 +
             C6687 * C1182 + C6679 * C1187 + C6685 * C1183 + C6678 * C1188) *
                C251) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C251 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84257) *
               C19636 +
           ((C20623 + C20624) * C251 + (C20853 + C20854) * C84257) * C19637 +
           ((C20627 + C20628) * C251 + (C20855 + C20856) * C84257) * C19638 +
           ((C20631 + C20632) * C251 + (C20857 + C20858) * C84257) * C84536) *
              C1177 -
          (((C81997 * C21201 + C84198 * C21478 + C82024 * C16906 +
             C84509 * C17089) *
                C84257 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C251) *
               C84536 +
           ((C81997 * C3629 + C84198 * C3964 + C82024 * C3630 +
             C84509 * C3965) *
                C84257 +
            (C81997 * C3442 + C84198 * C3448 + C82024 * C3443 +
             C84509 * C3449) *
                C251) *
               C19638 +
           ((C81997 * C3632 + C84198 * C3967 + C82024 * C3633 +
             C84509 * C3968) *
                C84257 +
            (C81997 * C3445 + C84198 * C3451 + C82024 * C3446 +
             C84509 * C3452) *
                C251) *
               C19637 +
           ((C81997 * C1296 + C84198 * C1494 + C82024 * C1297 +
             C84509 * C1495) *
                C84257 +
            (C81997 * C1182 + C84198 * C1187 + C82024 * C1183 +
             C84509 * C1188) *
                C251) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C251 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84257) *
               C6678 +
           ((C6801 + C6802) * C251 + (C7284 + C7285) * C84257) * C6679 +
           ((C6805 + C6806) * C251 + (C7286 + C7287) * C84257) * C6680 +
           ((C6809 + C6810) * C251 + (C7288 + C7289) * C84257) * C84527) *
              C1177 -
          (((C6775 * C8247 + C84304 * C8591 + C6774 * C1294 + C84528 * C1539) *
                C84257 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C251) *
               C84527 +
           ((C6775 * C3631 + C84304 * C4044 + C6774 * C1295 + C84528 * C1540) *
                C84257 +
            (C6775 * C3444 + C84304 * C3543 + C6774 * C1181 + C84528 * C1243) *
                C251) *
               C6680 +
           ((C6775 * C3632 + C84304 * C4046 + C6774 * C1296 + C84528 * C1541) *
                C84257 +
            (C6775 * C3445 + C84304 * C3545 + C6774 * C1182 + C84528 * C1244) *
                C251) *
               C6679 +
           ((C6775 * C3633 + C84304 * C4048 + C6774 * C1297 + C84528 * C1542) *
                C84257 +
            (C6775 * C3446 + C84304 * C3547 + C6774 * C1183 + C84528 * C1245) *
                C251) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C251 +
            (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
             C19728 * C1906 + C19638 * C2393 + C19729 * C2795 +
             C84536 * C3276) *
                C84257) *
               C84509 +
           ((C19747 + C19748 + C19749 + C19750) * C251 +
            (C20212 + C20213 + C20214 + C20215) * C84257) *
               C84198) *
              C1177 -
          (((C19729 * C21201 + C84536 * C21545 + C19728 * C3629 +
             C19638 * C4045 + C19727 * C3632 + C19637 * C4046 + C19726 * C1296 +
             C19636 * C1541) *
                C84257 +
            (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
             C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
             C19636 * C1244) *
                C251) *
               C84198 +
           ((C19729 * C16906 + C84536 * C17133 + C19728 * C3630 +
             C19638 * C4047 + C19727 * C3633 + C19637 * C4048 + C19726 * C1297 +
             C19636 * C1542) *
                C84257 +
            (C19729 * C16807 + C84536 * C16860 + C19728 * C3443 +
             C19638 * C3546 + C19727 * C3446 + C19637 * C3547 + C19726 * C1183 +
             C19636 * C1245) *
                C251) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84528 +
            C3366 * C84304) *
               C6678 +
           (C7356 + C7357) * C6679 + (C7358 + C7359) * C6680 +
           (C7360 + C7366) * C84527) *
              C1177 -
          (((C637 * C8102 + C8660 + C8660 + C84257 * C8658) * C84304 +
            (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C84528) *
               C84527 +
           ((C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84304 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84528) *
               C6680 +
           ((C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84304 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84528) *
               C6679 +
           ((C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84304 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84528) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C19636 +
            C3366 * C19637 + C3367 * C19638 + C16763 * C84536) *
               C84509 +
           (C20282 + C20283 + C20284 + C20290) * C84198) *
              C1177 -
          (((C637 * C21056 + C21614 + C21614 + C84257 * C21612) * C84536 +
            (C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C19638 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C19637 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C19636) *
               C84198 +
           ((C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C84536 +
            (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C19638 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C19637 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C19636) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
             C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
             C84550 * C116) *
                C84529 +
            (C5873 + C5874 + C5875) * C84344) *
               C84528 +
           ((C2634 + C2635 + C2636) * C84529 +
            (C1675 * C3446 + C3465 + C3465 + C1669 * C3458 + C1677 * C3445 +
             C3464 + C3464 + C1670 * C3457 + C1679 * C3444 + C3463 + C3463 +
             C84550 * C3456) *
                C84344) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C1679 * C8102 + C10760 + C10760 + C84550 * C8104 + C1677 * C3444 +
             C10761 + C10761 + C1670 * C3456 + C1675 * C3445 + C10762 + C10762 +
             C1669 * C3457) *
                C84344 +
            (C1679 * C720 + C1706 + C1706 + C84550 * C730 + C1677 * C721 +
             C1707 + C1707 + C1670 * C731 + C1675 * C722 + C1708 + C1708 +
             C1669 * C732) *
                C84529) *
               C84304 +
           ((C1679 * C1180 + C4231 + C4231 + C84550 * C1190 + C1677 * C1181 +
             C4232 + C4232 + C1670 * C1191 + C1675 * C1182 + C4233 + C4233 +
             C1669 * C1192) *
                C84344 +
            (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
             C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
             C1669 * C115) *
                C84529) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84529 +
            C18832 * C84344) *
               C19636 +
           (C16325 * C84529 + C17990 * C84344) * C19637 +
           (C16326 * C84529 + C17992 * C84344) * C19638 +
           (C16327 * C84529 +
            (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84344) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C15866 * C21056 + C24532 + C24532 + C84188 * C21058) * C84344 +
            (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C84529) *
               C84536 +
           ((C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84344 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84529) *
               C19638 +
           ((C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84344 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84529) *
               C19637 +
           ((C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84344 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84529) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C1676 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C1669 +
            (C6801 + C6802) * C1678 + (C6803 + C6804) * C1670 +
            (C6805 + C6806) * C1680 + (C6807 + C6808) * C84550) *
               C84529 +
           ((C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C1676 +
            (C6774 * C1188 + C84528 * C1250 + C6775 * C3452 + C84304 * C3553) *
                C1669 +
            (C10877 + C10878) * C1678 + (C10879 + C10880) * C1670 +
            (C10881 + C10882) * C1680 + (C10883 + C10884) * C84550) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C6775 * C8103 + C84304 * C8180 + C6774 * C1185 + C84528 * C1247) *
                C84550 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C1680 +
            (C10884 + C10883) * C1670 + (C10882 + C10881) * C1678 +
            (C10880 + C10879) * C1669 + (C10878 + C10877) * C1676) *
               C84344 +
           ((C6812 + C6811) * C84550 + (C6810 + C6809) * C1680 +
            (C6808 + C6807) * C1670 + (C6806 + C6805) * C1678 +
            (C6804 + C6803) * C1669 + (C6802 + C6801) * C1676) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
             C19728 * C1685 + C19638 * C1792 + C19729 * C2602 +
             C84536 * C2718) *
                C84188) *
               C84529 +
           ((C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
             C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C19726 * C1188 + C19636 * C1250 + C19727 * C3452 + C19637 * C3553 +
             C19728 * C3449 + C19638 * C3552 + C19729 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C19729 * C21057 + C84536 * C21134 + C19728 * C3448 +
             C19638 * C3550 + C19727 * C3451 + C19637 * C3551 + C19726 * C1187 +
             C19636 * C1249) *
                C84188 +
            (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
             C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
             C19636 * C1244) *
                C15867) *
               C84344 +
           ((C19754 + C19753 + C19752 + C19751) * C84188 +
            (C19750 + C19749 + C19748 + C19747) * C15867) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C1676 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C1669 +
            (C8897 + C8898) * C1678 + (C8899 + C8900) * C1670 +
            (C8901 + C8902) * C1680 + (C8903 + C8904) * C84550) *
               C84528 +
           ((C8870 * C723 + C84529 * C837 + C8871 * C3446 + C84344 * C3633) *
                C1676 +
            (C8870 * C728 + C84529 * C842 + C8871 * C3452 + C84344 * C3639) *
                C1669 +
            (C10999 + C11000) * C1678 + (C11001 + C11002) * C1670 +
            (C11003 + C11004) * C1680 + (C11005 + C11006) * C84550) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C8871 * C8103 + C84344 * C8248 + C8870 * C725 + C84529 * C839) *
                C84550 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C1680 +
            (C11006 + C11005) * C1670 + (C11004 + C11003) * C1678 +
            (C11002 + C11001) * C1669 + (C11000 + C10999) * C1676) *
               C84304 +
           ((C8908 + C8907) * C84550 + (C8906 + C8905) * C1680 +
            (C8904 + C8903) * C1670 + (C8902 + C8901) * C1678 +
            (C8900 + C8899) * C1669 + (C8898 + C8897) * C1676) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C15867 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84188) *
               C19636 +
           ((C11976 + C11977) * C15867 + (C11978 + C11979) * C84188) * C19637 +
           ((C22895 + C22896) * C15867 + (C22897 + C22898) * C84188) * C19638 +
           ((C8870 * C2599 + C84529 * C2795 + C8871 * C16807 +
             C84344 * C16906) *
                C15867 +
            (C8870 * C2602 + C84529 * C2798 + C8871 * C16809 +
             C84344 * C16908) *
                C84188) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C8871 * C21057 + C84344 * C21202 + C8870 * C2601 +
             C84529 * C2797) *
                C84188 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C15867) *
               C84536 +
           ((C21944 + C21943) * C84188 + (C21942 + C21941) * C15867) * C19638 +
           ((C11002 + C11001) * C84188 + (C11000 + C10999) * C15867) * C19637 +
           ((C8900 + C8899) * C84188 + (C8898 + C8897) * C15867) * C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C6774 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84528 +
            (C2925 + C2926 + C2927) * C6775 +
            (C2928 + C2929 + C2930) * C84304) *
               C84529 +
           ((C6164 + C6165 + C6166) * C6774 + (C6167 + C6168 + C6169) * C84528 +
            (C1676 * C3446 + C1669 * C3452 + C1678 * C3445 + C1670 * C3451 +
             C1680 * C3444 + C84550 * C3450) *
                C6775 +
            (C1676 * C3547 + C1669 * C3719 + C1678 * C3545 + C1670 * C3718 +
             C1680 * C3543 + C84550 * C3717) *
                C84304) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C1680 * C8179 + C84550 * C8315 + C1678 * C3543 + C1670 * C3717 +
             C1676 * C3545 + C1669 * C3718) *
                C84304 +
            (C1680 * C8102 + C84550 * C8103 + C1678 * C3444 + C1670 * C3450 +
             C1676 * C3445 + C1669 * C3451) *
                C6775 +
            (C1680 * C1242 + C84550 * C1346 + C1678 * C1243 + C1670 * C1347 +
             C1676 * C1244 + C1669 * C1348) *
                C84528 +
            (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
             C1676 * C1182 + C1669 * C1187) *
                C6774) *
               C84344 +
           ((C1680 * C782 + C84550 * C886 + C1678 * C783 + C1670 * C887 +
             C1676 * C784 + C1669 * C888) *
                C84304 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C6775 +
            (C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
             C1676 * C174 + C1669 * C331) *
                C84528 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C6774) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C19726 +
            (C15867 * C173 + C84188 * C330) * C19636 + C16500 * C19727 +
            C16501 * C19637 + C16502 * C19728 + C16503 * C19638 +
            C16504 * C19729 + C16505 * C84536) *
               C84529 +
           (C19118 * C19726 + C19119 * C19636 + C18277 * C19727 +
            C18278 * C19637 + C18279 * C19728 + C18280 * C19638 +
            (C15867 * C16807 + C84188 * C16809) * C19729 +
            (C15867 * C16860 + C84188 * C16952) * C84536) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C15867 * C21133 + C84188 * C21269) * C84536 +
            (C15867 * C21056 + C84188 * C21057) * C19729 +
            (C15867 * C3544 + C84188 * C3715) * C19638 +
            (C15867 * C3442 + C84188 * C3448) * C19728 +
            (C15867 * C3545 + C84188 * C3718) * C19637 +
            (C15867 * C3445 + C84188 * C3451) * C19727 +
            (C15867 * C1244 + C84188 * C1348) * C19636 +
            (C15867 * C1182 + C84188 * C1187) * C19726) *
               C84344 +
           ((C15867 * C2714 + C84188 * C2898) * C84536 +
            (C15867 * C2598 + C84188 * C2601) * C19729 +
            (C15867 * C1789 + C84188 * C2013) * C19638 +
            (C15867 * C1682 + C84188 * C1686) * C19728 +
            (C15867 * C784 + C84188 * C888) * C19637 +
            (C15867 * C722 + C84188 * C727) * C19727 +
            (C15867 * C174 + C84188 * C331) * C19636 +
            (C15867 * C103 + C84188 * C109) * C19726) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C1669 +
                      (C7053 + C7054) * C1670 + (C7055 + C7056) * C84550) *
                         C84529 +
                     ((C7016 * C1183 + C8391 + C8391 + C84528 * C1396 +
                       C7017 * C3446 + C8390 + C8390 + C84304 * C3799) *
                          C1669 +
                      (C11219 + C11220) * C1670 + (C11221 + C11222) * C84550) *
                         C84344) *
                        C84603 * C84604 * C90 -
                    (((C7017 * C8102 + C8384 + C8384 + C84304 * C8382 +
                       C7016 * C1180 + C8385 + C8385 + C84528 * C1393) *
                          C84550 +
                      (C11222 + C11221) * C1670 + (C11220 + C11219) * C1669) *
                         C84344 +
                     ((C7058 + C7057) * C84550 + (C7056 + C7055) * C1670 +
                      (C7054 + C7053) * C1669) *
                         C84529) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84188 * C84529 +
                     (C19958 * C1183 + C21345 + C21345 + C19636 * C1396 +
                      C19959 * C3446 + C21344 + C21344 + C19637 * C3799 +
                      C19960 * C3443 + C21343 + C21343 + C19638 * C3798 +
                      C19961 * C16807 + C21342 + C21342 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C84604 * C90 -
                    ((C19961 * C21056 + C21338 + C21338 + C84536 * C21336 +
                      C19960 * C3442 + C21339 + C21339 + C19638 * C3796 +
                      C19959 * C3445 + C21340 + C21340 + C19637 * C3797 +
                      C19958 * C1182 + C21341 + C21341 + C19636 * C1395) *
                         C84188 * C84344 +
                     (C19994 + C19993 + C19992 + C19991) * C84188 * C84529) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C6774 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84528 +
            (C8870 * C723 + C84529 * C837 + C8871 * C3446 + C84344 * C3633) *
                C6775 +
            (C8870 * C785 + C84529 * C988 + C8871 * C3547 + C84344 * C3888) *
                C84304) *
               C1669 +
           ((C8897 + C8898) * C6774 + (C9124 + C9125) * C84528 +
            (C10999 + C11000) * C6775 + (C11329 + C11330) * C84304) *
               C1670 +
           ((C8901 + C8902) * C6774 + (C9126 + C9127) * C84528 +
            (C11003 + C11004) * C6775 + (C11331 + C11332) * C84304) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C8871 * C8179 + C84344 * C8457 + C8870 * C782 + C84529 * C985) *
                C84304 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C6775 +
            (C9129 + C9128) * C84528 + (C8906 + C8905) * C6774) *
               C84550 +
           ((C11332 + C11331) * C84304 + (C11004 + C11003) * C6775 +
            (C9127 + C9126) * C84528 + (C8902 + C8901) * C6774) *
               C1670 +
           ((C11330 + C11329) * C84304 + (C11000 + C10999) * C6775 +
            (C9125 + C9124) * C84528 + (C8898 + C8897) * C6774) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C19726 +
           (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
               C19636 +
           (C11976 + C11977) * C19727 + (C12302 + C12303) * C19637 +
           (C22895 + C22896) * C19728 + (C23224 + C23225) * C19638 +
           (C8870 * C2599 + C84529 * C2795 + C8871 * C16807 + C84344 * C16906) *
               C19729 +
           (C8870 * C2715 + C84529 * C3098 + C8871 * C16860 + C84344 * C17045) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C8871 * C21133 + C84344 * C21411 + C8870 * C2714 + C84529 * C3097) *
               C84536 +
           (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 + C84529 * C2794) *
               C19729 +
           (C22259 + C22258) * C19638 + (C21942 + C21941) * C19728 +
           (C11330 + C11329) * C19637 + (C11000 + C10999) * C19727 +
           (C9125 + C9124) * C19636 + (C8898 + C8897) * C19726) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C8870 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84529 +
            (C6164 + C6165 + C6166) * C8871 +
            (C6438 + C6439 + C6440) * C84344) *
               C84528 +
           ((C2925 + C2926 + C2927) * C8870 + (C3195 + C3196 + C3197) * C84529 +
            (C1676 * C3446 + C1669 * C3452 + C1678 * C3445 + C1670 * C3451 +
             C1680 * C3444 + C84550 * C3450) *
                C8871 +
            (C1676 * C3633 + C1669 * C3968 + C1678 * C3632 + C1670 * C3967 +
             C1680 * C3631 + C84550 * C3966) *
                C84344) *
               C84304) *
              C84603 * C84604 * C90 -
          (((C1680 * C8247 + C84550 * C8524 + C1678 * C3631 + C1670 * C3966 +
             C1676 * C3632 + C1669 * C3967) *
                C84344 +
            (C1680 * C8102 + C84550 * C8103 + C1678 * C3444 + C1670 * C3450 +
             C1676 * C3445 + C1669 * C3451) *
                C8871 +
            (C1680 * C834 + C84550 * C1032 + C1678 * C835 + C1670 * C1033 +
             C1676 * C836 + C1669 * C1034) *
                C84529 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C8870) *
               C84304 +
           ((C1680 * C1294 + C84550 * C1492 + C1678 * C1295 + C1670 * C1493 +
             C1676 * C1296 + C1669 * C1494) *
                C84344 +
            (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
             C1676 * C1182 + C1669 * C1187) *
                C8871 +
            (C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
             C1676 * C253 + C1669 * C522) *
                C84529 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C8870) *
               C84528) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C8870 +
            (C15867 * C252 + C84188 * C521) * C84529 + C19118 * C8871 +
            C19391 * C84344) *
               C19636 +
           (C16500 * C8870 + C16660 * C84529 + C18277 * C8871 +
            C18550 * C84344) *
               C19637 +
           (C16502 * C8870 + C16661 * C84529 + C18279 * C8871 +
            C18552 * C84344) *
               C19638 +
           (C16504 * C8870 + C16662 * C84529 +
            (C15867 * C16807 + C84188 * C16809) * C8871 +
            (C15867 * C16906 + C84188 * C17089) * C84344) *
               C84536) *
              C84603 * C84604 * C90 -
          (((C15867 * C21201 + C84188 * C21478) * C84344 +
            (C15867 * C21056 + C84188 * C21057) * C8871 +
            (C15867 * C2794 + C84188 * C3180) * C84529 +
            (C15867 * C2598 + C84188 * C2601) * C8870) *
               C84536 +
           ((C15867 * C3629 + C84188 * C3964) * C84344 +
            (C15867 * C3442 + C84188 * C3448) * C8871 +
            (C15867 * C1907 + C84188 * C2316) * C84529 +
            (C15867 * C1682 + C84188 * C1686) * C8870) *
               C19638 +
           ((C15867 * C3632 + C84188 * C3967) * C84344 +
            (C15867 * C3445 + C84188 * C3451) * C8871 +
            (C15867 * C836 + C84188 * C1034) * C84529 +
            (C15867 * C722 + C84188 * C727) * C8870) *
               C19637 +
           ((C15867 * C1296 + C84188 * C1494) * C84344 +
            (C15867 * C1182 + C84188 * C1187) * C8871 +
            (C15867 * C253 + C84188 * C522) * C84529 +
            (C15867 * C103 + C84188 * C109) * C8870) *
               C19636) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C8870 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84529 +
            (C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C8871 +
            (C6774 * C1297 + C84528 * C1542 + C6775 * C3633 + C84304 * C4048) *
                C84344) *
               C1669 +
           ((C6801 + C6802) * C8870 + (C7284 + C7285) * C84529 +
            (C10877 + C10878) * C8871 + (C11537 + C11538) * C84344) *
               C1670 +
           ((C6805 + C6806) * C8870 + (C7286 + C7287) * C84529 +
            (C10881 + C10882) * C8871 + (C11539 + C11540) * C84344) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C6775 * C8247 + C84304 * C8591 + C6774 * C1294 + C84528 * C1539) *
                C84344 +
            (C6775 * C8102 + C84304 * C8179 + C6774 * C1180 + C84528 * C1242) *
                C8871 +
            (C7289 + C7288) * C84529 + (C6810 + C6809) * C8870) *
               C84550 +
           ((C11540 + C11539) * C84344 + (C10882 + C10881) * C8871 +
            (C7287 + C7286) * C84529 + (C6806 + C6805) * C8870) *
               C1670 +
           ((C11538 + C11537) * C84344 + (C10878 + C10877) * C8871 +
            (C7285 + C7284) * C84529 + (C6802 + C6801) * C8870) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C8870 +
           (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
            C19728 * C1906 + C19638 * C2393 + C19729 * C2795 + C84536 * C3276) *
               C84529 +
           (C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
            C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
            C84536 * C16860) *
               C8871 +
           (C19726 * C1297 + C19636 * C1542 + C19727 * C3633 + C19637 * C4048 +
            C19728 * C3630 + C19638 * C4047 + C19729 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C84604 * C90 -
          ((C19729 * C21201 + C84536 * C21545 + C19728 * C3629 +
            C19638 * C4045 + C19727 * C3632 + C19637 * C4046 + C19726 * C1296 +
            C19636 * C1541) *
               C84344 +
           (C19729 * C21056 + C84536 * C21133 + C19728 * C3442 +
            C19638 * C3544 + C19727 * C3445 + C19637 * C3545 + C19726 * C1182 +
            C19636 * C1244) *
               C8871 +
           (C20215 + C20214 + C20213 + C20212) * C84529 +
           (C19750 + C19749 + C19748 + C19747) * C8870) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C84528 +
            (C9342 * C723 + C9987 + C9987 + C84529 * C1129 + C9343 * C3446 +
             C9986 + C9986 + C84344 * C4128) *
                C84304) *
               C1669 +
           ((C9379 + C9380) * C84528 + (C11655 + C11656) * C84304) * C1670 +
           ((C9381 + C9382) * C84528 + (C11657 + C11658) * C84304) * C84550) *
              C84603 * C84604 * C90 -
          (((C9343 * C8102 + C9980 + C9980 + C84344 * C8658 + C9342 * C720 +
             C9981 + C9981 + C84529 * C1126) *
                C84304 +
            (C9384 + C9383) * C84528) *
               C84550 +
           ((C11658 + C11657) * C84304 + (C9382 + C9381) * C84528) * C1670 +
           ((C11656 + C11655) * C84304 + (C9380 + C9379) * C84528) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C19636 +
           (C12621 + C12622) * C19637 + (C23544 + C23545) * C19638 +
           (C9342 * C2599 + C23539 + C23539 + C84529 * C3353 + C9343 * C16807 +
            C23538 + C23538 + C84344 * C17177) *
               C84536) *
              C84188 * C84603 * C84604 * C90 -
          ((C9343 * C21056 + C23536 + C23536 + C84344 * C21612 + C9342 * C2598 +
            C23537 + C23537 + C84529 * C3352) *
               C84536 +
           (C22572 + C22571) * C19638 + (C11656 + C11655) * C19637 +
           (C9380 + C9379) * C19636) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
             C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
             C84550 * C116) *
                C84529 +
            (C5873 + C5874 + C5875) * C84344) *
               C84528 +
           ((C2634 + C2635 + C2636) * C84529 +
            (C11769 + C11770 + C11771) * C84344) *
               C84304) *
              C84603 * C716 -
          (((C1679 * C3441 + C3460 + C3460 + C84550 * C3453 + C1677 * C3442 +
             C3461 + C3461 + C1670 * C3454 + C1675 * C3443 + C3462 + C3462 +
             C1669 * C3455) *
                C84344 +
            (C2639 + C2638 + C2637) * C84529) *
               C84304 +
           ((C11771 + C11770 + C11769) * C84344 +
            (C2636 + C2635 + C2634) * C84529) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84529 +
            C18832 * C84344) *
               C19636 +
           (C25127 + C25128) * C19637 + (C25129 + C25130) * C19638 +
           (C25131 + C25137) * C84536) *
              C84603 * C716 -
          (((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84344 +
            C16328 * C84529) *
               C84536 +
           (C25137 + C25131) * C19638 + (C25130 + C25129) * C19637 +
           (C25128 + C25127) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C1676 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C1669 +
            (C6801 + C6802) * C1678 + (C6803 + C6804) * C1670 +
            (C6805 + C6806) * C1680 + (C6807 + C6808) * C84550) *
               C84529 +
           ((C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C1676 +
            (C6774 * C1188 + C84528 * C1250 + C6775 * C3452 + C84304 * C3553) *
                C1669 +
            (C10877 + C10878) * C1678 + (C10879 + C10880) * C1670 +
            (C10881 + C10882) * C1680 + (C10883 + C10884) * C84550) *
               C84344) *
              C84603 * C716 -
          (((C6775 * C3447 + C84304 * C3548 + C6774 * C3450 + C84528 * C3549) *
                C84550 +
            (C6775 * C3441 + C84304 * C3542 + C6774 * C3444 + C84528 * C3543) *
                C1680 +
            (C6775 * C3448 + C84304 * C3550 + C6774 * C3451 + C84528 * C3551) *
                C1670 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C1678 +
            (C6775 * C3449 + C84304 * C3552 + C6774 * C3452 + C84528 * C3553) *
                C1669 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C1676) *
               C84344 +
           ((C6775 * C1687 + C84304 * C1794 + C6774 * C726 + C84528 * C788) *
                C84550 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C1680 +
            (C6775 * C1686 + C84304 * C1793 + C6774 * C727 + C84528 * C789) *
                C1670 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C1678 +
            (C6775 * C1685 + C84304 * C1792 + C6774 * C728 + C84528 * C790) *
                C1669 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C1676) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
             C19728 * C1685 + C19638 * C1792 + C19729 * C2602 +
             C84536 * C2718) *
                C84188) *
               C84529 +
           ((C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
             C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
             C84536 * C16860) *
                C15867 +
            (C19726 * C1188 + C19636 * C1250 + C19727 * C3452 + C19637 * C3553 +
             C19728 * C3449 + C19638 * C3552 + C19729 * C16809 +
             C84536 * C16862) *
                C84188) *
               C84344) *
              C84603 * C716 -
          (((C19729 * C16808 + C84536 * C16861 + C19728 * C16809 +
             C19638 * C16862 + C19727 * C3449 + C19637 * C3552 +
             C19726 * C3452 + C19636 * C3553) *
                C84188 +
            (C19729 * C16806 + C84536 * C16859 + C19728 * C16807 +
             C19638 * C16860 + C19727 * C3443 + C19637 * C3546 +
             C19726 * C3446 + C19636 * C3547) *
                C15867) *
               C84344 +
           ((C19729 * C15870 + C84536 * C15933 + C19728 * C2602 +
             C19638 * C2718 + C19727 * C1685 + C19637 * C1792 + C19726 * C728 +
             C19636 * C790) *
                C84188 +
            (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
             C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
             C19636 * C785) *
                C15867) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C1676 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C1669 +
            (C8897 + C8898) * C1678 + (C8899 + C8900) * C1670 +
            (C8901 + C8902) * C1680 + (C8903 + C8904) * C84550) *
               C84528 +
           ((C11976 + C11977) * C1676 + (C11978 + C11979) * C1669 +
            (C10999 + C11000) * C1678 + (C11001 + C11002) * C1670 +
            (C11003 + C11004) * C1680 + (C11005 + C11006) * C84550) *
               C84304) *
              C84603 * C716 -
          (((C8871 * C3447 + C84344 * C3634 + C8870 * C1687 + C84529 * C1912) *
                C84550 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C1680 +
            (C8871 * C3448 + C84344 * C3635 + C8870 * C1686 + C84529 * C1911) *
                C1670 +
            (C8871 * C3442 + C84344 * C3629 + C8870 * C1682 + C84529 * C1907) *
                C1678 +
            (C8871 * C3449 + C84344 * C3636 + C8870 * C1685 + C84529 * C1910) *
                C1669 +
            (C8871 * C3443 + C84344 * C3630 + C8870 * C1681 + C84529 * C1906) *
                C1676) *
               C84304 +
           ((C11006 + C11005) * C84550 + (C11004 + C11003) * C1680 +
            (C11002 + C11001) * C1670 + (C11000 + C10999) * C1678 +
            (C11979 + C11978) * C1669 + (C11977 + C11976) * C1676) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C15867 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84188) *
               C19636 +
           ((C11976 + C11977) * C15867 + (C11978 + C11979) * C84188) * C19637 +
           ((C22895 + C22896) * C15867 + (C22897 + C22898) * C84188) * C19638 +
           ((C25278 + C25279) * C15867 + (C25280 + C25281) * C84188) * C84536) *
              C84603 * C716 -
          (((C8871 * C16808 + C84344 * C16907 + C8870 * C15870 +
             C84529 * C15979) *
                C84188 +
            (C8871 * C16806 + C84344 * C16905 + C8870 * C15868 +
             C84529 * C15977) *
                C15867) *
               C84536 +
           ((C25281 + C25280) * C84188 + (C25279 + C25278) * C15867) * C19638 +
           ((C22898 + C22897) * C84188 + (C22896 + C22895) * C15867) * C19637 +
           ((C11979 + C11978) * C84188 + (C11977 + C11976) * C15867) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C6774 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84528 +
            (C2925 + C2926 + C2927) * C6775 +
            (C2928 + C2929 + C2930) * C84304) *
               C84529 +
           ((C6164 + C6165 + C6166) * C6774 + (C6167 + C6168 + C6169) * C84528 +
            (C12090 + C12091 + C12092) * C6775 +
            (C12093 + C12094 + C12095) * C84304) *
               C84344) *
              C84603 * C716 -
          (((C1680 * C3542 + C84550 * C3714 + C1678 * C3544 + C1670 * C3715 +
             C1676 * C3546 + C1669 * C3716) *
                C84304 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C6775 +
            (C12095 + C12094 + C12093) * C84528 +
            (C12092 + C12091 + C12090) * C6774) *
               C84344 +
           ((C2936 + C2935 + C2934) * C84304 + (C2933 + C2932 + C2931) * C6775 +
            (C2930 + C2929 + C2928) * C84528 +
            (C2927 + C2926 + C2925) * C6774) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C19726 +
            (C15867 * C173 + C84188 * C330) * C19636 + C16500 * C19727 +
            C16501 * C19637 + C16502 * C19728 + C16503 * C19638 +
            C16504 * C19729 + C16505 * C84536) *
               C84529 +
           (C19118 * C19726 + C19119 * C19636 + C18277 * C19727 +
            C18278 * C19637 + C18279 * C19728 + C18280 * C19638 +
            C25352 * C19729 + C25353 * C84536) *
               C84344) *
              C84603 * C716 -
          (((C15867 * C16859 + C84188 * C16951) * C84536 +
            (C15867 * C16806 + C84188 * C16808) * C19729 + C25353 * C19638 +
            C25352 * C19728 + C18280 * C19637 + C18279 * C19727 +
            C18278 * C19636 + C18277 * C19726) *
               C84344 +
           (C16507 * C84536 + C16506 * C19729 + C16505 * C19638 +
            C16504 * C19728 + C16503 * C19637 + C16502 * C19727 +
            C16501 * C19636 + C16500 * C19726) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C1669 +
                      (C7053 + C7054) * C1670 + (C7055 + C7056) * C84550) *
                         C84529 +
                     ((C7016 * C1183 + C8391 + C8391 + C84528 * C1396 +
                       C7017 * C3446 + C8390 + C8390 + C84304 * C3799) *
                          C1669 +
                      (C11219 + C11220) * C1670 + (C11221 + C11222) * C84550) *
                         C84344) *
                        C84603 * C716 -
                    (((C7017 * C3441 + C12194 + C12194 + C84304 * C3794 +
                       C7016 * C3444 + C12195 + C12195 + C84528 * C3795) *
                          C84550 +
                      (C7017 * C3442 + C12196 + C12196 + C84304 * C3796 +
                       C7016 * C3445 + C12197 + C12197 + C84528 * C3797) *
                          C1670 +
                      (C7017 * C3443 + C12198 + C12198 + C84304 * C3798 +
                       C7016 * C3446 + C12199 + C12199 + C84528 * C3799) *
                          C1669) *
                         C84344 +
                     ((C7017 * C1683 + C7755 + C7755 + C84304 * C2095 +
                       C7016 * C721 + C7756 + C7756 + C84528 * C934) *
                          C84550 +
                      (C7017 * C1682 + C7757 + C7757 + C84304 * C2094 +
                       C7016 * C722 + C7758 + C7758 + C84528 * C935) *
                          C1670 +
                      (C7017 * C1681 + C7759 + C7759 + C84304 * C2093 +
                       C7016 * C723 + C7760 + C7760 + C84528 * C936) *
                          C1669) *
                         C84529) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84188 * C84529 +
                     (C19958 * C1183 + C21345 + C21345 + C19636 * C1396 +
                      C19959 * C3446 + C21344 + C21344 + C19637 * C3799 +
                      C19960 * C3443 + C21343 + C21343 + C19638 * C3798 +
                      C19961 * C16807 + C21342 + C21342 + C84536 * C16996) *
                         C84188 * C84344) *
                        C84603 * C716 -
                    ((C19961 * C16806 + C25420 + C25420 + C84536 * C16995 +
                      C19960 * C16807 + C25421 + C25421 + C19638 * C16996 +
                      C19959 * C3443 + C25422 + C25422 + C19637 * C3798 +
                      C19958 * C3446 + C25423 + C25423 + C19636 * C3799) *
                         C84188 * C84344 +
                     (C19961 * C15868 + C20705 + C20705 + C84536 * C16072 +
                      C19960 * C2599 + C20706 + C20706 + C19638 * C3012 +
                      C19959 * C1681 + C20707 + C20707 + C19637 * C2093 +
                      C19958 * C723 + C20708 + C20708 + C19636 * C936) *
                         C84188 * C84529) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C6774 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84528 +
            (C11976 + C11977) * C6775 + (C12302 + C12303) * C84304) *
               C1669 +
           ((C8897 + C8898) * C6774 + (C9124 + C9125) * C84528 +
            (C10999 + C11000) * C6775 + (C11329 + C11330) * C84304) *
               C1670 +
           ((C8901 + C8902) * C6774 + (C9126 + C9127) * C84528 +
            (C11003 + C11004) * C6775 + (C11331 + C11332) * C84304) *
               C84550) *
              C84603 * C716 -
          (((C8871 * C3542 + C84344 * C3883 + C8870 * C1790 + C84529 * C2215) *
                C84304 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C6775 +
            (C11332 + C11331) * C84528 + (C11004 + C11003) * C6774) *
               C84550 +
           ((C8871 * C3544 + C84344 * C3885 + C8870 * C1789 + C84529 * C2214) *
                C84304 +
            (C8871 * C3442 + C84344 * C3629 + C8870 * C1682 + C84529 * C1907) *
                C6775 +
            (C11330 + C11329) * C84528 + (C11000 + C10999) * C6774) *
               C1670 +
           ((C8871 * C3546 + C84344 * C3887 + C8870 * C1788 + C84529 * C2213) *
                C84304 +
            (C8871 * C3443 + C84344 * C3630 + C8870 * C1681 + C84529 * C1906) *
                C6775 +
            (C12303 + C12302) * C84528 + (C11977 + C11976) * C6774) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C19726 +
           (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
               C19636 +
           (C11976 + C11977) * C19727 + (C12302 + C12303) * C19637 +
           (C22895 + C22896) * C19728 + (C23224 + C23225) * C19638 +
           (C25278 + C25279) * C19729 + (C25494 + C25495) * C84536) *
              C84188 * C84603 * C716 -
          ((C8871 * C16859 + C84344 * C17044 + C8870 * C15931 +
            C84529 * C16126) *
               C84536 +
           (C8871 * C16806 + C84344 * C16905 + C8870 * C15868 +
            C84529 * C15977) *
               C19729 +
           (C25495 + C25494) * C19638 + (C25279 + C25278) * C19728 +
           (C23225 + C23224) * C19637 + (C22896 + C22895) * C19727 +
           (C12303 + C12302) * C19636 + (C11977 + C11976) * C19726) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C8870 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84529 +
            (C6164 + C6165 + C6166) * C8871 +
            (C6438 + C6439 + C6440) * C84344) *
               C84528 +
           ((C2925 + C2926 + C2927) * C8870 + (C3195 + C3196 + C3197) * C84529 +
            (C12090 + C12091 + C12092) * C8871 +
            (C12408 + C12409 + C12410) * C84344) *
               C84304) *
              C84603 * C716 -
          (((C1680 * C3628 + C84550 * C3963 + C1678 * C3629 + C1670 * C3964 +
             C1676 * C3630 + C1669 * C3965) *
                C84344 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C8871 +
            (C3200 + C3199 + C3198) * C84529 +
            (C2933 + C2932 + C2931) * C8870) *
               C84304 +
           ((C12410 + C12409 + C12408) * C84344 +
            (C12092 + C12091 + C12090) * C8871 +
            (C3197 + C3196 + C3195) * C84529 +
            (C2927 + C2926 + C2925) * C8870) *
               C84528) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C8870 +
            (C15867 * C252 + C84188 * C521) * C84529 + C19118 * C8871 +
            C19391 * C84344) *
               C19636 +
           (C25562 + C25563 + C25564 + C25565) * C19637 +
           (C25566 + C25567 + C25568 + C25569) * C19638 +
           (C25570 + C25571 + C25572 + C25576) * C84536) *
              C84603 * C716 -
          (((C15867 * C16905 + C84188 * C17088) * C84344 +
            (C15867 * C16806 + C84188 * C16808) * C8871 + C16663 * C84529 +
            C16506 * C8870) *
               C84536 +
           (C25576 + C25572 + C25571 + C25570) * C19638 +
           (C25569 + C25568 + C25567 + C25566) * C19637 +
           (C25565 + C25564 + C25563 + C25562) * C19636) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C8870 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84529 +
            (C6774 * C1183 + C84528 * C1245 + C6775 * C3446 + C84304 * C3547) *
                C8871 +
            (C6774 * C1297 + C84528 * C1542 + C6775 * C3633 + C84304 * C4048) *
                C84344) *
               C1669 +
           ((C6801 + C6802) * C8870 + (C7284 + C7285) * C84529 +
            (C10877 + C10878) * C8871 + (C11537 + C11538) * C84344) *
               C1670 +
           ((C6805 + C6806) * C8870 + (C7286 + C7287) * C84529 +
            (C10881 + C10882) * C8871 + (C11539 + C11540) * C84344) *
               C84550) *
              C84603 * C716 -
          (((C6775 * C3628 + C84304 * C4043 + C6774 * C3631 + C84528 * C4044) *
                C84344 +
            (C6775 * C3441 + C84304 * C3542 + C6774 * C3444 + C84528 * C3543) *
                C8871 +
            (C6775 * C1908 + C84304 * C2395 + C6774 * C835 + C84528 * C1080) *
                C84529 +
            (C6775 * C1683 + C84304 * C1790 + C6774 * C721 + C84528 * C783) *
                C8870) *
               C84550 +
           ((C6775 * C3629 + C84304 * C4045 + C6774 * C3632 + C84528 * C4046) *
                C84344 +
            (C6775 * C3442 + C84304 * C3544 + C6774 * C3445 + C84528 * C3545) *
                C8871 +
            (C6775 * C1907 + C84304 * C2394 + C6774 * C836 + C84528 * C1081) *
                C84529 +
            (C6775 * C1682 + C84304 * C1789 + C6774 * C722 + C84528 * C784) *
                C8870) *
               C1670 +
           ((C6775 * C3630 + C84304 * C4047 + C6774 * C3633 + C84528 * C4048) *
                C84344 +
            (C6775 * C3443 + C84304 * C3546 + C6774 * C3446 + C84528 * C3547) *
                C8871 +
            (C6775 * C1906 + C84304 * C2393 + C6774 * C837 + C84528 * C1082) *
                C84529 +
            (C6775 * C1681 + C84304 * C1788 + C6774 * C723 + C84528 * C785) *
                C8870) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C8870 +
           (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
            C19728 * C1906 + C19638 * C2393 + C19729 * C2795 + C84536 * C3276) *
               C84529 +
           (C19726 * C1183 + C19636 * C1245 + C19727 * C3446 + C19637 * C3547 +
            C19728 * C3443 + C19638 * C3546 + C19729 * C16807 +
            C84536 * C16860) *
               C8871 +
           (C19726 * C1297 + C19636 * C1542 + C19727 * C3633 + C19637 * C4048 +
            C19728 * C3630 + C19638 * C4047 + C19729 * C16906 +
            C84536 * C17133) *
               C84344) *
              C84188 * C84603 * C716 -
          ((C19729 * C16905 + C84536 * C17132 + C19728 * C16906 +
            C19638 * C17133 + C19727 * C3630 + C19637 * C4047 + C19726 * C3633 +
            C19636 * C4048) *
               C84344 +
           (C19729 * C16806 + C84536 * C16859 + C19728 * C16807 +
            C19638 * C16860 + C19727 * C3443 + C19637 * C3546 + C19726 * C3446 +
            C19636 * C3547) *
               C8871 +
           (C19729 * C15977 + C84536 * C16214 + C19728 * C2795 +
            C19638 * C3276 + C19727 * C1906 + C19637 * C2393 + C19726 * C837 +
            C19636 * C1082) *
               C84529 +
           (C19729 * C15868 + C84536 * C15931 + C19728 * C2599 +
            C19638 * C2715 + C19727 * C1681 + C19637 * C1788 + C19726 * C723 +
            C19636 * C785) *
               C8870) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C84528 +
            (C12621 + C12622) * C84304) *
               C1669 +
           ((C9379 + C9380) * C84528 + (C11655 + C11656) * C84304) * C1670 +
           ((C9381 + C9382) * C84528 + (C11657 + C11658) * C84304) * C84550) *
              C84603 * C716 -
          (((C9343 * C3441 + C12611 + C12611 + C84344 * C4123 + C9342 * C1683 +
             C12612 + C12612 + C84529 * C2491) *
                C84304 +
            (C11658 + C11657) * C84528) *
               C84550 +
           ((C9343 * C3442 + C12613 + C12613 + C84344 * C4125 + C9342 * C1682 +
             C12614 + C12614 + C84529 * C2490) *
                C84304 +
            (C11656 + C11655) * C84528) *
               C1670 +
           ((C9343 * C3443 + C12615 + C12615 + C84344 * C4127 + C9342 * C1681 +
             C12616 + C12616 + C84529 * C2489) *
                C84304 +
            (C12622 + C12621) * C84528) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C19636 +
           (C12621 + C12622) * C19637 + (C23544 + C23545) * C19638 +
           (C25719 + C25720) * C84536) *
              C84188 * C84603 * C716 -
          ((C9343 * C16806 + C25713 + C25713 + C84344 * C17176 +
            C9342 * C15868 + C25714 + C25714 + C84529 * C16258) *
               C84536 +
           (C25720 + C25719) * C19638 + (C23545 + C23544) * C19637 +
           (C12622 + C12621) * C19636) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 +
             C1695 + C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
             C84550 * C116) *
                C84529 +
            (C5873 + C5874 + C5875) * C84344) *
               C84528 +
           ((C2634 + C2635 + C2636) * C84529 +
            (C11769 + C11770 + C11771) * C84344) *
               C84304) *
              C1177 -
          (((C1679 * C5113 + C5123 + C5123 + C84550 * C5119 + C1677 * C5114 +
             C5124 + C5124 + C1670 * C5120 + C1675 * C5115 + C5125 + C5125 +
             C1669 * C5121) *
                C84344 +
            (C11771 + C11770 + C11769) * C84529) *
               C84304 +
           ((C5878 + C5877 + C5876) * C84344 +
            (C5875 + C5874 + C5873) * C84529) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84529 +
            C18832 * C84344) *
               C19636 +
           (C25127 + C25128) * C19637 + (C25129 + C25130) * C19638 +
           (C25131 + C25137) * C84536) *
              C1177 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84344 +
            C25136 * C84529) *
               C84536 +
           (C17993 * C84344 + C17992 * C84529) * C19638 +
           (C17991 * C84344 + C17990 * C84529) * C19637 +
           (C18833 * C84344 + C18832 * C84529) * C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C1676 +
            (C6774 * C108 + C84528 * C179 + C6775 * C728 + C84304 * C790) *
                C1669 +
            (C6801 + C6802) * C1678 + (C6803 + C6804) * C1670 +
            (C6805 + C6806) * C1680 + (C6807 + C6808) * C84550) *
               C84529 +
           ((C12827 + C12828) * C1676 + (C12829 + C12830) * C1669 +
            (C10877 + C10878) * C1678 + (C10879 + C10880) * C1670 +
            (C10881 + C10882) * C1680 + (C10883 + C10884) * C84550) *
               C84344) *
              C1177 -
          (((C6775 * C5116 + C84304 * C5202 + C6774 * C4218 + C84528 * C4313) *
                C84550 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C1680 +
            (C6775 * C5117 + C84304 * C5203 + C6774 * C4217 + C84528 * C4312) *
                C1670 +
            (C6775 * C5114 + C84304 * C5200 + C6774 * C4213 + C84528 * C4308) *
                C1678 +
            (C6775 * C5118 + C84304 * C5204 + C6774 * C4216 + C84528 * C4311) *
                C1669 +
            (C6775 * C5115 + C84304 * C5201 + C6774 * C4212 + C84528 * C4307) *
                C1676) *
               C84344 +
           ((C10884 + C10883) * C84550 + (C10882 + C10881) * C1680 +
            (C10880 + C10879) * C1670 + (C10878 + C10877) * C1678 +
            (C12830 + C12829) * C1669 + (C12828 + C12827) * C1676) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
             C19728 * C1681 + C19638 * C1788 + C19729 * C2599 +
             C84536 * C2715) *
                C15867 +
            (C19726 * C108 + C19636 * C179 + C19727 * C728 + C19637 * C790 +
             C19728 * C1685 + C19638 * C1792 + C19729 * C2602 +
             C84536 * C2718) *
                C84188) *
               C84529 +
           ((C25869 + C25870 + C25871 + C25872) * C15867 +
            (C25873 + C25874 + C25875 + C25876) * C84188) *
               C84344) *
              C1177 -
          (((C19729 * C17968 + C84536 * C18072 + C19728 * C17256 +
             C19638 * C17345 + C19727 * C5118 + C19637 * C5204 +
             C19726 * C4216 + C19636 * C4311) *
                C84188 +
            (C19729 * C17967 + C84536 * C18071 + C19728 * C17254 +
             C19638 * C17343 + C19727 * C5115 + C19637 * C5201 +
             C19726 * C4212 + C19636 * C4307) *
                C15867) *
               C84344 +
           ((C25876 + C25875 + C25874 + C25873) * C84188 +
            (C25872 + C25871 + C25870 + C25869) * C15867) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C1676 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C1669 +
            (C8897 + C8898) * C1678 + (C8899 + C8900) * C1670 +
            (C8901 + C8902) * C1680 + (C8903 + C8904) * C84550) *
               C84528 +
           ((C11976 + C11977) * C1676 + (C11978 + C11979) * C1669 +
            (C10999 + C11000) * C1678 + (C11001 + C11002) * C1670 +
            (C11003 + C11004) * C1680 + (C11005 + C11006) * C84550) *
               C84304) *
              C1177 -
          (((C8871 * C5116 + C84344 * C5282 + C8870 * C3450 + C84529 * C3637) *
                C84550 +
            (C8871 * C5113 + C84344 * C5279 + C8870 * C3444 + C84529 * C3631) *
                C1680 +
            (C8871 * C5117 + C84344 * C5283 + C8870 * C3451 + C84529 * C3638) *
                C1670 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C1678 +
            (C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C1669 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C1676) *
               C84304 +
           ((C8871 * C4218 + C84344 * C4422 + C8870 * C1186 + C84529 * C1300) *
                C84550 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C1680 +
            (C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
                C1670 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C1678 +
            (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C1669 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C1676) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C15867 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84188) *
               C19636 +
           ((C11976 + C11977) * C15867 + (C11978 + C11979) * C84188) * C19637 +
           ((C22895 + C22896) * C15867 + (C22897 + C22898) * C84188) * C19638 +
           ((C25278 + C25279) * C15867 + (C25280 + C25281) * C84188) * C84536) *
              C1177 -
          (((C8871 * C17968 + C84344 * C18148 + C8870 * C16809 +
             C84529 * C16908) *
                C84188 +
            (C8871 * C17967 + C84344 * C18147 + C8870 * C16807 +
             C84529 * C16906) *
                C15867) *
               C84536 +
           ((C8871 * C17256 + C84344 * C17423 + C8870 * C3449 +
             C84529 * C3636) *
                C84188 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C15867) *
               C19638 +
           ((C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C84188 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C15867) *
               C19637 +
           ((C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C84188 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C15867) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C6774 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84528 +
            (C2925 + C2926 + C2927) * C6775 +
            (C2928 + C2929 + C2930) * C84304) *
               C84529 +
           ((C6164 + C6165 + C6166) * C6774 + (C6167 + C6168 + C6169) * C84528 +
            (C12090 + C12091 + C12092) * C6775 +
            (C12093 + C12094 + C12095) * C84304) *
               C84344) *
              C1177 -
          (((C1680 * C5199 + C84550 * C5359 + C1678 * C5200 + C1670 * C5360 +
             C1676 * C5201 + C1669 * C5361) *
                C84304 +
            (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
             C1676 * C5115 + C1669 * C5118) *
                C6775 +
            (C6175 + C6174 + C6173) * C84528 +
            (C6172 + C6171 + C6170) * C6774) *
               C84344 +
           ((C12095 + C12094 + C12093) * C84304 +
            (C12092 + C12091 + C12090) * C6775 +
            (C6169 + C6168 + C6167) * C84528 +
            (C6166 + C6165 + C6164) * C6774) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C19726 +
            (C15867 * C173 + C84188 * C330) * C19636 + C16500 * C19727 +
            C16501 * C19637 + C16502 * C19728 + C16503 * C19638 +
            C16504 * C19729 + C16505 * C84536) *
               C84529 +
           (C26009 + C26010 + C26011 + C26012 + C26013 + C26014 + C26015 +
            C26016) *
               C84344) *
              C1177 -
          (((C15867 * C18071 + C84188 * C18259) * C84536 +
            (C15867 * C17967 + C84188 * C17968) * C19729 + C18284 * C19638 +
            C18283 * C19728 + C18282 * C19637 + C18281 * C19727 +
            C19121 * C19636 + C19120 * C19726) *
               C84344 +
           (C26016 + C26015 + C26014 + C26013 + C26012 + C26011 + C26010 +
            C26009) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C7016 * C102 + C7019 + C7019 + C84528 * C379 +
                       C7017 * C723 + C7020 + C7020 + C84304 * C936) *
                          C1669 +
                      (C7053 + C7054) * C1670 + (C7055 + C7056) * C84550) *
                         C84529 +
                     ((C13139 + C13140) * C1669 + (C11219 + C11220) * C1670 +
                      (C11221 + C11222) * C84550) *
                         C84344) *
                        C1177 -
                    (((C7017 * C5113 + C13129 + C13129 + C84304 * C5436 +
                       C7016 * C4214 + C13130 + C13130 + C84528 * C4614) *
                          C84550 +
                      (C7017 * C5114 + C13131 + C13131 + C84304 * C5437 +
                       C7016 * C4213 + C13132 + C13132 + C84528 * C4613) *
                          C1670 +
                      (C7017 * C5115 + C13133 + C13133 + C84304 * C5438 +
                       C7016 * C4212 + C13134 + C13134 + C84528 * C4612) *
                          C1669) *
                         C84344 +
                     ((C11222 + C11221) * C84550 + (C11220 + C11219) * C1670 +
                      (C13140 + C13139) * C1669) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C19958 * C102 + C19963 + C19963 + C19636 * C379 +
                      C19959 * C723 + C19964 + C19964 + C19637 * C936 +
                      C19960 * C1681 + C19965 + C19965 + C19638 * C2093 +
                      C19961 * C2599 + C19966 + C19966 + C84536 * C3012) *
                         C84188 * C84529 +
                     (C26103 + C26104 + C26105 + C26106) * C84188 * C84344) *
                        C1177 -
                    ((C19961 * C17967 + C26091 + C26091 + C84536 * C18358 +
                      C19960 * C17254 + C26092 + C26092 + C19638 * C17575 +
                      C19959 * C5115 + C26093 + C26093 + C19637 * C5438 +
                      C19958 * C4212 + C26094 + C26094 + C19636 * C4612) *
                         C84188 * C84344 +
                     (C26106 + C26105 + C26104 + C26103) * C84188 * C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C6774 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84528 +
            (C11976 + C11977) * C6775 + (C12302 + C12303) * C84304) *
               C1669 +
           ((C8897 + C8898) * C6774 + (C9124 + C9125) * C84528 +
            (C10999 + C11000) * C6775 + (C11329 + C11330) * C84304) *
               C1670 +
           ((C8901 + C8902) * C6774 + (C9126 + C9127) * C84528 +
            (C11003 + C11004) * C6775 + (C11331 + C11332) * C84304) *
               C84550) *
              C1177 -
          (((C8871 * C5199 + C84344 * C5519 + C8870 * C3543 + C84529 * C3884) *
                C84304 +
            (C8871 * C5113 + C84344 * C5279 + C8870 * C3444 + C84529 * C3631) *
                C6775 +
            (C8871 * C4309 + C84344 * C4716 + C8870 * C1243 + C84529 * C1446) *
                C84528 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C6774) *
               C84550 +
           ((C8871 * C5200 + C84344 * C5520 + C8870 * C3545 + C84529 * C3886) *
                C84304 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C6775 +
            (C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C84528 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C6774) *
               C1670 +
           ((C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
                C84304 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C6775 +
            (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C84528 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C6774) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C19726 +
           (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
               C19636 +
           (C11976 + C11977) * C19727 + (C12302 + C12303) * C19637 +
           (C22895 + C22896) * C19728 + (C23224 + C23225) * C19638 +
           (C25278 + C25279) * C19729 + (C25494 + C25495) * C84536) *
              C84188 * C1177 -
          ((C8871 * C18071 + C84344 * C18439 + C8870 * C16860 +
            C84529 * C17045) *
               C84536 +
           (C8871 * C17967 + C84344 * C18147 + C8870 * C16807 +
            C84529 * C16906) *
               C19729 +
           (C8871 * C17343 + C84344 * C17657 + C8870 * C3546 + C84529 * C3887) *
               C19638 +
           (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 + C84529 * C3630) *
               C19728 +
           (C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
               C19637 +
           (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
               C19727 +
           (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
               C19636 +
           (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
               C19726) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C8870 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84529 +
            (C6164 + C6165 + C6166) * C8871 +
            (C6438 + C6439 + C6440) * C84344) *
               C84528 +
           ((C2925 + C2926 + C2927) * C8870 + (C3195 + C3196 + C3197) * C84529 +
            (C12090 + C12091 + C12092) * C8871 +
            (C12408 + C12409 + C12410) * C84344) *
               C84304) *
              C1177 -
          (((C1680 * C5279 + C84550 * C5596 + C1678 * C5280 + C1670 * C5597 +
             C1676 * C5281 + C1669 * C5598) *
                C84344 +
            (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
             C1676 * C5115 + C1669 * C5118) *
                C8871 +
            (C12410 + C12409 + C12408) * C84529 +
            (C12092 + C12091 + C12090) * C8870) *
               C84304 +
           ((C6443 + C6442 + C6441) * C84344 + (C6172 + C6171 + C6170) * C8871 +
            (C6440 + C6439 + C6438) * C84529 +
            (C6166 + C6165 + C6164) * C8870) *
               C84528) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C8870 +
            (C15867 * C252 + C84188 * C521) * C84529 + C19118 * C8871 +
            C19391 * C84344) *
               C19636 +
           (C25562 + C25563 + C25564 + C25565) * C19637 +
           (C25566 + C25567 + C25568 + C25569) * C19638 +
           (C25570 + C25571 + C25572 + C25576) * C84536) *
              C1177 -
          (((C15867 * C18147 + C84188 * C18532) * C84344 +
            (C15867 * C17967 + C84188 * C17968) * C8871 + C25575 * C84529 +
            C25352 * C8870) *
               C84536 +
           (C18553 * C84344 + C18283 * C8871 + C18552 * C84529 +
            C18279 * C8870) *
               C19638 +
           (C18551 * C84344 + C18281 * C8871 + C18550 * C84529 +
            C18277 * C8870) *
               C19637 +
           (C19392 * C84344 + C19120 * C8871 + C19391 * C84529 +
            C19118 * C8870) *
               C19636) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6774 * C102 + C84528 * C173 + C6775 * C723 + C84304 * C785) *
                C8870 +
            (C6774 * C252 + C84528 * C569 + C6775 * C837 + C84304 * C1082) *
                C84529 +
            (C12827 + C12828) * C8871 + (C13439 + C13440) * C84344) *
               C1669 +
           ((C6801 + C6802) * C8870 + (C7284 + C7285) * C84529 +
            (C10877 + C10878) * C8871 + (C11537 + C11538) * C84344) *
               C1670 +
           ((C6805 + C6806) * C8870 + (C7286 + C7287) * C84529 +
            (C10881 + C10882) * C8871 + (C11539 + C11540) * C84344) *
               C84550) *
              C1177 -
          (((C6775 * C5279 + C84304 * C5673 + C6774 * C4418 + C84528 * C4890) *
                C84344 +
            (C6775 * C5113 + C84304 * C5199 + C6774 * C4214 + C84528 * C4309) *
                C8871 +
            (C11540 + C11539) * C84529 + (C10882 + C10881) * C8870) *
               C84550 +
           ((C6775 * C5280 + C84304 * C5674 + C6774 * C4417 + C84528 * C4889) *
                C84344 +
            (C6775 * C5114 + C84304 * C5200 + C6774 * C4213 + C84528 * C4308) *
                C8871 +
            (C11538 + C11537) * C84529 + (C10878 + C10877) * C8870) *
               C1670 +
           ((C6775 * C5281 + C84304 * C5675 + C6774 * C4416 + C84528 * C4888) *
                C84344 +
            (C6775 * C5115 + C84304 * C5201 + C6774 * C4212 + C84528 * C4307) *
                C8871 +
            (C13440 + C13439) * C84529 + (C12828 + C12827) * C8870) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C19726 * C102 + C19636 * C173 + C19727 * C723 + C19637 * C785 +
            C19728 * C1681 + C19638 * C1788 + C19729 * C2599 + C84536 * C2715) *
               C8870 +
           (C19726 * C252 + C19636 * C569 + C19727 * C837 + C19637 * C1082 +
            C19728 * C1906 + C19638 * C2393 + C19729 * C2795 + C84536 * C3276) *
               C84529 +
           (C25869 + C25870 + C25871 + C25872) * C8871 +
           (C26313 + C26314 + C26315 + C26316) * C84344) *
              C84188 * C1177 -
          ((C19729 * C18147 + C84536 * C18631 + C19728 * C17421 +
            C19638 * C17809 + C19727 * C5281 + C19637 * C5675 + C19726 * C4416 +
            C19636 * C4888) *
               C84344 +
           (C19729 * C17967 + C84536 * C18071 + C19728 * C17254 +
            C19638 * C17343 + C19727 * C5115 + C19637 * C5201 + C19726 * C4212 +
            C19636 * C4307) *
               C8871 +
           (C26316 + C26315 + C26314 + C26313) * C84529 +
           (C25872 + C25871 + C25870 + C25869) * C8870) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C84528 +
            (C12621 + C12622) * C84304) *
               C1669 +
           ((C9379 + C9380) * C84528 + (C11655 + C11656) * C84304) * C1670 +
           ((C9381 + C9382) * C84528 + (C11657 + C11658) * C84304) * C84550) *
              C1177 -
          (((C9343 * C5113 + C13539 + C13539 + C84344 * C5750 + C9342 * C3444 +
             C13540 + C13540 + C84529 * C4124) *
                C84304 +
            (C9343 * C4214 + C10656 + C10656 + C84344 * C4995 + C9342 * C1181 +
             C10657 + C10657 + C84529 * C1587) *
                C84528) *
               C84550 +
           ((C9343 * C5114 + C13541 + C13541 + C84344 * C5751 + C9342 * C3445 +
             C13542 + C13542 + C84529 * C4126) *
                C84304 +
            (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
             C10659 + C10659 + C84529 * C1588) *
                C84528) *
               C1670 +
           ((C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
             C13544 + C13544 + C84529 * C4128) *
                C84304 +
            (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
             C10661 + C10661 + C84529 * C1589) *
                C84528) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C19636 +
           (C12621 + C12622) * C19637 + (C23544 + C23545) * C19638 +
           (C25719 + C25720) * C84536) *
              C84188 * C1177 -
          ((C9343 * C17967 + C26383 + C26383 + C84344 * C18706 +
            C9342 * C16807 + C26384 + C26384 + C84529 * C17177) *
               C84536 +
           (C9343 * C17254 + C24464 + C24464 + C84344 * C17885 + C9342 * C3443 +
            C24465 + C24465 + C84529 * C4127) *
               C19638 +
           (C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
            C13544 + C13544 + C84529 * C4128) *
               C19637 +
           (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
            C10661 + C10661 + C84529 * C1589) *
               C19636) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C1675 * C723 + C1697 + C1697 + C1669 * C733 + C1677 * C722 + C1698 +
            C1698 + C1670 * C732 + C1679 * C721 + C1699 + C1699 +
            C84550 * C731) *
               C84257 * C84581 +
           (C1675 * C1681 + C1700 + C1700 + C1669 * C1689 + C1677 * C1682 +
            C1701 + C1701 + C1670 * C1690 + C1679 * C1683 + C1702 + C1702 +
            C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C1679 * C1684 + C1703 + C1703 + C84550 * C1692 + C1677 * C1683 +
            C1704 + C1704 + C1670 * C1691 + C1675 * C1682 + C1705 + C1705 +
            C1669 * C1690) *
               C84257 * C84558 +
           (C1679 * C720 + C1706 + C1706 + C84550 * C730 + C1677 * C721 +
            C1707 + C1707 + C1670 * C731 + C1675 * C722 + C1708 + C1708 +
            C1669 * C732) *
               C84257 * C84581 +
           (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
            C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
            C1669 * C115) *
               C84257 * C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C84603 * C84604 * C90 -
          (C100 * C107 + C126 + C126 + C85 * C119 + C98 * C106 + C127 + C127 +
           C84 * C118 + C96 * C105 + C128 + C128 + C83 * C117 + C94 * C104 +
           C129 + C129 + C82 * C116 + C92 * C103 + C130 + C130 + C81 * C115) *
              C84257 * C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84597 +
           (C1675 * C1183 + C3468 + C3468 + C1669 * C1193 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1679 * C1181 + C3466 + C3466 +
            C84550 * C1191) *
               C84583 +
           (C1675 * C4212 + C4225 + C4225 + C1669 * C4220 + C1677 * C4213 +
            C4226 + C4226 + C1670 * C4221 + C1679 * C4214 + C4227 + C4227 +
            C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C1679 * C4215 + C4228 + C4228 + C84550 * C4223 + C1677 * C4214 +
            C4229 + C4229 + C1670 * C4222 + C1675 * C4213 + C4230 + C4230 +
            C1669 * C4221) *
               C84561 +
           (C1679 * C1180 + C4231 + C4231 + C84550 * C1190 + C1677 * C1181 +
            C4232 + C4232 + C1670 * C1191 + C1675 * C1182 + C4233 + C4233 +
            C1669 * C1192) *
               C84583 +
           (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
            C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
            C1669 * C115) *
               C84597) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C13624 * C723 + C13634 + C13634 + C84590 * C733 + C13626 * C722 +
            C13635 + C13635 + C84574 * C732 + C13628 * C721 + C13636 + C13636 +
            C84550 * C731) *
               C84257 * C13622 +
           (C13624 * C1681 + C13637 + C13637 + C84590 * C1689 + C13626 * C1682 +
            C13638 + C13638 + C84574 * C1690 + C13628 * C1683 + C13639 +
            C13639 + C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C13628 * C1684 + C13640 + C13640 + C84550 * C1692 + C13626 * C1683 +
            C13641 + C13641 + C84574 * C1691 + C13624 * C1682 + C13642 +
            C13642 + C84590 * C1690) *
               C84257 * C84558 +
           (C13628 * C720 + C13643 + C13643 + C84550 * C730 + C13626 * C721 +
            C13644 + C13644 + C84574 * C731 + C13624 * C722 + C13645 + C13645 +
            C84590 * C732) *
               C84257 * C13622 +
           (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
            C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
            C84590 * C115) *
               C84257 * C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           (C15866 * C723 + C15876 + C15876 + C84188 * C733) * C84257 * C15862 +
           (C15866 * C1681 + C15877 + C15877 + C84188 * C1689) * C84257 *
               C15863 +
           (C15866 * C2599 + C15878 + C15878 + C84188 * C2605) * C84257 *
               C15864 +
           (C15866 * C15868 + C15879 + C15879 + C84188 * C15872) * C84257 *
               C15865) *
              C84603 * C84604 * C90 -
          ((C15866 * C15869 + C15880 + C15880 + C84188 * C15873) * C84257 *
               C15865 +
           (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C84257 *
               C15864 +
           (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84257 *
               C15863 +
           (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84257 * C15862 +
           (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84257 *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84597 +
            (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84583 +
            (C15866 * C4212 + C17261 + C17261 + C84188 * C4220) * C84561) *
               C13621 +
           (C16325 * C84597 +
            (C15866 * C3446 + C16816 + C16816 + C84188 * C3458) * C84583 +
            (C15866 * C5115 + C17262 + C17262 + C84188 * C5121) * C84561) *
               C13622 +
           (C16326 * C84597 +
            (C15866 * C3443 + C16815 + C16815 + C84188 * C3455) * C84583 +
            (C15866 * C17254 + C17263 + C17263 + C84188 * C17258) * C84561) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C15866 * C17255 + C17264 + C17264 + C84188 * C17259) * C84561 +
            (C15866 * C3442 + C17265 + C17265 + C84188 * C3454) * C84583 +
            (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84597) *
               C84558 +
           ((C15866 * C5114 + C17266 + C17266 + C84188 * C5120) * C84561 +
            (C15866 * C3445 + C17267 + C17267 + C84188 * C3457) * C84583 +
            (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84597) *
               C13622 +
           ((C15866 * C4213 + C17268 + C17268 + C84188 * C4221) * C84561 +
            (C15866 * C1182 + C17269 + C17269 + C84188 * C1192) * C84583 +
            (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84597) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C1787 * C1688 + C84558 * C1795 + C1786 * C725 + C84581 * C787 +
            C1785 * C111 + C84596 * C182) *
               C84550 +
           (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
            C1785 * C105 + C84596 * C176) *
               C1680 +
           (C1832 + C1831 + C1830) * C1670 + (C1829 + C1828 + C1827) * C1678 +
           (C1826 + C1825 + C1824) * C1669 + (C1823 + C1822 + C1821) * C1676) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C84603 * C84604 * C90 -
          ((C172 * C113 + C84246 * C184) * C85 +
           (C172 * C107 + C84246 * C178) * C101 + C209 * C84 + C208 * C99 +
           C207 * C83 + C206 * C97 + C205 * C82 + C204 * C95 + C203 * C81 +
           C202 * C93) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C1676 +
            (C172 * C108 + C84246 * C179) * C1669 + C202 * C1678 +
            C203 * C1670 + C204 * C1680 + C205 * C84550) *
               C84597 +
           ((C172 * C1183 + C84246 * C1245) * C1676 +
            (C172 * C1188 + C84246 * C1250) * C1669 + C4332 * C1678 +
            C4333 * C1670 + C4334 * C1680 + C4335 * C84550) *
               C84583 +
           ((C172 * C4212 + C84246 * C4307) * C1676 +
            (C172 * C4216 + C84246 * C4311) * C1669 + C4336 * C1678 +
            C4337 * C1670 + C4338 * C1680 + C4339 * C84550) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C172 * C4219 + C84246 * C4314) * C84550 +
            (C172 * C4215 + C84246 * C4310) * C1680 + C4339 * C1670 +
            C4338 * C1678 + C4337 * C1669 + C4336 * C1676) *
               C84561 +
           ((C172 * C1185 + C84246 * C1247) * C84550 +
            (C172 * C1180 + C84246 * C1242) * C1680 + C4335 * C1670 +
            C4334 * C1678 + C4333 * C1669 + C4332 * C1676) *
               C84583 +
           (C207 * C84550 + C206 * C1680 + C205 * C1670 + C204 * C1678 +
            C203 * C1669 + C202 * C1676) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13724 * C1688 + C84558 * C1795 + C13723 * C725 + C13622 * C787 +
            C13722 * C111 + C13621 * C182) *
               C84550 +
           (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
            C13722 * C105 + C13621 * C176) *
               C13629 +
           (C13761 + C13760 + C13759) * C84574 +
           (C13758 + C13757 + C13756) * C13627 +
           (C13755 + C13754 + C13753) * C84590 +
           (C13752 + C13751 + C13750) * C13625) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C84604 * C90 -
          ((C15930 * C15871 + C15865 * C15934 + C15929 * C2601 +
            C15864 * C2717 + C15928 * C1686 + C15863 * C1793 + C15927 * C727 +
            C15862 * C789 + C15926 * C109 + C15861 * C180) *
               C84188 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C15867) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C15867 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84188) *
               C84597 +
           ((C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
             C13724 * C3443 + C84558 * C3546) *
                C15867 +
            (C13722 * C1188 + C13621 * C1250 + C13723 * C3452 + C13622 * C3553 +
             C13724 * C3449 + C84558 * C3552) *
                C84188) *
               C84583 +
           ((C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
             C13724 * C17254 + C84558 * C17343) *
                C15867 +
            (C13722 * C4216 + C13621 * C4311 + C13723 * C5118 + C13622 * C5204 +
             C13724 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C13724 * C17257 + C84558 * C17346 + C13723 * C5117 +
             C13622 * C5203 + C13722 * C4217 + C13621 * C4312) *
                C84188 +
            (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
             C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
                C15867) *
               C84561 +
           ((C13724 * C3448 + C84558 * C3550 + C13723 * C3451 + C13622 * C3551 +
             C13722 * C1187 + C13621 * C1249) *
                C84188 +
            (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
             C13722 * C1182 + C13621 * C1244) *
                C15867) *
               C84583 +
           ((C13755 + C13754 + C13753) * C84188 +
            (C13752 + C13751 + C13750) * C15867) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           ((C251 * C723 + C84257 * C837) * C1676 +
            (C251 * C728 + C84257 * C842) * C1669 + C1931 * C1678 +
            C1932 * C1670 + C1933 * C1680 + C1934 * C84550) *
               C84581 +
           ((C251 * C1681 + C84257 * C1906) * C1676 +
            (C251 * C1685 + C84257 * C1910) * C1669 + C1935 * C1678 +
            C1936 * C1670 + C1937 * C1680 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C1680 + C1938 * C1670 +
            C1937 * C1678 + C1936 * C1669 + C1935 * C1676) *
               C84558 +
           ((C251 * C725 + C84257 * C839) * C84550 +
            (C251 * C720 + C84257 * C834) * C1680 + C1934 * C1670 +
            C1933 * C1678 + C1932 * C1669 + C1931 * C1676) *
               C84581 +
           (C286 * C84550 + C285 * C1680 + C284 * C1670 + C283 * C1678 +
            C282 * C1669 + C281 * C1676) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C84603 * C84604 * C90 -
          ((C251 * C113 + C84257 * C263) * C85 +
           (C251 * C107 + C84257 * C257) * C101 + C288 * C84 + C287 * C99 +
           C286 * C83 + C285 * C97 + C284 * C82 + C283 * C95 + C282 * C81 +
           C281 * C93) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C1676 +
           (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
            C4415 * C4216 + C84561 * C4420) *
               C1669 +
           (C4449 + C4450 + C4451) * C1678 + (C4452 + C4453 + C4454) * C1670 +
           (C4455 + C4456 + C4457) * C1680 + (C4458 + C4459 + C4460) * C84550) *
              C84246 * C84603 * C84604 * C90 -
          ((C4415 * C4219 + C84561 * C4423 + C4414 * C1185 + C84583 * C1299 +
            C4413 * C111 + C84597 * C261) *
               C84550 +
           (C4415 * C4215 + C84561 * C4419 + C4414 * C1180 + C84583 * C1294 +
            C4413 * C105 + C84597 * C255) *
               C1680 +
           (C4460 + C4459 + C4458) * C1670 + (C4457 + C4456 + C4455) * C1678 +
           (C4454 + C4453 + C4452) * C1669 + (C4451 + C4450 + C4449) * C1676) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C2816 * C13625 + C2817 * C84590 + C1931 * C13627 + C1932 * C84574 +
            C1933 * C13629 + C1934 * C84550) *
               C13622 +
           (C2818 * C13625 + C2819 * C84590 + C1935 * C13627 + C1936 * C84574 +
            C1937 * C13629 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C13629 + C1938 * C84574 +
            C1937 * C13627 + C1936 * C84590 + C1935 * C13625) *
               C84558 +
           (C6884 * C84550 + C6883 * C13629 + C1934 * C84574 + C1933 * C13627 +
            C1932 * C84590 + C1931 * C13625) *
               C13622 +
           (C286 * C84550 + C285 * C13629 + C284 * C84574 + C283 * C13627 +
            C282 * C84590 + C281 * C13625) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C2816 * C15867 + C2817 * C84188) * C15862 +
           (C2818 * C15867 + C2819 * C84188) * C15863 +
           ((C251 * C2599 + C84257 * C2795) * C15867 +
            (C251 * C2602 + C84257 * C2798) * C84188) *
               C15864 +
           ((C251 * C15868 + C84257 * C15977) * C15867 +
            (C251 * C15870 + C84257 * C15979) * C84188) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C251 * C15871 + C84257 * C15980) * C84188 +
            (C251 * C15869 + C84257 * C15978) * C15867) *
               C15865 +
           ((C251 * C2601 + C84257 * C2797) * C84188 +
            (C251 * C2598 + C84257 * C2794) * C15867) *
               C15864 +
           (C1936 * C84188 + C1935 * C15867) * C15863 +
           (C1932 * C84188 + C1931 * C15867) * C15862 +
           (C282 * C84188 + C281 * C15867) * C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C15867 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C84188) *
               C13621 +
           ((C4413 * C723 + C84597 * C837 + C4414 * C3446 + C84583 * C3633 +
             C4415 * C5115 + C84561 * C5281) *
                C15867 +
            (C4413 * C728 + C84597 * C842 + C4414 * C3452 + C84583 * C3639 +
             C4415 * C5118 + C84561 * C5284) *
                C84188) *
               C13622 +
           ((C4413 * C1681 + C84597 * C1906 + C4414 * C3443 + C84583 * C3630 +
             C4415 * C17254 + C84561 * C17421) *
                C15867 +
            (C4413 * C1685 + C84597 * C1910 + C4414 * C3449 + C84583 * C3636 +
             C4415 * C17256 + C84561 * C17423) *
                C84188) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C4415 * C17257 + C84561 * C17424 + C4414 * C3448 + C84583 * C3635 +
             C4413 * C1686 + C84597 * C1911) *
                C84188 +
            (C4415 * C17255 + C84561 * C17422 + C4414 * C3442 + C84583 * C3629 +
             C4413 * C1682 + C84597 * C1907) *
                C15867) *
               C84558 +
           ((C4415 * C5117 + C84561 * C5283 + C4414 * C3451 + C84583 * C3638 +
             C4413 * C727 + C84597 * C841) *
                C84188 +
            (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
             C4413 * C722 + C84597 * C836) *
                C15867) *
               C13622 +
           ((C4454 + C4453 + C4452) * C84188 +
            (C4451 + C4450 + C4449) * C15867) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
            C1680 * C721 + C84550 * C726) *
               C1786 +
           (C1676 * C785 + C1669 * C889 + C1678 * C784 + C1670 * C888 +
            C1680 * C783 + C84550 * C887) *
               C84581 +
           (C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
            C1680 * C1683 + C84550 * C1687) *
               C1787 +
           (C1676 * C1788 + C1669 * C2012 + C1678 * C1789 + C1670 * C2013 +
            C1680 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C1680 * C1791 + C84550 * C2015 + C1678 * C1790 + C1670 * C2014 +
            C1676 * C1789 + C1669 * C2013) *
               C84558 +
           (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
            C1676 * C1682 + C1669 * C1686) *
               C1787 +
           (C1680 * C782 + C84550 * C886 + C1678 * C783 + C1670 * C887 +
            C1676 * C784 + C1669 * C888) *
               C84581 +
           (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
            C1676 * C722 + C1669 * C727) *
               C1786 +
           (C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
            C1676 * C174 + C1669 * C331) *
               C84596 +
           (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
            C1676 * C103 + C1669 * C109) *
               C1785) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C84603 * C84604 * C90 -
          ((C101 * C178 + C85 * C335 + C99 * C177 + C84 * C334 + C97 * C176 +
            C83 * C333 + C95 * C175 + C82 * C332 + C93 * C174 + C81 * C331) *
               C84246 +
           (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 + C97 * C105 +
            C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 + C81 * C109) *
               C172) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C172 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84246) *
               C84597 +
           ((C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
             C1680 * C1181 + C84550 * C1186) *
                C172 +
            (C1676 * C1245 + C1669 * C1349 + C1678 * C1244 + C1670 * C1348 +
             C1680 * C1243 + C84550 * C1347) *
                C84246) *
               C84583 +
           ((C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
             C1680 * C4214 + C84550 * C4218) *
                C172 +
            (C1676 * C4307 + C1669 * C4534 + C1678 * C4308 + C1670 * C4535 +
             C1680 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C1680 * C4310 + C84550 * C4537 + C1678 * C4309 + C1670 * C4536 +
             C1676 * C4308 + C1669 * C4535) *
                C84246 +
            (C1680 * C4215 + C84550 * C4219 + C1678 * C4214 + C1670 * C4218 +
             C1676 * C4213 + C1669 * C4217) *
                C172) *
               C84561 +
           ((C1680 * C1242 + C84550 * C1346 + C1678 * C1243 + C1670 * C1347 +
             C1676 * C1244 + C1669 * C1348) *
                C84246 +
            (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
             C1676 * C1182 + C1669 * C1187) *
                C172) *
               C84583 +
           ((C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
             C1676 * C174 + C1669 * C331) *
                C84246 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C172) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
            C13629 * C721 + C84550 * C726) *
               C13723 +
           (C13625 * C785 + C84590 * C889 + C13627 * C784 + C84574 * C888 +
            C13629 * C783 + C84550 * C887) *
               C13622 +
           (C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
            C13629 * C1683 + C84550 * C1687) *
               C13724 +
           (C13625 * C1788 + C84590 * C2012 + C13627 * C1789 + C84574 * C2013 +
            C13629 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C13629 * C1791 + C84550 * C2015 + C13627 * C1790 + C84574 * C2014 +
            C13625 * C1789 + C84590 * C2013) *
               C84558 +
           (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
            C13625 * C1682 + C84590 * C1686) *
               C13724 +
           (C13629 * C782 + C84550 * C886 + C13627 * C783 + C84574 * C887 +
            C13625 * C784 + C84590 * C888) *
               C13622 +
           (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
            C13625 * C722 + C84590 * C727) *
               C13723 +
           (C13629 * C176 + C84550 * C333 + C13627 * C175 + C84574 * C332 +
            C13625 * C174 + C84590 * C331) *
               C13621 +
           (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
            C13625 * C103 + C84590 * C109) *
               C13722) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 +
           (C15867 * C723 + C84188 * C728) * C15927 +
           (C15867 * C785 + C84188 * C889) * C15862 +
           (C15867 * C1681 + C84188 * C1685) * C15928 +
           (C15867 * C1788 + C84188 * C2012) * C15863 +
           (C15867 * C2599 + C84188 * C2602) * C15929 +
           (C15867 * C2715 + C84188 * C2899) * C15864 +
           (C15867 * C15868 + C84188 * C15870) * C15930 +
           (C15867 * C15931 + C84188 * C16023) * C15865) *
              C84257 * C84603 * C84604 * C90 -
          ((C15867 * C15932 + C84188 * C16024) * C15865 +
           (C15867 * C15869 + C84188 * C15871) * C15930 +
           (C15867 * C2714 + C84188 * C2898) * C15864 +
           (C15867 * C2598 + C84188 * C2601) * C15929 +
           (C15867 * C1789 + C84188 * C2013) * C15863 +
           (C15867 * C1682 + C84188 * C1686) * C15928 +
           (C15867 * C784 + C84188 * C888) * C15862 +
           (C15867 * C722 + C84188 * C727) * C15927 +
           (C15867 * C174 + C84188 * C331) * C15861 +
           (C15867 * C103 + C84188 * C109) * C15926) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C13722 +
            (C15867 * C173 + C84188 * C330) * C13621 + C16500 * C13723 +
            C16501 * C13622 + C16502 * C13724 + C16503 * C84558) *
               C84597 +
           ((C15867 * C1183 + C84188 * C1188) * C13722 +
            (C15867 * C1245 + C84188 * C1349) * C13621 +
            (C15867 * C3446 + C84188 * C3452) * C13723 +
            (C15867 * C3547 + C84188 * C3719) * C13622 +
            (C15867 * C3443 + C84188 * C3449) * C13724 +
            (C15867 * C3546 + C84188 * C3716) * C84558) *
               C84583 +
           ((C15867 * C4212 + C84188 * C4216) * C13722 +
            (C15867 * C4307 + C84188 * C4534) * C13621 +
            (C15867 * C5115 + C84188 * C5118) * C13723 +
            (C15867 * C5201 + C84188 * C5361) * C13622 +
            (C15867 * C17254 + C84188 * C17256) * C13724 +
            (C15867 * C17343 + C84188 * C17499) * C84558) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C15867 * C17344 + C84188 * C17500) * C84558 +
            (C15867 * C17255 + C84188 * C17257) * C13724 +
            (C15867 * C5200 + C84188 * C5360) * C13622 +
            (C15867 * C5114 + C84188 * C5117) * C13723 +
            (C15867 * C4308 + C84188 * C4535) * C13621 +
            (C15867 * C4213 + C84188 * C4217) * C13722) *
               C84561 +
           ((C15867 * C3544 + C84188 * C3715) * C84558 +
            (C15867 * C3442 + C84188 * C3448) * C13724 +
            (C15867 * C3545 + C84188 * C3718) * C13622 +
            (C15867 * C3445 + C84188 * C3451) * C13723 +
            (C15867 * C1244 + C84188 * C1348) * C13621 +
            (C15867 * C1182 + C84188 * C1187) * C13722) *
               C84583 +
           ((C15867 * C1789 + C84188 * C2013) * C84558 +
            (C15867 * C1682 + C84188 * C1686) * C13724 +
            (C15867 * C784 + C84188 * C888) * C13622 +
            (C15867 * C722 + C84188 * C727) * C13723 +
            (C15867 * C174 + C84188 * C331) * C13621 +
            (C15867 * C103 + C84188 * C109) * C13722) *
               C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C2092 * C1684 + C2119 + C2119 + C84558 * C2096 + C2091 * C720 +
            C2120 + C2120 + C84581 * C933 + C2090 * C105 + C2121 + C2121 +
            C84596 * C382) *
               C84550 +
           (C2139 + C2138 + C2137) * C1670 + (C2136 + C2135 + C2134) * C1669) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C84603 * C84604 * C90 -
          ((C378 * C107 + C399 + C399 + C84246 * C384) * C85 + C411 * C84 +
           C410 * C83 + C409 * C82 + C408 * C81) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C1669 + C408 * C1670 +
            C409 * C84550) *
               C84597 +
           ((C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C1669 +
            C4637 * C1670 + C4638 * C84550) *
               C84583 +
           ((C378 * C4212 + C4621 + C4621 + C84246 * C4612) * C1669 +
            C4639 * C1670 + C4640 * C84550) *
               C84561) *
              C84603 * C84604 * C90 -
          (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84550 +
            C4640 * C1670 + C4639 * C1669) *
               C84561 +
           ((C378 * C1180 + C1399 + C1399 + C84246 * C1393) * C84550 +
            C4638 * C1670 + C4637 * C1669) *
               C84583 +
           (C410 * C84550 + C409 * C1670 + C408 * C1669) * C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13985 * C1684 + C14008 + C14008 + C84558 * C2096 + C13984 * C720 +
            C14009 + C14009 + C13622 * C933 + C13983 * C105 + C14010 + C14010 +
            C13621 * C382) *
               C84550 +
           (C14028 + C14027 + C14026) * C84574 +
           (C14025 + C14024 + C14023) * C84590) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C84604 * C90 -
          (C16071 * C15869 + C16080 + C16080 + C15865 * C16073 +
           C16070 * C2598 + C16081 + C16081 + C15864 * C3011 + C16069 * C1682 +
           C16082 + C16082 + C15863 * C2094 + C16068 * C722 + C16083 + C16083 +
           C15862 * C935 + C16067 * C103 + C16084 + C16084 + C15861 * C380) *
              C84188 * C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84188 * C84597 +
           (C13983 * C1183 + C15522 + C15522 + C13621 * C1396 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13985 * C3443 + C15520 +
            C15520 + C84558 * C3798) *
               C84188 * C84583 +
           (C13983 * C4212 + C17578 + C17578 + C13621 * C4612 + C13984 * C5115 +
            C17579 + C17579 + C13622 * C5438 + C13985 * C17254 + C17580 +
            C17580 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C84604 * C90 -
          ((C13985 * C17255 + C17581 + C17581 + C84558 * C17576 +
            C13984 * C5114 + C17582 + C17582 + C13622 * C5437 + C13983 * C4213 +
            C17583 + C17583 + C13621 * C4613) *
               C84188 * C84561 +
           (C13985 * C3442 + C15517 + C15517 + C84558 * C3796 + C13984 * C3445 +
            C15518 + C15518 + C13622 * C3797 + C13983 * C1182 + C15519 +
            C15519 + C13621 * C1395) *
               C84188 * C84583 +
           (C14025 + C14024 + C14023) * C84188 * C84597) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 +
            (C251 * C723 + C84257 * C837) * C1786 +
            (C251 * C785 + C84257 * C988) * C84581 +
            (C251 * C1681 + C84257 * C1906) * C1787 +
            (C251 * C1788 + C84257 * C2213) * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C1787 +
            (C251 * C782 + C84257 * C985) * C84581 +
            (C251 * C720 + C84257 * C834) * C1786 + C474 * C84596 +
            C285 * C1785) *
               C84550 +
           (C2241 + C2231 + C2240 + C2228 + C2227 + C2226) * C1670 +
           (C2239 + C2223 + C2238 + C2220 + C2219 + C2218) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C84603 * C84604 * C90 -
          (((C251 * C178 + C84257 * C458) * C84246 +
            (C251 * C107 + C84257 * C257) * C172) *
               C85 +
           (C479 + C469) * C84 + (C478 + C466) * C83 + (C477 + C463) * C82 +
           (C476 + C460) * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C172 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C84246) *
               C1669 +
           ((C4449 + C4450 + C4451) * C172 + (C4731 + C4732 + C4733) * C84246) *
               C1670 +
           ((C4455 + C4456 + C4457) * C172 + (C4734 + C4735 + C4736) * C84246) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C4415 * C4310 + C84561 * C4717 + C4414 * C1242 + C84583 * C1445 +
             C4413 * C176 + C84597 * C456) *
                C84246 +
            (C4415 * C4215 + C84561 * C4419 + C4414 * C1180 + C84583 * C1294 +
             C4413 * C105 + C84597 * C255) *
                C172) *
               C84550 +
           ((C4736 + C4735 + C4734) * C84246 + (C4457 + C4456 + C4455) * C172) *
               C1670 +
           ((C4733 + C4732 + C4731) * C84246 + (C4451 + C4450 + C4449) * C172) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C13724 + C7138 * C13622 +
            C6883 * C13723 + C474 * C13621 + C285 * C13722) *
               C84550 +
           (C14114 + C14113 + C14112 + C14111 + C14110 + C14109) * C84574 +
           (C14108 + C14107 + C14106 + C14105 + C14104 + C14103) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 +
           (C251 * C2599 + C84257 * C2795) * C15929 +
           (C251 * C2715 + C84257 * C3098) * C15864 +
           (C251 * C15868 + C84257 * C15977) * C15930 +
           (C251 * C15931 + C84257 * C16126) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C251 * C15932 + C84257 * C16127) * C15865 +
           (C251 * C15869 + C84257 * C15978) * C15930 +
           (C251 * C2714 + C84257 * C3097) * C15864 +
           (C251 * C2598 + C84257 * C2794) * C15929 + C2235 * C15863 +
           C1935 * C15928 + C2234 * C15862 + C1931 * C15927 + C472 * C15861 +
           C281 * C15926) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C13722 +
           (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
            C4415 * C4307 + C84561 * C4714) *
               C13621 +
           (C4413 * C723 + C84597 * C837 + C4414 * C3446 + C84583 * C3633 +
            C4415 * C5115 + C84561 * C5281) *
               C13723 +
           (C4413 * C785 + C84597 * C988 + C4414 * C3547 + C84583 * C3888 +
            C4415 * C5201 + C84561 * C5521) *
               C13622 +
           (C4413 * C1681 + C84597 * C1906 + C4414 * C3443 + C84583 * C3630 +
            C4415 * C17254 + C84561 * C17421) *
               C13724 +
           (C4413 * C1788 + C84597 * C2213 + C4414 * C3546 + C84583 * C3887 +
            C4415 * C17343 + C84561 * C17657) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C4415 * C17344 + C84561 * C17658 + C4414 * C3544 + C84583 * C3885 +
            C4413 * C1789 + C84597 * C2214) *
               C84558 +
           (C4415 * C17255 + C84561 * C17422 + C4414 * C3442 + C84583 * C3629 +
            C4413 * C1682 + C84597 * C1907) *
               C13724 +
           (C4415 * C5200 + C84561 * C5520 + C4414 * C3545 + C84583 * C3886 +
            C4413 * C784 + C84597 * C987) *
               C13622 +
           (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
            C4413 * C722 + C84597 * C836) *
               C13723 +
           (C4733 + C4732 + C4731) * C13621 +
           (C4451 + C4450 + C4449) * C13722) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
             C1680 * C721 + C84550 * C726) *
                C251 +
            (C1676 * C837 + C1669 * C1035 + C1678 * C836 + C1670 * C1034 +
             C1680 * C835 + C84550 * C1033) *
                C84257) *
               C84581 +
           ((C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
             C1680 * C1683 + C84550 * C1687) *
                C251 +
            (C1676 * C1906 + C1669 * C2315 + C1678 * C1907 + C1670 * C2316 +
             C1680 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C1680 * C1909 + C84550 * C2318 + C1678 * C1908 + C1670 * C2317 +
             C1676 * C1907 + C1669 * C2316) *
                C84257 +
            (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
             C1676 * C1682 + C1669 * C1686) *
                C251) *
               C84558 +
           ((C1680 * C834 + C84550 * C1032 + C1678 * C835 + C1670 * C1033 +
             C1676 * C836 + C1669 * C1034) *
                C84257 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C251) *
               C84581 +
           ((C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
             C1676 * C253 + C1669 * C522) *
                C84257 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C251) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C84603 * C84604 * C90 -
          ((C101 * C257 + C85 * C526 + C99 * C256 + C84 * C525 + C97 * C255 +
            C83 * C524 + C95 * C254 + C82 * C523 + C93 * C253 + C81 * C522) *
               C84257 +
           (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 + C97 * C105 +
            C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 + C81 * C109) *
               C251) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C4413 +
           (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
            C1680 * C254 + C84550 * C523) *
               C84597 +
           (C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
            C1680 * C1181 + C84550 * C1186) *
               C4414 +
           (C1676 * C1297 + C1669 * C1495 + C1678 * C1296 + C1670 * C1494 +
            C1680 * C1295 + C84550 * C1493) *
               C84583 +
           (C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
            C1680 * C4214 + C84550 * C4218) *
               C4415 +
           (C1676 * C4416 + C1669 * C4810 + C1678 * C4417 + C1670 * C4811 +
            C1680 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C84604 * C90 -
          ((C1680 * C4419 + C84550 * C4813 + C1678 * C4418 + C1670 * C4812 +
            C1676 * C4417 + C1669 * C4811) *
               C84561 +
           (C1680 * C4215 + C84550 * C4219 + C1678 * C4214 + C1670 * C4218 +
            C1676 * C4213 + C1669 * C4217) *
               C4415 +
           (C1680 * C1294 + C84550 * C1492 + C1678 * C1295 + C1670 * C1493 +
            C1676 * C1296 + C1669 * C1494) *
               C84583 +
           (C1680 * C1180 + C84550 * C1185 + C1678 * C1181 + C1670 * C1186 +
            C1676 * C1182 + C1669 * C1187) *
               C4414 +
           (C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
            C1676 * C253 + C1669 * C522) *
               C84597 +
           (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
            C1676 * C103 + C1669 * C109) *
               C4413) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
             C13629 * C721 + C84550 * C726) *
                C251 +
            (C13625 * C837 + C84590 * C1035 + C13627 * C836 + C84574 * C1034 +
             C13629 * C835 + C84550 * C1033) *
                C84257) *
               C13622 +
           ((C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
             C13629 * C1683 + C84550 * C1687) *
                C251 +
            (C13625 * C1906 + C84590 * C2315 + C13627 * C1907 + C84574 * C2316 +
             C13629 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C13629 * C1909 + C84550 * C2318 + C13627 * C1908 + C84574 * C2317 +
             C13625 * C1907 + C84590 * C2316) *
                C84257 +
            (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
             C13625 * C1682 + C84590 * C1686) *
                C251) *
               C84558 +
           ((C13629 * C834 + C84550 * C1032 + C13627 * C835 + C84574 * C1033 +
             C13625 * C836 + C84590 * C1034) *
                C84257 +
            (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
             C13625 * C722 + C84590 * C727) *
                C251) *
               C13622 +
           ((C13629 * C255 + C84550 * C524 + C13627 * C254 + C84574 * C523 +
             C13625 * C253 + C84590 * C522) *
                C84257 +
            (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
             C13625 * C103 + C84590 * C109) *
                C251) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           ((C15867 * C723 + C84188 * C728) * C251 +
            (C15867 * C837 + C84188 * C1035) * C84257) *
               C15862 +
           ((C15867 * C1681 + C84188 * C1685) * C251 +
            (C15867 * C1906 + C84188 * C2315) * C84257) *
               C15863 +
           ((C15867 * C2599 + C84188 * C2602) * C251 +
            (C15867 * C2795 + C84188 * C3181) * C84257) *
               C15864 +
           ((C15867 * C15868 + C84188 * C15870) * C251 +
            (C15867 * C15977 + C84188 * C16170) * C84257) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C15867 * C15978 + C84188 * C16171) * C84257 +
            (C15867 * C15869 + C84188 * C15871) * C251) *
               C15865 +
           ((C15867 * C2794 + C84188 * C3180) * C84257 +
            (C15867 * C2598 + C84188 * C2601) * C251) *
               C15864 +
           ((C15867 * C1907 + C84188 * C2316) * C84257 +
            (C15867 * C1682 + C84188 * C1686) * C251) *
               C15863 +
           ((C15867 * C836 + C84188 * C1034) * C84257 +
            (C15867 * C722 + C84188 * C727) * C251) *
               C15862 +
           ((C15867 * C253 + C84188 * C522) * C84257 +
            (C15867 * C103 + C84188 * C109) * C251) *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C4413 +
            (C15867 * C252 + C84188 * C521) * C84597 +
            (C15867 * C1183 + C84188 * C1188) * C4414 +
            (C15867 * C1297 + C84188 * C1495) * C84583 +
            (C15867 * C4212 + C84188 * C4216) * C4415 +
            (C15867 * C4416 + C84188 * C4810) * C84561) *
               C13621 +
           (C16500 * C4413 + C16660 * C84597 +
            (C15867 * C3446 + C84188 * C3452) * C4414 +
            (C15867 * C3633 + C84188 * C3968) * C84583 +
            (C15867 * C5115 + C84188 * C5118) * C4415 +
            (C15867 * C5281 + C84188 * C5598) * C84561) *
               C13622 +
           (C16502 * C4413 + C16661 * C84597 +
            (C15867 * C3443 + C84188 * C3449) * C4414 +
            (C15867 * C3630 + C84188 * C3965) * C84583 +
            (C15867 * C17254 + C84188 * C17256) * C4415 +
            (C15867 * C17421 + C84188 * C17733) * C84561) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C15867 * C17422 + C84188 * C17734) * C84561 +
            (C15867 * C17255 + C84188 * C17257) * C4415 +
            (C15867 * C3629 + C84188 * C3964) * C84583 +
            (C15867 * C3442 + C84188 * C3448) * C4414 +
            (C15867 * C1907 + C84188 * C2316) * C84597 +
            (C15867 * C1682 + C84188 * C1686) * C4413) *
               C84558 +
           ((C15867 * C5280 + C84188 * C5597) * C84561 +
            (C15867 * C5114 + C84188 * C5117) * C4415 +
            (C15867 * C3632 + C84188 * C3967) * C84583 +
            (C15867 * C3445 + C84188 * C3451) * C4414 +
            (C15867 * C836 + C84188 * C1034) * C84597 +
            (C15867 * C722 + C84188 * C727) * C4413) *
               C13622 +
           ((C15867 * C4417 + C84188 * C4811) * C84561 +
            (C15867 * C4213 + C84188 * C4217) * C4415 +
            (C15867 * C1296 + C84188 * C1494) * C84583 +
            (C15867 * C1182 + C84188 * C1187) * C4414 +
            (C15867 * C253 + C84188 * C522) * C84597 +
            (C15867 * C103 + C84188 * C109) * C4413) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C1787 * C1909 + C84558 * C2396 + C1786 * C834 + C84581 * C1079 +
             C1785 * C255 + C84596 * C572) *
                C84257 +
            (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
             C1785 * C105 + C84596 * C176) *
                C251) *
               C84550 +
           ((C2415 + C2414 + C2413) * C84257 + (C1829 + C1828 + C1827) * C251) *
               C1670 +
           ((C2412 + C2411 + C2410) * C84257 + (C1823 + C1822 + C1821) * C251) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C84603 * C84604 * C90 -
          (((C172 * C257 + C84246 * C574) * C84257 +
            (C172 * C107 + C84246 * C178) * C251) *
               C85 +
           (C595 + C585) * C84 + (C594 + C582) * C83 + (C593 + C579) * C82 +
           (C592 + C576) * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C4413 +
            (C172 * C252 + C84246 * C569) * C84597 +
            (C172 * C1183 + C84246 * C1245) * C4414 +
            (C172 * C1297 + C84246 * C1542) * C84583 +
            (C172 * C4212 + C84246 * C4307) * C4415 +
            (C172 * C4416 + C84246 * C4888) * C84561) *
               C1669 +
           (C4893 + C4894 + C4895 + C4913 + C4898 + C4914) * C1670 +
           (C4901 + C4902 + C4903 + C4915 + C4906 + C4916) * C84550) *
              C84603 * C84604 * C90 -
          (((C172 * C4419 + C84246 * C4891) * C84561 +
            (C172 * C4215 + C84246 * C4310) * C4415 +
            (C172 * C1294 + C84246 * C1539) * C84583 +
            (C172 * C1180 + C84246 * C1242) * C4414 + C590 * C84597 +
            C206 * C4413) *
               C84550 +
           (C4916 + C4906 + C4915 + C4903 + C4902 + C4901) * C1670 +
           (C4914 + C4898 + C4913 + C4895 + C4894 + C4893) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C13724 * C1909 + C84558 * C2396 + C13723 * C834 + C13622 * C1079 +
             C13722 * C255 + C13621 * C572) *
                C84257 +
            (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
             C13722 * C105 + C13621 * C176) *
                C251) *
               C84550 +
           ((C14280 + C14279 + C14278) * C84257 +
            (C13758 + C13757 + C13756) * C251) *
               C84574 +
           ((C14277 + C14276 + C14275) * C84257 +
            (C13752 + C13751 + C13750) * C251) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C84604 * C90 -
          ((C15930 * C15978 + C15865 * C16215 + C15929 * C2794 +
            C15864 * C3275 + C15928 * C1907 + C15863 * C2394 + C15927 * C836 +
            C15862 * C1081 + C15926 * C253 + C15861 * C570) *
               C84257 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C251) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C4413 +
           (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
            C13724 * C1906 + C84558 * C2393) *
               C84597 +
           (C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
            C13724 * C3443 + C84558 * C3546) *
               C4414 +
           (C13722 * C1297 + C13621 * C1542 + C13723 * C3633 + C13622 * C4048 +
            C13724 * C3630 + C84558 * C4047) *
               C84583 +
           (C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
            C13724 * C17254 + C84558 * C17343) *
               C4415 +
           (C13722 * C4416 + C13621 * C4888 + C13723 * C5281 + C13622 * C5675 +
            C13724 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C84604 * C90 -
          ((C13724 * C17422 + C84558 * C17810 + C13723 * C5280 +
            C13622 * C5674 + C13722 * C4417 + C13621 * C4889) *
               C84561 +
           (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
            C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
               C4415 +
           (C13724 * C3629 + C84558 * C4045 + C13723 * C3632 + C13622 * C4046 +
            C13722 * C1296 + C13621 * C1541) *
               C84583 +
           (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
            C13722 * C1182 + C13621 * C1244) *
               C4414 +
           (C14277 + C14276 + C14275) * C84597 +
           (C13752 + C13751 + C13750) * C4413) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84581 +
            (C637 * C1681 + C2494 + C2494 + C84257 * C2489) * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84581 +
            C669 * C84596) *
               C84550 +
           (C2523 + C2522 + C2501) * C1670 + (C2521 + C2520 + C2495) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C84603 * C84604 * C90 -
          ((C637 * C107 + C658 + C658 + C84257 * C643) * C84246 * C85 +
           C674 * C84 + C673 * C83 + C672 * C82 + C671 * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C84246 * C1669 +
           (C5034 + C5035 + C5036) * C84246 * C1670 +
           (C5037 + C5038 + C5039) * C84246 * C84550) *
              C84603 * C84604 * C90 -
          ((C4992 * C4215 + C5019 + C5019 + C84561 * C4996 + C4991 * C1180 +
            C5020 + C5020 + C84583 * C1586 + C4990 * C105 + C5021 + C5021 +
            C84597 * C641) *
               C84246 * C84550 +
           (C5039 + C5038 + C5037) * C84246 * C1670 +
           (C5036 + C5035 + C5034) * C84246 * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            C7365 * C13622 + C669 * C13621) *
               C84550 +
           (C14360 + C14359 + C14358) * C84574 +
           (C14357 + C14356 + C14355) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 +
           (C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C15864 +
           (C637 * C15868 + C16261 + C16261 + C84257 * C16258) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C15865 +
           (C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C15864 +
           C2517 * C15863 + C2516 * C15862 + C667 * C15861) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C13621 +
           (C4990 * C723 + C5762 + C5762 + C84597 * C1129 + C4991 * C3446 +
            C5761 + C5761 + C84583 * C4128 + C4992 * C5115 + C5760 + C5760 +
            C84561 * C5752) *
               C13622 +
           (C4990 * C1681 + C17888 + C17888 + C84597 * C2489 + C4991 * C3443 +
            C17889 + C17889 + C84583 * C4127 + C4992 * C17254 + C17890 +
            C17890 + C84561 * C17885) *
               C84558) *
              C84188 * C84603 * C84604 * C90 -
          ((C4992 * C17255 + C17891 + C17891 + C84561 * C17886 + C4991 * C3442 +
            C17892 + C17892 + C84583 * C4125 + C4990 * C1682 + C17893 + C17893 +
            C84597 * C2490) *
               C84558 +
           (C4992 * C5114 + C5757 + C5757 + C84561 * C5751 + C4991 * C3445 +
            C5758 + C5758 + C84583 * C4126 + C4990 * C722 + C5759 + C5759 +
            C84597 * C1128) *
               C13622 +
           (C5036 + C5035 + C5034) * C13621) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C2634 + C2635 + C2636) * C84257 * C84581 +
           (C2637 + C2638 + C2639) * C84257 * C84558) *
              C84603 * C716 -
          ((C1679 * C2597 + C2619 + C2619 + C84550 * C2603 + C1677 * C2598 +
            C2620 + C2620 + C1670 * C2604 + C1675 * C2599 + C2621 + C2621 +
            C1669 * C2605) *
               C84257 * C84558 +
           (C2639 + C2638 + C2637) * C84257 * C84581 +
           (C2636 + C2635 + C2634) * C84257 * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C84603 * C716 -
          (C100 * C719 + C735 + C735 + C85 * C729 + C98 * C720 + C736 + C736 +
           C84 * C730 + C96 * C721 + C737 + C737 + C83 * C731 + C94 * C722 +
           C738 + C738 + C82 * C732 + C92 * C723 + C739 + C739 + C81 * C733) *
              C84257 * C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84597 +
           (C1675 * C1183 + C3468 + C3468 + C1669 * C1193 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1679 * C1181 + C3466 + C3466 +
            C84550 * C1191) *
               C84583 +
           (C1675 * C4212 + C4225 + C4225 + C1669 * C4220 + C1677 * C4213 +
            C4226 + C4226 + C1670 * C4221 + C1679 * C4214 + C4227 + C4227 +
            C84550 * C4222) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C1679 * C5113 + C5123 + C5123 + C84550 * C5119 + C1677 * C5114 +
            C5124 + C5124 + C1670 * C5120 + C1675 * C5115 + C5125 + C5125 +
            C1669 * C5121) *
               C84561 +
           (C1679 * C3444 + C3463 + C3463 + C84550 * C3456 + C1677 * C3445 +
            C3464 + C3464 + C1670 * C3457 + C1675 * C3446 + C3465 + C3465 +
            C1669 * C3458) *
               C84583 +
           (C2636 + C2635 + C2634) * C84597) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C84603 * C716 -
          ((C13628 * C2597 + C14447 + C14447 + C84550 * C2603 + C13626 * C2598 +
            C14448 + C14448 + C84574 * C2604 + C13624 * C2599 + C14449 +
            C14449 + C84590 * C2605) *
               C84257 * C84558 +
           (C14467 + C14466 + C14465) * C84257 * C13622 +
           (C14464 + C14463 + C14462) * C84257 * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C84603 * C716 -
          ((C15866 * C16304 + C16316 + C16316 + C84188 * C16306) * C84257 *
               C15865 +
           C16332 * C15864 + C16331 * C15863 + C16330 * C15862 +
           C16329 * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84597 +
            (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84583 +
            (C15866 * C4212 + C17261 + C17261 + C84188 * C4220) * C84561) *
               C13621 +
           (C17971 + C17994 + C17995) * C13622 +
           (C17976 + C17996 + C17997) * C84558) *
              C84603 * C716 -
          (((C15866 * C17967 + C17981 + C17981 + C84188 * C17969) * C84561 +
            (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84583 +
            C16327 * C84597) *
               C84558 +
           (C17997 + C17996 + C17976) * C13622 +
           (C17995 + C17994 + C17971) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C84603 * C716 -
          ((C1787 * C2600 + C84558 * C2716 + C1786 * C1687 + C84581 * C1794 +
            C1785 * C726 + C84596 * C788) *
               C84550 +
           (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 + C84581 * C1790 +
            C1785 * C721 + C84596 * C783) *
               C1680 +
           (C1787 * C2601 + C84558 * C2717 + C1786 * C1686 + C84581 * C1793 +
            C1785 * C727 + C84596 * C789) *
               C1670 +
           (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
            C1785 * C722 + C84596 * C784) *
               C1678 +
           (C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
            C1785 * C728 + C84596 * C790) *
               C1669 +
           (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
            C1785 * C723 + C84596 * C785) *
               C1676) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C84603 * C716 -
          ((C172 * C724 + C84246 * C786) * C85 +
           (C172 * C719 + C84246 * C781) * C101 +
           (C172 * C725 + C84246 * C787) * C84 +
           (C172 * C720 + C84246 * C782) * C99 +
           (C172 * C726 + C84246 * C788) * C83 +
           (C172 * C721 + C84246 * C783) * C97 +
           (C172 * C727 + C84246 * C789) * C82 +
           (C172 * C722 + C84246 * C784) * C95 +
           (C172 * C728 + C84246 * C790) * C81 +
           (C172 * C723 + C84246 * C785) * C93) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C1676 +
            (C172 * C108 + C84246 * C179) * C1669 + C202 * C1678 +
            C203 * C1670 + C204 * C1680 + C205 * C84550) *
               C84597 +
           ((C172 * C1183 + C84246 * C1245) * C1676 +
            (C172 * C1188 + C84246 * C1250) * C1669 + C4332 * C1678 +
            C4333 * C1670 + C4334 * C1680 + C4335 * C84550) *
               C84583 +
           ((C172 * C4212 + C84246 * C4307) * C1676 +
            (C172 * C4216 + C84246 * C4311) * C1669 + C4336 * C1678 +
            C4337 * C1670 + C4338 * C1680 + C4339 * C84550) *
               C84561) *
              C84603 * C716 -
          (((C172 * C5116 + C84246 * C5202) * C84550 +
            (C172 * C5113 + C84246 * C5199) * C1680 +
            (C172 * C5117 + C84246 * C5203) * C1670 +
            (C172 * C5114 + C84246 * C5200) * C1678 +
            (C172 * C5118 + C84246 * C5204) * C1669 +
            (C172 * C5115 + C84246 * C5201) * C1676) *
               C84561 +
           ((C172 * C3450 + C84246 * C3549) * C84550 +
            (C172 * C3444 + C84246 * C3543) * C1680 +
            (C172 * C3451 + C84246 * C3551) * C1670 +
            (C172 * C3445 + C84246 * C3545) * C1678 +
            (C172 * C3452 + C84246 * C3553) * C1669 +
            (C172 * C3446 + C84246 * C3547) * C1676) *
               C84583 +
           ((C172 * C726 + C84246 * C788) * C84550 +
            (C172 * C721 + C84246 * C783) * C1680 +
            (C172 * C727 + C84246 * C789) * C1670 +
            (C172 * C722 + C84246 * C784) * C1678 +
            (C172 * C728 + C84246 * C790) * C1669 +
            (C172 * C723 + C84246 * C785) * C1676) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C716 -
          ((C13724 * C2600 + C84558 * C2716 + C13723 * C1687 + C13622 * C1794 +
            C13722 * C726 + C13621 * C788) *
               C84550 +
           (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
            C13722 * C721 + C13621 * C783) *
               C13629 +
           (C13724 * C2601 + C84558 * C2717 + C13723 * C1686 + C13622 * C1793 +
            C13722 * C727 + C13621 * C789) *
               C84574 +
           (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
            C13722 * C722 + C13621 * C784) *
               C13627 +
           (C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
            C13722 * C728 + C13621 * C790) *
               C84590 +
           (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
            C13722 * C723 + C13621 * C785) *
               C13625) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C716 -
          ((C15930 * C16305 + C15865 * C16375 + C15929 * C15870 +
            C15864 * C15933 + C15928 * C2602 + C15863 * C2718 + C15927 * C1685 +
            C15862 * C1792 + C15926 * C728 + C15861 * C790) *
               C84188 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C15867) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C15867 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84188) *
               C84597 +
           ((C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
             C13724 * C3443 + C84558 * C3546) *
                C15867 +
            (C13722 * C1188 + C13621 * C1250 + C13723 * C3452 + C13622 * C3553 +
             C13724 * C3449 + C84558 * C3552) *
                C84188) *
               C84583 +
           ((C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
             C13724 * C17254 + C84558 * C17343) *
                C15867 +
            (C13722 * C4216 + C13621 * C4311 + C13723 * C5118 + C13622 * C5204 +
             C13724 * C17256 + C84558 * C17345) *
                C84188) *
               C84561) *
              C84603 * C716 -
          (((C13724 * C17968 + C84558 * C18072 + C13723 * C17256 +
             C13622 * C17345 + C13722 * C5118 + C13621 * C5204) *
                C84188 +
            (C13724 * C17967 + C84558 * C18071 + C13723 * C17254 +
             C13622 * C17343 + C13722 * C5115 + C13621 * C5201) *
                C15867) *
               C84561 +
           ((C13724 * C16809 + C84558 * C16862 + C13723 * C3449 +
             C13622 * C3552 + C13722 * C3452 + C13621 * C3553) *
                C84188 +
            (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
             C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
                C15867) *
               C84583 +
           ((C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
             C13722 * C728 + C13621 * C790) *
                C84188 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C15867) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
           (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C1680 +
            (C251 * C2601 + C84257 * C2797) * C1670 +
            (C251 * C2598 + C84257 * C2794) * C1678 +
            (C251 * C2602 + C84257 * C2798) * C1669 +
            (C251 * C2599 + C84257 * C2795) * C1676) *
               C84558 +
           (C2815 + C2814 + C2813 + C2812 + C2823 + C2822) * C84581 +
           (C2807 + C2806 + C2805 + C2804 + C2821 + C2820) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C84603 * C716 -
          ((C251 * C724 + C84257 * C838) * C85 +
           (C251 * C719 + C84257 * C833) * C101 +
           (C251 * C725 + C84257 * C839) * C84 +
           (C251 * C720 + C84257 * C834) * C99 +
           (C251 * C726 + C84257 * C840) * C83 +
           (C251 * C721 + C84257 * C835) * C97 +
           (C251 * C727 + C84257 * C841) * C82 +
           (C251 * C722 + C84257 * C836) * C95 +
           (C251 * C728 + C84257 * C842) * C81 +
           (C251 * C723 + C84257 * C837) * C93) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C1676 +
           (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
            C4415 * C4216 + C84561 * C4420) *
               C1669 +
           (C4449 + C4450 + C4451) * C1678 + (C4452 + C4453 + C4454) * C1670 +
           (C4455 + C4456 + C4457) * C1680 + (C4458 + C4459 + C4460) * C84550) *
              C84246 * C84603 * C716 -
          ((C4415 * C5116 + C84561 * C5282 + C4414 * C3450 + C84583 * C3637 +
            C4413 * C726 + C84597 * C840) *
               C84550 +
           (C4415 * C5113 + C84561 * C5279 + C4414 * C3444 + C84583 * C3631 +
            C4413 * C721 + C84597 * C835) *
               C1680 +
           (C4415 * C5117 + C84561 * C5283 + C4414 * C3451 + C84583 * C3638 +
            C4413 * C727 + C84597 * C841) *
               C1670 +
           (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
            C4413 * C722 + C84597 * C836) *
               C1678 +
           (C4415 * C5118 + C84561 * C5284 + C4414 * C3452 + C84583 * C3639 +
            C4413 * C728 + C84597 * C842) *
               C1669 +
           (C4415 * C5115 + C84561 * C5281 + C4414 * C3446 + C84583 * C3633 +
            C4413 * C723 + C84597 * C837) *
               C1676) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C13629 +
            (C251 * C2601 + C84257 * C2797) * C84574 +
            (C251 * C2598 + C84257 * C2794) * C13627 +
            (C251 * C2602 + C84257 * C2798) * C84590 +
            (C251 * C2599 + C84257 * C2795) * C13625) *
               C84558 +
           (C14627 + C14626 + C14625 + C14624 + C14623 + C14622) * C13622 +
           (C14621 + C14620 + C14619 + C14618 + C14617 + C14616) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C84603 * C716 -
          (((C251 * C16305 + C84257 * C16419) * C84188 +
            (C251 * C16304 + C84257 * C16418) * C15867) *
               C15865 +
           (C16440 + C16439) * C15864 + (C16438 + C16437) * C15863 +
           (C16424 + C16423) * C15862 + (C16422 + C16421) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C15867 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C84188) *
               C13621 +
           ((C18174 + C18175 + C18176) * C15867 +
            (C18177 + C18178 + C18179) * C84188) *
               C13622 +
           ((C18180 + C18181 + C18182) * C15867 +
            (C18183 + C18184 + C18185) * C84188) *
               C84558) *
              C84603 * C716 -
          (((C4415 * C17968 + C84561 * C18148 + C4414 * C16809 +
             C84583 * C16908 + C4413 * C2602 + C84597 * C2798) *
                C84188 +
            (C4415 * C17967 + C84561 * C18147 + C4414 * C16807 +
             C84583 * C16906 + C4413 * C2599 + C84597 * C2795) *
                C15867) *
               C84558 +
           ((C18185 + C18184 + C18183) * C84188 +
            (C18182 + C18181 + C18180) * C15867) *
               C13622 +
           ((C18179 + C18178 + C18177) * C84188 +
            (C18176 + C18175 + C18174) * C15867) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C2925 + C2926 + C2927) * C1786 + (C2928 + C2929 + C2930) * C84581 +
           (C2931 + C2932 + C2933) * C1787 + (C2934 + C2935 + C2936) * C84558) *
              C84257 * C84603 * C716 -
          ((C1680 * C2713 + C84550 * C2897 + C1678 * C2714 + C1670 * C2898 +
            C1676 * C2715 + C1669 * C2899) *
               C84558 +
           (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
            C1676 * C2599 + C1669 * C2602) *
               C1787 +
           (C2936 + C2935 + C2934) * C84581 + (C2933 + C2932 + C2931) * C1786 +
           (C2930 + C2929 + C2928) * C84596 + (C2927 + C2926 + C2925) * C1785) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C84603 * C716 -
          ((C101 * C781 + C85 * C885 + C99 * C782 + C84 * C886 + C97 * C783 +
            C83 * C887 + C95 * C784 + C82 * C888 + C93 * C785 + C81 * C889) *
               C84246 +
           (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 + C97 * C721 +
            C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 + C81 * C728) *
               C172) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C172 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84246) *
               C84597 +
           ((C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
             C1680 * C1181 + C84550 * C1186) *
                C172 +
            (C1676 * C1245 + C1669 * C1349 + C1678 * C1244 + C1670 * C1348 +
             C1680 * C1243 + C84550 * C1347) *
                C84246) *
               C84583 +
           ((C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
             C1680 * C4214 + C84550 * C4218) *
                C172 +
            (C1676 * C4307 + C1669 * C4534 + C1678 * C4308 + C1670 * C4535 +
             C1680 * C4309 + C84550 * C4536) *
                C84246) *
               C84561) *
              C84603 * C716 -
          (((C1680 * C5199 + C84550 * C5359 + C1678 * C5200 + C1670 * C5360 +
             C1676 * C5201 + C1669 * C5361) *
                C84246 +
            (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
             C1676 * C5115 + C1669 * C5118) *
                C172) *
               C84561 +
           ((C1680 * C3543 + C84550 * C3717 + C1678 * C3545 + C1670 * C3718 +
             C1676 * C3547 + C1669 * C3719) *
                C84246 +
            (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
             C1676 * C3446 + C1669 * C3452) *
                C172) *
               C84583 +
           ((C2930 + C2929 + C2928) * C84246 + (C2927 + C2926 + C2925) * C172) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C84603 * C716 -
          ((C13629 * C2713 + C84550 * C2897 + C13627 * C2714 + C84574 * C2898 +
            C13625 * C2715 + C84590 * C2899) *
               C84558 +
           (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
            C13625 * C2599 + C84590 * C2602) *
               C13724 +
           (C14737 + C14736 + C14735) * C13622 +
           (C14734 + C14733 + C14732) * C13723 +
           (C14731 + C14730 + C14729) * C13621 +
           (C14728 + C14727 + C14726) * C13722) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C84603 * C716 -
          ((C15867 * C16374 + C84188 * C16482) * C15865 +
           (C15867 * C16304 + C84188 * C16305) * C15930 + C16507 * C15864 +
           C16506 * C15929 + C16505 * C15863 + C16504 * C15928 +
           C16503 * C15862 + C16502 * C15927 + C16501 * C15861 +
           C16500 * C15926) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C13722 +
            (C15867 * C173 + C84188 * C330) * C13621 + C16500 * C13723 +
            C16501 * C13622 + C16502 * C13724 + C16503 * C84558) *
               C84597 +
           ((C15867 * C1183 + C84188 * C1188) * C13722 +
            (C15867 * C1245 + C84188 * C1349) * C13621 + C18277 * C13723 +
            C18278 * C13622 + C18279 * C13724 + C18280 * C84558) *
               C84583 +
           ((C15867 * C4212 + C84188 * C4216) * C13722 +
            (C15867 * C4307 + C84188 * C4534) * C13621 + C18281 * C13723 +
            C18282 * C13622 + C18283 * C13724 + C18284 * C84558) *
               C84561) *
              C84603 * C716 -
          (((C15867 * C18071 + C84188 * C18259) * C84558 +
            (C15867 * C17967 + C84188 * C17968) * C13724 + C18284 * C13622 +
            C18283 * C13723 + C18282 * C13621 + C18281 * C13722) *
               C84561 +
           ((C15867 * C16860 + C84188 * C16952) * C84558 +
            (C15867 * C16807 + C84188 * C16809) * C13724 + C18280 * C13622 +
            C18279 * C13723 + C18278 * C13621 + C18277 * C13722) *
               C84583 +
           (C16505 * C84558 + C16504 * C13724 + C16503 * C13622 +
            C16502 * C13723 + C16501 * C13621 + C16500 * C13722) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C84603 * C716 -
          ((C2092 * C2597 + C3014 + C3014 + C84558 * C3010 + C2091 * C1683 +
            C3015 + C3015 + C84581 * C2095 + C2090 * C721 + C3016 + C3016 +
            C84596 * C934) *
               C84550 +
           (C2092 * C2598 + C3017 + C3017 + C84558 * C3011 + C2091 * C1682 +
            C3018 + C3018 + C84581 * C2094 + C2090 * C722 + C3019 + C3019 +
            C84596 * C935) *
               C1670 +
           (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
            C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
            C84596 * C936) *
               C1669) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C84603 * C716 -
          ((C378 * C719 + C938 + C938 + C84246 * C932) * C85 +
           (C378 * C720 + C939 + C939 + C84246 * C933) * C84 +
           (C378 * C721 + C940 + C940 + C84246 * C934) * C83 +
           (C378 * C722 + C941 + C941 + C84246 * C935) * C82 +
           (C378 * C723 + C942 + C942 + C84246 * C936) * C81) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C1669 + C408 * C1670 +
            C409 * C84550) *
               C84597 +
           ((C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C1669 +
            C4637 * C1670 + C4638 * C84550) *
               C84583 +
           ((C378 * C4212 + C4621 + C4621 + C84246 * C4612) * C1669 +
            C4639 * C1670 + C4640 * C84550) *
               C84561) *
              C84603 * C716 -
          (((C378 * C5113 + C5440 + C5440 + C84246 * C5436) * C84550 +
            (C378 * C5114 + C5441 + C5441 + C84246 * C5437) * C1670 +
            (C378 * C5115 + C5442 + C5442 + C84246 * C5438) * C1669) *
               C84561 +
           ((C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C84550 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C1670 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C1669) *
               C84583 +
           ((C378 * C721 + C940 + C940 + C84246 * C934) * C84550 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C1670 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C1669) *
               C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C716 -
          ((C13985 * C2597 + C14812 + C14812 + C84558 * C3010 + C13984 * C1683 +
            C14813 + C14813 + C13622 * C2095 + C13983 * C721 + C14814 + C14814 +
            C13621 * C934) *
               C84550 +
           (C13985 * C2598 + C14815 + C14815 + C84558 * C3011 + C13984 * C1682 +
            C14816 + C14816 + C13622 * C2094 + C13983 * C722 + C14817 + C14817 +
            C13621 * C935) *
               C84574 +
           (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 + C13984 * C1681 +
            C14819 + C14819 + C13622 * C2093 + C13983 * C723 + C14820 + C14820 +
            C13621 * C936) *
               C84590) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C716 -
          (C16071 * C16304 + C16551 + C16551 + C15865 * C16549 +
           C16070 * C15868 + C16552 + C16552 + C15864 * C16072 +
           C16069 * C2599 + C16553 + C16553 + C15863 * C3012 + C16068 * C1681 +
           C16554 + C16554 + C15862 * C2093 + C16067 * C723 + C16555 + C16555 +
           C15861 * C936) *
              C84188 * C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84188 * C84597 +
           (C13983 * C1183 + C15522 + C15522 + C13621 * C1396 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13985 * C3443 + C15520 +
            C15520 + C84558 * C3798) *
               C84188 * C84583 +
           (C13983 * C4212 + C17578 + C17578 + C13621 * C4612 + C13984 * C5115 +
            C17579 + C17579 + C13622 * C5438 + C13985 * C17254 + C17580 +
            C17580 + C84558 * C17575) *
               C84188 * C84561) *
              C84603 * C716 -
          ((C13985 * C17967 + C18360 + C18360 + C84558 * C18358 +
            C13984 * C17254 + C18361 + C18361 + C13622 * C17575 +
            C13983 * C5115 + C18362 + C18362 + C13621 * C5438) *
               C84188 * C84561 +
           (C13985 * C16807 + C18363 + C18363 + C84558 * C16996 +
            C13984 * C3443 + C18364 + C18364 + C13622 * C3798 + C13983 * C3446 +
            C18365 + C18365 + C13621 * C3799) *
               C84188 * C84583 +
           (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 + C13984 * C1681 +
            C14819 + C14819 + C13622 * C2093 + C13983 * C723 + C14820 + C14820 +
            C13621 * C936) *
               C84188 * C84597) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
            C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C1787 + C2237 * C84581 +
            C1937 * C1786 + C2236 * C84596 + C1933 * C1785) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C1787 + C2235 * C84581 +
            C1935 * C1786 + C2234 * C84596 + C1931 * C1785) *
               C1670 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C1787 + C3105 * C84581 +
            C2818 * C1786 + C3104 * C84596 + C2816 * C1785) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C84603 * C716 -
          (((C251 * C781 + C84257 * C984) * C84246 +
            (C251 * C719 + C84257 * C833) * C172) *
               C85 +
           ((C251 * C782 + C84257 * C985) * C84246 +
            (C251 * C720 + C84257 * C834) * C172) *
               C84 +
           ((C251 * C783 + C84257 * C986) * C84246 +
            (C251 * C721 + C84257 * C835) * C172) *
               C83 +
           ((C251 * C784 + C84257 * C987) * C84246 +
            (C251 * C722 + C84257 * C836) * C172) *
               C82 +
           ((C251 * C785 + C84257 * C988) * C84246 +
            (C251 * C723 + C84257 * C837) * C172) *
               C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C172 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C84246) *
               C1669 +
           ((C4449 + C4450 + C4451) * C172 + (C4731 + C4732 + C4733) * C84246) *
               C1670 +
           ((C4455 + C4456 + C4457) * C172 + (C4734 + C4735 + C4736) * C84246) *
               C84550) *
              C84603 * C716 -
          (((C4415 * C5199 + C84561 * C5519 + C4414 * C3543 + C84583 * C3884 +
             C4413 * C783 + C84597 * C986) *
                C84246 +
            (C4415 * C5113 + C84561 * C5279 + C4414 * C3444 + C84583 * C3631 +
             C4413 * C721 + C84597 * C835) *
                C172) *
               C84550 +
           ((C4415 * C5200 + C84561 * C5520 + C4414 * C3545 + C84583 * C3886 +
             C4413 * C784 + C84597 * C987) *
                C84246 +
            (C4415 * C5114 + C84561 * C5280 + C4414 * C3445 + C84583 * C3632 +
             C4413 * C722 + C84597 * C836) *
                C172) *
               C1670 +
           ((C4415 * C5201 + C84561 * C5521 + C4414 * C3547 + C84583 * C3888 +
             C4413 * C785 + C84597 * C988) *
                C84246 +
            (C4415 * C5115 + C84561 * C5281 + C4414 * C3446 + C84583 * C3633 +
             C4413 * C723 + C84597 * C837) *
                C172) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C13724 + C2237 * C13622 +
            C1937 * C13723 + C2236 * C13621 + C1933 * C13722) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C13724 + C2235 * C13622 +
            C1935 * C13723 + C2234 * C13621 + C1931 * C13722) *
               C84574 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C13724 + C3105 * C13622 +
            C2818 * C13723 + C3104 * C13621 + C2816 * C13722) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C84603 * C716 -
          ((C251 * C16374 + C84257 * C16597) * C15865 +
           (C251 * C16304 + C84257 * C16418) * C15930 + C16604 * C15864 +
           C16435 * C15929 + C16603 * C15863 + C16433 * C15928 +
           C3105 * C15862 + C2818 * C15927 + C3104 * C15861 + C2816 * C15926) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C13722 +
           (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
            C4415 * C4307 + C84561 * C4714) *
               C13621 +
           (C18174 + C18175 + C18176) * C13723 +
           (C18453 + C18454 + C18455) * C13622 +
           (C18180 + C18181 + C18182) * C13724 +
           (C18456 + C18457 + C18458) * C84558) *
              C84188 * C84603 * C716 -
          ((C4415 * C18071 + C84561 * C18439 + C4414 * C16860 +
            C84583 * C17045 + C4413 * C2715 + C84597 * C3098) *
               C84558 +
           (C4415 * C17967 + C84561 * C18147 + C4414 * C16807 +
            C84583 * C16906 + C4413 * C2599 + C84597 * C2795) *
               C13724 +
           (C18458 + C18457 + C18456) * C13622 +
           (C18182 + C18181 + C18180) * C13723 +
           (C18455 + C18454 + C18453) * C13621 +
           (C18176 + C18175 + C18174) * C13722) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C2925 + C2926 + C2927) * C251 + (C3195 + C3196 + C3197) * C84257) *
               C84581 +
           ((C2931 + C2932 + C2933) * C251 + (C3198 + C3199 + C3200) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C1680 * C2793 + C84550 * C3179 + C1678 * C2794 + C1670 * C3180 +
             C1676 * C2795 + C1669 * C3181) *
                C84257 +
            (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
             C1676 * C2599 + C1669 * C2602) *
                C251) *
               C84558 +
           ((C3200 + C3199 + C3198) * C84257 + (C2933 + C2932 + C2931) * C251) *
               C84581 +
           ((C3197 + C3196 + C3195) * C84257 + (C2927 + C2926 + C2925) * C251) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C84603 * C716 -
          ((C101 * C833 + C85 * C1031 + C99 * C834 + C84 * C1032 + C97 * C835 +
            C83 * C1033 + C95 * C836 + C82 * C1034 + C93 * C837 + C81 * C1035) *
               C84257 +
           (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 + C97 * C721 +
            C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 + C81 * C728) *
               C251) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C4413 +
           (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
            C1680 * C254 + C84550 * C523) *
               C84597 +
           (C1676 * C1183 + C1669 * C1188 + C1678 * C1182 + C1670 * C1187 +
            C1680 * C1181 + C84550 * C1186) *
               C4414 +
           (C1676 * C1297 + C1669 * C1495 + C1678 * C1296 + C1670 * C1494 +
            C1680 * C1295 + C84550 * C1493) *
               C84583 +
           (C1676 * C4212 + C1669 * C4216 + C1678 * C4213 + C1670 * C4217 +
            C1680 * C4214 + C84550 * C4218) *
               C4415 +
           (C1676 * C4416 + C1669 * C4810 + C1678 * C4417 + C1670 * C4811 +
            C1680 * C4418 + C84550 * C4812) *
               C84561) *
              C84246 * C84603 * C716 -
          ((C1680 * C5279 + C84550 * C5596 + C1678 * C5280 + C1670 * C5597 +
            C1676 * C5281 + C1669 * C5598) *
               C84561 +
           (C1680 * C5113 + C84550 * C5116 + C1678 * C5114 + C1670 * C5117 +
            C1676 * C5115 + C1669 * C5118) *
               C4415 +
           (C1680 * C3631 + C84550 * C3966 + C1678 * C3632 + C1670 * C3967 +
            C1676 * C3633 + C1669 * C3968) *
               C84583 +
           (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
            C1676 * C3446 + C1669 * C3452) *
               C4414 +
           (C3197 + C3196 + C3195) * C84597 + (C2927 + C2926 + C2925) * C4413) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C13629 * C2793 + C84550 * C3179 + C13627 * C2794 + C84574 * C3180 +
             C13625 * C2795 + C84590 * C3181) *
                C84257 +
            (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
             C13625 * C2599 + C84590 * C2602) *
                C251) *
               C84558 +
           ((C14986 + C14985 + C14984) * C84257 +
            (C14734 + C14733 + C14732) * C251) *
               C13622 +
           ((C14983 + C14982 + C14981) * C84257 +
            (C14728 + C14727 + C14726) * C251) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C84603 * C716 -
          (((C15867 * C16418 + C84188 * C16646) * C84257 +
            (C15867 * C16304 + C84188 * C16305) * C251) *
               C15865 +
           (C16667 + C16657) * C15864 + (C16666 + C16654) * C15863 +
           (C16665 + C16651) * C15862 + (C16664 + C16648) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C4413 +
            (C15867 * C252 + C84188 * C521) * C84597 +
            (C15867 * C1183 + C84188 * C1188) * C4414 +
            (C15867 * C1297 + C84188 * C1495) * C84583 +
            (C15867 * C4212 + C84188 * C4216) * C4415 +
            (C15867 * C4416 + C84188 * C4810) * C84561) *
               C13621 +
           (C18534 + C18535 + C18536 + C18554 + C18539 + C18555) * C13622 +
           (C18542 + C18543 + C18544 + C18556 + C18547 + C18557) * C84558) *
              C84603 * C716 -
          (((C15867 * C18147 + C84188 * C18532) * C84561 +
            (C15867 * C17967 + C84188 * C17968) * C4415 +
            (C15867 * C16906 + C84188 * C17089) * C84583 +
            (C15867 * C16807 + C84188 * C16809) * C4414 + C16662 * C84597 +
            C16504 * C4413) *
               C84558 +
           (C18557 + C18547 + C18556 + C18544 + C18543 + C18542) * C13622 +
           (C18555 + C18539 + C18554 + C18536 + C18535 + C18534) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C1787 * C2793 + C84558 * C3274 + C1786 * C1908 + C84581 * C2395 +
             C1785 * C835 + C84596 * C1080) *
                C84257 +
            (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 + C84581 * C1790 +
             C1785 * C721 + C84596 * C783) *
                C251) *
               C84550 +
           ((C1787 * C2794 + C84558 * C3275 + C1786 * C1907 + C84581 * C2394 +
             C1785 * C836 + C84596 * C1081) *
                C84257 +
            (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
             C1785 * C722 + C84596 * C784) *
                C251) *
               C1670 +
           ((C1787 * C2795 + C84558 * C3276 + C1786 * C1906 + C84581 * C2393 +
             C1785 * C837 + C84596 * C1082) *
                C84257 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C251) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C84603 * C716 -
          (((C172 * C833 + C84246 * C1078) * C84257 +
            (C172 * C719 + C84246 * C781) * C251) *
               C85 +
           ((C172 * C834 + C84246 * C1079) * C84257 +
            (C172 * C720 + C84246 * C782) * C251) *
               C84 +
           ((C172 * C835 + C84246 * C1080) * C84257 +
            (C172 * C721 + C84246 * C783) * C251) *
               C83 +
           ((C172 * C836 + C84246 * C1081) * C84257 +
            (C172 * C722 + C84246 * C784) * C251) *
               C82 +
           ((C172 * C837 + C84246 * C1082) * C84257 +
            (C172 * C723 + C84246 * C785) * C251) *
               C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C4413 +
            (C172 * C252 + C84246 * C569) * C84597 +
            (C172 * C1183 + C84246 * C1245) * C4414 +
            (C172 * C1297 + C84246 * C1542) * C84583 +
            (C172 * C4212 + C84246 * C4307) * C4415 +
            (C172 * C4416 + C84246 * C4888) * C84561) *
               C1669 +
           (C4893 + C4894 + C4895 + C4913 + C4898 + C4914) * C1670 +
           (C4901 + C4902 + C4903 + C4915 + C4906 + C4916) * C84550) *
              C84603 * C716 -
          (((C172 * C5279 + C84246 * C5673) * C84561 +
            (C172 * C5113 + C84246 * C5199) * C4415 +
            (C172 * C3631 + C84246 * C4044) * C84583 +
            (C172 * C3444 + C84246 * C3543) * C4414 +
            (C172 * C835 + C84246 * C1080) * C84597 +
            (C172 * C721 + C84246 * C783) * C4413) *
               C84550 +
           ((C172 * C5280 + C84246 * C5674) * C84561 +
            (C172 * C5114 + C84246 * C5200) * C4415 +
            (C172 * C3632 + C84246 * C4046) * C84583 +
            (C172 * C3445 + C84246 * C3545) * C4414 +
            (C172 * C836 + C84246 * C1081) * C84597 +
            (C172 * C722 + C84246 * C784) * C4413) *
               C1670 +
           ((C172 * C5281 + C84246 * C5675) * C84561 +
            (C172 * C5115 + C84246 * C5201) * C4415 +
            (C172 * C3633 + C84246 * C4048) * C84583 +
            (C172 * C3446 + C84246 * C3547) * C4414 +
            (C172 * C837 + C84246 * C1082) * C84597 +
            (C172 * C723 + C84246 * C785) * C4413) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C13724 * C2793 + C84558 * C3274 + C13723 * C1908 + C13622 * C2395 +
             C13722 * C835 + C13621 * C1080) *
                C84257 +
            (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
             C13722 * C721 + C13621 * C783) *
                C251) *
               C84550 +
           ((C13724 * C2794 + C84558 * C3275 + C13723 * C1907 + C13622 * C2394 +
             C13722 * C836 + C13621 * C1081) *
                C84257 +
            (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
             C13722 * C722 + C13621 * C784) *
                C251) *
               C84574 +
           ((C13724 * C2795 + C84558 * C3276 + C13723 * C1906 + C13622 * C2393 +
             C13722 * C837 + C13621 * C1082) *
                C84257 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C251) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C716 -
          ((C15930 * C16418 + C15865 * C16709 + C15929 * C15977 +
            C15864 * C16214 + C15928 * C2795 + C15863 * C3276 + C15927 * C1906 +
            C15862 * C2393 + C15926 * C837 + C15861 * C1082) *
               C84257 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C251) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C4413 +
           (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
            C13724 * C1906 + C84558 * C2393) *
               C84597 +
           (C13722 * C1183 + C13621 * C1245 + C13723 * C3446 + C13622 * C3547 +
            C13724 * C3443 + C84558 * C3546) *
               C4414 +
           (C13722 * C1297 + C13621 * C1542 + C13723 * C3633 + C13622 * C4048 +
            C13724 * C3630 + C84558 * C4047) *
               C84583 +
           (C13722 * C4212 + C13621 * C4307 + C13723 * C5115 + C13622 * C5201 +
            C13724 * C17254 + C84558 * C17343) *
               C4415 +
           (C13722 * C4416 + C13621 * C4888 + C13723 * C5281 + C13622 * C5675 +
            C13724 * C17421 + C84558 * C17809) *
               C84561) *
              C84188 * C84603 * C716 -
          ((C13724 * C18147 + C84558 * C18631 + C13723 * C17421 +
            C13622 * C17809 + C13722 * C5281 + C13621 * C5675) *
               C84561 +
           (C13724 * C17967 + C84558 * C18071 + C13723 * C17254 +
            C13622 * C17343 + C13722 * C5115 + C13621 * C5201) *
               C4415 +
           (C13724 * C16906 + C84558 * C17133 + C13723 * C3630 +
            C13622 * C4047 + C13722 * C3633 + C13621 * C4048) *
               C84583 +
           (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
            C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
               C4414 +
           (C13724 * C2795 + C84558 * C3276 + C13723 * C1906 + C13622 * C2393 +
            C13722 * C837 + C13621 * C1082) *
               C84597 +
           (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
            C13722 * C723 + C13621 * C785) *
               C4413) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            C3366 * C84581 + C3367 * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C84581 + C2518 * C84596) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C84581 + C2516 * C84596) *
               C1670 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C84581 + C3366 * C84596) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C84603 * C716 -
          ((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84246 * C85 +
           (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84246 * C84 +
           (C637 * C721 + C1133 + C1133 + C84257 * C1127) * C84246 * C83 +
           (C637 * C722 + C1134 + C1134 + C84257 * C1128) * C84246 * C82 +
           (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84246 * C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C84246 * C1669 +
           (C5034 + C5035 + C5036) * C84246 * C1670 +
           (C5037 + C5038 + C5039) * C84246 * C84550) *
              C84603 * C716 -
          ((C4992 * C5113 + C5754 + C5754 + C84561 * C5750 + C4991 * C3444 +
            C5755 + C5755 + C84583 * C4124 + C4990 * C721 + C5756 + C5756 +
            C84597 * C1127) *
               C84246 * C84550 +
           (C4992 * C5114 + C5757 + C5757 + C84561 * C5751 + C4991 * C3445 +
            C5758 + C5758 + C84583 * C4126 + C4990 * C722 + C5759 + C5759 +
            C84597 * C1128) *
               C84246 * C1670 +
           (C4992 * C5115 + C5760 + C5760 + C84561 * C5752 + C4991 * C3446 +
            C5761 + C5761 + C84583 * C4128 + C4990 * C723 + C5762 + C5762 +
            C84597 * C1129) *
               C84246 * C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C13622 + C2518 * C13621) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C13622 + C2516 * C13621) *
               C84574 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C13622 + C3366 * C13621) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C84603 * C716 -
          ((C637 * C16304 + C16758 + C16758 + C84257 * C16752) * C15865 +
           C16764 * C15864 + C16763 * C15863 + C3367 * C15862 +
           C3366 * C15861) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C13621 +
           (C18735 + C18736 + C18737) * C13622 +
           (C18738 + C18739 + C18740) * C84558) *
              C84188 * C84603 * C716 -
          ((C4992 * C17967 + C18720 + C18720 + C84561 * C18706 +
            C4991 * C16807 + C18721 + C18721 + C84583 * C17177 + C4990 * C2599 +
            C18722 + C18722 + C84597 * C3353) *
               C84558 +
           (C18740 + C18739 + C18738) * C13622 +
           (C18737 + C18736 + C18735) * C13621) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C2634 + C2635 + C2636) * C84257 * C84581 +
           (C2637 + C2638 + C2639) * C84257 * C84558) *
              C1177 -
          ((C1679 * C3441 + C3460 + C3460 + C84550 * C3453 + C1677 * C3442 +
            C3461 + C3461 + C1670 * C3454 + C1675 * C3443 + C3462 + C3462 +
            C1669 * C3455) *
               C84257 * C84558 +
           (C1679 * C3444 + C3463 + C3463 + C84550 * C3456 + C1677 * C3445 +
            C3464 + C3464 + C1670 * C3457 + C1675 * C3446 + C3465 + C3465 +
            C1669 * C3458) *
               C84257 * C84581 +
           (C1679 * C1181 + C3466 + C3466 + C84550 * C1191 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1675 * C1183 + C3468 + C3468 +
            C1669 * C1193) *
               C84257 * C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C1177 -
          (C100 * C1179 + C1195 + C1195 + C85 * C1189 + C98 * C1180 + C1196 +
           C1196 + C84 * C1190 + C96 * C1181 + C1197 + C1197 + C83 * C1191 +
           C94 * C1182 + C1198 + C1198 + C82 * C1192 + C92 * C1183 + C1199 +
           C1199 + C81 * C1193) *
              C84257 * C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84597 +
           (C5873 + C5874 + C5875) * C84583 +
           (C5876 + C5877 + C5878) * C84561) *
              C84246 * C1177 -
          ((C1679 * C5836 + C5858 + C5858 + C84550 * C5842 + C1677 * C5837 +
            C5859 + C5859 + C1670 * C5843 + C1675 * C5838 + C5860 + C5860 +
            C1669 * C5844) *
               C84561 +
           (C5878 + C5877 + C5876) * C84583 +
           (C5875 + C5874 + C5873) * C84597) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C1177 -
          ((C13628 * C3441 + C15209 + C15209 + C84550 * C3453 + C13626 * C3442 +
            C15210 + C15210 + C84574 * C3454 + C13624 * C3443 + C15211 +
            C15211 + C84590 * C3455) *
               C84257 * C84558 +
           (C13628 * C3444 + C15212 + C15212 + C84550 * C3456 + C13626 * C3445 +
            C15213 + C15213 + C84574 * C3457 + C13624 * C3446 + C15214 +
            C15214 + C84590 * C3458) *
               C84257 * C13622 +
           (C13628 * C1181 + C15215 + C15215 + C84550 * C1191 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13624 * C1183 + C15217 +
            C15217 + C84590 * C1193) *
               C84257 * C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C1177 -
          ((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84257 *
               C15865 +
           (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84257 *
               C15864 +
           (C15866 * C3443 + C16815 + C16815 + C84188 * C3455) * C84257 *
               C15863 +
           (C15866 * C3446 + C16816 + C16816 + C84188 * C3458) * C84257 *
               C15862 +
           (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84257 *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84597 +
            C18832 * C84583 + C18833 * C84561) *
               C13621 +
           (C17971 + C17994 + C17995) * C13622 +
           (C17976 + C17996 + C17997) * C84558) *
              C1177 -
          (((C15866 * C18814 + C18825 + C18825 + C84188 * C18818) * C84561 +
            C17993 * C84583 + C17992 * C84597) *
               C84558 +
           ((C15866 * C18815 + C18826 + C18826 + C84188 * C18819) * C84561 +
            C17991 * C84583 + C17990 * C84597) *
               C13622 +
           ((C15866 * C5838 + C18827 + C18827 + C84188 * C5844) * C84561 +
            C18833 * C84583 + C18832 * C84597) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C1177 -
          ((C1787 * C3447 + C84558 * C3548 + C1786 * C3450 + C84581 * C3549 +
            C1785 * C1186 + C84596 * C1248) *
               C84550 +
           (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
            C1785 * C1181 + C84596 * C1243) *
               C1680 +
           (C1787 * C3448 + C84558 * C3550 + C1786 * C3451 + C84581 * C3551 +
            C1785 * C1187 + C84596 * C1249) *
               C1670 +
           (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
            C1785 * C1182 + C84596 * C1244) *
               C1678 +
           (C1787 * C3449 + C84558 * C3552 + C1786 * C3452 + C84581 * C3553 +
            C1785 * C1188 + C84596 * C1250) *
               C1669 +
           (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 + C84581 * C3547 +
            C1785 * C1183 + C84596 * C1245) *
               C1676) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C1177 -
          ((C172 * C1184 + C84246 * C1246) * C85 +
           (C172 * C1179 + C84246 * C1241) * C101 +
           (C172 * C1185 + C84246 * C1247) * C84 +
           (C172 * C1180 + C84246 * C1242) * C99 +
           (C172 * C1186 + C84246 * C1248) * C83 +
           (C172 * C1181 + C84246 * C1243) * C97 +
           (C172 * C1187 + C84246 * C1249) * C82 +
           (C172 * C1182 + C84246 * C1244) * C95 +
           (C172 * C1188 + C84246 * C1250) * C81 +
           (C172 * C1183 + C84246 * C1245) * C93) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C1676 +
            (C172 * C108 + C84246 * C179) * C1669 + C202 * C1678 +
            C203 * C1670 + C204 * C1680 + C205 * C84550) *
               C84597 +
           (C5979 + C5980 + C5963 + C5964 + C5965 + C5966) * C84583 +
           (C5981 + C5982 + C5971 + C5972 + C5973 + C5974) * C84561) *
              C1177 -
          (((C172 * C5839 + C84246 * C5955) * C84550 +
            (C172 * C5836 + C84246 * C5952) * C1680 +
            (C172 * C5840 + C84246 * C5956) * C1670 +
            (C172 * C5837 + C84246 * C5953) * C1678 +
            (C172 * C5841 + C84246 * C5957) * C1669 +
            (C172 * C5838 + C84246 * C5954) * C1676) *
               C84561 +
           (C5974 + C5973 + C5972 + C5971 + C5982 + C5981) * C84583 +
           (C5966 + C5965 + C5964 + C5963 + C5980 + C5979) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C1177 -
          ((C13724 * C3447 + C84558 * C3548 + C13723 * C3450 + C13622 * C3549 +
            C13722 * C1186 + C13621 * C1248) *
               C84550 +
           (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
            C13722 * C1181 + C13621 * C1243) *
               C13629 +
           (C13724 * C3448 + C84558 * C3550 + C13723 * C3451 + C13622 * C3551 +
            C13722 * C1187 + C13621 * C1249) *
               C84574 +
           (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
            C13722 * C1182 + C13621 * C1244) *
               C13627 +
           (C13724 * C3449 + C84558 * C3552 + C13723 * C3452 + C13622 * C3553 +
            C13722 * C1188 + C13621 * C1250) *
               C84590 +
           (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
            C13722 * C1183 + C13621 * C1245) *
               C13625) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C1177 -
          ((C15930 * C16808 + C15865 * C16861 + C15929 * C16809 +
            C15864 * C16862 + C15928 * C3449 + C15863 * C3552 + C15927 * C3452 +
            C15862 * C3553 + C15926 * C1188 + C15861 * C1250) *
               C84188 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C15867) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C15867 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84188) *
               C84597 +
           ((C18936 + C18937 + C18938) * C15867 +
            (C18939 + C18940 + C18941) * C84188) *
               C84583 +
           ((C18942 + C18943 + C18944) * C15867 +
            (C18945 + C18946 + C18947) * C84188) *
               C84561) *
              C1177 -
          (((C13724 * C18816 + C84558 * C18909 + C13723 * C18817 +
             C13622 * C18910 + C13722 * C5841 + C13621 * C5957) *
                C84188 +
            (C13724 * C18814 + C84558 * C18907 + C13723 * C18815 +
             C13622 * C18908 + C13722 * C5838 + C13621 * C5954) *
                C15867) *
               C84561 +
           ((C18947 + C18946 + C18945) * C84188 +
            (C18944 + C18943 + C18942) * C15867) *
               C84583 +
           ((C18941 + C18940 + C18939) * C84188 +
            (C18938 + C18937 + C18936) * C15867) *
               C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
           (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C1680 +
            (C251 * C3448 + C84257 * C3635) * C1670 +
            (C251 * C3442 + C84257 * C3629) * C1678 +
            (C251 * C3449 + C84257 * C3636) * C1669 +
            (C251 * C3443 + C84257 * C3630) * C1676) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C1680 +
            (C251 * C3451 + C84257 * C3638) * C1670 +
            (C251 * C3445 + C84257 * C3632) * C1678 +
            (C251 * C3452 + C84257 * C3639) * C1669 +
            (C251 * C3446 + C84257 * C3633) * C1676) *
               C84581 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C1680 +
            (C251 * C1187 + C84257 * C1301) * C1670 +
            (C251 * C1182 + C84257 * C1296) * C1678 +
            (C251 * C1188 + C84257 * C1302) * C1669 +
            (C251 * C1183 + C84257 * C1297) * C1676) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C1177 -
          ((C251 * C1184 + C84257 * C1298) * C85 +
           (C251 * C1179 + C84257 * C1293) * C101 +
           (C251 * C1185 + C84257 * C1299) * C84 +
           (C251 * C1180 + C84257 * C1294) * C99 +
           (C251 * C1186 + C84257 * C1300) * C83 +
           (C251 * C1181 + C84257 * C1295) * C97 +
           (C251 * C1187 + C84257 * C1301) * C82 +
           (C251 * C1182 + C84257 * C1296) * C95 +
           (C251 * C1188 + C84257 * C1302) * C81 +
           (C251 * C1183 + C84257 * C1297) * C93) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C1676 +
           (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
            C4415 * C4216 + C84561 * C4420) *
               C1669 +
           (C4449 + C4450 + C4451) * C1678 + (C4452 + C4453 + C4454) * C1670 +
           (C4455 + C4456 + C4457) * C1680 + (C4458 + C4459 + C4460) * C84550) *
              C84246 * C1177 -
          ((C4415 * C5839 + C84561 * C6059 + C4414 * C4218 + C84583 * C4422 +
            C4413 * C1186 + C84597 * C1300) *
               C84550 +
           (C4415 * C5836 + C84561 * C6056 + C4414 * C4214 + C84583 * C4418 +
            C4413 * C1181 + C84597 * C1295) *
               C1680 +
           (C4415 * C5840 + C84561 * C6060 + C4414 * C4217 + C84583 * C4421 +
            C4413 * C1187 + C84597 * C1301) *
               C1670 +
           (C4415 * C5837 + C84561 * C6057 + C4414 * C4213 + C84583 * C4417 +
            C4413 * C1182 + C84597 * C1296) *
               C1678 +
           (C4415 * C5841 + C84561 * C6061 + C4414 * C4216 + C84583 * C4420 +
            C4413 * C1188 + C84597 * C1302) *
               C1669 +
           (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
            C4413 * C1183 + C84597 * C1297) *
               C1676) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C13629 +
            (C251 * C3448 + C84257 * C3635) * C84574 +
            (C251 * C3442 + C84257 * C3629) * C13627 +
            (C251 * C3449 + C84257 * C3636) * C84590 +
            (C251 * C3443 + C84257 * C3630) * C13625) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C13629 +
            (C251 * C3451 + C84257 * C3638) * C84574 +
            (C251 * C3445 + C84257 * C3632) * C13627 +
            (C251 * C3452 + C84257 * C3639) * C84590 +
            (C251 * C3446 + C84257 * C3633) * C13625) *
               C13622 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C13629 +
            (C251 * C1187 + C84257 * C1301) * C84574 +
            (C251 * C1182 + C84257 * C1296) * C13627 +
            (C251 * C1188 + C84257 * C1302) * C84590 +
            (C251 * C1183 + C84257 * C1297) * C13625) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C1177 -
          (((C251 * C16808 + C84257 * C16907) * C84188 +
            (C251 * C16806 + C84257 * C16905) * C15867) *
               C15865 +
           ((C251 * C16809 + C84257 * C16908) * C84188 +
            (C251 * C16807 + C84257 * C16906) * C15867) *
               C15864 +
           ((C251 * C3449 + C84257 * C3636) * C84188 +
            (C251 * C3443 + C84257 * C3630) * C15867) *
               C15863 +
           ((C251 * C3452 + C84257 * C3639) * C84188 +
            (C251 * C3446 + C84257 * C3633) * C15867) *
               C15862 +
           ((C251 * C1188 + C84257 * C1302) * C84188 +
            (C251 * C1183 + C84257 * C1297) * C15867) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C15867 +
            (C4413 * C108 + C84597 * C258 + C4414 * C1188 + C84583 * C1302 +
             C4415 * C4216 + C84561 * C4420) *
                C84188) *
               C13621 +
           ((C18174 + C18175 + C18176) * C15867 +
            (C18177 + C18178 + C18179) * C84188) *
               C13622 +
           ((C18180 + C18181 + C18182) * C15867 +
            (C18183 + C18184 + C18185) * C84188) *
               C84558) *
              C1177 -
          (((C4415 * C18816 + C84561 * C19023 + C4414 * C17256 +
             C84583 * C17423 + C4413 * C3449 + C84597 * C3636) *
                C84188 +
            (C4415 * C18814 + C84561 * C19021 + C4414 * C17254 +
             C84583 * C17421 + C4413 * C3443 + C84597 * C3630) *
                C15867) *
               C84558 +
           ((C4415 * C18817 + C84561 * C19024 + C4414 * C5118 + C84583 * C5284 +
             C4413 * C3452 + C84597 * C3639) *
                C84188 +
            (C4415 * C18815 + C84561 * C19022 + C4414 * C5115 + C84583 * C5281 +
             C4413 * C3446 + C84597 * C3633) *
                C15867) *
               C13622 +
           ((C4415 * C5841 + C84561 * C6061 + C4414 * C4216 + C84583 * C4420 +
             C4413 * C1188 + C84597 * C1302) *
                C84188 +
            (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
             C4413 * C1183 + C84597 * C1297) *
                C15867) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C2925 + C2926 + C2927) * C1786 + (C2928 + C2929 + C2930) * C84581 +
           (C2931 + C2932 + C2933) * C1787 + (C2934 + C2935 + C2936) * C84558) *
              C84257 * C1177 -
          ((C1680 * C3542 + C84550 * C3714 + C1678 * C3544 + C1670 * C3715 +
            C1676 * C3546 + C1669 * C3716) *
               C84558 +
           (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
            C1676 * C3443 + C1669 * C3449) *
               C1787 +
           (C1680 * C3543 + C84550 * C3717 + C1678 * C3545 + C1670 * C3718 +
            C1676 * C3547 + C1669 * C3719) *
               C84581 +
           (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
            C1676 * C3446 + C1669 * C3452) *
               C1786 +
           (C1680 * C1243 + C84550 * C1347 + C1678 * C1244 + C1670 * C1348 +
            C1676 * C1245 + C1669 * C1349) *
               C84596 +
           (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
            C1676 * C1183 + C1669 * C1188) *
               C1785) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C1177 -
          ((C101 * C1241 + C85 * C1345 + C99 * C1242 + C84 * C1346 +
            C97 * C1243 + C83 * C1347 + C95 * C1244 + C82 * C1348 +
            C93 * C1245 + C81 * C1349) *
               C84246 +
           (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
            C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
            C93 * C1183 + C81 * C1188) *
               C172) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C172 +
            (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
             C1680 * C175 + C84550 * C332) *
                C84246) *
               C84597 +
           ((C6164 + C6165 + C6166) * C172 + (C6167 + C6168 + C6169) * C84246) *
               C84583 +
           ((C6170 + C6171 + C6172) * C172 + (C6173 + C6174 + C6175) * C84246) *
               C84561) *
              C1177 -
          (((C1680 * C5952 + C84550 * C6136 + C1678 * C5953 + C1670 * C6137 +
             C1676 * C5954 + C1669 * C6138) *
                C84246 +
            (C1680 * C5836 + C84550 * C5839 + C1678 * C5837 + C1670 * C5840 +
             C1676 * C5838 + C1669 * C5841) *
                C172) *
               C84561 +
           ((C6175 + C6174 + C6173) * C84246 + (C6172 + C6171 + C6170) * C172) *
               C84583 +
           ((C6169 + C6168 + C6167) * C84246 + (C6166 + C6165 + C6164) * C172) *
               C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C1177 -
          ((C13629 * C3542 + C84550 * C3714 + C13627 * C3544 + C84574 * C3715 +
            C13625 * C3546 + C84590 * C3716) *
               C84558 +
           (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
            C13625 * C3443 + C84590 * C3449) *
               C13724 +
           (C13629 * C3543 + C84550 * C3717 + C13627 * C3545 + C84574 * C3718 +
            C13625 * C3547 + C84590 * C3719) *
               C13622 +
           (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
            C13625 * C3446 + C84590 * C3452) *
               C13723 +
           (C13629 * C1243 + C84550 * C1347 + C13627 * C1244 + C84574 * C1348 +
            C13625 * C1245 + C84590 * C1349) *
               C13621 +
           (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
            C13625 * C1183 + C84590 * C1188) *
               C13722) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C1177 -
          ((C15867 * C16859 + C84188 * C16951) * C15865 +
           (C15867 * C16806 + C84188 * C16808) * C15930 +
           (C15867 * C16860 + C84188 * C16952) * C15864 +
           (C15867 * C16807 + C84188 * C16809) * C15929 +
           (C15867 * C3546 + C84188 * C3716) * C15863 +
           (C15867 * C3443 + C84188 * C3449) * C15928 +
           (C15867 * C3547 + C84188 * C3719) * C15862 +
           (C15867 * C3446 + C84188 * C3452) * C15927 +
           (C15867 * C1245 + C84188 * C1349) * C15861 +
           (C15867 * C1183 + C84188 * C1188) * C15926) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C13722 +
            (C15867 * C173 + C84188 * C330) * C13621 + C16500 * C13723 +
            C16501 * C13622 + C16502 * C13724 + C16503 * C84558) *
               C84597 +
           (C19122 + C19123 + C19106 + C19107 + C19108 + C19109) * C84583 +
           (C19124 + C19125 + C19114 + C19115 + C19116 + C19117) * C84561) *
              C1177 -
          (((C15867 * C18907 + C84188 * C19099) * C84558 +
            (C15867 * C18814 + C84188 * C18816) * C13724 +
            (C15867 * C18908 + C84188 * C19100) * C13622 +
            (C15867 * C18815 + C84188 * C18817) * C13723 +
            (C15867 * C5954 + C84188 * C6138) * C13621 +
            (C15867 * C5838 + C84188 * C5841) * C13722) *
               C84561 +
           (C19117 + C19116 + C19115 + C19114 + C19125 + C19124) * C84583 +
           (C19109 + C19108 + C19107 + C19106 + C19123 + C19122) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C1177 -
          ((C2092 * C3441 + C3801 + C3801 + C84558 * C3794 + C2091 * C3444 +
            C3802 + C3802 + C84581 * C3795 + C2090 * C1181 + C3803 + C3803 +
            C84596 * C1394) *
               C84550 +
           (C2092 * C3442 + C3804 + C3804 + C84558 * C3796 + C2091 * C3445 +
            C3805 + C3805 + C84581 * C3797 + C2090 * C1182 + C3806 + C3806 +
            C84596 * C1395) *
               C1670 +
           (C2092 * C3443 + C3807 + C3807 + C84558 * C3798 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2090 * C1183 + C3809 + C3809 +
            C84596 * C1396) *
               C1669) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C1177 -
          ((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C85 +
           (C378 * C1180 + C1399 + C1399 + C84246 * C1393) * C84 +
           (C378 * C1181 + C1400 + C1400 + C84246 * C1394) * C83 +
           (C378 * C1182 + C1401 + C1401 + C84246 * C1395) * C82 +
           (C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C81) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C1669 + C408 * C1670 +
            C409 * C84550) *
               C84597 +
           (C6270 + C6255 + C6256) * C84583 +
           (C6271 + C6259 + C6260) * C84561) *
              C1177 -
          (((C378 * C5836 + C6261 + C6261 + C84246 * C6249) * C84550 +
            (C378 * C5837 + C6262 + C6262 + C84246 * C6250) * C1670 +
            (C378 * C5838 + C6263 + C6263 + C84246 * C6251) * C1669) *
               C84561 +
           (C6260 + C6259 + C6271) * C84583 +
           (C6256 + C6255 + C6270) * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C1177 -
          ((C13985 * C3441 + C15514 + C15514 + C84558 * C3794 + C13984 * C3444 +
            C15515 + C15515 + C13622 * C3795 + C13983 * C1181 + C15516 +
            C15516 + C13621 * C1394) *
               C84550 +
           (C13985 * C3442 + C15517 + C15517 + C84558 * C3796 + C13984 * C3445 +
            C15518 + C15518 + C13622 * C3797 + C13983 * C1182 + C15519 +
            C15519 + C13621 * C1395) *
               C84574 +
           (C13985 * C3443 + C15520 + C15520 + C84558 * C3798 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13983 * C1183 + C15522 +
            C15522 + C13621 * C1396) *
               C84590) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C1177 -
          (C16071 * C16806 + C16998 + C16998 + C15865 * C16995 +
           C16070 * C16807 + C16999 + C16999 + C15864 * C16996 +
           C16069 * C3443 + C17000 + C17000 + C15863 * C3798 + C16068 * C3446 +
           C17001 + C17001 + C15862 * C3799 + C16067 * C1183 + C17002 + C17002 +
           C15861 * C1396) *
              C84188 * C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84188 * C84597 +
           (C19229 + C19230 + C19231) * C84188 * C84583 +
           (C19232 + C19233 + C19234) * C84188 * C84561) *
              C1177 -
          ((C13985 * C18814 + C19214 + C19214 + C84558 * C19199 +
            C13984 * C18815 + C19215 + C19215 + C13622 * C19200 +
            C13983 * C5838 + C19216 + C19216 + C13621 * C6251) *
               C84188 * C84561 +
           (C19234 + C19233 + C19232) * C84188 * C84583 +
           (C19231 + C19230 + C19229) * C84188 * C84597) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
            C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C1787 +
            (C251 * C3543 + C84257 * C3884) * C84581 +
            (C251 * C3444 + C84257 * C3631) * C1786 +
            (C251 * C1243 + C84257 * C1446) * C84596 +
            (C251 * C1181 + C84257 * C1295) * C1785) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C1787 +
            (C251 * C3545 + C84257 * C3886) * C84581 +
            (C251 * C3445 + C84257 * C3632) * C1786 +
            (C251 * C1244 + C84257 * C1447) * C84596 +
            (C251 * C1182 + C84257 * C1296) * C1785) *
               C1670 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C1787 +
            (C251 * C3547 + C84257 * C3888) * C84581 +
            (C251 * C3446 + C84257 * C3633) * C1786 +
            (C251 * C1245 + C84257 * C1448) * C84596 +
            (C251 * C1183 + C84257 * C1297) * C1785) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C1177 -
          (((C251 * C1241 + C84257 * C1444) * C84246 +
            (C251 * C1179 + C84257 * C1293) * C172) *
               C85 +
           ((C251 * C1242 + C84257 * C1445) * C84246 +
            (C251 * C1180 + C84257 * C1294) * C172) *
               C84 +
           ((C251 * C1243 + C84257 * C1446) * C84246 +
            (C251 * C1181 + C84257 * C1295) * C172) *
               C83 +
           ((C251 * C1244 + C84257 * C1447) * C84246 +
            (C251 * C1182 + C84257 * C1296) * C172) *
               C82 +
           ((C251 * C1245 + C84257 * C1448) * C84246 +
            (C251 * C1183 + C84257 * C1297) * C172) *
               C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
             C4415 * C4212 + C84561 * C4416) *
                C172 +
            (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
             C4415 * C4307 + C84561 * C4714) *
                C84246) *
               C1669 +
           ((C4449 + C4450 + C4451) * C172 + (C4731 + C4732 + C4733) * C84246) *
               C1670 +
           ((C4455 + C4456 + C4457) * C172 + (C4734 + C4735 + C4736) * C84246) *
               C84550) *
              C1177 -
          (((C4415 * C5952 + C84561 * C6345 + C4414 * C4309 + C84583 * C4716 +
             C4413 * C1243 + C84597 * C1446) *
                C84246 +
            (C4415 * C5836 + C84561 * C6056 + C4414 * C4214 + C84583 * C4418 +
             C4413 * C1181 + C84597 * C1295) *
                C172) *
               C84550 +
           ((C4415 * C5953 + C84561 * C6346 + C4414 * C4308 + C84583 * C4715 +
             C4413 * C1244 + C84597 * C1447) *
                C84246 +
            (C4415 * C5837 + C84561 * C6057 + C4414 * C4213 + C84583 * C4417 +
             C4413 * C1182 + C84597 * C1296) *
                C172) *
               C1670 +
           ((C4415 * C5954 + C84561 * C6347 + C4414 * C4307 + C84583 * C4714 +
             C4413 * C1245 + C84597 * C1448) *
                C84246 +
            (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
             C4413 * C1183 + C84597 * C1297) *
                C172) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C13724 +
            (C251 * C3543 + C84257 * C3884) * C13622 +
            (C251 * C3444 + C84257 * C3631) * C13723 +
            (C251 * C1243 + C84257 * C1446) * C13621 +
            (C251 * C1181 + C84257 * C1295) * C13722) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C13724 +
            (C251 * C3545 + C84257 * C3886) * C13622 +
            (C251 * C3445 + C84257 * C3632) * C13723 +
            (C251 * C1244 + C84257 * C1447) * C13621 +
            (C251 * C1182 + C84257 * C1296) * C13722) *
               C84574 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C13724 +
            (C251 * C3547 + C84257 * C3888) * C13622 +
            (C251 * C3446 + C84257 * C3633) * C13723 +
            (C251 * C1245 + C84257 * C1448) * C13621 +
            (C251 * C1183 + C84257 * C1297) * C13722) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C1177 -
          ((C251 * C16859 + C84257 * C17044) * C15865 +
           (C251 * C16806 + C84257 * C16905) * C15930 +
           (C251 * C16860 + C84257 * C17045) * C15864 +
           (C251 * C16807 + C84257 * C16906) * C15929 +
           (C251 * C3546 + C84257 * C3887) * C15863 +
           (C251 * C3443 + C84257 * C3630) * C15928 +
           (C251 * C3547 + C84257 * C3888) * C15862 +
           (C251 * C3446 + C84257 * C3633) * C15927 +
           (C251 * C1245 + C84257 * C1448) * C15861 +
           (C251 * C1183 + C84257 * C1297) * C15926) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4413 * C102 + C84597 * C252 + C4414 * C1183 + C84583 * C1297 +
            C4415 * C4212 + C84561 * C4416) *
               C13722 +
           (C4413 * C173 + C84597 * C453 + C4414 * C1245 + C84583 * C1448 +
            C4415 * C4307 + C84561 * C4714) *
               C13621 +
           (C18174 + C18175 + C18176) * C13723 +
           (C18453 + C18454 + C18455) * C13622 +
           (C18180 + C18181 + C18182) * C13724 +
           (C18456 + C18457 + C18458) * C84558) *
              C84188 * C1177 -
          ((C4415 * C18907 + C84561 * C19308 + C4414 * C17343 +
            C84583 * C17657 + C4413 * C3546 + C84597 * C3887) *
               C84558 +
           (C4415 * C18814 + C84561 * C19021 + C4414 * C17254 +
            C84583 * C17421 + C4413 * C3443 + C84597 * C3630) *
               C13724 +
           (C4415 * C18908 + C84561 * C19309 + C4414 * C5201 + C84583 * C5521 +
            C4413 * C3547 + C84597 * C3888) *
               C13622 +
           (C4415 * C18815 + C84561 * C19022 + C4414 * C5115 + C84583 * C5281 +
            C4413 * C3446 + C84597 * C3633) *
               C13723 +
           (C4415 * C5954 + C84561 * C6347 + C4414 * C4307 + C84583 * C4714 +
            C4413 * C1245 + C84597 * C1448) *
               C13621 +
           (C4415 * C5838 + C84561 * C6058 + C4414 * C4212 + C84583 * C4416 +
            C4413 * C1183 + C84597 * C1297) *
               C13722) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C2925 + C2926 + C2927) * C251 + (C3195 + C3196 + C3197) * C84257) *
               C84581 +
           ((C2931 + C2932 + C2933) * C251 + (C3198 + C3199 + C3200) * C84257) *
               C84558) *
              C1177 -
          (((C1680 * C3628 + C84550 * C3963 + C1678 * C3629 + C1670 * C3964 +
             C1676 * C3630 + C1669 * C3965) *
                C84257 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C251) *
               C84558 +
           ((C1680 * C3631 + C84550 * C3966 + C1678 * C3632 + C1670 * C3967 +
             C1676 * C3633 + C1669 * C3968) *
                C84257 +
            (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
             C1676 * C3446 + C1669 * C3452) *
                C251) *
               C84581 +
           ((C1680 * C1295 + C84550 * C1493 + C1678 * C1296 + C1670 * C1494 +
             C1676 * C1297 + C1669 * C1495) *
                C84257 +
            (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
             C1676 * C1183 + C1669 * C1188) *
                C251) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C1177 -
          ((C101 * C1293 + C85 * C1491 + C99 * C1294 + C84 * C1492 +
            C97 * C1295 + C83 * C1493 + C95 * C1296 + C82 * C1494 +
            C93 * C1297 + C81 * C1495) *
               C84257 +
           (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
            C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
            C93 * C1183 + C81 * C1188) *
               C251) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C4413 +
           (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
            C1680 * C254 + C84550 * C523) *
               C84597 +
           (C6164 + C6165 + C6166) * C4414 + (C6438 + C6439 + C6440) * C84583 +
           (C6170 + C6171 + C6172) * C4415 + (C6441 + C6442 + C6443) * C84561) *
              C84246 * C1177 -
          ((C1680 * C6056 + C84550 * C6422 + C1678 * C6057 + C1670 * C6423 +
            C1676 * C6058 + C1669 * C6424) *
               C84561 +
           (C1680 * C5836 + C84550 * C5839 + C1678 * C5837 + C1670 * C5840 +
            C1676 * C5838 + C1669 * C5841) *
               C4415 +
           (C6443 + C6442 + C6441) * C84583 + (C6172 + C6171 + C6170) * C4414 +
           (C6440 + C6439 + C6438) * C84597 + (C6166 + C6165 + C6164) * C4413) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C1177 -
          (((C13629 * C3628 + C84550 * C3963 + C13627 * C3629 + C84574 * C3964 +
             C13625 * C3630 + C84590 * C3965) *
                C84257 +
            (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
             C13625 * C3443 + C84590 * C3449) *
                C251) *
               C84558 +
           ((C13629 * C3631 + C84550 * C3966 + C13627 * C3632 + C84574 * C3967 +
             C13625 * C3633 + C84590 * C3968) *
                C84257 +
            (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
             C13625 * C3446 + C84590 * C3452) *
                C251) *
               C13622 +
           ((C13629 * C1295 + C84550 * C1493 + C13627 * C1296 + C84574 * C1494 +
             C13625 * C1297 + C84590 * C1495) *
                C84257 +
            (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
             C13625 * C1183 + C84590 * C1188) *
                C251) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C1177 -
          (((C15867 * C16905 + C84188 * C17088) * C84257 +
            (C15867 * C16806 + C84188 * C16808) * C251) *
               C15865 +
           ((C15867 * C16906 + C84188 * C17089) * C84257 +
            (C15867 * C16807 + C84188 * C16809) * C251) *
               C15864 +
           ((C15867 * C3630 + C84188 * C3965) * C84257 +
            (C15867 * C3443 + C84188 * C3449) * C251) *
               C15863 +
           ((C15867 * C3633 + C84188 * C3968) * C84257 +
            (C15867 * C3446 + C84188 * C3452) * C251) *
               C15862 +
           ((C15867 * C1297 + C84188 * C1495) * C84257 +
            (C15867 * C1183 + C84188 * C1188) * C251) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C4413 +
            (C15867 * C252 + C84188 * C521) * C84597 + C19118 * C4414 +
            C19391 * C84583 + C19120 * C4415 + C19392 * C84561) *
               C13621 +
           (C18534 + C18535 + C18536 + C18554 + C18539 + C18555) * C13622 +
           (C18542 + C18543 + C18544 + C18556 + C18547 + C18557) * C84558) *
              C1177 -
          (((C15867 * C19021 + C84188 * C19384) * C84561 +
            (C15867 * C18814 + C84188 * C18816) * C4415 + C18553 * C84583 +
            C18283 * C4414 + C18552 * C84597 + C18279 * C4413) *
               C84558 +
           ((C15867 * C19022 + C84188 * C19385) * C84561 +
            (C15867 * C18815 + C84188 * C18817) * C4415 + C18551 * C84583 +
            C18281 * C4414 + C18550 * C84597 + C18277 * C4413) *
               C13622 +
           ((C15867 * C6058 + C84188 * C6424) * C84561 +
            (C15867 * C5838 + C84188 * C5841) * C4415 + C19392 * C84583 +
            C19120 * C4414 + C19391 * C84597 + C19118 * C4413) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C1177 -
          (((C1787 * C3628 + C84558 * C4043 + C1786 * C3631 + C84581 * C4044 +
             C1785 * C1295 + C84596 * C1540) *
                C84257 +
            (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
             C1785 * C1181 + C84596 * C1243) *
                C251) *
               C84550 +
           ((C1787 * C3629 + C84558 * C4045 + C1786 * C3632 + C84581 * C4046 +
             C1785 * C1296 + C84596 * C1541) *
                C84257 +
            (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
             C1785 * C1182 + C84596 * C1244) *
                C251) *
               C1670 +
           ((C1787 * C3630 + C84558 * C4047 + C1786 * C3633 + C84581 * C4048 +
             C1785 * C1297 + C84596 * C1542) *
                C84257 +
            (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 + C84581 * C3547 +
             C1785 * C1183 + C84596 * C1245) *
                C251) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C1177 -
          (((C172 * C1293 + C84246 * C1538) * C84257 +
            (C172 * C1179 + C84246 * C1241) * C251) *
               C85 +
           ((C172 * C1294 + C84246 * C1539) * C84257 +
            (C172 * C1180 + C84246 * C1242) * C251) *
               C84 +
           ((C172 * C1295 + C84246 * C1540) * C84257 +
            (C172 * C1181 + C84246 * C1243) * C251) *
               C83 +
           ((C172 * C1296 + C84246 * C1541) * C84257 +
            (C172 * C1182 + C84246 * C1244) * C251) *
               C82 +
           ((C172 * C1297 + C84246 * C1542) * C84257 +
            (C172 * C1183 + C84246 * C1245) * C251) *
               C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C4413 +
            (C172 * C252 + C84246 * C569) * C84597 + C5975 * C4414 +
            C6525 * C84583 + C5977 * C4415 + C6526 * C84561) *
               C1669 +
           (C4893 + C4894 + C4895 + C4913 + C4898 + C4914) * C1670 +
           (C4901 + C4902 + C4903 + C4915 + C4906 + C4916) * C84550) *
              C1177 -
          (((C172 * C6056 + C84246 * C6517) * C84561 +
            (C172 * C5836 + C84246 * C5952) * C4415 + C4912 * C84583 +
            C4338 * C4414 + C4911 * C84597 + C4334 * C4413) *
               C84550 +
           ((C172 * C6057 + C84246 * C6518) * C84561 +
            (C172 * C5837 + C84246 * C5953) * C4415 + C4910 * C84583 +
            C4336 * C4414 + C4909 * C84597 + C4332 * C4413) *
               C1670 +
           ((C172 * C6058 + C84246 * C6519) * C84561 +
            (C172 * C5838 + C84246 * C5954) * C4415 + C6526 * C84583 +
            C5977 * C4414 + C6525 * C84597 + C5975 * C4413) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C1177 -
          (((C13724 * C3628 + C84558 * C4043 + C13723 * C3631 + C13622 * C4044 +
             C13722 * C1295 + C13621 * C1540) *
                C84257 +
            (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
             C13722 * C1181 + C13621 * C1243) *
                C251) *
               C84550 +
           ((C13724 * C3629 + C84558 * C4045 + C13723 * C3632 + C13622 * C4046 +
             C13722 * C1296 + C13621 * C1541) *
                C84257 +
            (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
             C13722 * C1182 + C13621 * C1244) *
                C251) *
               C84574 +
           ((C13724 * C3630 + C84558 * C4047 + C13723 * C3633 + C13622 * C4048 +
             C13722 * C1297 + C13621 * C1542) *
                C84257 +
            (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
             C13722 * C1183 + C13621 * C1245) *
                C251) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C1177 -
          ((C15930 * C16905 + C15865 * C17132 + C15929 * C16906 +
            C15864 * C17133 + C15928 * C3630 + C15863 * C4047 + C15927 * C3633 +
            C15862 * C4048 + C15926 * C1297 + C15861 * C1542) *
               C84257 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C251) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C4413 +
           (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
            C13724 * C1906 + C84558 * C2393) *
               C84597 +
           (C18936 + C18937 + C18938) * C4414 +
           (C19481 + C19482 + C19483) * C84583 +
           (C18942 + C18943 + C18944) * C4415 +
           (C19484 + C19485 + C19486) * C84561) *
              C84188 * C1177 -
          ((C13724 * C19021 + C84558 * C19466 + C13723 * C19022 +
            C13622 * C19467 + C13722 * C6058 + C13621 * C6519) *
               C84561 +
           (C13724 * C18814 + C84558 * C18907 + C13723 * C18815 +
            C13622 * C18908 + C13722 * C5838 + C13621 * C5954) *
               C4415 +
           (C19486 + C19485 + C19484) * C84583 +
           (C18944 + C18943 + C18942) * C4414 +
           (C19483 + C19482 + C19481) * C84597 +
           (C18938 + C18937 + C18936) * C4413) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            C3366 * C84581 + C3367 * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84581 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84596) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84581 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84596) *
               C1670 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84581 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84596) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C1177 -
          ((C637 * C1179 + C1591 + C1591 + C84257 * C1585) * C84246 * C85 +
           (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C84246 * C84 +
           (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84246 * C83 +
           (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84246 * C82 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84246 * C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C84246 * C1669 +
           (C5034 + C5035 + C5036) * C84246 * C1670 +
           (C5037 + C5038 + C5039) * C84246 * C84550) *
              C1177 -
          ((C4992 * C5836 + C6604 + C6604 + C84561 * C6600 + C4991 * C4214 +
            C6605 + C6605 + C84583 * C4995 + C4990 * C1181 + C6606 + C6606 +
            C84597 * C1587) *
               C84246 * C84550 +
           (C4992 * C5837 + C6607 + C6607 + C84561 * C6601 + C4991 * C4213 +
            C6608 + C6608 + C84583 * C4994 + C4990 * C1182 + C6609 + C6609 +
            C84597 * C1588) *
               C84246 * C1670 +
           (C4992 * C5838 + C6610 + C6610 + C84561 * C6602 + C4991 * C4212 +
            C6611 + C6611 + C84583 * C4993 + C4990 * C1183 + C6612 + C6612 +
            C84597 * C1589) *
               C84246 * C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C13622 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C13621) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C13622 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C13621) *
               C84574 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C13622 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C13621) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C1177 -
          ((C637 * C16806 + C17179 + C17179 + C84257 * C17176) * C15865 +
           (C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C15864 +
           (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C15863 +
           (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C15862 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C15861) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4990 * C102 + C4998 + C4998 + C84597 * C638 + C4991 * C1183 +
            C4999 + C4999 + C84583 * C1589 + C4992 * C4212 + C5000 + C5000 +
            C84561 * C4993) *
               C13621 +
           (C18735 + C18736 + C18737) * C13622 +
           (C18738 + C18739 + C18740) * C84558) *
              C84188 * C1177 -
          ((C4992 * C18814 + C19563 + C19563 + C84561 * C19560 +
            C4991 * C17254 + C19564 + C19564 + C84583 * C17885 + C4990 * C3443 +
            C19565 + C19565 + C84597 * C4127) *
               C84558 +
           (C4992 * C18815 + C19566 + C19566 + C84561 * C19561 + C4991 * C5115 +
            C19567 + C19567 + C84583 * C5752 + C4990 * C3446 + C19568 + C19568 +
            C84597 * C4128) *
               C13622 +
           (C4992 * C5838 + C6610 + C6610 + C84561 * C6602 + C4991 * C4212 +
            C6611 + C6611 + C84583 * C4993 + C4990 * C1183 + C6612 + C6612 +
            C84597 * C1589) *
               C13621) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84529 +
           (C6684 * C1183 + C8113 + C8113 + C6678 * C1193 + C6686 * C1182 +
            C8112 + C8112 + C6679 * C1192 + C6688 * C1181 + C8111 + C8111 +
            C6680 * C1191 + C6690 * C1180 + C8110 + C8110 + C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C6690 * C1179 + C8729 + C8729 + C84527 * C1189 + C6688 * C1180 +
            C8730 + C8730 + C6680 * C1190 + C6686 * C1181 + C8731 + C8731 +
            C6679 * C1191 + C6684 * C1182 + C8732 + C8732 + C6678 * C1192) *
               C84344 +
           (C6690 * C106 + C6705 + C6705 + C84527 * C118 + C6688 * C105 +
            C6706 + C6706 + C6680 * C117 + C6686 * C104 + C6707 + C6707 +
            C6679 * C116 + C6684 * C103 + C6708 + C6708 + C6678 * C115) *
               C84529) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C84529 +
            (C19640 * C1183 + C21067 + C21067 + C84509 * C1193 +
             C19642 * C1182 + C21066 + C21066 + C84198 * C1192) *
                C84344) *
               C13621 +
           ((C20383 + C20384) * C84529 +
            (C19640 * C3446 + C21065 + C21065 + C84509 * C3458 +
             C19642 * C3445 + C21064 + C21064 + C84198 * C3457) *
                C84344) *
               C13622 +
           ((C20385 + C20386) * C84529 +
            (C19640 * C3443 + C21063 + C21063 + C84509 * C3455 +
             C19642 * C3442 + C21062 + C21062 + C84198 * C3454) *
                C84344) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C19642 * C3441 + C21713 + C21713 + C84198 * C3453 +
             C19640 * C3442 + C21714 + C21714 + C84509 * C3454) *
                C84344 +
            (C19642 * C1683 + C19655 + C19655 + C84198 * C1691 +
             C19640 * C1682 + C19656 + C19656 + C84509 * C1690) *
                C84529) *
               C84558 +
           ((C19642 * C3444 + C21715 + C21715 + C84198 * C3456 +
             C19640 * C3445 + C21716 + C21716 + C84509 * C3457) *
                C84344 +
            (C19642 * C721 + C19657 + C19657 + C84198 * C731 + C19640 * C722 +
             C19658 + C19658 + C84509 * C732) *
                C84529) *
               C13622 +
           ((C19642 * C1181 + C21717 + C21717 + C84198 * C1191 +
             C19640 * C1182 + C21718 + C21718 + C84509 * C1192) *
                C84344 +
            (C19642 * C104 + C19659 + C19659 + C84198 * C116 + C19640 * C103 +
             C19660 + C19660 + C84509 * C115) *
                C84529) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C6685 +
            (C172 * C108 + C84246 * C179) * C6678 + C202 * C6687 +
            C203 * C6679 + C204 * C6689 + C205 * C6680 + C206 * C6691 +
            C207 * C84527) *
               C84529 +
           (C5975 * C6685 + C5976 * C6678 + C4332 * C6687 + C4333 * C6679 +
            C4334 * C6689 + C4335 * C6680 + C8803 * C6691 + C8804 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C172 * C1184 + C84246 * C1246) * C84527 +
            (C172 * C1179 + C84246 * C1241) * C6691 + C8804 * C6680 +
            C8803 * C6689 + C4335 * C6679 + C4334 * C6687 + C4333 * C6678 +
            C4332 * C6685) *
               C84344 +
           (C209 * C84527 + C208 * C6691 + C207 * C6680 + C206 * C6689 +
            C205 * C6679 + C204 * C6687 + C203 * C6678 + C202 * C6685) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C82024 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84509 +
            (C13750 + C13751 + C13752) * C81997 +
            (C13753 + C13754 + C13755) * C84198) *
               C84529 +
           ((C18936 + C18937 + C18938) * C82024 +
            (C18939 + C18940 + C18941) * C84509 +
            (C21829 + C21830 + C21831) * C81997 +
            (C21832 + C21833 + C21834) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C13724 * C3447 + C84558 * C3548 + C13723 * C3450 + C13622 * C3549 +
             C13722 * C1186 + C13621 * C1248) *
                C84198 +
            (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
             C13722 * C1181 + C13621 * C1243) *
                C81997 +
            (C21834 + C21833 + C21832) * C84509 +
            (C21831 + C21830 + C21829) * C82024) *
               C84344 +
           ((C13761 + C13760 + C13759) * C84198 +
            (C13758 + C13757 + C13756) * C81997 +
            (C13755 + C13754 + C13753) * C84509 +
            (C13752 + C13751 + C13750) * C82024) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C6685 +
           (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
               C6678 +
           (C8897 + C8898) * C6687 + (C8899 + C8900) * C6679 +
           (C8901 + C8902) * C6689 + (C8903 + C8904) * C6680 +
           (C8905 + C8906) * C6691 + (C8907 + C8908) * C84527) *
              C84246 * C84603 * C84604 * C90 -
          ((C8871 * C1184 + C84344 * C1298 + C8870 * C112 + C84529 * C262) *
               C84527 +
           (C8871 * C1179 + C84344 * C1293 + C8870 * C106 + C84529 * C256) *
               C6691 +
           (C8908 + C8907) * C6680 + (C8906 + C8905) * C6689 +
           (C8904 + C8903) * C6679 + (C8902 + C8901) * C6687 +
           (C8900 + C8899) * C6678 + (C8898 + C8897) * C6685) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82024 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84509 +
            (C8897 + C8898) * C81997 + (C8899 + C8900) * C84198) *
               C13621 +
           ((C11976 + C11977) * C82024 + (C11978 + C11979) * C84509 +
            (C10999 + C11000) * C81997 + (C11001 + C11002) * C84198) *
               C13622 +
           ((C8870 * C1681 + C84529 * C1906 + C8871 * C3443 + C84344 * C3630) *
                C82024 +
            (C8870 * C1685 + C84529 * C1910 + C8871 * C3449 + C84344 * C3636) *
                C84509 +
            (C21941 + C21942) * C81997 + (C21943 + C21944) * C84198) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C8871 * C3447 + C84344 * C3634 + C8870 * C1687 + C84529 * C1912) *
                C84198 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C81997 +
            (C21944 + C21943) * C84509 + (C21942 + C21941) * C82024) *
               C84558 +
           ((C11006 + C11005) * C84198 + (C11004 + C11003) * C81997 +
            (C11002 + C11001) * C84509 + (C11000 + C10999) * C82024) *
               C13622 +
           ((C8904 + C8903) * C84198 + (C8902 + C8901) * C81997 +
            (C8900 + C8899) * C84509 + (C8898 + C8897) * C82024) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C172 +
            (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
             C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
                C84246) *
               C84529 +
           ((C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
             C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
                C172 +
            (C6685 * C1245 + C6678 * C1349 + C6687 * C1244 + C6679 * C1348 +
             C6689 * C1243 + C6680 * C1347 + C6691 * C1242 + C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C6691 * C1241 + C84527 * C1345 + C6689 * C1242 + C6680 * C1346 +
             C6687 * C1243 + C6679 * C1347 + C6685 * C1244 + C6678 * C1348) *
                C84246 +
            (C6691 * C1179 + C84527 * C1184 + C6689 * C1180 + C6680 * C1185 +
             C6687 * C1181 + C6679 * C1186 + C6685 * C1182 + C6678 * C1187) *
                C172) *
               C84344 +
           ((C6691 * C177 + C84527 * C334 + C6689 * C176 + C6680 * C333 +
             C6687 * C175 + C6679 * C332 + C6685 * C174 + C6678 * C331) *
                C84246 +
            (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
             C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
                C172) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C13722 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C13621 +
            (C20623 + C20624) * C13723 + (C20625 + C20626) * C13622 +
            (C20627 + C20628) * C13724 + (C20629 + C20630) * C84558) *
               C84529 +
           ((C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C13722 +
            (C82024 * C1245 + C84509 * C1349 + C81997 * C1244 +
             C84198 * C1348) *
                C13621 +
            (C82024 * C3446 + C84509 * C3452 + C81997 * C3445 +
             C84198 * C3451) *
                C13723 +
            (C82024 * C3547 + C84509 * C3719 + C81997 * C3545 +
             C84198 * C3718) *
                C13622 +
            (C82024 * C3443 + C84509 * C3449 + C81997 * C3442 +
             C84198 * C3448) *
                C13724 +
            (C82024 * C3546 + C84509 * C3716 + C81997 * C3544 +
             C84198 * C3715) *
                C84558) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C81997 * C3542 + C84198 * C3714 + C82024 * C3544 +
             C84509 * C3715) *
                C84558 +
            (C81997 * C3441 + C84198 * C3447 + C82024 * C3442 +
             C84509 * C3448) *
                C13724 +
            (C81997 * C3543 + C84198 * C3717 + C82024 * C3545 +
             C84509 * C3718) *
                C13622 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C13723 +
            (C81997 * C1243 + C84198 * C1347 + C82024 * C1244 +
             C84509 * C1348) *
                C13621 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C13722) *
               C84344 +
           ((C81997 * C1790 + C84198 * C2014 + C82024 * C1789 +
             C84509 * C2013) *
                C84558 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C13724 +
            (C81997 * C783 + C84198 * C887 + C82024 * C784 + C84509 * C888) *
                C13622 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C13723 +
            (C81997 * C175 + C84198 * C332 + C82024 * C174 + C84509 * C331) *
                C13621 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C13722) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C6678 + C408 * C6679 +
            C409 * C6680 + C410 * C84527) *
               C84529 +
           (C6268 * C6678 + C4637 * C6679 + C4638 * C6680 + C9045 * C84527) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C84527 +
            C9045 * C6680 + C4638 * C6679 + C4637 * C6678) *
               C84344 +
           (C411 * C84527 + C410 * C6680 + C409 * C6679 + C408 * C6678) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
             C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 +
             C13989 + C84558 * C2093) *
                C84509 +
            (C14023 + C14024 + C14025) * C84198) *
               C84529 +
           ((C19229 + C19230 + C19231) * C84509 +
            (C22153 + C22154 + C22155) * C84198) *
               C84344) *
              C84603 * C84604 * C90 -
          (((C13985 * C3441 + C15514 + C15514 + C84558 * C3794 +
             C13984 * C3444 + C15515 + C15515 + C13622 * C3795 +
             C13983 * C1181 + C15516 + C15516 + C13621 * C1394) *
                C84198 +
            (C22155 + C22154 + C22153) * C84509) *
               C84344 +
           ((C14028 + C14027 + C14026) * C84198 +
            (C14025 + C14024 + C14023) * C84509) *
               C84529) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C172 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84246) *
               C6678 +
           ((C8897 + C8898) * C172 + (C9124 + C9125) * C84246) * C6679 +
           ((C8901 + C8902) * C172 + (C9126 + C9127) * C84246) * C6680 +
           ((C8905 + C8906) * C172 + (C9128 + C9129) * C84246) * C84527) *
              C84603 * C84604 * C90 -
          (((C8871 * C1241 + C84344 * C1444 + C8870 * C177 + C84529 * C457) *
                C84246 +
            (C8871 * C1179 + C84344 * C1293 + C8870 * C106 + C84529 * C256) *
                C172) *
               C84527 +
           ((C9129 + C9128) * C84246 + (C8906 + C8905) * C172) * C6680 +
           ((C9127 + C9126) * C84246 + (C8902 + C8901) * C172) * C6679 +
           ((C9125 + C9124) * C84246 + (C8898 + C8897) * C172) * C6678) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C13722 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C13621 +
            (C11976 + C11977) * C13723 + (C12302 + C12303) * C13622 +
            (C8870 * C1681 + C84529 * C1906 + C8871 * C3443 + C84344 * C3630) *
                C13724 +
            (C8870 * C1788 + C84529 * C2213 + C8871 * C3546 + C84344 * C3887) *
                C84558) *
               C84509 +
           ((C8897 + C8898) * C13722 + (C9124 + C9125) * C13621 +
            (C10999 + C11000) * C13723 + (C11329 + C11330) * C13622 +
            (C21941 + C21942) * C13724 + (C22258 + C22259) * C84558) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C8871 * C3542 + C84344 * C3883 + C8870 * C1790 + C84529 * C2215) *
                C84558 +
            (C8871 * C3441 + C84344 * C3628 + C8870 * C1683 + C84529 * C1908) *
                C13724 +
            (C11332 + C11331) * C13622 + (C11004 + C11003) * C13723 +
            (C9127 + C9126) * C13621 + (C8902 + C8901) * C13722) *
               C84198 +
           ((C22259 + C22258) * C84558 + (C21942 + C21941) * C13724 +
            (C11330 + C11329) * C13622 + (C11000 + C10999) * C13723 +
            (C9125 + C9124) * C13621 + (C8898 + C8897) * C13722) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C8870 +
           (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
            C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
               C84529 +
           (C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
            C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
               C8871 +
           (C6685 * C1297 + C6678 * C1495 + C6687 * C1296 + C6679 * C1494 +
            C6689 * C1295 + C6680 * C1493 + C6691 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C84604 * C90 -
          ((C6691 * C1293 + C84527 * C1491 + C6689 * C1294 + C6680 * C1492 +
            C6687 * C1295 + C6679 * C1493 + C6685 * C1296 + C6678 * C1494) *
               C84344 +
           (C6691 * C1179 + C84527 * C1184 + C6689 * C1180 + C6680 * C1185 +
            C6687 * C1181 + C6679 * C1186 + C6685 * C1182 + C6678 * C1187) *
               C8871 +
           (C6691 * C256 + C84527 * C525 + C6689 * C255 + C6680 * C524 +
            C6687 * C254 + C6679 * C523 + C6685 * C253 + C6678 * C522) *
               C84529 +
           (C6691 * C106 + C84527 * C112 + C6689 * C105 + C6680 * C111 +
            C6687 * C104 + C6679 * C110 + C6685 * C103 + C6678 * C109) *
               C8870) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C8870 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84529 +
            (C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C8871 +
            (C82024 * C1297 + C84509 * C1495 + C81997 * C1296 +
             C84198 * C1494) *
                C84344) *
               C13621 +
           ((C20623 + C20624) * C8870 + (C20853 + C20854) * C84529 +
            (C82024 * C3446 + C84509 * C3452 + C81997 * C3445 +
             C84198 * C3451) *
                C8871 +
            (C82024 * C3633 + C84509 * C3968 + C81997 * C3632 +
             C84198 * C3967) *
                C84344) *
               C13622 +
           ((C20627 + C20628) * C8870 + (C20855 + C20856) * C84529 +
            (C82024 * C3443 + C84509 * C3449 + C81997 * C3442 +
             C84198 * C3448) *
                C8871 +
            (C82024 * C3630 + C84509 * C3965 + C81997 * C3629 +
             C84198 * C3964) *
                C84344) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C81997 * C3628 + C84198 * C3963 + C82024 * C3629 +
             C84509 * C3964) *
                C84344 +
            (C81997 * C3441 + C84198 * C3447 + C82024 * C3442 +
             C84509 * C3448) *
                C8871 +
            (C81997 * C1908 + C84198 * C2317 + C82024 * C1907 +
             C84509 * C2316) *
                C84529 +
            (C81997 * C1683 + C84198 * C1687 + C82024 * C1682 +
             C84509 * C1686) *
                C8870) *
               C84558 +
           ((C81997 * C3631 + C84198 * C3966 + C82024 * C3632 +
             C84509 * C3967) *
                C84344 +
            (C81997 * C3444 + C84198 * C3450 + C82024 * C3445 +
             C84509 * C3451) *
                C8871 +
            (C81997 * C835 + C84198 * C1033 + C82024 * C836 + C84509 * C1034) *
                C84529 +
            (C81997 * C721 + C84198 * C726 + C82024 * C722 + C84509 * C727) *
                C8870) *
               C13622 +
           ((C81997 * C1295 + C84198 * C1493 + C82024 * C1296 +
             C84509 * C1494) *
                C84344 +
            (C81997 * C1181 + C84198 * C1186 + C82024 * C1182 +
             C84509 * C1187) *
                C8871 +
            (C81997 * C254 + C84198 * C523 + C82024 * C253 + C84509 * C522) *
                C84529 +
            (C81997 * C104 + C84198 * C110 + C82024 * C103 + C84509 * C109) *
                C8870) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C8870 +
                      (C172 * C252 + C84246 * C569) * C84529 + C5975 * C8871 +
                      C6525 * C84344) *
                         C6678 +
                     (C9262 + C9263 + C9264 + C9265) * C6679 +
                     (C9266 + C9267 + C9268 + C9269) * C6680 +
                     (C9270 + C9271 + C9272 + C9276) * C84527) *
                        C84603 * C84604 * C90 -
                    (((C172 * C1293 + C84246 * C1538) * C84344 +
                      (C172 * C1179 + C84246 * C1241) * C8871 + C591 * C84529 +
                      C208 * C8870) *
                         C84527 +
                     (C9276 + C9272 + C9271 + C9270) * C6680 +
                     (C9269 + C9268 + C9267 + C9266) * C6679 +
                     (C9265 + C9264 + C9263 + C9262) * C6678) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13722 * C102 + C13621 * C173 + C13723 * C723 +
                       C13622 * C785 + C13724 * C1681 + C84558 * C1788) *
                          C8870 +
                      (C13722 * C252 + C13621 * C569 + C13723 * C837 +
                       C13622 * C1082 + C13724 * C1906 + C84558 * C2393) *
                          C84529 +
                      (C18936 + C18937 + C18938) * C8871 +
                      (C19481 + C19482 + C19483) * C84344) *
                         C84509 +
                     ((C13750 + C13751 + C13752) * C8870 +
                      (C14275 + C14276 + C14277) * C84529 +
                      (C21829 + C21830 + C21831) * C8871 +
                      (C22462 + C22463 + C22464) * C84344) *
                         C84198) *
                        C84603 * C84604 * C90 -
                    (((C13724 * C3628 + C84558 * C4043 + C13723 * C3631 +
                       C13622 * C4044 + C13722 * C1295 + C13621 * C1540) *
                          C84344 +
                      (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 +
                       C13622 * C3543 + C13722 * C1181 + C13621 * C1243) *
                          C8871 +
                      (C14280 + C14279 + C14278) * C84529 +
                      (C13758 + C13757 + C13756) * C8870) *
                         C84198 +
                     ((C22464 + C22463 + C22462) * C84344 +
                      (C21831 + C21830 + C21829) * C8871 +
                      (C14277 + C14276 + C14275) * C84529 +
                      (C13752 + C13751 + C13750) * C8870) *
                         C84509) *
                        C84603 * C84604 * C91)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C84246 * C6678 +
           (C9379 + C9380) * C84246 * C6679 + (C9381 + C9382) * C84246 * C6680 +
           (C9383 + C9384) * C84246 * C84527) *
              C84603 * C84604 * C90 -
          ((C9343 * C1179 + C9365 + C9365 + C84344 * C1585 + C9342 * C106 +
            C9366 + C9366 + C84529 * C642) *
               C84246 * C84527 +
           (C9384 + C9383) * C84246 * C6680 + (C9382 + C9381) * C84246 * C6679 +
           (C9380 + C9379) * C84246 * C6678) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C13621 +
            (C12621 + C12622) * C13622 +
            (C9342 * C1681 + C12616 + C12616 + C84529 * C2489 + C9343 * C3443 +
             C12615 + C12615 + C84344 * C4127) *
                C84558) *
               C84509 +
           ((C9379 + C9380) * C13621 + (C11655 + C11656) * C13622 +
            (C22571 + C22572) * C84558) *
               C84198) *
              C84603 * C84604 * C90 -
          (((C9343 * C3441 + C12611 + C12611 + C84344 * C4123 + C9342 * C1683 +
             C12612 + C12612 + C84529 * C2491) *
                C84558 +
            (C11658 + C11657) * C13622 + (C9382 + C9381) * C13621) *
               C84198 +
           ((C22572 + C22571) * C84558 + (C11656 + C11655) * C13622 +
            (C9380 + C9379) * C13621) *
               C84509) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84529 +
           (C6684 * C1183 + C8113 + C8113 + C6678 * C1193 + C6686 * C1182 +
            C8112 + C8112 + C6679 * C1192 + C6688 * C1181 + C8111 + C8111 +
            C6680 * C1191 + C6690 * C1180 + C8110 + C8110 + C84527 * C1190) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C6690 * C8102 + C8106 + C8106 + C84527 * C8104 + C6688 * C3444 +
            C8107 + C8107 + C6680 * C3456 + C6686 * C3445 + C8108 + C8108 +
            C6679 * C3457 + C6684 * C3446 + C8109 + C8109 + C6678 * C3458) *
               C84344 +
           (C7456 + C7455 + C7454 + C7453) * C84529) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C84529 +
            (C19640 * C1183 + C21067 + C21067 + C84509 * C1193 +
             C19642 * C1182 + C21066 + C21066 + C84198 * C1192) *
                C84344) *
               C13621 +
           ((C20383 + C20384) * C84529 + (C22687 + C22688) * C84344) * C13622 +
           ((C20385 + C20386) * C84529 + (C22689 + C22690) * C84344) * C84558) *
              C84603 * C716 -
          (((C19642 * C21056 + C21060 + C21060 + C84198 * C21058 +
             C19640 * C16807 + C21061 + C21061 + C84509 * C16811) *
                C84344 +
            (C20388 + C20387) * C84529) *
               C84558 +
           ((C22690 + C22689) * C84344 + (C20386 + C20385) * C84529) * C13622 +
           ((C22688 + C22687) * C84344 + (C20384 + C20383) * C84529) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C6685 +
            (C172 * C108 + C84246 * C179) * C6678 + C202 * C6687 +
            C203 * C6679 + C204 * C6689 + C205 * C6680 + C206 * C6691 +
            C207 * C84527) *
               C84529 +
           (C5975 * C6685 + C5976 * C6678 + C4332 * C6687 + C4333 * C6679 +
            C4334 * C6689 + C4335 * C6680 + C8803 * C6691 + C8804 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C172 * C8103 + C84246 * C8180) * C84527 +
            (C172 * C8102 + C84246 * C8179) * C6691 +
            (C172 * C3450 + C84246 * C3549) * C6680 +
            (C172 * C3444 + C84246 * C3543) * C6689 +
            (C172 * C3451 + C84246 * C3551) * C6679 +
            (C172 * C3445 + C84246 * C3545) * C6687 +
            (C172 * C3452 + C84246 * C3553) * C6678 +
            (C172 * C3446 + C84246 * C3547) * C6685) *
               C84344 +
           ((C172 * C725 + C84246 * C787) * C84527 +
            (C172 * C720 + C84246 * C782) * C6691 +
            (C172 * C726 + C84246 * C788) * C6680 +
            (C172 * C721 + C84246 * C783) * C6689 +
            (C172 * C727 + C84246 * C789) * C6679 +
            (C172 * C722 + C84246 * C784) * C6687 +
            (C172 * C728 + C84246 * C790) * C6678 +
            (C172 * C723 + C84246 * C785) * C6685) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C82024 +
            (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
             C13724 * C1685 + C84558 * C1792) *
                C84509 +
            (C13750 + C13751 + C13752) * C81997 +
            (C13753 + C13754 + C13755) * C84198) *
               C84529 +
           ((C18936 + C18937 + C18938) * C82024 +
            (C18939 + C18940 + C18941) * C84509 +
            (C21829 + C21830 + C21831) * C81997 +
            (C21832 + C21833 + C21834) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C13724 * C21057 + C84558 * C21134 + C13723 * C3448 +
             C13622 * C3550 + C13722 * C3451 + C13621 * C3551) *
                C84198 +
            (C13724 * C21056 + C84558 * C21133 + C13723 * C3442 +
             C13622 * C3544 + C13722 * C3445 + C13621 * C3545) *
                C81997 +
            (C13724 * C16809 + C84558 * C16862 + C13723 * C3449 +
             C13622 * C3552 + C13722 * C3452 + C13621 * C3553) *
                C84509 +
            (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
             C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
                C82024) *
               C84344 +
           ((C13724 * C2601 + C84558 * C2717 + C13723 * C1686 + C13622 * C1793 +
             C13722 * C727 + C13621 * C789) *
                C84198 +
            (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
             C13722 * C722 + C13621 * C784) *
                C81997 +
            (C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
             C13722 * C728 + C13621 * C790) *
                C84509 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C82024) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C6685 +
           (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
               C6678 +
           (C8897 + C8898) * C6687 + (C8899 + C8900) * C6679 +
           (C8901 + C8902) * C6689 + (C8903 + C8904) * C6680 +
           (C8905 + C8906) * C6691 + (C8907 + C8908) * C84527) *
              C84246 * C84603 * C716 -
          ((C8871 * C8103 + C84344 * C8248 + C8870 * C725 + C84529 * C839) *
               C84527 +
           (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
               C6691 +
           (C8871 * C3450 + C84344 * C3637 + C8870 * C726 + C84529 * C840) *
               C6680 +
           (C8871 * C3444 + C84344 * C3631 + C8870 * C721 + C84529 * C835) *
               C6689 +
           (C8871 * C3451 + C84344 * C3638 + C8870 * C727 + C84529 * C841) *
               C6679 +
           (C8871 * C3445 + C84344 * C3632 + C8870 * C722 + C84529 * C836) *
               C6687 +
           (C8871 * C3452 + C84344 * C3639 + C8870 * C728 + C84529 * C842) *
               C6678 +
           (C8871 * C3446 + C84344 * C3633 + C8870 * C723 + C84529 * C837) *
               C6685) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82024 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84509 +
            (C8897 + C8898) * C81997 + (C8899 + C8900) * C84198) *
               C13621 +
           ((C11976 + C11977) * C82024 + (C11978 + C11979) * C84509 +
            (C10999 + C11000) * C81997 + (C11001 + C11002) * C84198) *
               C13622 +
           ((C22895 + C22896) * C82024 + (C22897 + C22898) * C84509 +
            (C21941 + C21942) * C81997 + (C21943 + C21944) * C84198) *
               C84558) *
              C84603 * C716 -
          (((C8871 * C21057 + C84344 * C21202 + C8870 * C2601 +
             C84529 * C2797) *
                C84198 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C81997 +
            (C8871 * C16809 + C84344 * C16908 + C8870 * C2602 +
             C84529 * C2798) *
                C84509 +
            (C8871 * C16807 + C84344 * C16906 + C8870 * C2599 +
             C84529 * C2795) *
                C82024) *
               C84558 +
           ((C21944 + C21943) * C84198 + (C21942 + C21941) * C81997 +
            (C22898 + C22897) * C84509 + (C22896 + C22895) * C82024) *
               C13622 +
           ((C11002 + C11001) * C84198 + (C11000 + C10999) * C81997 +
            (C11979 + C11978) * C84509 + (C11977 + C11976) * C82024) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C172 +
            (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
             C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
                C84246) *
               C84529 +
           ((C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
             C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
                C172 +
            (C6685 * C1245 + C6678 * C1349 + C6687 * C1244 + C6679 * C1348 +
             C6689 * C1243 + C6680 * C1347 + C6691 * C1242 + C84527 * C1346) *
                C84246) *
               C84344) *
              C84603 * C716 -
          (((C6691 * C8179 + C84527 * C8315 + C6689 * C3543 + C6680 * C3717 +
             C6687 * C3545 + C6679 * C3718 + C6685 * C3547 + C6678 * C3719) *
                C84246 +
            (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
             C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
                C172) *
               C84344 +
           ((C7686 + C7685 + C7684 + C7683) * C84246 +
            (C7682 + C7681 + C7680 + C7679) * C172) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C13722 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C13621 +
            (C20623 + C20624) * C13723 + (C20625 + C20626) * C13622 +
            (C20627 + C20628) * C13724 + (C20629 + C20630) * C84558) *
               C84529 +
           ((C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C13722 +
            (C82024 * C1245 + C84509 * C1349 + C81997 * C1244 +
             C84198 * C1348) *
                C13621 +
            (C23013 + C23014) * C13723 + (C23015 + C23016) * C13622 +
            (C23017 + C23018) * C13724 + (C23019 + C23020) * C84558) *
               C84344) *
              C84603 * C716 -
          (((C81997 * C21133 + C84198 * C21269 + C82024 * C16860 +
             C84509 * C16952) *
                C84558 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C13724 +
            (C23020 + C23019) * C13622 + (C23018 + C23017) * C13723 +
            (C23016 + C23015) * C13621 + (C23014 + C23013) * C13722) *
               C84344 +
           ((C20634 + C20633) * C84558 + (C20632 + C20631) * C13724 +
            (C20630 + C20629) * C13622 + (C20628 + C20627) * C13723 +
            (C20626 + C20625) * C13621 + (C20624 + C20623) * C13722) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C378 * C102 + C386 + C386 + C84246 * C379) * C6678 + C408 * C6679 +
            C409 * C6680 + C410 * C84527) *
               C84529 +
           (C6268 * C6678 + C4637 * C6679 + C4638 * C6680 + C9045 * C84527) *
               C84344) *
              C84603 * C716 -
          (((C378 * C8102 + C9715 + C9715 + C84246 * C8382) * C84527 +
            (C378 * C3444 + C5443 + C5443 + C84246 * C3795) * C6680 +
            (C378 * C3445 + C5444 + C5444 + C84246 * C3797) * C6679 +
            (C378 * C3446 + C5445 + C5445 + C84246 * C3799) * C6678) *
               C84344 +
           ((C378 * C720 + C939 + C939 + C84246 * C933) * C84527 +
            (C378 * C721 + C940 + C940 + C84246 * C934) * C6680 +
            (C378 * C722 + C941 + C941 + C84246 * C935) * C6679 +
            (C378 * C723 + C942 + C942 + C84246 * C936) * C6678) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
             C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 +
             C13989 + C84558 * C2093) *
                C84509 +
            (C14023 + C14024 + C14025) * C84198) *
               C84529 +
           ((C19229 + C19230 + C19231) * C84509 +
            (C22153 + C22154 + C22155) * C84198) *
               C84344) *
              C84603 * C716 -
          (((C13985 * C21056 + C23119 + C23119 + C84558 * C21336 +
             C13984 * C3442 + C23120 + C23120 + C13622 * C3796 +
             C13983 * C3445 + C23121 + C23121 + C13621 * C3797) *
                C84198 +
            (C13985 * C16807 + C18363 + C18363 + C84558 * C16996 +
             C13984 * C3443 + C18364 + C18364 + C13622 * C3798 +
             C13983 * C3446 + C18365 + C18365 + C13621 * C3799) *
                C84509) *
               C84344 +
           ((C13985 * C2598 + C14815 + C14815 + C84558 * C3011 +
             C13984 * C1682 + C14816 + C14816 + C13622 * C2094 + C13983 * C722 +
             C14817 + C14817 + C13621 * C935) *
                C84198 +
            (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 +
             C13984 * C1681 + C14819 + C14819 + C13622 * C2093 + C13983 * C723 +
             C14820 + C14820 + C13621 * C936) *
                C84509) *
               C84529) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C172 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84246) *
               C6678 +
           ((C8897 + C8898) * C172 + (C9124 + C9125) * C84246) * C6679 +
           ((C8901 + C8902) * C172 + (C9126 + C9127) * C84246) * C6680 +
           ((C8905 + C8906) * C172 + (C9128 + C9129) * C84246) * C84527) *
              C84603 * C716 -
          (((C8871 * C8179 + C84344 * C8457 + C8870 * C782 + C84529 * C985) *
                C84246 +
            (C8871 * C8102 + C84344 * C8247 + C8870 * C720 + C84529 * C834) *
                C172) *
               C84527 +
           ((C8871 * C3543 + C84344 * C3884 + C8870 * C783 + C84529 * C986) *
                C84246 +
            (C8871 * C3444 + C84344 * C3631 + C8870 * C721 + C84529 * C835) *
                C172) *
               C6680 +
           ((C8871 * C3545 + C84344 * C3886 + C8870 * C784 + C84529 * C987) *
                C84246 +
            (C8871 * C3445 + C84344 * C3632 + C8870 * C722 + C84529 * C836) *
                C172) *
               C6679 +
           ((C8871 * C3547 + C84344 * C3888 + C8870 * C785 + C84529 * C988) *
                C84246 +
            (C8871 * C3446 + C84344 * C3633 + C8870 * C723 + C84529 * C837) *
                C172) *
               C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C13722 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C13621 +
            (C11976 + C11977) * C13723 + (C12302 + C12303) * C13622 +
            (C22895 + C22896) * C13724 + (C23224 + C23225) * C84558) *
               C84509 +
           ((C8897 + C8898) * C13722 + (C9124 + C9125) * C13621 +
            (C10999 + C11000) * C13723 + (C11329 + C11330) * C13622 +
            (C21941 + C21942) * C13724 + (C22258 + C22259) * C84558) *
               C84198) *
              C84603 * C716 -
          (((C8871 * C21133 + C84344 * C21411 + C8870 * C2714 +
             C84529 * C3097) *
                C84558 +
            (C8871 * C21056 + C84344 * C21201 + C8870 * C2598 +
             C84529 * C2794) *
                C13724 +
            (C22259 + C22258) * C13622 + (C21942 + C21941) * C13723 +
            (C11330 + C11329) * C13621 + (C11000 + C10999) * C13722) *
               C84198 +
           ((C8871 * C16860 + C84344 * C17045 + C8870 * C2715 +
             C84529 * C3098) *
                C84558 +
            (C8871 * C16807 + C84344 * C16906 + C8870 * C2599 +
             C84529 * C2795) *
                C13724 +
            (C23225 + C23224) * C13622 + (C22896 + C22895) * C13723 +
            (C12303 + C12302) * C13621 + (C11977 + C11976) * C13722) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C8870 +
           (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
            C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
               C84529 +
           (C6685 * C1183 + C6678 * C1188 + C6687 * C1182 + C6679 * C1187 +
            C6689 * C1181 + C6680 * C1186 + C6691 * C1180 + C84527 * C1185) *
               C8871 +
           (C6685 * C1297 + C6678 * C1495 + C6687 * C1296 + C6679 * C1494 +
            C6689 * C1295 + C6680 * C1493 + C6691 * C1294 + C84527 * C1492) *
               C84344) *
              C84246 * C84603 * C716 -
          ((C6691 * C8247 + C84527 * C8524 + C6689 * C3631 + C6680 * C3966 +
            C6687 * C3632 + C6679 * C3967 + C6685 * C3633 + C6678 * C3968) *
               C84344 +
           (C6691 * C8102 + C84527 * C8103 + C6689 * C3444 + C6680 * C3450 +
            C6687 * C3445 + C6679 * C3451 + C6685 * C3446 + C6678 * C3452) *
               C8871 +
           (C7904 + C7903 + C7902 + C7901) * C84529 +
           (C7682 + C7681 + C7680 + C7679) * C8870) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C8870 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84529 +
            (C82024 * C1183 + C84509 * C1188 + C81997 * C1182 +
             C84198 * C1187) *
                C8871 +
            (C82024 * C1297 + C84509 * C1495 + C81997 * C1296 +
             C84198 * C1494) *
                C84344) *
               C13621 +
           ((C20623 + C20624) * C8870 + (C20853 + C20854) * C84529 +
            (C23013 + C23014) * C8871 + (C23332 + C23333) * C84344) *
               C13622 +
           ((C20627 + C20628) * C8870 + (C20855 + C20856) * C84529 +
            (C23017 + C23018) * C8871 + (C23334 + C23335) * C84344) *
               C84558) *
              C84603 * C716 -
          (((C81997 * C21201 + C84198 * C21478 + C82024 * C16906 +
             C84509 * C17089) *
                C84344 +
            (C81997 * C21056 + C84198 * C21057 + C82024 * C16807 +
             C84509 * C16809) *
                C8871 +
            (C20858 + C20857) * C84529 + (C20632 + C20631) * C8870) *
               C84558 +
           ((C23335 + C23334) * C84344 + (C23018 + C23017) * C8871 +
            (C20856 + C20855) * C84529 + (C20628 + C20627) * C8870) *
               C13622 +
           ((C23333 + C23332) * C84344 + (C23014 + C23013) * C8871 +
            (C20854 + C20853) * C84529 + (C20624 + C20623) * C8870) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C8870 +
                      (C172 * C252 + C84246 * C569) * C84529 + C5975 * C8871 +
                      C6525 * C84344) *
                         C6678 +
                     (C9262 + C9263 + C9264 + C9265) * C6679 +
                     (C9266 + C9267 + C9268 + C9269) * C6680 +
                     (C9270 + C9271 + C9272 + C9276) * C84527) *
                        C84603 * C716 -
                    (((C172 * C8247 + C84246 * C8591) * C84344 +
                      (C172 * C8102 + C84246 * C8179) * C8871 +
                      (C172 * C834 + C84246 * C1079) * C84529 +
                      (C172 * C720 + C84246 * C782) * C8870) *
                         C84527 +
                     ((C172 * C3631 + C84246 * C4044) * C84344 +
                      (C172 * C3444 + C84246 * C3543) * C8871 +
                      (C172 * C835 + C84246 * C1080) * C84529 +
                      (C172 * C721 + C84246 * C783) * C8870) *
                         C6680 +
                     ((C172 * C3632 + C84246 * C4046) * C84344 +
                      (C172 * C3445 + C84246 * C3545) * C8871 +
                      (C172 * C836 + C84246 * C1081) * C84529 +
                      (C172 * C722 + C84246 * C784) * C8870) *
                         C6679 +
                     ((C172 * C3633 + C84246 * C4048) * C84344 +
                      (C172 * C3446 + C84246 * C3547) * C8871 +
                      (C172 * C837 + C84246 * C1082) * C84529 +
                      (C172 * C723 + C84246 * C785) * C8870) *
                         C6678) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13722 * C102 + C13621 * C173 + C13723 * C723 +
                       C13622 * C785 + C13724 * C1681 + C84558 * C1788) *
                          C8870 +
                      (C13722 * C252 + C13621 * C569 + C13723 * C837 +
                       C13622 * C1082 + C13724 * C1906 + C84558 * C2393) *
                          C84529 +
                      (C18936 + C18937 + C18938) * C8871 +
                      (C19481 + C19482 + C19483) * C84344) *
                         C84509 +
                     ((C13750 + C13751 + C13752) * C8870 +
                      (C14275 + C14276 + C14277) * C84529 +
                      (C21829 + C21830 + C21831) * C8871 +
                      (C22462 + C22463 + C22464) * C84344) *
                         C84198) *
                        C84603 * C716 -
                    (((C13724 * C21201 + C84558 * C21545 + C13723 * C3629 +
                       C13622 * C4045 + C13722 * C3632 + C13621 * C4046) *
                          C84344 +
                      (C13724 * C21056 + C84558 * C21133 + C13723 * C3442 +
                       C13622 * C3544 + C13722 * C3445 + C13621 * C3545) *
                          C8871 +
                      (C13724 * C2794 + C84558 * C3275 + C13723 * C1907 +
                       C13622 * C2394 + C13722 * C836 + C13621 * C1081) *
                          C84529 +
                      (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 +
                       C13622 * C1789 + C13722 * C722 + C13621 * C784) *
                          C8870) *
                         C84198 +
                     ((C13724 * C16906 + C84558 * C17133 + C13723 * C3630 +
                       C13622 * C4047 + C13722 * C3633 + C13621 * C4048) *
                          C84344 +
                      (C13724 * C16807 + C84558 * C16860 + C13723 * C3443 +
                       C13622 * C3546 + C13722 * C3446 + C13621 * C3547) *
                          C8871 +
                      (C13724 * C2795 + C84558 * C3276 + C13723 * C1906 +
                       C13622 * C2393 + C13722 * C837 + C13621 * C1082) *
                          C84529 +
                      (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 +
                       C13622 * C1788 + C13722 * C723 + C13621 * C785) *
                          C8870) *
                         C84509) *
                        C84603 * C717) *
                   C84605) /
                      (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C84246 * C6678 +
           (C9379 + C9380) * C84246 * C6679 + (C9381 + C9382) * C84246 * C6680 +
           (C9383 + C9384) * C84246 * C84527) *
              C84603 * C716 -
          ((C9343 * C8102 + C9980 + C9980 + C84344 * C8658 + C9342 * C720 +
            C9981 + C9981 + C84529 * C1126) *
               C84246 * C84527 +
           (C9343 * C3444 + C9982 + C9982 + C84344 * C4124 + C9342 * C721 +
            C9983 + C9983 + C84529 * C1127) *
               C84246 * C6680 +
           (C9343 * C3445 + C9984 + C9984 + C84344 * C4126 + C9342 * C722 +
            C9985 + C9985 + C84529 * C1128) *
               C84246 * C6679 +
           (C9343 * C3446 + C9986 + C9986 + C84344 * C4128 + C9342 * C723 +
            C9987 + C9987 + C84529 * C1129) *
               C84246 * C6678) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C13621 +
            (C12621 + C12622) * C13622 + (C23544 + C23545) * C84558) *
               C84509 +
           ((C9379 + C9380) * C13621 + (C11655 + C11656) * C13622 +
            (C22571 + C22572) * C84558) *
               C84198) *
              C84603 * C716 -
          (((C9343 * C21056 + C23536 + C23536 + C84344 * C21612 +
             C9342 * C2598 + C23537 + C23537 + C84529 * C3352) *
                C84558 +
            (C22572 + C22571) * C13622 + (C11656 + C11655) * C13621) *
               C84198 +
           ((C9343 * C16807 + C23538 + C23538 + C84344 * C17177 +
             C9342 * C2599 + C23539 + C23539 + C84529 * C3353) *
                C84558 +
            (C23545 + C23544) * C13622 + (C12622 + C12621) * C13621) *
               C84509) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6684 * C102 + C6693 + C6693 + C6678 * C114 + C6686 * C103 + C6694 +
            C6694 + C6679 * C115 + C6688 * C104 + C6695 + C6695 + C6680 * C116 +
            C6690 * C105 + C6696 + C6696 + C84527 * C117) *
               C84529 +
           (C10074 + C10075 + C10076 + C10077) * C84344) *
              C84246 * C1177 -
          ((C6690 * C4215 + C10062 + C10062 + C84527 * C4223 + C6688 * C4214 +
            C10063 + C10063 + C6680 * C4222 + C6686 * C4213 + C10064 + C10064 +
            C6679 * C4221 + C6684 * C4212 + C10065 + C10065 + C6678 * C4220) *
               C84344 +
           (C10077 + C10076 + C10075 + C10074) * C84529) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19640 * C102 + C19645 + C19645 + C84509 * C114 + C19642 * C103 +
             C19646 + C19646 + C84198 * C115) *
                C84529 +
            (C23658 + C23659) * C84344) *
               C13621 +
           ((C20383 + C20384) * C84529 + (C22687 + C22688) * C84344) * C13622 +
           ((C20385 + C20386) * C84529 + (C22689 + C22690) * C84344) * C84558) *
              C1177 -
          (((C19642 * C17255 + C23648 + C23648 + C84198 * C17259 +
             C19640 * C17254 + C23649 + C23649 + C84509 * C17258) *
                C84344 +
            (C22690 + C22689) * C84529) *
               C84558 +
           ((C19642 * C5114 + C23650 + C23650 + C84198 * C5120 +
             C19640 * C5115 + C23651 + C23651 + C84509 * C5121) *
                C84344 +
            (C22688 + C22687) * C84529) *
               C13622 +
           ((C19642 * C4213 + C23652 + C23652 + C84198 * C4221 +
             C19640 * C4212 + C23653 + C23653 + C84509 * C4220) *
                C84344 +
            (C23659 + C23658) * C84529) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C172 * C102 + C84246 * C173) * C6685 +
                      (C172 * C108 + C84246 * C179) * C6678 + C202 * C6687 +
                      C203 * C6679 + C204 * C6689 + C205 * C6680 +
                      C206 * C6691 + C207 * C84527) *
                         C84529 +
                     (C10144 + C10145 + C10146 + C10147 + C10148 + C10149 +
                      C10150 + C10151) *
                         C84344) *
                        C1177 -
                    (((C172 * C4219 + C84246 * C4314) * C84527 +
                      (C172 * C4215 + C84246 * C4310) * C6691 + C4339 * C6680 +
                      C4338 * C6689 + C4337 * C6679 + C4336 * C6687 +
                      C5978 * C6678 + C5977 * C6685) *
                         C84344 +
                     (C10151 + C10150 + C10149 + C10148 + C10147 + C10146 +
                      C10145 + C10144) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13722 * C102 + C13621 * C173 + C13723 * C723 +
                       C13622 * C785 + C13724 * C1681 + C84558 * C1788) *
                          C82024 +
                      (C13722 * C108 + C13621 * C179 + C13723 * C728 +
                       C13622 * C790 + C13724 * C1685 + C84558 * C1792) *
                          C84509 +
                      (C13750 + C13751 + C13752) * C81997 +
                      (C13753 + C13754 + C13755) * C84198) *
                         C84529 +
                     ((C18936 + C18937 + C18938) * C82024 +
                      (C18939 + C18940 + C18941) * C84509 +
                      (C21829 + C21830 + C21831) * C81997 +
                      (C21832 + C21833 + C21834) * C84198) *
                         C84344) *
                        C1177 -
                    (((C13724 * C17257 + C84558 * C17346 + C13723 * C5117 +
                       C13622 * C5203 + C13722 * C4217 + C13621 * C4312) *
                          C84198 +
                      (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
                       C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
                          C81997 +
                      (C18947 + C18946 + C18945) * C84509 +
                      (C18944 + C18943 + C18942) * C82024) *
                         C84344 +
                     ((C21834 + C21833 + C21832) * C84198 +
                      (C21831 + C21830 + C21829) * C81997 +
                      (C18941 + C18940 + C18939) * C84509 +
                      (C18938 + C18937 + C18936) * C82024) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
               C6685 +
           (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
               C6678 +
           (C8897 + C8898) * C6687 + (C8899 + C8900) * C6679 +
           (C8901 + C8902) * C6689 + (C8903 + C8904) * C6680 +
           (C8905 + C8906) * C6691 + (C8907 + C8908) * C84527) *
              C84246 * C1177 -
          ((C8871 * C4219 + C84344 * C4423 + C8870 * C1185 + C84529 * C1299) *
               C84527 +
           (C8871 * C4215 + C84344 * C4419 + C8870 * C1180 + C84529 * C1294) *
               C6691 +
           (C8871 * C4218 + C84344 * C4422 + C8870 * C1186 + C84529 * C1300) *
               C6680 +
           (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
               C6689 +
           (C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
               C6679 +
           (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
               C6687 +
           (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
               C6678 +
           (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
               C6685) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C82024 +
            (C8870 * C108 + C84529 * C258 + C8871 * C1188 + C84344 * C1302) *
                C84509 +
            (C8897 + C8898) * C81997 + (C8899 + C8900) * C84198) *
               C13621 +
           ((C11976 + C11977) * C82024 + (C11978 + C11979) * C84509 +
            (C10999 + C11000) * C81997 + (C11001 + C11002) * C84198) *
               C13622 +
           ((C22895 + C22896) * C82024 + (C22897 + C22898) * C84509 +
            (C21941 + C21942) * C81997 + (C21943 + C21944) * C84198) *
               C84558) *
              C1177 -
          (((C8871 * C17257 + C84344 * C17424 + C8870 * C3448 +
             C84529 * C3635) *
                C84198 +
            (C8871 * C17255 + C84344 * C17422 + C8870 * C3442 +
             C84529 * C3629) *
                C81997 +
            (C8871 * C17256 + C84344 * C17423 + C8870 * C3449 +
             C84529 * C3636) *
                C84509 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C82024) *
               C84558 +
           ((C8871 * C5117 + C84344 * C5283 + C8870 * C3451 + C84529 * C3638) *
                C84198 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C81997 +
            (C8871 * C5118 + C84344 * C5284 + C8870 * C3452 + C84529 * C3639) *
                C84509 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C82024) *
               C13622 +
           ((C8871 * C4217 + C84344 * C4421 + C8870 * C1187 + C84529 * C1301) *
                C84198 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C81997 +
            (C8871 * C4216 + C84344 * C4420 + C8870 * C1188 + C84529 * C1302) *
                C84509 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C82024) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
             C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
                C172 +
            (C6685 * C173 + C6678 * C330 + C6687 * C174 + C6679 * C331 +
             C6689 * C175 + C6680 * C332 + C6691 * C176 + C84527 * C333) *
                C84246) *
               C84529 +
           ((C10300 + C10301 + C10302 + C10303) * C172 +
            (C10304 + C10305 + C10306 + C10307) * C84246) *
               C84344) *
              C1177 -
          (((C6691 * C4310 + C84527 * C4537 + C6689 * C4309 + C6680 * C4536 +
             C6687 * C4308 + C6679 * C4535 + C6685 * C4307 + C6678 * C4534) *
                C84246 +
            (C6691 * C4215 + C84527 * C4219 + C6689 * C4214 + C6680 * C4218 +
             C6687 * C4213 + C6679 * C4217 + C6685 * C4212 + C6678 * C4216) *
                C172) *
               C84344 +
           ((C10307 + C10306 + C10305 + C10304) * C84246 +
            (C10303 + C10302 + C10301 + C10300) * C172) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C13722 +
            (C82024 * C173 + C84509 * C330 + C81997 * C174 + C84198 * C331) *
                C13621 +
            (C20623 + C20624) * C13723 + (C20625 + C20626) * C13622 +
            (C20627 + C20628) * C13724 + (C20629 + C20630) * C84558) *
               C84529 +
           ((C23962 + C23963) * C13722 + (C23964 + C23965) * C13621 +
            (C23013 + C23014) * C13723 + (C23015 + C23016) * C13622 +
            (C23017 + C23018) * C13724 + (C23019 + C23020) * C84558) *
               C84344) *
              C1177 -
          (((C81997 * C17344 + C84198 * C17500 + C82024 * C17343 +
             C84509 * C17499) *
                C84558 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C13724 +
            (C81997 * C5200 + C84198 * C5360 + C82024 * C5201 +
             C84509 * C5361) *
                C13622 +
            (C81997 * C5114 + C84198 * C5117 + C82024 * C5115 +
             C84509 * C5118) *
                C13723 +
            (C81997 * C4308 + C84198 * C4535 + C82024 * C4307 +
             C84509 * C4534) *
                C13621 +
            (C81997 * C4213 + C84198 * C4217 + C82024 * C4212 +
             C84509 * C4216) *
                C13722) *
               C84344 +
           ((C23020 + C23019) * C84558 + (C23018 + C23017) * C13724 +
            (C23016 + C23015) * C13622 + (C23014 + C23013) * C13723 +
            (C23965 + C23964) * C13621 + (C23963 + C23962) * C13722) *
               C84529) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C378 * C102 + C386 + C386 + C84246 * C379) * C6678 +
                      C408 * C6679 + C409 * C6680 + C410 * C84527) *
                         C84529 +
                     (C10374 + C10375 + C10376 + C10377) * C84344) *
                        C1177 -
                    (((C378 * C4215 + C4628 + C4628 + C84246 * C4615) * C84527 +
                      C4640 * C6680 + C4639 * C6679 + C6269 * C6678) *
                         C84344 +
                     (C10377 + C10376 + C10375 + C10374) * C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C13983 * C102 + C13987 + C13987 + C13621 * C379 +
                       C13984 * C723 + C13988 + C13988 + C13622 * C936 +
                       C13985 * C1681 + C13989 + C13989 + C84558 * C2093) *
                          C84509 +
                      (C14023 + C14024 + C14025) * C84198) *
                         C84529 +
                     ((C19229 + C19230 + C19231) * C84509 +
                      (C22153 + C22154 + C22155) * C84198) *
                         C84344) *
                        C1177 -
                    (((C13985 * C17255 + C17581 + C17581 + C84558 * C17576 +
                       C13984 * C5114 + C17582 + C17582 + C13622 * C5437 +
                       C13983 * C4213 + C17583 + C17583 + C13621 * C4613) *
                          C84198 +
                      (C19234 + C19233 + C19232) * C84509) *
                         C84344 +
                     ((C22155 + C22154 + C22153) * C84198 +
                      (C19231 + C19230 + C19229) * C84509) *
                         C84529) *
                        C1178) *
                   C84604 * C84605) /
                      (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C172 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C84246) *
               C6678 +
           ((C8897 + C8898) * C172 + (C9124 + C9125) * C84246) * C6679 +
           ((C8901 + C8902) * C172 + (C9126 + C9127) * C84246) * C6680 +
           ((C8905 + C8906) * C172 + (C9128 + C9129) * C84246) * C84527) *
              C1177 -
          (((C8871 * C4310 + C84344 * C4717 + C8870 * C1242 + C84529 * C1445) *
                C84246 +
            (C8871 * C4215 + C84344 * C4419 + C8870 * C1180 + C84529 * C1294) *
                C172) *
               C84527 +
           ((C8871 * C4309 + C84344 * C4716 + C8870 * C1243 + C84529 * C1446) *
                C84246 +
            (C8871 * C4214 + C84344 * C4418 + C8870 * C1181 + C84529 * C1295) *
                C172) *
               C6680 +
           ((C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C84246 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C172) *
               C6679 +
           ((C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C84246 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C172) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8870 * C102 + C84529 * C252 + C8871 * C1183 + C84344 * C1297) *
                C13722 +
            (C8870 * C173 + C84529 * C453 + C8871 * C1245 + C84344 * C1448) *
                C13621 +
            (C11976 + C11977) * C13723 + (C12302 + C12303) * C13622 +
            (C22895 + C22896) * C13724 + (C23224 + C23225) * C84558) *
               C84509 +
           ((C8897 + C8898) * C13722 + (C9124 + C9125) * C13621 +
            (C10999 + C11000) * C13723 + (C11329 + C11330) * C13622 +
            (C21941 + C21942) * C13724 + (C22258 + C22259) * C84558) *
               C84198) *
              C1177 -
          (((C8871 * C17344 + C84344 * C17658 + C8870 * C3544 +
             C84529 * C3885) *
                C84558 +
            (C8871 * C17255 + C84344 * C17422 + C8870 * C3442 +
             C84529 * C3629) *
                C13724 +
            (C8871 * C5200 + C84344 * C5520 + C8870 * C3545 + C84529 * C3886) *
                C13622 +
            (C8871 * C5114 + C84344 * C5280 + C8870 * C3445 + C84529 * C3632) *
                C13723 +
            (C8871 * C4308 + C84344 * C4715 + C8870 * C1244 + C84529 * C1447) *
                C13621 +
            (C8871 * C4213 + C84344 * C4417 + C8870 * C1182 + C84529 * C1296) *
                C13722) *
               C84198 +
           ((C8871 * C17343 + C84344 * C17657 + C8870 * C3546 +
             C84529 * C3887) *
                C84558 +
            (C8871 * C17254 + C84344 * C17421 + C8870 * C3443 +
             C84529 * C3630) *
                C13724 +
            (C8871 * C5201 + C84344 * C5521 + C8870 * C3547 + C84529 * C3888) *
                C13622 +
            (C8871 * C5115 + C84344 * C5281 + C8870 * C3446 + C84529 * C3633) *
                C13723 +
            (C8871 * C4307 + C84344 * C4714 + C8870 * C1245 + C84529 * C1448) *
                C13621 +
            (C8871 * C4212 + C84344 * C4416 + C8870 * C1183 + C84529 * C1297) *
                C13722) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C6685 * C102 + C6678 * C108 + C6687 * C103 + C6679 * C109 +
            C6689 * C104 + C6680 * C110 + C6691 * C105 + C84527 * C111) *
               C8870 +
           (C6685 * C252 + C6678 * C521 + C6687 * C253 + C6679 * C522 +
            C6689 * C254 + C6680 * C523 + C6691 * C255 + C84527 * C524) *
               C84529 +
           (C10300 + C10301 + C10302 + C10303) * C8871 +
           (C10518 + C10519 + C10520 + C10521) * C84344) *
              C84246 * C1177 -
          ((C6691 * C4419 + C84527 * C4813 + C6689 * C4418 + C6680 * C4812 +
            C6687 * C4417 + C6679 * C4811 + C6685 * C4416 + C6678 * C4810) *
               C84344 +
           (C6691 * C4215 + C84527 * C4219 + C6689 * C4214 + C6680 * C4218 +
            C6687 * C4213 + C6679 * C4217 + C6685 * C4212 + C6678 * C4216) *
               C8871 +
           (C10521 + C10520 + C10519 + C10518) * C84529 +
           (C10303 + C10302 + C10301 + C10300) * C8870) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C82024 * C102 + C84509 * C108 + C81997 * C103 + C84198 * C109) *
                C8870 +
            (C82024 * C252 + C84509 * C521 + C81997 * C253 + C84198 * C522) *
                C84529 +
            (C23962 + C23963) * C8871 + (C24264 + C24265) * C84344) *
               C13621 +
           ((C20623 + C20624) * C8870 + (C20853 + C20854) * C84529 +
            (C23013 + C23014) * C8871 + (C23332 + C23333) * C84344) *
               C13622 +
           ((C20627 + C20628) * C8870 + (C20855 + C20856) * C84529 +
            (C23017 + C23018) * C8871 + (C23334 + C23335) * C84344) *
               C84558) *
              C1177 -
          (((C81997 * C17422 + C84198 * C17734 + C82024 * C17421 +
             C84509 * C17733) *
                C84344 +
            (C81997 * C17255 + C84198 * C17257 + C82024 * C17254 +
             C84509 * C17256) *
                C8871 +
            (C23335 + C23334) * C84529 + (C23018 + C23017) * C8870) *
               C84558 +
           ((C81997 * C5280 + C84198 * C5597 + C82024 * C5281 +
             C84509 * C5598) *
                C84344 +
            (C81997 * C5114 + C84198 * C5117 + C82024 * C5115 +
             C84509 * C5118) *
                C8871 +
            (C23333 + C23332) * C84529 + (C23014 + C23013) * C8870) *
               C13622 +
           ((C81997 * C4417 + C84198 * C4811 + C82024 * C4416 +
             C84509 * C4810) *
                C84344 +
            (C81997 * C4213 + C84198 * C4217 + C82024 * C4212 +
             C84509 * C4216) *
                C8871 +
            (C24265 + C24264) * C84529 + (C23963 + C23962) * C8870) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C8870 +
            (C172 * C252 + C84246 * C569) * C84529 + C5975 * C8871 +
            C6525 * C84344) *
               C6678 +
           (C9262 + C9263 + C9264 + C9265) * C6679 +
           (C9266 + C9267 + C9268 + C9269) * C6680 +
           (C9270 + C9271 + C9272 + C9276) * C84527) *
              C1177 -
          (((C172 * C4419 + C84246 * C4891) * C84344 +
            (C172 * C4215 + C84246 * C4310) * C8871 + C9275 * C84529 +
            C8803 * C8870) *
               C84527 +
           (C4912 * C84344 + C4338 * C8871 + C4911 * C84529 + C4334 * C8870) *
               C6680 +
           (C4910 * C84344 + C4336 * C8871 + C4909 * C84529 + C4332 * C8870) *
               C6679 +
           (C6526 * C84344 + C5977 * C8871 + C6525 * C84529 + C5975 * C8870) *
               C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C8870 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84529 +
            (C18936 + C18937 + C18938) * C8871 +
            (C19481 + C19482 + C19483) * C84344) *
               C84509 +
           ((C13750 + C13751 + C13752) * C8870 +
            (C14275 + C14276 + C14277) * C84529 +
            (C21829 + C21830 + C21831) * C8871 +
            (C22462 + C22463 + C22464) * C84344) *
               C84198) *
              C1177 -
          (((C13724 * C17422 + C84558 * C17810 + C13723 * C5280 +
             C13622 * C5674 + C13722 * C4417 + C13621 * C4889) *
                C84344 +
            (C13724 * C17255 + C84558 * C17344 + C13723 * C5114 +
             C13622 * C5200 + C13722 * C4213 + C13621 * C4308) *
                C8871 +
            (C22464 + C22463 + C22462) * C84529 +
            (C21831 + C21830 + C21829) * C8870) *
               C84198 +
           ((C19486 + C19485 + C19484) * C84344 +
            (C18944 + C18943 + C18942) * C8871 +
            (C19483 + C19482 + C19481) * C84529 +
            (C18938 + C18937 + C18936) * C8870) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
            C9346 + C9346 + C84344 * C1589) *
               C84246 * C6678 +
           (C9379 + C9380) * C84246 * C6679 + (C9381 + C9382) * C84246 * C6680 +
           (C9383 + C9384) * C84246 * C84527) *
              C1177 -
          ((C9343 * C4215 + C10654 + C10654 + C84344 * C4996 + C9342 * C1180 +
            C10655 + C10655 + C84529 * C1586) *
               C84246 * C84527 +
           (C9343 * C4214 + C10656 + C10656 + C84344 * C4995 + C9342 * C1181 +
            C10657 + C10657 + C84529 * C1587) *
               C84246 * C6680 +
           (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
            C10659 + C10659 + C84529 * C1588) *
               C84246 * C6679 +
           (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
            C10661 + C10661 + C84529 * C1589) *
               C84246 * C6678) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9342 * C102 + C9345 + C9345 + C84529 * C638 + C9343 * C1183 +
             C9346 + C9346 + C84344 * C1589) *
                C13621 +
            (C12621 + C12622) * C13622 + (C23544 + C23545) * C84558) *
               C84509 +
           ((C9379 + C9380) * C13621 + (C11655 + C11656) * C13622 +
            (C22571 + C22572) * C84558) *
               C84198) *
              C1177 -
          (((C9343 * C17255 + C24462 + C24462 + C84344 * C17886 +
             C9342 * C3442 + C24463 + C24463 + C84529 * C4125) *
                C84558 +
            (C9343 * C5114 + C13541 + C13541 + C84344 * C5751 + C9342 * C3445 +
             C13542 + C13542 + C84529 * C4126) *
                C13622 +
            (C9343 * C4213 + C10658 + C10658 + C84344 * C4994 + C9342 * C1182 +
             C10659 + C10659 + C84529 * C1588) *
                C13621) *
               C84198 +
           ((C9343 * C17254 + C24464 + C24464 + C84344 * C17885 +
             C9342 * C3443 + C24465 + C24465 + C84529 * C4127) *
                C84558 +
            (C9343 * C5115 + C13543 + C13543 + C84344 * C5752 + C9342 * C3446 +
             C13544 + C13544 + C84529 * C4128) *
                C13622 +
            (C9343 * C4212 + C10660 + C10660 + C84344 * C4993 + C9342 * C1183 +
             C10661 + C10661 + C84529 * C1589) *
                C13621) *
               C84509) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C84603 * C84604 * C90 -
          (C100 * C107 + C126 + C126 + C85 * C119 + C98 * C106 + C127 + C127 +
           C84 * C118 + C96 * C105 + C128 + C128 + C83 * C117 + C94 * C104 +
           C129 + C129 + C82 * C116 + C92 * C103 + C130 + C130 + C81 * C115) *
              C84257 * C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C1675 * C723 + C1697 + C1697 + C1669 * C733 + C1677 * C722 + C1698 +
            C1698 + C1670 * C732 + C1679 * C721 + C1699 + C1699 +
            C84550 * C731) *
               C84257 * C84581 +
           (C1675 * C1681 + C1700 + C1700 + C1669 * C1689 + C1677 * C1682 +
            C1701 + C1701 + C1670 * C1690 + C1679 * C1683 + C1702 + C1702 +
            C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C1679 * C1684 + C1703 + C1703 + C84550 * C1692 + C1677 * C1683 +
            C1704 + C1704 + C1670 * C1691 + C1675 * C1682 + C1705 + C1705 +
            C1669 * C1690) *
               C84257 * C84558 +
           (C1679 * C720 + C1706 + C1706 + C84550 * C730 + C1677 * C721 +
            C1707 + C1707 + C1670 * C731 + C1675 * C722 + C1708 + C1708 +
            C1669 * C732) *
               C84257 * C84581 +
           (C1679 * C105 + C1709 + C1709 + C84550 * C117 + C1677 * C104 +
            C1710 + C1710 + C1670 * C116 + C1675 * C103 + C1711 + C1711 +
            C1669 * C115) *
               C84257 * C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C13624 * C723 + C13634 + C13634 + C84590 * C733 + C13626 * C722 +
            C13635 + C13635 + C84574 * C732 + C13628 * C721 + C13636 + C13636 +
            C84550 * C731) *
               C84257 * C13622 +
           (C13624 * C1681 + C13637 + C13637 + C84590 * C1689 + C13626 * C1682 +
            C13638 + C13638 + C84574 * C1690 + C13628 * C1683 + C13639 +
            C13639 + C84550 * C1691) *
               C84257 * C84558) *
              C84603 * C84604 * C90 -
          ((C13628 * C1684 + C13640 + C13640 + C84550 * C1692 + C13626 * C1683 +
            C13641 + C13641 + C84574 * C1691 + C13624 * C1682 + C13642 +
            C13642 + C84590 * C1690) *
               C84257 * C84558 +
           (C13628 * C720 + C13643 + C13643 + C84550 * C730 + C13626 * C721 +
            C13644 + C13644 + C84574 * C731 + C13624 * C722 + C13645 + C13645 +
            C84590 * C732) *
               C84257 * C13622 +
           (C13628 * C105 + C13646 + C13646 + C84550 * C117 + C13626 * C104 +
            C13647 + C13647 + C84574 * C116 + C13624 * C103 + C13648 + C13648 +
            C84590 * C115) *
               C84257 * C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           (C15866 * C723 + C15876 + C15876 + C84188 * C733) * C84257 * C15862 +
           (C15866 * C1681 + C15877 + C15877 + C84188 * C1689) * C84257 *
               C15863 +
           (C15866 * C2599 + C15878 + C15878 + C84188 * C2605) * C84257 *
               C15864 +
           (C15866 * C15868 + C15879 + C15879 + C84188 * C15872) * C84257 *
               C15865) *
              C84603 * C84604 * C90 -
          ((C15866 * C15869 + C15880 + C15880 + C84188 * C15873) * C84257 *
               C15865 +
           (C15866 * C2598 + C15881 + C15881 + C84188 * C2604) * C84257 *
               C15864 +
           (C15866 * C1682 + C15882 + C15882 + C84188 * C1690) * C84257 *
               C15863 +
           (C15866 * C722 + C15883 + C15883 + C84188 * C732) * C84257 * C15862 +
           (C15866 * C103 + C15884 + C15884 + C84188 * C115) * C84257 *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C84603 * C84604 * C90 -
          ((C172 * C113 + C84246 * C184) * C85 +
           (C172 * C107 + C84246 * C178) * C101 + C209 * C84 + C208 * C99 +
           C207 * C83 + C206 * C97 + C205 * C82 + C204 * C95 + C203 * C81 +
           C202 * C93) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C1787 * C1688 + C84558 * C1795 + C1786 * C725 + C84581 * C787 +
            C1785 * C111 + C84596 * C182) *
               C84550 +
           (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
            C1785 * C105 + C84596 * C176) *
               C1680 +
           (C1832 + C1831 + C1830) * C1670 + (C1829 + C1828 + C1827) * C1678 +
           (C1826 + C1825 + C1824) * C1669 + (C1823 + C1822 + C1821) * C1676) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13724 * C1688 + C84558 * C1795 + C13723 * C725 + C13622 * C787 +
            C13722 * C111 + C13621 * C182) *
               C84550 +
           (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
            C13722 * C105 + C13621 * C176) *
               C13629 +
           (C13761 + C13760 + C13759) * C84574 +
           (C13758 + C13757 + C13756) * C13627 +
           (C13755 + C13754 + C13753) * C84590 +
           (C13752 + C13751 + C13750) * C13625) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C84604 * C90 -
          ((C15930 * C15871 + C15865 * C15934 + C15929 * C2601 +
            C15864 * C2717 + C15928 * C1686 + C15863 * C1793 + C15927 * C727 +
            C15862 * C789 + C15926 * C109 + C15861 * C180) *
               C84188 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C15867) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C84603 * C84604 * C90 -
          ((C251 * C113 + C84257 * C263) * C85 +
           (C251 * C107 + C84257 * C257) * C101 + C288 * C84 + C287 * C99 +
           C286 * C83 + C285 * C97 + C284 * C82 + C283 * C95 + C282 * C81 +
           C281 * C93) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           ((C251 * C723 + C84257 * C837) * C1676 +
            (C251 * C728 + C84257 * C842) * C1669 + C1931 * C1678 +
            C1932 * C1670 + C1933 * C1680 + C1934 * C84550) *
               C84581 +
           ((C251 * C1681 + C84257 * C1906) * C1676 +
            (C251 * C1685 + C84257 * C1910) * C1669 + C1935 * C1678 +
            C1936 * C1670 + C1937 * C1680 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C1680 + C1938 * C1670 +
            C1937 * C1678 + C1936 * C1669 + C1935 * C1676) *
               C84558 +
           ((C251 * C725 + C84257 * C839) * C84550 +
            (C251 * C720 + C84257 * C834) * C1680 + C1934 * C1670 +
            C1933 * C1678 + C1932 * C1669 + C1931 * C1676) *
               C84581 +
           (C286 * C84550 + C285 * C1680 + C284 * C1670 + C283 * C1678 +
            C282 * C1669 + C281 * C1676) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C2816 * C13625 + C2817 * C84590 + C1931 * C13627 + C1932 * C84574 +
            C1933 * C13629 + C1934 * C84550) *
               C13622 +
           (C2818 * C13625 + C2819 * C84590 + C1935 * C13627 + C1936 * C84574 +
            C1937 * C13629 + C1938 * C84550) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C251 * C1688 + C84257 * C1913) * C84550 +
            (C251 * C1684 + C84257 * C1909) * C13629 + C1938 * C84574 +
            C1937 * C13627 + C1936 * C84590 + C1935 * C13625) *
               C84558 +
           (C6884 * C84550 + C6883 * C13629 + C1934 * C84574 + C1933 * C13627 +
            C1932 * C84590 + C1931 * C13625) *
               C13622 +
           (C286 * C84550 + C285 * C13629 + C284 * C84574 + C283 * C13627 +
            C282 * C84590 + C281 * C13625) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C2816 * C15867 + C2817 * C84188) * C15862 +
           (C2818 * C15867 + C2819 * C84188) * C15863 +
           ((C251 * C2599 + C84257 * C2795) * C15867 +
            (C251 * C2602 + C84257 * C2798) * C84188) *
               C15864 +
           ((C251 * C15868 + C84257 * C15977) * C15867 +
            (C251 * C15870 + C84257 * C15979) * C84188) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C251 * C15871 + C84257 * C15980) * C84188 +
            (C251 * C15869 + C84257 * C15978) * C15867) *
               C15865 +
           ((C251 * C2601 + C84257 * C2797) * C84188 +
            (C251 * C2598 + C84257 * C2794) * C15867) *
               C15864 +
           (C1936 * C84188 + C1935 * C15867) * C15863 +
           (C1932 * C84188 + C1931 * C15867) * C15862 +
           (C282 * C84188 + C281 * C15867) * C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C84603 * C84604 * C90 -
          ((C101 * C178 + C85 * C335 + C99 * C177 + C84 * C334 + C97 * C176 +
            C83 * C333 + C95 * C175 + C82 * C332 + C93 * C174 + C81 * C331) *
               C84246 +
           (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 + C97 * C105 +
            C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 + C81 * C109) *
               C172) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
            C1680 * C721 + C84550 * C726) *
               C1786 +
           (C1676 * C785 + C1669 * C889 + C1678 * C784 + C1670 * C888 +
            C1680 * C783 + C84550 * C887) *
               C84581 +
           (C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
            C1680 * C1683 + C84550 * C1687) *
               C1787 +
           (C1676 * C1788 + C1669 * C2012 + C1678 * C1789 + C1670 * C2013 +
            C1680 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C1680 * C1791 + C84550 * C2015 + C1678 * C1790 + C1670 * C2014 +
            C1676 * C1789 + C1669 * C2013) *
               C84558 +
           (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
            C1676 * C1682 + C1669 * C1686) *
               C1787 +
           (C1680 * C782 + C84550 * C886 + C1678 * C783 + C1670 * C887 +
            C1676 * C784 + C1669 * C888) *
               C84581 +
           (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
            C1676 * C722 + C1669 * C727) *
               C1786 +
           (C1680 * C176 + C84550 * C333 + C1678 * C175 + C1670 * C332 +
            C1676 * C174 + C1669 * C331) *
               C84596 +
           (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
            C1676 * C103 + C1669 * C109) *
               C1785) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
            C13629 * C721 + C84550 * C726) *
               C13723 +
           (C13625 * C785 + C84590 * C889 + C13627 * C784 + C84574 * C888 +
            C13629 * C783 + C84550 * C887) *
               C13622 +
           (C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
            C13629 * C1683 + C84550 * C1687) *
               C13724 +
           (C13625 * C1788 + C84590 * C2012 + C13627 * C1789 + C84574 * C2013 +
            C13629 * C1790 + C84550 * C2014) *
               C84558) *
              C84257 * C84603 * C84604 * C90 -
          ((C13629 * C1791 + C84550 * C2015 + C13627 * C1790 + C84574 * C2014 +
            C13625 * C1789 + C84590 * C2013) *
               C84558 +
           (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
            C13625 * C1682 + C84590 * C1686) *
               C13724 +
           (C13629 * C782 + C84550 * C886 + C13627 * C783 + C84574 * C887 +
            C13625 * C784 + C84590 * C888) *
               C13622 +
           (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
            C13625 * C722 + C84590 * C727) *
               C13723 +
           (C13629 * C176 + C84550 * C333 + C13627 * C175 + C84574 * C332 +
            C13625 * C174 + C84590 * C331) *
               C13621 +
           (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
            C13625 * C103 + C84590 * C109) *
               C13722) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 +
           (C15867 * C723 + C84188 * C728) * C15927 +
           (C15867 * C785 + C84188 * C889) * C15862 +
           (C15867 * C1681 + C84188 * C1685) * C15928 +
           (C15867 * C1788 + C84188 * C2012) * C15863 +
           (C15867 * C2599 + C84188 * C2602) * C15929 +
           (C15867 * C2715 + C84188 * C2899) * C15864 +
           (C15867 * C15868 + C84188 * C15870) * C15930 +
           (C15867 * C15931 + C84188 * C16023) * C15865) *
              C84257 * C84603 * C84604 * C90 -
          ((C15867 * C15932 + C84188 * C16024) * C15865 +
           (C15867 * C15869 + C84188 * C15871) * C15930 +
           (C15867 * C2714 + C84188 * C2898) * C15864 +
           (C15867 * C2598 + C84188 * C2601) * C15929 +
           (C15867 * C1789 + C84188 * C2013) * C15863 +
           (C15867 * C1682 + C84188 * C1686) * C15928 +
           (C15867 * C784 + C84188 * C888) * C15862 +
           (C15867 * C722 + C84188 * C727) * C15927 +
           (C15867 * C174 + C84188 * C331) * C15861 +
           (C15867 * C103 + C84188 * C109) * C15926) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C84603 * C84604 * C90 -
          ((C378 * C107 + C399 + C399 + C84246 * C384) * C85 + C411 * C84 +
           C410 * C83 + C409 * C82 + C408 * C81) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C2092 * C1684 + C2119 + C2119 + C84558 * C2096 + C2091 * C720 +
            C2120 + C2120 + C84581 * C933 + C2090 * C105 + C2121 + C2121 +
            C84596 * C382) *
               C84550 +
           (C2139 + C2138 + C2137) * C1670 + (C2136 + C2135 + C2134) * C1669) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C84604 * C90 -
          ((C13985 * C1684 + C14008 + C14008 + C84558 * C2096 + C13984 * C720 +
            C14009 + C14009 + C13622 * C933 + C13983 * C105 + C14010 + C14010 +
            C13621 * C382) *
               C84550 +
           (C14028 + C14027 + C14026) * C84574 +
           (C14025 + C14024 + C14023) * C84590) *
              C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C84604 * C90 -
          (C16071 * C15869 + C16080 + C16080 + C15865 * C16073 +
           C16070 * C2598 + C16081 + C16081 + C15864 * C3011 + C16069 * C1682 +
           C16082 + C16082 + C15863 * C2094 + C16068 * C722 + C16083 + C16083 +
           C15862 * C935 + C16067 * C103 + C16084 + C16084 + C15861 * C380) *
              C84188 * C84257 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C84603 * C84604 * C90 -
          (((C251 * C178 + C84257 * C458) * C84246 +
            (C251 * C107 + C84257 * C257) * C172) *
               C85 +
           (C479 + C469) * C84 + (C478 + C466) * C83 + (C477 + C463) * C82 +
           (C476 + C460) * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 +
            (C251 * C723 + C84257 * C837) * C1786 +
            (C251 * C785 + C84257 * C988) * C84581 +
            (C251 * C1681 + C84257 * C1906) * C1787 +
            (C251 * C1788 + C84257 * C2213) * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C1787 +
            (C251 * C782 + C84257 * C985) * C84581 +
            (C251 * C720 + C84257 * C834) * C1786 + C474 * C84596 +
            C285 * C1785) *
               C84550 +
           (C2241 + C2231 + C2240 + C2228 + C2227 + C2226) * C1670 +
           (C2239 + C2223 + C2238 + C2220 + C2219 + C2218) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C84604 * C90 -
          (((C251 * C1791 + C84257 * C2216) * C84558 +
            (C251 * C1684 + C84257 * C1909) * C13724 + C7138 * C13622 +
            C6883 * C13723 + C474 * C13621 + C285 * C13722) *
               C84550 +
           (C14114 + C14113 + C14112 + C14111 + C14110 + C14109) * C84574 +
           (C14108 + C14107 + C14106 + C14105 + C14104 + C14103) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 +
           (C251 * C2599 + C84257 * C2795) * C15929 +
           (C251 * C2715 + C84257 * C3098) * C15864 +
           (C251 * C15868 + C84257 * C15977) * C15930 +
           (C251 * C15931 + C84257 * C16126) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C251 * C15932 + C84257 * C16127) * C15865 +
           (C251 * C15869 + C84257 * C15978) * C15930 +
           (C251 * C2714 + C84257 * C3097) * C15864 +
           (C251 * C2598 + C84257 * C2794) * C15929 + C2235 * C15863 +
           C1935 * C15928 + C2234 * C15862 + C1931 * C15927 + C472 * C15861 +
           C281 * C15926) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C84603 * C84604 * C90 -
          ((C101 * C257 + C85 * C526 + C99 * C256 + C84 * C525 + C97 * C255 +
            C83 * C524 + C95 * C254 + C82 * C523 + C93 * C253 + C81 * C522) *
               C84257 +
           (C101 * C107 + C85 * C113 + C99 * C106 + C84 * C112 + C97 * C105 +
            C83 * C111 + C95 * C104 + C82 * C110 + C93 * C103 + C81 * C109) *
               C251) *
              C84246 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C1676 * C723 + C1669 * C728 + C1678 * C722 + C1670 * C727 +
             C1680 * C721 + C84550 * C726) *
                C251 +
            (C1676 * C837 + C1669 * C1035 + C1678 * C836 + C1670 * C1034 +
             C1680 * C835 + C84550 * C1033) *
                C84257) *
               C84581 +
           ((C1676 * C1681 + C1669 * C1685 + C1678 * C1682 + C1670 * C1686 +
             C1680 * C1683 + C84550 * C1687) *
                C251 +
            (C1676 * C1906 + C1669 * C2315 + C1678 * C1907 + C1670 * C2316 +
             C1680 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C1680 * C1909 + C84550 * C2318 + C1678 * C1908 + C1670 * C2317 +
             C1676 * C1907 + C1669 * C2316) *
                C84257 +
            (C1680 * C1684 + C84550 * C1688 + C1678 * C1683 + C1670 * C1687 +
             C1676 * C1682 + C1669 * C1686) *
                C251) *
               C84558 +
           ((C1680 * C834 + C84550 * C1032 + C1678 * C835 + C1670 * C1033 +
             C1676 * C836 + C1669 * C1034) *
                C84257 +
            (C1680 * C720 + C84550 * C725 + C1678 * C721 + C1670 * C726 +
             C1676 * C722 + C1669 * C727) *
                C251) *
               C84581 +
           ((C1680 * C255 + C84550 * C524 + C1678 * C254 + C1670 * C523 +
             C1676 * C253 + C1669 * C522) *
                C84257 +
            (C1680 * C105 + C84550 * C111 + C1678 * C104 + C1670 * C110 +
             C1676 * C103 + C1669 * C109) *
                C251) *
               C84596) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C13625 * C723 + C84590 * C728 + C13627 * C722 + C84574 * C727 +
             C13629 * C721 + C84550 * C726) *
                C251 +
            (C13625 * C837 + C84590 * C1035 + C13627 * C836 + C84574 * C1034 +
             C13629 * C835 + C84550 * C1033) *
                C84257) *
               C13622 +
           ((C13625 * C1681 + C84590 * C1685 + C13627 * C1682 + C84574 * C1686 +
             C13629 * C1683 + C84550 * C1687) *
                C251 +
            (C13625 * C1906 + C84590 * C2315 + C13627 * C1907 + C84574 * C2316 +
             C13629 * C1908 + C84550 * C2317) *
                C84257) *
               C84558) *
              C84603 * C84604 * C90 -
          (((C13629 * C1909 + C84550 * C2318 + C13627 * C1908 + C84574 * C2317 +
             C13625 * C1907 + C84590 * C2316) *
                C84257 +
            (C13629 * C1684 + C84550 * C1688 + C13627 * C1683 + C84574 * C1687 +
             C13625 * C1682 + C84590 * C1686) *
                C251) *
               C84558 +
           ((C13629 * C834 + C84550 * C1032 + C13627 * C835 + C84574 * C1033 +
             C13625 * C836 + C84590 * C1034) *
                C84257 +
            (C13629 * C720 + C84550 * C725 + C13627 * C721 + C84574 * C726 +
             C13625 * C722 + C84590 * C727) *
                C251) *
               C13622 +
           ((C13629 * C255 + C84550 * C524 + C13627 * C254 + C84574 * C523 +
             C13625 * C253 + C84590 * C522) *
                C84257 +
            (C13629 * C105 + C84550 * C111 + C13627 * C104 + C84574 * C110 +
             C13625 * C103 + C84590 * C109) *
                C251) *
               C13621) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           ((C15867 * C723 + C84188 * C728) * C251 +
            (C15867 * C837 + C84188 * C1035) * C84257) *
               C15862 +
           ((C15867 * C1681 + C84188 * C1685) * C251 +
            (C15867 * C1906 + C84188 * C2315) * C84257) *
               C15863 +
           ((C15867 * C2599 + C84188 * C2602) * C251 +
            (C15867 * C2795 + C84188 * C3181) * C84257) *
               C15864 +
           ((C15867 * C15868 + C84188 * C15870) * C251 +
            (C15867 * C15977 + C84188 * C16170) * C84257) *
               C15865) *
              C84603 * C84604 * C90 -
          (((C15867 * C15978 + C84188 * C16171) * C84257 +
            (C15867 * C15869 + C84188 * C15871) * C251) *
               C15865 +
           ((C15867 * C2794 + C84188 * C3180) * C84257 +
            (C15867 * C2598 + C84188 * C2601) * C251) *
               C15864 +
           ((C15867 * C1907 + C84188 * C2316) * C84257 +
            (C15867 * C1682 + C84188 * C1686) * C251) *
               C15863 +
           ((C15867 * C836 + C84188 * C1034) * C84257 +
            (C15867 * C722 + C84188 * C727) * C251) *
               C15862 +
           ((C15867 * C253 + C84188 * C522) * C84257 +
            (C15867 * C103 + C84188 * C109) * C251) *
               C15861) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezy[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C84603 * C84604 * C90 -
          (((C172 * C257 + C84246 * C574) * C84257 +
            (C172 * C107 + C84246 * C178) * C251) *
               C85 +
           (C595 + C585) * C84 + (C594 + C582) * C83 + (C593 + C579) * C82 +
           (C592 + C576) * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C1787 * C1909 + C84558 * C2396 + C1786 * C834 + C84581 * C1079 +
             C1785 * C255 + C84596 * C572) *
                C84257 +
            (C1787 * C1684 + C84558 * C1791 + C1786 * C720 + C84581 * C782 +
             C1785 * C105 + C84596 * C176) *
                C251) *
               C84550 +
           ((C2415 + C2414 + C2413) * C84257 + (C1829 + C1828 + C1827) * C251) *
               C1670 +
           ((C2412 + C2411 + C2410) * C84257 + (C1823 + C1822 + C1821) * C251) *
               C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C84604 * C90 -
          (((C13724 * C1909 + C84558 * C2396 + C13723 * C834 + C13622 * C1079 +
             C13722 * C255 + C13621 * C572) *
                C84257 +
            (C13724 * C1684 + C84558 * C1791 + C13723 * C720 + C13622 * C782 +
             C13722 * C105 + C13621 * C176) *
                C251) *
               C84550 +
           ((C14280 + C14279 + C14278) * C84257 +
            (C13758 + C13757 + C13756) * C251) *
               C84574 +
           ((C14277 + C14276 + C14275) * C84257 +
            (C13752 + C13751 + C13750) * C251) *
               C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C84604 * C90 -
          ((C15930 * C15978 + C15865 * C16215 + C15929 * C2794 +
            C15864 * C3275 + C15928 * C1907 + C15863 * C2394 + C15927 * C836 +
            C15862 * C1081 + C15926 * C253 + C15861 * C570) *
               C84257 +
           (C15930 * C15869 + C15865 * C15932 + C15929 * C2598 +
            C15864 * C2714 + C15928 * C1682 + C15863 * C1789 + C15927 * C722 +
            C15862 * C784 + C15926 * C103 + C15861 * C174) *
               C251) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C84603 * C84604 * C90 -
          ((C637 * C107 + C658 + C658 + C84257 * C643) * C84246 * C85 +
           C674 * C84 + C673 * C83 + C672 * C82 + C671 * C81) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84581 +
            (C637 * C1681 + C2494 + C2494 + C84257 * C2489) * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84581 +
            C669 * C84596) *
               C84550 +
           (C2523 + C2522 + C2501) * C1670 + (C2521 + C2520 + C2495) * C1669) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C84604 * C90 -
          (((C637 * C1684 + C2507 + C2507 + C84257 * C2492) * C84558 +
            C7365 * C13622 + C669 * C13621) *
               C84550 +
           (C14360 + C14359 + C14358) * C84574 +
           (C14357 + C14356 + C14355) * C84590) *
              C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 +
           (C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C15864 +
           (C637 * C15868 + C16261 + C16261 + C84257 * C16258) * C15865) *
              C84188 * C84603 * C84604 * C90 -
          ((C637 * C15869 + C16262 + C16262 + C84257 * C16259) * C15865 +
           (C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C15864 +
           C2517 * C15863 + C2516 * C15862 + C667 * C15861) *
              C84188 * C84603 * C84604 * C91)) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C84603 * C716 -
          (C100 * C719 + C735 + C735 + C85 * C729 + C98 * C720 + C736 + C736 +
           C84 * C730 + C96 * C721 + C737 + C737 + C83 * C731 + C94 * C722 +
           C738 + C738 + C82 * C732 + C92 * C723 + C739 + C739 + C81 * C733) *
              C84257 * C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C2634 + C2635 + C2636) * C84257 * C84581 +
           (C2637 + C2638 + C2639) * C84257 * C84558) *
              C84603 * C716 -
          ((C1679 * C2597 + C2619 + C2619 + C84550 * C2603 + C1677 * C2598 +
            C2620 + C2620 + C1670 * C2604 + C1675 * C2599 + C2621 + C2621 +
            C1669 * C2605) *
               C84257 * C84558 +
           (C2639 + C2638 + C2637) * C84257 * C84581 +
           (C2636 + C2635 + C2634) * C84257 * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C84603 * C716 -
          ((C13628 * C2597 + C14447 + C14447 + C84550 * C2603 + C13626 * C2598 +
            C14448 + C14448 + C84574 * C2604 + C13624 * C2599 + C14449 +
            C14449 + C84590 * C2605) *
               C84257 * C84558 +
           (C14467 + C14466 + C14465) * C84257 * C13622 +
           (C14464 + C14463 + C14462) * C84257 * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C84603 * C716 -
          ((C15866 * C16304 + C16316 + C16316 + C84188 * C16306) * C84257 *
               C15865 +
           C16332 * C15864 + C16331 * C15863 + C16330 * C15862 +
           C16329 * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C84603 * C716 -
          ((C172 * C724 + C84246 * C786) * C85 +
           (C172 * C719 + C84246 * C781) * C101 +
           (C172 * C725 + C84246 * C787) * C84 +
           (C172 * C720 + C84246 * C782) * C99 +
           (C172 * C726 + C84246 * C788) * C83 +
           (C172 * C721 + C84246 * C783) * C97 +
           (C172 * C727 + C84246 * C789) * C82 +
           (C172 * C722 + C84246 * C784) * C95 +
           (C172 * C728 + C84246 * C790) * C81 +
           (C172 * C723 + C84246 * C785) * C93) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C84603 * C716 -
          ((C1787 * C2600 + C84558 * C2716 + C1786 * C1687 + C84581 * C1794 +
            C1785 * C726 + C84596 * C788) *
               C84550 +
           (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 + C84581 * C1790 +
            C1785 * C721 + C84596 * C783) *
               C1680 +
           (C1787 * C2601 + C84558 * C2717 + C1786 * C1686 + C84581 * C1793 +
            C1785 * C727 + C84596 * C789) *
               C1670 +
           (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
            C1785 * C722 + C84596 * C784) *
               C1678 +
           (C1787 * C2602 + C84558 * C2718 + C1786 * C1685 + C84581 * C1792 +
            C1785 * C728 + C84596 * C790) *
               C1669 +
           (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
            C1785 * C723 + C84596 * C785) *
               C1676) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C84603 * C716 -
          ((C13724 * C2600 + C84558 * C2716 + C13723 * C1687 + C13622 * C1794 +
            C13722 * C726 + C13621 * C788) *
               C84550 +
           (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
            C13722 * C721 + C13621 * C783) *
               C13629 +
           (C13724 * C2601 + C84558 * C2717 + C13723 * C1686 + C13622 * C1793 +
            C13722 * C727 + C13621 * C789) *
               C84574 +
           (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
            C13722 * C722 + C13621 * C784) *
               C13627 +
           (C13724 * C2602 + C84558 * C2718 + C13723 * C1685 + C13622 * C1792 +
            C13722 * C728 + C13621 * C790) *
               C84590 +
           (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
            C13722 * C723 + C13621 * C785) *
               C13625) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C84603 * C716 -
          ((C15930 * C16305 + C15865 * C16375 + C15929 * C15870 +
            C15864 * C15933 + C15928 * C2602 + C15863 * C2718 + C15927 * C1685 +
            C15862 * C1792 + C15926 * C728 + C15861 * C790) *
               C84188 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C15867) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C84603 * C716 -
          ((C251 * C724 + C84257 * C838) * C85 +
           (C251 * C719 + C84257 * C833) * C101 +
           (C251 * C725 + C84257 * C839) * C84 +
           (C251 * C720 + C84257 * C834) * C99 +
           (C251 * C726 + C84257 * C840) * C83 +
           (C251 * C721 + C84257 * C835) * C97 +
           (C251 * C727 + C84257 * C841) * C82 +
           (C251 * C722 + C84257 * C836) * C95 +
           (C251 * C728 + C84257 * C842) * C81 +
           (C251 * C723 + C84257 * C837) * C93) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
           (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C1680 +
            (C251 * C2601 + C84257 * C2797) * C1670 +
            (C251 * C2598 + C84257 * C2794) * C1678 +
            (C251 * C2602 + C84257 * C2798) * C1669 +
            (C251 * C2599 + C84257 * C2795) * C1676) *
               C84558 +
           (C2815 + C2814 + C2813 + C2812 + C2823 + C2822) * C84581 +
           (C2807 + C2806 + C2805 + C2804 + C2821 + C2820) * C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C84603 * C716 -
          (((C251 * C2600 + C84257 * C2796) * C84550 +
            (C251 * C2597 + C84257 * C2793) * C13629 +
            (C251 * C2601 + C84257 * C2797) * C84574 +
            (C251 * C2598 + C84257 * C2794) * C13627 +
            (C251 * C2602 + C84257 * C2798) * C84590 +
            (C251 * C2599 + C84257 * C2795) * C13625) *
               C84558 +
           (C14627 + C14626 + C14625 + C14624 + C14623 + C14622) * C13622 +
           (C14621 + C14620 + C14619 + C14618 + C14617 + C14616) * C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C84603 * C716 -
          (((C251 * C16305 + C84257 * C16419) * C84188 +
            (C251 * C16304 + C84257 * C16418) * C15867) *
               C15865 +
           (C16440 + C16439) * C15864 + (C16438 + C16437) * C15863 +
           (C16424 + C16423) * C15862 + (C16422 + C16421) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C84603 * C716 -
          ((C101 * C781 + C85 * C885 + C99 * C782 + C84 * C886 + C97 * C783 +
            C83 * C887 + C95 * C784 + C82 * C888 + C93 * C785 + C81 * C889) *
               C84246 +
           (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 + C97 * C721 +
            C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 + C81 * C728) *
               C172) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C2925 + C2926 + C2927) * C1786 + (C2928 + C2929 + C2930) * C84581 +
           (C2931 + C2932 + C2933) * C1787 + (C2934 + C2935 + C2936) * C84558) *
              C84257 * C84603 * C716 -
          ((C1680 * C2713 + C84550 * C2897 + C1678 * C2714 + C1670 * C2898 +
            C1676 * C2715 + C1669 * C2899) *
               C84558 +
           (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
            C1676 * C2599 + C1669 * C2602) *
               C1787 +
           (C2936 + C2935 + C2934) * C84581 + (C2933 + C2932 + C2931) * C1786 +
           (C2930 + C2929 + C2928) * C84596 + (C2927 + C2926 + C2925) * C1785) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C84603 * C716 -
          ((C13629 * C2713 + C84550 * C2897 + C13627 * C2714 + C84574 * C2898 +
            C13625 * C2715 + C84590 * C2899) *
               C84558 +
           (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
            C13625 * C2599 + C84590 * C2602) *
               C13724 +
           (C14737 + C14736 + C14735) * C13622 +
           (C14734 + C14733 + C14732) * C13723 +
           (C14731 + C14730 + C14729) * C13621 +
           (C14728 + C14727 + C14726) * C13722) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C84603 * C716 -
          ((C15867 * C16374 + C84188 * C16482) * C15865 +
           (C15867 * C16304 + C84188 * C16305) * C15930 + C16507 * C15864 +
           C16506 * C15929 + C16505 * C15863 + C16504 * C15928 +
           C16503 * C15862 + C16502 * C15927 + C16501 * C15861 +
           C16500 * C15926) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C84603 * C716 -
          ((C378 * C719 + C938 + C938 + C84246 * C932) * C85 +
           (C378 * C720 + C939 + C939 + C84246 * C933) * C84 +
           (C378 * C721 + C940 + C940 + C84246 * C934) * C83 +
           (C378 * C722 + C941 + C941 + C84246 * C935) * C82 +
           (C378 * C723 + C942 + C942 + C84246 * C936) * C81) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C84603 * C716 -
          ((C2092 * C2597 + C3014 + C3014 + C84558 * C3010 + C2091 * C1683 +
            C3015 + C3015 + C84581 * C2095 + C2090 * C721 + C3016 + C3016 +
            C84596 * C934) *
               C84550 +
           (C2092 * C2598 + C3017 + C3017 + C84558 * C3011 + C2091 * C1682 +
            C3018 + C3018 + C84581 * C2094 + C2090 * C722 + C3019 + C3019 +
            C84596 * C935) *
               C1670 +
           (C2092 * C2599 + C3020 + C3020 + C84558 * C3012 + C2091 * C1681 +
            C3021 + C3021 + C84581 * C2093 + C2090 * C723 + C3022 + C3022 +
            C84596 * C936) *
               C1669) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C84603 * C716 -
          ((C13985 * C2597 + C14812 + C14812 + C84558 * C3010 + C13984 * C1683 +
            C14813 + C14813 + C13622 * C2095 + C13983 * C721 + C14814 + C14814 +
            C13621 * C934) *
               C84550 +
           (C13985 * C2598 + C14815 + C14815 + C84558 * C3011 + C13984 * C1682 +
            C14816 + C14816 + C13622 * C2094 + C13983 * C722 + C14817 + C14817 +
            C13621 * C935) *
               C84574 +
           (C13985 * C2599 + C14818 + C14818 + C84558 * C3012 + C13984 * C1681 +
            C14819 + C14819 + C13622 * C2093 + C13983 * C723 + C14820 + C14820 +
            C13621 * C936) *
               C84590) *
              C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C84603 * C716 -
          (C16071 * C16304 + C16551 + C16551 + C15865 * C16549 +
           C16070 * C15868 + C16552 + C16552 + C15864 * C16072 +
           C16069 * C2599 + C16553 + C16553 + C15863 * C3012 + C16068 * C1681 +
           C16554 + C16554 + C15862 * C2093 + C16067 * C723 + C16555 + C16555 +
           C15861 * C936) *
              C84188 * C84257 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C84603 * C716 -
          (((C251 * C781 + C84257 * C984) * C84246 +
            (C251 * C719 + C84257 * C833) * C172) *
               C85 +
           ((C251 * C782 + C84257 * C985) * C84246 +
            (C251 * C720 + C84257 * C834) * C172) *
               C84 +
           ((C251 * C783 + C84257 * C986) * C84246 +
            (C251 * C721 + C84257 * C835) * C172) *
               C83 +
           ((C251 * C784 + C84257 * C987) * C84246 +
            (C251 * C722 + C84257 * C836) * C172) *
               C82 +
           ((C251 * C785 + C84257 * C988) * C84246 +
            (C251 * C723 + C84257 * C837) * C172) *
               C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
            C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C1787 + C2237 * C84581 +
            C1937 * C1786 + C2236 * C84596 + C1933 * C1785) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C1787 + C2235 * C84581 +
            C1935 * C1786 + C2234 * C84596 + C1931 * C1785) *
               C1670 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C1787 + C3105 * C84581 +
            C2818 * C1786 + C3104 * C84596 + C2816 * C1785) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C84603 * C716 -
          (((C251 * C2713 + C84257 * C3096) * C84558 +
            (C251 * C2597 + C84257 * C2793) * C13724 + C2237 * C13622 +
            C1937 * C13723 + C2236 * C13621 + C1933 * C13722) *
               C84550 +
           ((C251 * C2714 + C84257 * C3097) * C84558 +
            (C251 * C2598 + C84257 * C2794) * C13724 + C2235 * C13622 +
            C1935 * C13723 + C2234 * C13621 + C1931 * C13722) *
               C84574 +
           ((C251 * C2715 + C84257 * C3098) * C84558 +
            (C251 * C2599 + C84257 * C2795) * C13724 + C3105 * C13622 +
            C2818 * C13723 + C3104 * C13621 + C2816 * C13722) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C84603 * C716 -
          ((C251 * C16374 + C84257 * C16597) * C15865 +
           (C251 * C16304 + C84257 * C16418) * C15930 + C16604 * C15864 +
           C16435 * C15929 + C16603 * C15863 + C16433 * C15928 +
           C3105 * C15862 + C2818 * C15927 + C3104 * C15861 + C2816 * C15926) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C84603 * C716 -
          ((C101 * C833 + C85 * C1031 + C99 * C834 + C84 * C1032 + C97 * C835 +
            C83 * C1033 + C95 * C836 + C82 * C1034 + C93 * C837 + C81 * C1035) *
               C84257 +
           (C101 * C719 + C85 * C724 + C99 * C720 + C84 * C725 + C97 * C721 +
            C83 * C726 + C95 * C722 + C82 * C727 + C93 * C723 + C81 * C728) *
               C251) *
              C84246 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C2925 + C2926 + C2927) * C251 + (C3195 + C3196 + C3197) * C84257) *
               C84581 +
           ((C2931 + C2932 + C2933) * C251 + (C3198 + C3199 + C3200) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C1680 * C2793 + C84550 * C3179 + C1678 * C2794 + C1670 * C3180 +
             C1676 * C2795 + C1669 * C3181) *
                C84257 +
            (C1680 * C2597 + C84550 * C2600 + C1678 * C2598 + C1670 * C2601 +
             C1676 * C2599 + C1669 * C2602) *
                C251) *
               C84558 +
           ((C3200 + C3199 + C3198) * C84257 + (C2933 + C2932 + C2931) * C251) *
               C84581 +
           ((C3197 + C3196 + C3195) * C84257 + (C2927 + C2926 + C2925) * C251) *
               C84596) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C84603 * C716 -
          (((C13629 * C2793 + C84550 * C3179 + C13627 * C2794 + C84574 * C3180 +
             C13625 * C2795 + C84590 * C3181) *
                C84257 +
            (C13629 * C2597 + C84550 * C2600 + C13627 * C2598 + C84574 * C2601 +
             C13625 * C2599 + C84590 * C2602) *
                C251) *
               C84558 +
           ((C14986 + C14985 + C14984) * C84257 +
            (C14734 + C14733 + C14732) * C251) *
               C13622 +
           ((C14983 + C14982 + C14981) * C84257 +
            (C14728 + C14727 + C14726) * C251) *
               C13621) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C84603 * C716 -
          (((C15867 * C16418 + C84188 * C16646) * C84257 +
            (C15867 * C16304 + C84188 * C16305) * C251) *
               C15865 +
           (C16667 + C16657) * C15864 + (C16666 + C16654) * C15863 +
           (C16665 + C16651) * C15862 + (C16664 + C16648) * C15861) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C84603 * C716 -
          (((C172 * C833 + C84246 * C1078) * C84257 +
            (C172 * C719 + C84246 * C781) * C251) *
               C85 +
           ((C172 * C834 + C84246 * C1079) * C84257 +
            (C172 * C720 + C84246 * C782) * C251) *
               C84 +
           ((C172 * C835 + C84246 * C1080) * C84257 +
            (C172 * C721 + C84246 * C783) * C251) *
               C83 +
           ((C172 * C836 + C84246 * C1081) * C84257 +
            (C172 * C722 + C84246 * C784) * C251) *
               C82 +
           ((C172 * C837 + C84246 * C1082) * C84257 +
            (C172 * C723 + C84246 * C785) * C251) *
               C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C1787 * C2793 + C84558 * C3274 + C1786 * C1908 + C84581 * C2395 +
             C1785 * C835 + C84596 * C1080) *
                C84257 +
            (C1787 * C2597 + C84558 * C2713 + C1786 * C1683 + C84581 * C1790 +
             C1785 * C721 + C84596 * C783) *
                C251) *
               C84550 +
           ((C1787 * C2794 + C84558 * C3275 + C1786 * C1907 + C84581 * C2394 +
             C1785 * C836 + C84596 * C1081) *
                C84257 +
            (C1787 * C2598 + C84558 * C2714 + C1786 * C1682 + C84581 * C1789 +
             C1785 * C722 + C84596 * C784) *
                C251) *
               C1670 +
           ((C1787 * C2795 + C84558 * C3276 + C1786 * C1906 + C84581 * C2393 +
             C1785 * C837 + C84596 * C1082) *
                C84257 +
            (C1787 * C2599 + C84558 * C2715 + C1786 * C1681 + C84581 * C1788 +
             C1785 * C723 + C84596 * C785) *
                C251) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C84603 * C716 -
          (((C13724 * C2793 + C84558 * C3274 + C13723 * C1908 + C13622 * C2395 +
             C13722 * C835 + C13621 * C1080) *
                C84257 +
            (C13724 * C2597 + C84558 * C2713 + C13723 * C1683 + C13622 * C1790 +
             C13722 * C721 + C13621 * C783) *
                C251) *
               C84550 +
           ((C13724 * C2794 + C84558 * C3275 + C13723 * C1907 + C13622 * C2394 +
             C13722 * C836 + C13621 * C1081) *
                C84257 +
            (C13724 * C2598 + C84558 * C2714 + C13723 * C1682 + C13622 * C1789 +
             C13722 * C722 + C13621 * C784) *
                C251) *
               C84574 +
           ((C13724 * C2795 + C84558 * C3276 + C13723 * C1906 + C13622 * C2393 +
             C13722 * C837 + C13621 * C1082) *
                C84257 +
            (C13724 * C2599 + C84558 * C2715 + C13723 * C1681 + C13622 * C1788 +
             C13722 * C723 + C13621 * C785) *
                C251) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C84603 * C716 -
          ((C15930 * C16418 + C15865 * C16709 + C15929 * C15977 +
            C15864 * C16214 + C15928 * C2795 + C15863 * C3276 + C15927 * C1906 +
            C15862 * C2393 + C15926 * C837 + C15861 * C1082) *
               C84257 +
           (C15930 * C16304 + C15865 * C16374 + C15929 * C15868 +
            C15864 * C15931 + C15928 * C2599 + C15863 * C2715 + C15927 * C1681 +
            C15862 * C1788 + C15926 * C723 + C15861 * C785) *
               C251) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C84603 * C716 -
          ((C637 * C719 + C1131 + C1131 + C84257 * C1125) * C84246 * C85 +
           (C637 * C720 + C1132 + C1132 + C84257 * C1126) * C84246 * C84 +
           (C637 * C721 + C1133 + C1133 + C84257 * C1127) * C84246 * C83 +
           (C637 * C722 + C1134 + C1134 + C84257 * C1128) * C84246 * C82 +
           (C637 * C723 + C1135 + C1135 + C84257 * C1129) * C84246 * C81) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            C3366 * C84581 + C3367 * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C84581 + C2518 * C84596) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C84581 + C2516 * C84596) *
               C1670 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C84581 + C3366 * C84596) *
               C1669) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C84603 * C716 -
          (((C637 * C2597 + C3359 + C3359 + C84257 * C3351) * C84558 +
            C2519 * C13622 + C2518 * C13621) *
               C84550 +
           ((C637 * C2598 + C3360 + C3360 + C84257 * C3352) * C84558 +
            C2517 * C13622 + C2516 * C13621) *
               C84574 +
           ((C637 * C2599 + C3361 + C3361 + C84257 * C3353) * C84558 +
            C3367 * C13622 + C3366 * C13621) *
               C84590) *
              C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C84603 * C716 -
          ((C637 * C16304 + C16758 + C16758 + C84257 * C16752) * C15865 +
           C16764 * C15864 + C16763 * C15863 + C3367 * C15862 +
           C3366 * C15861) *
              C84188 * C84603 * C717) *
         C84605) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C92 * C102 + C121 + C121 + C81 * C114 + C94 * C103 + C122 + C122 +
           C82 * C115 + C96 * C104 + C123 + C123 + C83 * C116 + C98 * C105 +
           C124 + C124 + C84 * C117 + C100 * C106 + C125 + C125 + C85 * C118) *
              C84257 * C84246 * C1177 -
          (C100 * C1179 + C1195 + C1195 + C85 * C1189 + C98 * C1180 + C1196 +
           C1196 + C84 * C1190 + C96 * C1181 + C1197 + C1197 + C83 * C1191 +
           C94 * C1182 + C1198 + C1198 + C82 * C1192 + C92 * C1183 + C1199 +
           C1199 + C81 * C1193) *
              C84257 * C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1675 * C102 + C1694 + C1694 + C1669 * C114 + C1677 * C103 + C1695 +
            C1695 + C1670 * C115 + C1679 * C104 + C1696 + C1696 +
            C84550 * C116) *
               C84257 * C84596 +
           (C2634 + C2635 + C2636) * C84257 * C84581 +
           (C2637 + C2638 + C2639) * C84257 * C84558) *
              C1177 -
          ((C1679 * C3441 + C3460 + C3460 + C84550 * C3453 + C1677 * C3442 +
            C3461 + C3461 + C1670 * C3454 + C1675 * C3443 + C3462 + C3462 +
            C1669 * C3455) *
               C84257 * C84558 +
           (C1679 * C3444 + C3463 + C3463 + C84550 * C3456 + C1677 * C3445 +
            C3464 + C3464 + C1670 * C3457 + C1675 * C3446 + C3465 + C3465 +
            C1669 * C3458) *
               C84257 * C84581 +
           (C1679 * C1181 + C3466 + C3466 + C84550 * C1191 + C1677 * C1182 +
            C3467 + C3467 + C1670 * C1192 + C1675 * C1183 + C3468 + C3468 +
            C1669 * C1193) *
               C84257 * C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13624 * C102 + C13631 + C13631 + C84590 * C114 + C13626 * C103 +
            C13632 + C13632 + C84574 * C115 + C13628 * C104 + C13633 + C13633 +
            C84550 * C116) *
               C84257 * C13621 +
           (C14462 + C14463 + C14464) * C84257 * C13622 +
           (C14465 + C14466 + C14467) * C84257 * C84558) *
              C1177 -
          ((C13628 * C3441 + C15209 + C15209 + C84550 * C3453 + C13626 * C3442 +
            C15210 + C15210 + C84574 * C3454 + C13624 * C3443 + C15211 +
            C15211 + C84590 * C3455) *
               C84257 * C84558 +
           (C13628 * C3444 + C15212 + C15212 + C84550 * C3456 + C13626 * C3445 +
            C15213 + C15213 + C84574 * C3457 + C13624 * C3446 + C15214 +
            C15214 + C84590 * C3458) *
               C84257 * C13622 +
           (C13628 * C1181 + C15215 + C15215 + C84550 * C1191 + C13626 * C1182 +
            C15216 + C15216 + C84574 * C1192 + C13624 * C1183 + C15217 +
            C15217 + C84590 * C1193) *
               C84257 * C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15866 * C102 + C15875 + C15875 + C84188 * C114) * C84257 * C15861 +
           C16329 * C15862 + C16330 * C15863 + C16331 * C15864 +
           C16332 * C15865) *
              C1177 -
          ((C15866 * C16806 + C16813 + C16813 + C84188 * C16810) * C84257 *
               C15865 +
           (C15866 * C16807 + C16814 + C16814 + C84188 * C16811) * C84257 *
               C15864 +
           (C15866 * C3443 + C16815 + C16815 + C84188 * C3455) * C84257 *
               C15863 +
           (C15866 * C3446 + C16816 + C16816 + C84188 * C3458) * C84257 *
               C15862 +
           (C15866 * C1183 + C16817 + C16817 + C84188 * C1193) * C84257 *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C172 * C102 + C84246 * C173) * C93 +
           (C172 * C108 + C84246 * C179) * C81 + C202 * C95 + C203 * C82 +
           C204 * C97 + C205 * C83 + C206 * C99 + C207 * C84 + C208 * C101 +
           C209 * C85) *
              C84257 * C1177 -
          ((C172 * C1184 + C84246 * C1246) * C85 +
           (C172 * C1179 + C84246 * C1241) * C101 +
           (C172 * C1185 + C84246 * C1247) * C84 +
           (C172 * C1180 + C84246 * C1242) * C99 +
           (C172 * C1186 + C84246 * C1248) * C83 +
           (C172 * C1181 + C84246 * C1243) * C97 +
           (C172 * C1187 + C84246 * C1249) * C82 +
           (C172 * C1182 + C84246 * C1244) * C95 +
           (C172 * C1188 + C84246 * C1250) * C81 +
           (C172 * C1183 + C84246 * C1245) * C93) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
            C1787 * C1681 + C84558 * C1788) *
               C1676 +
           (C1785 * C108 + C84596 * C179 + C1786 * C728 + C84581 * C790 +
            C1787 * C1685 + C84558 * C1792) *
               C1669 +
           (C1821 + C1822 + C1823) * C1678 + (C1824 + C1825 + C1826) * C1670 +
           (C1827 + C1828 + C1829) * C1680 + (C1830 + C1831 + C1832) * C84550) *
              C84257 * C1177 -
          ((C1787 * C3447 + C84558 * C3548 + C1786 * C3450 + C84581 * C3549 +
            C1785 * C1186 + C84596 * C1248) *
               C84550 +
           (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
            C1785 * C1181 + C84596 * C1243) *
               C1680 +
           (C1787 * C3448 + C84558 * C3550 + C1786 * C3451 + C84581 * C3551 +
            C1785 * C1187 + C84596 * C1249) *
               C1670 +
           (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
            C1785 * C1182 + C84596 * C1244) *
               C1678 +
           (C1787 * C3449 + C84558 * C3552 + C1786 * C3452 + C84581 * C3553 +
            C1785 * C1188 + C84596 * C1250) *
               C1669 +
           (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 + C84581 * C3547 +
            C1785 * C1183 + C84596 * C1245) *
               C1676) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
            C13724 * C1681 + C84558 * C1788) *
               C13625 +
           (C13722 * C108 + C13621 * C179 + C13723 * C728 + C13622 * C790 +
            C13724 * C1685 + C84558 * C1792) *
               C84590 +
           (C13750 + C13751 + C13752) * C13627 +
           (C13753 + C13754 + C13755) * C84574 +
           (C13756 + C13757 + C13758) * C13629 +
           (C13759 + C13760 + C13761) * C84550) *
              C84257 * C1177 -
          ((C13724 * C3447 + C84558 * C3548 + C13723 * C3450 + C13622 * C3549 +
            C13722 * C1186 + C13621 * C1248) *
               C84550 +
           (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
            C13722 * C1181 + C13621 * C1243) *
               C13629 +
           (C13724 * C3448 + C84558 * C3550 + C13723 * C3451 + C13622 * C3551 +
            C13722 * C1187 + C13621 * C1249) *
               C84574 +
           (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
            C13722 * C1182 + C13621 * C1244) *
               C13627 +
           (C13724 * C3449 + C84558 * C3552 + C13723 * C3452 + C13622 * C3553 +
            C13722 * C1188 + C13621 * C1250) *
               C84590 +
           (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
            C13722 * C1183 + C13621 * C1245) *
               C13625) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C15867 +
           (C15926 * C108 + C15861 * C179 + C15927 * C728 + C15862 * C790 +
            C15928 * C1685 + C15863 * C1792 + C15929 * C2602 + C15864 * C2718 +
            C15930 * C15870 + C15865 * C15933) *
               C84188) *
              C84257 * C1177 -
          ((C15930 * C16808 + C15865 * C16861 + C15929 * C16809 +
            C15864 * C16862 + C15928 * C3449 + C15863 * C3552 + C15927 * C3452 +
            C15862 * C3553 + C15926 * C1188 + C15861 * C1250) *
               C84188 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C15867) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C93 +
           (C251 * C108 + C84257 * C258) * C81 + C281 * C95 + C282 * C82 +
           C283 * C97 + C284 * C83 + C285 * C99 + C286 * C84 + C287 * C101 +
           C288 * C85) *
              C84246 * C1177 -
          ((C251 * C1184 + C84257 * C1298) * C85 +
           (C251 * C1179 + C84257 * C1293) * C101 +
           (C251 * C1185 + C84257 * C1299) * C84 +
           (C251 * C1180 + C84257 * C1294) * C99 +
           (C251 * C1186 + C84257 * C1300) * C83 +
           (C251 * C1181 + C84257 * C1295) * C97 +
           (C251 * C1187 + C84257 * C1301) * C82 +
           (C251 * C1182 + C84257 * C1296) * C95 +
           (C251 * C1188 + C84257 * C1302) * C81 +
           (C251 * C1183 + C84257 * C1297) * C93) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1676 +
            (C251 * C108 + C84257 * C258) * C1669 + C281 * C1678 +
            C282 * C1670 + C283 * C1680 + C284 * C84550) *
               C84596 +
           (C2820 + C2821 + C2804 + C2805 + C2806 + C2807) * C84581 +
           (C2822 + C2823 + C2812 + C2813 + C2814 + C2815) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C1680 +
            (C251 * C3448 + C84257 * C3635) * C1670 +
            (C251 * C3442 + C84257 * C3629) * C1678 +
            (C251 * C3449 + C84257 * C3636) * C1669 +
            (C251 * C3443 + C84257 * C3630) * C1676) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C1680 +
            (C251 * C3451 + C84257 * C3638) * C1670 +
            (C251 * C3445 + C84257 * C3632) * C1678 +
            (C251 * C3452 + C84257 * C3639) * C1669 +
            (C251 * C3446 + C84257 * C3633) * C1676) *
               C84581 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C1680 +
            (C251 * C1187 + C84257 * C1301) * C1670 +
            (C251 * C1182 + C84257 * C1296) * C1678 +
            (C251 * C1188 + C84257 * C1302) * C1669 +
            (C251 * C1183 + C84257 * C1297) * C1676) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13625 +
            (C251 * C108 + C84257 * C258) * C84590 + C281 * C13627 +
            C282 * C84574 + C283 * C13629 + C284 * C84550) *
               C13621 +
           (C14616 + C14617 + C14618 + C14619 + C14620 + C14621) * C13622 +
           (C14622 + C14623 + C14624 + C14625 + C14626 + C14627) * C84558) *
              C1177 -
          (((C251 * C3447 + C84257 * C3634) * C84550 +
            (C251 * C3441 + C84257 * C3628) * C13629 +
            (C251 * C3448 + C84257 * C3635) * C84574 +
            (C251 * C3442 + C84257 * C3629) * C13627 +
            (C251 * C3449 + C84257 * C3636) * C84590 +
            (C251 * C3443 + C84257 * C3630) * C13625) *
               C84558 +
           ((C251 * C3450 + C84257 * C3637) * C84550 +
            (C251 * C3444 + C84257 * C3631) * C13629 +
            (C251 * C3451 + C84257 * C3638) * C84574 +
            (C251 * C3445 + C84257 * C3632) * C13627 +
            (C251 * C3452 + C84257 * C3639) * C84590 +
            (C251 * C3446 + C84257 * C3633) * C13625) *
               C13622 +
           ((C251 * C1186 + C84257 * C1300) * C84550 +
            (C251 * C1181 + C84257 * C1295) * C13629 +
            (C251 * C1187 + C84257 * C1301) * C84574 +
            (C251 * C1182 + C84257 * C1296) * C13627 +
            (C251 * C1188 + C84257 * C1302) * C84590 +
            (C251 * C1183 + C84257 * C1297) * C13625) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C15867 +
            (C251 * C108 + C84257 * C258) * C84188) *
               C15861 +
           (C16421 + C16422) * C15862 + (C16423 + C16424) * C15863 +
           (C16437 + C16438) * C15864 + (C16439 + C16440) * C15865) *
              C1177 -
          (((C251 * C16808 + C84257 * C16907) * C84188 +
            (C251 * C16806 + C84257 * C16905) * C15867) *
               C15865 +
           ((C251 * C16809 + C84257 * C16908) * C84188 +
            (C251 * C16807 + C84257 * C16906) * C15867) *
               C15864 +
           ((C251 * C3449 + C84257 * C3636) * C84188 +
            (C251 * C3443 + C84257 * C3630) * C15867) *
               C15863 +
           ((C251 * C3452 + C84257 * C3639) * C84188 +
            (C251 * C3446 + C84257 * C3633) * C15867) *
               C15862 +
           ((C251 * C1188 + C84257 * C1302) * C84188 +
            (C251 * C1183 + C84257 * C1297) * C15867) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C172 +
           (C93 * C173 + C81 * C330 + C95 * C174 + C82 * C331 + C97 * C175 +
            C83 * C332 + C99 * C176 + C84 * C333 + C101 * C177 + C85 * C334) *
               C84246) *
              C84257 * C1177 -
          ((C101 * C1241 + C85 * C1345 + C99 * C1242 + C84 * C1346 +
            C97 * C1243 + C83 * C1347 + C95 * C1244 + C82 * C1348 +
            C93 * C1245 + C81 * C1349) *
               C84246 +
           (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
            C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
            C93 * C1183 + C81 * C1188) *
               C172) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
            C1680 * C104 + C84550 * C110) *
               C1785 +
           (C1676 * C173 + C1669 * C330 + C1678 * C174 + C1670 * C331 +
            C1680 * C175 + C84550 * C332) *
               C84596 +
           (C2925 + C2926 + C2927) * C1786 + (C2928 + C2929 + C2930) * C84581 +
           (C2931 + C2932 + C2933) * C1787 + (C2934 + C2935 + C2936) * C84558) *
              C84257 * C1177 -
          ((C1680 * C3542 + C84550 * C3714 + C1678 * C3544 + C1670 * C3715 +
            C1676 * C3546 + C1669 * C3716) *
               C84558 +
           (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
            C1676 * C3443 + C1669 * C3449) *
               C1787 +
           (C1680 * C3543 + C84550 * C3717 + C1678 * C3545 + C1670 * C3718 +
            C1676 * C3547 + C1669 * C3719) *
               C84581 +
           (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
            C1676 * C3446 + C1669 * C3452) *
               C1786 +
           (C1680 * C1243 + C84550 * C1347 + C1678 * C1244 + C1670 * C1348 +
            C1676 * C1245 + C1669 * C1349) *
               C84596 +
           (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
            C1676 * C1183 + C1669 * C1188) *
               C1785) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
            C13629 * C104 + C84550 * C110) *
               C13722 +
           (C13625 * C173 + C84590 * C330 + C13627 * C174 + C84574 * C331 +
            C13629 * C175 + C84550 * C332) *
               C13621 +
           (C14726 + C14727 + C14728) * C13723 +
           (C14729 + C14730 + C14731) * C13622 +
           (C14732 + C14733 + C14734) * C13724 +
           (C14735 + C14736 + C14737) * C84558) *
              C84257 * C1177 -
          ((C13629 * C3542 + C84550 * C3714 + C13627 * C3544 + C84574 * C3715 +
            C13625 * C3546 + C84590 * C3716) *
               C84558 +
           (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
            C13625 * C3443 + C84590 * C3449) *
               C13724 +
           (C13629 * C3543 + C84550 * C3717 + C13627 * C3545 + C84574 * C3718 +
            C13625 * C3547 + C84590 * C3719) *
               C13622 +
           (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
            C13625 * C3446 + C84590 * C3452) *
               C13723 +
           (C13629 * C1243 + C84550 * C1347 + C13627 * C1244 + C84574 * C1348 +
            C13625 * C1245 + C84590 * C1349) *
               C13621 +
           (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
            C13625 * C1183 + C84590 * C1188) *
               C13722) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15867 * C102 + C84188 * C108) * C15926 +
           (C15867 * C173 + C84188 * C330) * C15861 + C16500 * C15927 +
           C16501 * C15862 + C16502 * C15928 + C16503 * C15863 +
           C16504 * C15929 + C16505 * C15864 + C16506 * C15930 +
           C16507 * C15865) *
              C84257 * C1177 -
          ((C15867 * C16859 + C84188 * C16951) * C15865 +
           (C15867 * C16806 + C84188 * C16808) * C15930 +
           (C15867 * C16860 + C84188 * C16952) * C15864 +
           (C15867 * C16807 + C84188 * C16809) * C15929 +
           (C15867 * C3546 + C84188 * C3716) * C15863 +
           (C15867 * C3443 + C84188 * C3449) * C15928 +
           (C15867 * C3547 + C84188 * C3719) * C15862 +
           (C15867 * C3446 + C84188 * C3452) * C15927 +
           (C15867 * C1245 + C84188 * C1349) * C15861 +
           (C15867 * C1183 + C84188 * C1188) * C15926) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C378 * C102 + C386 + C386 + C84246 * C379) * C81 + C408 * C82 +
           C409 * C83 + C410 * C84 + C411 * C85) *
              C84257 * C1177 -
          ((C378 * C1179 + C1398 + C1398 + C84246 * C1392) * C85 +
           (C378 * C1180 + C1399 + C1399 + C84246 * C1393) * C84 +
           (C378 * C1181 + C1400 + C1400 + C84246 * C1394) * C83 +
           (C378 * C1182 + C1401 + C1401 + C84246 * C1395) * C82 +
           (C378 * C1183 + C1402 + C1402 + C84246 * C1396) * C81) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2090 * C102 + C2098 + C2098 + C84596 * C379 + C2091 * C723 +
            C2099 + C2099 + C84581 * C936 + C2092 * C1681 + C2100 + C2100 +
            C84558 * C2093) *
               C1669 +
           (C2134 + C2135 + C2136) * C1670 + (C2137 + C2138 + C2139) * C84550) *
              C84257 * C1177 -
          ((C2092 * C3441 + C3801 + C3801 + C84558 * C3794 + C2091 * C3444 +
            C3802 + C3802 + C84581 * C3795 + C2090 * C1181 + C3803 + C3803 +
            C84596 * C1394) *
               C84550 +
           (C2092 * C3442 + C3804 + C3804 + C84558 * C3796 + C2091 * C3445 +
            C3805 + C3805 + C84581 * C3797 + C2090 * C1182 + C3806 + C3806 +
            C84596 * C1395) *
               C1670 +
           (C2092 * C3443 + C3807 + C3807 + C84558 * C3798 + C2091 * C3446 +
            C3808 + C3808 + C84581 * C3799 + C2090 * C1183 + C3809 + C3809 +
            C84596 * C1396) *
               C1669) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13983 * C102 + C13987 + C13987 + C13621 * C379 + C13984 * C723 +
            C13988 + C13988 + C13622 * C936 + C13985 * C1681 + C13989 + C13989 +
            C84558 * C2093) *
               C84590 +
           (C14023 + C14024 + C14025) * C84574 +
           (C14026 + C14027 + C14028) * C84550) *
              C84257 * C1177 -
          ((C13985 * C3441 + C15514 + C15514 + C84558 * C3794 + C13984 * C3444 +
            C15515 + C15515 + C13622 * C3795 + C13983 * C1181 + C15516 +
            C15516 + C13621 * C1394) *
               C84550 +
           (C13985 * C3442 + C15517 + C15517 + C84558 * C3796 + C13984 * C3445 +
            C15518 + C15518 + C13622 * C3797 + C13983 * C1182 + C15519 +
            C15519 + C13621 * C1395) *
               C84574 +
           (C13985 * C3443 + C15520 + C15520 + C84558 * C3798 + C13984 * C3446 +
            C15521 + C15521 + C13622 * C3799 + C13983 * C1183 + C15522 +
            C15522 + C13621 * C1396) *
               C84590) *
              C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C16067 * C102 + C16075 + C16075 + C15861 * C379 + C16068 * C723 +
           C16076 + C16076 + C15862 * C936 + C16069 * C1681 + C16077 + C16077 +
           C15863 * C2093 + C16070 * C2599 + C16078 + C16078 + C15864 * C3012 +
           C16071 * C15868 + C16079 + C16079 + C15865 * C16072) *
              C84188 * C84257 * C1177 -
          (C16071 * C16806 + C16998 + C16998 + C15865 * C16995 +
           C16070 * C16807 + C16999 + C16999 + C15864 * C16996 +
           C16069 * C3443 + C17000 + C17000 + C15863 * C3798 + C16068 * C3446 +
           C17001 + C17001 + C15862 * C3799 + C16067 * C1183 + C17002 + C17002 +
           C15861 * C1396) *
              C84188 * C84257 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C172 +
            (C251 * C173 + C84257 * C453) * C84246) *
               C81 +
           (C460 + C476) * C82 + (C463 + C477) * C83 + (C466 + C478) * C84 +
           (C469 + C479) * C85) *
              C1177 -
          (((C251 * C1241 + C84257 * C1444) * C84246 +
            (C251 * C1179 + C84257 * C1293) * C172) *
               C85 +
           ((C251 * C1242 + C84257 * C1445) * C84246 +
            (C251 * C1180 + C84257 * C1294) * C172) *
               C84 +
           ((C251 * C1243 + C84257 * C1446) * C84246 +
            (C251 * C1181 + C84257 * C1295) * C172) *
               C83 +
           ((C251 * C1244 + C84257 * C1447) * C84246 +
            (C251 * C1182 + C84257 * C1296) * C172) *
               C82 +
           ((C251 * C1245 + C84257 * C1448) * C84246 +
            (C251 * C1183 + C84257 * C1297) * C172) *
               C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C1785 +
            (C251 * C173 + C84257 * C453) * C84596 + C2816 * C1786 +
            C3104 * C84581 + C2818 * C1787 + C3105 * C84558) *
               C1669 +
           (C2218 + C2219 + C2220 + C2238 + C2223 + C2239) * C1670 +
           (C2226 + C2227 + C2228 + C2240 + C2231 + C2241) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C1787 +
            (C251 * C3543 + C84257 * C3884) * C84581 +
            (C251 * C3444 + C84257 * C3631) * C1786 +
            (C251 * C1243 + C84257 * C1446) * C84596 +
            (C251 * C1181 + C84257 * C1295) * C1785) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C1787 +
            (C251 * C3545 + C84257 * C3886) * C84581 +
            (C251 * C3445 + C84257 * C3632) * C1786 +
            (C251 * C1244 + C84257 * C1447) * C84596 +
            (C251 * C1182 + C84257 * C1296) * C1785) *
               C1670 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C1787 +
            (C251 * C3547 + C84257 * C3888) * C84581 +
            (C251 * C3446 + C84257 * C3633) * C1786 +
            (C251 * C1245 + C84257 * C1448) * C84596 +
            (C251 * C1183 + C84257 * C1297) * C1785) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C251 * C102 + C84257 * C252) * C13722 +
            (C251 * C173 + C84257 * C453) * C13621 + C2816 * C13723 +
            C3104 * C13622 + C2818 * C13724 + C3105 * C84558) *
               C84590 +
           (C14103 + C14104 + C14105 + C14106 + C14107 + C14108) * C84574 +
           (C14109 + C14110 + C14111 + C14112 + C14113 + C14114) * C84550) *
              C1177 -
          (((C251 * C3542 + C84257 * C3883) * C84558 +
            (C251 * C3441 + C84257 * C3628) * C13724 +
            (C251 * C3543 + C84257 * C3884) * C13622 +
            (C251 * C3444 + C84257 * C3631) * C13723 +
            (C251 * C1243 + C84257 * C1446) * C13621 +
            (C251 * C1181 + C84257 * C1295) * C13722) *
               C84550 +
           ((C251 * C3544 + C84257 * C3885) * C84558 +
            (C251 * C3442 + C84257 * C3629) * C13724 +
            (C251 * C3545 + C84257 * C3886) * C13622 +
            (C251 * C3445 + C84257 * C3632) * C13723 +
            (C251 * C1244 + C84257 * C1447) * C13621 +
            (C251 * C1182 + C84257 * C1296) * C13722) *
               C84574 +
           ((C251 * C3546 + C84257 * C3887) * C84558 +
            (C251 * C3443 + C84257 * C3630) * C13724 +
            (C251 * C3547 + C84257 * C3888) * C13622 +
            (C251 * C3446 + C84257 * C3633) * C13723 +
            (C251 * C1245 + C84257 * C1448) * C13621 +
            (C251 * C1183 + C84257 * C1297) * C13722) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C251 * C102 + C84257 * C252) * C15926 +
           (C251 * C173 + C84257 * C453) * C15861 + C2816 * C15927 +
           C3104 * C15862 + C2818 * C15928 + C3105 * C15863 + C16433 * C15929 +
           C16603 * C15864 + C16435 * C15930 + C16604 * C15865) *
              C84188 * C1177 -
          ((C251 * C16859 + C84257 * C17044) * C15865 +
           (C251 * C16806 + C84257 * C16905) * C15930 +
           (C251 * C16860 + C84257 * C17045) * C15864 +
           (C251 * C16807 + C84257 * C16906) * C15929 +
           (C251 * C3546 + C84257 * C3887) * C15863 +
           (C251 * C3443 + C84257 * C3630) * C15928 +
           (C251 * C3547 + C84257 * C3888) * C15862 +
           (C251 * C3446 + C84257 * C3633) * C15927 +
           (C251 * C1245 + C84257 * C1448) * C15861 +
           (C251 * C1183 + C84257 * C1297) * C15926) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C93 * C102 + C81 * C108 + C95 * C103 + C82 * C109 + C97 * C104 +
            C83 * C110 + C99 * C105 + C84 * C111 + C101 * C106 + C85 * C112) *
               C251 +
           (C93 * C252 + C81 * C521 + C95 * C253 + C82 * C522 + C97 * C254 +
            C83 * C523 + C99 * C255 + C84 * C524 + C101 * C256 + C85 * C525) *
               C84257) *
              C84246 * C1177 -
          ((C101 * C1293 + C85 * C1491 + C99 * C1294 + C84 * C1492 +
            C97 * C1295 + C83 * C1493 + C95 * C1296 + C82 * C1494 +
            C93 * C1297 + C81 * C1495) *
               C84257 +
           (C101 * C1179 + C85 * C1184 + C99 * C1180 + C84 * C1185 +
            C97 * C1181 + C83 * C1186 + C95 * C1182 + C82 * C1187 +
            C93 * C1183 + C81 * C1188) *
               C251) *
              C84246 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1676 * C102 + C1669 * C108 + C1678 * C103 + C1670 * C109 +
             C1680 * C104 + C84550 * C110) *
                C251 +
            (C1676 * C252 + C1669 * C521 + C1678 * C253 + C1670 * C522 +
             C1680 * C254 + C84550 * C523) *
                C84257) *
               C84596 +
           ((C2925 + C2926 + C2927) * C251 + (C3195 + C3196 + C3197) * C84257) *
               C84581 +
           ((C2931 + C2932 + C2933) * C251 + (C3198 + C3199 + C3200) * C84257) *
               C84558) *
              C1177 -
          (((C1680 * C3628 + C84550 * C3963 + C1678 * C3629 + C1670 * C3964 +
             C1676 * C3630 + C1669 * C3965) *
                C84257 +
            (C1680 * C3441 + C84550 * C3447 + C1678 * C3442 + C1670 * C3448 +
             C1676 * C3443 + C1669 * C3449) *
                C251) *
               C84558 +
           ((C1680 * C3631 + C84550 * C3966 + C1678 * C3632 + C1670 * C3967 +
             C1676 * C3633 + C1669 * C3968) *
                C84257 +
            (C1680 * C3444 + C84550 * C3450 + C1678 * C3445 + C1670 * C3451 +
             C1676 * C3446 + C1669 * C3452) *
                C251) *
               C84581 +
           ((C1680 * C1295 + C84550 * C1493 + C1678 * C1296 + C1670 * C1494 +
             C1676 * C1297 + C1669 * C1495) *
                C84257 +
            (C1680 * C1181 + C84550 * C1186 + C1678 * C1182 + C1670 * C1187 +
             C1676 * C1183 + C1669 * C1188) *
                C251) *
               C84596) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13625 * C102 + C84590 * C108 + C13627 * C103 + C84574 * C109 +
             C13629 * C104 + C84550 * C110) *
                C251 +
            (C13625 * C252 + C84590 * C521 + C13627 * C253 + C84574 * C522 +
             C13629 * C254 + C84550 * C523) *
                C84257) *
               C13621 +
           ((C14726 + C14727 + C14728) * C251 +
            (C14981 + C14982 + C14983) * C84257) *
               C13622 +
           ((C14732 + C14733 + C14734) * C251 +
            (C14984 + C14985 + C14986) * C84257) *
               C84558) *
              C1177 -
          (((C13629 * C3628 + C84550 * C3963 + C13627 * C3629 + C84574 * C3964 +
             C13625 * C3630 + C84590 * C3965) *
                C84257 +
            (C13629 * C3441 + C84550 * C3447 + C13627 * C3442 + C84574 * C3448 +
             C13625 * C3443 + C84590 * C3449) *
                C251) *
               C84558 +
           ((C13629 * C3631 + C84550 * C3966 + C13627 * C3632 + C84574 * C3967 +
             C13625 * C3633 + C84590 * C3968) *
                C84257 +
            (C13629 * C3444 + C84550 * C3450 + C13627 * C3445 + C84574 * C3451 +
             C13625 * C3446 + C84590 * C3452) *
                C251) *
               C13622 +
           ((C13629 * C1295 + C84550 * C1493 + C13627 * C1296 + C84574 * C1494 +
             C13625 * C1297 + C84590 * C1495) *
                C84257 +
            (C13629 * C1181 + C84550 * C1186 + C13627 * C1182 + C84574 * C1187 +
             C13625 * C1183 + C84590 * C1188) *
                C251) *
               C13621) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15867 * C102 + C84188 * C108) * C251 +
            (C15867 * C252 + C84188 * C521) * C84257) *
               C15861 +
           (C16648 + C16664) * C15862 + (C16651 + C16665) * C15863 +
           (C16654 + C16666) * C15864 + (C16657 + C16667) * C15865) *
              C1177 -
          (((C15867 * C16905 + C84188 * C17088) * C84257 +
            (C15867 * C16806 + C84188 * C16808) * C251) *
               C15865 +
           ((C15867 * C16906 + C84188 * C17089) * C84257 +
            (C15867 * C16807 + C84188 * C16809) * C251) *
               C15864 +
           ((C15867 * C3630 + C84188 * C3965) * C84257 +
            (C15867 * C3443 + C84188 * C3449) * C251) *
               C15863 +
           ((C15867 * C3633 + C84188 * C3968) * C84257 +
            (C15867 * C3446 + C84188 * C3452) * C251) *
               C15862 +
           ((C15867 * C1297 + C84188 * C1495) * C84257 +
            (C15867 * C1183 + C84188 * C1188) * C251) *
               C15861) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C172 * C102 + C84246 * C173) * C251 +
            (C172 * C252 + C84246 * C569) * C84257) *
               C81 +
           (C576 + C592) * C82 + (C579 + C593) * C83 + (C582 + C594) * C84 +
           (C585 + C595) * C85) *
              C1177 -
          (((C172 * C1293 + C84246 * C1538) * C84257 +
            (C172 * C1179 + C84246 * C1241) * C251) *
               C85 +
           ((C172 * C1294 + C84246 * C1539) * C84257 +
            (C172 * C1180 + C84246 * C1242) * C251) *
               C84 +
           ((C172 * C1295 + C84246 * C1540) * C84257 +
            (C172 * C1181 + C84246 * C1243) * C251) *
               C83 +
           ((C172 * C1296 + C84246 * C1541) * C84257 +
            (C172 * C1182 + C84246 * C1244) * C251) *
               C82 +
           ((C172 * C1297 + C84246 * C1542) * C84257 +
            (C172 * C1183 + C84246 * C1245) * C251) *
               C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1785 * C102 + C84596 * C173 + C1786 * C723 + C84581 * C785 +
             C1787 * C1681 + C84558 * C1788) *
                C251 +
            (C1785 * C252 + C84596 * C569 + C1786 * C837 + C84581 * C1082 +
             C1787 * C1906 + C84558 * C2393) *
                C84257) *
               C1669 +
           ((C1821 + C1822 + C1823) * C251 + (C2410 + C2411 + C2412) * C84257) *
               C1670 +
           ((C1827 + C1828 + C1829) * C251 + (C2413 + C2414 + C2415) * C84257) *
               C84550) *
              C1177 -
          (((C1787 * C3628 + C84558 * C4043 + C1786 * C3631 + C84581 * C4044 +
             C1785 * C1295 + C84596 * C1540) *
                C84257 +
            (C1787 * C3441 + C84558 * C3542 + C1786 * C3444 + C84581 * C3543 +
             C1785 * C1181 + C84596 * C1243) *
                C251) *
               C84550 +
           ((C1787 * C3629 + C84558 * C4045 + C1786 * C3632 + C84581 * C4046 +
             C1785 * C1296 + C84596 * C1541) *
                C84257 +
            (C1787 * C3442 + C84558 * C3544 + C1786 * C3445 + C84581 * C3545 +
             C1785 * C1182 + C84596 * C1244) *
                C251) *
               C1670 +
           ((C1787 * C3630 + C84558 * C4047 + C1786 * C3633 + C84581 * C4048 +
             C1785 * C1297 + C84596 * C1542) *
                C84257 +
            (C1787 * C3443 + C84558 * C3546 + C1786 * C3446 + C84581 * C3547 +
             C1785 * C1183 + C84596 * C1245) *
                C251) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13722 * C102 + C13621 * C173 + C13723 * C723 + C13622 * C785 +
             C13724 * C1681 + C84558 * C1788) *
                C251 +
            (C13722 * C252 + C13621 * C569 + C13723 * C837 + C13622 * C1082 +
             C13724 * C1906 + C84558 * C2393) *
                C84257) *
               C84590 +
           ((C13750 + C13751 + C13752) * C251 +
            (C14275 + C14276 + C14277) * C84257) *
               C84574 +
           ((C13756 + C13757 + C13758) * C251 +
            (C14278 + C14279 + C14280) * C84257) *
               C84550) *
              C1177 -
          (((C13724 * C3628 + C84558 * C4043 + C13723 * C3631 + C13622 * C4044 +
             C13722 * C1295 + C13621 * C1540) *
                C84257 +
            (C13724 * C3441 + C84558 * C3542 + C13723 * C3444 + C13622 * C3543 +
             C13722 * C1181 + C13621 * C1243) *
                C251) *
               C84550 +
           ((C13724 * C3629 + C84558 * C4045 + C13723 * C3632 + C13622 * C4046 +
             C13722 * C1296 + C13621 * C1541) *
                C84257 +
            (C13724 * C3442 + C84558 * C3544 + C13723 * C3445 + C13622 * C3545 +
             C13722 * C1182 + C13621 * C1244) *
                C251) *
               C84574 +
           ((C13724 * C3630 + C84558 * C4047 + C13723 * C3633 + C13622 * C4048 +
             C13722 * C1297 + C13621 * C1542) *
                C84257 +
            (C13724 * C3443 + C84558 * C3546 + C13723 * C3446 + C13622 * C3547 +
             C13722 * C1183 + C13621 * C1245) *
                C251) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15926 * C102 + C15861 * C173 + C15927 * C723 + C15862 * C785 +
            C15928 * C1681 + C15863 * C1788 + C15929 * C2599 + C15864 * C2715 +
            C15930 * C15868 + C15865 * C15931) *
               C251 +
           (C15926 * C252 + C15861 * C569 + C15927 * C837 + C15862 * C1082 +
            C15928 * C1906 + C15863 * C2393 + C15929 * C2795 + C15864 * C3276 +
            C15930 * C15977 + C15865 * C16214) *
               C84257) *
              C84188 * C1177 -
          ((C15930 * C16905 + C15865 * C17132 + C15929 * C16906 +
            C15864 * C17133 + C15928 * C3630 + C15863 * C4047 + C15927 * C3633 +
            C15862 * C4048 + C15926 * C1297 + C15861 * C1542) *
               C84257 +
           (C15930 * C16806 + C15865 * C16859 + C15929 * C16807 +
            C15864 * C16860 + C15928 * C3443 + C15863 * C3546 + C15927 * C3446 +
            C15862 * C3547 + C15926 * C1183 + C15861 * C1245) *
               C251) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C84246 * C81 +
           C671 * C82 + C672 * C83 + C673 * C84 + C674 * C85) *
              C1177 -
          ((C637 * C1179 + C1591 + C1591 + C84257 * C1585) * C84246 * C85 +
           (C637 * C1180 + C1592 + C1592 + C84257 * C1586) * C84246 * C84 +
           (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84246 * C83 +
           (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84246 * C82 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84246 * C81) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C84596 +
            C3366 * C84581 + C3367 * C84558) *
               C1669 +
           (C2495 + C2520 + C2521) * C1670 + (C2501 + C2522 + C2523) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C84581 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C84596) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C84581 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C84596) *
               C1670 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C84581 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C84596) *
               C1669) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C637 * C102 + C645 + C645 + C84257 * C638) * C13621 +
            C3366 * C13622 + C3367 * C84558) *
               C84590 +
           (C14355 + C14356 + C14357) * C84574 +
           (C14358 + C14359 + C14360) * C84550) *
              C1177 -
          (((C637 * C3441 + C4130 + C4130 + C84257 * C4123) * C84558 +
            (C637 * C3444 + C4131 + C4131 + C84257 * C4124) * C13622 +
            (C637 * C1181 + C1593 + C1593 + C84257 * C1587) * C13621) *
               C84550 +
           ((C637 * C3442 + C4132 + C4132 + C84257 * C4125) * C84558 +
            (C637 * C3445 + C4133 + C4133 + C84257 * C4126) * C13622 +
            (C637 * C1182 + C1594 + C1594 + C84257 * C1588) * C13621) *
               C84574 +
           ((C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C84558 +
            (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C13622 +
            (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C13621) *
               C84590) *
              C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C637 * C102 + C645 + C645 + C84257 * C638) * C15861 +
           C3366 * C15862 + C3367 * C15863 + C16763 * C15864 +
           C16764 * C15865) *
              C84188 * C1177 -
          ((C637 * C16806 + C17179 + C17179 + C84257 * C17176) * C15865 +
           (C637 * C16807 + C17180 + C17180 + C84257 * C17177) * C15864 +
           (C637 * C3443 + C4134 + C4134 + C84257 * C4127) * C15863 +
           (C637 * C3446 + C4135 + C4135 + C84257 * C4128) * C15862 +
           (C637 * C1183 + C1595 + C1595 + C84257 * C1589) * C15861) *
              C84188 * C1178) *
         C84604 * C84605) /
            (p * q * std::sqrt(p + q));
}
